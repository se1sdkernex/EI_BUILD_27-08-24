
EI_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002781c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000061e0  08027a1c  08027a1c  00037a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802dbfc  0802dbfc  000404e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802dbfc  0802dbfc  0003dbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802dc04  0802dc04  000404e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802dc04  0802dc04  0003dc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802dc08  0802dc08  0003dc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  0802dc0c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200003a4  0802dfb0  000403a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000444  0802e050  00040444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00015d8c  200004e4  0802e0f0  000404e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20016270  0802e0f0  00046270  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000404e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a64e  00000000  00000000  00040512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000881e  00000000  00000000  0007ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002560  00000000  00000000  00083380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002270  00000000  00000000  000858e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00044171  00000000  00000000  00087b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004afc6  00000000  00000000  000cbcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013d33b  00000000  00000000  00116c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00253fc2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a374  00000000  00000000  00254014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200004e4 	.word	0x200004e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08027a04 	.word	0x08027a04

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200004e8 	.word	0x200004e8
 800023c:	08027a04 	.word	0x08027a04

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000fc4 	.word	0x20000fc4
 8000a70:	08027a1c 	.word	0x08027a1c
 8000a74:	08027a28 	.word	0x08027a28
 8000a78:	08027a38 	.word	0x08027a38
 8000a7c:	08027a48 	.word	0x08027a48
 8000a80:	08027a5c 	.word	0x08027a5c
 8000a84:	08027a70 	.word	0x08027a70
 8000a88:	08027a84 	.word	0x08027a84
 8000a8c:	08027a90 	.word	0x08027a90
 8000a90:	200013ac 	.word	0x200013ac

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01e fab5 	bl	801f014 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f025 fde1 	bl	802667c <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000dc10 	.word	0x2000dc10
 8000ac8:	20000340 	.word	0x20000340

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f01b f989 	bl	801bdf4 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f01b f979 	bl	801bdf4 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f01b f968 	bl	801bdf4 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000fbc 	.word	0x20000fbc
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f025 fba4 	bl	80262c8 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00f f9f7 	bl	800ff78 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f018 f94d 	bl	8018e34 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f018 f8fc 	bl	8018db4 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f025 fc5a 	bl	8026498 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f025 fcce 	bl	80265d0 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f025 fc24 	bl	8026498 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f025 fc9f 	bl	80265d0 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f025 fbf2 	bl	8026498 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f025 fc8b 	bl	80265d0 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f025 fbd5 	bl	8026498 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f025 fbc7 	bl	8026498 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f025 fc60 	bl	80265d0 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f025 fba7 	bl	8026498 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f025 fb99 	bl	8026498 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f025 fc32 	bl	80265d0 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f025 fb74 	bl	8026498 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f025 fb52 	bl	8026498 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f025 fb39 	bl	8026498 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f025 fb2b 	bl	8026498 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f025 fb1d 	bl	8026498 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f025 fbb5 	bl	80265d0 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00f fdfb 	bl	8010a70 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000bfcc 	.word	0x2000bfcc
 8000e88:	08027a98 	.word	0x08027a98
 8000e8c:	20000bba 	.word	0x20000bba
 8000e90:	08027ab0 	.word	0x08027ab0
 8000e94:	20000ff6 	.word	0x20000ff6
 8000e98:	08027af0 	.word	0x08027af0
 8000e9c:	20000bbb 	.word	0x20000bbb
 8000ea0:	08027b04 	.word	0x08027b04
 8000ea4:	20001028 	.word	0x20001028
 8000ea8:	08027b20 	.word	0x08027b20
 8000eac:	08027b3c 	.word	0x08027b3c
 8000eb0:	2000308c 	.word	0x2000308c
 8000eb4:	08027b4c 	.word	0x08027b4c
 8000eb8:	2000105a 	.word	0x2000105a
 8000ebc:	08027b60 	.word	0x08027b60
 8000ec0:	2000108c 	.word	0x2000108c
 8000ec4:	08027b70 	.word	0x08027b70
 8000ec8:	200010be 	.word	0x200010be
 8000ecc:	200010f0 	.word	0x200010f0
 8000ed0:	20001122 	.word	0x20001122
 8000ed4:	08027b8c 	.word	0x08027b8c
 8000ed8:	20001154 	.word	0x20001154
 8000edc:	08027b9c 	.word	0x08027b9c
 8000ee0:	20001186 	.word	0x20001186

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f025 f99c 	bl	8026258 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000fc4 	.word	0x20000fc4
 8000f48:	200013ac 	.word	0x200013ac

08000f4c <CheckEIPC_DAT_CRC>:
		printf("%s\n",Commands_List[Traverser]);
	}
}

void CheckEIPC_DAT_CRC(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	static uint32_t CheckClk = 0;

	if(HAL_Elaps_Ticks(CheckClk) > FOUR_SEC)
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <CheckEIPC_DAT_CRC+0x58>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00f f80f 	bl	800ff78 <HAL_Elaps_Ticks>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f60:	d91d      	bls.n	8000f9e <CheckEIPC_DAT_CRC+0x52>
	{
		if((DatCrcXchangeSelf_st.App_CRC != DatCrcXchangeOther_st.App_CRC) && (DatCrcXchangeOther_st.App_CRC != 0))
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <CheckEIPC_DAT_CRC+0x5c>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d012      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00e      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
		{
			printf("\nEIPC's are not in Sync.....!!!!!\n");
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f78:	f025 fb2a 	bl	80265d0 <puts>
			printf("Self CRC:%04X\n",DatCrcXchangeSelf_st.App_CRC);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <CheckEIPC_DAT_CRC+0x5c>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f84:	f025 fa88 	bl	8026498 <iprintf>
			printf("Other CRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <CheckEIPC_DAT_CRC+0x6c>)
 8000f90:	f025 fa82 	bl	8026498 <iprintf>
		}
		CheckClk = HAL_GetTick();
 8000f94:	f018 fa76 	bl	8019484 <HAL_GetTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a02      	ldr	r2, [pc, #8]	; (8000fa4 <CheckEIPC_DAT_CRC+0x58>)
 8000f9c:	6013      	str	r3, [r2, #0]
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200013b0 	.word	0x200013b0
 8000fa8:	20000bb4 	.word	0x20000bb4
 8000fac:	20000bb8 	.word	0x20000bb8
 8000fb0:	08027bd8 	.word	0x08027bd8
 8000fb4:	08027bfc 	.word	0x08027bfc
 8000fb8:	08027c0c 	.word	0x08027c0c

08000fbc <Check_OnlineDiag_OFC_Modem>:
		0x40
};


void Check_OnlineDiag_OFC_Modem(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	static unsigned int ui_Online_DigChkTics;
	if(HAL_Elaps_Ticks(ui_Online_DigChkTics) > (SEVEN*ONE_SEC))           // wait for 30 Sec
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f00e ffd7 	bl	800ff78 <HAL_Elaps_Ticks>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d906      	bls.n	8000fe2 <Check_OnlineDiag_OFC_Modem+0x26>
	{
		Check_Online_Dignostic_RIU();                                //Checking the online dignostic status of network of OFC modem
 8000fd4:	f000 f80a 	bl	8000fec <Check_Online_Dignostic_RIU>
		ui_Online_DigChkTics = HAL_GetTick();
 8000fd8:	f018 fa54 	bl	8019484 <HAL_GetTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a02      	ldr	r2, [pc, #8]	; (8000fe8 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fe0:	6013      	str	r3, [r2, #0]
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20002370 	.word	0x20002370

08000fec <Check_Online_Dignostic_RIU>:

void Check_Online_Dignostic_RIU(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
	//static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Failure_check_flag,Flag = 4,suc_Hold_Flag =1;
	static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Flag = 4,suc_Hold_Flag =1;
	unsigned char index,insert_index = 0,check_index = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	71bb      	strb	r3, [r7, #6]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	717b      	strb	r3, [r7, #5]
	for(index = 0;index< 31; index++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e069      	b.n	80010d4 <Check_Online_Dignostic_RIU+0xe8>
	{
		if(Online_diag_flag[index] == 0)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4a6f      	ldr	r2, [pc, #444]	; (80011c0 <Check_Online_Dignostic_RIU+0x1d4>)
 8001004:	5cd3      	ldrb	r3, [r2, r3]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d108      	bne.n	800101c <Check_Online_Dignostic_RIU+0x30>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],0);
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	b298      	uxth	r0, r3
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	4a6c      	ldr	r2, [pc, #432]	; (80011c4 <Check_Online_Dignostic_RIU+0x1d8>)
 8001012:	441a      	add	r2, r3
 8001014:	2300      	movs	r3, #0
 8001016:	2102      	movs	r1, #2
 8001018:	f7ff fb88 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 1)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a68      	ldr	r2, [pc, #416]	; (80011c0 <Check_Online_Dignostic_RIU+0x1d4>)
 8001020:	5cd3      	ldrb	r3, [r2, r3]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d108      	bne.n	8001038 <Check_Online_Dignostic_RIU+0x4c>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],1);
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	b298      	uxth	r0, r3
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	4a65      	ldr	r2, [pc, #404]	; (80011c4 <Check_Online_Dignostic_RIU+0x1d8>)
 800102e:	441a      	add	r2, r3
 8001030:	2301      	movs	r3, #1
 8001032:	2102      	movs	r1, #2
 8001034:	f7ff fb7a 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 2)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a61      	ldr	r2, [pc, #388]	; (80011c0 <Check_Online_Dignostic_RIU+0x1d4>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d108      	bne.n	8001054 <Check_Online_Dignostic_RIU+0x68>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],2);
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	b298      	uxth	r0, r3
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	4a5e      	ldr	r2, [pc, #376]	; (80011c4 <Check_Online_Dignostic_RIU+0x1d8>)
 800104a:	441a      	add	r2, r3
 800104c:	2302      	movs	r3, #2
 800104e:	2102      	movs	r1, #2
 8001050:	f7ff fb6c 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 3)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a5a      	ldr	r2, [pc, #360]	; (80011c0 <Check_Online_Dignostic_RIU+0x1d4>)
 8001058:	5cd3      	ldrb	r3, [r2, r3]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d108      	bne.n	8001070 <Check_Online_Dignostic_RIU+0x84>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	b298      	uxth	r0, r3
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	4a57      	ldr	r2, [pc, #348]	; (80011c4 <Check_Online_Dignostic_RIU+0x1d8>)
 8001066:	441a      	add	r2, r3
 8001068:	2303      	movs	r3, #3
 800106a:	2102      	movs	r1, #2
 800106c:	f7ff fb5e 	bl	800072c <InsertBits>

		}
		if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (FIFTEEN*ONE_SEC))
 8001070:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <Check_Online_Dignostic_RIU+0x1dc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f00e ff7f 	bl	800ff78 <HAL_Elaps_Ticks>
 800107a:	4603      	mov	r3, r0
 800107c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001080:	4293      	cmp	r3, r2
 8001082:	d913      	bls.n	80010ac <Check_Online_Dignostic_RIU+0xc0>
		{
			if(Online_diag_flag[index] > 0)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	4a4e      	ldr	r2, [pc, #312]	; (80011c0 <Check_Online_Dignostic_RIU+0x1d4>)
 8001088:	5cd3      	ldrb	r3, [r2, r3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00e      	beq.n	80010ac <Check_Online_Dignostic_RIU+0xc0>
			{
				InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	b298      	uxth	r0, r3
 8001092:	797b      	ldrb	r3, [r7, #5]
 8001094:	4a4b      	ldr	r2, [pc, #300]	; (80011c4 <Check_Online_Dignostic_RIU+0x1d8>)
 8001096:	441a      	add	r2, r3
 8001098:	2303      	movs	r3, #3
 800109a:	2102      	movs	r1, #2
 800109c:	f7ff fb46 	bl	800072c <InsertBits>
				ofc_flag1 = 1;
 80010a0:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <Check_Online_Dignostic_RIU+0x1e0>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
				//	ofc_flag1 = 1;
				printf("##############################################Both fiber link failure ocuired$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
 80010a6:	484a      	ldr	r0, [pc, #296]	; (80011d0 <Check_Online_Dignostic_RIU+0x1e4>)
 80010a8:	f025 f9f6 	bl	8026498 <iprintf>

			}
		}
		insert_index =	insert_index + 2;
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	3302      	adds	r3, #2
 80010b0:	71bb      	strb	r3, [r7, #6]
		if(insert_index == 8)
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d104      	bne.n	80010c2 <Check_Online_Dignostic_RIU+0xd6>
		{
			insert_index = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	71bb      	strb	r3, [r7, #6]
			check_index++;
 80010bc:	797b      	ldrb	r3, [r7, #5]
 80010be:	3301      	adds	r3, #1
 80010c0:	717b      	strb	r3, [r7, #5]
		}
		if((check_index == 7)&&(insert_index == 6))
 80010c2:	797b      	ldrb	r3, [r7, #5]
 80010c4:	2b07      	cmp	r3, #7
 80010c6:	d102      	bne.n	80010ce <Check_Online_Dignostic_RIU+0xe2>
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d006      	beq.n	80010dc <Check_Online_Dignostic_RIU+0xf0>
	for(index = 0;index< 31; index++)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	3301      	adds	r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b1e      	cmp	r3, #30
 80010d8:	d992      	bls.n	8001000 <Check_Online_Dignostic_RIU+0x14>
 80010da:	e000      	b.n	80010de <Check_Online_Dignostic_RIU+0xf2>
		{
			break;
 80010dc:	bf00      	nop
		}
	}
	for(index = 0;index< 31; index++)
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	e010      	b.n	8001106 <Check_Online_Dignostic_RIU+0x11a>
	{
		if((Online_diag_flag[index] > 0)&&(Online_diag_flag[index] < 4))
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	4a36      	ldr	r2, [pc, #216]	; (80011c0 <Check_Online_Dignostic_RIU+0x1d4>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <Check_Online_Dignostic_RIU+0x114>
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <Check_Online_Dignostic_RIU+0x1d4>)
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d803      	bhi.n	8001100 <Check_Online_Dignostic_RIU+0x114>
		{
			temp1 = index;
 80010f8:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e8>)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	7013      	strb	r3, [r2, #0]
			break;
 80010fe:	e005      	b.n	800110c <Check_Online_Dignostic_RIU+0x120>
	for(index = 0;index< 31; index++)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	3301      	adds	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b1e      	cmp	r3, #30
 800110a:	d9eb      	bls.n	80010e4 <Check_Online_Dignostic_RIU+0xf8>
		}
	}
	temp2 = temp1;
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e8>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <Check_Online_Dignostic_RIU+0x1ec>)
 8001112:	701a      	strb	r2, [r3, #0]
	temp3 = index;
 8001114:	4a31      	ldr	r2, [pc, #196]	; (80011dc <Check_Online_Dignostic_RIU+0x1f0>)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	7013      	strb	r3, [r2, #0]

	if(temp2 != temp3)
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <Check_Online_Dignostic_RIU+0x1ec>)
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <Check_Online_Dignostic_RIU+0x1f0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d019      	beq.n	800115a <Check_Online_Dignostic_RIU+0x16e>
	{
		printf("\n***********************FIBER LINK OK******************************\n");
 8001126:	482e      	ldr	r0, [pc, #184]	; (80011e0 <Check_Online_Dignostic_RIU+0x1f4>)
 8001128:	f025 fa52 	bl	80265d0 <puts>

		//	ofc_flag2 =0;
		suc_Hold_Flag = 1;
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f8>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
		Failure_check_flag++;
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <Check_Online_Dignostic_RIU+0x1fc>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <Check_Online_Dignostic_RIU+0x1fc>)
 800113c:	701a      	strb	r2, [r3, #0]
		if(ofc_flag1 > 4)
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <Check_Online_Dignostic_RIU+0x1e0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d90c      	bls.n	8001160 <Check_Online_Dignostic_RIU+0x174>
		{
			ofc_flag1 =0;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <Check_Online_Dignostic_RIU+0x1e0>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
			Failure_check_flag =4;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <Check_Online_Dignostic_RIU+0x1fc>)
 800114e:	2204      	movs	r2, #4
 8001150:	701a      	strb	r2, [r3, #0]
			printf("\n****************************ASSIGNED***********************\n");
 8001152:	4826      	ldr	r0, [pc, #152]	; (80011ec <Check_Online_Dignostic_RIU+0x200>)
 8001154:	f025 fa3c 	bl	80265d0 <puts>
 8001158:	e002      	b.n	8001160 <Check_Online_Dignostic_RIU+0x174>
			 */
		}

	}
	else
		Failure_check_flag = 0;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <Check_Online_Dignostic_RIU+0x1fc>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
	if(Failure_check_flag == 250)
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <Check_Online_Dignostic_RIU+0x1fc>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2bfa      	cmp	r3, #250	; 0xfa
 8001166:	d102      	bne.n	800116e <Check_Online_Dignostic_RIU+0x182>
	{
		Failure_check_flag = 6;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <Check_Online_Dignostic_RIU+0x1fc>)
 800116a:	2206      	movs	r2, #6
 800116c:	701a      	strb	r2, [r3, #0]
	}

	if(temp2 == temp3)
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <Check_Online_Dignostic_RIU+0x1ec>)
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <Check_Online_Dignostic_RIU+0x1f0>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d142      	bne.n	8001200 <Check_Online_Dignostic_RIU+0x214>
	{
		CAN_Trans_flag++;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <Check_Online_Dignostic_RIU+0x204>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <Check_Online_Dignostic_RIU+0x204>)
 8001184:	701a      	strb	r2, [r3, #0]
		printf("\n************************FIBER LINK FAIL*****************************\n");
 8001186:	481b      	ldr	r0, [pc, #108]	; (80011f4 <Check_Online_Dignostic_RIU+0x208>)
 8001188:	f025 fa22 	bl	80265d0 <puts>
		//		Online_diag_flag[index] = 3; //raviteja

		if((4 == Flag)&&(1 == suc_Hold_Flag))
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <Check_Online_Dignostic_RIU+0x20c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b04      	cmp	r3, #4
 8001192:	d138      	bne.n	8001206 <Check_Online_Dignostic_RIU+0x21a>
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d134      	bne.n	8001206 <Check_Online_Dignostic_RIU+0x21a>
		{
			if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (12*ONE_SEC))
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <Check_Online_Dignostic_RIU+0x1dc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00e fee9 	bl	800ff78 <HAL_Elaps_Ticks>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d92a      	bls.n	8001206 <Check_Online_Dignostic_RIU+0x21a>
			{
				suc_Hold_Flag = 0;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
				printf("\n Sending the packet to MIE 1 and MIE 2");
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <Check_Online_Dignostic_RIU+0x210>)
 80011b8:	f025 f96e 	bl	8026498 <iprintf>
 80011bc:	e023      	b.n	8001206 <Check_Online_Dignostic_RIU+0x21a>
 80011be:	bf00      	nop
 80011c0:	20002368 	.word	0x20002368
 80011c4:	200013b4 	.word	0x200013b4
 80011c8:	20002360 	.word	0x20002360
 80011cc:	20002364 	.word	0x20002364
 80011d0:	08027c1c 	.word	0x08027c1c
 80011d4:	20002374 	.word	0x20002374
 80011d8:	20002375 	.word	0x20002375
 80011dc:	20002376 	.word	0x20002376
 80011e0:	08027c90 	.word	0x08027c90
 80011e4:	20000308 	.word	0x20000308
 80011e8:	2000235c 	.word	0x2000235c
 80011ec:	08027cd4 	.word	0x08027cd4
 80011f0:	20002377 	.word	0x20002377
 80011f4:	08027d14 	.word	0x08027d14
 80011f8:	20000309 	.word	0x20000309
 80011fc:	08027d5c 	.word	0x08027d5c

			}
		}
	}
	else
		CAN_Trans_flag = 0;
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <Check_Online_Dignostic_RIU+0x2d0>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
	if(CAN_Trans_flag == 250)
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <Check_Online_Dignostic_RIU+0x2d0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2bfa      	cmp	r3, #250	; 0xfa
 800120c:	d102      	bne.n	8001214 <Check_Online_Dignostic_RIU+0x228>
	{
		CAN_Trans_flag = 6;
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <Check_Online_Dignostic_RIU+0x2d0>)
 8001210:	2206      	movs	r2, #6
 8001212:	701a      	strb	r2, [r3, #0]
	}
	if((CAN_Trans_flag > 3) && (CAN_Trans_flag < 6) && (Flag == 2))
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <Check_Online_Dignostic_RIU+0x2d0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d915      	bls.n	8001248 <Check_Online_Dignostic_RIU+0x25c>
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <Check_Online_Dignostic_RIU+0x2d0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b05      	cmp	r3, #5
 8001222:	d811      	bhi.n	8001248 <Check_Online_Dignostic_RIU+0x25c>
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <Check_Online_Dignostic_RIU+0x2d4>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d10d      	bne.n	8001248 <Check_Online_Dignostic_RIU+0x25c>
		//			{
		//
		//			printf("\n222222Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
		//			}

		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN FAILURE\n");
 800122c:	4825      	ldr	r0, [pc, #148]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d8>)
 800122e:	f025 f9cf 	bl	80265d0 <puts>
		default:
			printf("ERROR                  \t");
		}
		 */

		Failure_check_flag = 0;
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <Check_Online_Dignostic_RIU+0x2dc>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
		Flag = 4;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <Check_Online_Dignostic_RIU+0x2d4>)
 800123a:	2204      	movs	r2, #4
 800123c:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 800123e:	2206      	movs	r2, #6
 8001240:	2100      	movs	r1, #0
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <Check_Online_Dignostic_RIU+0x2e0>)
 8001244:	f025 f840 	bl	80262c8 <memset>
		//printf("\n111******************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	if(((Failure_check_flag > 3) && (Failure_check_flag < 6)&&(Flag == 4))
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <Check_Online_Dignostic_RIU+0x2dc>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d907      	bls.n	8001260 <Check_Online_Dignostic_RIU+0x274>
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <Check_Online_Dignostic_RIU+0x2dc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b05      	cmp	r3, #5
 8001256:	d803      	bhi.n	8001260 <Check_Online_Dignostic_RIU+0x274>
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <Check_Online_Dignostic_RIU+0x2d4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d003      	beq.n	8001268 <Check_Online_Dignostic_RIU+0x27c>
			||(ofc_flag1 > 1))
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <Check_Online_Dignostic_RIU+0x2e4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d916      	bls.n	8001296 <Check_Online_Dignostic_RIU+0x2aa>
	{
		if(ofc_flag1 >1)
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <Check_Online_Dignostic_RIU+0x2e4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d904      	bls.n	800127a <Check_Online_Dignostic_RIU+0x28e>
		{
			ofc_flag1++;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <Check_Online_Dignostic_RIU+0x2e4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <Check_Online_Dignostic_RIU+0x2e4>)
 8001278:	6013      	str	r3, [r2, #0]
			//			{
			//
			//			printf("\n3333333Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
			//			}
		}
		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN OK\n");
 800127a:	4816      	ldr	r0, [pc, #88]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e8>)
 800127c:	f025 f9a8 	bl	80265d0 <puts>
			break;
		default:
			printf("ERROR                  \t");
		}
		 */
		CAN_Trans_flag = 0;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <Check_Online_Dignostic_RIU+0x2d0>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		Flag = 2;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <Check_Online_Dignostic_RIU+0x2d4>)
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 800128c:	2206      	movs	r2, #6
 800128e:	2100      	movs	r1, #0
 8001290:	480e      	ldr	r0, [pc, #56]	; (80012cc <Check_Online_Dignostic_RIU+0x2e0>)
 8001292:	f025 f819 	bl	80262c8 <memset>
		//	printf("\n************************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	memset(suc_ReceivedMessage,'\0',sizeof(suc_ReceivedMessage));
 8001296:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800129a:	2100      	movs	r1, #0
 800129c:	480e      	ldr	r0, [pc, #56]	; (80012d8 <Check_Online_Dignostic_RIU+0x2ec>)
 800129e:	f025 f813 	bl	80262c8 <memset>
	temp2 = 0;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <Check_Online_Dignostic_RIU+0x2f0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
	temp3 = 0;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <Check_Online_Dignostic_RIU+0x2f4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
	temp1 = 0;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <Check_Online_Dignostic_RIU+0x2f8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20002377 	.word	0x20002377
 80012c0:	20000309 	.word	0x20000309
 80012c4:	08027d84 	.word	0x08027d84
 80012c8:	2000235c 	.word	0x2000235c
 80012cc:	20002368 	.word	0x20002368
 80012d0:	20002364 	.word	0x20002364
 80012d4:	08027db8 	.word	0x08027db8
 80012d8:	200013bc 	.word	0x200013bc
 80012dc:	20002375 	.word	0x20002375
 80012e0:	20002376 	.word	0x20002376
 80012e4:	20002374 	.word	0x20002374

080012e8 <process_to_comReceived>:

void process_to_comReceived(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0


	unsigned int NoofBuffBytes = 0,Dat_Check;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
	//	static unsigned int ui_riucmdTxTics;
	static unsigned char EI_Buffer[300];
	NoofBuffBytes= CommReadAndFormMessage_Cmd(ONE_PORT,EI_Buffer,sizeof(EI_Buffer));
 80012f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f6:	492f      	ldr	r1, [pc, #188]	; (80013b4 <process_to_comReceived+0xcc>)
 80012f8:	2001      	movs	r0, #1
 80012fa:	f000 f86b 	bl	80013d4 <CommReadAndFormMessage_Cmd>
 80012fe:	4603      	mov	r3, r0
 8001300:	607b      	str	r3, [r7, #4]

	if(NoofBuffBytes >0)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d051      	beq.n	80013ac <process_to_comReceived+0xc4>
	{
		if((EI_Buffer[0]>=0x01) &&(EI_Buffer[0] <=0x1F))
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <process_to_comReceived+0xcc>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d048      	beq.n	80013a2 <process_to_comReceived+0xba>
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <process_to_comReceived+0xcc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b1f      	cmp	r3, #31
 8001316:	d844      	bhi.n	80013a2 <process_to_comReceived+0xba>
		{
			Dat_Check = (int)(EI_Buffer[0]);
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <process_to_comReceived+0xcc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	603b      	str	r3, [r7, #0]
			if(EI_Buffer[22] == 0xFF)
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <process_to_comReceived+0xcc>)
 8001320:	7d9b      	ldrb	r3, [r3, #22]
 8001322:	2bff      	cmp	r3, #255	; 0xff
 8001324:	d108      	bne.n	8001338 <process_to_comReceived+0x50>
			{
				Online_diag_flag[Dat_Check] =0;
 8001326:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <process_to_comReceived+0xd0>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
				printf("\n*******************************SLAVE_%d OK*****************************\n",Dat_Check);
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	4822      	ldr	r0, [pc, #136]	; (80013bc <process_to_comReceived+0xd4>)
 8001334:	f025 f8b0 	bl	8026498 <iprintf>
				//ofc_flag1 =0;
			}
			if(EI_Buffer[22] == 0xBF)
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <process_to_comReceived+0xcc>)
 800133a:	7d9b      	ldrb	r3, [r3, #22]
 800133c:	2bbf      	cmp	r3, #191	; 0xbf
 800133e:	d10f      	bne.n	8001360 <process_to_comReceived+0x78>
			{
				Online_diag_flag[Dat_Check] = 1;
 8001340:	4a1d      	ldr	r2, [pc, #116]	; (80013b8 <process_to_comReceived+0xd0>)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
				printf("\n***************************SLAVE_%d FB1_LINK_FAIL*********************\n",Dat_Check);
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <process_to_comReceived+0xd8>)
 800134e:	f025 f8a3 	bl	8026498 <iprintf>
				//	ofc_flag2 =1;
				if(1 == ofc_flag1)
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <process_to_comReceived+0xdc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d102      	bne.n	8001360 <process_to_comReceived+0x78>
				{
					ofc_flag1 = 2;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <process_to_comReceived+0xdc>)
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x7F)
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <process_to_comReceived+0xcc>)
 8001362:	7d9b      	ldrb	r3, [r3, #22]
 8001364:	2b7f      	cmp	r3, #127	; 0x7f
 8001366:	d10f      	bne.n	8001388 <process_to_comReceived+0xa0>
			{
				Online_diag_flag[Dat_Check] = 2;
 8001368:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <process_to_comReceived+0xd0>)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	2202      	movs	r2, #2
 8001370:	701a      	strb	r2, [r3, #0]
				printf("\n********************************SLAVE_%d FB2_LINK_FAIL*******************\n",Dat_Check);
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	4814      	ldr	r0, [pc, #80]	; (80013c8 <process_to_comReceived+0xe0>)
 8001376:	f025 f88f 	bl	8026498 <iprintf>
				//ofc_flag2 =1;
				if(1 == ofc_flag1)
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <process_to_comReceived+0xdc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <process_to_comReceived+0xa0>
				{
					ofc_flag1 = 2;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <process_to_comReceived+0xdc>)
 8001384:	2202      	movs	r2, #2
 8001386:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x3F)
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <process_to_comReceived+0xcc>)
 800138a:	7d9b      	ldrb	r3, [r3, #22]
 800138c:	2b3f      	cmp	r3, #63	; 0x3f
 800138e:	d108      	bne.n	80013a2 <process_to_comReceived+0xba>
			{
				Online_diag_flag[Dat_Check] = 3;
 8001390:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <process_to_comReceived+0xd0>)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4413      	add	r3, r2
 8001396:	2203      	movs	r2, #3
 8001398:	701a      	strb	r2, [r3, #0]
				printf("\n*****************************SLAVE_%d FB1_&FB2_LINK_FAIL****************\n",Dat_Check);
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <process_to_comReceived+0xe4>)
 800139e:	f025 f87b 	bl	8026498 <iprintf>
			}
		}
		sui_failure_determine_clock = HAL_GetTick();
 80013a2:	f018 f86f 	bl	8019484 <HAL_GetTick>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <process_to_comReceived+0xe8>)
 80013aa:	6013      	str	r3, [r2, #0]
	}
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20002378 	.word	0x20002378
 80013b8:	20002368 	.word	0x20002368
 80013bc:	08027de4 	.word	0x08027de4
 80013c0:	08027e30 	.word	0x08027e30
 80013c4:	20002364 	.word	0x20002364
 80013c8:	08027e7c 	.word	0x08027e7c
 80013cc:	08027ec8 	.word	0x08027ec8
 80013d0:	20002360 	.word	0x20002360

080013d4 <CommReadAndFormMessage_Cmd>:

unsigned short int CommReadAndFormMessage_Cmd(unsigned short int us_Port,
		unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	4613      	mov	r3, r2
 80013e2:	80bb      	strh	r3, [r7, #4]
	static  char sign1 = 0,sign2 = 0,sign3 = 0,case_check=0;
	static unsigned long int store_index ;
	unsigned char suc_RByte = 0x00;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
	static unsigned char suc_RcvStatus = 11;
	while(Com_DataReady(us_Port))
 80013e8:	e0a2      	b.n	8001530 <CommReadAndFormMessage_Cmd+0x15c>
	{
		suc_RByte = Com_Get_Byte(us_Port);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f017 fd20 	bl	8018e34 <Com_Get_Byte>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
		//	printf("%x \t",suc_RByte);

		switch(suc_RcvStatus)
 80013f8:	4b54      	ldr	r3, [pc, #336]	; (800154c <CommReadAndFormMessage_Cmd+0x178>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3b0b      	subs	r3, #11
 80013fe:	2b03      	cmp	r3, #3
 8001400:	f200 8092 	bhi.w	8001528 <CommReadAndFormMessage_Cmd+0x154>
 8001404:	a201      	add	r2, pc, #4	; (adr r2, 800140c <CommReadAndFormMessage_Cmd+0x38>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	0800141d 	.word	0x0800141d
 8001410:	0800144b 	.word	0x0800144b
 8001414:	08001469 	.word	0x08001469
 8001418:	0800149b 	.word	0x0800149b
		{
		case 11:
			if((suc_RByte >= 0x01) && (suc_RByte <= 0x1F) && (suc_RByte != 0x0E))
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8086 	beq.w	8001530 <CommReadAndFormMessage_Cmd+0x15c>
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b1f      	cmp	r3, #31
 8001428:	f200 8082 	bhi.w	8001530 <CommReadAndFormMessage_Cmd+0x15c>
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b0e      	cmp	r3, #14
 8001430:	d07e      	beq.n	8001530 <CommReadAndFormMessage_Cmd+0x15c>
			{
				sign1 = suc_RByte;
 8001432:	4a47      	ldr	r2, [pc, #284]	; (8001550 <CommReadAndFormMessage_Cmd+0x17c>)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	7013      	strb	r3, [r2, #0]
				//	printf("sign11 = %X\n",sign1);
				store_index++;
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a45      	ldr	r2, [pc, #276]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 8001440:	6013      	str	r3, [r2, #0]
				suc_RcvStatus = 12;
 8001442:	4b42      	ldr	r3, [pc, #264]	; (800154c <CommReadAndFormMessage_Cmd+0x178>)
 8001444:	220c      	movs	r2, #12
 8001446:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001448:	e072      	b.n	8001530 <CommReadAndFormMessage_Cmd+0x15c>

		case 12:
			if (suc_RByte == FUN_CODE)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d16f      	bne.n	8001530 <CommReadAndFormMessage_Cmd+0x15c>
			{
				sign2 = suc_RByte;
 8001450:	4a41      	ldr	r2, [pc, #260]	; (8001558 <CommReadAndFormMessage_Cmd+0x184>)
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	7013      	strb	r3, [r2, #0]
				store_index++;
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a3d      	ldr	r2, [pc, #244]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 800145e:	6013      	str	r3, [r2, #0]
				//	printf("sign12= %X\n ",sign2);
				suc_RcvStatus = 13;
 8001460:	4b3a      	ldr	r3, [pc, #232]	; (800154c <CommReadAndFormMessage_Cmd+0x178>)
 8001462:	220d      	movs	r2, #13
 8001464:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001466:	e063      	b.n	8001530 <CommReadAndFormMessage_Cmd+0x15c>

		case 13:
			if(suc_RByte == DBYT_CNT)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b1c      	cmp	r3, #28
 800146c:	d10e      	bne.n	800148c <CommReadAndFormMessage_Cmd+0xb8>
			{

				sign3 = suc_RByte;
 800146e:	4a3b      	ldr	r2, [pc, #236]	; (800155c <CommReadAndFormMessage_Cmd+0x188>)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	7013      	strb	r3, [r2, #0]
				store_index++;
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3301      	adds	r3, #1
 800147a:	4a36      	ldr	r2, [pc, #216]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 800147c:	6013      	str	r3, [r2, #0]
				//	printf("sign13= %X\n ",sign3);
				suc_RcvStatus = 14;
 800147e:	4b33      	ldr	r3, [pc, #204]	; (800154c <CommReadAndFormMessage_Cmd+0x178>)
 8001480:	220e      	movs	r2, #14
 8001482:	701a      	strb	r2, [r3, #0]
				case_check =1;
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <CommReadAndFormMessage_Cmd+0x18c>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e051      	b.n	8001530 <CommReadAndFormMessage_Cmd+0x15c>
			}
			else
			{
				store_index = 0;
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
				suc_RcvStatus = 11;
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <CommReadAndFormMessage_Cmd+0x178>)
 8001494:	220b      	movs	r2, #11
 8001496:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001498:	e04a      	b.n	8001530 <CommReadAndFormMessage_Cmd+0x15c>
		case 14:
			puc_ReadMsg[0] = sign1;
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <CommReadAndFormMessage_Cmd+0x17c>)
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	701a      	strb	r2, [r3, #0]
			// printf("BUFF = %X\n", puc_ReadMsg[0]);
			puc_ReadMsg[1] = sign2;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <CommReadAndFormMessage_Cmd+0x184>)
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[2] = sign3;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	3302      	adds	r3, #2
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <CommReadAndFormMessage_Cmd+0x188>)
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[store_index] = suc_RByte;
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	701a      	strb	r2, [r3, #0]
			if(store_index < 33)
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b20      	cmp	r3, #32
 80014c8:	d804      	bhi.n	80014d4 <CommReadAndFormMessage_Cmd+0x100>
			{
				store_index++;
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 80014d2:	6013      	str	r3, [r2, #0]
			}
			if(store_index == 33)
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b21      	cmp	r3, #33	; 0x21
 80014da:	d129      	bne.n	8001530 <CommReadAndFormMessage_Cmd+0x15c>
			{

				if(Cal_Crc_fun(puc_ReadMsg,(store_index-2)))
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b02      	subs	r3, #2
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	6838      	ldr	r0, [r7, #0]
 80014ea:	f000 f83f 	bl	800156c <Cal_Crc_fun>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00e      	beq.n	8001512 <CommReadAndFormMessage_Cmd+0x13e>
				{
					//	printf("CRC OK\n");
					case_check = store_index;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <CommReadAndFormMessage_Cmd+0x18c>)
 80014fc:	701a      	strb	r2, [r3, #0]
					suc_RcvStatus = 11;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <CommReadAndFormMessage_Cmd+0x178>)
 8001500:	220b      	movs	r2, #11
 8001502:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
					return case_check;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <CommReadAndFormMessage_Cmd+0x18c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	e018      	b.n	8001544 <CommReadAndFormMessage_Cmd+0x170>
				}
				else
				{
					printf("OFC_CRC NOK\n");
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <CommReadAndFormMessage_Cmd+0x190>)
 8001514:	f025 f85c 	bl	80265d0 <puts>
					suc_RcvStatus = 11;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <CommReadAndFormMessage_Cmd+0x178>)
 800151a:	220b      	movs	r2, #11
 800151c:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <CommReadAndFormMessage_Cmd+0x180>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
					return 0;
 8001524:	2300      	movs	r3, #0
 8001526:	e00d      	b.n	8001544 <CommReadAndFormMessage_Cmd+0x170>
			}

			break;
		default:

			printf("In default");
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <CommReadAndFormMessage_Cmd+0x194>)
 800152a:	f024 ffb5 	bl	8026498 <iprintf>
			break;
 800152e:	bf00      	nop
	while(Com_DataReady(us_Port))
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f017 fc3d 	bl	8018db4 <Com_DataReady>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	f47f af54 	bne.w	80013ea <CommReadAndFormMessage_Cmd+0x16>


		}
	}
	return 0;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000030a 	.word	0x2000030a
 8001550:	200024a4 	.word	0x200024a4
 8001554:	200024a8 	.word	0x200024a8
 8001558:	200024ac 	.word	0x200024ac
 800155c:	200024ad 	.word	0x200024ad
 8001560:	200024ae 	.word	0x200024ae
 8001564:	08027f14 	.word	0x08027f14
 8001568:	08027f20 	.word	0x08027f20

0800156c <Cal_Crc_fun>:

unsigned char Cal_Crc_fun(unsigned char * Buffer, unsigned short Length)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
	unsigned short Rec_Crc,Cal_Crc;
	//	for(i=0;i<Length;i++)
	//	printf("RECV = %X ",Buffer[i]);
	Cal_Crc = ModBus_CRC16(Buffer,(Length));
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f81f 	bl	80015c0 <ModBus_CRC16>
 8001582:	4603      	mov	r3, r0
 8001584:	81fb      	strh	r3, [r7, #14]
	Rec_Crc = (unsigned short int ) (Buffer[Length+1] & 0xff);
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	3301      	adds	r3, #1
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	81bb      	strh	r3, [r7, #12]
	Rec_Crc = (unsigned short int ) (Rec_Crc<<8);
 8001592:	89bb      	ldrh	r3, [r7, #12]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	81bb      	strh	r3, [r7, #12]
	Rec_Crc |= Buffer[Length] & 0xff;
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	89bb      	ldrh	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	81bb      	strh	r3, [r7, #12]
	//	printf("Cal_Crc = %X Rec_Crc = %X\n",Cal_Crc,Rec_Crc);
	if(Cal_Crc	== Rec_Crc)
 80015a8:	89fa      	ldrh	r2, [r7, #14]
 80015aa:	89bb      	ldrh	r3, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d101      	bne.n	80015b4 <Cal_Crc_fun+0x48>
	{
		return 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <Cal_Crc_fun+0x4a>
	}
	else
	{
		return 0;
 80015b4:	2300      	movs	r3, #0
	}
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <ModBus_CRC16>:

unsigned short ModBus_CRC16( unsigned char * Buffer, unsigned short Length )
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
	unsigned char CRCHi = 0xFF;
 80015cc:	23ff      	movs	r3, #255	; 0xff
 80015ce:	73fb      	strb	r3, [r7, #15]
	unsigned char CRCLo = 0xFF;
 80015d0:	23ff      	movs	r3, #255	; 0xff
 80015d2:	73bb      	strb	r3, [r7, #14]
	int Index;
	unsigned short ret;
	//	printf("Length=%d",Length);
	//for(Index = 0;Index<Length;Index++)
	//printf("CAL = %X ",Buffer[Index]);
	while( Length--)
 80015d4:	e013      	b.n	80015fe <ModBus_CRC16+0x3e>
	{
		Index = CRCLo ^ *Buffer++ ;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	4053      	eors	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	60bb      	str	r3, [r7, #8]
		CRCLo = CRCHi ^ CRC_Table_Hi[Index];
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <ModBus_CRC16+0x68>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4413      	add	r3, r2
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	4053      	eors	r3, r2
 80015f2:	73bb      	strb	r3, [r7, #14]
		CRCHi = CRC_Table_Lo[Index];
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <ModBus_CRC16+0x6c>)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	73fb      	strb	r3, [r7, #15]
	while( Length--)
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	807a      	strh	r2, [r7, #2]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1e6      	bne.n	80015d6 <ModBus_CRC16+0x16>
	}
	//	CRCHi = CRCHi + 0x17;
	//	printf("LOW Byte = %X HIGHER BYTE = %X\n",CRCLo,CRCHi);
	ret=((unsigned short)CRCHi << 8);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	b29b      	uxth	r3, r3
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	81bb      	strh	r3, [r7, #12]
	ret|= (unsigned short)CRCLo;
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	b29a      	uxth	r2, r3
 8001614:	89bb      	ldrh	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	81bb      	strh	r3, [r7, #12]
	return ret;
 800161a:	89bb      	ldrh	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	20000108 	.word	0x20000108
 800162c:	20000208 	.word	0x20000208

08001630 <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0a2      	sub	sp, #136	; 0x88
 8001634:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	227c      	movs	r2, #124	; 0x7c
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f024 fe3d 	bl	80262c8 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 800165a:	e03a      	b.n	80016d2 <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 800165c:	f00f f84e 	bl	80106fc <Get_Eth_Byte>
 8001660:	4603      	mov	r3, r0
 8001662:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8001666:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800166a:	2bf4      	cmp	r3, #244	; 0xf4
 800166c:	d002      	beq.n	8001674 <Process_Hitachi_Packets_Eth+0x44>
 800166e:	2bf6      	cmp	r3, #246	; 0xf6
 8001670:	d00c      	beq.n	800168c <Process_Hitachi_Packets_Eth+0x5c>
 8001672:	e01b      	b.n	80016ac <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8001674:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800167e:	3388      	adds	r3, #136	; 0x88
 8001680:	443b      	add	r3, r7
 8001682:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8001686:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 800168a:	e01e      	b.n	80016ca <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 800168c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001696:	3388      	adds	r3, #136	; 0x88
 8001698:	443b      	add	r3, r7
 800169a:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800169e:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80016a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016a6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80016aa:	e00e      	b.n	80016ca <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 80016ac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00a      	beq.n	80016ca <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 80016b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80016be:	3388      	adds	r3, #136	; 0x88
 80016c0:	443b      	add	r3, r7
 80016c2:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016c6:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80016ca:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 80016d2:	f00e ffff 	bl	80106d4 <Is_There_EI_Data>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1bf      	bne.n	800165c <Process_Hitachi_Packets_Eth+0x2c>
 80016dc:	e000      	b.n	80016e0 <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 80016de:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80016e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00d      	beq.n	8001704 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 80016e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d906      	bls.n	80016fe <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 80016f0:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f8a3 	bl	8001844 <Convert_Data_format>
		}
		Traverser = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001704:	bf00      	nop
 8001706:	3788      	adds	r7, #136	; 0x88
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0a2      	sub	sp, #136	; 0x88
 8001710:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001718:	2300      	movs	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	227c      	movs	r2, #124	; 0x7c
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f024 fdcf 	bl	80262c8 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001736:	4b40      	ldr	r3, [pc, #256]	; (8001838 <Process_Hitachi_Packets_Com+0x12c>)
 8001738:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800173c:	2b00      	cmp	r3, #0
 800173e:	d074      	beq.n	800182a <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 8001740:	4b3e      	ldr	r3, [pc, #248]	; (800183c <Process_Hitachi_Packets_Com+0x130>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f00e fc17 	bl	800ff78 <HAL_Elaps_Ticks>
 800174a:	4603      	mov	r3, r0
 800174c:	2b13      	cmp	r3, #19
 800174e:	d96e      	bls.n	800182e <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 8001750:	e04a      	b.n	80017e8 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 8001752:	2003      	movs	r0, #3
 8001754:	f017 fb6e 	bl	8018e34 <Com_Get_Byte>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800175e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001762:	2b7e      	cmp	r3, #126	; 0x7e
 8001764:	d90a      	bls.n	800177c <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001766:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800176a:	2280      	movs	r2, #128	; 0x80
 800176c:	4619      	mov	r1, r3
 800176e:	4834      	ldr	r0, [pc, #208]	; (8001840 <Process_Hitachi_Packets_Com+0x134>)
 8001770:	f024 fe92 	bl	8026498 <iprintf>
			Traverser = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 800177a:	e03d      	b.n	80017f8 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 800177c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001780:	2bf4      	cmp	r3, #244	; 0xf4
 8001782:	d002      	beq.n	800178a <Process_Hitachi_Packets_Com+0x7e>
 8001784:	2bf6      	cmp	r3, #246	; 0xf6
 8001786:	d00c      	beq.n	80017a2 <Process_Hitachi_Packets_Com+0x96>
 8001788:	e01b      	b.n	80017c2 <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 800178a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001794:	3388      	adds	r3, #136	; 0x88
 8001796:	443b      	add	r3, r7
 8001798:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800179c:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80017a0:	e01e      	b.n	80017e0 <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80017a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017ac:	3388      	adds	r3, #136	; 0x88
 80017ae:	443b      	add	r3, r7
 80017b0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017b4:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80017b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017bc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80017c0:	e00e      	b.n	80017e0 <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80017c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00a      	beq.n	80017e0 <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80017ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017d4:	3388      	adds	r3, #136	; 0x88
 80017d6:	443b      	add	r3, r7
 80017d8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017dc:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80017e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d106      	bne.n	80017f6 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 80017e8:	2003      	movs	r0, #3
 80017ea:	f017 fae3 	bl	8018db4 <Com_DataReady>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ae      	bne.n	8001752 <Process_Hitachi_Packets_Com+0x46>
 80017f4:	e000      	b.n	80017f8 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 80017f6:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80017f8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d017      	beq.n	8001830 <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 8001800:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d906      	bls.n	8001816 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001808:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f817 	bl	8001844 <Convert_Data_format>
		}
		Traverser = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f024 fd50 	bl	80262c8 <memset>
 8001828:	e002      	b.n	8001830 <Process_Hitachi_Packets_Com+0x124>
		return;
 800182a:	bf00      	nop
 800182c:	e000      	b.n	8001830 <Process_Hitachi_Packets_Com+0x124>
		return;
 800182e:	bf00      	nop
	}
}
 8001830:	3788      	adds	r7, #136	; 0x88
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000504 	.word	0x20000504
 800183c:	2000bfc8 	.word	0x2000bfc8
 8001840:	08027f2c 	.word	0x08027f2c

08001844 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0a4      	sub	sp, #144	; 0x90
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	227c      	movs	r2, #124	; 0x7c
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f024 fd33 	bl	80262c8 <memset>
	uint16_t des_index=0,src_index=0;
 8001862:	2300      	movs	r3, #0
 8001864:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001868:	2300      	movs	r3, #0
 800186a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800186e:	2300      	movs	r3, #0
 8001870:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001874:	2300      	movs	r3, #0
 8001876:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800187a:	e034      	b.n	80018e6 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 800187c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2bf0      	cmp	r3, #240	; 0xf0
 8001888:	d118      	bne.n	80018bc <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 800188a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	7819      	ldrb	r1, [r3, #0]
 8001894:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001898:	3301      	adds	r3, #1
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018a4:	430a      	orrs	r2, r1
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	3390      	adds	r3, #144	; 0x90
 80018aa:	443b      	add	r3, r7
 80018ac:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80018b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018b4:	3301      	adds	r3, #1
 80018b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018ba:	e00a      	b.n	80018d2 <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80018bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	441a      	add	r2, r3
 80018c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018c8:	7812      	ldrb	r2, [r2, #0]
 80018ca:	3390      	adds	r3, #144	; 0x90
 80018cc:	443b      	add	r3, r7
 80018ce:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80018d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018d6:	3301      	adds	r3, #1
 80018d8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80018dc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018e0:	3301      	adds	r3, #1
 80018e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d3c4      	bcc.n	800187c <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 80018f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f805 	bl	800190c <EI_Data_Analyzer>
}
 8001902:	bf00      	nop
 8001904:	3790      	adds	r7, #144	; 0x90
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
 8001920:	2300      	movs	r3, #0
 8001922:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 800192c:	f017 fdaa 	bl	8019484 <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 8001932:	4ba7      	ldr	r3, [pc, #668]	; (8001bd0 <EI_Data_Analyzer+0x2c4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d111      	bne.n	800195e <EI_Data_Analyzer+0x52>
 800193a:	f017 fda3 	bl	8019484 <HAL_GetTick>
 800193e:	4603      	mov	r3, r0
 8001940:	f242 720f 	movw	r2, #9999	; 0x270f
 8001944:	4293      	cmp	r3, r2
 8001946:	d90a      	bls.n	800195e <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001948:	48a2      	ldr	r0, [pc, #648]	; (8001bd4 <EI_Data_Analyzer+0x2c8>)
 800194a:	f024 fe41 	bl	80265d0 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800194e:	49a2      	ldr	r1, [pc, #648]	; (8001bd8 <EI_Data_Analyzer+0x2cc>)
 8001950:	48a2      	ldr	r0, [pc, #648]	; (8001bdc <EI_Data_Analyzer+0x2d0>)
 8001952:	f7fe fc75 	bl	8000240 <strcmp>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 81a1 	bne.w	8001ca0 <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3303      	adds	r3, #3
 8001962:	461a      	mov	r2, r3
 8001964:	2110      	movs	r1, #16
 8001966:	2000      	movs	r0, #0
 8001968:	f7fe fe54 	bl	8000614 <ExtractBits>
 800196c:	4603      	mov	r3, r0
 800196e:	b29b      	uxth	r3, r3
 8001970:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001972:	e00b      	b.n	800198c <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001974:	7ffb      	ldrb	r3, [r7, #31]
 8001976:	4a9a      	ldr	r2, [pc, #616]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 8001978:	3366      	adds	r3, #102	; 0x66
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	429a      	cmp	r2, r3
 8001984:	d009      	beq.n	800199a <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	3301      	adds	r3, #1
 800198a:	77fb      	strb	r3, [r7, #31]
 800198c:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 800198e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001992:	7ffa      	ldrb	r2, [r7, #31]
 8001994:	429a      	cmp	r2, r3
 8001996:	d3ed      	bcc.n	8001974 <EI_Data_Analyzer+0x68>
 8001998:	e000      	b.n	800199c <EI_Data_Analyzer+0x90>
		{
			break;
 800199a:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 800199c:	4b90      	ldr	r3, [pc, #576]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 800199e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a2:	7ffa      	ldrb	r2, [r7, #31]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d309      	bcc.n	80019bc <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80019a8:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <EI_Data_Analyzer+0x2d8>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	f040 8179 	bne.w	8001ca4 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80019b2:	6939      	ldr	r1, [r7, #16]
 80019b4:	488c      	ldr	r0, [pc, #560]	; (8001be8 <EI_Data_Analyzer+0x2dc>)
 80019b6:	f024 fd6f 	bl	8026498 <iprintf>
		}
		return;
 80019ba:	e173      	b.n	8001ca4 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	461a      	mov	r2, r3
 80019c2:	2110      	movs	r1, #16
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7fe fe25 	bl	8000614 <ExtractBits>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80019d0:	7ffb      	ldrb	r3, [r7, #31]
 80019d2:	4a83      	ldr	r2, [pc, #524]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 80019d4:	3370      	adds	r3, #112	; 0x70
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d012      	beq.n	8001a08 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80019e2:	4882      	ldr	r0, [pc, #520]	; (8001bec <EI_Data_Analyzer+0x2e0>)
 80019e4:	f024 fdf4 	bl	80265d0 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 80019e8:	69b9      	ldr	r1, [r7, #24]
 80019ea:	4881      	ldr	r0, [pc, #516]	; (8001bf0 <EI_Data_Analyzer+0x2e4>)
 80019ec:	f024 fd54 	bl	8026498 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80019f0:	7ffb      	ldrb	r3, [r7, #31]
 80019f2:	4a7b      	ldr	r2, [pc, #492]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 80019f4:	3370      	adds	r3, #112	; 0x70
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	461a      	mov	r2, r3
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	487c      	ldr	r0, [pc, #496]	; (8001bf4 <EI_Data_Analyzer+0x2e8>)
 8001a02:	f024 fd49 	bl	8026498 <iprintf>
		return;
 8001a06:	e14e      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001a08:	7ffb      	ldrb	r3, [r7, #31]
 8001a0a:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001a0c:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <EI_Data_Analyzer+0x2ec>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d016      	beq.n	8001a48 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001a1a:	4b77      	ldr	r3, [pc, #476]	; (8001bf8 <EI_Data_Analyzer+0x2ec>)
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	7fba      	ldrb	r2, [r7, #30]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d111      	bne.n	8001a48 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001a24:	4875      	ldr	r0, [pc, #468]	; (8001bfc <EI_Data_Analyzer+0x2f0>)
 8001a26:	f024 fdd3 	bl	80265d0 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	4874      	ldr	r0, [pc, #464]	; (8001c00 <EI_Data_Analyzer+0x2f4>)
 8001a2e:	f024 fd33 	bl	8026498 <iprintf>
			Destin_Address = 333;
 8001a32:	f240 134d 	movw	r3, #333	; 0x14d
 8001a36:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001a38:	4b69      	ldr	r3, [pc, #420]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 8001a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3e:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 8001a40:	69b9      	ldr	r1, [r7, #24]
 8001a42:	4870      	ldr	r0, [pc, #448]	; (8001c04 <EI_Data_Analyzer+0x2f8>)
 8001a44:	f024 fd28 	bl	8026498 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001a48:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 8001a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4e:	7fba      	ldrb	r2, [r7, #30]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d307      	bcc.n	8001a64 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001a54:	486c      	ldr	r0, [pc, #432]	; (8001c08 <EI_Data_Analyzer+0x2fc>)
 8001a56:	f024 fdbb 	bl	80265d0 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	486b      	ldr	r0, [pc, #428]	; (8001c0c <EI_Data_Analyzer+0x300>)
 8001a5e:	f024 fd1b 	bl	8026498 <iprintf>
		return;
 8001a62:	e120      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001a64:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <EI_Data_Analyzer+0x2d8>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d121      	bne.n	8001ab0 <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001a6c:	7ffb      	ldrb	r3, [r7, #31]
 8001a6e:	4a68      	ldr	r2, [pc, #416]	; (8001c10 <EI_Data_Analyzer+0x304>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d002      	beq.n	8001a7c <EI_Data_Analyzer+0x170>
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d004      	beq.n	8001a84 <EI_Data_Analyzer+0x178>
 8001a7a:	e007      	b.n	8001a8c <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001a7c:	4865      	ldr	r0, [pc, #404]	; (8001c14 <EI_Data_Analyzer+0x308>)
 8001a7e:	f024 fda7 	bl	80265d0 <puts>
			break;
 8001a82:	e015      	b.n	8001ab0 <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 8001a84:	4864      	ldr	r0, [pc, #400]	; (8001c18 <EI_Data_Analyzer+0x30c>)
 8001a86:	f024 fda3 	bl	80265d0 <puts>
			break;
 8001a8a:	e011      	b.n	8001ab0 <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8001a8c:	7ffb      	ldrb	r3, [r7, #31]
 8001a8e:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 8001a90:	4413      	add	r3, r2
 8001a92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d103      	bne.n	8001aa2 <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 8001a9a:	4860      	ldr	r0, [pc, #384]	; (8001c1c <EI_Data_Analyzer+0x310>)
 8001a9c:	f024 fd98 	bl	80265d0 <puts>
 8001aa0:	e006      	b.n	8001ab0 <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 8001aa2:	7ffb      	ldrb	r3, [r7, #31]
 8001aa4:	4a5a      	ldr	r2, [pc, #360]	; (8001c10 <EI_Data_Analyzer+0x304>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	485d      	ldr	r0, [pc, #372]	; (8001c20 <EI_Data_Analyzer+0x314>)
 8001aac:	f024 fcf4 	bl	8026498 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <EI_Data_Analyzer+0x318>)
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	7ffa      	ldrb	r2, [r7, #31]
 8001aba:	4955      	ldr	r1, [pc, #340]	; (8001c10 <EI_Data_Analyzer+0x304>)
 8001abc:	5c8a      	ldrb	r2, [r1, r2]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d014      	beq.n	8001aec <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001ac2:	7ffb      	ldrb	r3, [r7, #31]
 8001ac4:	4958      	ldr	r1, [pc, #352]	; (8001c28 <EI_Data_Analyzer+0x31c>)
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001acc:	7ffb      	ldrb	r3, [r7, #31]
 8001ace:	4957      	ldr	r1, [pc, #348]	; (8001c2c <EI_Data_Analyzer+0x320>)
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
 8001ad8:	4a4d      	ldr	r2, [pc, #308]	; (8001c10 <EI_Data_Analyzer+0x304>)
 8001ada:	5cd2      	ldrb	r2, [r2, r3]
 8001adc:	7ffb      	ldrb	r3, [r7, #31]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <EI_Data_Analyzer+0x318>)
 8001ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001ae6:	4852      	ldr	r0, [pc, #328]	; (8001c30 <EI_Data_Analyzer+0x324>)
 8001ae8:	f024 fd72 	bl	80265d0 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001aec:	7ffa      	ldrb	r2, [r7, #31]
 8001aee:	7ffb      	ldrb	r3, [r7, #31]
 8001af0:	4947      	ldr	r1, [pc, #284]	; (8001c10 <EI_Data_Analyzer+0x304>)
 8001af2:	5c89      	ldrb	r1, [r1, r2]
 8001af4:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <EI_Data_Analyzer+0x328>)
 8001af6:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	4a4f      	ldr	r2, [pc, #316]	; (8001c38 <EI_Data_Analyzer+0x32c>)
 8001afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00e fa39 	bl	800ff78 <HAL_Elaps_Ticks>
 8001b06:	4602      	mov	r2, r0
 8001b08:	7ffb      	ldrb	r3, [r7, #31]
 8001b0a:	4935      	ldr	r1, [pc, #212]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 8001b0c:	338a      	adds	r3, #138	; 0x8a
 8001b0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d318      	bcc.n	8001b48 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001b16:	7ffb      	ldrb	r3, [r7, #31]
 8001b18:	4947      	ldr	r1, [pc, #284]	; (8001c38 <EI_Data_Analyzer+0x32c>)
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001b20:	7ffb      	ldrb	r3, [r7, #31]
 8001b22:	4941      	ldr	r1, [pc, #260]	; (8001c28 <EI_Data_Analyzer+0x31c>)
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001b2a:	7ffb      	ldrb	r3, [r7, #31]
 8001b2c:	493f      	ldr	r1, [pc, #252]	; (8001c2c <EI_Data_Analyzer+0x320>)
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001b34:	7ffb      	ldrb	r3, [r7, #31]
 8001b36:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <EI_Data_Analyzer+0x2d4>)
 8001b38:	3366      	adds	r3, #102	; 0x66
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4619      	mov	r1, r3
 8001b42:	483e      	ldr	r0, [pc, #248]	; (8001c3c <EI_Data_Analyzer+0x330>)
 8001b44:	f024 fca8 	bl	8026498 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001b48:	7ffb      	ldrb	r3, [r7, #31]
 8001b4a:	493b      	ldr	r1, [pc, #236]	; (8001c38 <EI_Data_Analyzer+0x32c>)
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 8001b52:	2281      	movs	r2, #129	; 0x81
 8001b54:	2100      	movs	r1, #0
 8001b56:	483a      	ldr	r0, [pc, #232]	; (8001c40 <EI_Data_Analyzer+0x334>)
 8001b58:	f024 fbb6 	bl	80262c8 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4837      	ldr	r0, [pc, #220]	; (8001c40 <EI_Data_Analyzer+0x334>)
 8001b64:	f024 fb88 	bl	8026278 <memcpy>
	Rx_Print_st.Size = Size;
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <EI_Data_Analyzer+0x334>)
 8001b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3307      	adds	r3, #7
 8001b76:	461a      	mov	r2, r3
 8001b78:	2108      	movs	r1, #8
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7fe fd4a 	bl	8000614 <ExtractBits>
 8001b80:	4603      	mov	r3, r0
 8001b82:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 8001b84:	7ffa      	ldrb	r2, [r7, #31]
 8001b86:	492f      	ldr	r1, [pc, #188]	; (8001c44 <EI_Data_Analyzer+0x338>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	3303      	adds	r3, #3
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 8001b98:	7ffb      	ldrb	r3, [r7, #31]
 8001b9a:	492b      	ldr	r1, [pc, #172]	; (8001c48 <EI_Data_Analyzer+0x33c>)
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f006 fd9b 	bl	80086e0 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d870      	bhi.n	8001c94 <EI_Data_Analyzer+0x388>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <EI_Data_Analyzer+0x2ac>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001c4d 	.word	0x08001c4d
 8001bbc:	08001c5d 	.word	0x08001c5d
 8001bc0:	08001c6d 	.word	0x08001c6d
 8001bc4:	08001c75 	.word	0x08001c75
 8001bc8:	08001c95 	.word	0x08001c95
 8001bcc:	08001c85 	.word	0x08001c85
 8001bd0:	2000030b 	.word	0x2000030b
 8001bd4:	08027f58 	.word	0x08027f58
 8001bd8:	08027f98 	.word	0x08027f98
 8001bdc:	20000505 	.word	0x20000505
 8001be0:	20000504 	.word	0x20000504
 8001be4:	20000bbb 	.word	0x20000bbb
 8001be8:	08027fa4 	.word	0x08027fa4
 8001bec:	08027fe0 	.word	0x08027fe0
 8001bf0:	08027ffc 	.word	0x08027ffc
 8001bf4:	08028020 	.word	0x08028020
 8001bf8:	2000308c 	.word	0x2000308c
 8001bfc:	08028058 	.word	0x08028058
 8001c00:	0802807c 	.word	0x0802807c
 8001c04:	0802808c 	.word	0x0802808c
 8001c08:	0802809c 	.word	0x0802809c
 8001c0c:	080280d0 	.word	0x080280d0
 8001c10:	2000270c 	.word	0x2000270c
 8001c14:	080280f0 	.word	0x080280f0
 8001c18:	08028100 	.word	0x08028100
 8001c1c:	08028110 	.word	0x08028110
 8001c20:	08028128 	.word	0x08028128
 8001c24:	20002608 	.word	0x20002608
 8001c28:	20002630 	.word	0x20002630
 8001c2c:	20002658 	.word	0x20002658
 8001c30:	0802814c 	.word	0x0802814c
 8001c34:	200026b0 	.word	0x200026b0
 8001c38:	200026bc 	.word	0x200026bc
 8001c3c:	08028164 	.word	0x08028164
 8001c40:	20003340 	.word	0x20003340
 8001c44:	20002da4 	.word	0x20002da4
 8001c48:	200024e8 	.word	0x200024e8
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	b2d9      	uxtb	r1, r3
 8001c50:	7fbb      	ldrb	r3, [r7, #30]
 8001c52:	7ffa      	ldrb	r2, [r7, #31]
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f82d 	bl	8001cb4 <Init_Msg_extr>
		break;
 8001c5a:	e024      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	b2d9      	uxtb	r1, r3
 8001c60:	7fbb      	ldrb	r3, [r7, #30]
 8001c62:	7ffa      	ldrb	r2, [r7, #31]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f001 fbc3 	bl	80033f0 <Vital_Msg_extr>
		break;
 8001c6a:	e01c      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001c6c:	480f      	ldr	r0, [pc, #60]	; (8001cac <EI_Data_Analyzer+0x3a0>)
 8001c6e:	f024 fcaf 	bl	80265d0 <puts>
		break;
 8001c72:	e018      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	b2d9      	uxtb	r1, r3
 8001c78:	7fbb      	ldrb	r3, [r7, #30]
 8001c7a:	7ffa      	ldrb	r2, [r7, #31]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f003 ff1f 	bl	8005ac0 <Status_Msg_Extr>
		break;
 8001c82:	e010      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	b2d9      	uxtb	r1, r3
 8001c88:	7fbb      	ldrb	r3, [r7, #30]
 8001c8a:	7ffa      	ldrb	r2, [r7, #31]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f005 f98f 	bl	8006fb0 <Service_Msg_Extr>
		break;
 8001c92:	e008      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <EI_Data_Analyzer+0x3a4>)
 8001c9a:	f024 fbfd 	bl	8026498 <iprintf>
		break;
 8001c9e:	e002      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>
			return;
 8001ca0:	bf00      	nop
 8001ca2:	e000      	b.n	8001ca6 <EI_Data_Analyzer+0x39a>
		return;
 8001ca4:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	08028180 	.word	0x08028180
 8001cb0:	080281a4 	.word	0x080281a4

08001cb4 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	70fb      	strb	r3, [r7, #3]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70bb      	strb	r3, [r7, #2]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001cde:	f017 fbd1 	bl	8019484 <HAL_GetTick>
 8001ce2:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	83fb      	strh	r3, [r7, #30]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b05      	subs	r3, #5
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f013 fe96 	bl	8015a28 <CalculateDirectReverseCrc>
 8001cfc:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	3b05      	subs	r3, #5
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	441a      	add	r2, r3
 8001d06:	8bbb      	ldrh	r3, [r7, #28]
 8001d08:	2120      	movs	r1, #32
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc82 	bl	8000614 <ExtractBits>
 8001d10:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d013      	beq.n	8001d42 <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001d1a:	78bb      	ldrb	r3, [r7, #2]
 8001d1c:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <Init_Msg_extr+0x110>)
 8001d1e:	3366      	adds	r3, #102	; 0x66
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4619      	mov	r1, r3
 8001d28:	4827      	ldr	r0, [pc, #156]	; (8001dc8 <Init_Msg_extr+0x114>)
 8001d2a:	f024 fbb5 	bl	8026498 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8001d2e:	6939      	ldr	r1, [r7, #16]
 8001d30:	4826      	ldr	r0, [pc, #152]	; (8001dcc <Init_Msg_extr+0x118>)
 8001d32:	f024 fbb1 	bl	8026498 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001d36:	6979      	ldr	r1, [r7, #20]
 8001d38:	4825      	ldr	r0, [pc, #148]	; (8001dd0 <Init_Msg_extr+0x11c>)
 8001d3a:	f024 fbad 	bl	8026498 <iprintf>
		return;
 8001d3e:	f000 be32 	b.w	80029a6 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 8001d42:	78bb      	ldrb	r3, [r7, #2]
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <Init_Msg_extr+0x120>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001d4a:	78bb      	ldrb	r3, [r7, #2]
 8001d4c:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <Init_Msg_extr+0x124>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f103 021d 	add.w	r2, r3, #29
 8001d58:	8bbb      	ldrh	r3, [r7, #28]
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fc59 	bl	8000614 <ExtractBits>
 8001d62:	4603      	mov	r3, r0
 8001d64:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001d66:	78bb      	ldrb	r3, [r7, #2]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <Init_Msg_extr+0x110>)
 8001d6a:	33fe      	adds	r3, #254	; 0xfe
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	889b      	ldrh	r3, [r3, #4]
 8001d72:	8b7a      	ldrh	r2, [r7, #26]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d03d      	beq.n	8001df4 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001d78:	78bb      	ldrb	r3, [r7, #2]
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <Init_Msg_extr+0x128>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001d80:	78bb      	ldrb	r3, [r7, #2]
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <Init_Msg_extr+0x110>)
 8001d84:	3366      	adds	r3, #102	; 0x66
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4814      	ldr	r0, [pc, #80]	; (8001de0 <Init_Msg_extr+0x12c>)
 8001d90:	f024 fb82 	bl	8026498 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 8001d94:	8b7b      	ldrh	r3, [r7, #26]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4812      	ldr	r0, [pc, #72]	; (8001de4 <Init_Msg_extr+0x130>)
 8001d9a:	f024 fb7d 	bl	8026498 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 8001d9e:	78bb      	ldrb	r3, [r7, #2]
 8001da0:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <Init_Msg_extr+0x110>)
 8001da2:	33fe      	adds	r3, #254	; 0xfe
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	889b      	ldrh	r3, [r3, #4]
 8001daa:	4619      	mov	r1, r3
 8001dac:	480e      	ldr	r0, [pc, #56]	; (8001de8 <Init_Msg_extr+0x134>)
 8001dae:	f024 fb73 	bl	8026498 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001db2:	490e      	ldr	r1, [pc, #56]	; (8001dec <Init_Msg_extr+0x138>)
 8001db4:	480e      	ldr	r0, [pc, #56]	; (8001df0 <Init_Msg_extr+0x13c>)
 8001db6:	f7fe fa43 	bl	8000240 <strcmp>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01d      	beq.n	8001dfc <Init_Msg_extr+0x148>
		{
			return;
 8001dc0:	f000 bdf1 	b.w	80029a6 <Init_Msg_extr+0xcf2>
 8001dc4:	20000504 	.word	0x20000504
 8001dc8:	080281c0 	.word	0x080281c0
 8001dcc:	080281dc 	.word	0x080281dc
 8001dd0:	080281ec 	.word	0x080281ec
 8001dd4:	20002680 	.word	0x20002680
 8001dd8:	20002698 	.word	0x20002698
 8001ddc:	2000268c 	.word	0x2000268c
 8001de0:	080281fc 	.word	0x080281fc
 8001de4:	08028234 	.word	0x08028234
 8001de8:	08028258 	.word	0x08028258
 8001dec:	08027f98 	.word	0x08027f98
 8001df0:	20000505 	.word	0x20000505
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001df4:	78bb      	ldrb	r3, [r7, #2]
 8001df6:	4aab      	ldr	r2, [pc, #684]	; (80020a4 <Init_Msg_extr+0x3f0>)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001e02:	8bbb      	ldrh	r3, [r7, #28]
 8001e04:	2108      	movs	r1, #8
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fc04 	bl	8000614 <ExtractBits>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8001e10:	78bb      	ldrb	r3, [r7, #2]
 8001e12:	4aa5      	ldr	r2, [pc, #660]	; (80020a8 <Init_Msg_extr+0x3f4>)
 8001e14:	4413      	add	r3, r2
 8001e16:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e1a:	7e7a      	ldrb	r2, [r7, #25]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d01f      	beq.n	8001e60 <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	4aa1      	ldr	r2, [pc, #644]	; (80020a8 <Init_Msg_extr+0x3f4>)
 8001e24:	3366      	adds	r3, #102	; 0x66
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	489f      	ldr	r0, [pc, #636]	; (80020ac <Init_Msg_extr+0x3f8>)
 8001e30:	f024 fb32 	bl	8026498 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	4a9c      	ldr	r2, [pc, #624]	; (80020a8 <Init_Msg_extr+0x3f4>)
 8001e38:	4413      	add	r3, r2
 8001e3a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e3e:	4619      	mov	r1, r3
 8001e40:	489b      	ldr	r0, [pc, #620]	; (80020b0 <Init_Msg_extr+0x3fc>)
 8001e42:	f024 fb29 	bl	8026498 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001e46:	7e7b      	ldrb	r3, [r7, #25]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	489a      	ldr	r0, [pc, #616]	; (80020b4 <Init_Msg_extr+0x400>)
 8001e4c:	f024 fb24 	bl	8026498 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001e50:	4999      	ldr	r1, [pc, #612]	; (80020b8 <Init_Msg_extr+0x404>)
 8001e52:	489a      	ldr	r0, [pc, #616]	; (80020bc <Init_Msg_extr+0x408>)
 8001e54:	f7fe f9f4 	bl	8000240 <strcmp>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 85a2 	bne.w	80029a4 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001e60:	78bb      	ldrb	r3, [r7, #2]
 8001e62:	4997      	ldr	r1, [pc, #604]	; (80020c0 <Init_Msg_extr+0x40c>)
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001e6a:	78bb      	ldrb	r3, [r7, #2]
 8001e6c:	4a95      	ldr	r2, [pc, #596]	; (80020c4 <Init_Msg_extr+0x410>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	4a94      	ldr	r2, [pc, #592]	; (80020c8 <Init_Msg_extr+0x414>)
 8001e76:	2100      	movs	r1, #0
 8001e78:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001e7a:	78bb      	ldrb	r3, [r7, #2]
 8001e7c:	4993      	ldr	r1, [pc, #588]	; (80020cc <Init_Msg_extr+0x418>)
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 8001e84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e88:	3308      	adds	r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da00      	bge.n	8001e90 <Init_Msg_extr+0x1dc>
 8001e8e:	3307      	adds	r3, #7
 8001e90:	10db      	asrs	r3, r3, #3
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	8bfb      	ldrh	r3, [r7, #30]
 8001e96:	4413      	add	r3, r2
 8001e98:	83fb      	strh	r3, [r7, #30]
 8001e9a:	8bbb      	ldrh	r3, [r7, #28]
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	425a      	negs	r2, r3
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	f002 0207 	and.w	r2, r2, #7
 8001eac:	bf58      	it	pl
 8001eae:	4253      	negpl	r3, r2
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001eb4:	8bfb      	ldrh	r3, [r7, #30]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	441a      	add	r2, r3
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fba8 	bl	8000614 <ExtractBits>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	78bb      	ldrb	r3, [r7, #2]
 8001ec8:	b291      	uxth	r1, r2
 8001eca:	4a81      	ldr	r2, [pc, #516]	; (80020d0 <Init_Msg_extr+0x41c>)
 8001ecc:	015b      	lsls	r3, r3, #5
 8001ece:	4413      	add	r3, r2
 8001ed0:	3310      	adds	r3, #16
 8001ed2:	460a      	mov	r2, r1
 8001ed4:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 8001ed6:	78bb      	ldrb	r3, [r7, #2]
 8001ed8:	4a7d      	ldr	r2, [pc, #500]	; (80020d0 <Init_Msg_extr+0x41c>)
 8001eda:	015b      	lsls	r3, r3, #5
 8001edc:	4413      	add	r3, r2
 8001ede:	3310      	adds	r3, #16
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	487b      	ldr	r0, [pc, #492]	; (80020d4 <Init_Msg_extr+0x420>)
 8001ee6:	f024 fad7 	bl	8026498 <iprintf>
	BITSTUFFINC(16);
 8001eea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eee:	3310      	adds	r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da00      	bge.n	8001ef6 <Init_Msg_extr+0x242>
 8001ef4:	3307      	adds	r3, #7
 8001ef6:	10db      	asrs	r3, r3, #3
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	8bfb      	ldrh	r3, [r7, #30]
 8001efc:	4413      	add	r3, r2
 8001efe:	83fb      	strh	r3, [r7, #30]
 8001f00:	8bbb      	ldrh	r3, [r7, #28]
 8001f02:	3310      	adds	r3, #16
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	425a      	negs	r2, r3
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	f002 0207 	and.w	r2, r2, #7
 8001f12:	bf58      	it	pl
 8001f14:	4253      	negpl	r3, r2
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001f1a:	8bfb      	ldrh	r3, [r7, #30]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	441a      	add	r2, r3
 8001f20:	8bbb      	ldrh	r3, [r7, #28]
 8001f22:	2110      	movs	r1, #16
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fb75 	bl	8000614 <ExtractBits>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	78bb      	ldrb	r3, [r7, #2]
 8001f2e:	b291      	uxth	r1, r2
 8001f30:	4a67      	ldr	r2, [pc, #412]	; (80020d0 <Init_Msg_extr+0x41c>)
 8001f32:	015b      	lsls	r3, r3, #5
 8001f34:	4413      	add	r3, r2
 8001f36:	330e      	adds	r3, #14
 8001f38:	460a      	mov	r2, r1
 8001f3a:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001f3c:	78bb      	ldrb	r3, [r7, #2]
 8001f3e:	4a64      	ldr	r2, [pc, #400]	; (80020d0 <Init_Msg_extr+0x41c>)
 8001f40:	015b      	lsls	r3, r3, #5
 8001f42:	4413      	add	r3, r2
 8001f44:	330e      	adds	r3, #14
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4863      	ldr	r0, [pc, #396]	; (80020d8 <Init_Msg_extr+0x424>)
 8001f4c:	f024 faa4 	bl	8026498 <iprintf>
	BITSTUFFINC(16);
 8001f50:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f54:	3310      	adds	r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	da00      	bge.n	8001f5c <Init_Msg_extr+0x2a8>
 8001f5a:	3307      	adds	r3, #7
 8001f5c:	10db      	asrs	r3, r3, #3
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	8bfb      	ldrh	r3, [r7, #30]
 8001f62:	4413      	add	r3, r2
 8001f64:	83fb      	strh	r3, [r7, #30]
 8001f66:	8bbb      	ldrh	r3, [r7, #28]
 8001f68:	3310      	adds	r3, #16
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	425a      	negs	r2, r3
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	f002 0207 	and.w	r2, r2, #7
 8001f78:	bf58      	it	pl
 8001f7a:	4253      	negpl	r3, r2
 8001f7c:	b21b      	sxth	r3, r3
 8001f7e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f80:	8bfb      	ldrh	r3, [r7, #30]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	441a      	add	r2, r3
 8001f86:	8bbb      	ldrh	r3, [r7, #28]
 8001f88:	2108      	movs	r1, #8
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fb42 	bl	8000614 <ExtractBits>
 8001f90:	4602      	mov	r2, r0
 8001f92:	78bb      	ldrb	r3, [r7, #2]
 8001f94:	b2d1      	uxtb	r1, r2
 8001f96:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <Init_Msg_extr+0x41c>)
 8001f98:	015b      	lsls	r3, r3, #5
 8001f9a:	4413      	add	r3, r2
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8001fa0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa4:	3308      	adds	r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	da00      	bge.n	8001fac <Init_Msg_extr+0x2f8>
 8001faa:	3307      	adds	r3, #7
 8001fac:	10db      	asrs	r3, r3, #3
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	8bfb      	ldrh	r3, [r7, #30]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	83fb      	strh	r3, [r7, #30]
 8001fb6:	8bbb      	ldrh	r3, [r7, #28]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	425a      	negs	r2, r3
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	f002 0207 	and.w	r2, r2, #7
 8001fc8:	bf58      	it	pl
 8001fca:	4253      	negpl	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fd0:	8bfb      	ldrh	r3, [r7, #30]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	8bbb      	ldrh	r3, [r7, #28]
 8001fd8:	2108      	movs	r1, #8
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fb1a 	bl	8000614 <ExtractBits>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	78bb      	ldrb	r3, [r7, #2]
 8001fe4:	b2d1      	uxtb	r1, r2
 8001fe6:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <Init_Msg_extr+0x41c>)
 8001fe8:	015b      	lsls	r3, r3, #5
 8001fea:	4413      	add	r3, r2
 8001fec:	3301      	adds	r3, #1
 8001fee:	460a      	mov	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8001ff2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da00      	bge.n	8001ffe <Init_Msg_extr+0x34a>
 8001ffc:	3307      	adds	r3, #7
 8001ffe:	10db      	asrs	r3, r3, #3
 8002000:	b29a      	uxth	r2, r3
 8002002:	8bfb      	ldrh	r3, [r7, #30]
 8002004:	4413      	add	r3, r2
 8002006:	83fb      	strh	r3, [r7, #30]
 8002008:	8bbb      	ldrh	r3, [r7, #28]
 800200a:	3308      	adds	r3, #8
 800200c:	b29b      	uxth	r3, r3
 800200e:	b21b      	sxth	r3, r3
 8002010:	425a      	negs	r2, r3
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	f002 0207 	and.w	r2, r2, #7
 800201a:	bf58      	it	pl
 800201c:	4253      	negpl	r3, r2
 800201e:	b21b      	sxth	r3, r3
 8002020:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002022:	8bfb      	ldrh	r3, [r7, #30]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	441a      	add	r2, r3
 8002028:	8bbb      	ldrh	r3, [r7, #28]
 800202a:	2108      	movs	r1, #8
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe faf1 	bl	8000614 <ExtractBits>
 8002032:	4602      	mov	r2, r0
 8002034:	78bb      	ldrb	r3, [r7, #2]
 8002036:	b2d1      	uxtb	r1, r2
 8002038:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <Init_Msg_extr+0x41c>)
 800203a:	015b      	lsls	r3, r3, #5
 800203c:	4413      	add	r3, r2
 800203e:	3302      	adds	r3, #2
 8002040:	460a      	mov	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8002044:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002048:	3308      	adds	r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	da00      	bge.n	8002050 <Init_Msg_extr+0x39c>
 800204e:	3307      	adds	r3, #7
 8002050:	10db      	asrs	r3, r3, #3
 8002052:	b29a      	uxth	r2, r3
 8002054:	8bfb      	ldrh	r3, [r7, #30]
 8002056:	4413      	add	r3, r2
 8002058:	83fb      	strh	r3, [r7, #30]
 800205a:	8bbb      	ldrh	r3, [r7, #28]
 800205c:	3308      	adds	r3, #8
 800205e:	b29b      	uxth	r3, r3
 8002060:	b21b      	sxth	r3, r3
 8002062:	425a      	negs	r2, r3
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	f002 0207 	and.w	r2, r2, #7
 800206c:	bf58      	it	pl
 800206e:	4253      	negpl	r3, r2
 8002070:	b21b      	sxth	r3, r3
 8002072:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002074:	8bfb      	ldrh	r3, [r7, #30]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	441a      	add	r2, r3
 800207a:	8bbb      	ldrh	r3, [r7, #28]
 800207c:	2110      	movs	r1, #16
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fac8 	bl	8000614 <ExtractBits>
 8002084:	4602      	mov	r2, r0
 8002086:	78bb      	ldrb	r3, [r7, #2]
 8002088:	b291      	uxth	r1, r2
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <Init_Msg_extr+0x428>)
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	460a      	mov	r2, r1
 8002094:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 8002096:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800209a:	3310      	adds	r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	da1f      	bge.n	80020e0 <Init_Msg_extr+0x42c>
 80020a0:	3307      	adds	r3, #7
 80020a2:	e01d      	b.n	80020e0 <Init_Msg_extr+0x42c>
 80020a4:	2000268c 	.word	0x2000268c
 80020a8:	20000504 	.word	0x20000504
 80020ac:	0802827c 	.word	0x0802827c
 80020b0:	080282a4 	.word	0x080282a4
 80020b4:	080282b8 	.word	0x080282b8
 80020b8:	08027f98 	.word	0x08027f98
 80020bc:	20000505 	.word	0x20000505
 80020c0:	20002630 	.word	0x20002630
 80020c4:	20002698 	.word	0x20002698
 80020c8:	20002718 	.word	0x20002718
 80020cc:	20002724 	.word	0x20002724
 80020d0:	20002994 	.word	0x20002994
 80020d4:	080282cc 	.word	0x080282cc
 80020d8:	080282d4 	.word	0x080282d4
 80020dc:	200028f4 	.word	0x200028f4
 80020e0:	10db      	asrs	r3, r3, #3
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	8bfb      	ldrh	r3, [r7, #30]
 80020e6:	4413      	add	r3, r2
 80020e8:	83fb      	strh	r3, [r7, #30]
 80020ea:	8bbb      	ldrh	r3, [r7, #28]
 80020ec:	3310      	adds	r3, #16
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	425a      	negs	r2, r3
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	f002 0207 	and.w	r2, r2, #7
 80020fc:	bf58      	it	pl
 80020fe:	4253      	negpl	r3, r2
 8002100:	b21b      	sxth	r3, r3
 8002102:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8002104:	78bb      	ldrb	r3, [r7, #2]
 8002106:	4a8e      	ldr	r2, [pc, #568]	; (8002340 <Init_Msg_extr+0x68c>)
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	3304      	adds	r3, #4
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 811d 	beq.w	8002354 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800211a:	8bfb      	ldrh	r3, [r7, #30]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	441a      	add	r2, r3
 8002120:	8bbb      	ldrh	r3, [r7, #28]
 8002122:	2108      	movs	r1, #8
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fa75 	bl	8000614 <ExtractBits>
 800212a:	4603      	mov	r3, r0
 800212c:	78ba      	ldrb	r2, [r7, #2]
 800212e:	b2d8      	uxtb	r0, r3
 8002130:	4984      	ldr	r1, [pc, #528]	; (8002344 <Init_Msg_extr+0x690>)
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	440b      	add	r3, r1
 800213c:	3305      	adds	r3, #5
 800213e:	4602      	mov	r2, r0
 8002140:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8002142:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002146:	3308      	adds	r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	da00      	bge.n	800214e <Init_Msg_extr+0x49a>
 800214c:	3307      	adds	r3, #7
 800214e:	10db      	asrs	r3, r3, #3
 8002150:	b29a      	uxth	r2, r3
 8002152:	8bfb      	ldrh	r3, [r7, #30]
 8002154:	4413      	add	r3, r2
 8002156:	83fb      	strh	r3, [r7, #30]
 8002158:	8bbb      	ldrh	r3, [r7, #28]
 800215a:	3308      	adds	r3, #8
 800215c:	b29b      	uxth	r3, r3
 800215e:	b21b      	sxth	r3, r3
 8002160:	425a      	negs	r2, r3
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	f002 0207 	and.w	r2, r2, #7
 800216a:	bf58      	it	pl
 800216c:	4253      	negpl	r3, r2
 800216e:	b21b      	sxth	r3, r3
 8002170:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002172:	8bfb      	ldrh	r3, [r7, #30]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	441a      	add	r2, r3
 8002178:	8bbb      	ldrh	r3, [r7, #28]
 800217a:	2108      	movs	r1, #8
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fa49 	bl	8000614 <ExtractBits>
 8002182:	4603      	mov	r3, r0
 8002184:	78ba      	ldrb	r2, [r7, #2]
 8002186:	b2d8      	uxtb	r0, r3
 8002188:	496e      	ldr	r1, [pc, #440]	; (8002344 <Init_Msg_extr+0x690>)
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	440b      	add	r3, r1
 8002194:	3304      	adds	r3, #4
 8002196:	4602      	mov	r2, r0
 8002198:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 800219a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800219e:	3308      	adds	r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da00      	bge.n	80021a6 <Init_Msg_extr+0x4f2>
 80021a4:	3307      	adds	r3, #7
 80021a6:	10db      	asrs	r3, r3, #3
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	8bfb      	ldrh	r3, [r7, #30]
 80021ac:	4413      	add	r3, r2
 80021ae:	83fb      	strh	r3, [r7, #30]
 80021b0:	8bbb      	ldrh	r3, [r7, #28]
 80021b2:	3308      	adds	r3, #8
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	425a      	negs	r2, r3
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	f002 0207 	and.w	r2, r2, #7
 80021c2:	bf58      	it	pl
 80021c4:	4253      	negpl	r3, r2
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80021ca:	8bfb      	ldrh	r3, [r7, #30]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	441a      	add	r2, r3
 80021d0:	8bbb      	ldrh	r3, [r7, #28]
 80021d2:	2108      	movs	r1, #8
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fa1d 	bl	8000614 <ExtractBits>
 80021da:	4603      	mov	r3, r0
 80021dc:	78ba      	ldrb	r2, [r7, #2]
 80021de:	b2d8      	uxtb	r0, r3
 80021e0:	4958      	ldr	r1, [pc, #352]	; (8002344 <Init_Msg_extr+0x690>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	440b      	add	r3, r1
 80021ec:	3303      	adds	r3, #3
 80021ee:	4602      	mov	r2, r0
 80021f0:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 80021f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021f6:	3308      	adds	r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	da00      	bge.n	80021fe <Init_Msg_extr+0x54a>
 80021fc:	3307      	adds	r3, #7
 80021fe:	10db      	asrs	r3, r3, #3
 8002200:	b29a      	uxth	r2, r3
 8002202:	8bfb      	ldrh	r3, [r7, #30]
 8002204:	4413      	add	r3, r2
 8002206:	83fb      	strh	r3, [r7, #30]
 8002208:	8bbb      	ldrh	r3, [r7, #28]
 800220a:	3308      	adds	r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b21b      	sxth	r3, r3
 8002210:	425a      	negs	r2, r3
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	f002 0207 	and.w	r2, r2, #7
 800221a:	bf58      	it	pl
 800221c:	4253      	negpl	r3, r2
 800221e:	b21b      	sxth	r3, r3
 8002220:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002222:	8bfb      	ldrh	r3, [r7, #30]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	441a      	add	r2, r3
 8002228:	8bbb      	ldrh	r3, [r7, #28]
 800222a:	2108      	movs	r1, #8
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f9f1 	bl	8000614 <ExtractBits>
 8002232:	4603      	mov	r3, r0
 8002234:	78ba      	ldrb	r2, [r7, #2]
 8002236:	b2d8      	uxtb	r0, r3
 8002238:	4942      	ldr	r1, [pc, #264]	; (8002344 <Init_Msg_extr+0x690>)
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	440b      	add	r3, r1
 8002244:	4602      	mov	r2, r0
 8002246:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8002248:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800224c:	3308      	adds	r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	da00      	bge.n	8002254 <Init_Msg_extr+0x5a0>
 8002252:	3307      	adds	r3, #7
 8002254:	10db      	asrs	r3, r3, #3
 8002256:	b29a      	uxth	r2, r3
 8002258:	8bfb      	ldrh	r3, [r7, #30]
 800225a:	4413      	add	r3, r2
 800225c:	83fb      	strh	r3, [r7, #30]
 800225e:	8bbb      	ldrh	r3, [r7, #28]
 8002260:	3308      	adds	r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	b21b      	sxth	r3, r3
 8002266:	425a      	negs	r2, r3
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	f002 0207 	and.w	r2, r2, #7
 8002270:	bf58      	it	pl
 8002272:	4253      	negpl	r3, r2
 8002274:	b21b      	sxth	r3, r3
 8002276:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002278:	8bfb      	ldrh	r3, [r7, #30]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	441a      	add	r2, r3
 800227e:	8bbb      	ldrh	r3, [r7, #28]
 8002280:	2108      	movs	r1, #8
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f9c6 	bl	8000614 <ExtractBits>
 8002288:	4603      	mov	r3, r0
 800228a:	78ba      	ldrb	r2, [r7, #2]
 800228c:	b2d8      	uxtb	r0, r3
 800228e:	492d      	ldr	r1, [pc, #180]	; (8002344 <Init_Msg_extr+0x690>)
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	3301      	adds	r3, #1
 800229c:	4602      	mov	r2, r0
 800229e:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80022a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022a4:	3308      	adds	r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da00      	bge.n	80022ac <Init_Msg_extr+0x5f8>
 80022aa:	3307      	adds	r3, #7
 80022ac:	10db      	asrs	r3, r3, #3
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	8bfb      	ldrh	r3, [r7, #30]
 80022b2:	4413      	add	r3, r2
 80022b4:	83fb      	strh	r3, [r7, #30]
 80022b6:	8bbb      	ldrh	r3, [r7, #28]
 80022b8:	3308      	adds	r3, #8
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b21b      	sxth	r3, r3
 80022be:	425a      	negs	r2, r3
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	f002 0207 	and.w	r2, r2, #7
 80022c8:	bf58      	it	pl
 80022ca:	4253      	negpl	r3, r2
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80022d0:	8bfb      	ldrh	r3, [r7, #30]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	441a      	add	r2, r3
 80022d6:	8bbb      	ldrh	r3, [r7, #28]
 80022d8:	2108      	movs	r1, #8
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f99a 	bl	8000614 <ExtractBits>
 80022e0:	4603      	mov	r3, r0
 80022e2:	78ba      	ldrb	r2, [r7, #2]
 80022e4:	b2d8      	uxtb	r0, r3
 80022e6:	4917      	ldr	r1, [pc, #92]	; (8002344 <Init_Msg_extr+0x690>)
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	440b      	add	r3, r1
 80022f2:	3302      	adds	r3, #2
 80022f4:	4602      	mov	r2, r0
 80022f6:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 80022f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022fc:	3308      	adds	r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da00      	bge.n	8002304 <Init_Msg_extr+0x650>
 8002302:	3307      	adds	r3, #7
 8002304:	10db      	asrs	r3, r3, #3
 8002306:	b29a      	uxth	r2, r3
 8002308:	8bfb      	ldrh	r3, [r7, #30]
 800230a:	4413      	add	r3, r2
 800230c:	83fb      	strh	r3, [r7, #30]
 800230e:	8bbb      	ldrh	r3, [r7, #28]
 8002310:	3308      	adds	r3, #8
 8002312:	b29b      	uxth	r3, r3
 8002314:	b21b      	sxth	r3, r3
 8002316:	425a      	negs	r2, r3
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	f002 0207 	and.w	r2, r2, #7
 8002320:	bf58      	it	pl
 8002322:	4253      	negpl	r3, r2
 8002324:	b21b      	sxth	r3, r3
 8002326:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8002328:	78bb      	ldrb	r3, [r7, #2]
 800232a:	4618      	mov	r0, r3
 800232c:	f007 f8ee 	bl	800950c <IS_MLK_EIPC_TIME_MATCHING>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <Init_Msg_extr+0x698>
 8002336:	78bb      	ldrb	r3, [r7, #2]
 8002338:	4a03      	ldr	r2, [pc, #12]	; (8002348 <Init_Msg_extr+0x694>)
 800233a:	2100      	movs	r1, #0
 800233c:	54d1      	strb	r1, [r2, r3]
 800233e:	e009      	b.n	8002354 <Init_Msg_extr+0x6a0>
 8002340:	200028f4 	.word	0x200028f4
 8002344:	200028b8 	.word	0x200028b8
 8002348:	20002764 	.word	0x20002764
 800234c:	78bb      	ldrb	r3, [r7, #2]
 800234e:	4aa4      	ldr	r2, [pc, #656]	; (80025e0 <Init_Msg_extr+0x92c>)
 8002350:	2101      	movs	r1, #1
 8002352:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002354:	8bfb      	ldrh	r3, [r7, #30]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	441a      	add	r2, r3
 800235a:	8bbb      	ldrh	r3, [r7, #28]
 800235c:	2108      	movs	r1, #8
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f958 	bl	8000614 <ExtractBits>
 8002364:	4602      	mov	r2, r0
 8002366:	78bb      	ldrb	r3, [r7, #2]
 8002368:	b2d1      	uxtb	r1, r2
 800236a:	4a9e      	ldr	r2, [pc, #632]	; (80025e4 <Init_Msg_extr+0x930>)
 800236c:	015b      	lsls	r3, r3, #5
 800236e:	4413      	add	r3, r2
 8002370:	3303      	adds	r3, #3
 8002372:	460a      	mov	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8002376:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800237a:	3308      	adds	r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	da00      	bge.n	8002382 <Init_Msg_extr+0x6ce>
 8002380:	3307      	adds	r3, #7
 8002382:	10db      	asrs	r3, r3, #3
 8002384:	b29a      	uxth	r2, r3
 8002386:	8bfb      	ldrh	r3, [r7, #30]
 8002388:	4413      	add	r3, r2
 800238a:	83fb      	strh	r3, [r7, #30]
 800238c:	8bbb      	ldrh	r3, [r7, #28]
 800238e:	3308      	adds	r3, #8
 8002390:	b29b      	uxth	r3, r3
 8002392:	b21b      	sxth	r3, r3
 8002394:	425a      	negs	r2, r3
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	f002 0207 	and.w	r2, r2, #7
 800239e:	bf58      	it	pl
 80023a0:	4253      	negpl	r3, r2
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80023a6:	8bfb      	ldrh	r3, [r7, #30]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	441a      	add	r2, r3
 80023ac:	8bbb      	ldrh	r3, [r7, #28]
 80023ae:	2110      	movs	r1, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f92f 	bl	8000614 <ExtractBits>
 80023b6:	4602      	mov	r2, r0
 80023b8:	78bb      	ldrb	r3, [r7, #2]
 80023ba:	b291      	uxth	r1, r2
 80023bc:	4a89      	ldr	r2, [pc, #548]	; (80025e4 <Init_Msg_extr+0x930>)
 80023be:	015b      	lsls	r3, r3, #5
 80023c0:	4413      	add	r3, r2
 80023c2:	3312      	adds	r3, #18
 80023c4:	460a      	mov	r2, r1
 80023c6:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 80023c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023cc:	3310      	adds	r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	da00      	bge.n	80023d4 <Init_Msg_extr+0x720>
 80023d2:	3307      	adds	r3, #7
 80023d4:	10db      	asrs	r3, r3, #3
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	8bfb      	ldrh	r3, [r7, #30]
 80023da:	4413      	add	r3, r2
 80023dc:	83fb      	strh	r3, [r7, #30]
 80023de:	8bbb      	ldrh	r3, [r7, #28]
 80023e0:	3310      	adds	r3, #16
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	425a      	negs	r2, r3
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	f002 0207 	and.w	r2, r2, #7
 80023f0:	bf58      	it	pl
 80023f2:	4253      	negpl	r3, r2
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 80023f8:	78bb      	ldrb	r3, [r7, #2]
 80023fa:	015b      	lsls	r3, r3, #5
 80023fc:	4a79      	ldr	r2, [pc, #484]	; (80025e4 <Init_Msg_extr+0x930>)
 80023fe:	4413      	add	r3, r2
 8002400:	1d18      	adds	r0, r3, #4
 8002402:	8bfb      	ldrh	r3, [r7, #30]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	2206      	movs	r2, #6
 800240a:	4619      	mov	r1, r3
 800240c:	f023 ff34 	bl	8026278 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8002410:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002414:	3310      	adds	r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	da00      	bge.n	800241c <Init_Msg_extr+0x768>
 800241a:	3307      	adds	r3, #7
 800241c:	10db      	asrs	r3, r3, #3
 800241e:	b29a      	uxth	r2, r3
 8002420:	8bfb      	ldrh	r3, [r7, #30]
 8002422:	4413      	add	r3, r2
 8002424:	83fb      	strh	r3, [r7, #30]
 8002426:	8bbb      	ldrh	r3, [r7, #28]
 8002428:	3310      	adds	r3, #16
 800242a:	b29b      	uxth	r3, r3
 800242c:	b21b      	sxth	r3, r3
 800242e:	425a      	negs	r2, r3
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	f002 0207 	and.w	r2, r2, #7
 8002438:	bf58      	it	pl
 800243a:	4253      	negpl	r3, r2
 800243c:	b21b      	sxth	r3, r3
 800243e:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002440:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002444:	3310      	adds	r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	da00      	bge.n	800244c <Init_Msg_extr+0x798>
 800244a:	3307      	adds	r3, #7
 800244c:	10db      	asrs	r3, r3, #3
 800244e:	b29a      	uxth	r2, r3
 8002450:	8bfb      	ldrh	r3, [r7, #30]
 8002452:	4413      	add	r3, r2
 8002454:	83fb      	strh	r3, [r7, #30]
 8002456:	8bbb      	ldrh	r3, [r7, #28]
 8002458:	3310      	adds	r3, #16
 800245a:	b29b      	uxth	r3, r3
 800245c:	b21b      	sxth	r3, r3
 800245e:	425a      	negs	r2, r3
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	f002 0207 	and.w	r2, r2, #7
 8002468:	bf58      	it	pl
 800246a:	4253      	negpl	r3, r2
 800246c:	b21b      	sxth	r3, r3
 800246e:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002470:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002474:	3310      	adds	r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	da00      	bge.n	800247c <Init_Msg_extr+0x7c8>
 800247a:	3307      	adds	r3, #7
 800247c:	10db      	asrs	r3, r3, #3
 800247e:	b29a      	uxth	r2, r3
 8002480:	8bfb      	ldrh	r3, [r7, #30]
 8002482:	4413      	add	r3, r2
 8002484:	83fb      	strh	r3, [r7, #30]
 8002486:	8bbb      	ldrh	r3, [r7, #28]
 8002488:	3310      	adds	r3, #16
 800248a:	b29b      	uxth	r3, r3
 800248c:	b21b      	sxth	r3, r3
 800248e:	425a      	negs	r2, r3
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	f002 0207 	and.w	r2, r2, #7
 8002498:	bf58      	it	pl
 800249a:	4253      	negpl	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80024a0:	8bfb      	ldrh	r3, [r7, #30]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	441a      	add	r2, r3
 80024a6:	8bbb      	ldrh	r3, [r7, #28]
 80024a8:	2110      	movs	r1, #16
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe f8b2 	bl	8000614 <ExtractBits>
 80024b0:	4602      	mov	r2, r0
 80024b2:	78bb      	ldrb	r3, [r7, #2]
 80024b4:	b291      	uxth	r1, r2
 80024b6:	4a4b      	ldr	r2, [pc, #300]	; (80025e4 <Init_Msg_extr+0x930>)
 80024b8:	015b      	lsls	r3, r3, #5
 80024ba:	4413      	add	r3, r2
 80024bc:	3314      	adds	r3, #20
 80024be:	460a      	mov	r2, r1
 80024c0:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 80024c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024c6:	3310      	adds	r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da00      	bge.n	80024ce <Init_Msg_extr+0x81a>
 80024cc:	3307      	adds	r3, #7
 80024ce:	10db      	asrs	r3, r3, #3
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	8bfb      	ldrh	r3, [r7, #30]
 80024d4:	4413      	add	r3, r2
 80024d6:	83fb      	strh	r3, [r7, #30]
 80024d8:	8bbb      	ldrh	r3, [r7, #28]
 80024da:	3310      	adds	r3, #16
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b21b      	sxth	r3, r3
 80024e0:	425a      	negs	r2, r3
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	f002 0207 	and.w	r2, r2, #7
 80024ea:	bf58      	it	pl
 80024ec:	4253      	negpl	r3, r2
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80024f2:	8bfb      	ldrh	r3, [r7, #30]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	441a      	add	r2, r3
 80024f8:	8bbb      	ldrh	r3, [r7, #28]
 80024fa:	2110      	movs	r1, #16
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f889 	bl	8000614 <ExtractBits>
 8002502:	4602      	mov	r2, r0
 8002504:	78bb      	ldrb	r3, [r7, #2]
 8002506:	b291      	uxth	r1, r2
 8002508:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <Init_Msg_extr+0x930>)
 800250a:	015b      	lsls	r3, r3, #5
 800250c:	4413      	add	r3, r2
 800250e:	3316      	adds	r3, #22
 8002510:	460a      	mov	r2, r1
 8002512:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8002514:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002518:	3310      	adds	r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	da00      	bge.n	8002520 <Init_Msg_extr+0x86c>
 800251e:	3307      	adds	r3, #7
 8002520:	10db      	asrs	r3, r3, #3
 8002522:	b29a      	uxth	r2, r3
 8002524:	8bfb      	ldrh	r3, [r7, #30]
 8002526:	4413      	add	r3, r2
 8002528:	83fb      	strh	r3, [r7, #30]
 800252a:	8bbb      	ldrh	r3, [r7, #28]
 800252c:	3310      	adds	r3, #16
 800252e:	b29b      	uxth	r3, r3
 8002530:	b21b      	sxth	r3, r3
 8002532:	425a      	negs	r2, r3
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	f002 0207 	and.w	r2, r2, #7
 800253c:	bf58      	it	pl
 800253e:	4253      	negpl	r3, r2
 8002540:	b21b      	sxth	r3, r3
 8002542:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002544:	8bfb      	ldrh	r3, [r7, #30]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	441a      	add	r2, r3
 800254a:	8bbb      	ldrh	r3, [r7, #28]
 800254c:	2110      	movs	r1, #16
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f860 	bl	8000614 <ExtractBits>
 8002554:	4602      	mov	r2, r0
 8002556:	78bb      	ldrb	r3, [r7, #2]
 8002558:	b291      	uxth	r1, r2
 800255a:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <Init_Msg_extr+0x930>)
 800255c:	015b      	lsls	r3, r3, #5
 800255e:	4413      	add	r3, r2
 8002560:	3318      	adds	r3, #24
 8002562:	460a      	mov	r2, r1
 8002564:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8002566:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800256a:	3310      	adds	r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	da00      	bge.n	8002572 <Init_Msg_extr+0x8be>
 8002570:	3307      	adds	r3, #7
 8002572:	10db      	asrs	r3, r3, #3
 8002574:	b29a      	uxth	r2, r3
 8002576:	8bfb      	ldrh	r3, [r7, #30]
 8002578:	4413      	add	r3, r2
 800257a:	83fb      	strh	r3, [r7, #30]
 800257c:	8bbb      	ldrh	r3, [r7, #28]
 800257e:	3310      	adds	r3, #16
 8002580:	b29b      	uxth	r3, r3
 8002582:	b21b      	sxth	r3, r3
 8002584:	425a      	negs	r2, r3
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	f002 0207 	and.w	r2, r2, #7
 800258e:	bf58      	it	pl
 8002590:	4253      	negpl	r3, r2
 8002592:	b21b      	sxth	r3, r3
 8002594:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8002596:	8bfb      	ldrh	r3, [r7, #30]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	441a      	add	r2, r3
 800259c:	78bc      	ldrb	r4, [r7, #2]
 800259e:	8bbb      	ldrh	r3, [r7, #28]
 80025a0:	2118      	movs	r1, #24
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe f836 	bl	8000614 <ExtractBits>
 80025a8:	4602      	mov	r2, r0
 80025aa:	490f      	ldr	r1, [pc, #60]	; (80025e8 <Init_Msg_extr+0x934>)
 80025ac:	0123      	lsls	r3, r4, #4
 80025ae:	440b      	add	r3, r1
 80025b0:	3308      	adds	r3, #8
 80025b2:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80025b4:	78bb      	ldrb	r3, [r7, #2]
 80025b6:	78ba      	ldrb	r2, [r7, #2]
 80025b8:	490b      	ldr	r1, [pc, #44]	; (80025e8 <Init_Msg_extr+0x934>)
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	440b      	add	r3, r1
 80025be:	3308      	adds	r3, #8
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	480a      	ldr	r0, [pc, #40]	; (80025ec <Init_Msg_extr+0x938>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4403      	add	r3, r0
 80025ce:	3308      	adds	r3, #8
 80025d0:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 80025d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025d6:	3318      	adds	r3, #24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da09      	bge.n	80025f0 <Init_Msg_extr+0x93c>
 80025dc:	3307      	adds	r3, #7
 80025de:	e007      	b.n	80025f0 <Init_Msg_extr+0x93c>
 80025e0:	20002764 	.word	0x20002764
 80025e4:	20002994 	.word	0x20002994
 80025e8:	200028f4 	.word	0x200028f4
 80025ec:	20002da4 	.word	0x20002da4
 80025f0:	10db      	asrs	r3, r3, #3
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	8bfb      	ldrh	r3, [r7, #30]
 80025f6:	4413      	add	r3, r2
 80025f8:	83fb      	strh	r3, [r7, #30]
 80025fa:	8bbb      	ldrh	r3, [r7, #28]
 80025fc:	3318      	adds	r3, #24
 80025fe:	b29b      	uxth	r3, r3
 8002600:	b21b      	sxth	r3, r3
 8002602:	425a      	negs	r2, r3
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	f002 0207 	and.w	r2, r2, #7
 800260c:	bf58      	it	pl
 800260e:	4253      	negpl	r3, r2
 8002610:	b21b      	sxth	r3, r3
 8002612:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002614:	8bfb      	ldrh	r3, [r7, #30]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	441a      	add	r2, r3
 800261a:	8bbb      	ldrh	r3, [r7, #28]
 800261c:	2108      	movs	r1, #8
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd fff8 	bl	8000614 <ExtractBits>
 8002624:	4602      	mov	r2, r0
 8002626:	78bb      	ldrb	r3, [r7, #2]
 8002628:	b2d1      	uxtb	r1, r2
 800262a:	4ab1      	ldr	r2, [pc, #708]	; (80028f0 <Init_Msg_extr+0xc3c>)
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4413      	add	r3, r2
 8002630:	460a      	mov	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8002634:	78ba      	ldrb	r2, [r7, #2]
 8002636:	78bb      	ldrb	r3, [r7, #2]
 8002638:	49ad      	ldr	r1, [pc, #692]	; (80028f0 <Init_Msg_extr+0xc3c>)
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	440a      	add	r2, r1
 800263e:	7811      	ldrb	r1, [r2, #0]
 8002640:	4aab      	ldr	r2, [pc, #684]	; (80028f0 <Init_Msg_extr+0xc3c>)
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	3302      	adds	r3, #2
 8002648:	460a      	mov	r2, r1
 800264a:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 800264c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002650:	3308      	adds	r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	da00      	bge.n	8002658 <Init_Msg_extr+0x9a4>
 8002656:	3307      	adds	r3, #7
 8002658:	10db      	asrs	r3, r3, #3
 800265a:	b29a      	uxth	r2, r3
 800265c:	8bfb      	ldrh	r3, [r7, #30]
 800265e:	4413      	add	r3, r2
 8002660:	83fb      	strh	r3, [r7, #30]
 8002662:	8bbb      	ldrh	r3, [r7, #28]
 8002664:	3308      	adds	r3, #8
 8002666:	b29b      	uxth	r3, r3
 8002668:	b21b      	sxth	r3, r3
 800266a:	425a      	negs	r2, r3
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	f002 0207 	and.w	r2, r2, #7
 8002674:	bf58      	it	pl
 8002676:	4253      	negpl	r3, r2
 8002678:	b21b      	sxth	r3, r3
 800267a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800267c:	8bfb      	ldrh	r3, [r7, #30]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	441a      	add	r2, r3
 8002682:	8bbb      	ldrh	r3, [r7, #28]
 8002684:	2108      	movs	r1, #8
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd ffc4 	bl	8000614 <ExtractBits>
 800268c:	4602      	mov	r2, r0
 800268e:	78bb      	ldrb	r3, [r7, #2]
 8002690:	b2d1      	uxtb	r1, r2
 8002692:	4a98      	ldr	r2, [pc, #608]	; (80028f4 <Init_Msg_extr+0xc40>)
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	4413      	add	r3, r2
 8002698:	330a      	adds	r3, #10
 800269a:	460a      	mov	r2, r1
 800269c:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 800269e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026a2:	3308      	adds	r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da00      	bge.n	80026aa <Init_Msg_extr+0x9f6>
 80026a8:	3307      	adds	r3, #7
 80026aa:	10db      	asrs	r3, r3, #3
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	8bfb      	ldrh	r3, [r7, #30]
 80026b0:	4413      	add	r3, r2
 80026b2:	83fb      	strh	r3, [r7, #30]
 80026b4:	8bbb      	ldrh	r3, [r7, #28]
 80026b6:	3308      	adds	r3, #8
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	425a      	negs	r2, r3
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	f002 0207 	and.w	r2, r2, #7
 80026c6:	bf58      	it	pl
 80026c8:	4253      	negpl	r3, r2
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80026ce:	8bfb      	ldrh	r3, [r7, #30]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	441a      	add	r2, r3
 80026d4:	8bbb      	ldrh	r3, [r7, #28]
 80026d6:	2108      	movs	r1, #8
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff9b 	bl	8000614 <ExtractBits>
 80026de:	4602      	mov	r2, r0
 80026e0:	78bb      	ldrb	r3, [r7, #2]
 80026e2:	b2d1      	uxtb	r1, r2
 80026e4:	4a82      	ldr	r2, [pc, #520]	; (80028f0 <Init_Msg_extr+0xc3c>)
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	3303      	adds	r3, #3
 80026ec:	460a      	mov	r2, r1
 80026ee:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 80026f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026f4:	3308      	adds	r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	da00      	bge.n	80026fc <Init_Msg_extr+0xa48>
 80026fa:	3307      	adds	r3, #7
 80026fc:	10db      	asrs	r3, r3, #3
 80026fe:	b29a      	uxth	r2, r3
 8002700:	8bfb      	ldrh	r3, [r7, #30]
 8002702:	4413      	add	r3, r2
 8002704:	83fb      	strh	r3, [r7, #30]
 8002706:	8bbb      	ldrh	r3, [r7, #28]
 8002708:	3308      	adds	r3, #8
 800270a:	b29b      	uxth	r3, r3
 800270c:	b21b      	sxth	r3, r3
 800270e:	425a      	negs	r2, r3
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	f002 0207 	and.w	r2, r2, #7
 8002718:	bf58      	it	pl
 800271a:	4253      	negpl	r3, r2
 800271c:	b21b      	sxth	r3, r3
 800271e:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8002720:	78bb      	ldrb	r3, [r7, #2]
 8002722:	4a73      	ldr	r2, [pc, #460]	; (80028f0 <Init_Msg_extr+0xc3c>)
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	3303      	adds	r3, #3
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	78bb      	ldrb	r3, [r7, #2]
 800272e:	4972      	ldr	r1, [pc, #456]	; (80028f8 <Init_Msg_extr+0xc44>)
 8002730:	440b      	add	r3, r1
 8002732:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002736:	429a      	cmp	r2, r3
 8002738:	d015      	beq.n	8002766 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 800273a:	4870      	ldr	r0, [pc, #448]	; (80028fc <Init_Msg_extr+0xc48>)
 800273c:	f023 ff48 	bl	80265d0 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002740:	78bb      	ldrb	r3, [r7, #2]
 8002742:	4a6d      	ldr	r2, [pc, #436]	; (80028f8 <Init_Msg_extr+0xc44>)
 8002744:	4413      	add	r3, r2
 8002746:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800274a:	4619      	mov	r1, r3
 800274c:	486c      	ldr	r0, [pc, #432]	; (8002900 <Init_Msg_extr+0xc4c>)
 800274e:	f023 fea3 	bl	8026498 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002752:	78bb      	ldrb	r3, [r7, #2]
 8002754:	4a66      	ldr	r2, [pc, #408]	; (80028f0 <Init_Msg_extr+0xc3c>)
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4413      	add	r3, r2
 800275a:	3303      	adds	r3, #3
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4619      	mov	r1, r3
 8002760:	4868      	ldr	r0, [pc, #416]	; (8002904 <Init_Msg_extr+0xc50>)
 8002762:	f023 fe99 	bl	8026498 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002766:	8bfb      	ldrh	r3, [r7, #30]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	441a      	add	r2, r3
 800276c:	8bbb      	ldrh	r3, [r7, #28]
 800276e:	2108      	movs	r1, #8
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd ff4f 	bl	8000614 <ExtractBits>
 8002776:	4602      	mov	r2, r0
 8002778:	78bb      	ldrb	r3, [r7, #2]
 800277a:	b2d1      	uxtb	r1, r2
 800277c:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <Init_Msg_extr+0xc40>)
 800277e:	015b      	lsls	r3, r3, #5
 8002780:	4413      	add	r3, r2
 8002782:	330b      	adds	r3, #11
 8002784:	460a      	mov	r2, r1
 8002786:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 8002788:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800278c:	3308      	adds	r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	da00      	bge.n	8002794 <Init_Msg_extr+0xae0>
 8002792:	3307      	adds	r3, #7
 8002794:	10db      	asrs	r3, r3, #3
 8002796:	b29a      	uxth	r2, r3
 8002798:	8bfb      	ldrh	r3, [r7, #30]
 800279a:	4413      	add	r3, r2
 800279c:	83fb      	strh	r3, [r7, #30]
 800279e:	8bbb      	ldrh	r3, [r7, #28]
 80027a0:	3308      	adds	r3, #8
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	425a      	negs	r2, r3
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	f002 0207 	and.w	r2, r2, #7
 80027b0:	bf58      	it	pl
 80027b2:	4253      	negpl	r3, r2
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80027b8:	8bfb      	ldrh	r3, [r7, #30]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	441a      	add	r2, r3
 80027be:	8bbb      	ldrh	r3, [r7, #28]
 80027c0:	2108      	movs	r1, #8
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd ff26 	bl	8000614 <ExtractBits>
 80027c8:	4602      	mov	r2, r0
 80027ca:	78bb      	ldrb	r3, [r7, #2]
 80027cc:	b2d1      	uxtb	r1, r2
 80027ce:	4a49      	ldr	r2, [pc, #292]	; (80028f4 <Init_Msg_extr+0xc40>)
 80027d0:	015b      	lsls	r3, r3, #5
 80027d2:	4413      	add	r3, r2
 80027d4:	330c      	adds	r3, #12
 80027d6:	460a      	mov	r2, r1
 80027d8:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80027da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027de:	3308      	adds	r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da00      	bge.n	80027e6 <Init_Msg_extr+0xb32>
 80027e4:	3307      	adds	r3, #7
 80027e6:	10db      	asrs	r3, r3, #3
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	8bfb      	ldrh	r3, [r7, #30]
 80027ec:	4413      	add	r3, r2
 80027ee:	83fb      	strh	r3, [r7, #30]
 80027f0:	8bbb      	ldrh	r3, [r7, #28]
 80027f2:	3308      	adds	r3, #8
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b21b      	sxth	r3, r3
 80027f8:	425a      	negs	r2, r3
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	f002 0207 	and.w	r2, r2, #7
 8002802:	bf58      	it	pl
 8002804:	4253      	negpl	r3, r2
 8002806:	b21b      	sxth	r3, r3
 8002808:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 800280a:	78bb      	ldrb	r3, [r7, #2]
 800280c:	4a39      	ldr	r2, [pc, #228]	; (80028f4 <Init_Msg_extr+0xc40>)
 800280e:	015b      	lsls	r3, r3, #5
 8002810:	4413      	add	r3, r2
 8002812:	330c      	adds	r3, #12
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d00c      	beq.n	8002834 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 800281a:	78bb      	ldrb	r3, [r7, #2]
 800281c:	4a35      	ldr	r2, [pc, #212]	; (80028f4 <Init_Msg_extr+0xc40>)
 800281e:	015b      	lsls	r3, r3, #5
 8002820:	4413      	add	r3, r2
 8002822:	330c      	adds	r3, #12
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4837      	ldr	r0, [pc, #220]	; (8002908 <Init_Msg_extr+0xc54>)
 800282a:	f023 fe35 	bl	8026498 <iprintf>
		printf("This Value has to be \"1\"\n");
 800282e:	4837      	ldr	r0, [pc, #220]	; (800290c <Init_Msg_extr+0xc58>)
 8002830:	f023 fece 	bl	80265d0 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002834:	8bfb      	ldrh	r3, [r7, #30]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	441a      	add	r2, r3
 800283a:	8bbb      	ldrh	r3, [r7, #28]
 800283c:	2108      	movs	r1, #8
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fee8 	bl	8000614 <ExtractBits>
 8002844:	4602      	mov	r2, r0
 8002846:	78bb      	ldrb	r3, [r7, #2]
 8002848:	b2d1      	uxtb	r1, r2
 800284a:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <Init_Msg_extr+0xc40>)
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	4413      	add	r3, r2
 8002850:	330d      	adds	r3, #13
 8002852:	460a      	mov	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002856:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800285a:	3308      	adds	r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	da00      	bge.n	8002862 <Init_Msg_extr+0xbae>
 8002860:	3307      	adds	r3, #7
 8002862:	10db      	asrs	r3, r3, #3
 8002864:	b29a      	uxth	r2, r3
 8002866:	8bfb      	ldrh	r3, [r7, #30]
 8002868:	4413      	add	r3, r2
 800286a:	83fb      	strh	r3, [r7, #30]
 800286c:	8bbb      	ldrh	r3, [r7, #28]
 800286e:	3308      	adds	r3, #8
 8002870:	b29b      	uxth	r3, r3
 8002872:	b21b      	sxth	r3, r3
 8002874:	425a      	negs	r2, r3
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	f002 0207 	and.w	r2, r2, #7
 800287e:	bf58      	it	pl
 8002880:	4253      	negpl	r3, r2
 8002882:	b21b      	sxth	r3, r3
 8002884:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 8002886:	8bfb      	ldrh	r3, [r7, #30]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	441a      	add	r2, r3
 800288c:	78bc      	ldrb	r4, [r7, #2]
 800288e:	8bbb      	ldrh	r3, [r7, #28]
 8002890:	2120      	movs	r1, #32
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd febe 	bl	8000614 <ExtractBits>
 8002898:	4602      	mov	r2, r0
 800289a:	4916      	ldr	r1, [pc, #88]	; (80028f4 <Init_Msg_extr+0xc40>)
 800289c:	0163      	lsls	r3, r4, #5
 800289e:	440b      	add	r3, r1
 80028a0:	331c      	adds	r3, #28
 80028a2:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80028a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028a8:	3320      	adds	r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da00      	bge.n	80028b0 <Init_Msg_extr+0xbfc>
 80028ae:	3307      	adds	r3, #7
 80028b0:	10db      	asrs	r3, r3, #3
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	8bfb      	ldrh	r3, [r7, #30]
 80028b6:	4413      	add	r3, r2
 80028b8:	83fb      	strh	r3, [r7, #30]
 80028ba:	8bbb      	ldrh	r3, [r7, #28]
 80028bc:	3320      	adds	r3, #32
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	425a      	negs	r2, r3
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	f002 0207 	and.w	r2, r2, #7
 80028cc:	bf58      	it	pl
 80028ce:	4253      	negpl	r3, r2
 80028d0:	b21b      	sxth	r3, r3
 80028d2:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80028d4:	787a      	ldrb	r2, [r7, #1]
 80028d6:	78bb      	ldrb	r3, [r7, #2]
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f86c 	bl	80029b8 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80028e0:	78ba      	ldrb	r2, [r7, #2]
 80028e2:	490b      	ldr	r1, [pc, #44]	; (8002910 <Init_Msg_extr+0xc5c>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	e012      	b.n	8002914 <Init_Msg_extr+0xc60>
 80028ee:	bf00      	nop
 80028f0:	200028f4 	.word	0x200028f4
 80028f4:	20002994 	.word	0x20002994
 80028f8:	20000504 	.word	0x20000504
 80028fc:	080282dc 	.word	0x080282dc
 8002900:	080282a4 	.word	0x080282a4
 8002904:	080282b8 	.word	0x080282b8
 8002908:	080282f8 	.word	0x080282f8
 800290c:	08028324 	.word	0x08028324
 8002910:	20002da4 	.word	0x20002da4
 8002914:	440b      	add	r3, r1
 8002916:	3314      	adds	r3, #20
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 800291c:	78ba      	ldrb	r2, [r7, #2]
 800291e:	4923      	ldr	r1, [pc, #140]	; (80029ac <Init_Msg_extr+0xcf8>)
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	3305      	adds	r3, #5
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8002930:	78ba      	ldrb	r2, [r7, #2]
 8002932:	491e      	ldr	r1, [pc, #120]	; (80029ac <Init_Msg_extr+0xcf8>)
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	78ba      	ldrb	r2, [r7, #2]
 8002940:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8002942:	78ba      	ldrb	r2, [r7, #2]
 8002944:	4919      	ldr	r1, [pc, #100]	; (80029ac <Init_Msg_extr+0xcf8>)
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	3301      	adds	r3, #1
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002956:	2218      	movs	r2, #24
 8002958:	2100      	movs	r1, #0
 800295a:	4815      	ldr	r0, [pc, #84]	; (80029b0 <Init_Msg_extr+0xcfc>)
 800295c:	f023 fcb4 	bl	80262c8 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8002960:	78ba      	ldrb	r2, [r7, #2]
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4a10      	ldr	r2, [pc, #64]	; (80029ac <Init_Msg_extr+0xcf8>)
 800296c:	4413      	add	r3, r2
 800296e:	2218      	movs	r2, #24
 8002970:	4619      	mov	r1, r3
 8002972:	480f      	ldr	r0, [pc, #60]	; (80029b0 <Init_Msg_extr+0xcfc>)
 8002974:	f023 fc80 	bl	8026278 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002978:	f240 2002 	movw	r0, #514	; 0x202
 800297c:	f00e f878 	bl	8010a70 <TransmitCanPkt>
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8002980:	78ba      	ldrb	r2, [r7, #2]
 8002982:	490a      	ldr	r1, [pc, #40]	; (80029ac <Init_Msg_extr+0xcf8>)
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	3301      	adds	r3, #1
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 8002994:	78bc      	ldrb	r4, [r7, #2]
 8002996:	f016 fd75 	bl	8019484 <HAL_GetTick>
 800299a:	4603      	mov	r3, r0
 800299c:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <Init_Msg_extr+0xd00>)
 800299e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80029a2:	e000      	b.n	80029a6 <Init_Msg_extr+0xcf2>
			return;
 80029a4:	bf00      	nop
}
 80029a6:	3724      	adds	r7, #36	; 0x24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd90      	pop	{r4, r7, pc}
 80029ac:	20002da4 	.word	0x20002da4
 80029b0:	20002f84 	.word	0x20002f84
 80029b4:	200024b8 	.word	0x200024b8

080029b8 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b097      	sub	sp, #92	; 0x5c
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	460a      	mov	r2, r1
 80029c2:	71fb      	strb	r3, [r7, #7]
 80029c4:	4613      	mov	r3, r2
 80029c6:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	2238      	movs	r2, #56	; 0x38
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f023 fc77 	bl	80262c8 <memset>
	uint32_t Calc_CRC = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80029de:	2300      	movs	r3, #0
 80029e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 80029ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ee:	f107 020c 	add.w	r2, r7, #12
 80029f2:	441a      	add	r2, r3
 80029f4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029f8:	23f4      	movs	r3, #244	; 0xf4
 80029fa:	2108      	movs	r1, #8
 80029fc:	f7fd fe96 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a04:	3308      	adds	r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da00      	bge.n	8002a0c <Send_Init_Msg+0x54>
 8002a0a:	3307      	adds	r3, #7
 8002a0c:	10db      	asrs	r3, r3, #3
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a14:	4413      	add	r3, r2
 8002a16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a1e:	3308      	adds	r3, #8
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	b21b      	sxth	r3, r3
 8002a24:	425a      	negs	r2, r3
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	f002 0207 	and.w	r2, r2, #7
 8002a2e:	bf58      	it	pl
 8002a30:	4253      	negpl	r3, r2
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002a38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a3c:	f107 020c 	add.w	r2, r7, #12
 8002a40:	441a      	add	r2, r3
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	4977      	ldr	r1, [pc, #476]	; (8002c24 <Send_Init_Msg+0x26c>)
 8002a46:	3366      	adds	r3, #102	; 0x66
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a52:	2110      	movs	r1, #16
 8002a54:	f7fd fe6a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002a58:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a5c:	3310      	adds	r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da00      	bge.n	8002a64 <Send_Init_Msg+0xac>
 8002a62:	3307      	adds	r3, #7
 8002a64:	10db      	asrs	r3, r3, #3
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a76:	3310      	adds	r3, #16
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	425a      	negs	r2, r3
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	f002 0207 	and.w	r2, r2, #7
 8002a86:	bf58      	it	pl
 8002a88:	4253      	negpl	r3, r2
 8002a8a:	b21b      	sxth	r3, r3
 8002a8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8002a90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a94:	f107 020c 	add.w	r2, r7, #12
 8002a98:	441a      	add	r2, r3
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	4961      	ldr	r1, [pc, #388]	; (8002c24 <Send_Init_Msg+0x26c>)
 8002a9e:	3370      	adds	r3, #112	; 0x70
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aaa:	2110      	movs	r1, #16
 8002aac:	f7fd fe3e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002ab0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	da00      	bge.n	8002abc <Send_Init_Msg+0x104>
 8002aba:	3307      	adds	r3, #7
 8002abc:	10db      	asrs	r3, r3, #3
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002aca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ace:	3310      	adds	r3, #16
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	425a      	negs	r2, r3
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	f002 0207 	and.w	r2, r2, #7
 8002ade:	bf58      	it	pl
 8002ae0:	4253      	negpl	r3, r2
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <Send_Init_Msg+0x270>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d031      	beq.n	8002b5a <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002af6:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <Send_Init_Msg+0x270>)
 8002af8:	791b      	ldrb	r3, [r3, #4]
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d137      	bne.n	8002b70 <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002b06:	4849      	ldr	r0, [pc, #292]	; (8002c2c <Send_Init_Msg+0x274>)
 8002b08:	f01b f96e 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <Send_Init_Msg+0x278>)
 8002b10:	fba3 1302 	umull	r1, r3, r3, r2
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	21c8      	movs	r1, #200	; 0xc8
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002b26:	4843      	ldr	r0, [pc, #268]	; (8002c34 <Send_Init_Msg+0x27c>)
 8002b28:	f023 fd52 	bl	80265d0 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4842      	ldr	r0, [pc, #264]	; (8002c38 <Send_Init_Msg+0x280>)
 8002b30:	f023 fcb2 	bl	8026498 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002b34:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4840      	ldr	r0, [pc, #256]	; (8002c3c <Send_Init_Msg+0x284>)
 8002b3c:	f023 fcac 	bl	8026498 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b44:	f107 020c 	add.w	r2, r7, #12
 8002b48:	441a      	add	r2, r3
 8002b4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b4e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b52:	2108      	movs	r1, #8
 8002b54:	f7fd fdea 	bl	800072c <InsertBits>
 8002b58:	e00a      	b.n	8002b70 <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002b5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b5e:	f107 020c 	add.w	r2, r7, #12
 8002b62:	441a      	add	r2, r3
 8002b64:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2108      	movs	r1, #8
 8002b6c:	f7fd fdde 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002b70:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b74:	3308      	adds	r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	da00      	bge.n	8002b7c <Send_Init_Msg+0x1c4>
 8002b7a:	3307      	adds	r3, #7
 8002b7c:	10db      	asrs	r3, r3, #3
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b84:	4413      	add	r3, r2
 8002b86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b8e:	3308      	adds	r3, #8
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	425a      	negs	r2, r3
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	f002 0207 	and.w	r2, r2, #7
 8002b9e:	bf58      	it	pl
 8002ba0:	4253      	negpl	r3, r2
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <Send_Init_Msg+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d04c      	beq.n	8002c50 <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <Send_Init_Msg+0x270>)
 8002bb8:	791b      	ldrb	r3, [r3, #4]
 8002bba:	79fa      	ldrb	r2, [r7, #7]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d165      	bne.n	8002c8c <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8002bc6:	4819      	ldr	r0, [pc, #100]	; (8002c2c <Send_Init_Msg+0x274>)
 8002bc8:	f01b f90e 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <Send_Init_Msg+0x278>)
 8002bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	21c8      	movs	r1, #200	; 0xc8
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 8002be2:	4817      	ldr	r0, [pc, #92]	; (8002c40 <Send_Init_Msg+0x288>)
 8002be4:	f023 fcf4 	bl	80265d0 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <Send_Init_Msg+0x28c>)
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	4413      	add	r3, r2
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4814      	ldr	r0, [pc, #80]	; (8002c48 <Send_Init_Msg+0x290>)
 8002bf8:	f023 fc4e 	bl	8026498 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002bfc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c00:	4619      	mov	r1, r3
 8002c02:	4812      	ldr	r0, [pc, #72]	; (8002c4c <Send_Init_Msg+0x294>)
 8002c04:	f023 fc48 	bl	8026498 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002c08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0c:	f107 020c 	add.w	r2, r7, #12
 8002c10:	441a      	add	r2, r3
 8002c12:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c16:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f7fd fd86 	bl	800072c <InsertBits>
 8002c20:	e034      	b.n	8002c8c <Send_Init_Msg+0x2d4>
 8002c22:	bf00      	nop
 8002c24:	20000504 	.word	0x20000504
 8002c28:	2000308c 	.word	0x2000308c
 8002c2c:	2000bc44 	.word	0x2000bc44
 8002c30:	51eb851f 	.word	0x51eb851f
 8002c34:	08028340 	.word	0x08028340
 8002c38:	08028364 	.word	0x08028364
 8002c3c:	08028384 	.word	0x08028384
 8002c40:	080283a4 	.word	0x080283a4
 8002c44:	200028f4 	.word	0x200028f4
 8002c48:	080283c8 	.word	0x080283c8
 8002c4c:	080283e8 	.word	0x080283e8

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 8002c50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c54:	f107 020c 	add.w	r2, r7, #12
 8002c58:	18d1      	adds	r1, r2, r3
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	48c4      	ldr	r0, [pc, #784]	; (8002f70 <Send_Init_Msg+0x5b8>)
 8002c5e:	011a      	lsls	r2, r3, #4
 8002c60:	4402      	add	r2, r0
 8002c62:	3202      	adds	r2, #2
 8002c64:	7812      	ldrb	r2, [r2, #0]
 8002c66:	3201      	adds	r2, #1
 8002c68:	b2d4      	uxtb	r4, r2
 8002c6a:	48c1      	ldr	r0, [pc, #772]	; (8002f70 <Send_Init_Msg+0x5b8>)
 8002c6c:	011a      	lsls	r2, r3, #4
 8002c6e:	4402      	add	r2, r0
 8002c70:	3202      	adds	r2, #2
 8002c72:	4620      	mov	r0, r4
 8002c74:	7010      	strb	r0, [r2, #0]
 8002c76:	4abe      	ldr	r2, [pc, #760]	; (8002f70 <Send_Init_Msg+0x5b8>)
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c84:	460a      	mov	r2, r1
 8002c86:	2108      	movs	r1, #8
 8002c88:	f7fd fd50 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002c8c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c90:	3308      	adds	r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da00      	bge.n	8002c98 <Send_Init_Msg+0x2e0>
 8002c96:	3307      	adds	r3, #7
 8002c98:	10db      	asrs	r3, r3, #3
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ca6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002caa:	3308      	adds	r3, #8
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	b21b      	sxth	r3, r3
 8002cb0:	425a      	negs	r2, r3
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	f002 0207 	and.w	r2, r2, #7
 8002cba:	bf58      	it	pl
 8002cbc:	4253      	negpl	r3, r2
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 8002cc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc8:	f107 020c 	add.w	r2, r7, #12
 8002ccc:	441a      	add	r2, r3
 8002cce:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	2108      	movs	r1, #8
 8002cd6:	f7fd fd29 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002cda:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002cde:	3308      	adds	r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da00      	bge.n	8002ce6 <Send_Init_Msg+0x32e>
 8002ce4:	3307      	adds	r3, #7
 8002ce6:	10db      	asrs	r3, r3, #3
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cee:	4413      	add	r3, r2
 8002cf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cf4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	b21b      	sxth	r3, r3
 8002cfe:	425a      	negs	r2, r3
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	f002 0207 	and.w	r2, r2, #7
 8002d08:	bf58      	it	pl
 8002d0a:	4253      	negpl	r3, r2
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	4a96      	ldr	r2, [pc, #600]	; (8002f70 <Send_Init_Msg+0x5b8>)
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4413      	add	r3, r2
 8002d1a:	3306      	adds	r3, #6
 8002d1c:	2205      	movs	r2, #5
 8002d1e:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 8002d20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d24:	f107 020c 	add.w	r2, r7, #12
 8002d28:	441a      	add	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	4990      	ldr	r1, [pc, #576]	; (8002f70 <Send_Init_Msg+0x5b8>)
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	440b      	add	r3, r1
 8002d32:	3306      	adds	r3, #6
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d3a:	2110      	movs	r1, #16
 8002d3c:	f7fd fcf6 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002d40:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d44:	3310      	adds	r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da00      	bge.n	8002d4c <Send_Init_Msg+0x394>
 8002d4a:	3307      	adds	r3, #7
 8002d4c:	10db      	asrs	r3, r3, #3
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d54:	4413      	add	r3, r2
 8002d56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d5a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d5e:	3310      	adds	r3, #16
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b21b      	sxth	r3, r3
 8002d64:	425a      	negs	r2, r3
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	f002 0207 	and.w	r2, r2, #7
 8002d6e:	bf58      	it	pl
 8002d70:	4253      	negpl	r3, r2
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d7c:	f107 020c 	add.w	r2, r7, #12
 8002d80:	441a      	add	r2, r3
 8002d82:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d86:	2317      	movs	r3, #23
 8002d88:	2108      	movs	r1, #8
 8002d8a:	f7fd fccf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002d8e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d92:	3308      	adds	r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	da00      	bge.n	8002d9a <Send_Init_Msg+0x3e2>
 8002d98:	3307      	adds	r3, #7
 8002d9a:	10db      	asrs	r3, r3, #3
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002da2:	4413      	add	r3, r2
 8002da4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002da8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dac:	3308      	adds	r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	425a      	negs	r2, r3
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	f002 0207 	and.w	r2, r2, #7
 8002dbc:	bf58      	it	pl
 8002dbe:	4253      	negpl	r3, r2
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 8002dc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dca:	f107 020c 	add.w	r2, r7, #12
 8002dce:	441a      	add	r2, r3
 8002dd0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	2110      	movs	r1, #16
 8002dd8:	f7fd fca8 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002ddc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002de0:	3310      	adds	r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da00      	bge.n	8002de8 <Send_Init_Msg+0x430>
 8002de6:	3307      	adds	r3, #7
 8002de8:	10db      	asrs	r3, r3, #3
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002df0:	4413      	add	r3, r2
 8002df2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002df6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dfa:	3310      	adds	r3, #16
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	425a      	negs	r2, r3
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	f002 0207 	and.w	r2, r2, #7
 8002e0a:	bf58      	it	pl
 8002e0c:	4253      	negpl	r3, r2
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002e14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e18:	f107 020c 	add.w	r2, r7, #12
 8002e1c:	441a      	add	r2, r3
 8002e1e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <Send_Init_Msg+0x5bc>)
 8002e24:	2120      	movs	r1, #32
 8002e26:	f7fd fc81 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002e2a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e2e:	3320      	adds	r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da00      	bge.n	8002e36 <Send_Init_Msg+0x47e>
 8002e34:	3307      	adds	r3, #7
 8002e36:	10db      	asrs	r3, r3, #3
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e3e:	4413      	add	r3, r2
 8002e40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e48:	3320      	adds	r3, #32
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	425a      	negs	r2, r3
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	f002 0207 	and.w	r2, r2, #7
 8002e58:	bf58      	it	pl
 8002e5a:	4253      	negpl	r3, r2
 8002e5c:	b21b      	sxth	r3, r3
 8002e5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 8002e62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e66:	f107 020c 	add.w	r2, r7, #12
 8002e6a:	441a      	add	r2, r3
 8002e6c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e70:	2300      	movs	r3, #0
 8002e72:	2110      	movs	r1, #16
 8002e74:	f7fd fc5a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002e78:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	da00      	bge.n	8002e84 <Send_Init_Msg+0x4cc>
 8002e82:	3307      	adds	r3, #7
 8002e84:	10db      	asrs	r3, r3, #3
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e96:	3310      	adds	r3, #16
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	425a      	negs	r2, r3
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	f002 0207 	and.w	r2, r2, #7
 8002ea6:	bf58      	it	pl
 8002ea8:	4253      	negpl	r3, r2
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 8002eb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb4:	f107 020c 	add.w	r2, r7, #12
 8002eb8:	441a      	add	r2, r3
 8002eba:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	f7fd fc33 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002ec6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002eca:	3310      	adds	r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da00      	bge.n	8002ed2 <Send_Init_Msg+0x51a>
 8002ed0:	3307      	adds	r3, #7
 8002ed2:	10db      	asrs	r3, r3, #3
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eda:	4413      	add	r3, r2
 8002edc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ee0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	425a      	negs	r2, r3
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	f002 0207 	and.w	r2, r2, #7
 8002ef4:	bf58      	it	pl
 8002ef6:	4253      	negpl	r3, r2
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 8002efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f02:	f107 020c 	add.w	r2, r7, #12
 8002f06:	441a      	add	r2, r3
 8002f08:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2110      	movs	r1, #16
 8002f10:	f7fd fc0c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f14:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f18:	3310      	adds	r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da00      	bge.n	8002f20 <Send_Init_Msg+0x568>
 8002f1e:	3307      	adds	r3, #7
 8002f20:	10db      	asrs	r3, r3, #3
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f28:	4413      	add	r3, r2
 8002f2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f32:	3310      	adds	r3, #16
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	425a      	negs	r2, r3
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	f002 0207 	and.w	r2, r2, #7
 8002f42:	bf58      	it	pl
 8002f44:	4253      	negpl	r3, r2
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002f4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f50:	f107 020c 	add.w	r2, r7, #12
 8002f54:	441a      	add	r2, r3
 8002f56:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2110      	movs	r1, #16
 8002f5e:	f7fd fbe5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f62:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f66:	3310      	adds	r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da05      	bge.n	8002f78 <Send_Init_Msg+0x5c0>
 8002f6c:	3307      	adds	r3, #7
 8002f6e:	e003      	b.n	8002f78 <Send_Init_Msg+0x5c0>
 8002f70:	200028f4 	.word	0x200028f4
 8002f74:	33e232af 	.word	0x33e232af
 8002f78:	10db      	asrs	r3, r3, #3
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f80:	4413      	add	r3, r2
 8002f82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f8a:	3310      	adds	r3, #16
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	b21b      	sxth	r3, r3
 8002f90:	425a      	negs	r2, r3
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	f002 0207 	and.w	r2, r2, #7
 8002f9a:	bf58      	it	pl
 8002f9c:	4253      	negpl	r3, r2
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	4ab2      	ldr	r2, [pc, #712]	; (8003270 <Send_Init_Msg+0x8b8>)
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	4413      	add	r3, r2
 8002fac:	3308      	adds	r3, #8
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4ab0      	ldr	r2, [pc, #704]	; (8003274 <Send_Init_Msg+0x8bc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d90d      	bls.n	8002fd2 <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	4aad      	ldr	r2, [pc, #692]	; (8003270 <Send_Init_Msg+0x8b8>)
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3308      	adds	r3, #8
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	49aa      	ldr	r1, [pc, #680]	; (8003270 <Send_Init_Msg+0x8b8>)
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	440b      	add	r3, r1
 8002fcc:	330c      	adds	r3, #12
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e00c      	b.n	8002fec <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	4aa6      	ldr	r2, [pc, #664]	; (8003270 <Send_Init_Msg+0x8b8>)
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4413      	add	r3, r2
 8002fda:	3308      	adds	r3, #8
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	3201      	adds	r2, #1
 8002fe2:	49a3      	ldr	r1, [pc, #652]	; (8003270 <Send_Init_Msg+0x8b8>)
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	440b      	add	r3, r1
 8002fe8:	330c      	adds	r3, #12
 8002fea:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002fec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ff0:	f107 020c 	add.w	r2, r7, #12
 8002ff4:	441a      	add	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	499d      	ldr	r1, [pc, #628]	; (8003270 <Send_Init_Msg+0x8b8>)
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	440b      	add	r3, r1
 8002ffe:	330c      	adds	r3, #12
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003006:	2118      	movs	r1, #24
 8003008:	f7fd fb90 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	4997      	ldr	r1, [pc, #604]	; (8003270 <Send_Init_Msg+0x8b8>)
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	440b      	add	r3, r1
 8003016:	330c      	adds	r3, #12
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	4897      	ldr	r0, [pc, #604]	; (8003278 <Send_Init_Msg+0x8c0>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4403      	add	r3, r0
 8003026:	330c      	adds	r3, #12
 8003028:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 800302a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800302e:	3318      	adds	r3, #24
 8003030:	2b00      	cmp	r3, #0
 8003032:	da00      	bge.n	8003036 <Send_Init_Msg+0x67e>
 8003034:	3307      	adds	r3, #7
 8003036:	10db      	asrs	r3, r3, #3
 8003038:	b29a      	uxth	r2, r3
 800303a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800303e:	4413      	add	r3, r2
 8003040:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003044:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003048:	3318      	adds	r3, #24
 800304a:	b29b      	uxth	r3, r3
 800304c:	b21b      	sxth	r3, r3
 800304e:	425a      	negs	r2, r3
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	f002 0207 	and.w	r2, r2, #7
 8003058:	bf58      	it	pl
 800305a:	4253      	negpl	r3, r2
 800305c:	b21b      	sxth	r3, r3
 800305e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	4a85      	ldr	r2, [pc, #532]	; (800327c <Send_Init_Msg+0x8c4>)
 8003066:	5cd2      	ldrb	r2, [r2, r3]
 8003068:	3201      	adds	r2, #1
 800306a:	b2d1      	uxtb	r1, r2
 800306c:	4a83      	ldr	r2, [pc, #524]	; (800327c <Send_Init_Msg+0x8c4>)
 800306e:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	4a82      	ldr	r2, [pc, #520]	; (800327c <Send_Init_Msg+0x8c4>)
 8003074:	5cd3      	ldrb	r3, [r2, r3]
 8003076:	2bb3      	cmp	r3, #179	; 0xb3
 8003078:	d804      	bhi.n	8003084 <Send_Init_Msg+0x6cc>
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	4a7f      	ldr	r2, [pc, #508]	; (800327c <Send_Init_Msg+0x8c4>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	4a7d      	ldr	r2, [pc, #500]	; (800327c <Send_Init_Msg+0x8c4>)
 8003088:	210a      	movs	r1, #10
 800308a:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 800308c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003090:	f107 020c 	add.w	r2, r7, #12
 8003094:	441a      	add	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	4978      	ldr	r1, [pc, #480]	; (800327c <Send_Init_Msg+0x8c4>)
 800309a:	5ccb      	ldrb	r3, [r1, r3]
 800309c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80030a0:	2108      	movs	r1, #8
 80030a2:	f7fd fb43 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80030a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80030aa:	3308      	adds	r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <Send_Init_Msg+0x6fa>
 80030b0:	3307      	adds	r3, #7
 80030b2:	10db      	asrs	r3, r3, #3
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030ba:	4413      	add	r3, r2
 80030bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030c4:	3308      	adds	r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	425a      	negs	r2, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	f002 0207 	and.w	r2, r2, #7
 80030d4:	bf58      	it	pl
 80030d6:	4253      	negpl	r3, r2
 80030d8:	b21b      	sxth	r3, r3
 80030da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80030de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030e2:	f107 020c 	add.w	r2, r7, #12
 80030e6:	441a      	add	r2, r3
 80030e8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80030ec:	2301      	movs	r3, #1
 80030ee:	2108      	movs	r1, #8
 80030f0:	f7fd fb1c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80030f4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80030f8:	3308      	adds	r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da00      	bge.n	8003100 <Send_Init_Msg+0x748>
 80030fe:	3307      	adds	r3, #7
 8003100:	10db      	asrs	r3, r3, #3
 8003102:	b29a      	uxth	r2, r3
 8003104:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003108:	4413      	add	r3, r2
 800310a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800310e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003112:	3308      	adds	r3, #8
 8003114:	b29b      	uxth	r3, r3
 8003116:	b21b      	sxth	r3, r3
 8003118:	425a      	negs	r2, r3
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	f002 0207 	and.w	r2, r2, #7
 8003122:	bf58      	it	pl
 8003124:	4253      	negpl	r3, r2
 8003126:	b21b      	sxth	r3, r3
 8003128:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 800312c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003130:	f107 020c 	add.w	r2, r7, #12
 8003134:	441a      	add	r2, r3
 8003136:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800313a:	2301      	movs	r3, #1
 800313c:	2108      	movs	r1, #8
 800313e:	f7fd faf5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003142:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003146:	3308      	adds	r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	da00      	bge.n	800314e <Send_Init_Msg+0x796>
 800314c:	3307      	adds	r3, #7
 800314e:	10db      	asrs	r3, r3, #3
 8003150:	b29a      	uxth	r2, r3
 8003152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003156:	4413      	add	r3, r2
 8003158:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800315c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003160:	3308      	adds	r3, #8
 8003162:	b29b      	uxth	r3, r3
 8003164:	b21b      	sxth	r3, r3
 8003166:	425a      	negs	r2, r3
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	f002 0207 	and.w	r2, r2, #7
 8003170:	bf58      	it	pl
 8003172:	4253      	negpl	r3, r2
 8003174:	b21b      	sxth	r3, r3
 8003176:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 800317a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800317e:	f107 020c 	add.w	r2, r7, #12
 8003182:	441a      	add	r2, r3
 8003184:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003188:	2300      	movs	r3, #0
 800318a:	2108      	movs	r1, #8
 800318c:	f7fd face 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003190:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003194:	3308      	adds	r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	da00      	bge.n	800319c <Send_Init_Msg+0x7e4>
 800319a:	3307      	adds	r3, #7
 800319c:	10db      	asrs	r3, r3, #3
 800319e:	b29a      	uxth	r2, r3
 80031a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a4:	4413      	add	r3, r2
 80031a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031ae:	3308      	adds	r3, #8
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	b21b      	sxth	r3, r3
 80031b4:	425a      	negs	r2, r3
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	f002 0207 	and.w	r2, r2, #7
 80031be:	bf58      	it	pl
 80031c0:	4253      	negpl	r3, r2
 80031c2:	b21b      	sxth	r3, r3
 80031c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <Send_Init_Msg+0x8c8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d060      	beq.n	8003298 <Send_Init_Msg+0x8e0>
 80031d6:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <Send_Init_Msg+0x8c8>)
 80031d8:	791b      	ldrb	r3, [r3, #4]
 80031da:	79fa      	ldrb	r2, [r7, #7]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d15b      	bne.n	8003298 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 80031e0:	230c      	movs	r3, #12
 80031e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 80031e6:	4827      	ldr	r0, [pc, #156]	; (8003284 <Send_Init_Msg+0x8cc>)
 80031e8:	f01a fdfe 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 80031ec:	4601      	mov	r1, r0
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <Send_Init_Msg+0x8d0>)
 80031f0:	fba3 2301 	umull	r2, r3, r3, r1
 80031f4:	08da      	lsrs	r2, r3, #3
 80031f6:	4613      	mov	r3, r2
 80031f8:	015b      	lsls	r3, r3, #5
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	1aca      	subs	r2, r1, r3
 8003202:	b2d3      	uxtb	r3, r2
 8003204:	3301      	adds	r3, #1
 8003206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 800320a:	4820      	ldr	r0, [pc, #128]	; (800328c <Send_Init_Msg+0x8d4>)
 800320c:	f023 f9e0 	bl	80265d0 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <Send_Init_Msg+0x8b8>)
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	4413      	add	r3, r2
 8003218:	3303      	adds	r3, #3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	481c      	ldr	r0, [pc, #112]	; (8003290 <Send_Init_Msg+0x8d8>)
 8003220:	f023 f93a 	bl	8026498 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	4a12      	ldr	r2, [pc, #72]	; (8003270 <Send_Init_Msg+0x8b8>)
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	4413      	add	r3, r2
 800322c:	3303      	adds	r3, #3
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003234:	429a      	cmp	r2, r3
 8003236:	d108      	bne.n	800324a <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <Send_Init_Msg+0x8b8>)
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4413      	add	r3, r2
 8003240:	3303      	adds	r3, #3
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	3b02      	subs	r3, #2
 8003246:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 800324a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800324e:	4619      	mov	r1, r3
 8003250:	4810      	ldr	r0, [pc, #64]	; (8003294 <Send_Init_Msg+0x8dc>)
 8003252:	f023 f921 	bl	8026498 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003256:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800325a:	f107 020c 	add.w	r2, r7, #12
 800325e:	441a      	add	r2, r3
 8003260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003264:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003268:	2108      	movs	r1, #8
 800326a:	f7fd fa5f 	bl	800072c <InsertBits>
	{
 800326e:	e022      	b.n	80032b6 <Send_Init_Msg+0x8fe>
 8003270:	200028f4 	.word	0x200028f4
 8003274:	00ffffef 	.word	0x00ffffef
 8003278:	20002da4 	.word	0x20002da4
 800327c:	2000030c 	.word	0x2000030c
 8003280:	2000308c 	.word	0x2000308c
 8003284:	2000bc44 	.word	0x2000bc44
 8003288:	10624dd3 	.word	0x10624dd3
 800328c:	08028408 	.word	0x08028408
 8003290:	08028438 	.word	0x08028438
 8003294:	08028454 	.word	0x08028454
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8003298:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800329c:	f107 020c 	add.w	r2, r7, #12
 80032a0:	441a      	add	r2, r3
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	494e      	ldr	r1, [pc, #312]	; (80033e0 <Send_Init_Msg+0xa28>)
 80032a6:	440b      	add	r3, r1
 80032a8:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80032ac:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80032b0:	2108      	movs	r1, #8
 80032b2:	f7fd fa3b 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80032b6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80032ba:	3308      	adds	r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da00      	bge.n	80032c2 <Send_Init_Msg+0x90a>
 80032c0:	3307      	adds	r3, #7
 80032c2:	10db      	asrs	r3, r3, #3
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032ca:	4413      	add	r3, r2
 80032cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032d4:	3308      	adds	r3, #8
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	b21b      	sxth	r3, r3
 80032da:	425a      	negs	r2, r3
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	f002 0207 	and.w	r2, r2, #7
 80032e4:	bf58      	it	pl
 80032e6:	4253      	negpl	r3, r2
 80032e8:	b21b      	sxth	r3, r3
 80032ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 80032ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032f2:	f107 020c 	add.w	r2, r7, #12
 80032f6:	441a      	add	r2, r3
 80032f8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80032fc:	2300      	movs	r3, #0
 80032fe:	2108      	movs	r1, #8
 8003300:	f7fd fa14 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003304:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003308:	3308      	adds	r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	da00      	bge.n	8003310 <Send_Init_Msg+0x958>
 800330e:	3307      	adds	r3, #7
 8003310:	10db      	asrs	r3, r3, #3
 8003312:	b29a      	uxth	r2, r3
 8003314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003318:	4413      	add	r3, r2
 800331a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800331e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003322:	3308      	adds	r3, #8
 8003324:	b29b      	uxth	r3, r3
 8003326:	b21b      	sxth	r3, r3
 8003328:	425a      	negs	r2, r3
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	f002 0207 	and.w	r2, r2, #7
 8003332:	bf58      	it	pl
 8003334:	4253      	negpl	r3, r2
 8003336:	b21b      	sxth	r3, r3
 8003338:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 800333c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003340:	f107 030c 	add.w	r3, r7, #12
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f012 fb6e 	bl	8015a28 <CalculateDirectReverseCrc>
 800334c:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 800334e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003352:	f107 020c 	add.w	r2, r7, #12
 8003356:	441a      	add	r2, r3
 8003358:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800335c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800335e:	2120      	movs	r1, #32
 8003360:	f7fd f9e4 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8003364:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003368:	3320      	adds	r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	da00      	bge.n	8003370 <Send_Init_Msg+0x9b8>
 800336e:	3307      	adds	r3, #7
 8003370:	10db      	asrs	r3, r3, #3
 8003372:	b29a      	uxth	r2, r3
 8003374:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003378:	4413      	add	r3, r2
 800337a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800337e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003382:	3320      	adds	r3, #32
 8003384:	b29b      	uxth	r3, r3
 8003386:	b21b      	sxth	r3, r3
 8003388:	425a      	negs	r2, r3
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	f002 0207 	and.w	r2, r2, #7
 8003392:	bf58      	it	pl
 8003394:	4253      	negpl	r3, r2
 8003396:	b21b      	sxth	r3, r3
 8003398:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <Send_Init_Msg+0xa2c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0a5b      	lsrs	r3, r3, #9
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <Send_Init_Msg+0xa0a>
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <Send_Init_Msg+0xa2c>)
 80033ac:	791b      	ldrb	r3, [r3, #4]
 80033ae:	79fa      	ldrb	r2, [r7, #7]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d106      	bne.n	80033c2 <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 80033b4:	480c      	ldr	r0, [pc, #48]	; (80033e8 <Send_Init_Msg+0xa30>)
 80033b6:	f023 f90b 	bl	80265d0 <puts>
		printf("Not Sending Reply");
 80033ba:	480c      	ldr	r0, [pc, #48]	; (80033ec <Send_Init_Msg+0xa34>)
 80033bc:	f023 f86c 	bl	8026498 <iprintf>
 80033c0:	e009      	b.n	80033d6 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80033c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033c6:	b2d9      	uxtb	r1, r3
 80033c8:	79fa      	ldrb	r2, [r7, #7]
 80033ca:	f107 030c 	add.w	r3, r7, #12
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 fe02 	bl	8007fd8 <Process_Sending_Reply>
	}
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	375c      	adds	r7, #92	; 0x5c
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd90      	pop	{r4, r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000504 	.word	0x20000504
 80033e4:	2000308c 	.word	0x2000308c
 80033e8:	08028470 	.word	0x08028470
 80033ec:	08028488 	.word	0x08028488

080033f0 <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b0ab      	sub	sp, #172	; 0xac
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	70fb      	strb	r3, [r7, #3]
 8003402:	460b      	mov	r3, r1
 8003404:	70bb      	strb	r3, [r7, #2]
 8003406:	4613      	mov	r3, r2
 8003408:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	uint32_t Calc_CRC = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t Recv_CRC = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint32_t Ticks = HAL_GetTick();
 800341c:	f016 f832 	bl	8019484 <HAL_GetTick>
 8003420:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint8_t noofIP = 0, uc_index = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800342a:	2300      	movs	r3, #0
 800342c:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	uint8_t LinkEstablishFlag = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	uint8_t Temp_Vital_Data_Buff[HITACHI_MAX_PAYLOAD] = {0,};
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	f107 0310 	add.w	r3, r7, #16
 800343e:	227c      	movs	r2, #124	; 0x7c
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f022 ff40 	bl	80262c8 <memset>
	BITSTUFFINIT(0, 0);
 8003448:	2300      	movs	r3, #0
 800344a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800344e:	2300      	movs	r3, #0
 8003450:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003454:	49a9      	ldr	r1, [pc, #676]	; (80036fc <Vital_Msg_extr+0x30c>)
 8003456:	48aa      	ldr	r0, [pc, #680]	; (8003700 <Vital_Msg_extr+0x310>)
 8003458:	f7fc fef2 	bl	8000240 <strcmp>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8149 	beq.w	80036f6 <Vital_Msg_extr+0x306>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003464:	4ba7      	ldr	r3, [pc, #668]	; (8003704 <Vital_Msg_extr+0x314>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d031      	beq.n	80034d4 <Vital_Msg_extr+0xe4>
 8003470:	4ba4      	ldr	r3, [pc, #656]	; (8003704 <Vital_Msg_extr+0x314>)
 8003472:	791b      	ldrb	r3, [r3, #4]
 8003474:	78ba      	ldrb	r2, [r7, #2]
 8003476:	429a      	cmp	r2, r3
 8003478:	d12c      	bne.n	80034d4 <Vital_Msg_extr+0xe4>
	{
		uint32_t Rand_Number = 22;
 800347a:	2316      	movs	r3, #22
 800347c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8003480:	48a1      	ldr	r0, [pc, #644]	; (8003708 <Vital_Msg_extr+0x318>)
 8003482:	f01a fcb1 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8003486:	4602      	mov	r2, r0
 8003488:	4ba0      	ldr	r3, [pc, #640]	; (800370c <Vital_Msg_extr+0x31c>)
 800348a:	fba3 1302 	umull	r1, r3, r3, r2
 800348e:	0dd9      	lsrs	r1, r3, #23
 8003490:	460b      	mov	r3, r1
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	1a5b      	subs	r3, r3, r1
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif
		printf("\nInjected RX Vital CRC failure\n");
 800349e:	489c      	ldr	r0, [pc, #624]	; (8003710 <Vital_Msg_extr+0x320>)
 80034a0:	f023 f896 	bl	80265d0 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034a4:	78bb      	ldrb	r3, [r7, #2]
 80034a6:	4a9b      	ldr	r2, [pc, #620]	; (8003714 <Vital_Msg_extr+0x324>)
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	4413      	add	r3, r2
 80034ac:	3308      	adds	r3, #8
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4619      	mov	r1, r3
 80034b2:	4899      	ldr	r0, [pc, #612]	; (8003718 <Vital_Msg_extr+0x328>)
 80034b4:	f022 fff0 	bl	8026498 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80034b8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80034bc:	4897      	ldr	r0, [pc, #604]	; (800371c <Vital_Msg_extr+0x32c>)
 80034be:	f022 ffeb 	bl	8026498 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 80034c2:	f107 020c 	add.w	r2, r7, #12
 80034c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ca:	2118      	movs	r1, #24
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7fd f92d 	bl	800072c <InsertBits>
	{
 80034d2:	e00b      	b.n	80034ec <Vital_Msg_extr+0xfc>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034d4:	78bb      	ldrb	r3, [r7, #2]
 80034d6:	4a8f      	ldr	r2, [pc, #572]	; (8003714 <Vital_Msg_extr+0x324>)
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	4413      	add	r3, r2
 80034dc:	3308      	adds	r3, #8
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f107 020c 	add.w	r2, r7, #12
 80034e4:	2118      	movs	r1, #24
 80034e6:	2000      	movs	r0, #0
 80034e8:	f7fd f920 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80034f2:	e010      	b.n	8003516 <Vital_Msg_extr+0x126>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80034f4:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	441a      	add	r2, r3
 80034fc:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003500:	3303      	adds	r3, #3
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	33a8      	adds	r3, #168	; 0xa8
 8003506:	443b      	add	r3, r7
 8003508:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800350c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003510:	3301      	adds	r3, #1
 8003512:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003516:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	3b05      	subs	r3, #5
 800351e:	429a      	cmp	r2, r3
 8003520:	dbe8      	blt.n	80034f4 <Vital_Msg_extr+0x104>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8003522:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003526:	b29b      	uxth	r3, r3
 8003528:	3303      	adds	r3, #3
 800352a:	b29a      	uxth	r2, r3
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f012 fa78 	bl	8015a28 <CalculateDirectReverseCrc>
 8003538:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	3b05      	subs	r3, #5
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	441a      	add	r2, r3
 8003544:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003548:	2120      	movs	r1, #32
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd f862 	bl	8000614 <ExtractBits>
 8003550:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8003554:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800355c:	429a      	cmp	r2, r3
 800355e:	f000 80f5 	beq.w	800374c <Vital_Msg_extr+0x35c>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3305      	adds	r3, #5
 8003566:	461a      	mov	r2, r3
 8003568:	2108      	movs	r1, #8
 800356a:	2000      	movs	r0, #0
 800356c:	f7fd f852 	bl	8000614 <ExtractBits>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <Vital_Msg_extr+0x19c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3305      	adds	r3, #5
 800357a:	461a      	mov	r2, r3
 800357c:	2108      	movs	r1, #8
 800357e:	2000      	movs	r0, #0
 8003580:	f7fd f848 	bl	8000614 <ExtractBits>
 8003584:	4603      	mov	r3, r0
 8003586:	2b01      	cmp	r3, #1
 8003588:	f040 809f 	bne.w	80036ca <Vital_Msg_extr+0x2da>
		{
			printf("Tx seq Roll over Detected\n");
 800358c:	4864      	ldr	r0, [pc, #400]	; (8003720 <Vital_Msg_extr+0x330>)
 800358e:	f023 f81f 	bl	80265d0 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8003592:	f107 030c 	add.w	r3, r7, #12
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f022 fe94 	bl	80262c8 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80035a0:	78bb      	ldrb	r3, [r7, #2]
 80035a2:	4a5c      	ldr	r2, [pc, #368]	; (8003714 <Vital_Msg_extr+0x324>)
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	3308      	adds	r3, #8
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	f107 020c 	add.w	r2, r7, #12
 80035b2:	2118      	movs	r1, #24
 80035b4:	2000      	movs	r0, #0
 80035b6:	f7fd f8b9 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80035c0:	e010      	b.n	80035e4 <Vital_Msg_extr+0x1f4>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80035c2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	441a      	add	r2, r3
 80035ca:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035ce:	3303      	adds	r3, #3
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	33a8      	adds	r3, #168	; 0xa8
 80035d4:	443b      	add	r3, r7
 80035d6:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035da:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035de:	3301      	adds	r3, #1
 80035e0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80035e4:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	3b05      	subs	r3, #5
 80035ec:	429a      	cmp	r2, r3
 80035ee:	dbe8      	blt.n	80035c2 <Vital_Msg_extr+0x1d2>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80035f0:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3303      	adds	r3, #3
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f012 fa11 	bl	8015a28 <CalculateDirectReverseCrc>
 8003606:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	3b05      	subs	r3, #5
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	441a      	add	r2, r3
 8003612:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003616:	2120      	movs	r1, #32
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc fffb 	bl	8000614 <ExtractBits>
 800361e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			if(Calc_CRC == Recv_CRC)
 8003622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800362a:	429a      	cmp	r2, r3
 800362c:	d137      	bne.n	800369e <Vital_Msg_extr+0x2ae>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 800362e:	483d      	ldr	r0, [pc, #244]	; (8003724 <Vital_Msg_extr+0x334>)
 8003630:	f022 ffce 	bl	80265d0 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8003634:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003638:	483b      	ldr	r0, [pc, #236]	; (8003728 <Vital_Msg_extr+0x338>)
 800363a:	f022 ff2d 	bl	8026498 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800363e:	78bb      	ldrb	r3, [r7, #2]
 8003640:	4a34      	ldr	r2, [pc, #208]	; (8003714 <Vital_Msg_extr+0x324>)
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	3308      	adds	r3, #8
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4619      	mov	r1, r3
 800364c:	4837      	ldr	r0, [pc, #220]	; (800372c <Vital_Msg_extr+0x33c>)
 800364e:	f022 ff23 	bl	8026498 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8003652:	78bb      	ldrb	r3, [r7, #2]
 8003654:	492f      	ldr	r1, [pc, #188]	; (8003714 <Vital_Msg_extr+0x324>)
 8003656:	011a      	lsls	r2, r3, #4
 8003658:	440a      	add	r2, r1
 800365a:	3208      	adds	r2, #8
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	3201      	adds	r2, #1
 8003660:	492c      	ldr	r1, [pc, #176]	; (8003714 <Vital_Msg_extr+0x324>)
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	440b      	add	r3, r1
 8003666:	3308      	adds	r3, #8
 8003668:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800366a:	78bb      	ldrb	r3, [r7, #2]
 800366c:	4a29      	ldr	r2, [pc, #164]	; (8003714 <Vital_Msg_extr+0x324>)
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	4413      	add	r3, r2
 8003672:	3308      	adds	r3, #8
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4619      	mov	r1, r3
 8003678:	482d      	ldr	r0, [pc, #180]	; (8003730 <Vital_Msg_extr+0x340>)
 800367a:	f022 ff0d 	bl	8026498 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800367e:	78bb      	ldrb	r3, [r7, #2]
 8003680:	78ba      	ldrb	r2, [r7, #2]
 8003682:	4924      	ldr	r1, [pc, #144]	; (8003714 <Vital_Msg_extr+0x324>)
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	440b      	add	r3, r1
 8003688:	3308      	adds	r3, #8
 800368a:	6819      	ldr	r1, [r3, #0]
 800368c:	4829      	ldr	r0, [pc, #164]	; (8003734 <Vital_Msg_extr+0x344>)
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4403      	add	r3, r0
 8003698:	3308      	adds	r3, #8
 800369a:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 800369c:	e057      	b.n	800374e <Vital_Msg_extr+0x35e>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800369e:	78bb      	ldrb	r3, [r7, #2]
 80036a0:	4a25      	ldr	r2, [pc, #148]	; (8003738 <Vital_Msg_extr+0x348>)
 80036a2:	3366      	adds	r3, #102	; 0x66
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4619      	mov	r1, r3
 80036ac:	4823      	ldr	r0, [pc, #140]	; (800373c <Vital_Msg_extr+0x34c>)
 80036ae:	f022 fef3 	bl	8026498 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80036b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80036b6:	4822      	ldr	r0, [pc, #136]	; (8003740 <Vital_Msg_extr+0x350>)
 80036b8:	f022 feee 	bl	8026498 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80036bc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80036c0:	4820      	ldr	r0, [pc, #128]	; (8003744 <Vital_Msg_extr+0x354>)
 80036c2:	f022 fee9 	bl	8026498 <iprintf>
				return;
 80036c6:	f000 bf51 	b.w	800456c <Vital_Msg_extr+0x117c>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036ca:	78bb      	ldrb	r3, [r7, #2]
 80036cc:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <Vital_Msg_extr+0x348>)
 80036ce:	3366      	adds	r3, #102	; 0x66
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4619      	mov	r1, r3
 80036d8:	481b      	ldr	r0, [pc, #108]	; (8003748 <Vital_Msg_extr+0x358>)
 80036da:	f022 fedd 	bl	8026498 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80036de:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80036e2:	4817      	ldr	r0, [pc, #92]	; (8003740 <Vital_Msg_extr+0x350>)
 80036e4:	f022 fed8 	bl	8026498 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80036e8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80036ec:	4815      	ldr	r0, [pc, #84]	; (8003744 <Vital_Msg_extr+0x354>)
 80036ee:	f022 fed3 	bl	8026498 <iprintf>
			return;
 80036f2:	f000 bf3b 	b.w	800456c <Vital_Msg_extr+0x117c>
		goto ROLLOVER_VITAL;
 80036f6:	bf00      	nop
 80036f8:	e029      	b.n	800374e <Vital_Msg_extr+0x35e>
 80036fa:	bf00      	nop
 80036fc:	08027f98 	.word	0x08027f98
 8003700:	20000505 	.word	0x20000505
 8003704:	2000308c 	.word	0x2000308c
 8003708:	2000bc44 	.word	0x2000bc44
 800370c:	80008001 	.word	0x80008001
 8003710:	0802849c 	.word	0x0802849c
 8003714:	200028f4 	.word	0x200028f4
 8003718:	080284bc 	.word	0x080284bc
 800371c:	080284e4 	.word	0x080284e4
 8003720:	0802850c 	.word	0x0802850c
 8003724:	08028528 	.word	0x08028528
 8003728:	08028540 	.word	0x08028540
 800372c:	08028560 	.word	0x08028560
 8003730:	08028580 	.word	0x08028580
 8003734:	20002da4 	.word	0x20002da4
 8003738:	20000504 	.word	0x20000504
 800373c:	080285ac 	.word	0x080285ac
 8003740:	080281dc 	.word	0x080281dc
 8003744:	080281ec 	.word	0x080281ec
 8003748:	080285cc 	.word	0x080285cc
		}
	}

	ROLLOVER_VITAL:
 800374c:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 800374e:	78bb      	ldrb	r3, [r7, #2]
 8003750:	49c4      	ldr	r1, [pc, #784]	; (8003a64 <Vital_Msg_extr+0x674>)
 8003752:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800375a:	78bb      	ldrb	r3, [r7, #2]
 800375c:	49c2      	ldr	r1, [pc, #776]	; (8003a68 <Vital_Msg_extr+0x678>)
 800375e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 8003766:	78bb      	ldrb	r3, [r7, #2]
 8003768:	4ac0      	ldr	r2, [pc, #768]	; (8003a6c <Vital_Msg_extr+0x67c>)
 800376a:	2101      	movs	r1, #1
 800376c:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 800376e:	78ba      	ldrb	r2, [r7, #2]
 8003770:	4613      	mov	r3, r2
 8003772:	015b      	lsls	r3, r3, #5
 8003774:	4413      	add	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4abd      	ldr	r2, [pc, #756]	; (8003a70 <Vital_Msg_extr+0x680>)
 800377a:	4413      	add	r3, r2
 800377c:	2240      	movs	r2, #64	; 0x40
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f022 fda1 	bl	80262c8 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 8003786:	78ba      	ldrb	r2, [r7, #2]
 8003788:	4613      	mov	r3, r2
 800378a:	015b      	lsls	r3, r3, #5
 800378c:	4413      	add	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4ab7      	ldr	r2, [pc, #732]	; (8003a70 <Vital_Msg_extr+0x680>)
 8003792:	4413      	add	r3, r2
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	f022 fd6d 	bl	8026278 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 800379e:	78ba      	ldrb	r2, [r7, #2]
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	b298      	uxth	r0, r3
 80037a4:	49b2      	ldr	r1, [pc, #712]	; (8003a70 <Vital_Msg_extr+0x680>)
 80037a6:	4613      	mov	r3, r2
 80037a8:	015b      	lsls	r3, r3, #5
 80037aa:	4413      	add	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	440b      	add	r3, r1
 80037b0:	3340      	adds	r3, #64	; 0x40
 80037b2:	4602      	mov	r2, r0
 80037b4:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80037b6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80037ba:	3308      	adds	r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da00      	bge.n	80037c2 <Vital_Msg_extr+0x3d2>
 80037c0:	3307      	adds	r3, #7
 80037c2:	10db      	asrs	r3, r3, #3
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037ca:	4413      	add	r3, r2
 80037cc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80037d0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037d4:	3308      	adds	r3, #8
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	b21b      	sxth	r3, r3
 80037da:	425a      	negs	r2, r3
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	f002 0207 	and.w	r2, r2, #7
 80037e4:	bf58      	it	pl
 80037e6:	4253      	negpl	r3, r2
 80037e8:	b21b      	sxth	r3, r3
 80037ea:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80037ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	441a      	add	r2, r3
 80037f6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037fa:	2110      	movs	r1, #16
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc ff09 	bl	8000614 <ExtractBits>
 8003802:	4603      	mov	r3, r0
 8003804:	78ba      	ldrb	r2, [r7, #2]
 8003806:	b298      	uxth	r0, r3
 8003808:	499a      	ldr	r1, [pc, #616]	; (8003a74 <Vital_Msg_extr+0x684>)
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	440b      	add	r3, r1
 8003814:	3328      	adds	r3, #40	; 0x28
 8003816:	4602      	mov	r2, r0
 8003818:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800381a:	78ba      	ldrb	r2, [r7, #2]
 800381c:	4995      	ldr	r1, [pc, #596]	; (8003a74 <Vital_Msg_extr+0x684>)
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	440b      	add	r3, r1
 8003828:	3328      	adds	r3, #40	; 0x28
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	4892      	ldr	r0, [pc, #584]	; (8003a78 <Vital_Msg_extr+0x688>)
 8003830:	f022 fe32 	bl	8026498 <iprintf>
	BITSTUFFINC(16);
 8003834:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003838:	3310      	adds	r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	da00      	bge.n	8003840 <Vital_Msg_extr+0x450>
 800383e:	3307      	adds	r3, #7
 8003840:	10db      	asrs	r3, r3, #3
 8003842:	b29a      	uxth	r2, r3
 8003844:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003848:	4413      	add	r3, r2
 800384a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800384e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003852:	3310      	adds	r3, #16
 8003854:	b29b      	uxth	r3, r3
 8003856:	b21b      	sxth	r3, r3
 8003858:	425a      	negs	r2, r3
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	f002 0207 	and.w	r2, r2, #7
 8003862:	bf58      	it	pl
 8003864:	4253      	negpl	r3, r2
 8003866:	b21b      	sxth	r3, r3
 8003868:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800386c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	441a      	add	r2, r3
 8003874:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003878:	2110      	movs	r1, #16
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc feca 	bl	8000614 <ExtractBits>
 8003880:	4603      	mov	r3, r0
 8003882:	78ba      	ldrb	r2, [r7, #2]
 8003884:	b298      	uxth	r0, r3
 8003886:	497b      	ldr	r1, [pc, #492]	; (8003a74 <Vital_Msg_extr+0x684>)
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	440b      	add	r3, r1
 8003892:	3326      	adds	r3, #38	; 0x26
 8003894:	4602      	mov	r2, r0
 8003896:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 8003898:	78ba      	ldrb	r2, [r7, #2]
 800389a:	4976      	ldr	r1, [pc, #472]	; (8003a74 <Vital_Msg_extr+0x684>)
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	440b      	add	r3, r1
 80038a6:	3326      	adds	r3, #38	; 0x26
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	4619      	mov	r1, r3
 80038ac:	4873      	ldr	r0, [pc, #460]	; (8003a7c <Vital_Msg_extr+0x68c>)
 80038ae:	f022 fdf3 	bl	8026498 <iprintf>
	BITSTUFFINC(16);
 80038b2:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80038b6:	3310      	adds	r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	da00      	bge.n	80038be <Vital_Msg_extr+0x4ce>
 80038bc:	3307      	adds	r3, #7
 80038be:	10db      	asrs	r3, r3, #3
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038c6:	4413      	add	r3, r2
 80038c8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80038cc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038d0:	3310      	adds	r3, #16
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	425a      	negs	r2, r3
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	f002 0207 	and.w	r2, r2, #7
 80038e0:	bf58      	it	pl
 80038e2:	4253      	negpl	r3, r2
 80038e4:	b21b      	sxth	r3, r3
 80038e6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80038ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	441a      	add	r2, r3
 80038f2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038f6:	2108      	movs	r1, #8
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fe8b 	bl	8000614 <ExtractBits>
 80038fe:	4602      	mov	r2, r0
 8003900:	78bb      	ldrb	r3, [r7, #2]
 8003902:	b2d1      	uxtb	r1, r2
 8003904:	4a5e      	ldr	r2, [pc, #376]	; (8003a80 <Vital_Msg_extr+0x690>)
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	4413      	add	r3, r2
 800390a:	3302      	adds	r3, #2
 800390c:	460a      	mov	r2, r1
 800390e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003910:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003914:	3308      	adds	r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	da00      	bge.n	800391c <Vital_Msg_extr+0x52c>
 800391a:	3307      	adds	r3, #7
 800391c:	10db      	asrs	r3, r3, #3
 800391e:	b29a      	uxth	r2, r3
 8003920:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003924:	4413      	add	r3, r2
 8003926:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800392a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800392e:	3308      	adds	r3, #8
 8003930:	b29b      	uxth	r3, r3
 8003932:	b21b      	sxth	r3, r3
 8003934:	425a      	negs	r2, r3
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	f002 0207 	and.w	r2, r2, #7
 800393e:	bf58      	it	pl
 8003940:	4253      	negpl	r3, r2
 8003942:	b21b      	sxth	r3, r3
 8003944:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003948:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	441a      	add	r2, r3
 8003950:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003954:	2108      	movs	r1, #8
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fe5c 	bl	8000614 <ExtractBits>
 800395c:	4602      	mov	r2, r0
 800395e:	78bb      	ldrb	r3, [r7, #2]
 8003960:	b2d1      	uxtb	r1, r2
 8003962:	4a47      	ldr	r2, [pc, #284]	; (8003a80 <Vital_Msg_extr+0x690>)
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	4413      	add	r3, r2
 8003968:	3301      	adds	r3, #1
 800396a:	460a      	mov	r2, r1
 800396c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800396e:	78bb      	ldrb	r3, [r7, #2]
 8003970:	4a43      	ldr	r2, [pc, #268]	; (8003a80 <Vital_Msg_extr+0x690>)
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	4413      	add	r3, r2
 8003976:	3301      	adds	r3, #1
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d138      	bne.n	80039f0 <Vital_Msg_extr+0x600>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800397e:	78bb      	ldrb	r3, [r7, #2]
 8003980:	4a40      	ldr	r2, [pc, #256]	; (8003a84 <Vital_Msg_extr+0x694>)
 8003982:	3366      	adds	r3, #102	; 0x66
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4619      	mov	r1, r3
 800398c:	483e      	ldr	r0, [pc, #248]	; (8003a88 <Vital_Msg_extr+0x698>)
 800398e:	f022 fd83 	bl	8026498 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003992:	78bb      	ldrb	r3, [r7, #2]
 8003994:	4a3a      	ldr	r2, [pc, #232]	; (8003a80 <Vital_Msg_extr+0x690>)
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	4413      	add	r3, r2
 800399a:	330c      	adds	r3, #12
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	483a      	ldr	r0, [pc, #232]	; (8003a8c <Vital_Msg_extr+0x69c>)
 80039a2:	f022 fd79 	bl	8026498 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039a6:	78bb      	ldrb	r3, [r7, #2]
 80039a8:	4935      	ldr	r1, [pc, #212]	; (8003a80 <Vital_Msg_extr+0x690>)
 80039aa:	011a      	lsls	r2, r3, #4
 80039ac:	440a      	add	r2, r1
 80039ae:	320c      	adds	r2, #12
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	3201      	adds	r2, #1
 80039b4:	4932      	ldr	r1, [pc, #200]	; (8003a80 <Vital_Msg_extr+0x690>)
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	440b      	add	r3, r1
 80039ba:	330c      	adds	r3, #12
 80039bc:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80039be:	78bb      	ldrb	r3, [r7, #2]
 80039c0:	4a2f      	ldr	r2, [pc, #188]	; (8003a80 <Vital_Msg_extr+0x690>)
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	4413      	add	r3, r2
 80039c6:	330c      	adds	r3, #12
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4619      	mov	r1, r3
 80039cc:	4830      	ldr	r0, [pc, #192]	; (8003a90 <Vital_Msg_extr+0x6a0>)
 80039ce:	f022 fd63 	bl	8026498 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039d2:	78bb      	ldrb	r3, [r7, #2]
 80039d4:	78ba      	ldrb	r2, [r7, #2]
 80039d6:	492a      	ldr	r1, [pc, #168]	; (8003a80 <Vital_Msg_extr+0x690>)
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	440b      	add	r3, r1
 80039dc:	330c      	adds	r3, #12
 80039de:	6819      	ldr	r1, [r3, #0]
 80039e0:	482c      	ldr	r0, [pc, #176]	; (8003a94 <Vital_Msg_extr+0x6a4>)
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4403      	add	r3, r0
 80039ec:	330c      	adds	r3, #12
 80039ee:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80039f0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80039f4:	3308      	adds	r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	da00      	bge.n	80039fc <Vital_Msg_extr+0x60c>
 80039fa:	3307      	adds	r3, #7
 80039fc:	10db      	asrs	r3, r3, #3
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a04:	4413      	add	r3, r2
 8003a06:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003a0a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a0e:	3308      	adds	r3, #8
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	b21b      	sxth	r3, r3
 8003a14:	425a      	negs	r2, r3
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	f002 0207 	and.w	r2, r2, #7
 8003a1e:	bf58      	it	pl
 8003a20:	4253      	negpl	r3, r2
 8003a22:	b21b      	sxth	r3, r3
 8003a24:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003a28:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	441a      	add	r2, r3
 8003a30:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a34:	2108      	movs	r1, #8
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fc fdec 	bl	8000614 <ExtractBits>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	78ba      	ldrb	r2, [r7, #2]
 8003a40:	b2d8      	uxtb	r0, r3
 8003a42:	490c      	ldr	r1, [pc, #48]	; (8003a74 <Vital_Msg_extr+0x684>)
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3302      	adds	r3, #2
 8003a50:	4602      	mov	r2, r0
 8003a52:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003a54:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003a58:	3308      	adds	r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	da1c      	bge.n	8003a98 <Vital_Msg_extr+0x6a8>
 8003a5e:	3307      	adds	r3, #7
 8003a60:	e01a      	b.n	8003a98 <Vital_Msg_extr+0x6a8>
 8003a62:	bf00      	nop
 8003a64:	20002630 	.word	0x20002630
 8003a68:	20002658 	.word	0x20002658
 8003a6c:	200026a4 	.word	0x200026a4
 8003a70:	200030ac 	.word	0x200030ac
 8003a74:	20002ad4 	.word	0x20002ad4
 8003a78:	080282cc 	.word	0x080282cc
 8003a7c:	080282d4 	.word	0x080282d4
 8003a80:	200028f4 	.word	0x200028f4
 8003a84:	20000504 	.word	0x20000504
 8003a88:	080285e0 	.word	0x080285e0
 8003a8c:	08028624 	.word	0x08028624
 8003a90:	08028634 	.word	0x08028634
 8003a94:	20002da4 	.word	0x20002da4
 8003a98:	10db      	asrs	r3, r3, #3
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003aa6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003aaa:	3308      	adds	r3, #8
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b21b      	sxth	r3, r3
 8003ab0:	425a      	negs	r2, r3
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	f002 0207 	and.w	r2, r2, #7
 8003aba:	bf58      	it	pl
 8003abc:	4253      	negpl	r3, r2
 8003abe:	b21b      	sxth	r3, r3
 8003ac0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003ac4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	441a      	add	r2, r3
 8003acc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ad0:	2110      	movs	r1, #16
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fc fd9e 	bl	8000614 <ExtractBits>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	78bb      	ldrb	r3, [r7, #2]
 8003adc:	b291      	uxth	r1, r2
 8003ade:	4abd      	ldr	r2, [pc, #756]	; (8003dd4 <Vital_Msg_extr+0x9e4>)
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003aea:	49bb      	ldr	r1, [pc, #748]	; (8003dd8 <Vital_Msg_extr+0x9e8>)
 8003aec:	48bb      	ldr	r0, [pc, #748]	; (8003ddc <Vital_Msg_extr+0x9ec>)
 8003aee:	f7fc fba7 	bl	8000240 <strcmp>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <Vital_Msg_extr+0x728>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8003af8:	78bb      	ldrb	r3, [r7, #2]
 8003afa:	4ab6      	ldr	r2, [pc, #728]	; (8003dd4 <Vital_Msg_extr+0x9e4>)
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	4413      	add	r3, r2
 8003b00:	3304      	adds	r3, #4
 8003b02:	881a      	ldrh	r2, [r3, #0]
 8003b04:	78bb      	ldrb	r3, [r7, #2]
 8003b06:	f042 0208 	orr.w	r2, r2, #8
 8003b0a:	b291      	uxth	r1, r2
 8003b0c:	4ab1      	ldr	r2, [pc, #708]	; (8003dd4 <Vital_Msg_extr+0x9e4>)
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	460a      	mov	r2, r1
 8003b16:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003b18:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003b1c:	3310      	adds	r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da00      	bge.n	8003b24 <Vital_Msg_extr+0x734>
 8003b22:	3307      	adds	r3, #7
 8003b24:	10db      	asrs	r3, r3, #3
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003b32:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b36:	3310      	adds	r3, #16
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	b21b      	sxth	r3, r3
 8003b3c:	425a      	negs	r2, r3
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	f002 0207 	and.w	r2, r2, #7
 8003b46:	bf58      	it	pl
 8003b48:	4253      	negpl	r3, r2
 8003b4a:	b21b      	sxth	r3, r3
 8003b4c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003b50:	78bb      	ldrb	r3, [r7, #2]
 8003b52:	4aa0      	ldr	r2, [pc, #640]	; (8003dd4 <Vital_Msg_extr+0x9e4>)
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8145 	beq.w	8003df0 <Vital_Msg_extr+0xa00>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003b66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b72:	2108      	movs	r1, #8
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fc fd4d 	bl	8000614 <ExtractBits>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	78ba      	ldrb	r2, [r7, #2]
 8003b7e:	b2d8      	uxtb	r0, r3
 8003b80:	4997      	ldr	r1, [pc, #604]	; (8003de0 <Vital_Msg_extr+0x9f0>)
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3305      	adds	r3, #5
 8003b8e:	4602      	mov	r2, r0
 8003b90:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003b92:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003b96:	3308      	adds	r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	da00      	bge.n	8003b9e <Vital_Msg_extr+0x7ae>
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	10db      	asrs	r3, r3, #3
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003bac:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	b21b      	sxth	r3, r3
 8003bb6:	425a      	negs	r2, r3
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	f002 0207 	and.w	r2, r2, #7
 8003bc0:	bf58      	it	pl
 8003bc2:	4253      	negpl	r3, r2
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003bca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bd6:	2108      	movs	r1, #8
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fd1b 	bl	8000614 <ExtractBits>
 8003bde:	4603      	mov	r3, r0
 8003be0:	78ba      	ldrb	r2, [r7, #2]
 8003be2:	b2d8      	uxtb	r0, r3
 8003be4:	497e      	ldr	r1, [pc, #504]	; (8003de0 <Vital_Msg_extr+0x9f0>)
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	440b      	add	r3, r1
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8003bf6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	da00      	bge.n	8003c02 <Vital_Msg_extr+0x812>
 8003c00:	3307      	adds	r3, #7
 8003c02:	10db      	asrs	r3, r3, #3
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c10:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c14:	3308      	adds	r3, #8
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	425a      	negs	r2, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	f002 0207 	and.w	r2, r2, #7
 8003c24:	bf58      	it	pl
 8003c26:	4253      	negpl	r3, r2
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003c2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	441a      	add	r2, r3
 8003c36:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c3a:	2108      	movs	r1, #8
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fc fce9 	bl	8000614 <ExtractBits>
 8003c42:	4603      	mov	r3, r0
 8003c44:	78ba      	ldrb	r2, [r7, #2]
 8003c46:	b2d8      	uxtb	r0, r3
 8003c48:	4965      	ldr	r1, [pc, #404]	; (8003de0 <Vital_Msg_extr+0x9f0>)
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	440b      	add	r3, r1
 8003c54:	3303      	adds	r3, #3
 8003c56:	4602      	mov	r2, r0
 8003c58:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8003c5a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c5e:	3308      	adds	r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	da00      	bge.n	8003c66 <Vital_Msg_extr+0x876>
 8003c64:	3307      	adds	r3, #7
 8003c66:	10db      	asrs	r3, r3, #3
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c6e:	4413      	add	r3, r2
 8003c70:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c74:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c78:	3308      	adds	r3, #8
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b21b      	sxth	r3, r3
 8003c7e:	425a      	negs	r2, r3
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	f002 0207 	and.w	r2, r2, #7
 8003c88:	bf58      	it	pl
 8003c8a:	4253      	negpl	r3, r2
 8003c8c:	b21b      	sxth	r3, r3
 8003c8e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003c92:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	441a      	add	r2, r3
 8003c9a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c9e:	2108      	movs	r1, #8
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fcb7 	bl	8000614 <ExtractBits>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	78ba      	ldrb	r2, [r7, #2]
 8003caa:	b2d8      	uxtb	r0, r3
 8003cac:	494c      	ldr	r1, [pc, #304]	; (8003de0 <Vital_Msg_extr+0x9f0>)
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	440b      	add	r3, r1
 8003cb8:	4602      	mov	r2, r0
 8003cba:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8003cbc:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	da00      	bge.n	8003cc8 <Vital_Msg_extr+0x8d8>
 8003cc6:	3307      	adds	r3, #7
 8003cc8:	10db      	asrs	r3, r3, #3
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003cd6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003cda:	3308      	adds	r3, #8
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	b21b      	sxth	r3, r3
 8003ce0:	425a      	negs	r2, r3
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	f002 0207 	and.w	r2, r2, #7
 8003cea:	bf58      	it	pl
 8003cec:	4253      	negpl	r3, r2
 8003cee:	b21b      	sxth	r3, r3
 8003cf0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003cf4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	441a      	add	r2, r3
 8003cfc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d00:	2108      	movs	r1, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fc86 	bl	8000614 <ExtractBits>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	78ba      	ldrb	r2, [r7, #2]
 8003d0c:	b2d8      	uxtb	r0, r3
 8003d0e:	4934      	ldr	r1, [pc, #208]	; (8003de0 <Vital_Msg_extr+0x9f0>)
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	440b      	add	r3, r1
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003d20:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003d24:	3308      	adds	r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	da00      	bge.n	8003d2c <Vital_Msg_extr+0x93c>
 8003d2a:	3307      	adds	r3, #7
 8003d2c:	10db      	asrs	r3, r3, #3
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d34:	4413      	add	r3, r2
 8003d36:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003d3a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d3e:	3308      	adds	r3, #8
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	425a      	negs	r2, r3
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	f002 0207 	and.w	r2, r2, #7
 8003d4e:	bf58      	it	pl
 8003d50:	4253      	negpl	r3, r2
 8003d52:	b21b      	sxth	r3, r3
 8003d54:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003d58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	441a      	add	r2, r3
 8003d60:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d64:	2108      	movs	r1, #8
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fc54 	bl	8000614 <ExtractBits>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	78ba      	ldrb	r2, [r7, #2]
 8003d70:	b2d8      	uxtb	r0, r3
 8003d72:	491b      	ldr	r1, [pc, #108]	; (8003de0 <Vital_Msg_extr+0x9f0>)
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3302      	adds	r3, #2
 8003d80:	4602      	mov	r2, r0
 8003d82:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003d84:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003d88:	3308      	adds	r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	da00      	bge.n	8003d90 <Vital_Msg_extr+0x9a0>
 8003d8e:	3307      	adds	r3, #7
 8003d90:	10db      	asrs	r3, r3, #3
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d98:	4413      	add	r3, r2
 8003d9a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003d9e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003da2:	3308      	adds	r3, #8
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	b21b      	sxth	r3, r3
 8003da8:	425a      	negs	r2, r3
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	f002 0207 	and.w	r2, r2, #7
 8003db2:	bf58      	it	pl
 8003db4:	4253      	negpl	r3, r2
 8003db6:	b21b      	sxth	r3, r3
 8003db8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8003dbc:	78bb      	ldrb	r3, [r7, #2]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f005 fba4 	bl	800950c <IS_MLK_EIPC_TIME_MATCHING>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00e      	beq.n	8003de8 <Vital_Msg_extr+0x9f8>
 8003dca:	78bb      	ldrb	r3, [r7, #2]
 8003dcc:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <Vital_Msg_extr+0x9f4>)
 8003dce:	2100      	movs	r1, #0
 8003dd0:	54d1      	strb	r1, [r2, r3]
 8003dd2:	e00d      	b.n	8003df0 <Vital_Msg_extr+0xa00>
 8003dd4:	200028f4 	.word	0x200028f4
 8003dd8:	08027f98 	.word	0x08027f98
 8003ddc:	20000505 	.word	0x20000505
 8003de0:	200028b8 	.word	0x200028b8
 8003de4:	20002764 	.word	0x20002764
 8003de8:	78bb      	ldrb	r3, [r7, #2]
 8003dea:	4a91      	ldr	r2, [pc, #580]	; (8004030 <Vital_Msg_extr+0xc40>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8003df0:	78bb      	ldrb	r3, [r7, #2]
 8003df2:	4a90      	ldr	r2, [pc, #576]	; (8004034 <Vital_Msg_extr+0xc44>)
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <Vital_Msg_extr+0xa1a>
	{
		LinkEstablishFlag = SET;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003e0a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	441a      	add	r2, r3
 8003e12:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e16:	2108      	movs	r1, #8
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc fbfb 	bl	8000614 <ExtractBits>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	78ba      	ldrb	r2, [r7, #2]
 8003e22:	b2d8      	uxtb	r0, r3
 8003e24:	4984      	ldr	r1, [pc, #528]	; (8004038 <Vital_Msg_extr+0xc48>)
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	440b      	add	r3, r1
 8003e30:	3303      	adds	r3, #3
 8003e32:	4602      	mov	r2, r0
 8003e34:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003e36:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da00      	bge.n	8003e42 <Vital_Msg_extr+0xa52>
 8003e40:	3307      	adds	r3, #7
 8003e42:	10db      	asrs	r3, r3, #3
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003e50:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e54:	3308      	adds	r3, #8
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	425a      	negs	r2, r3
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	f002 0207 	and.w	r2, r2, #7
 8003e64:	bf58      	it	pl
 8003e66:	4253      	negpl	r3, r2
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 8003e6e:	78ba      	ldrb	r2, [r7, #2]
 8003e70:	4971      	ldr	r1, [pc, #452]	; (8004038 <Vital_Msg_extr+0xc48>)
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3303      	adds	r3, #3
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	4619      	mov	r1, r3
 8003e82:	486e      	ldr	r0, [pc, #440]	; (800403c <Vital_Msg_extr+0xc4c>)
 8003e84:	f022 fb08 	bl	8026498 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003e88:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	441a      	add	r2, r3
 8003e90:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e94:	2108      	movs	r1, #8
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc fbbc 	bl	8000614 <ExtractBits>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	78ba      	ldrb	r2, [r7, #2]
 8003ea0:	b2d8      	uxtb	r0, r3
 8003ea2:	4965      	ldr	r1, [pc, #404]	; (8004038 <Vital_Msg_extr+0xc48>)
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	440b      	add	r3, r1
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003eb4:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003eb8:	3308      	adds	r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da00      	bge.n	8003ec0 <Vital_Msg_extr+0xad0>
 8003ebe:	3307      	adds	r3, #7
 8003ec0:	10db      	asrs	r3, r3, #3
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003ec8:	4413      	add	r3, r2
 8003eca:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003ece:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b21b      	sxth	r3, r3
 8003ed8:	425a      	negs	r2, r3
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	f002 0207 	and.w	r2, r2, #7
 8003ee2:	bf58      	it	pl
 8003ee4:	4253      	negpl	r3, r2
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 8003eec:	78ba      	ldrb	r2, [r7, #2]
 8003eee:	4952      	ldr	r1, [pc, #328]	; (8004038 <Vital_Msg_extr+0xc48>)
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	440b      	add	r3, r1
 8003efa:	3303      	adds	r3, #3
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (noofIP != 0)
 8003f06:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00e      	beq.n	8003f2c <Vital_Msg_extr+0xb3c>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 8003f0e:	78ba      	ldrb	r2, [r7, #2]
 8003f10:	4949      	ldr	r1, [pc, #292]	; (8004038 <Vital_Msg_extr+0xc48>)
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	3301      	adds	r3, #1
 8003f26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003f2a:	e00b      	b.n	8003f44 <Vital_Msg_extr+0xb54>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003f2c:	78ba      	ldrb	r2, [r7, #2]
 8003f2e:	4942      	ldr	r1, [pc, #264]	; (8004038 <Vital_Msg_extr+0xc48>)
 8003f30:	4613      	mov	r3, r2
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	4413      	add	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	440b      	add	r3, r1
 8003f3a:	3303      	adds	r3, #3
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	08db      	lsrs	r3, r3, #3
 8003f40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003f44:	2300      	movs	r3, #0
 8003f46:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003f4a:	e04c      	b.n	8003fe6 <Vital_Msg_extr+0xbf6>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003f4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	441a      	add	r2, r3
 8003f54:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003f58:	2108      	movs	r1, #8
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fc fb5a 	bl	8000614 <ExtractBits>
 8003f60:	4603      	mov	r3, r0
 8003f62:	78ba      	ldrb	r2, [r7, #2]
 8003f64:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003f68:	b2dc      	uxtb	r4, r3
 8003f6a:	4833      	ldr	r0, [pc, #204]	; (8004038 <Vital_Msg_extr+0xc48>)
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4413      	add	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	4403      	add	r3, r0
 8003f76:	440b      	add	r3, r1
 8003f78:	3305      	adds	r3, #5
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 8003f7e:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8003f82:	78ba      	ldrb	r2, [r7, #2]
 8003f84:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003f88:	4c2b      	ldr	r4, [pc, #172]	; (8004038 <Vital_Msg_extr+0xc48>)
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	4423      	add	r3, r4
 8003f94:	440b      	add	r3, r1
 8003f96:	3305      	adds	r3, #5
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4601      	mov	r1, r0
 8003f9e:	4828      	ldr	r0, [pc, #160]	; (8004040 <Vital_Msg_extr+0xc50>)
 8003fa0:	f022 fa7a 	bl	8026498 <iprintf>
		BITSTUFFINC(8);
 8003fa4:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003fa8:	3308      	adds	r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da00      	bge.n	8003fb0 <Vital_Msg_extr+0xbc0>
 8003fae:	3307      	adds	r3, #7
 8003fb0:	10db      	asrs	r3, r3, #3
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003fb8:	4413      	add	r3, r2
 8003fba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003fbe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	425a      	negs	r2, r3
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	f002 0207 	and.w	r2, r2, #7
 8003fd2:	bf58      	it	pl
 8003fd4:	4253      	negpl	r3, r2
 8003fd6:	b21b      	sxth	r3, r3
 8003fd8:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003fdc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003fe6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d3ab      	bcc.n	8003f4c <Vital_Msg_extr+0xb5c>
	}
	printf("\n");
 8003ff4:	200a      	movs	r0, #10
 8003ff6:	f022 fa67 	bl	80264c8 <putchar>
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8003ffa:	78bb      	ldrb	r3, [r7, #2]
 8003ffc:	4a11      	ldr	r2, [pc, #68]	; (8004044 <Vital_Msg_extr+0xc54>)
 8003ffe:	4413      	add	r3, r2
 8004000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004004:	2b02      	cmp	r3, #2
 8004006:	d10e      	bne.n	8004026 <Vital_Msg_extr+0xc36>
	{
		printf("Online Bit Status:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8004008:	78ba      	ldrb	r2, [r7, #2]
 800400a:	490b      	ldr	r1, [pc, #44]	; (8004038 <Vital_Msg_extr+0xc48>)
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	440b      	add	r3, r1
 8004016:	3305      	adds	r3, #5
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	4619      	mov	r1, r3
 8004020:	4809      	ldr	r0, [pc, #36]	; (8004048 <Vital_Msg_extr+0xc58>)
 8004022:	f022 fa39 	bl	8026498 <iprintf>
	}

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8004026:	2300      	movs	r3, #0
 8004028:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800402c:	e048      	b.n	80040c0 <Vital_Msg_extr+0xcd0>
 800402e:	bf00      	nop
 8004030:	20002764 	.word	0x20002764
 8004034:	200028f4 	.word	0x200028f4
 8004038:	20002ad4 	.word	0x20002ad4
 800403c:	08028644 	.word	0x08028644
 8004040:	0802864c 	.word	0x0802864c
 8004044:	20000504 	.word	0x20000504
 8004048:	0802865c 	.word	0x0802865c
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800404c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	441a      	add	r2, r3
 8004054:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004058:	2108      	movs	r1, #8
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fada 	bl	8000614 <ExtractBits>
 8004060:	4603      	mov	r3, r0
 8004062:	78ba      	ldrb	r2, [r7, #2]
 8004064:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8004068:	b2dc      	uxtb	r4, r3
 800406a:	486b      	ldr	r0, [pc, #428]	; (8004218 <Vital_Msg_extr+0xe28>)
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	4403      	add	r3, r0
 8004076:	440b      	add	r3, r1
 8004078:	3315      	adds	r3, #21
 800407a:	4622      	mov	r2, r4
 800407c:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800407e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8004082:	3308      	adds	r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	da00      	bge.n	800408a <Vital_Msg_extr+0xc9a>
 8004088:	3307      	adds	r3, #7
 800408a:	10db      	asrs	r3, r3, #3
 800408c:	b29a      	uxth	r2, r3
 800408e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004092:	4413      	add	r3, r2
 8004094:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8004098:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800409c:	3308      	adds	r3, #8
 800409e:	b29b      	uxth	r3, r3
 80040a0:	b21b      	sxth	r3, r3
 80040a2:	425a      	negs	r2, r3
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	f002 0207 	and.w	r2, r2, #7
 80040ac:	bf58      	it	pl
 80040ae:	4253      	negpl	r3, r2
 80040b0:	b21b      	sxth	r3, r3
 80040b2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80040b6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80040ba:	3301      	adds	r3, #1
 80040bc:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80040c0:	78ba      	ldrb	r2, [r7, #2]
 80040c2:	4955      	ldr	r1, [pc, #340]	; (8004218 <Vital_Msg_extr+0xe28>)
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	440b      	add	r3, r1
 80040ce:	3304      	adds	r3, #4
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80040d8:	429a      	cmp	r2, r3
 80040da:	d3b7      	bcc.n	800404c <Vital_Msg_extr+0xc5c>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 80040dc:	787a      	ldrb	r2, [r7, #1]
 80040de:	78bb      	ldrb	r3, [r7, #2]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f003 fbd8 	bl	8007898 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 80040e8:	78bb      	ldrb	r3, [r7, #2]
 80040ea:	4a4c      	ldr	r2, [pc, #304]	; (800421c <Vital_Msg_extr+0xe2c>)
 80040ec:	2101      	movs	r1, #1
 80040ee:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 80040f0:	78bb      	ldrb	r3, [r7, #2]
 80040f2:	4a4a      	ldr	r2, [pc, #296]	; (800421c <Vital_Msg_extr+0xe2c>)
 80040f4:	3302      	adds	r3, #2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80040fe:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8004100:	78ba      	ldrb	r2, [r7, #2]
 8004102:	4947      	ldr	r1, [pc, #284]	; (8004220 <Vital_Msg_extr+0xe30>)
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	3304      	adds	r3, #4
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d116      	bne.n	8004144 <Vital_Msg_extr+0xd54>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8004116:	2246      	movs	r2, #70	; 0x46
 8004118:	2100      	movs	r1, #0
 800411a:	4842      	ldr	r0, [pc, #264]	; (8004224 <Vital_Msg_extr+0xe34>)
 800411c:	f022 f8d4 	bl	80262c8 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8004120:	78bb      	ldrb	r3, [r7, #2]
 8004122:	b29a      	uxth	r2, r3
 8004124:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <Vital_Msg_extr+0xe34>)
 8004126:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	b29a      	uxth	r2, r3
 800412c:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <Vital_Msg_extr+0xe34>)
 800412e:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	461a      	mov	r2, r3
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	483c      	ldr	r0, [pc, #240]	; (8004228 <Vital_Msg_extr+0xe38>)
 8004138:	f022 f89e 	bl	8026278 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
#endif
#ifdef EI_2
		TransmitCanPkt(SEND_VITAL_MSG_2);
 800413c:	f44f 7001 	mov.w	r0, #516	; 0x204
 8004140:	f00c fc96 	bl	8010a70 <TransmitCanPkt>

	/* To check Whether the Data received is from Active system or Not By checking the 1st bit Vital Data
	 * This checking is Only required for Serial Interface
	 */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET))
 8004144:	78bb      	ldrb	r3, [r7, #2]
 8004146:	4a39      	ldr	r2, [pc, #228]	; (800422c <Vital_Msg_extr+0xe3c>)
 8004148:	4413      	add	r3, r2
 800414a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800414e:	2b02      	cmp	r3, #2
 8004150:	d128      	bne.n	80041a4 <Vital_Msg_extr+0xdb4>
 8004152:	78ba      	ldrb	r2, [r7, #2]
 8004154:	4930      	ldr	r1, [pc, #192]	; (8004218 <Vital_Msg_extr+0xe28>)
 8004156:	4613      	mov	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4413      	add	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	440b      	add	r3, r1
 8004160:	3305      	adds	r3, #5
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d11b      	bne.n	80041a4 <Vital_Msg_extr+0xdb4>
	{
		printf("Online Bit Drop\n");
 800416c:	4830      	ldr	r0, [pc, #192]	; (8004230 <Vital_Msg_extr+0xe40>)
 800416e:	f022 fa2f 	bl	80265d0 <puts>
		LinkEstablishFlag = RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		Act_InactiveFlag[Source_Index] = SET;
 8004178:	78bb      	ldrb	r3, [r7, #2]
 800417a:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <Vital_Msg_extr+0xe44>)
 800417c:	2101      	movs	r1, #1
 800417e:	54d1      	strb	r1, [r2, r3]
		LastActCount[Source_Index] = RESET;
 8004180:	78bb      	ldrb	r3, [r7, #2]
 8004182:	4a2d      	ldr	r2, [pc, #180]	; (8004238 <Vital_Msg_extr+0xe48>)
 8004184:	2100      	movs	r1, #0
 8004186:	54d1      	strb	r1, [r2, r3]
		memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 8004188:	78ba      	ldrb	r2, [r7, #2]
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4a21      	ldr	r2, [pc, #132]	; (8004218 <Vital_Msg_extr+0xe28>)
 8004194:	4413      	add	r3, r2
 8004196:	3305      	adds	r3, #5
 8004198:	2210      	movs	r2, #16
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f022 f893 	bl	80262c8 <memset>
 80041a2:	e05d      	b.n	8004260 <Vital_Msg_extr+0xe70>
	}
	else if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == SET) && (LinkEstablishFlag == SET))
 80041a4:	78bb      	ldrb	r3, [r7, #2]
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <Vital_Msg_extr+0xe3c>)
 80041a8:	4413      	add	r3, r2
 80041aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d156      	bne.n	8004260 <Vital_Msg_extr+0xe70>
 80041b2:	78ba      	ldrb	r2, [r7, #2]
 80041b4:	4918      	ldr	r1, [pc, #96]	; (8004218 <Vital_Msg_extr+0xe28>)
 80041b6:	4613      	mov	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4413      	add	r3, r2
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	440b      	add	r3, r1
 80041c0:	3305      	adds	r3, #5
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d049      	beq.n	8004260 <Vital_Msg_extr+0xe70>
 80041cc:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d145      	bne.n	8004260 <Vital_Msg_extr+0xe70>
	{
		if(Act_InactiveFlag[Source_Index] == SET)
 80041d4:	78bb      	ldrb	r3, [r7, #2]
 80041d6:	4a17      	ldr	r2, [pc, #92]	; (8004234 <Vital_Msg_extr+0xe44>)
 80041d8:	5cd3      	ldrb	r3, [r2, r3]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d140      	bne.n	8004260 <Vital_Msg_extr+0xe70>
		{
			++LastActCount[Source_Index];
 80041de:	78bb      	ldrb	r3, [r7, #2]
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <Vital_Msg_extr+0xe48>)
 80041e2:	5cd2      	ldrb	r2, [r2, r3]
 80041e4:	3201      	adds	r2, #1
 80041e6:	b2d1      	uxtb	r1, r2
 80041e8:	4a13      	ldr	r2, [pc, #76]	; (8004238 <Vital_Msg_extr+0xe48>)
 80041ea:	54d1      	strb	r1, [r2, r3]
			printf("Updated Count:%u\n",LastActCount[Source_Index]);
 80041ec:	78bb      	ldrb	r3, [r7, #2]
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <Vital_Msg_extr+0xe48>)
 80041f0:	5cd3      	ldrb	r3, [r2, r3]
 80041f2:	4619      	mov	r1, r3
 80041f4:	4811      	ldr	r0, [pc, #68]	; (800423c <Vital_Msg_extr+0xe4c>)
 80041f6:	f022 f94f 	bl	8026498 <iprintf>
			if(LastActCount[Source_Index] >= MAX_LAST_ACT_COUNT)
 80041fa:	78bb      	ldrb	r3, [r7, #2]
 80041fc:	4a0e      	ldr	r2, [pc, #56]	; (8004238 <Vital_Msg_extr+0xe48>)
 80041fe:	5cd3      	ldrb	r3, [r2, r3]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d91d      	bls.n	8004240 <Vital_Msg_extr+0xe50>
			{
				Act_InactiveFlag[Source_Index] = RESET;
 8004204:	78bb      	ldrb	r3, [r7, #2]
 8004206:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <Vital_Msg_extr+0xe44>)
 8004208:	2100      	movs	r1, #0
 800420a:	54d1      	strb	r1, [r2, r3]
				LastActCount[Source_Index] = MAX_LAST_ACT_COUNT; /* To avoid Overflow of Variable */
 800420c:	78bb      	ldrb	r3, [r7, #2]
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <Vital_Msg_extr+0xe48>)
 8004210:	2104      	movs	r1, #4
 8004212:	54d1      	strb	r1, [r2, r3]
 8004214:	e024      	b.n	8004260 <Vital_Msg_extr+0xe70>
 8004216:	bf00      	nop
 8004218:	20002ad4 	.word	0x20002ad4
 800421c:	200033c4 	.word	0x200033c4
 8004220:	20002da4 	.word	0x20002da4
 8004224:	20002fb4 	.word	0x20002fb4
 8004228:	20002fba 	.word	0x20002fba
 800422c:	20000504 	.word	0x20000504
 8004230:	08028674 	.word	0x08028674
 8004234:	20002538 	.word	0x20002538
 8004238:	20002544 	.word	0x20002544
 800423c:	08028684 	.word	0x08028684
			}
			else
			{
				LinkEstablishFlag = RESET;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 8004246:	78ba      	ldrb	r2, [r7, #2]
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4ac8      	ldr	r2, [pc, #800]	; (8004574 <Vital_Msg_extr+0x1184>)
 8004252:	4413      	add	r3, r2
 8004254:	3305      	adds	r3, #5
 8004256:	2210      	movs	r2, #16
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f022 f834 	bl	80262c8 <memset>
		}
	}


	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8004260:	78ba      	ldrb	r2, [r7, #2]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4ac3      	ldr	r2, [pc, #780]	; (8004578 <Vital_Msg_extr+0x1188>)
 800426c:	4413      	add	r3, r2
 800426e:	3301      	adds	r3, #1
 8004270:	2210      	movs	r2, #16
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f022 f827 	bl	80262c8 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 800427a:	78ba      	ldrb	r2, [r7, #2]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4abc      	ldr	r2, [pc, #752]	; (8004578 <Vital_Msg_extr+0x1188>)
 8004286:	4413      	add	r3, r2
 8004288:	1c58      	adds	r0, r3, #1
 800428a:	78ba      	ldrb	r2, [r7, #2]
 800428c:	4613      	mov	r3, r2
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4413      	add	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	4ab7      	ldr	r2, [pc, #732]	; (8004574 <Vital_Msg_extr+0x1184>)
 8004296:	4413      	add	r3, r2
 8004298:	3305      	adds	r3, #5
 800429a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800429e:	4619      	mov	r1, r3
 80042a0:	f021 ffea 	bl	8026278 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 80042a4:	78ba      	ldrb	r2, [r7, #2]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4ab2      	ldr	r2, [pc, #712]	; (8004578 <Vital_Msg_extr+0x1188>)
 80042b0:	4413      	add	r3, r2
 80042b2:	3301      	adds	r3, #1
 80042b4:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042b8:	b212      	sxth	r2, r2
 80042ba:	78bc      	ldrb	r4, [r7, #2]
 80042bc:	4619      	mov	r1, r3
 80042be:	2000      	movs	r0, #0
 80042c0:	f011 faf8 	bl	80158b4 <GetCRC16>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4619      	mov	r1, r3
 80042c8:	4aab      	ldr	r2, [pc, #684]	; (8004578 <Vital_Msg_extr+0x1188>)
 80042ca:	4623      	mov	r3, r4
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4423      	add	r3, r4
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	3312      	adds	r3, #18
 80042d6:	460a      	mov	r2, r1
 80042d8:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 80042da:	78ba      	ldrb	r2, [r7, #2]
 80042dc:	49a6      	ldr	r1, [pc, #664]	; (8004578 <Vital_Msg_extr+0x1188>)
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	3311      	adds	r3, #17
 80042ea:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042ee:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 80042f0:	78ba      	ldrb	r2, [r7, #2]
 80042f2:	49a1      	ldr	r1, [pc, #644]	; (8004578 <Vital_Msg_extr+0x1188>)
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	78ba      	ldrb	r2, [r7, #2]
 8004300:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8004302:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8004306:	2b01      	cmp	r3, #1
 8004308:	d16c      	bne.n	80043e4 <Vital_Msg_extr+0xff4>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800430a:	78ba      	ldrb	r2, [r7, #2]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4a99      	ldr	r2, [pc, #612]	; (800457c <Vital_Msg_extr+0x118c>)
 8004316:	4413      	add	r3, r2
 8004318:	3301      	adds	r3, #1
 800431a:	2210      	movs	r2, #16
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f021 ffd2 	bl	80262c8 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8004324:	78ba      	ldrb	r2, [r7, #2]
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4a93      	ldr	r2, [pc, #588]	; (800457c <Vital_Msg_extr+0x118c>)
 8004330:	1898      	adds	r0, r3, r2
 8004332:	78ba      	ldrb	r2, [r7, #2]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4a8e      	ldr	r2, [pc, #568]	; (8004578 <Vital_Msg_extr+0x1188>)
 800433e:	4413      	add	r3, r2
 8004340:	2214      	movs	r2, #20
 8004342:	4619      	mov	r1, r3
 8004344:	f021 ff98 	bl	8026278 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8004348:	78bb      	ldrb	r3, [r7, #2]
 800434a:	498d      	ldr	r1, [pc, #564]	; (8004580 <Vital_Msg_extr+0x1190>)
 800434c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8004354:	78bb      	ldrb	r3, [r7, #2]
 8004356:	4a8b      	ldr	r2, [pc, #556]	; (8004584 <Vital_Msg_extr+0x1194>)
 8004358:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800435c:	78ba      	ldrb	r2, [r7, #2]
 800435e:	4887      	ldr	r0, [pc, #540]	; (800457c <Vital_Msg_extr+0x118c>)
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4403      	add	r3, r0
 800436a:	3312      	adds	r3, #18
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	4299      	cmp	r1, r3
 8004370:	d038      	beq.n	80043e4 <Vital_Msg_extr+0xff4>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8004372:	78ba      	ldrb	r2, [r7, #2]
 8004374:	78b9      	ldrb	r1, [r7, #2]
 8004376:	4881      	ldr	r0, [pc, #516]	; (800457c <Vital_Msg_extr+0x118c>)
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4403      	add	r3, r0
 8004382:	3312      	adds	r3, #18
 8004384:	881a      	ldrh	r2, [r3, #0]
 8004386:	4b7f      	ldr	r3, [pc, #508]	; (8004584 <Vital_Msg_extr+0x1194>)
 8004388:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 800438c:	2214      	movs	r2, #20
 800438e:	2100      	movs	r1, #0
 8004390:	487d      	ldr	r0, [pc, #500]	; (8004588 <Vital_Msg_extr+0x1198>)
 8004392:	f021 ff99 	bl	80262c8 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8004396:	78ba      	ldrb	r2, [r7, #2]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4a76      	ldr	r2, [pc, #472]	; (800457c <Vital_Msg_extr+0x118c>)
 80043a2:	4413      	add	r3, r2
 80043a4:	2214      	movs	r2, #20
 80043a6:	4619      	mov	r1, r3
 80043a8:	4877      	ldr	r0, [pc, #476]	; (8004588 <Vital_Msg_extr+0x1198>)
 80043aa:	f021 ff65 	bl	8026278 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 80043ae:	f44f 7002 	mov.w	r0, #520	; 0x208
 80043b2:	f00c fb5d 	bl	8010a70 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 80043b6:	78bb      	ldrb	r3, [r7, #2]
 80043b8:	4a74      	ldr	r2, [pc, #464]	; (800458c <Vital_Msg_extr+0x119c>)
 80043ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d110      	bne.n	80043e4 <Vital_Msg_extr+0xff4>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80043c2:	78bb      	ldrb	r3, [r7, #2]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4a72      	ldr	r2, [pc, #456]	; (8004590 <Vital_Msg_extr+0x11a0>)
 80043c8:	4413      	add	r3, r2
 80043ca:	1c98      	adds	r0, r3, #2
 80043cc:	78ba      	ldrb	r2, [r7, #2]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4a69      	ldr	r2, [pc, #420]	; (800457c <Vital_Msg_extr+0x118c>)
 80043d8:	4413      	add	r3, r2
 80043da:	3301      	adds	r3, #1
 80043dc:	2210      	movs	r2, #16
 80043de:	4619      	mov	r1, r3
 80043e0:	f021 ff4a 	bl	8026278 <memcpy>
			}
		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80043e4:	78b9      	ldrb	r1, [r7, #2]
 80043e6:	78ba      	ldrb	r2, [r7, #2]
 80043e8:	4864      	ldr	r0, [pc, #400]	; (800457c <Vital_Msg_extr+0x118c>)
 80043ea:	460b      	mov	r3, r1
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4403      	add	r3, r0
 80043f4:	3312      	adds	r3, #18
 80043f6:	8818      	ldrh	r0, [r3, #0]
 80043f8:	4966      	ldr	r1, [pc, #408]	; (8004594 <Vital_Msg_extr+0x11a4>)
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	440b      	add	r3, r1
 8004404:	3306      	adds	r3, #6
 8004406:	4602      	mov	r2, r0
 8004408:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 800440a:	78ba      	ldrb	r2, [r7, #2]
 800440c:	4961      	ldr	r1, [pc, #388]	; (8004594 <Vital_Msg_extr+0x11a4>)
 800440e:	4613      	mov	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	3314      	adds	r3, #20
 800441a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800441e:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8004420:	78ba      	ldrb	r2, [r7, #2]
 8004422:	495c      	ldr	r1, [pc, #368]	; (8004594 <Vital_Msg_extr+0x11a4>)
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	440b      	add	r3, r1
 800442e:	3305      	adds	r3, #5
 8004430:	2202      	movs	r2, #2
 8004432:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8004434:	78ba      	ldrb	r2, [r7, #2]
 8004436:	4957      	ldr	r1, [pc, #348]	; (8004594 <Vital_Msg_extr+0x11a4>)
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	440b      	add	r3, r1
 8004442:	78ba      	ldrb	r2, [r7, #2]
 8004444:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8004446:	78ba      	ldrb	r2, [r7, #2]
 8004448:	4952      	ldr	r1, [pc, #328]	; (8004594 <Vital_Msg_extr+0x11a4>)
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	3301      	adds	r3, #1
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 800445a:	78ba      	ldrb	r2, [r7, #2]
 800445c:	494d      	ldr	r1, [pc, #308]	; (8004594 <Vital_Msg_extr+0x11a4>)
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	440b      	add	r3, r1
 8004468:	3302      	adds	r3, #2
 800446a:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800446e:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8004470:	2218      	movs	r2, #24
 8004472:	2100      	movs	r1, #0
 8004474:	4848      	ldr	r0, [pc, #288]	; (8004598 <Vital_Msg_extr+0x11a8>)
 8004476:	f021 ff27 	bl	80262c8 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800447a:	78ba      	ldrb	r2, [r7, #2]
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4a43      	ldr	r2, [pc, #268]	; (8004594 <Vital_Msg_extr+0x11a4>)
 8004486:	4413      	add	r3, r2
 8004488:	2218      	movs	r2, #24
 800448a:	4619      	mov	r1, r3
 800448c:	4842      	ldr	r0, [pc, #264]	; (8004598 <Vital_Msg_extr+0x11a8>)
 800448e:	f021 fef3 	bl	8026278 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8004492:	f240 2002 	movw	r0, #514	; 0x202
 8004496:	f00c faeb 	bl	8010a70 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800449a:	78ba      	ldrb	r2, [r7, #2]
 800449c:	493d      	ldr	r1, [pc, #244]	; (8004594 <Vital_Msg_extr+0x11a4>)
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	440b      	add	r3, r1
 80044a8:	3301      	adds	r3, #1
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80044ae:	78bb      	ldrb	r3, [r7, #2]
 80044b0:	493a      	ldr	r1, [pc, #232]	; (800459c <Vital_Msg_extr+0x11ac>)
 80044b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 80044ba:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d11f      	bne.n	8004502 <Vital_Msg_extr+0x1112>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 80044c2:	78bb      	ldrb	r3, [r7, #2]
 80044c4:	4936      	ldr	r1, [pc, #216]	; (80045a0 <Vital_Msg_extr+0x11b0>)
 80044c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 80044ce:	78ba      	ldrb	r2, [r7, #2]
 80044d0:	4934      	ldr	r1, [pc, #208]	; (80045a4 <Vital_Msg_extr+0x11b4>)
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	3304      	adds	r3, #4
 80044de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044e2:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 80044e4:	78ba      	ldrb	r2, [r7, #2]
 80044e6:	492f      	ldr	r1, [pc, #188]	; (80045a4 <Vital_Msg_extr+0x11b4>)
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	3301      	adds	r3, #1
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 80044f8:	78bb      	ldrb	r3, [r7, #2]
 80044fa:	4a2b      	ldr	r2, [pc, #172]	; (80045a8 <Vital_Msg_extr+0x11b8>)
 80044fc:	2101      	movs	r1, #1
 80044fe:	54d1      	strb	r1, [r2, r3]
 8004500:	e02f      	b.n	8004562 <Vital_Msg_extr+0x1172>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8004502:	78bb      	ldrb	r3, [r7, #2]
 8004504:	4a28      	ldr	r2, [pc, #160]	; (80045a8 <Vital_Msg_extr+0x11b8>)
 8004506:	2100      	movs	r1, #0
 8004508:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 800450a:	78ba      	ldrb	r2, [r7, #2]
 800450c:	4925      	ldr	r1, [pc, #148]	; (80045a4 <Vital_Msg_extr+0x11b4>)
 800450e:	4613      	mov	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	3308      	adds	r3, #8
 800451a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800451e:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8004520:	78ba      	ldrb	r2, [r7, #2]
 8004522:	4920      	ldr	r1, [pc, #128]	; (80045a4 <Vital_Msg_extr+0x11b4>)
 8004524:	4613      	mov	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	3301      	adds	r3, #1
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8004534:	78ba      	ldrb	r2, [r7, #2]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4a0f      	ldr	r2, [pc, #60]	; (800457c <Vital_Msg_extr+0x118c>)
 8004540:	4413      	add	r3, r2
 8004542:	3301      	adds	r3, #1
 8004544:	2210      	movs	r2, #16
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f021 febd 	bl	80262c8 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 800454e:	78ba      	ldrb	r2, [r7, #2]
 8004550:	490a      	ldr	r1, [pc, #40]	; (800457c <Vital_Msg_extr+0x118c>)
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3312      	adds	r3, #18
 800455e:	2200      	movs	r2, #0
 8004560:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8004562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004566:	4811      	ldr	r0, [pc, #68]	; (80045ac <Vital_Msg_extr+0x11bc>)
 8004568:	f017 fc75 	bl	801be56 <HAL_GPIO_TogglePin>

}
 800456c:	37ac      	adds	r7, #172	; 0xac
 800456e:	46bd      	mov	sp, r7
 8004570:	bd90      	pop	{r4, r7, pc}
 8004572:	bf00      	nop
 8004574:	20002ad4 	.word	0x20002ad4
 8004578:	200034e8 	.word	0x200034e8
 800457c:	200035b0 	.word	0x200035b0
 8004580:	20002564 	.word	0x20002564
 8004584:	2000258c 	.word	0x2000258c
 8004588:	20003740 	.word	0x20003740
 800458c:	20002550 	.word	0x20002550
 8004590:	20002770 	.word	0x20002770
 8004594:	20002da4 	.word	0x20002da4
 8004598:	20002f84 	.word	0x20002f84
 800459c:	200024b8 	.word	0x200024b8
 80045a0:	200025a0 	.word	0x200025a0
 80045a4:	200033f8 	.word	0x200033f8
 80045a8:	200025f0 	.word	0x200025f0
 80045ac:	40021c00 	.word	0x40021c00

080045b0 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b0a5      	sub	sp, #148	; 0x94
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	460a      	mov	r2, r1
 80045ba:	71fb      	strb	r3, [r7, #7]
 80045bc:	4613      	mov	r3, r2
 80045be:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 80045c0:	2300      	movs	r3, #0
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045c8:	2238      	movs	r2, #56	; 0x38
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f021 fe7b 	bl	80262c8 <memset>
	uint8_t Temp_Buff[60] = {0,};
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	f107 0310 	add.w	r3, r7, #16
 80045da:	2238      	movs	r2, #56	; 0x38
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f021 fe72 	bl	80262c8 <memset>
	uint8_t uc_index = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 80045ea:	2300      	movs	r3, #0
 80045ec:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045f0:	2300      	movs	r3, #0
 80045f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 80045f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045fa:	223c      	movs	r2, #60	; 0x3c
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f021 fe62 	bl	80262c8 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8004604:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004608:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800460c:	441a      	add	r2, r3
 800460e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004612:	23f4      	movs	r3, #244	; 0xf4
 8004614:	2108      	movs	r1, #8
 8004616:	f7fc f889 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800461a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800461e:	3308      	adds	r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	da00      	bge.n	8004626 <Send_Vital_Data_Message+0x76>
 8004624:	3307      	adds	r3, #7
 8004626:	10db      	asrs	r3, r3, #3
 8004628:	b29a      	uxth	r2, r3
 800462a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800462e:	4413      	add	r3, r2
 8004630:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004634:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004638:	3308      	adds	r3, #8
 800463a:	b29b      	uxth	r3, r3
 800463c:	b21b      	sxth	r3, r3
 800463e:	425a      	negs	r2, r3
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	f002 0207 	and.w	r2, r2, #7
 8004648:	bf58      	it	pl
 800464a:	4253      	negpl	r3, r2
 800464c:	b21b      	sxth	r3, r3
 800464e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004652:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004656:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800465a:	441a      	add	r2, r3
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	49c6      	ldr	r1, [pc, #792]	; (8004978 <Send_Vital_Data_Message+0x3c8>)
 8004660:	3366      	adds	r3, #102	; 0x66
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800466c:	2110      	movs	r1, #16
 800466e:	f7fc f85d 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8004672:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004676:	3310      	adds	r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	da00      	bge.n	800467e <Send_Vital_Data_Message+0xce>
 800467c:	3307      	adds	r3, #7
 800467e:	10db      	asrs	r3, r3, #3
 8004680:	b29a      	uxth	r2, r3
 8004682:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004686:	4413      	add	r3, r2
 8004688:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800468c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004690:	3310      	adds	r3, #16
 8004692:	b29b      	uxth	r3, r3
 8004694:	b21b      	sxth	r3, r3
 8004696:	425a      	negs	r2, r3
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	f002 0207 	and.w	r2, r2, #7
 80046a0:	bf58      	it	pl
 80046a2:	4253      	negpl	r3, r2
 80046a4:	b21b      	sxth	r3, r3
 80046a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80046aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046b2:	441a      	add	r2, r3
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	49b0      	ldr	r1, [pc, #704]	; (8004978 <Send_Vital_Data_Message+0x3c8>)
 80046b8:	3370      	adds	r3, #112	; 0x70
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80046c4:	2110      	movs	r1, #16
 80046c6:	f7fc f831 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80046ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80046ce:	3310      	adds	r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	da00      	bge.n	80046d6 <Send_Vital_Data_Message+0x126>
 80046d4:	3307      	adds	r3, #7
 80046d6:	10db      	asrs	r3, r3, #3
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046de:	4413      	add	r3, r2
 80046e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80046e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80046e8:	3310      	adds	r3, #16
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	425a      	negs	r2, r3
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	f002 0207 	and.w	r2, r2, #7
 80046f8:	bf58      	it	pl
 80046fa:	4253      	negpl	r3, r2
 80046fc:	b21b      	sxth	r3, r3
 80046fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004702:	4b9e      	ldr	r3, [pc, #632]	; (800497c <Send_Vital_Data_Message+0x3cc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d035      	beq.n	800477c <Send_Vital_Data_Message+0x1cc>
 8004710:	4b9a      	ldr	r3, [pc, #616]	; (800497c <Send_Vital_Data_Message+0x3cc>)
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	79fa      	ldrb	r2, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d130      	bne.n	800477c <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8004720:	4897      	ldr	r0, [pc, #604]	; (8004980 <Send_Vital_Data_Message+0x3d0>)
 8004722:	f019 fb61 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8004726:	4602      	mov	r2, r0
 8004728:	4b96      	ldr	r3, [pc, #600]	; (8004984 <Send_Vital_Data_Message+0x3d4>)
 800472a:	fba3 1302 	umull	r1, r3, r3, r2
 800472e:	099b      	lsrs	r3, r3, #6
 8004730:	21c8      	movs	r1, #200	; 0xc8
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 800473c:	4892      	ldr	r0, [pc, #584]	; (8004988 <Send_Vital_Data_Message+0x3d8>)
 800473e:	f021 ff47 	bl	80265d0 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	4a91      	ldr	r2, [pc, #580]	; (800498c <Send_Vital_Data_Message+0x3dc>)
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	4413      	add	r3, r2
 800474a:	3301      	adds	r3, #1
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	488f      	ldr	r0, [pc, #572]	; (8004990 <Send_Vital_Data_Message+0x3e0>)
 8004752:	f021 fea1 	bl	8026498 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8004756:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800475a:	4619      	mov	r1, r3
 800475c:	488d      	ldr	r0, [pc, #564]	; (8004994 <Send_Vital_Data_Message+0x3e4>)
 800475e:	f021 fe9b 	bl	8026498 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8004762:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004766:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800476a:	441a      	add	r2, r3
 800476c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004770:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004774:	2108      	movs	r1, #8
 8004776:	f7fb ffd9 	bl	800072c <InsertBits>
	{
 800477a:	e00f      	b.n	800479c <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 800477c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004780:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004784:	441a      	add	r2, r3
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	4980      	ldr	r1, [pc, #512]	; (800498c <Send_Vital_Data_Message+0x3dc>)
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	440b      	add	r3, r1
 800478e:	3301      	adds	r3, #1
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004796:	2108      	movs	r1, #8
 8004798:	f7fb ffc8 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 800479c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80047a0:	3308      	adds	r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	da00      	bge.n	80047a8 <Send_Vital_Data_Message+0x1f8>
 80047a6:	3307      	adds	r3, #7
 80047a8:	10db      	asrs	r3, r3, #3
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047b0:	4413      	add	r3, r2
 80047b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80047b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80047ba:	3308      	adds	r3, #8
 80047bc:	b29b      	uxth	r3, r3
 80047be:	b21b      	sxth	r3, r3
 80047c0:	425a      	negs	r2, r3
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	f002 0207 	and.w	r2, r2, #7
 80047ca:	bf58      	it	pl
 80047cc:	4253      	negpl	r3, r2
 80047ce:	b21b      	sxth	r3, r3
 80047d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80047d4:	4b69      	ldr	r3, [pc, #420]	; (800497c <Send_Vital_Data_Message+0x3cc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	08db      	lsrs	r3, r3, #3
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d035      	beq.n	800484e <Send_Vital_Data_Message+0x29e>
 80047e2:	4b66      	ldr	r3, [pc, #408]	; (800497c <Send_Vital_Data_Message+0x3cc>)
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	79fa      	ldrb	r2, [r7, #7]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d130      	bne.n	800484e <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80047f2:	4863      	ldr	r0, [pc, #396]	; (8004980 <Send_Vital_Data_Message+0x3d0>)
 80047f4:	f019 faf8 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 80047f8:	4602      	mov	r2, r0
 80047fa:	4b62      	ldr	r3, [pc, #392]	; (8004984 <Send_Vital_Data_Message+0x3d4>)
 80047fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	21c8      	movs	r1, #200	; 0xc8
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 800480e:	4862      	ldr	r0, [pc, #392]	; (8004998 <Send_Vital_Data_Message+0x3e8>)
 8004810:	f021 fede 	bl	80265d0 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8004814:	79fb      	ldrb	r3, [r7, #7]
 8004816:	4a5d      	ldr	r2, [pc, #372]	; (800498c <Send_Vital_Data_Message+0x3dc>)
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	4413      	add	r3, r2
 800481c:	3302      	adds	r3, #2
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	4619      	mov	r1, r3
 8004822:	485e      	ldr	r0, [pc, #376]	; (800499c <Send_Vital_Data_Message+0x3ec>)
 8004824:	f021 fe38 	bl	8026498 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8004828:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800482c:	4619      	mov	r1, r3
 800482e:	485c      	ldr	r0, [pc, #368]	; (80049a0 <Send_Vital_Data_Message+0x3f0>)
 8004830:	f021 fe32 	bl	8026498 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8004834:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004838:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800483c:	441a      	add	r2, r3
 800483e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004842:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004846:	2108      	movs	r1, #8
 8004848:	f7fb ff70 	bl	800072c <InsertBits>
	{
 800484c:	e00f      	b.n	800486e <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 800484e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004852:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004856:	441a      	add	r2, r3
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	494c      	ldr	r1, [pc, #304]	; (800498c <Send_Vital_Data_Message+0x3dc>)
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	440b      	add	r3, r1
 8004860:	3302      	adds	r3, #2
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004868:	2108      	movs	r1, #8
 800486a:	f7fb ff5f 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 800486e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004872:	3308      	adds	r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	da00      	bge.n	800487a <Send_Vital_Data_Message+0x2ca>
 8004878:	3307      	adds	r3, #7
 800487a:	10db      	asrs	r3, r3, #3
 800487c:	b29a      	uxth	r2, r3
 800487e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004882:	4413      	add	r3, r2
 8004884:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004888:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800488c:	3308      	adds	r3, #8
 800488e:	b29b      	uxth	r3, r3
 8004890:	b21b      	sxth	r3, r3
 8004892:	425a      	negs	r2, r3
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	f002 0207 	and.w	r2, r2, #7
 800489c:	bf58      	it	pl
 800489e:	4253      	negpl	r3, r2
 80048a0:	b21b      	sxth	r3, r3
 80048a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 80048a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048ae:	441a      	add	r2, r3
 80048b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80048b4:	2302      	movs	r3, #2
 80048b6:	2108      	movs	r1, #8
 80048b8:	f7fb ff38 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80048bc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80048c0:	3308      	adds	r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	da00      	bge.n	80048c8 <Send_Vital_Data_Message+0x318>
 80048c6:	3307      	adds	r3, #7
 80048c8:	10db      	asrs	r3, r3, #3
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048d0:	4413      	add	r3, r2
 80048d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80048d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80048da:	3308      	adds	r3, #8
 80048dc:	b29b      	uxth	r3, r3
 80048de:	b21b      	sxth	r3, r3
 80048e0:	425a      	negs	r2, r3
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	f002 0207 	and.w	r2, r2, #7
 80048ea:	bf58      	it	pl
 80048ec:	4253      	negpl	r3, r2
 80048ee:	b21b      	sxth	r3, r3
 80048f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <Send_Vital_Data_Message+0x3f4>)
 80048f8:	5cd3      	ldrb	r3, [r2, r3]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d15a      	bne.n	80049b4 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 80048fe:	f007 feef 	bl	800c6e0 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8004902:	79fa      	ldrb	r2, [r7, #7]
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <Send_Vital_Data_Message+0x3f8>)
 800490e:	4413      	add	r3, r2
 8004910:	4a26      	ldr	r2, [pc, #152]	; (80049ac <Send_Vital_Data_Message+0x3fc>)
 8004912:	6811      	ldr	r1, [r2, #0]
 8004914:	6019      	str	r1, [r3, #0]
 8004916:	8892      	ldrh	r2, [r2, #4]
 8004918:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800491a:	4825      	ldr	r0, [pc, #148]	; (80049b0 <Send_Vital_Data_Message+0x400>)
 800491c:	f021 fe58 	bl	80265d0 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <Send_Vital_Data_Message+0x3f4>)
 8004924:	2100      	movs	r1, #0
 8004926:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 8004928:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800492c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004930:	441a      	add	r2, r3
 8004932:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004936:	2368      	movs	r3, #104	; 0x68
 8004938:	2110      	movs	r1, #16
 800493a:	f7fb fef7 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800493e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004942:	3310      	adds	r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	da00      	bge.n	800494a <Send_Vital_Data_Message+0x39a>
 8004948:	3307      	adds	r3, #7
 800494a:	10db      	asrs	r3, r3, #3
 800494c:	b29a      	uxth	r2, r3
 800494e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004952:	4413      	add	r3, r2
 8004954:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004958:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800495c:	3310      	adds	r3, #16
 800495e:	b29b      	uxth	r3, r3
 8004960:	b21b      	sxth	r3, r3
 8004962:	425a      	negs	r2, r3
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	f002 0207 	and.w	r2, r2, #7
 800496c:	bf58      	it	pl
 800496e:	4253      	negpl	r3, r2
 8004970:	b21b      	sxth	r3, r3
 8004972:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004976:	e044      	b.n	8004a02 <Send_Vital_Data_Message+0x452>
 8004978:	20000504 	.word	0x20000504
 800497c:	2000308c 	.word	0x2000308c
 8004980:	2000bc44 	.word	0x2000bc44
 8004984:	51eb851f 	.word	0x51eb851f
 8004988:	08028698 	.word	0x08028698
 800498c:	200028f4 	.word	0x200028f4
 8004990:	080286bc 	.word	0x080286bc
 8004994:	080286dc 	.word	0x080286dc
 8004998:	080283a4 	.word	0x080283a4
 800499c:	080283c8 	.word	0x080283c8
 80049a0:	080283e8 	.word	0x080283e8
 80049a4:	20002764 	.word	0x20002764
 80049a8:	200028b8 	.word	0x200028b8
 80049ac:	20003f40 	.word	0x20003f40
 80049b0:	080286fc 	.word	0x080286fc
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 80049b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80049b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049bc:	441a      	add	r2, r3
 80049be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80049c2:	2328      	movs	r3, #40	; 0x28
 80049c4:	2110      	movs	r1, #16
 80049c6:	f7fb feb1 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80049ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80049ce:	3310      	adds	r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da00      	bge.n	80049d6 <Send_Vital_Data_Message+0x426>
 80049d4:	3307      	adds	r3, #7
 80049d6:	10db      	asrs	r3, r3, #3
 80049d8:	b29a      	uxth	r2, r3
 80049da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80049de:	4413      	add	r3, r2
 80049e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80049e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80049e8:	3310      	adds	r3, #16
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	b21b      	sxth	r3, r3
 80049ee:	425a      	negs	r2, r3
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	f002 0207 	and.w	r2, r2, #7
 80049f8:	bf58      	it	pl
 80049fa:	4253      	negpl	r3, r2
 80049fc:	b21b      	sxth	r3, r3
 80049fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004a02:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a0a:	18d1      	adds	r1, r2, r3
 8004a0c:	79fa      	ldrb	r2, [r7, #7]
 8004a0e:	48cd      	ldr	r0, [pc, #820]	; (8004d44 <Send_Vital_Data_Message+0x794>)
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4403      	add	r3, r0
 8004a1a:	3305      	adds	r3, #5
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a22:	460a      	mov	r2, r1
 8004a24:	2108      	movs	r1, #8
 8004a26:	f7fb fe81 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004a2a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004a2e:	3308      	adds	r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	da00      	bge.n	8004a36 <Send_Vital_Data_Message+0x486>
 8004a34:	3307      	adds	r3, #7
 8004a36:	10db      	asrs	r3, r3, #3
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a3e:	4413      	add	r3, r2
 8004a40:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a48:	3308      	adds	r3, #8
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	425a      	negs	r2, r3
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	f002 0207 	and.w	r2, r2, #7
 8004a58:	bf58      	it	pl
 8004a5a:	4253      	negpl	r3, r2
 8004a5c:	b21b      	sxth	r3, r3
 8004a5e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8004a62:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a6a:	18d1      	adds	r1, r2, r3
 8004a6c:	79fa      	ldrb	r2, [r7, #7]
 8004a6e:	48b5      	ldr	r0, [pc, #724]	; (8004d44 <Send_Vital_Data_Message+0x794>)
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4403      	add	r3, r0
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a82:	460a      	mov	r2, r1
 8004a84:	2108      	movs	r1, #8
 8004a86:	f7fb fe51 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004a8a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004a8e:	3308      	adds	r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	da00      	bge.n	8004a96 <Send_Vital_Data_Message+0x4e6>
 8004a94:	3307      	adds	r3, #7
 8004a96:	10db      	asrs	r3, r3, #3
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004aa4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	b21b      	sxth	r3, r3
 8004aae:	425a      	negs	r2, r3
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	f002 0207 	and.w	r2, r2, #7
 8004ab8:	bf58      	it	pl
 8004aba:	4253      	negpl	r3, r2
 8004abc:	b21b      	sxth	r3, r3
 8004abe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004ac2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ac6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004aca:	18d1      	adds	r1, r2, r3
 8004acc:	79fa      	ldrb	r2, [r7, #7]
 8004ace:	489d      	ldr	r0, [pc, #628]	; (8004d44 <Send_Vital_Data_Message+0x794>)
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	4403      	add	r3, r0
 8004ada:	3303      	adds	r3, #3
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004ae2:	460a      	mov	r2, r1
 8004ae4:	2108      	movs	r1, #8
 8004ae6:	f7fb fe21 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004aea:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004aee:	3308      	adds	r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da00      	bge.n	8004af6 <Send_Vital_Data_Message+0x546>
 8004af4:	3307      	adds	r3, #7
 8004af6:	10db      	asrs	r3, r3, #3
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004afe:	4413      	add	r3, r2
 8004b00:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004b04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b08:	3308      	adds	r3, #8
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	b21b      	sxth	r3, r3
 8004b0e:	425a      	negs	r2, r3
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	f002 0207 	and.w	r2, r2, #7
 8004b18:	bf58      	it	pl
 8004b1a:	4253      	negpl	r3, r2
 8004b1c:	b21b      	sxth	r3, r3
 8004b1e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004b22:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b2a:	18d1      	adds	r1, r2, r3
 8004b2c:	79fa      	ldrb	r2, [r7, #7]
 8004b2e:	4885      	ldr	r0, [pc, #532]	; (8004d44 <Send_Vital_Data_Message+0x794>)
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4403      	add	r3, r0
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b40:	460a      	mov	r2, r1
 8004b42:	2108      	movs	r1, #8
 8004b44:	f7fb fdf2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b48:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da00      	bge.n	8004b54 <Send_Vital_Data_Message+0x5a4>
 8004b52:	3307      	adds	r3, #7
 8004b54:	10db      	asrs	r3, r3, #3
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004b62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b66:	3308      	adds	r3, #8
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	b21b      	sxth	r3, r3
 8004b6c:	425a      	negs	r2, r3
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	f002 0207 	and.w	r2, r2, #7
 8004b76:	bf58      	it	pl
 8004b78:	4253      	negpl	r3, r2
 8004b7a:	b21b      	sxth	r3, r3
 8004b7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8004b80:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b88:	18d1      	adds	r1, r2, r3
 8004b8a:	79fa      	ldrb	r2, [r7, #7]
 8004b8c:	486d      	ldr	r0, [pc, #436]	; (8004d44 <Send_Vital_Data_Message+0x794>)
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4403      	add	r3, r0
 8004b98:	3301      	adds	r3, #1
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	2108      	movs	r1, #8
 8004ba4:	f7fb fdc2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004ba8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004bac:	3308      	adds	r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da00      	bge.n	8004bb4 <Send_Vital_Data_Message+0x604>
 8004bb2:	3307      	adds	r3, #7
 8004bb4:	10db      	asrs	r3, r3, #3
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004bc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	b21b      	sxth	r3, r3
 8004bcc:	425a      	negs	r2, r3
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	f002 0207 	and.w	r2, r2, #7
 8004bd6:	bf58      	it	pl
 8004bd8:	4253      	negpl	r3, r2
 8004bda:	b21b      	sxth	r3, r3
 8004bdc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004be0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004be4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004be8:	18d1      	adds	r1, r2, r3
 8004bea:	79fa      	ldrb	r2, [r7, #7]
 8004bec:	4855      	ldr	r0, [pc, #340]	; (8004d44 <Send_Vital_Data_Message+0x794>)
 8004bee:	4613      	mov	r3, r2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	4413      	add	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4403      	add	r3, r0
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c00:	460a      	mov	r2, r1
 8004c02:	2108      	movs	r1, #8
 8004c04:	f7fb fd92 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c08:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	da00      	bge.n	8004c14 <Send_Vital_Data_Message+0x664>
 8004c12:	3307      	adds	r3, #7
 8004c14:	10db      	asrs	r3, r3, #3
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c26:	3308      	adds	r3, #8
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	b21b      	sxth	r3, r3
 8004c2c:	425a      	negs	r2, r3
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	f002 0207 	and.w	r2, r2, #7
 8004c36:	bf58      	it	pl
 8004c38:	4253      	negpl	r3, r2
 8004c3a:	b21b      	sxth	r3, r3
 8004c3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 8004c40:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c48:	441a      	add	r2, r3
 8004c4a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c4e:	2301      	movs	r3, #1
 8004c50:	2108      	movs	r1, #8
 8004c52:	f7fb fd6b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c56:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da00      	bge.n	8004c62 <Send_Vital_Data_Message+0x6b2>
 8004c60:	3307      	adds	r3, #7
 8004c62:	10db      	asrs	r3, r3, #3
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c74:	3308      	adds	r3, #8
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	425a      	negs	r2, r3
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	f002 0207 	and.w	r2, r2, #7
 8004c84:	bf58      	it	pl
 8004c86:	4253      	negpl	r3, r2
 8004c88:	b21b      	sxth	r3, r3
 8004c8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 8004c8e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c96:	441a      	add	r2, r3
 8004c98:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2108      	movs	r1, #8
 8004ca0:	f7fb fd44 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004ca4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004ca8:	3308      	adds	r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da00      	bge.n	8004cb0 <Send_Vital_Data_Message+0x700>
 8004cae:	3307      	adds	r3, #7
 8004cb0:	10db      	asrs	r3, r3, #3
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004cb8:	4413      	add	r3, r2
 8004cba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004cbe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	b21b      	sxth	r3, r3
 8004cc8:	425a      	negs	r2, r3
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	f002 0207 	and.w	r2, r2, #7
 8004cd2:	bf58      	it	pl
 8004cd4:	4253      	negpl	r3, r2
 8004cd6:	b21b      	sxth	r3, r3
 8004cd8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004cdc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ce0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ce4:	441a      	add	r2, r3
 8004ce6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004cea:	2301      	movs	r3, #1
 8004cec:	2108      	movs	r1, #8
 8004cee:	f7fb fd1d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004cf2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	da00      	bge.n	8004cfe <Send_Vital_Data_Message+0x74e>
 8004cfc:	3307      	adds	r3, #7
 8004cfe:	10db      	asrs	r3, r3, #3
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d06:	4413      	add	r3, r2
 8004d08:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004d0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d10:	3308      	adds	r3, #8
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	b21b      	sxth	r3, r3
 8004d16:	425a      	negs	r2, r3
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	f002 0207 	and.w	r2, r2, #7
 8004d20:	bf58      	it	pl
 8004d22:	4253      	negpl	r3, r2
 8004d24:	b21b      	sxth	r3, r3
 8004d26:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <Send_Vital_Data_Message+0x798>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02c      	beq.n	8004d92 <Send_Vital_Data_Message+0x7e2>
 8004d38:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <Send_Vital_Data_Message+0x798>)
 8004d3a:	791b      	ldrb	r3, [r3, #4]
 8004d3c:	79fa      	ldrb	r2, [r7, #7]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d127      	bne.n	8004d92 <Send_Vital_Data_Message+0x7e2>
 8004d42:	e003      	b.n	8004d4c <Send_Vital_Data_Message+0x79c>
 8004d44:	200028b8 	.word	0x200028b8
 8004d48:	2000308c 	.word	0x2000308c
	{
		uint32_t Rand_Number = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 8004d52:	484e      	ldr	r0, [pc, #312]	; (8004e8c <Send_Vital_Data_Message+0x8dc>)
 8004d54:	f019 f848 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8004d58:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8004d5c:	484c      	ldr	r0, [pc, #304]	; (8004e90 <Send_Vital_Data_Message+0x8e0>)
 8004d5e:	f021 fc37 	bl	80265d0 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	4a4b      	ldr	r2, [pc, #300]	; (8004e94 <Send_Vital_Data_Message+0x8e4>)
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	4413      	add	r3, r2
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4849      	ldr	r0, [pc, #292]	; (8004e98 <Send_Vital_Data_Message+0x8e8>)
 8004d72:	f021 fb91 	bl	8026498 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004d76:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004d7a:	4848      	ldr	r0, [pc, #288]	; (8004e9c <Send_Vital_Data_Message+0x8ec>)
 8004d7c:	f021 fb8c 	bl	8026498 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 8004d80:	f107 020c 	add.w	r2, r7, #12
 8004d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d88:	2118      	movs	r1, #24
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7fb fcce 	bl	800072c <InsertBits>
	{
 8004d90:	e00b      	b.n	8004daa <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	4a3f      	ldr	r2, [pc, #252]	; (8004e94 <Send_Vital_Data_Message+0x8e4>)
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	4413      	add	r3, r2
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f107 020c 	add.w	r2, r7, #12
 8004da2:	2118      	movs	r1, #24
 8004da4:	2000      	movs	r0, #0
 8004da6:	f7fb fcc1 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004db0:	e011      	b.n	8004dd6 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004db2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004db6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dba:	3303      	adds	r3, #3
 8004dbc:	3290      	adds	r2, #144	; 0x90
 8004dbe:	443a      	add	r2, r7
 8004dc0:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004dc4:	3390      	adds	r3, #144	; 0x90
 8004dc6:	443b      	add	r3, r7
 8004dc8:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004dcc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004dd6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d8e6      	bhi.n	8004db2 <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004de4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004de8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dec:	18d4      	adds	r4, r2, r3
 8004dee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3303      	adds	r3, #3
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	f107 030c 	add.w	r3, r7, #12
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f010 fe12 	bl	8015a28 <CalculateDirectReverseCrc>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	2120      	movs	r1, #32
 8004e0e:	f7fb fc8d 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004e12:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004e16:	3320      	adds	r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	da00      	bge.n	8004e1e <Send_Vital_Data_Message+0x86e>
 8004e1c:	3307      	adds	r3, #7
 8004e1e:	10db      	asrs	r3, r3, #3
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e26:	4413      	add	r3, r2
 8004e28:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004e2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e30:	3320      	adds	r3, #32
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	b21b      	sxth	r3, r3
 8004e36:	425a      	negs	r2, r3
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	f002 0207 	and.w	r2, r2, #7
 8004e40:	bf58      	it	pl
 8004e42:	4253      	negpl	r3, r2
 8004e44:	b21b      	sxth	r3, r3
 8004e46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <Send_Vital_Data_Message+0x8f0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	0a5b      	lsrs	r3, r3, #9
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <Send_Vital_Data_Message+0x8c0>
 8004e58:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <Send_Vital_Data_Message+0x8f0>)
 8004e5a:	791b      	ldrb	r3, [r3, #4]
 8004e5c:	79fa      	ldrb	r2, [r7, #7]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d106      	bne.n	8004e70 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 8004e62:	4810      	ldr	r0, [pc, #64]	; (8004ea4 <Send_Vital_Data_Message+0x8f4>)
 8004e64:	f021 fbb4 	bl	80265d0 <puts>
		printf("Not Sending Reply");
 8004e68:	480f      	ldr	r0, [pc, #60]	; (8004ea8 <Send_Vital_Data_Message+0x8f8>)
 8004e6a:	f021 fb15 	bl	8026498 <iprintf>
 8004e6e:	e009      	b.n	8004e84 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8004e70:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e74:	b2d9      	uxtb	r1, r3
 8004e76:	79fa      	ldrb	r2, [r7, #7]
 8004e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f003 f8ab 	bl	8007fd8 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	3794      	adds	r7, #148	; 0x94
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd90      	pop	{r4, r7, pc}
 8004e8c:	2000bc44 	.word	0x2000bc44
 8004e90:	08028714 	.word	0x08028714
 8004e94:	200028f4 	.word	0x200028f4
 8004e98:	08028738 	.word	0x08028738
 8004e9c:	0802875c 	.word	0x0802875c
 8004ea0:	2000308c 	.word	0x2000308c
 8004ea4:	08028470 	.word	0x08028470
 8004ea8:	08028488 	.word	0x08028488

08004eac <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b0c0      	sub	sp, #256	; 0x100
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	70fb      	strb	r3, [r7, #3]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	70bb      	strb	r3, [r7, #2]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004ed8:	f014 fad4 	bl	8019484 <HAL_GetTick>
 8004edc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ef6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004efa:	227c      	movs	r2, #124	; 0x7c
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f021 f9e2 	bl	80262c8 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004f04:	2300      	movs	r3, #0
 8004f06:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	b299      	uxth	r1, r3
 8004f14:	78ba      	ldrb	r2, [r7, #2]
 8004f16:	48c3      	ldr	r0, [pc, #780]	; (8005224 <Vital_Msg_extr_from_CAN+0x378>)
 8004f18:	4613      	mov	r3, r2
 8004f1a:	015b      	lsls	r3, r3, #5
 8004f1c:	4413      	add	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4403      	add	r3, r0
 8004f22:	3340      	adds	r3, #64	; 0x40
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	4299      	cmp	r1, r3
 8004f28:	d11a      	bne.n	8004f60 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 8004f2a:	78ba      	ldrb	r2, [r7, #2]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	4413      	add	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4abb      	ldr	r2, [pc, #748]	; (8005224 <Vital_Msg_extr_from_CAN+0x378>)
 8004f36:	4413      	add	r3, r2
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f021 f98b 	bl	8026258 <memcmp>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004f48:	78bb      	ldrb	r3, [r7, #2]
 8004f4a:	4ab7      	ldr	r2, [pc, #732]	; (8005228 <Vital_Msg_extr_from_CAN+0x37c>)
 8004f4c:	3366      	adds	r3, #102	; 0x66
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4619      	mov	r1, r3
 8004f56:	48b5      	ldr	r0, [pc, #724]	; (800522c <Vital_Msg_extr_from_CAN+0x380>)
 8004f58:	f021 fa9e 	bl	8026498 <iprintf>
			return;
 8004f5c:	f000 bd98 	b.w	8005a90 <Vital_Msg_extr_from_CAN+0xbe4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	3b05      	subs	r3, #5
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	441a      	add	r2, r3
 8004f68:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f6c:	2120      	movs	r1, #32
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fb fb50 	bl	8000614 <ExtractBits>
 8004f74:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004f78:	4bad      	ldr	r3, [pc, #692]	; (8005230 <Vital_Msg_extr_from_CAN+0x384>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d034      	beq.n	8004fee <Vital_Msg_extr_from_CAN+0x142>
 8004f84:	4baa      	ldr	r3, [pc, #680]	; (8005230 <Vital_Msg_extr_from_CAN+0x384>)
 8004f86:	791b      	ldrb	r3, [r3, #4]
 8004f88:	78ba      	ldrb	r2, [r7, #2]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d12f      	bne.n	8004fee <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 8004f8e:	2316      	movs	r3, #22
 8004f90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004f94:	48a7      	ldr	r0, [pc, #668]	; (8005234 <Vital_Msg_extr_from_CAN+0x388>)
 8004f96:	f018 ff27 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4ba6      	ldr	r3, [pc, #664]	; (8005238 <Vital_Msg_extr_from_CAN+0x38c>)
 8004f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa2:	0dd9      	lsrs	r1, r3, #23
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	1a5b      	subs	r3, r3, r1
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 8004fb2:	48a2      	ldr	r0, [pc, #648]	; (800523c <Vital_Msg_extr_from_CAN+0x390>)
 8004fb4:	f021 fb0c 	bl	80265d0 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004fb8:	78ba      	ldrb	r2, [r7, #2]
 8004fba:	49a1      	ldr	r1, [pc, #644]	; (8005240 <Vital_Msg_extr_from_CAN+0x394>)
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	4413      	add	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	440b      	add	r3, r1
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	489d      	ldr	r0, [pc, #628]	; (8005244 <Vital_Msg_extr_from_CAN+0x398>)
 8004fce:	f021 fa63 	bl	8026498 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8004fd2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004fd6:	489c      	ldr	r0, [pc, #624]	; (8005248 <Vital_Msg_extr_from_CAN+0x39c>)
 8004fd8:	f021 fa5e 	bl	8026498 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8004fdc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe4:	2118      	movs	r1, #24
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7fb fba0 	bl	800072c <InsertBits>
	{
 8004fec:	e00e      	b.n	800500c <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004fee:	78ba      	ldrb	r2, [r7, #2]
 8004ff0:	4993      	ldr	r1, [pc, #588]	; (8005240 <Vital_Msg_extr_from_CAN+0x394>)
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005004:	2118      	movs	r1, #24
 8005006:	2000      	movs	r0, #0
 8005008:	f7fb fb90 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800500c:	2300      	movs	r3, #0
 800500e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005012:	e011      	b.n	8005038 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8005014:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	441a      	add	r2, r3
 800501c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005020:	3303      	adds	r3, #3
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005028:	443b      	add	r3, r7
 800502a:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800502e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005032:	3301      	adds	r3, #1
 8005034:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005038:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	3b05      	subs	r3, #5
 8005040:	429a      	cmp	r2, r3
 8005042:	dbe7      	blt.n	8005014 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8005044:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005048:	b29b      	uxth	r3, r3
 800504a:	3303      	adds	r3, #3
 800504c:	b29a      	uxth	r2, r3
 800504e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005052:	4611      	mov	r1, r2
 8005054:	4618      	mov	r0, r3
 8005056:	f010 fce7 	bl	8015a28 <CalculateDirectReverseCrc>
 800505a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 800505e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005062:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005066:	429a      	cmp	r2, r3
 8005068:	f000 8104 	beq.w	8005274 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3305      	adds	r3, #5
 8005070:	461a      	mov	r2, r3
 8005072:	2108      	movs	r1, #8
 8005074:	2000      	movs	r0, #0
 8005076:	f7fb facd 	bl	8000614 <ExtractBits>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	f040 80ba 	bne.w	80051f6 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 8005082:	4872      	ldr	r0, [pc, #456]	; (800524c <Vital_Msg_extr_from_CAN+0x3a0>)
 8005084:	f021 faa4 	bl	80265d0 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8005088:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800508c:	2280      	movs	r2, #128	; 0x80
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f021 f919 	bl	80262c8 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 8005096:	78ba      	ldrb	r2, [r7, #2]
 8005098:	4969      	ldr	r1, [pc, #420]	; (8005240 <Vital_Msg_extr_from_CAN+0x394>)
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	440b      	add	r3, r1
 80050a4:	3308      	adds	r3, #8
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80050ae:	2118      	movs	r1, #24
 80050b0:	2000      	movs	r0, #0
 80050b2:	f7fb fb3b 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80050bc:	e011      	b.n	80050e2 <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80050be:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	441a      	add	r2, r3
 80050c6:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050ca:	3303      	adds	r3, #3
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050d2:	443b      	add	r3, r7
 80050d4:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80050d8:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050dc:	3301      	adds	r3, #1
 80050de:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80050e2:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 80050e6:	78fb      	ldrb	r3, [r7, #3]
 80050e8:	3b05      	subs	r3, #5
 80050ea:	429a      	cmp	r2, r3
 80050ec:	dbe7      	blt.n	80050be <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80050ee:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3303      	adds	r3, #3
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f010 fc92 	bl	8015a28 <CalculateDirectReverseCrc>
 8005104:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	3b05      	subs	r3, #5
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	441a      	add	r2, r3
 8005110:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005114:	2120      	movs	r1, #32
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb fa7c 	bl	8000614 <ExtractBits>
 800511c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8005120:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005124:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005128:	429a      	cmp	r2, r3
 800512a:	d14e      	bne.n	80051ca <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 800512c:	4848      	ldr	r0, [pc, #288]	; (8005250 <Vital_Msg_extr_from_CAN+0x3a4>)
 800512e:	f021 fa4f 	bl	80265d0 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8005132:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005136:	4847      	ldr	r0, [pc, #284]	; (8005254 <Vital_Msg_extr_from_CAN+0x3a8>)
 8005138:	f021 f9ae 	bl	8026498 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800513c:	78ba      	ldrb	r2, [r7, #2]
 800513e:	4940      	ldr	r1, [pc, #256]	; (8005240 <Vital_Msg_extr_from_CAN+0x394>)
 8005140:	4613      	mov	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	440b      	add	r3, r1
 800514a:	3308      	adds	r3, #8
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4619      	mov	r1, r3
 8005150:	4841      	ldr	r0, [pc, #260]	; (8005258 <Vital_Msg_extr_from_CAN+0x3ac>)
 8005152:	f021 f9a1 	bl	8026498 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8005156:	78ba      	ldrb	r2, [r7, #2]
 8005158:	4939      	ldr	r1, [pc, #228]	; (8005240 <Vital_Msg_extr_from_CAN+0x394>)
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	440b      	add	r3, r1
 8005164:	3308      	adds	r3, #8
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	4835      	ldr	r0, [pc, #212]	; (8005240 <Vital_Msg_extr_from_CAN+0x394>)
 800516c:	4613      	mov	r3, r2
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4403      	add	r3, r0
 8005176:	3308      	adds	r3, #8
 8005178:	6019      	str	r1, [r3, #0]
 800517a:	78b9      	ldrb	r1, [r7, #2]
 800517c:	4830      	ldr	r0, [pc, #192]	; (8005240 <Vital_Msg_extr_from_CAN+0x394>)
 800517e:	4613      	mov	r3, r2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4413      	add	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4403      	add	r3, r0
 8005188:	3308      	adds	r3, #8
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4833      	ldr	r0, [pc, #204]	; (800525c <Vital_Msg_extr_from_CAN+0x3b0>)
 800518e:	010b      	lsls	r3, r1, #4
 8005190:	4403      	add	r3, r0
 8005192:	3308      	adds	r3, #8
 8005194:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005196:	78bb      	ldrb	r3, [r7, #2]
 8005198:	4a30      	ldr	r2, [pc, #192]	; (800525c <Vital_Msg_extr_from_CAN+0x3b0>)
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4413      	add	r3, r2
 800519e:	3308      	adds	r3, #8
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4619      	mov	r1, r3
 80051a4:	482e      	ldr	r0, [pc, #184]	; (8005260 <Vital_Msg_extr_from_CAN+0x3b4>)
 80051a6:	f021 f977 	bl	8026498 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80051aa:	78bb      	ldrb	r3, [r7, #2]
 80051ac:	78ba      	ldrb	r2, [r7, #2]
 80051ae:	492b      	ldr	r1, [pc, #172]	; (800525c <Vital_Msg_extr_from_CAN+0x3b0>)
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	440b      	add	r3, r1
 80051b4:	3308      	adds	r3, #8
 80051b6:	6819      	ldr	r1, [r3, #0]
 80051b8:	482a      	ldr	r0, [pc, #168]	; (8005264 <Vital_Msg_extr_from_CAN+0x3b8>)
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4403      	add	r3, r0
 80051c4:	3308      	adds	r3, #8
 80051c6:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 80051c8:	e055      	b.n	8005276 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80051ca:	78bb      	ldrb	r3, [r7, #2]
 80051cc:	4a16      	ldr	r2, [pc, #88]	; (8005228 <Vital_Msg_extr_from_CAN+0x37c>)
 80051ce:	3366      	adds	r3, #102	; 0x66
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4619      	mov	r1, r3
 80051d8:	4823      	ldr	r0, [pc, #140]	; (8005268 <Vital_Msg_extr_from_CAN+0x3bc>)
 80051da:	f021 f95d 	bl	8026498 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 80051de:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80051e2:	4822      	ldr	r0, [pc, #136]	; (800526c <Vital_Msg_extr_from_CAN+0x3c0>)
 80051e4:	f021 f958 	bl	8026498 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 80051e8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80051ec:	4820      	ldr	r0, [pc, #128]	; (8005270 <Vital_Msg_extr_from_CAN+0x3c4>)
 80051ee:	f021 f953 	bl	8026498 <iprintf>
				return;
 80051f2:	f000 bc4d 	b.w	8005a90 <Vital_Msg_extr_from_CAN+0xbe4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80051f6:	78bb      	ldrb	r3, [r7, #2]
 80051f8:	4a0b      	ldr	r2, [pc, #44]	; (8005228 <Vital_Msg_extr_from_CAN+0x37c>)
 80051fa:	3366      	adds	r3, #102	; 0x66
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4619      	mov	r1, r3
 8005204:	4818      	ldr	r0, [pc, #96]	; (8005268 <Vital_Msg_extr_from_CAN+0x3bc>)
 8005206:	f021 f947 	bl	8026498 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 800520a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800520e:	4817      	ldr	r0, [pc, #92]	; (800526c <Vital_Msg_extr_from_CAN+0x3c0>)
 8005210:	f021 f942 	bl	8026498 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8005214:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005218:	4815      	ldr	r0, [pc, #84]	; (8005270 <Vital_Msg_extr_from_CAN+0x3c4>)
 800521a:	f021 f93d 	bl	8026498 <iprintf>
			return;
 800521e:	f000 bc37 	b.w	8005a90 <Vital_Msg_extr_from_CAN+0xbe4>
 8005222:	bf00      	nop
 8005224:	200030ac 	.word	0x200030ac
 8005228:	20000504 	.word	0x20000504
 800522c:	08028780 	.word	0x08028780
 8005230:	2000308c 	.word	0x2000308c
 8005234:	2000bc44 	.word	0x2000bc44
 8005238:	80008001 	.word	0x80008001
 800523c:	0802849c 	.word	0x0802849c
 8005240:	20002e94 	.word	0x20002e94
 8005244:	080284bc 	.word	0x080284bc
 8005248:	080284e4 	.word	0x080284e4
 800524c:	0802850c 	.word	0x0802850c
 8005250:	080287c4 	.word	0x080287c4
 8005254:	08028540 	.word	0x08028540
 8005258:	080287e8 	.word	0x080287e8
 800525c:	200028f4 	.word	0x200028f4
 8005260:	08028580 	.word	0x08028580
 8005264:	20002da4 	.word	0x20002da4
 8005268:	08028804 	.word	0x08028804
 800526c:	080281dc 	.word	0x080281dc
 8005270:	080281ec 	.word	0x080281ec
		}
	}
	ROLLOVER_VITAL_CAN:
 8005274:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8005276:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800527a:	3308      	adds	r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	da00      	bge.n	8005282 <Vital_Msg_extr_from_CAN+0x3d6>
 8005280:	3307      	adds	r3, #7
 8005282:	10db      	asrs	r3, r3, #3
 8005284:	b29a      	uxth	r2, r3
 8005286:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800528a:	4413      	add	r3, r2
 800528c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005290:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005294:	3308      	adds	r3, #8
 8005296:	b29b      	uxth	r3, r3
 8005298:	b21b      	sxth	r3, r3
 800529a:	425a      	negs	r2, r3
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	f002 0207 	and.w	r2, r2, #7
 80052a4:	bf58      	it	pl
 80052a6:	4253      	negpl	r3, r2
 80052a8:	b21b      	sxth	r3, r3
 80052aa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80052ae:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	441a      	add	r2, r3
 80052b6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80052ba:	2110      	movs	r1, #16
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fb f9a9 	bl	8000614 <ExtractBits>
 80052c2:	4603      	mov	r3, r0
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 80052ca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80052ce:	4619      	mov	r1, r3
 80052d0:	48c6      	ldr	r0, [pc, #792]	; (80055ec <Vital_Msg_extr_from_CAN+0x740>)
 80052d2:	f021 f8e1 	bl	8026498 <iprintf>
	BITSTUFFINC(16);
 80052d6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80052da:	3310      	adds	r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	da00      	bge.n	80052e2 <Vital_Msg_extr_from_CAN+0x436>
 80052e0:	3307      	adds	r3, #7
 80052e2:	10db      	asrs	r3, r3, #3
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052ea:	4413      	add	r3, r2
 80052ec:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80052f0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80052f4:	3310      	adds	r3, #16
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	425a      	negs	r2, r3
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	f002 0207 	and.w	r2, r2, #7
 8005304:	bf58      	it	pl
 8005306:	4253      	negpl	r3, r2
 8005308:	b21b      	sxth	r3, r3
 800530a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800530e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	441a      	add	r2, r3
 8005316:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800531a:	2110      	movs	r1, #16
 800531c:	4618      	mov	r0, r3
 800531e:	f7fb f979 	bl	8000614 <ExtractBits>
 8005322:	4603      	mov	r3, r0
 8005324:	b29b      	uxth	r3, r3
 8005326:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 800532a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800532e:	4619      	mov	r1, r3
 8005330:	48af      	ldr	r0, [pc, #700]	; (80055f0 <Vital_Msg_extr_from_CAN+0x744>)
 8005332:	f021 f8b1 	bl	8026498 <iprintf>
	BITSTUFFINC(16);
 8005336:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800533a:	3310      	adds	r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	da00      	bge.n	8005342 <Vital_Msg_extr_from_CAN+0x496>
 8005340:	3307      	adds	r3, #7
 8005342:	10db      	asrs	r3, r3, #3
 8005344:	b29a      	uxth	r2, r3
 8005346:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800534a:	4413      	add	r3, r2
 800534c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005350:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005354:	3310      	adds	r3, #16
 8005356:	b29b      	uxth	r3, r3
 8005358:	b21b      	sxth	r3, r3
 800535a:	425a      	negs	r2, r3
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	f002 0207 	and.w	r2, r2, #7
 8005364:	bf58      	it	pl
 8005366:	4253      	negpl	r3, r2
 8005368:	b21b      	sxth	r3, r3
 800536a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800536e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	441a      	add	r2, r3
 8005376:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800537a:	2108      	movs	r1, #8
 800537c:	4618      	mov	r0, r3
 800537e:	f7fb f949 	bl	8000614 <ExtractBits>
 8005382:	4603      	mov	r3, r0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 800538a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800538e:	3308      	adds	r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	da00      	bge.n	8005396 <Vital_Msg_extr_from_CAN+0x4ea>
 8005394:	3307      	adds	r3, #7
 8005396:	10db      	asrs	r3, r3, #3
 8005398:	b29a      	uxth	r2, r3
 800539a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800539e:	4413      	add	r3, r2
 80053a0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80053a4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053a8:	3308      	adds	r3, #8
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	b21b      	sxth	r3, r3
 80053ae:	425a      	negs	r2, r3
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	f002 0207 	and.w	r2, r2, #7
 80053b8:	bf58      	it	pl
 80053ba:	4253      	negpl	r3, r2
 80053bc:	b21b      	sxth	r3, r3
 80053be:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80053c2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	441a      	add	r2, r3
 80053ca:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053ce:	2108      	movs	r1, #8
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb f91f 	bl	8000614 <ExtractBits>
 80053d6:	4603      	mov	r3, r0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 80053de:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80053e2:	3308      	adds	r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da00      	bge.n	80053ea <Vital_Msg_extr_from_CAN+0x53e>
 80053e8:	3307      	adds	r3, #7
 80053ea:	10db      	asrs	r3, r3, #3
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053f2:	4413      	add	r3, r2
 80053f4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80053f8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053fc:	3308      	adds	r3, #8
 80053fe:	b29b      	uxth	r3, r3
 8005400:	b21b      	sxth	r3, r3
 8005402:	425a      	negs	r2, r3
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	f002 0207 	and.w	r2, r2, #7
 800540c:	bf58      	it	pl
 800540e:	4253      	negpl	r3, r2
 8005410:	b21b      	sxth	r3, r3
 8005412:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005416:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	441a      	add	r2, r3
 800541e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005422:	2108      	movs	r1, #8
 8005424:	4618      	mov	r0, r3
 8005426:	f7fb f8f5 	bl	8000614 <ExtractBits>
 800542a:	4603      	mov	r3, r0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",CAN_Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8005432:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005436:	3308      	adds	r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	da00      	bge.n	800543e <Vital_Msg_extr_from_CAN+0x592>
 800543c:	3307      	adds	r3, #7
 800543e:	10db      	asrs	r3, r3, #3
 8005440:	b29a      	uxth	r2, r3
 8005442:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005446:	4413      	add	r3, r2
 8005448:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800544c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005450:	3308      	adds	r3, #8
 8005452:	b29b      	uxth	r3, r3
 8005454:	b21b      	sxth	r3, r3
 8005456:	425a      	negs	r2, r3
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	f002 0207 	and.w	r2, r2, #7
 8005460:	bf58      	it	pl
 8005462:	4253      	negpl	r3, r2
 8005464:	b21b      	sxth	r3, r3
 8005466:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800546a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	441a      	add	r2, r3
 8005472:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005476:	2110      	movs	r1, #16
 8005478:	4618      	mov	r0, r3
 800547a:	f7fb f8cb 	bl	8000614 <ExtractBits>
 800547e:	4603      	mov	r3, r0
 8005480:	b29b      	uxth	r3, r3
 8005482:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8005484:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005488:	3310      	adds	r3, #16
 800548a:	2b00      	cmp	r3, #0
 800548c:	da00      	bge.n	8005490 <Vital_Msg_extr_from_CAN+0x5e4>
 800548e:	3307      	adds	r3, #7
 8005490:	10db      	asrs	r3, r3, #3
 8005492:	b29a      	uxth	r2, r3
 8005494:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005498:	4413      	add	r3, r2
 800549a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800549e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054a2:	3310      	adds	r3, #16
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	b21b      	sxth	r3, r3
 80054a8:	425a      	negs	r2, r3
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	f002 0207 	and.w	r2, r2, #7
 80054b2:	bf58      	it	pl
 80054b4:	4253      	negpl	r3, r2
 80054b6:	b21b      	sxth	r3, r3
 80054b8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 80054bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80fe 	beq.w	80056c4 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80054c8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	441a      	add	r2, r3
 80054d0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054d4:	2108      	movs	r1, #8
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fb f89c 	bl	8000614 <ExtractBits>
 80054dc:	4603      	mov	r3, r0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 80054e4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80054e8:	3308      	adds	r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	da00      	bge.n	80054f0 <Vital_Msg_extr_from_CAN+0x644>
 80054ee:	3307      	adds	r3, #7
 80054f0:	10db      	asrs	r3, r3, #3
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054f8:	4413      	add	r3, r2
 80054fa:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80054fe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005502:	3308      	adds	r3, #8
 8005504:	b29b      	uxth	r3, r3
 8005506:	b21b      	sxth	r3, r3
 8005508:	425a      	negs	r2, r3
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	f002 0207 	and.w	r2, r2, #7
 8005512:	bf58      	it	pl
 8005514:	4253      	negpl	r3, r2
 8005516:	b21b      	sxth	r3, r3
 8005518:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800551c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	441a      	add	r2, r3
 8005524:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005528:	2108      	movs	r1, #8
 800552a:	4618      	mov	r0, r3
 800552c:	f7fb f872 	bl	8000614 <ExtractBits>
 8005530:	4603      	mov	r3, r0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8005538:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800553c:	3308      	adds	r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	da00      	bge.n	8005544 <Vital_Msg_extr_from_CAN+0x698>
 8005542:	3307      	adds	r3, #7
 8005544:	10db      	asrs	r3, r3, #3
 8005546:	b29a      	uxth	r2, r3
 8005548:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800554c:	4413      	add	r3, r2
 800554e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005552:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005556:	3308      	adds	r3, #8
 8005558:	b29b      	uxth	r3, r3
 800555a:	b21b      	sxth	r3, r3
 800555c:	425a      	negs	r2, r3
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	f002 0207 	and.w	r2, r2, #7
 8005566:	bf58      	it	pl
 8005568:	4253      	negpl	r3, r2
 800556a:	b21b      	sxth	r3, r3
 800556c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005570:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	441a      	add	r2, r3
 8005578:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800557c:	2108      	movs	r1, #8
 800557e:	4618      	mov	r0, r3
 8005580:	f7fb f848 	bl	8000614 <ExtractBits>
 8005584:	4603      	mov	r3, r0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 800558a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800558e:	3308      	adds	r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	da00      	bge.n	8005596 <Vital_Msg_extr_from_CAN+0x6ea>
 8005594:	3307      	adds	r3, #7
 8005596:	10db      	asrs	r3, r3, #3
 8005598:	b29a      	uxth	r2, r3
 800559a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800559e:	4413      	add	r3, r2
 80055a0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80055a4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055a8:	3308      	adds	r3, #8
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	b21b      	sxth	r3, r3
 80055ae:	425a      	negs	r2, r3
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	f002 0207 	and.w	r2, r2, #7
 80055b8:	bf58      	it	pl
 80055ba:	4253      	negpl	r3, r2
 80055bc:	b21b      	sxth	r3, r3
 80055be:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80055c2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	441a      	add	r2, r3
 80055ca:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055ce:	2108      	movs	r1, #8
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fb f81f 	bl	8000614 <ExtractBits>
 80055d6:	4603      	mov	r3, r0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 80055dc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80055e0:	3308      	adds	r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	da06      	bge.n	80055f4 <Vital_Msg_extr_from_CAN+0x748>
 80055e6:	3307      	adds	r3, #7
 80055e8:	e004      	b.n	80055f4 <Vital_Msg_extr_from_CAN+0x748>
 80055ea:	bf00      	nop
 80055ec:	080282cc 	.word	0x080282cc
 80055f0:	080282d4 	.word	0x080282d4
 80055f4:	10db      	asrs	r3, r3, #3
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055fc:	4413      	add	r3, r2
 80055fe:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005602:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005606:	3308      	adds	r3, #8
 8005608:	b29b      	uxth	r3, r3
 800560a:	b21b      	sxth	r3, r3
 800560c:	425a      	negs	r2, r3
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	f002 0207 	and.w	r2, r2, #7
 8005616:	bf58      	it	pl
 8005618:	4253      	negpl	r3, r2
 800561a:	b21b      	sxth	r3, r3
 800561c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005620:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	441a      	add	r2, r3
 8005628:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800562c:	2108      	movs	r1, #8
 800562e:	4618      	mov	r0, r3
 8005630:	f7fa fff0 	bl	8000614 <ExtractBits>
 8005634:	4603      	mov	r3, r0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 800563a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800563e:	3308      	adds	r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	da00      	bge.n	8005646 <Vital_Msg_extr_from_CAN+0x79a>
 8005644:	3307      	adds	r3, #7
 8005646:	10db      	asrs	r3, r3, #3
 8005648:	b29a      	uxth	r2, r3
 800564a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800564e:	4413      	add	r3, r2
 8005650:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005654:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005658:	3308      	adds	r3, #8
 800565a:	b29b      	uxth	r3, r3
 800565c:	b21b      	sxth	r3, r3
 800565e:	425a      	negs	r2, r3
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	f002 0207 	and.w	r2, r2, #7
 8005668:	bf58      	it	pl
 800566a:	4253      	negpl	r3, r2
 800566c:	b21b      	sxth	r3, r3
 800566e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005672:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	441a      	add	r2, r3
 800567a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800567e:	2108      	movs	r1, #8
 8005680:	4618      	mov	r0, r3
 8005682:	f7fa ffc7 	bl	8000614 <ExtractBits>
 8005686:	4603      	mov	r3, r0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 800568c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005690:	3308      	adds	r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	da00      	bge.n	8005698 <Vital_Msg_extr_from_CAN+0x7ec>
 8005696:	3307      	adds	r3, #7
 8005698:	10db      	asrs	r3, r3, #3
 800569a:	b29a      	uxth	r2, r3
 800569c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056a0:	4413      	add	r3, r2
 80056a2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80056a6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056aa:	3308      	adds	r3, #8
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	b21b      	sxth	r3, r3
 80056b0:	425a      	negs	r2, r3
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	f002 0207 	and.w	r2, r2, #7
 80056ba:	bf58      	it	pl
 80056bc:	4253      	negpl	r3, r2
 80056be:	b21b      	sxth	r3, r3
 80056c0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 80056c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80056d4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	441a      	add	r2, r3
 80056dc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056e0:	2108      	movs	r1, #8
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fa ff96 	bl	8000614 <ExtractBits>
 80056e8:	4603      	mov	r3, r0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 80056f0:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80056f4:	3308      	adds	r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	da00      	bge.n	80056fc <Vital_Msg_extr_from_CAN+0x850>
 80056fa:	3307      	adds	r3, #7
 80056fc:	10db      	asrs	r3, r3, #3
 80056fe:	b29a      	uxth	r2, r3
 8005700:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005704:	4413      	add	r3, r2
 8005706:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800570a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800570e:	3308      	adds	r3, #8
 8005710:	b29b      	uxth	r3, r3
 8005712:	b21b      	sxth	r3, r3
 8005714:	425a      	negs	r2, r3
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	f002 0207 	and.w	r2, r2, #7
 800571e:	bf58      	it	pl
 8005720:	4253      	negpl	r3, r2
 8005722:	b21b      	sxth	r3, r3
 8005724:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8005728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800572c:	4619      	mov	r1, r3
 800572e:	484b      	ldr	r0, [pc, #300]	; (800585c <Vital_Msg_extr_from_CAN+0x9b0>)
 8005730:	f020 feb2 	bl	8026498 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005734:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	441a      	add	r2, r3
 800573c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005740:	2108      	movs	r1, #8
 8005742:	4618      	mov	r0, r3
 8005744:	f7fa ff66 	bl	8000614 <ExtractBits>
 8005748:	4603      	mov	r3, r0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8005750:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005754:	3308      	adds	r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	da00      	bge.n	800575c <Vital_Msg_extr_from_CAN+0x8b0>
 800575a:	3307      	adds	r3, #7
 800575c:	10db      	asrs	r3, r3, #3
 800575e:	b29a      	uxth	r2, r3
 8005760:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005764:	4413      	add	r3, r2
 8005766:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800576a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800576e:	3308      	adds	r3, #8
 8005770:	b29b      	uxth	r3, r3
 8005772:	b21b      	sxth	r3, r3
 8005774:	425a      	negs	r2, r3
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	f002 0207 	and.w	r2, r2, #7
 800577e:	bf58      	it	pl
 8005780:	4253      	negpl	r3, r2
 8005782:	b21b      	sxth	r3, r3
 8005784:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8005788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 8005794:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005798:	2b00      	cmp	r3, #0
 800579a:	d007      	beq.n	80057ac <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 800579c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057a0:	08db      	lsrs	r3, r3, #3
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	3301      	adds	r3, #1
 80057a6:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80057aa:	e004      	b.n	80057b6 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 80057ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057b0:	08db      	lsrs	r3, r3, #3
 80057b2:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80057b6:	2300      	movs	r3, #0
 80057b8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80057bc:	e040      	b.n	8005840 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80057be:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	441a      	add	r2, r3
 80057c6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80057ca:	2108      	movs	r1, #8
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fa ff21 	bl	8000614 <ExtractBits>
 80057d2:	4602      	mov	r2, r0
 80057d4:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057de:	443b      	add	r3, r7
 80057e0:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 80057e4:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 80057e8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80057ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057f0:	443b      	add	r3, r7
 80057f2:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 80057f6:	461a      	mov	r2, r3
 80057f8:	4819      	ldr	r0, [pc, #100]	; (8005860 <Vital_Msg_extr_from_CAN+0x9b4>)
 80057fa:	f020 fe4d 	bl	8026498 <iprintf>
		BITSTUFFINC(8);
 80057fe:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005802:	3308      	adds	r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	da00      	bge.n	800580a <Vital_Msg_extr_from_CAN+0x95e>
 8005808:	3307      	adds	r3, #7
 800580a:	10db      	asrs	r3, r3, #3
 800580c:	b29a      	uxth	r2, r3
 800580e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005812:	4413      	add	r3, r2
 8005814:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005818:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800581c:	3308      	adds	r3, #8
 800581e:	b29b      	uxth	r3, r3
 8005820:	b21b      	sxth	r3, r3
 8005822:	425a      	negs	r2, r3
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	f002 0207 	and.w	r2, r2, #7
 800582c:	bf58      	it	pl
 800582e:	4253      	negpl	r3, r2
 8005830:	b21b      	sxth	r3, r3
 8005832:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8005836:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800583a:	3301      	adds	r3, #1
 800583c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005840:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005844:	b29b      	uxth	r3, r3
 8005846:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 800584a:	429a      	cmp	r2, r3
 800584c:	d3b7      	bcc.n	80057be <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 800584e:	200a      	movs	r0, #10
 8005850:	f020 fe3a 	bl	80264c8 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005854:	2300      	movs	r3, #0
 8005856:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800585a:	e037      	b.n	80058cc <Vital_Msg_extr_from_CAN+0xa20>
 800585c:	08028820 	.word	0x08028820
 8005860:	08028828 	.word	0x08028828
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005864:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	441a      	add	r2, r3
 800586c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005870:	2108      	movs	r1, #8
 8005872:	4618      	mov	r0, r3
 8005874:	f7fa fece 	bl	8000614 <ExtractBits>
 8005878:	4602      	mov	r2, r0
 800587a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005884:	443b      	add	r3, r7
 8005886:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800588a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800588e:	3308      	adds	r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	da00      	bge.n	8005896 <Vital_Msg_extr_from_CAN+0x9ea>
 8005894:	3307      	adds	r3, #7
 8005896:	10db      	asrs	r3, r3, #3
 8005898:	b29a      	uxth	r2, r3
 800589a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800589e:	4413      	add	r3, r2
 80058a0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80058a4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80058a8:	3308      	adds	r3, #8
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	425a      	negs	r2, r3
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	f002 0207 	and.w	r2, r2, #7
 80058b8:	bf58      	it	pl
 80058ba:	4253      	negpl	r3, r2
 80058bc:	b21b      	sxth	r3, r3
 80058be:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 80058c2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80058c6:	3301      	adds	r3, #1
 80058c8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80058cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d3c4      	bcc.n	8005864 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 80058da:	f107 0308 	add.w	r3, r7, #8
 80058de:	3301      	adds	r3, #1
 80058e0:	2210      	movs	r2, #16
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f020 fcef 	bl	80262c8 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 80058ea:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 80058ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80058f2:	1d59      	adds	r1, r3, #5
 80058f4:	f107 0308 	add.w	r3, r7, #8
 80058f8:	3301      	adds	r3, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f020 fcbc 	bl	8026278 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005900:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005904:	b21a      	sxth	r2, r3
 8005906:	f107 0308 	add.w	r3, r7, #8
 800590a:	3301      	adds	r3, #1
 800590c:	4619      	mov	r1, r3
 800590e:	2000      	movs	r0, #0
 8005910:	f00f ffd0 	bl	80158b4 <GetCRC16>
 8005914:	4603      	mov	r3, r0
 8005916:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 8005918:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800591c:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 800591e:	78bb      	ldrb	r3, [r7, #2]
 8005920:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 8005922:	78bb      	ldrb	r3, [r7, #2]
 8005924:	4a5c      	ldr	r2, [pc, #368]	; (8005a98 <Vital_Msg_extr_from_CAN+0xbec>)
 8005926:	4413      	add	r3, r2
 8005928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800592c:	2b01      	cmp	r3, #1
 800592e:	d177      	bne.n	8005a20 <Vital_Msg_extr_from_CAN+0xb74>
 8005930:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005934:	2b01      	cmp	r3, #1
 8005936:	d173      	bne.n	8005a20 <Vital_Msg_extr_from_CAN+0xb74>
 8005938:	8b79      	ldrh	r1, [r7, #26]
 800593a:	78ba      	ldrb	r2, [r7, #2]
 800593c:	4857      	ldr	r0, [pc, #348]	; (8005a9c <Vital_Msg_extr_from_CAN+0xbf0>)
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4403      	add	r3, r0
 8005948:	3312      	adds	r3, #18
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	4299      	cmp	r1, r3
 800594e:	d067      	beq.n	8005a20 <Vital_Msg_extr_from_CAN+0xb74>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005950:	78ba      	ldrb	r2, [r7, #2]
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a50      	ldr	r2, [pc, #320]	; (8005a9c <Vital_Msg_extr_from_CAN+0xbf0>)
 800595c:	4413      	add	r3, r2
 800595e:	3301      	adds	r3, #1
 8005960:	2210      	movs	r2, #16
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f020 fcaf 	bl	80262c8 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 800596a:	78ba      	ldrb	r2, [r7, #2]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4a49      	ldr	r2, [pc, #292]	; (8005a9c <Vital_Msg_extr_from_CAN+0xbf0>)
 8005976:	4413      	add	r3, r2
 8005978:	f107 0108 	add.w	r1, r7, #8
 800597c:	2214      	movs	r2, #20
 800597e:	4618      	mov	r0, r3
 8005980:	f020 fc7a 	bl	8026278 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8005984:	78bb      	ldrb	r3, [r7, #2]
 8005986:	4946      	ldr	r1, [pc, #280]	; (8005aa0 <Vital_Msg_extr_from_CAN+0xbf4>)
 8005988:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800598c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005990:	78bb      	ldrb	r3, [r7, #2]
 8005992:	4a44      	ldr	r2, [pc, #272]	; (8005aa4 <Vital_Msg_extr_from_CAN+0xbf8>)
 8005994:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005998:	78ba      	ldrb	r2, [r7, #2]
 800599a:	4840      	ldr	r0, [pc, #256]	; (8005a9c <Vital_Msg_extr_from_CAN+0xbf0>)
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4403      	add	r3, r0
 80059a6:	3312      	adds	r3, #18
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	4299      	cmp	r1, r3
 80059ac:	d038      	beq.n	8005a20 <Vital_Msg_extr_from_CAN+0xb74>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80059ae:	78ba      	ldrb	r2, [r7, #2]
 80059b0:	78b9      	ldrb	r1, [r7, #2]
 80059b2:	483a      	ldr	r0, [pc, #232]	; (8005a9c <Vital_Msg_extr_from_CAN+0xbf0>)
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4403      	add	r3, r0
 80059be:	3312      	adds	r3, #18
 80059c0:	881a      	ldrh	r2, [r3, #0]
 80059c2:	4b38      	ldr	r3, [pc, #224]	; (8005aa4 <Vital_Msg_extr_from_CAN+0xbf8>)
 80059c4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80059c8:	2214      	movs	r2, #20
 80059ca:	2100      	movs	r1, #0
 80059cc:	4836      	ldr	r0, [pc, #216]	; (8005aa8 <Vital_Msg_extr_from_CAN+0xbfc>)
 80059ce:	f020 fc7b 	bl	80262c8 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80059d2:	78ba      	ldrb	r2, [r7, #2]
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4a2f      	ldr	r2, [pc, #188]	; (8005a9c <Vital_Msg_extr_from_CAN+0xbf0>)
 80059de:	4413      	add	r3, r2
 80059e0:	2214      	movs	r2, #20
 80059e2:	4619      	mov	r1, r3
 80059e4:	4830      	ldr	r0, [pc, #192]	; (8005aa8 <Vital_Msg_extr_from_CAN+0xbfc>)
 80059e6:	f020 fc47 	bl	8026278 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 80059ea:	f44f 7002 	mov.w	r0, #520	; 0x208
 80059ee:	f00b f83f 	bl	8010a70 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 80059f2:	78bb      	ldrb	r3, [r7, #2]
 80059f4:	4a2d      	ldr	r2, [pc, #180]	; (8005aac <Vital_Msg_extr_from_CAN+0xc00>)
 80059f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d110      	bne.n	8005a20 <Vital_Msg_extr_from_CAN+0xb74>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80059fe:	78bb      	ldrb	r3, [r7, #2]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4a2b      	ldr	r2, [pc, #172]	; (8005ab0 <Vital_Msg_extr_from_CAN+0xc04>)
 8005a04:	4413      	add	r3, r2
 8005a06:	1c98      	adds	r0, r3, #2
 8005a08:	78ba      	ldrb	r2, [r7, #2]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <Vital_Msg_extr_from_CAN+0xbf0>)
 8005a14:	4413      	add	r3, r2
 8005a16:	3301      	adds	r3, #1
 8005a18:	2210      	movs	r2, #16
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f020 fc2c 	bl	8026278 <memcpy>





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005a20:	78ba      	ldrb	r2, [r7, #2]
 8005a22:	4924      	ldr	r1, [pc, #144]	; (8005ab4 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a24:	4613      	mov	r3, r2
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	4413      	add	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	440b      	add	r3, r1
 8005a2e:	78ba      	ldrb	r2, [r7, #2]
 8005a30:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005a32:	78ba      	ldrb	r2, [r7, #2]
 8005a34:	491f      	ldr	r1, [pc, #124]	; (8005ab4 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	440b      	add	r3, r1
 8005a40:	3301      	adds	r3, #1
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005a46:	2218      	movs	r2, #24
 8005a48:	2100      	movs	r1, #0
 8005a4a:	481b      	ldr	r0, [pc, #108]	; (8005ab8 <Vital_Msg_extr_from_CAN+0xc0c>)
 8005a4c:	f020 fc3c 	bl	80262c8 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005a50:	78ba      	ldrb	r2, [r7, #2]
 8005a52:	4613      	mov	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4413      	add	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4a16      	ldr	r2, [pc, #88]	; (8005ab4 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a5c:	4413      	add	r3, r2
 8005a5e:	2218      	movs	r2, #24
 8005a60:	4619      	mov	r1, r3
 8005a62:	4815      	ldr	r0, [pc, #84]	; (8005ab8 <Vital_Msg_extr_from_CAN+0xc0c>)
 8005a64:	f020 fc08 	bl	8026278 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8005a68:	f240 2002 	movw	r0, #514	; 0x202
 8005a6c:	f00b f800 	bl	8010a70 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005a70:	78ba      	ldrb	r2, [r7, #2]
 8005a72:	4910      	ldr	r1, [pc, #64]	; (8005ab4 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a74:	4613      	mov	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3301      	adds	r3, #1
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005a84:	78bb      	ldrb	r3, [r7, #2]
 8005a86:	490d      	ldr	r1, [pc, #52]	; (8005abc <Vital_Msg_extr_from_CAN+0xc10>)
 8005a88:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005a90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000504 	.word	0x20000504
 8005a9c:	200035b0 	.word	0x200035b0
 8005aa0:	20002564 	.word	0x20002564
 8005aa4:	2000258c 	.word	0x2000258c
 8005aa8:	20003740 	.word	0x20003740
 8005aac:	20002550 	.word	0x20002550
 8005ab0:	20002770 	.word	0x20002770
 8005ab4:	20002da4 	.word	0x20002da4
 8005ab8:	20002f84 	.word	0x20002f84
 8005abc:	200024b8 	.word	0x200024b8

08005ac0 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b095      	sub	sp, #84	; 0x54
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	4608      	mov	r0, r1
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	4603      	mov	r3, r0
 8005ad0:	70fb      	strb	r3, [r7, #3]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70bb      	strb	r3, [r7, #2]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	2224      	movs	r2, #36	; 0x24
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f020 fbee 	bl	80262c8 <memset>
	uint8_t uc_index = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = RESET;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005b00:	f013 fcc0 	bl	8019484 <HAL_GetTick>
 8005b04:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b10:	2300      	movs	r3, #0
 8005b12:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005b14:	499a      	ldr	r1, [pc, #616]	; (8005d80 <Status_Msg_Extr+0x2c0>)
 8005b16:	489b      	ldr	r0, [pc, #620]	; (8005d84 <Status_Msg_Extr+0x2c4>)
 8005b18:	f7fa fb92 	bl	8000240 <strcmp>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 812c 	beq.w	8005d7c <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005b24:	4b98      	ldr	r3, [pc, #608]	; (8005d88 <Status_Msg_Extr+0x2c8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d02c      	beq.n	8005b8a <Status_Msg_Extr+0xca>
 8005b30:	4b95      	ldr	r3, [pc, #596]	; (8005d88 <Status_Msg_Extr+0x2c8>)
 8005b32:	791b      	ldrb	r3, [r3, #4]
 8005b34:	78ba      	ldrb	r2, [r7, #2]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d127      	bne.n	8005b8a <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 8005b3e:	4893      	ldr	r0, [pc, #588]	; (8005d8c <Status_Msg_Extr+0x2cc>)
 8005b40:	f018 f952 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b92      	ldr	r3, [pc, #584]	; (8005d90 <Status_Msg_Extr+0x2d0>)
 8005b48:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4c:	0bd9      	lsrs	r1, r3, #15
 8005b4e:	460b      	mov	r3, r1
 8005b50:	041b      	lsls	r3, r3, #16
 8005b52:	1a5b      	subs	r3, r3, r1
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 8005b58:	488e      	ldr	r0, [pc, #568]	; (8005d94 <Status_Msg_Extr+0x2d4>)
 8005b5a:	f020 fd39 	bl	80265d0 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005b5e:	78bb      	ldrb	r3, [r7, #2]
 8005b60:	4a8d      	ldr	r2, [pc, #564]	; (8005d98 <Status_Msg_Extr+0x2d8>)
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	4413      	add	r3, r2
 8005b66:	3308      	adds	r3, #8
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	488b      	ldr	r0, [pc, #556]	; (8005d9c <Status_Msg_Extr+0x2dc>)
 8005b6e:	f020 fc93 	bl	8026498 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005b72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b74:	488a      	ldr	r0, [pc, #552]	; (8005da0 <Status_Msg_Extr+0x2e0>)
 8005b76:	f020 fc8f 	bl	8026498 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 8005b7a:	f107 0208 	add.w	r2, r7, #8
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2118      	movs	r1, #24
 8005b82:	2000      	movs	r0, #0
 8005b84:	f7fa fdd2 	bl	800072c <InsertBits>
	{
 8005b88:	e00b      	b.n	8005ba2 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005b8a:	78bb      	ldrb	r3, [r7, #2]
 8005b8c:	4a82      	ldr	r2, [pc, #520]	; (8005d98 <Status_Msg_Extr+0x2d8>)
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	4413      	add	r3, r2
 8005b92:	3308      	adds	r3, #8
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f107 0208 	add.w	r2, r7, #8
 8005b9a:	2118      	movs	r1, #24
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f7fa fdc5 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005ba8:	e010      	b.n	8005bcc <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005baa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	441a      	add	r2, r3
 8005bb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bb6:	3303      	adds	r3, #3
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	3350      	adds	r3, #80	; 0x50
 8005bbc:	443b      	add	r3, r7
 8005bbe:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005bc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005bcc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	3b05      	subs	r3, #5
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	dbe8      	blt.n	8005baa <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005bd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3303      	adds	r3, #3
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	f107 0308 	add.w	r3, r7, #8
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f00f ff1d 	bl	8015a28 <CalculateDirectReverseCrc>
 8005bee:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	3b05      	subs	r3, #5
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	441a      	add	r2, r3
 8005bf8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bfa:	2120      	movs	r1, #32
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fa fd09 	bl	8000614 <ExtractBits>
 8005c02:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	f000 80df 	beq.w	8005dcc <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3305      	adds	r3, #5
 8005c12:	461a      	mov	r2, r3
 8005c14:	2108      	movs	r1, #8
 8005c16:	2000      	movs	r0, #0
 8005c18:	f7fa fcfc 	bl	8000614 <ExtractBits>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 8005c22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d004      	beq.n	8005c34 <Status_Msg_Extr+0x174>
 8005c2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	f040 8090 	bne.w	8005d54 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005c34:	78bb      	ldrb	r3, [r7, #2]
 8005c36:	4a5b      	ldr	r2, [pc, #364]	; (8005da4 <Status_Msg_Extr+0x2e4>)
 8005c38:	3366      	adds	r3, #102	; 0x66
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4619      	mov	r1, r3
 8005c42:	4859      	ldr	r0, [pc, #356]	; (8005da8 <Status_Msg_Extr+0x2e8>)
 8005c44:	f020 fc28 	bl	8026498 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 8005c48:	f107 0308 	add.w	r3, r7, #8
 8005c4c:	2228      	movs	r2, #40	; 0x28
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f020 fb39 	bl	80262c8 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8005c56:	78bb      	ldrb	r3, [r7, #2]
 8005c58:	4a4f      	ldr	r2, [pc, #316]	; (8005d98 <Status_Msg_Extr+0x2d8>)
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3308      	adds	r3, #8
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	f107 0208 	add.w	r2, r7, #8
 8005c68:	2118      	movs	r1, #24
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f7fa fd5e 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c76:	e010      	b.n	8005c9a <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005c78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	441a      	add	r2, r3
 8005c80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c84:	3303      	adds	r3, #3
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	3350      	adds	r3, #80	; 0x50
 8005c8a:	443b      	add	r3, r7
 8005c8c:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005c90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c94:	3301      	adds	r3, #1
 8005c96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c9a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	3b05      	subs	r3, #5
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	dbe8      	blt.n	8005c78 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005ca6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3303      	adds	r3, #3
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f107 0308 	add.w	r3, r7, #8
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f00f feb6 	bl	8015a28 <CalculateDirectReverseCrc>
 8005cbc:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d132      	bne.n	8005d2c <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005cc6:	4839      	ldr	r0, [pc, #228]	; (8005dac <Status_Msg_Extr+0x2ec>)
 8005cc8:	f020 fc82 	bl	80265d0 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005ccc:	78bb      	ldrb	r3, [r7, #2]
 8005cce:	4a32      	ldr	r2, [pc, #200]	; (8005d98 <Status_Msg_Extr+0x2d8>)
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4835      	ldr	r0, [pc, #212]	; (8005db0 <Status_Msg_Extr+0x2f0>)
 8005cdc:	f020 fbdc 	bl	8026498 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005ce0:	78bb      	ldrb	r3, [r7, #2]
 8005ce2:	492d      	ldr	r1, [pc, #180]	; (8005d98 <Status_Msg_Extr+0x2d8>)
 8005ce4:	011a      	lsls	r2, r3, #4
 8005ce6:	440a      	add	r2, r1
 8005ce8:	3208      	adds	r2, #8
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	3201      	adds	r2, #1
 8005cee:	492a      	ldr	r1, [pc, #168]	; (8005d98 <Status_Msg_Extr+0x2d8>)
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005cf8:	78bb      	ldrb	r3, [r7, #2]
 8005cfa:	4a27      	ldr	r2, [pc, #156]	; (8005d98 <Status_Msg_Extr+0x2d8>)
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	4413      	add	r3, r2
 8005d00:	3308      	adds	r3, #8
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4619      	mov	r1, r3
 8005d06:	482b      	ldr	r0, [pc, #172]	; (8005db4 <Status_Msg_Extr+0x2f4>)
 8005d08:	f020 fbc6 	bl	8026498 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d0c:	78bb      	ldrb	r3, [r7, #2]
 8005d0e:	78ba      	ldrb	r2, [r7, #2]
 8005d10:	4921      	ldr	r1, [pc, #132]	; (8005d98 <Status_Msg_Extr+0x2d8>)
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	440b      	add	r3, r1
 8005d16:	3308      	adds	r3, #8
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	4827      	ldr	r0, [pc, #156]	; (8005db8 <Status_Msg_Extr+0x2f8>)
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4403      	add	r3, r0
 8005d26:	3308      	adds	r3, #8
 8005d28:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 8005d2a:	e050      	b.n	8005dce <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005d2c:	78bb      	ldrb	r3, [r7, #2]
 8005d2e:	4a1d      	ldr	r2, [pc, #116]	; (8005da4 <Status_Msg_Extr+0x2e4>)
 8005d30:	3366      	adds	r3, #102	; 0x66
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4820      	ldr	r0, [pc, #128]	; (8005dbc <Status_Msg_Extr+0x2fc>)
 8005d3c:	f020 fbac 	bl	8026498 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005d40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d42:	481f      	ldr	r0, [pc, #124]	; (8005dc0 <Status_Msg_Extr+0x300>)
 8005d44:	f020 fba8 	bl	8026498 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005d48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d4a:	481e      	ldr	r0, [pc, #120]	; (8005dc4 <Status_Msg_Extr+0x304>)
 8005d4c:	f020 fba4 	bl	8026498 <iprintf>
				return;
 8005d50:	f000 bc9e 	b.w	8006690 <Status_Msg_Extr+0xbd0>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005d54:	78bb      	ldrb	r3, [r7, #2]
 8005d56:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <Status_Msg_Extr+0x2e4>)
 8005d58:	3366      	adds	r3, #102	; 0x66
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4619      	mov	r1, r3
 8005d62:	4819      	ldr	r0, [pc, #100]	; (8005dc8 <Status_Msg_Extr+0x308>)
 8005d64:	f020 fb98 	bl	8026498 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005d68:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d6a:	4815      	ldr	r0, [pc, #84]	; (8005dc0 <Status_Msg_Extr+0x300>)
 8005d6c:	f020 fb94 	bl	8026498 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005d70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d72:	4814      	ldr	r0, [pc, #80]	; (8005dc4 <Status_Msg_Extr+0x304>)
 8005d74:	f020 fb90 	bl	8026498 <iprintf>
			return;
 8005d78:	f000 bc8a 	b.w	8006690 <Status_Msg_Extr+0xbd0>
		goto ROLLOVER_STATUS;
 8005d7c:	bf00      	nop
 8005d7e:	e026      	b.n	8005dce <Status_Msg_Extr+0x30e>
 8005d80:	08027f98 	.word	0x08027f98
 8005d84:	20000505 	.word	0x20000505
 8005d88:	2000308c 	.word	0x2000308c
 8005d8c:	2000bc44 	.word	0x2000bc44
 8005d90:	80008001 	.word	0x80008001
 8005d94:	08028838 	.word	0x08028838
 8005d98:	200028f4 	.word	0x200028f4
 8005d9c:	08028858 	.word	0x08028858
 8005da0:	080284e4 	.word	0x080284e4
 8005da4:	20000504 	.word	0x20000504
 8005da8:	0802887c 	.word	0x0802887c
 8005dac:	08028528 	.word	0x08028528
 8005db0:	080288a0 	.word	0x080288a0
 8005db4:	080288b8 	.word	0x080288b8
 8005db8:	20002da4 	.word	0x20002da4
 8005dbc:	080288d0 	.word	0x080288d0
 8005dc0:	080281dc 	.word	0x080281dc
 8005dc4:	080281ec 	.word	0x080281ec
 8005dc8:	080288f0 	.word	0x080288f0
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005dcc:	bf00      	nop

	BITSTUFFINC(8);
 8005dce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005dd2:	3308      	adds	r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da00      	bge.n	8005dda <Status_Msg_Extr+0x31a>
 8005dd8:	3307      	adds	r3, #7
 8005dda:	10db      	asrs	r3, r3, #3
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005de0:	4413      	add	r3, r2
 8005de2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005de4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005de6:	3308      	adds	r3, #8
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	425a      	negs	r2, r3
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	f002 0207 	and.w	r2, r2, #7
 8005df6:	bf58      	it	pl
 8005df8:	4253      	negpl	r3, r2
 8005dfa:	b21b      	sxth	r3, r3
 8005dfc:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005dfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	441a      	add	r2, r3
 8005e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e06:	2110      	movs	r1, #16
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fa fc03 	bl	8000614 <ExtractBits>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	78ba      	ldrb	r2, [r7, #2]
 8005e12:	b298      	uxth	r0, r3
 8005e14:	49ab      	ldr	r1, [pc, #684]	; (80060c4 <Status_Msg_Extr+0x604>)
 8005e16:	4613      	mov	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	3306      	adds	r3, #6
 8005e22:	4602      	mov	r2, r0
 8005e24:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8005e26:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e2a:	3310      	adds	r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da00      	bge.n	8005e32 <Status_Msg_Extr+0x372>
 8005e30:	3307      	adds	r3, #7
 8005e32:	10db      	asrs	r3, r3, #3
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e38:	4413      	add	r3, r2
 8005e3a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e3e:	3310      	adds	r3, #16
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	425a      	negs	r2, r3
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	f002 0207 	and.w	r2, r2, #7
 8005e4e:	bf58      	it	pl
 8005e50:	4253      	negpl	r3, r2
 8005e52:	b21b      	sxth	r3, r3
 8005e54:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005e56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	441a      	add	r2, r3
 8005e5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e5e:	2110      	movs	r1, #16
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fa fbd7 	bl	8000614 <ExtractBits>
 8005e66:	4603      	mov	r3, r0
 8005e68:	78ba      	ldrb	r2, [r7, #2]
 8005e6a:	b298      	uxth	r0, r3
 8005e6c:	4995      	ldr	r1, [pc, #596]	; (80060c4 <Status_Msg_Extr+0x604>)
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8005e7e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e82:	3310      	adds	r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	da00      	bge.n	8005e8a <Status_Msg_Extr+0x3ca>
 8005e88:	3307      	adds	r3, #7
 8005e8a:	10db      	asrs	r3, r3, #3
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e90:	4413      	add	r3, r2
 8005e92:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e96:	3310      	adds	r3, #16
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	425a      	negs	r2, r3
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	f002 0207 	and.w	r2, r2, #7
 8005ea6:	bf58      	it	pl
 8005ea8:	4253      	negpl	r3, r2
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005eae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	441a      	add	r2, r3
 8005eb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005eb6:	2108      	movs	r1, #8
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fa fbab 	bl	8000614 <ExtractBits>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	78bb      	ldrb	r3, [r7, #2]
 8005ec2:	b2d1      	uxtb	r1, r2
 8005ec4:	4a80      	ldr	r2, [pc, #512]	; (80060c8 <Status_Msg_Extr+0x608>)
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	4413      	add	r3, r2
 8005eca:	3302      	adds	r3, #2
 8005ecc:	460a      	mov	r2, r1
 8005ece:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005ed0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da00      	bge.n	8005edc <Status_Msg_Extr+0x41c>
 8005eda:	3307      	adds	r3, #7
 8005edc:	10db      	asrs	r3, r3, #3
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ee2:	4413      	add	r3, r2
 8005ee4:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ee6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ee8:	3308      	adds	r3, #8
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	b21b      	sxth	r3, r3
 8005eee:	425a      	negs	r2, r3
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	f002 0207 	and.w	r2, r2, #7
 8005ef8:	bf58      	it	pl
 8005efa:	4253      	negpl	r3, r2
 8005efc:	b21b      	sxth	r3, r3
 8005efe:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005f00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	441a      	add	r2, r3
 8005f06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f08:	2108      	movs	r1, #8
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fa fb82 	bl	8000614 <ExtractBits>
 8005f10:	4602      	mov	r2, r0
 8005f12:	78bb      	ldrb	r3, [r7, #2]
 8005f14:	b2d1      	uxtb	r1, r2
 8005f16:	4a6c      	ldr	r2, [pc, #432]	; (80060c8 <Status_Msg_Extr+0x608>)
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	460a      	mov	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8005f22:	78bb      	ldrb	r3, [r7, #2]
 8005f24:	4a68      	ldr	r2, [pc, #416]	; (80060c8 <Status_Msg_Extr+0x608>)
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	4413      	add	r3, r2
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d138      	bne.n	8005fa4 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005f32:	78bb      	ldrb	r3, [r7, #2]
 8005f34:	4a65      	ldr	r2, [pc, #404]	; (80060cc <Status_Msg_Extr+0x60c>)
 8005f36:	3366      	adds	r3, #102	; 0x66
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4863      	ldr	r0, [pc, #396]	; (80060d0 <Status_Msg_Extr+0x610>)
 8005f42:	f020 faa9 	bl	8026498 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005f46:	78bb      	ldrb	r3, [r7, #2]
 8005f48:	4a5f      	ldr	r2, [pc, #380]	; (80060c8 <Status_Msg_Extr+0x608>)
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	4413      	add	r3, r2
 8005f4e:	330c      	adds	r3, #12
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	485f      	ldr	r0, [pc, #380]	; (80060d4 <Status_Msg_Extr+0x614>)
 8005f56:	f020 fa9f 	bl	8026498 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005f5a:	78bb      	ldrb	r3, [r7, #2]
 8005f5c:	495a      	ldr	r1, [pc, #360]	; (80060c8 <Status_Msg_Extr+0x608>)
 8005f5e:	011a      	lsls	r2, r3, #4
 8005f60:	440a      	add	r2, r1
 8005f62:	320c      	adds	r2, #12
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	3201      	adds	r2, #1
 8005f68:	4957      	ldr	r1, [pc, #348]	; (80060c8 <Status_Msg_Extr+0x608>)
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	440b      	add	r3, r1
 8005f6e:	330c      	adds	r3, #12
 8005f70:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005f72:	78bb      	ldrb	r3, [r7, #2]
 8005f74:	4a54      	ldr	r2, [pc, #336]	; (80060c8 <Status_Msg_Extr+0x608>)
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	4413      	add	r3, r2
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4855      	ldr	r0, [pc, #340]	; (80060d8 <Status_Msg_Extr+0x618>)
 8005f82:	f020 fa89 	bl	8026498 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005f86:	78bb      	ldrb	r3, [r7, #2]
 8005f88:	78ba      	ldrb	r2, [r7, #2]
 8005f8a:	494f      	ldr	r1, [pc, #316]	; (80060c8 <Status_Msg_Extr+0x608>)
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	440b      	add	r3, r1
 8005f90:	330c      	adds	r3, #12
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	4851      	ldr	r0, [pc, #324]	; (80060dc <Status_Msg_Extr+0x61c>)
 8005f96:	4613      	mov	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4403      	add	r3, r0
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005fa4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005fa8:	3308      	adds	r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da00      	bge.n	8005fb0 <Status_Msg_Extr+0x4f0>
 8005fae:	3307      	adds	r3, #7
 8005fb0:	10db      	asrs	r3, r3, #3
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fb6:	4413      	add	r3, r2
 8005fb8:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	b21b      	sxth	r3, r3
 8005fc2:	425a      	negs	r2, r3
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	f002 0207 	and.w	r2, r2, #7
 8005fcc:	bf58      	it	pl
 8005fce:	4253      	negpl	r3, r2
 8005fd0:	b21b      	sxth	r3, r3
 8005fd2:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005fd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	441a      	add	r2, r3
 8005fda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fdc:	2108      	movs	r1, #8
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fa fb18 	bl	8000614 <ExtractBits>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	78ba      	ldrb	r2, [r7, #2]
 8005fe8:	b2d8      	uxtb	r0, r3
 8005fea:	4936      	ldr	r1, [pc, #216]	; (80060c4 <Status_Msg_Extr+0x604>)
 8005fec:	4613      	mov	r3, r2
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8005ffc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006000:	3308      	adds	r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	da00      	bge.n	8006008 <Status_Msg_Extr+0x548>
 8006006:	3307      	adds	r3, #7
 8006008:	10db      	asrs	r3, r3, #3
 800600a:	b29a      	uxth	r2, r3
 800600c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800600e:	4413      	add	r3, r2
 8006010:	873b      	strh	r3, [r7, #56]	; 0x38
 8006012:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006014:	3308      	adds	r3, #8
 8006016:	b29b      	uxth	r3, r3
 8006018:	b21b      	sxth	r3, r3
 800601a:	425a      	negs	r2, r3
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	f002 0207 	and.w	r2, r2, #7
 8006024:	bf58      	it	pl
 8006026:	4253      	negpl	r3, r2
 8006028:	b21b      	sxth	r3, r3
 800602a:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800602c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	441a      	add	r2, r3
 8006032:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006034:	2110      	movs	r1, #16
 8006036:	4618      	mov	r0, r3
 8006038:	f7fa faec 	bl	8000614 <ExtractBits>
 800603c:	4602      	mov	r2, r0
 800603e:	78bb      	ldrb	r3, [r7, #2]
 8006040:	b291      	uxth	r1, r2
 8006042:	4a21      	ldr	r2, [pc, #132]	; (80060c8 <Status_Msg_Extr+0x608>)
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	4413      	add	r3, r2
 8006048:	3304      	adds	r3, #4
 800604a:	460a      	mov	r2, r1
 800604c:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800604e:	4924      	ldr	r1, [pc, #144]	; (80060e0 <Status_Msg_Extr+0x620>)
 8006050:	4824      	ldr	r0, [pc, #144]	; (80060e4 <Status_Msg_Extr+0x624>)
 8006052:	f7fa f8f5 	bl	8000240 <strcmp>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10f      	bne.n	800607c <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 800605c:	78bb      	ldrb	r3, [r7, #2]
 800605e:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <Status_Msg_Extr+0x608>)
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	4413      	add	r3, r2
 8006064:	3304      	adds	r3, #4
 8006066:	881a      	ldrh	r2, [r3, #0]
 8006068:	78bb      	ldrb	r3, [r7, #2]
 800606a:	f042 0208 	orr.w	r2, r2, #8
 800606e:	b291      	uxth	r1, r2
 8006070:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <Status_Msg_Extr+0x608>)
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	4413      	add	r3, r2
 8006076:	3304      	adds	r3, #4
 8006078:	460a      	mov	r2, r1
 800607a:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 800607c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006080:	3310      	adds	r3, #16
 8006082:	2b00      	cmp	r3, #0
 8006084:	da00      	bge.n	8006088 <Status_Msg_Extr+0x5c8>
 8006086:	3307      	adds	r3, #7
 8006088:	10db      	asrs	r3, r3, #3
 800608a:	b29a      	uxth	r2, r3
 800608c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800608e:	4413      	add	r3, r2
 8006090:	873b      	strh	r3, [r7, #56]	; 0x38
 8006092:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006094:	3310      	adds	r3, #16
 8006096:	b29b      	uxth	r3, r3
 8006098:	b21b      	sxth	r3, r3
 800609a:	425a      	negs	r2, r3
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	f002 0207 	and.w	r2, r2, #7
 80060a4:	bf58      	it	pl
 80060a6:	4253      	negpl	r3, r2
 80060a8:	b21b      	sxth	r3, r3
 80060aa:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 80060ac:	78bb      	ldrb	r3, [r7, #2]
 80060ae:	4a06      	ldr	r2, [pc, #24]	; (80060c8 <Status_Msg_Extr+0x608>)
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	4413      	add	r3, r2
 80060b4:	3304      	adds	r3, #4
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 812a 	beq.w	8006316 <Status_Msg_Extr+0x856>
 80060c2:	e011      	b.n	80060e8 <Status_Msg_Extr+0x628>
 80060c4:	20002d2c 	.word	0x20002d2c
 80060c8:	200028f4 	.word	0x200028f4
 80060cc:	20000504 	.word	0x20000504
 80060d0:	080285e0 	.word	0x080285e0
 80060d4:	08028908 	.word	0x08028908
 80060d8:	08028914 	.word	0x08028914
 80060dc:	20002da4 	.word	0x20002da4
 80060e0:	08027f98 	.word	0x08027f98
 80060e4:	20000505 	.word	0x20000505
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80060e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	441a      	add	r2, r3
 80060ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060f0:	2108      	movs	r1, #8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fa fa8e 	bl	8000614 <ExtractBits>
 80060f8:	4603      	mov	r3, r0
 80060fa:	78ba      	ldrb	r2, [r7, #2]
 80060fc:	b2d8      	uxtb	r0, r3
 80060fe:	49b0      	ldr	r1, [pc, #704]	; (80063c0 <Status_Msg_Extr+0x900>)
 8006100:	4613      	mov	r3, r2
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4413      	add	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	440b      	add	r3, r1
 800610a:	3305      	adds	r3, #5
 800610c:	4602      	mov	r2, r0
 800610e:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006110:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006114:	3308      	adds	r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	da00      	bge.n	800611c <Status_Msg_Extr+0x65c>
 800611a:	3307      	adds	r3, #7
 800611c:	10db      	asrs	r3, r3, #3
 800611e:	b29a      	uxth	r2, r3
 8006120:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006122:	4413      	add	r3, r2
 8006124:	873b      	strh	r3, [r7, #56]	; 0x38
 8006126:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006128:	3308      	adds	r3, #8
 800612a:	b29b      	uxth	r3, r3
 800612c:	b21b      	sxth	r3, r3
 800612e:	425a      	negs	r2, r3
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	f002 0207 	and.w	r2, r2, #7
 8006138:	bf58      	it	pl
 800613a:	4253      	negpl	r3, r2
 800613c:	b21b      	sxth	r3, r3
 800613e:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006140:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	441a      	add	r2, r3
 8006146:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006148:	2108      	movs	r1, #8
 800614a:	4618      	mov	r0, r3
 800614c:	f7fa fa62 	bl	8000614 <ExtractBits>
 8006150:	4603      	mov	r3, r0
 8006152:	78ba      	ldrb	r2, [r7, #2]
 8006154:	b2d8      	uxtb	r0, r3
 8006156:	499a      	ldr	r1, [pc, #616]	; (80063c0 <Status_Msg_Extr+0x900>)
 8006158:	4613      	mov	r3, r2
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	4413      	add	r3, r2
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	440b      	add	r3, r1
 8006162:	3304      	adds	r3, #4
 8006164:	4602      	mov	r2, r0
 8006166:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006168:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800616c:	3308      	adds	r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	da00      	bge.n	8006174 <Status_Msg_Extr+0x6b4>
 8006172:	3307      	adds	r3, #7
 8006174:	10db      	asrs	r3, r3, #3
 8006176:	b29a      	uxth	r2, r3
 8006178:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800617a:	4413      	add	r3, r2
 800617c:	873b      	strh	r3, [r7, #56]	; 0x38
 800617e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006180:	3308      	adds	r3, #8
 8006182:	b29b      	uxth	r3, r3
 8006184:	b21b      	sxth	r3, r3
 8006186:	425a      	negs	r2, r3
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	f002 0207 	and.w	r2, r2, #7
 8006190:	bf58      	it	pl
 8006192:	4253      	negpl	r3, r2
 8006194:	b21b      	sxth	r3, r3
 8006196:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006198:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	441a      	add	r2, r3
 800619e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061a0:	2108      	movs	r1, #8
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa fa36 	bl	8000614 <ExtractBits>
 80061a8:	4603      	mov	r3, r0
 80061aa:	78ba      	ldrb	r2, [r7, #2]
 80061ac:	b2d8      	uxtb	r0, r3
 80061ae:	4984      	ldr	r1, [pc, #528]	; (80063c0 <Status_Msg_Extr+0x900>)
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	440b      	add	r3, r1
 80061ba:	3303      	adds	r3, #3
 80061bc:	4602      	mov	r2, r0
 80061be:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80061c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80061c4:	3308      	adds	r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	da00      	bge.n	80061cc <Status_Msg_Extr+0x70c>
 80061ca:	3307      	adds	r3, #7
 80061cc:	10db      	asrs	r3, r3, #3
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061d2:	4413      	add	r3, r2
 80061d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80061d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061d8:	3308      	adds	r3, #8
 80061da:	b29b      	uxth	r3, r3
 80061dc:	b21b      	sxth	r3, r3
 80061de:	425a      	negs	r2, r3
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	f002 0207 	and.w	r2, r2, #7
 80061e8:	bf58      	it	pl
 80061ea:	4253      	negpl	r3, r2
 80061ec:	b21b      	sxth	r3, r3
 80061ee:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80061f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	441a      	add	r2, r3
 80061f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061f8:	2108      	movs	r1, #8
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fa fa0a 	bl	8000614 <ExtractBits>
 8006200:	4603      	mov	r3, r0
 8006202:	78ba      	ldrb	r2, [r7, #2]
 8006204:	b2d8      	uxtb	r0, r3
 8006206:	496e      	ldr	r1, [pc, #440]	; (80063c0 <Status_Msg_Extr+0x900>)
 8006208:	4613      	mov	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	4413      	add	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	440b      	add	r3, r1
 8006212:	4602      	mov	r2, r0
 8006214:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006216:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800621a:	3308      	adds	r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	da00      	bge.n	8006222 <Status_Msg_Extr+0x762>
 8006220:	3307      	adds	r3, #7
 8006222:	10db      	asrs	r3, r3, #3
 8006224:	b29a      	uxth	r2, r3
 8006226:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006228:	4413      	add	r3, r2
 800622a:	873b      	strh	r3, [r7, #56]	; 0x38
 800622c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800622e:	3308      	adds	r3, #8
 8006230:	b29b      	uxth	r3, r3
 8006232:	b21b      	sxth	r3, r3
 8006234:	425a      	negs	r2, r3
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	f002 0207 	and.w	r2, r2, #7
 800623e:	bf58      	it	pl
 8006240:	4253      	negpl	r3, r2
 8006242:	b21b      	sxth	r3, r3
 8006244:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006246:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	441a      	add	r2, r3
 800624c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800624e:	2108      	movs	r1, #8
 8006250:	4618      	mov	r0, r3
 8006252:	f7fa f9df 	bl	8000614 <ExtractBits>
 8006256:	4603      	mov	r3, r0
 8006258:	78ba      	ldrb	r2, [r7, #2]
 800625a:	b2d8      	uxtb	r0, r3
 800625c:	4958      	ldr	r1, [pc, #352]	; (80063c0 <Status_Msg_Extr+0x900>)
 800625e:	4613      	mov	r3, r2
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	4413      	add	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	440b      	add	r3, r1
 8006268:	3301      	adds	r3, #1
 800626a:	4602      	mov	r2, r0
 800626c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800626e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006272:	3308      	adds	r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	da00      	bge.n	800627a <Status_Msg_Extr+0x7ba>
 8006278:	3307      	adds	r3, #7
 800627a:	10db      	asrs	r3, r3, #3
 800627c:	b29a      	uxth	r2, r3
 800627e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006280:	4413      	add	r3, r2
 8006282:	873b      	strh	r3, [r7, #56]	; 0x38
 8006284:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006286:	3308      	adds	r3, #8
 8006288:	b29b      	uxth	r3, r3
 800628a:	b21b      	sxth	r3, r3
 800628c:	425a      	negs	r2, r3
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	f002 0207 	and.w	r2, r2, #7
 8006296:	bf58      	it	pl
 8006298:	4253      	negpl	r3, r2
 800629a:	b21b      	sxth	r3, r3
 800629c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800629e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	441a      	add	r2, r3
 80062a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062a6:	2108      	movs	r1, #8
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa f9b3 	bl	8000614 <ExtractBits>
 80062ae:	4603      	mov	r3, r0
 80062b0:	78ba      	ldrb	r2, [r7, #2]
 80062b2:	b2d8      	uxtb	r0, r3
 80062b4:	4942      	ldr	r1, [pc, #264]	; (80063c0 <Status_Msg_Extr+0x900>)
 80062b6:	4613      	mov	r3, r2
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	440b      	add	r3, r1
 80062c0:	3302      	adds	r3, #2
 80062c2:	4602      	mov	r2, r0
 80062c4:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80062c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80062ca:	3308      	adds	r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	da00      	bge.n	80062d2 <Status_Msg_Extr+0x812>
 80062d0:	3307      	adds	r3, #7
 80062d2:	10db      	asrs	r3, r3, #3
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062d8:	4413      	add	r3, r2
 80062da:	873b      	strh	r3, [r7, #56]	; 0x38
 80062dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062de:	3308      	adds	r3, #8
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	b21b      	sxth	r3, r3
 80062e4:	425a      	negs	r2, r3
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	f002 0207 	and.w	r2, r2, #7
 80062ee:	bf58      	it	pl
 80062f0:	4253      	negpl	r3, r2
 80062f2:	b21b      	sxth	r3, r3
 80062f4:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80062f6:	78bb      	ldrb	r3, [r7, #2]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f003 f907 	bl	800950c <IS_MLK_EIPC_TIME_MATCHING>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <Status_Msg_Extr+0x84e>
 8006304:	78bb      	ldrb	r3, [r7, #2]
 8006306:	4a2f      	ldr	r2, [pc, #188]	; (80063c4 <Status_Msg_Extr+0x904>)
 8006308:	2100      	movs	r1, #0
 800630a:	54d1      	strb	r1, [r2, r3]
 800630c:	e003      	b.n	8006316 <Status_Msg_Extr+0x856>
 800630e:	78bb      	ldrb	r3, [r7, #2]
 8006310:	4a2c      	ldr	r2, [pc, #176]	; (80063c4 <Status_Msg_Extr+0x904>)
 8006312:	2101      	movs	r1, #1
 8006314:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006316:	78bb      	ldrb	r3, [r7, #2]
 8006318:	4a2b      	ldr	r2, [pc, #172]	; (80063c8 <Status_Msg_Extr+0x908>)
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	4413      	add	r3, r2
 800631e:	3304      	adds	r3, #4
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <Status_Msg_Extr+0x870>
	{
		LinkEstablishFlag = SET;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8006330:	787a      	ldrb	r2, [r7, #1]
 8006332:	78bb      	ldrb	r3, [r7, #2]
 8006334:	4611      	mov	r1, r2
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f9d6 	bl	80066e8 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 800633c:	78bb      	ldrb	r3, [r7, #2]
 800633e:	4923      	ldr	r1, [pc, #140]	; (80063cc <Status_Msg_Extr+0x90c>)
 8006340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8006346:	78bb      	ldrb	r3, [r7, #2]
 8006348:	4921      	ldr	r1, [pc, #132]	; (80063d0 <Status_Msg_Extr+0x910>)
 800634a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800634c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8006350:	78ba      	ldrb	r2, [r7, #2]
 8006352:	4920      	ldr	r1, [pc, #128]	; (80063d4 <Status_Msg_Extr+0x914>)
 8006354:	4613      	mov	r3, r2
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	4413      	add	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	440b      	add	r3, r1
 800635e:	3310      	adds	r3, #16
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	78bc      	ldrb	r4, [r7, #2]
 8006364:	4618      	mov	r0, r3
 8006366:	f009 fe07 	bl	800ff78 <HAL_Elaps_Ticks>
 800636a:	4602      	mov	r2, r0
 800636c:	4919      	ldr	r1, [pc, #100]	; (80063d4 <Status_Msg_Extr+0x914>)
 800636e:	4623      	mov	r3, r4
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4423      	add	r3, r4
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	440b      	add	r3, r1
 8006378:	3310      	adds	r3, #16
 800637a:	601a      	str	r2, [r3, #0]
	/* Updating the Clocks */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 800637c:	78bb      	ldrb	r3, [r7, #2]
 800637e:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <Status_Msg_Extr+0x918>)
 8006380:	4413      	add	r3, r2
 8006382:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006386:	2b02      	cmp	r3, #2
 8006388:	d12e      	bne.n	80063e8 <Status_Msg_Extr+0x928>
 800638a:	78bb      	ldrb	r3, [r7, #2]
 800638c:	4a13      	ldr	r2, [pc, #76]	; (80063dc <Status_Msg_Extr+0x91c>)
 800638e:	5cd3      	ldrb	r3, [r2, r3]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d829      	bhi.n	80063e8 <Status_Msg_Extr+0x928>
 8006394:	78ba      	ldrb	r2, [r7, #2]
 8006396:	4912      	ldr	r1, [pc, #72]	; (80063e0 <Status_Msg_Extr+0x920>)
 8006398:	4613      	mov	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	440b      	add	r3, r1
 80063a2:	3305      	adds	r3, #5
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11c      	bne.n	80063e8 <Status_Msg_Extr+0x928>
 80063ae:	78bb      	ldrb	r3, [r7, #2]
 80063b0:	4a0c      	ldr	r2, [pc, #48]	; (80063e4 <Status_Msg_Extr+0x924>)
 80063b2:	5cd3      	ldrb	r3, [r2, r3]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d117      	bne.n	80063e8 <Status_Msg_Extr+0x928>
	{
		LinkEstablishFlag = RESET;
 80063b8:	2300      	movs	r3, #0
 80063ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063be:	e03d      	b.n	800643c <Status_Msg_Extr+0x97c>
 80063c0:	200028b8 	.word	0x200028b8
 80063c4:	20002764 	.word	0x20002764
 80063c8:	200028f4 	.word	0x200028f4
 80063cc:	20002630 	.word	0x20002630
 80063d0:	20002658 	.word	0x20002658
 80063d4:	20002da4 	.word	0x20002da4
 80063d8:	20000504 	.word	0x20000504
 80063dc:	20002544 	.word	0x20002544
 80063e0:	20002ad4 	.word	0x20002ad4
 80063e4:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80063e8:	78bb      	ldrb	r3, [r7, #2]
 80063ea:	4aab      	ldr	r2, [pc, #684]	; (8006698 <Status_Msg_Extr+0xbd8>)
 80063ec:	4413      	add	r3, r2
 80063ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d122      	bne.n	800643c <Status_Msg_Extr+0x97c>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 80063f6:	78bb      	ldrb	r3, [r7, #2]
 80063f8:	4aa7      	ldr	r2, [pc, #668]	; (8006698 <Status_Msg_Extr+0xbd8>)
 80063fa:	3366      	adds	r3, #102	; 0x66
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	78bb      	ldrb	r3, [r7, #2]
 8006404:	4aa5      	ldr	r2, [pc, #660]	; (800669c <Status_Msg_Extr+0xbdc>)
 8006406:	5cd3      	ldrb	r3, [r2, r3]
 8006408:	461a      	mov	r2, r3
 800640a:	48a5      	ldr	r0, [pc, #660]	; (80066a0 <Status_Msg_Extr+0xbe0>)
 800640c:	f020 f844 	bl	8026498 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8006410:	78bb      	ldrb	r3, [r7, #2]
 8006412:	4aa4      	ldr	r2, [pc, #656]	; (80066a4 <Status_Msg_Extr+0xbe4>)
 8006414:	5cd3      	ldrb	r3, [r2, r3]
 8006416:	4619      	mov	r1, r3
 8006418:	48a3      	ldr	r0, [pc, #652]	; (80066a8 <Status_Msg_Extr+0xbe8>)
 800641a:	f020 f83d 	bl	8026498 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 800641e:	78ba      	ldrb	r2, [r7, #2]
 8006420:	49a2      	ldr	r1, [pc, #648]	; (80066ac <Status_Msg_Extr+0xbec>)
 8006422:	4613      	mov	r3, r2
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4413      	add	r3, r2
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	440b      	add	r3, r1
 800642c:	3305      	adds	r3, #5
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	4619      	mov	r1, r3
 8006436:	489e      	ldr	r0, [pc, #632]	; (80066b0 <Status_Msg_Extr+0xbf0>)
 8006438:	f020 f82e 	bl	8026498 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 800643c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006440:	2b01      	cmp	r3, #1
 8006442:	d166      	bne.n	8006512 <Status_Msg_Extr+0xa52>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006444:	78ba      	ldrb	r2, [r7, #2]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4a99      	ldr	r2, [pc, #612]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 8006450:	4413      	add	r3, r2
 8006452:	3301      	adds	r3, #1
 8006454:	2210      	movs	r2, #16
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f01f ff35 	bl	80262c8 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 800645e:	78ba      	ldrb	r2, [r7, #2]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4a92      	ldr	r2, [pc, #584]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 800646a:	1898      	adds	r0, r3, r2
 800646c:	78ba      	ldrb	r2, [r7, #2]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4a90      	ldr	r2, [pc, #576]	; (80066b8 <Status_Msg_Extr+0xbf8>)
 8006478:	4413      	add	r3, r2
 800647a:	2214      	movs	r2, #20
 800647c:	4619      	mov	r1, r3
 800647e:	f01f fefb 	bl	8026278 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006482:	78bb      	ldrb	r3, [r7, #2]
 8006484:	4a8d      	ldr	r2, [pc, #564]	; (80066bc <Status_Msg_Extr+0xbfc>)
 8006486:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800648a:	78ba      	ldrb	r2, [r7, #2]
 800648c:	4889      	ldr	r0, [pc, #548]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4403      	add	r3, r0
 8006498:	3312      	adds	r3, #18
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	4299      	cmp	r1, r3
 800649e:	d038      	beq.n	8006512 <Status_Msg_Extr+0xa52>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80064a0:	78ba      	ldrb	r2, [r7, #2]
 80064a2:	78b9      	ldrb	r1, [r7, #2]
 80064a4:	4883      	ldr	r0, [pc, #524]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4403      	add	r3, r0
 80064b0:	3312      	adds	r3, #18
 80064b2:	881a      	ldrh	r2, [r3, #0]
 80064b4:	4b81      	ldr	r3, [pc, #516]	; (80066bc <Status_Msg_Extr+0xbfc>)
 80064b6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80064ba:	2214      	movs	r2, #20
 80064bc:	2100      	movs	r1, #0
 80064be:	4880      	ldr	r0, [pc, #512]	; (80066c0 <Status_Msg_Extr+0xc00>)
 80064c0:	f01f ff02 	bl	80262c8 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80064c4:	78ba      	ldrb	r2, [r7, #2]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4a79      	ldr	r2, [pc, #484]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 80064d0:	4413      	add	r3, r2
 80064d2:	2214      	movs	r2, #20
 80064d4:	4619      	mov	r1, r3
 80064d6:	487a      	ldr	r0, [pc, #488]	; (80066c0 <Status_Msg_Extr+0xc00>)
 80064d8:	f01f fece 	bl	8026278 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 80064dc:	f44f 7002 	mov.w	r0, #520	; 0x208
 80064e0:	f00a fac6 	bl	8010a70 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == 0)
 80064e4:	78bb      	ldrb	r3, [r7, #2]
 80064e6:	4a77      	ldr	r2, [pc, #476]	; (80066c4 <Status_Msg_Extr+0xc04>)
 80064e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d110      	bne.n	8006512 <Status_Msg_Extr+0xa52>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80064f0:	78bb      	ldrb	r3, [r7, #2]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	4a74      	ldr	r2, [pc, #464]	; (80066c8 <Status_Msg_Extr+0xc08>)
 80064f6:	4413      	add	r3, r2
 80064f8:	1c98      	adds	r0, r3, #2
 80064fa:	78ba      	ldrb	r2, [r7, #2]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4a6b      	ldr	r2, [pc, #428]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 8006506:	4413      	add	r3, r2
 8006508:	3301      	adds	r3, #1
 800650a:	2210      	movs	r2, #16
 800650c:	4619      	mov	r1, r3
 800650e:	f01f feb3 	bl	8026278 <memcpy>
			}
		}
	}

	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006512:	78b9      	ldrb	r1, [r7, #2]
 8006514:	78ba      	ldrb	r2, [r7, #2]
 8006516:	4867      	ldr	r0, [pc, #412]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 8006518:	460b      	mov	r3, r1
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4403      	add	r3, r0
 8006522:	3312      	adds	r3, #18
 8006524:	8818      	ldrh	r0, [r3, #0]
 8006526:	4969      	ldr	r1, [pc, #420]	; (80066cc <Status_Msg_Extr+0xc0c>)
 8006528:	4613      	mov	r3, r2
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	4413      	add	r3, r2
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	440b      	add	r3, r1
 8006532:	3306      	adds	r3, #6
 8006534:	4602      	mov	r2, r0
 8006536:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006538:	78ba      	ldrb	r2, [r7, #2]
 800653a:	4964      	ldr	r1, [pc, #400]	; (80066cc <Status_Msg_Extr+0xc0c>)
 800653c:	4613      	mov	r3, r2
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	4413      	add	r3, r2
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	440b      	add	r3, r1
 8006546:	3314      	adds	r3, #20
 8006548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800654a:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 800654c:	78ba      	ldrb	r2, [r7, #2]
 800654e:	495f      	ldr	r1, [pc, #380]	; (80066cc <Status_Msg_Extr+0xc0c>)
 8006550:	4613      	mov	r3, r2
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	4413      	add	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	440b      	add	r3, r1
 800655a:	3305      	adds	r3, #5
 800655c:	2204      	movs	r2, #4
 800655e:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006560:	78ba      	ldrb	r2, [r7, #2]
 8006562:	495a      	ldr	r1, [pc, #360]	; (80066cc <Status_Msg_Extr+0xc0c>)
 8006564:	4613      	mov	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4413      	add	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	440b      	add	r3, r1
 800656e:	78ba      	ldrb	r2, [r7, #2]
 8006570:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006572:	78ba      	ldrb	r2, [r7, #2]
 8006574:	4955      	ldr	r1, [pc, #340]	; (80066cc <Status_Msg_Extr+0xc0c>)
 8006576:	4613      	mov	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4413      	add	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	440b      	add	r3, r1
 8006580:	3301      	adds	r3, #1
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006586:	78ba      	ldrb	r2, [r7, #2]
 8006588:	4950      	ldr	r1, [pc, #320]	; (80066cc <Status_Msg_Extr+0xc0c>)
 800658a:	4613      	mov	r3, r2
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	4413      	add	r3, r2
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	440b      	add	r3, r1
 8006594:	3302      	adds	r3, #2
 8006596:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800659a:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800659c:	2218      	movs	r2, #24
 800659e:	2100      	movs	r1, #0
 80065a0:	484b      	ldr	r0, [pc, #300]	; (80066d0 <Status_Msg_Extr+0xc10>)
 80065a2:	f01f fe91 	bl	80262c8 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80065a6:	78ba      	ldrb	r2, [r7, #2]
 80065a8:	4613      	mov	r3, r2
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	4413      	add	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	4a46      	ldr	r2, [pc, #280]	; (80066cc <Status_Msg_Extr+0xc0c>)
 80065b2:	4413      	add	r3, r2
 80065b4:	2218      	movs	r2, #24
 80065b6:	4619      	mov	r1, r3
 80065b8:	4845      	ldr	r0, [pc, #276]	; (80066d0 <Status_Msg_Extr+0xc10>)
 80065ba:	f01f fe5d 	bl	8026278 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 80065be:	f240 2002 	movw	r0, #514	; 0x202
 80065c2:	f00a fa55 	bl	8010a70 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80065c6:	78ba      	ldrb	r2, [r7, #2]
 80065c8:	4940      	ldr	r1, [pc, #256]	; (80066cc <Status_Msg_Extr+0xc0c>)
 80065ca:	4613      	mov	r3, r2
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	4413      	add	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	3301      	adds	r3, #1
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80065da:	78bb      	ldrb	r3, [r7, #2]
 80065dc:	493d      	ldr	r1, [pc, #244]	; (80066d4 <Status_Msg_Extr+0xc14>)
 80065de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 80065e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d11d      	bne.n	8006628 <Status_Msg_Extr+0xb68>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 80065ec:	78bb      	ldrb	r3, [r7, #2]
 80065ee:	493a      	ldr	r1, [pc, #232]	; (80066d8 <Status_Msg_Extr+0xc18>)
 80065f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 80065f6:	78ba      	ldrb	r2, [r7, #2]
 80065f8:	4938      	ldr	r1, [pc, #224]	; (80066dc <Status_Msg_Extr+0xc1c>)
 80065fa:	4613      	mov	r3, r2
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	3304      	adds	r3, #4
 8006606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006608:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 800660a:	78ba      	ldrb	r2, [r7, #2]
 800660c:	4933      	ldr	r1, [pc, #204]	; (80066dc <Status_Msg_Extr+0xc1c>)
 800660e:	4613      	mov	r3, r2
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	3301      	adds	r3, #1
 800661a:	2201      	movs	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 800661e:	78bb      	ldrb	r3, [r7, #2]
 8006620:	4a2f      	ldr	r2, [pc, #188]	; (80066e0 <Status_Msg_Extr+0xc20>)
 8006622:	2101      	movs	r1, #1
 8006624:	54d1      	strb	r1, [r2, r3]
 8006626:	e02e      	b.n	8006686 <Status_Msg_Extr+0xbc6>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8006628:	78bb      	ldrb	r3, [r7, #2]
 800662a:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <Status_Msg_Extr+0xc20>)
 800662c:	2100      	movs	r1, #0
 800662e:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006630:	78ba      	ldrb	r2, [r7, #2]
 8006632:	492a      	ldr	r1, [pc, #168]	; (80066dc <Status_Msg_Extr+0xc1c>)
 8006634:	4613      	mov	r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	3308      	adds	r3, #8
 8006640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006642:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8006644:	78ba      	ldrb	r2, [r7, #2]
 8006646:	4925      	ldr	r1, [pc, #148]	; (80066dc <Status_Msg_Extr+0xc1c>)
 8006648:	4613      	mov	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	440b      	add	r3, r1
 8006652:	3301      	adds	r3, #1
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006658:	78ba      	ldrb	r2, [r7, #2]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4a14      	ldr	r2, [pc, #80]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 8006664:	4413      	add	r3, r2
 8006666:	3301      	adds	r3, #1
 8006668:	2210      	movs	r2, #16
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f01f fe2b 	bl	80262c8 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8006672:	78ba      	ldrb	r2, [r7, #2]
 8006674:	490f      	ldr	r1, [pc, #60]	; (80066b4 <Status_Msg_Extr+0xbf4>)
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	3312      	adds	r3, #18
 8006682:	2200      	movs	r2, #0
 8006684:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800668a:	4816      	ldr	r0, [pc, #88]	; (80066e4 <Status_Msg_Extr+0xc24>)
 800668c:	f015 fbe3 	bl	801be56 <HAL_GPIO_TogglePin>

}
 8006690:	3754      	adds	r7, #84	; 0x54
 8006692:	46bd      	mov	sp, r7
 8006694:	bd90      	pop	{r4, r7, pc}
 8006696:	bf00      	nop
 8006698:	20000504 	.word	0x20000504
 800669c:	20002544 	.word	0x20002544
 80066a0:	08028920 	.word	0x08028920
 80066a4:	20002538 	.word	0x20002538
 80066a8:	08028930 	.word	0x08028930
 80066ac:	20002ad4 	.word	0x20002ad4
 80066b0:	08028948 	.word	0x08028948
 80066b4:	200035b0 	.word	0x200035b0
 80066b8:	200034e8 	.word	0x200034e8
 80066bc:	2000258c 	.word	0x2000258c
 80066c0:	20003740 	.word	0x20003740
 80066c4:	20002550 	.word	0x20002550
 80066c8:	20002770 	.word	0x20002770
 80066cc:	20002da4 	.word	0x20002da4
 80066d0:	20002f84 	.word	0x20002f84
 80066d4:	200024b8 	.word	0x200024b8
 80066d8:	200025a0 	.word	0x200025a0
 80066dc:	200033f8 	.word	0x200033f8
 80066e0:	200025f0 	.word	0x200025f0
 80066e4:	40021c00 	.word	0x40021c00

080066e8 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b0a5      	sub	sp, #148	; 0x94
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	460a      	mov	r2, r1
 80066f2:	71fb      	strb	r3, [r7, #7]
 80066f4:	4613      	mov	r3, r2
 80066f6:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 80066f8:	2300      	movs	r3, #0
 80066fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80066fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006700:	2238      	movs	r2, #56	; 0x38
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f01f fddf 	bl	80262c8 <memset>
	uint8_t Temp_Buff[60] = {0,};
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	f107 0310 	add.w	r3, r7, #16
 8006712:	2238      	movs	r2, #56	; 0x38
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f01f fdd6 	bl	80262c8 <memset>
	uint8_t uc_index = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8006722:	2300      	movs	r3, #0
 8006724:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006728:	2300      	movs	r3, #0
 800672a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 800672e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006732:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006736:	441a      	add	r2, r3
 8006738:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800673c:	23f4      	movs	r3, #244	; 0xf4
 800673e:	2108      	movs	r1, #8
 8006740:	f7f9 fff4 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006744:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006748:	3308      	adds	r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	da00      	bge.n	8006750 <Send_Status_Message+0x68>
 800674e:	3307      	adds	r3, #7
 8006750:	10db      	asrs	r3, r3, #3
 8006752:	b29a      	uxth	r2, r3
 8006754:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006758:	4413      	add	r3, r2
 800675a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800675e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006762:	3308      	adds	r3, #8
 8006764:	b29b      	uxth	r3, r3
 8006766:	b21b      	sxth	r3, r3
 8006768:	425a      	negs	r2, r3
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	f002 0207 	and.w	r2, r2, #7
 8006772:	bf58      	it	pl
 8006774:	4253      	negpl	r3, r2
 8006776:	b21b      	sxth	r3, r3
 8006778:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800677c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006780:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006784:	441a      	add	r2, r3
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	49bc      	ldr	r1, [pc, #752]	; (8006a7c <Send_Status_Message+0x394>)
 800678a:	3366      	adds	r3, #102	; 0x66
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006796:	2110      	movs	r1, #16
 8006798:	f7f9 ffc8 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800679c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80067a0:	3310      	adds	r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	da00      	bge.n	80067a8 <Send_Status_Message+0xc0>
 80067a6:	3307      	adds	r3, #7
 80067a8:	10db      	asrs	r3, r3, #3
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067b0:	4413      	add	r3, r2
 80067b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80067b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067ba:	3310      	adds	r3, #16
 80067bc:	b29b      	uxth	r3, r3
 80067be:	b21b      	sxth	r3, r3
 80067c0:	425a      	negs	r2, r3
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	f002 0207 	and.w	r2, r2, #7
 80067ca:	bf58      	it	pl
 80067cc:	4253      	negpl	r3, r2
 80067ce:	b21b      	sxth	r3, r3
 80067d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80067d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067dc:	441a      	add	r2, r3
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	49a6      	ldr	r1, [pc, #664]	; (8006a7c <Send_Status_Message+0x394>)
 80067e2:	3370      	adds	r3, #112	; 0x70
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80067ee:	2110      	movs	r1, #16
 80067f0:	f7f9 ff9c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80067f4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80067f8:	3310      	adds	r3, #16
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da00      	bge.n	8006800 <Send_Status_Message+0x118>
 80067fe:	3307      	adds	r3, #7
 8006800:	10db      	asrs	r3, r3, #3
 8006802:	b29a      	uxth	r2, r3
 8006804:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006808:	4413      	add	r3, r2
 800680a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800680e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006812:	3310      	adds	r3, #16
 8006814:	b29b      	uxth	r3, r3
 8006816:	b21b      	sxth	r3, r3
 8006818:	425a      	negs	r2, r3
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	f002 0207 	and.w	r2, r2, #7
 8006822:	bf58      	it	pl
 8006824:	4253      	negpl	r3, r2
 8006826:	b21b      	sxth	r3, r3
 8006828:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800682c:	4b94      	ldr	r3, [pc, #592]	; (8006a80 <Send_Status_Message+0x398>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d035      	beq.n	80068a6 <Send_Status_Message+0x1be>
 800683a:	4b91      	ldr	r3, [pc, #580]	; (8006a80 <Send_Status_Message+0x398>)
 800683c:	791b      	ldrb	r3, [r3, #4]
 800683e:	79fa      	ldrb	r2, [r7, #7]
 8006840:	429a      	cmp	r2, r3
 8006842:	d130      	bne.n	80068a6 <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 800684a:	488e      	ldr	r0, [pc, #568]	; (8006a84 <Send_Status_Message+0x39c>)
 800684c:	f017 facc 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8006850:	4602      	mov	r2, r0
 8006852:	4b8d      	ldr	r3, [pc, #564]	; (8006a88 <Send_Status_Message+0x3a0>)
 8006854:	fba3 1302 	umull	r1, r3, r3, r2
 8006858:	099b      	lsrs	r3, r3, #6
 800685a:	21c8      	movs	r1, #200	; 0xc8
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 8006866:	4889      	ldr	r0, [pc, #548]	; (8006a8c <Send_Status_Message+0x3a4>)
 8006868:	f01f feb2 	bl	80265d0 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	4a88      	ldr	r2, [pc, #544]	; (8006a90 <Send_Status_Message+0x3a8>)
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	4413      	add	r3, r2
 8006874:	3301      	adds	r3, #1
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	4619      	mov	r1, r3
 800687a:	4886      	ldr	r0, [pc, #536]	; (8006a94 <Send_Status_Message+0x3ac>)
 800687c:	f01f fe0c 	bl	8026498 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8006880:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8006884:	4619      	mov	r1, r3
 8006886:	4884      	ldr	r0, [pc, #528]	; (8006a98 <Send_Status_Message+0x3b0>)
 8006888:	f01f fe06 	bl	8026498 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 800688c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006890:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006894:	441a      	add	r2, r3
 8006896:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800689a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800689e:	2108      	movs	r1, #8
 80068a0:	f7f9 ff44 	bl	800072c <InsertBits>
	{
 80068a4:	e00f      	b.n	80068c6 <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80068a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068ae:	441a      	add	r2, r3
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	4977      	ldr	r1, [pc, #476]	; (8006a90 <Send_Status_Message+0x3a8>)
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	440b      	add	r3, r1
 80068b8:	3301      	adds	r3, #1
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80068c0:	2108      	movs	r1, #8
 80068c2:	f7f9 ff33 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 80068c6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80068ca:	3308      	adds	r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	da00      	bge.n	80068d2 <Send_Status_Message+0x1ea>
 80068d0:	3307      	adds	r3, #7
 80068d2:	10db      	asrs	r3, r3, #3
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068da:	4413      	add	r3, r2
 80068dc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80068e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068e4:	3308      	adds	r3, #8
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	b21b      	sxth	r3, r3
 80068ea:	425a      	negs	r2, r3
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	f002 0207 	and.w	r2, r2, #7
 80068f4:	bf58      	it	pl
 80068f6:	4253      	negpl	r3, r2
 80068f8:	b21b      	sxth	r3, r3
 80068fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80068fe:	4b60      	ldr	r3, [pc, #384]	; (8006a80 <Send_Status_Message+0x398>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	08db      	lsrs	r3, r3, #3
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d038      	beq.n	800697e <Send_Status_Message+0x296>
 800690c:	4b5c      	ldr	r3, [pc, #368]	; (8006a80 <Send_Status_Message+0x398>)
 800690e:	791b      	ldrb	r3, [r3, #4]
 8006910:	79fa      	ldrb	r2, [r7, #7]
 8006912:	429a      	cmp	r2, r3
 8006914:	d133      	bne.n	800697e <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800691c:	4859      	ldr	r0, [pc, #356]	; (8006a84 <Send_Status_Message+0x39c>)
 800691e:	f017 fa63 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8006922:	4602      	mov	r2, r0
 8006924:	4b58      	ldr	r3, [pc, #352]	; (8006a88 <Send_Status_Message+0x3a0>)
 8006926:	fba3 1302 	umull	r1, r3, r3, r2
 800692a:	099b      	lsrs	r3, r3, #6
 800692c:	21c8      	movs	r1, #200	; 0xc8
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8006938:	4858      	ldr	r0, [pc, #352]	; (8006a9c <Send_Status_Message+0x3b4>)
 800693a:	f01f fe49 	bl	80265d0 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	4a53      	ldr	r2, [pc, #332]	; (8006a90 <Send_Status_Message+0x3a8>)
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	4413      	add	r3, r2
 8006946:	3302      	adds	r3, #2
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	4619      	mov	r1, r3
 800694c:	4854      	ldr	r0, [pc, #336]	; (8006aa0 <Send_Status_Message+0x3b8>)
 800694e:	f01f fda3 	bl	8026498 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8006952:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006956:	4619      	mov	r1, r3
 8006958:	4852      	ldr	r0, [pc, #328]	; (8006aa4 <Send_Status_Message+0x3bc>)
 800695a:	f01f fd9d 	bl	8026498 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 800695e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006962:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006966:	441a      	add	r2, r3
 8006968:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800696c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006970:	2108      	movs	r1, #8
 8006972:	f7f9 fedb 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 8006976:	4b4c      	ldr	r3, [pc, #304]	; (8006aa8 <Send_Status_Message+0x3c0>)
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
	{
 800697c:	e020      	b.n	80069c0 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 800697e:	4b4a      	ldr	r3, [pc, #296]	; (8006aa8 <Send_Status_Message+0x3c0>)
 8006980:	2200      	movs	r2, #0
 8006982:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8006984:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006988:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800698c:	18d1      	adds	r1, r2, r3
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	483f      	ldr	r0, [pc, #252]	; (8006a90 <Send_Status_Message+0x3a8>)
 8006992:	011a      	lsls	r2, r3, #4
 8006994:	4402      	add	r2, r0
 8006996:	3202      	adds	r2, #2
 8006998:	7812      	ldrb	r2, [r2, #0]
 800699a:	3201      	adds	r2, #1
 800699c:	b2d4      	uxtb	r4, r2
 800699e:	483c      	ldr	r0, [pc, #240]	; (8006a90 <Send_Status_Message+0x3a8>)
 80069a0:	011a      	lsls	r2, r3, #4
 80069a2:	4402      	add	r2, r0
 80069a4:	3202      	adds	r2, #2
 80069a6:	4620      	mov	r0, r4
 80069a8:	7010      	strb	r0, [r2, #0]
 80069aa:	4a39      	ldr	r2, [pc, #228]	; (8006a90 <Send_Status_Message+0x3a8>)
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	4413      	add	r3, r2
 80069b0:	3302      	adds	r3, #2
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80069b8:	460a      	mov	r2, r1
 80069ba:	2108      	movs	r1, #8
 80069bc:	f7f9 feb6 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 80069c0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80069c4:	3308      	adds	r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	da00      	bge.n	80069cc <Send_Status_Message+0x2e4>
 80069ca:	3307      	adds	r3, #7
 80069cc:	10db      	asrs	r3, r3, #3
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80069d4:	4413      	add	r3, r2
 80069d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80069da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80069de:	3308      	adds	r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	b21b      	sxth	r3, r3
 80069e4:	425a      	negs	r2, r3
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	f002 0207 	and.w	r2, r2, #7
 80069ee:	bf58      	it	pl
 80069f0:	4253      	negpl	r3, r2
 80069f2:	b21b      	sxth	r3, r3
 80069f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 80069f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80069fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a00:	441a      	add	r2, r3
 8006a02:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a06:	2304      	movs	r3, #4
 8006a08:	2108      	movs	r1, #8
 8006a0a:	f7f9 fe8f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006a0e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006a12:	3308      	adds	r3, #8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	da00      	bge.n	8006a1a <Send_Status_Message+0x332>
 8006a18:	3307      	adds	r3, #7
 8006a1a:	10db      	asrs	r3, r3, #3
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a22:	4413      	add	r3, r2
 8006a24:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006a28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	b21b      	sxth	r3, r3
 8006a32:	425a      	negs	r2, r3
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	f002 0207 	and.w	r2, r2, #7
 8006a3c:	bf58      	it	pl
 8006a3e:	4253      	negpl	r3, r2
 8006a40:	b21b      	sxth	r3, r3
 8006a42:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	4a11      	ldr	r2, [pc, #68]	; (8006a90 <Send_Status_Message+0x3a8>)
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	4413      	add	r3, r2
 8006a4e:	3304      	adds	r3, #4
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d052      	beq.n	8006b00 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006a5a:	79fb      	ldrb	r3, [r7, #7]
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <Send_Status_Message+0x3c4>)
 8006a5e:	5cd3      	ldrb	r3, [r2, r3]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d125      	bne.n	8006ab0 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006a64:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a6c:	441a      	add	r2, r3
 8006a6e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a72:	2368      	movs	r3, #104	; 0x68
 8006a74:	2110      	movs	r1, #16
 8006a76:	f7f9 fe59 	bl	800072c <InsertBits>
 8006a7a:	e024      	b.n	8006ac6 <Send_Status_Message+0x3de>
 8006a7c:	20000504 	.word	0x20000504
 8006a80:	2000308c 	.word	0x2000308c
 8006a84:	2000bc44 	.word	0x2000bc44
 8006a88:	51eb851f 	.word	0x51eb851f
 8006a8c:	08028340 	.word	0x08028340
 8006a90:	200028f4 	.word	0x200028f4
 8006a94:	08028958 	.word	0x08028958
 8006a98:	08028978 	.word	0x08028978
 8006a9c:	080283a4 	.word	0x080283a4
 8006aa0:	08028998 	.word	0x08028998
 8006aa4:	080289b8 	.word	0x080289b8
 8006aa8:	200024af 	.word	0x200024af
 8006aac:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006ab0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ab4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ab8:	441a      	add	r2, r3
 8006aba:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006abe:	2328      	movs	r3, #40	; 0x28
 8006ac0:	2110      	movs	r1, #16
 8006ac2:	f7f9 fe33 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006ac6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006aca:	3310      	adds	r3, #16
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	da00      	bge.n	8006ad2 <Send_Status_Message+0x3ea>
 8006ad0:	3307      	adds	r3, #7
 8006ad2:	10db      	asrs	r3, r3, #3
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ada:	4413      	add	r3, r2
 8006adc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006ae0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ae4:	3310      	adds	r3, #16
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	b21b      	sxth	r3, r3
 8006aea:	425a      	negs	r2, r3
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	f002 0207 	and.w	r2, r2, #7
 8006af4:	bf58      	it	pl
 8006af6:	4253      	negpl	r3, r2
 8006af8:	b21b      	sxth	r3, r3
 8006afa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006afe:	e03a      	b.n	8006b76 <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <Send_Status_Message+0x43c>)
 8006b04:	5cd3      	ldrb	r3, [r2, r3]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d10e      	bne.n	8006b28 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 8006b0a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b12:	441a      	add	r2, r3
 8006b14:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b18:	2364      	movs	r3, #100	; 0x64
 8006b1a:	2110      	movs	r1, #16
 8006b1c:	f7f9 fe06 	bl	800072c <InsertBits>
 8006b20:	e00d      	b.n	8006b3e <Send_Status_Message+0x456>
 8006b22:	bf00      	nop
 8006b24:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 8006b28:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b30:	441a      	add	r2, r3
 8006b32:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b36:	2324      	movs	r3, #36	; 0x24
 8006b38:	2110      	movs	r1, #16
 8006b3a:	f7f9 fdf7 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006b3e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006b42:	3310      	adds	r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da00      	bge.n	8006b4a <Send_Status_Message+0x462>
 8006b48:	3307      	adds	r3, #7
 8006b4a:	10db      	asrs	r3, r3, #3
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b52:	4413      	add	r3, r2
 8006b54:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006b58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b5c:	3310      	adds	r3, #16
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	b21b      	sxth	r3, r3
 8006b62:	425a      	negs	r2, r3
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	f002 0207 	and.w	r2, r2, #7
 8006b6c:	bf58      	it	pl
 8006b6e:	4253      	negpl	r3, r2
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	4ac6      	ldr	r2, [pc, #792]	; (8006e94 <Send_Status_Message+0x7ac>)
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3304      	adds	r3, #4
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8139 	beq.w	8006e02 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	4ac1      	ldr	r2, [pc, #772]	; (8006e98 <Send_Status_Message+0x7b0>)
 8006b94:	5cd3      	ldrb	r3, [r2, r3]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d114      	bne.n	8006bc4 <Send_Status_Message+0x4dc>
		{
			Get_time();
 8006b9a:	f005 fda1 	bl	800c6e0 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006b9e:	79fa      	ldrb	r2, [r7, #7]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	4413      	add	r3, r2
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	4abc      	ldr	r2, [pc, #752]	; (8006e9c <Send_Status_Message+0x7b4>)
 8006baa:	4413      	add	r3, r2
 8006bac:	4abc      	ldr	r2, [pc, #752]	; (8006ea0 <Send_Status_Message+0x7b8>)
 8006bae:	6811      	ldr	r1, [r2, #0]
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	8892      	ldrh	r2, [r2, #4]
 8006bb4:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006bb6:	48bb      	ldr	r0, [pc, #748]	; (8006ea4 <Send_Status_Message+0x7bc>)
 8006bb8:	f01f fd0a 	bl	80265d0 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006bbc:	79fb      	ldrb	r3, [r7, #7]
 8006bbe:	4ab6      	ldr	r2, [pc, #728]	; (8006e98 <Send_Status_Message+0x7b0>)
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006bc4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006bc8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006bcc:	18d1      	adds	r1, r2, r3
 8006bce:	79fa      	ldrb	r2, [r7, #7]
 8006bd0:	48b2      	ldr	r0, [pc, #712]	; (8006e9c <Send_Status_Message+0x7b4>)
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	4413      	add	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4403      	add	r3, r0
 8006bdc:	3305      	adds	r3, #5
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006be4:	460a      	mov	r2, r1
 8006be6:	2108      	movs	r1, #8
 8006be8:	f7f9 fda0 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006bec:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da00      	bge.n	8006bf8 <Send_Status_Message+0x510>
 8006bf6:	3307      	adds	r3, #7
 8006bf8:	10db      	asrs	r3, r3, #3
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c00:	4413      	add	r3, r2
 8006c02:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006c06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	b21b      	sxth	r3, r3
 8006c10:	425a      	negs	r2, r3
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	f002 0207 	and.w	r2, r2, #7
 8006c1a:	bf58      	it	pl
 8006c1c:	4253      	negpl	r3, r2
 8006c1e:	b21b      	sxth	r3, r3
 8006c20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8006c24:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c2c:	18d1      	adds	r1, r2, r3
 8006c2e:	79fa      	ldrb	r2, [r7, #7]
 8006c30:	489a      	ldr	r0, [pc, #616]	; (8006e9c <Send_Status_Message+0x7b4>)
 8006c32:	4613      	mov	r3, r2
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4413      	add	r3, r2
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	4403      	add	r3, r0
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006c44:	460a      	mov	r2, r1
 8006c46:	2108      	movs	r1, #8
 8006c48:	f7f9 fd70 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006c4c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006c50:	3308      	adds	r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	da00      	bge.n	8006c58 <Send_Status_Message+0x570>
 8006c56:	3307      	adds	r3, #7
 8006c58:	10db      	asrs	r3, r3, #3
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c60:	4413      	add	r3, r2
 8006c62:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006c66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	b21b      	sxth	r3, r3
 8006c70:	425a      	negs	r2, r3
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	f002 0207 	and.w	r2, r2, #7
 8006c7a:	bf58      	it	pl
 8006c7c:	4253      	negpl	r3, r2
 8006c7e:	b21b      	sxth	r3, r3
 8006c80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006c84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c8c:	18d1      	adds	r1, r2, r3
 8006c8e:	79fa      	ldrb	r2, [r7, #7]
 8006c90:	4882      	ldr	r0, [pc, #520]	; (8006e9c <Send_Status_Message+0x7b4>)
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4403      	add	r3, r0
 8006c9c:	3303      	adds	r3, #3
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006ca4:	460a      	mov	r2, r1
 8006ca6:	2108      	movs	r1, #8
 8006ca8:	f7f9 fd40 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006cac:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da00      	bge.n	8006cb8 <Send_Status_Message+0x5d0>
 8006cb6:	3307      	adds	r3, #7
 8006cb8:	10db      	asrs	r3, r3, #3
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006cc6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006cca:	3308      	adds	r3, #8
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	b21b      	sxth	r3, r3
 8006cd0:	425a      	negs	r2, r3
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	f002 0207 	and.w	r2, r2, #7
 8006cda:	bf58      	it	pl
 8006cdc:	4253      	negpl	r3, r2
 8006cde:	b21b      	sxth	r3, r3
 8006ce0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006ce4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ce8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006cec:	18d1      	adds	r1, r2, r3
 8006cee:	79fa      	ldrb	r2, [r7, #7]
 8006cf0:	486a      	ldr	r0, [pc, #424]	; (8006e9c <Send_Status_Message+0x7b4>)
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4403      	add	r3, r0
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d02:	460a      	mov	r2, r1
 8006d04:	2108      	movs	r1, #8
 8006d06:	f7f9 fd11 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d0a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d0e:	3308      	adds	r3, #8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	da00      	bge.n	8006d16 <Send_Status_Message+0x62e>
 8006d14:	3307      	adds	r3, #7
 8006d16:	10db      	asrs	r3, r3, #3
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d1e:	4413      	add	r3, r2
 8006d20:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d28:	3308      	adds	r3, #8
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	b21b      	sxth	r3, r3
 8006d2e:	425a      	negs	r2, r3
 8006d30:	f003 0307 	and.w	r3, r3, #7
 8006d34:	f002 0207 	and.w	r2, r2, #7
 8006d38:	bf58      	it	pl
 8006d3a:	4253      	negpl	r3, r2
 8006d3c:	b21b      	sxth	r3, r3
 8006d3e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006d42:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d4a:	18d1      	adds	r1, r2, r3
 8006d4c:	79fa      	ldrb	r2, [r7, #7]
 8006d4e:	4853      	ldr	r0, [pc, #332]	; (8006e9c <Send_Status_Message+0x7b4>)
 8006d50:	4613      	mov	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4413      	add	r3, r2
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	4403      	add	r3, r0
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d62:	460a      	mov	r2, r1
 8006d64:	2108      	movs	r1, #8
 8006d66:	f7f9 fce1 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d6a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d6e:	3308      	adds	r3, #8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da00      	bge.n	8006d76 <Send_Status_Message+0x68e>
 8006d74:	3307      	adds	r3, #7
 8006d76:	10db      	asrs	r3, r3, #3
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d7e:	4413      	add	r3, r2
 8006d80:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d88:	3308      	adds	r3, #8
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	b21b      	sxth	r3, r3
 8006d8e:	425a      	negs	r2, r3
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	f002 0207 	and.w	r2, r2, #7
 8006d98:	bf58      	it	pl
 8006d9a:	4253      	negpl	r3, r2
 8006d9c:	b21b      	sxth	r3, r3
 8006d9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006da2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006da6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006daa:	18d1      	adds	r1, r2, r3
 8006dac:	79fa      	ldrb	r2, [r7, #7]
 8006dae:	483b      	ldr	r0, [pc, #236]	; (8006e9c <Send_Status_Message+0x7b4>)
 8006db0:	4613      	mov	r3, r2
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	4413      	add	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4403      	add	r3, r0
 8006dba:	3302      	adds	r3, #2
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006dc2:	460a      	mov	r2, r1
 8006dc4:	2108      	movs	r1, #8
 8006dc6:	f7f9 fcb1 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006dca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006dce:	3308      	adds	r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	da00      	bge.n	8006dd6 <Send_Status_Message+0x6ee>
 8006dd4:	3307      	adds	r3, #7
 8006dd6:	10db      	asrs	r3, r3, #3
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006dde:	4413      	add	r3, r2
 8006de0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006de4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006de8:	3308      	adds	r3, #8
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	b21b      	sxth	r3, r3
 8006dee:	425a      	negs	r2, r3
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	f002 0207 	and.w	r2, r2, #7
 8006df8:	bf58      	it	pl
 8006dfa:	4253      	negpl	r3, r2
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006e02:	4b29      	ldr	r3, [pc, #164]	; (8006ea8 <Send_Status_Message+0x7c0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d031      	beq.n	8006e74 <Send_Status_Message+0x78c>
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <Send_Status_Message+0x7c0>)
 8006e12:	791b      	ldrb	r3, [r3, #4]
 8006e14:	79fa      	ldrb	r2, [r7, #7]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d12c      	bne.n	8006e74 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 8006e20:	4822      	ldr	r0, [pc, #136]	; (8006eac <Send_Status_Message+0x7c4>)
 8006e22:	f016 ffe1 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8006e26:	4602      	mov	r2, r0
 8006e28:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <Send_Status_Message+0x7c8>)
 8006e2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2e:	0dd9      	lsrs	r1, r3, #23
 8006e30:	460b      	mov	r3, r1
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	1a5b      	subs	r3, r3, r1
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8006e3e:	481d      	ldr	r0, [pc, #116]	; (8006eb4 <Send_Status_Message+0x7cc>)
 8006e40:	f01f fbc6 	bl	80265d0 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <Send_Status_Message+0x7ac>)
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	4413      	add	r3, r2
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	4819      	ldr	r0, [pc, #100]	; (8006eb8 <Send_Status_Message+0x7d0>)
 8006e54:	f01f fb20 	bl	8026498 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 8006e58:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006e5c:	4817      	ldr	r0, [pc, #92]	; (8006ebc <Send_Status_Message+0x7d4>)
 8006e5e:	f01f fb1b 	bl	8026498 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006e62:	f107 020c 	add.w	r2, r7, #12
 8006e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e6a:	2118      	movs	r1, #24
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f7f9 fc5d 	bl	800072c <InsertBits>
	{
 8006e72:	e00b      	b.n	8006e8c <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	4a07      	ldr	r2, [pc, #28]	; (8006e94 <Send_Status_Message+0x7ac>)
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	4413      	add	r3, r2
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f107 020c 	add.w	r2, r7, #12
 8006e84:	2118      	movs	r1, #24
 8006e86:	2000      	movs	r0, #0
 8006e88:	f7f9 fc50 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006e92:	e027      	b.n	8006ee4 <Send_Status_Message+0x7fc>
 8006e94:	200028f4 	.word	0x200028f4
 8006e98:	20002764 	.word	0x20002764
 8006e9c:	200028b8 	.word	0x200028b8
 8006ea0:	20003f40 	.word	0x20003f40
 8006ea4:	080286fc 	.word	0x080286fc
 8006ea8:	2000308c 	.word	0x2000308c
 8006eac:	2000bc44 	.word	0x2000bc44
 8006eb0:	80008001 	.word	0x80008001
 8006eb4:	08028714 	.word	0x08028714
 8006eb8:	08028738 	.word	0x08028738
 8006ebc:	0802875c 	.word	0x0802875c
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006ec0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006ec4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006ec8:	3303      	adds	r3, #3
 8006eca:	3290      	adds	r2, #144	; 0x90
 8006ecc:	443a      	add	r2, r7
 8006ece:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006ed2:	3390      	adds	r3, #144	; 0x90
 8006ed4:	443b      	add	r3, r7
 8006ed6:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006eda:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006ee4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d8e6      	bhi.n	8006ec0 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006ef2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ef6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006efa:	18d4      	adds	r4, r2, r3
 8006efc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3303      	adds	r3, #3
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f00e fd8b 	bl	8015a28 <CalculateDirectReverseCrc>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006f18:	4622      	mov	r2, r4
 8006f1a:	2120      	movs	r1, #32
 8006f1c:	f7f9 fc06 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 8006f20:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <Send_Status_Message+0x8b8>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 8006f26:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006f2a:	3320      	adds	r3, #32
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da00      	bge.n	8006f32 <Send_Status_Message+0x84a>
 8006f30:	3307      	adds	r3, #7
 8006f32:	10db      	asrs	r3, r3, #3
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006f40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f44:	3320      	adds	r3, #32
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	b21b      	sxth	r3, r3
 8006f4a:	425a      	negs	r2, r3
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	f002 0207 	and.w	r2, r2, #7
 8006f54:	bf58      	it	pl
 8006f56:	4253      	negpl	r3, r2
 8006f58:	b21b      	sxth	r3, r3
 8006f5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006f5e:	4b11      	ldr	r3, [pc, #68]	; (8006fa4 <Send_Status_Message+0x8bc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	0a5b      	lsrs	r3, r3, #9
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <Send_Status_Message+0x89c>
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <Send_Status_Message+0x8bc>)
 8006f6e:	791b      	ldrb	r3, [r3, #4]
 8006f70:	79fa      	ldrb	r2, [r7, #7]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d106      	bne.n	8006f84 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 8006f76:	480c      	ldr	r0, [pc, #48]	; (8006fa8 <Send_Status_Message+0x8c0>)
 8006f78:	f01f fb2a 	bl	80265d0 <puts>
		printf("Not Sending Reply");
 8006f7c:	480b      	ldr	r0, [pc, #44]	; (8006fac <Send_Status_Message+0x8c4>)
 8006f7e:	f01f fa8b 	bl	8026498 <iprintf>
 8006f82:	e009      	b.n	8006f98 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006f84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006f88:	b2d9      	uxtb	r1, r3
 8006f8a:	79fa      	ldrb	r2, [r7, #7]
 8006f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 f821 	bl	8007fd8 <Process_Sending_Reply>
	}
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	3794      	adds	r7, #148	; 0x94
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd90      	pop	{r4, r7, pc}
 8006fa0:	200024af 	.word	0x200024af
 8006fa4:	2000308c 	.word	0x2000308c
 8006fa8:	08028470 	.word	0x08028470
 8006fac:	08028488 	.word	0x08028488

08006fb0 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	4608      	mov	r0, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	70fb      	strb	r3, [r7, #3]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70bb      	strb	r3, [r7, #2]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = RESET;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8006fd6:	f012 fa55 	bl	8019484 <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 8006fdc:	2300      	movs	r3, #0
 8006fde:	81fb      	strh	r3, [r7, #14]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b05      	subs	r3, #5
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f00e fd1a 	bl	8015a28 <CalculateDirectReverseCrc>
 8006ff4:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 8006ff6:	78fb      	ldrb	r3, [r7, #3]
 8006ff8:	3b05      	subs	r3, #5
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	441a      	add	r2, r3
 8006ffe:	89bb      	ldrh	r3, [r7, #12]
 8007000:	2120      	movs	r1, #32
 8007002:	4618      	mov	r0, r3
 8007004:	f7f9 fb06 	bl	8000614 <ExtractBits>
 8007008:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	429a      	cmp	r2, r3
 8007010:	d01c      	beq.n	800704c <Service_Msg_Extr+0x9c>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007012:	78bb      	ldrb	r3, [r7, #2]
 8007014:	4a09      	ldr	r2, [pc, #36]	; (800703c <Service_Msg_Extr+0x8c>)
 8007016:	3366      	adds	r3, #102	; 0x66
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	4619      	mov	r1, r3
 8007020:	4807      	ldr	r0, [pc, #28]	; (8007040 <Service_Msg_Extr+0x90>)
 8007022:	f01f fa39 	bl	8026498 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8007026:	6979      	ldr	r1, [r7, #20]
 8007028:	4806      	ldr	r0, [pc, #24]	; (8007044 <Service_Msg_Extr+0x94>)
 800702a:	f01f fa35 	bl	8026498 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 800702e:	69b9      	ldr	r1, [r7, #24]
 8007030:	4805      	ldr	r0, [pc, #20]	; (8007048 <Service_Msg_Extr+0x98>)
 8007032:	f01f fa31 	bl	8026498 <iprintf>
		return;
 8007036:	f000 bc04 	b.w	8007842 <Service_Msg_Extr+0x892>
 800703a:	bf00      	nop
 800703c:	20000504 	.word	0x20000504
 8007040:	080289dc 	.word	0x080289dc
 8007044:	080281dc 	.word	0x080281dc
 8007048:	080281ec 	.word	0x080281ec
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 800704c:	78bb      	ldrb	r3, [r7, #2]
 800704e:	49ae      	ldr	r1, [pc, #696]	; (8007308 <Service_Msg_Extr+0x358>)
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8007056:	78bb      	ldrb	r3, [r7, #2]
 8007058:	49ac      	ldr	r1, [pc, #688]	; (800730c <Service_Msg_Extr+0x35c>)
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 8007060:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007064:	3308      	adds	r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	da00      	bge.n	800706c <Service_Msg_Extr+0xbc>
 800706a:	3307      	adds	r3, #7
 800706c:	10db      	asrs	r3, r3, #3
 800706e:	b29a      	uxth	r2, r3
 8007070:	89fb      	ldrh	r3, [r7, #14]
 8007072:	4413      	add	r3, r2
 8007074:	81fb      	strh	r3, [r7, #14]
 8007076:	89bb      	ldrh	r3, [r7, #12]
 8007078:	3308      	adds	r3, #8
 800707a:	b29b      	uxth	r3, r3
 800707c:	b21b      	sxth	r3, r3
 800707e:	425a      	negs	r2, r3
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	f002 0207 	and.w	r2, r2, #7
 8007088:	bf58      	it	pl
 800708a:	4253      	negpl	r3, r2
 800708c:	b21b      	sxth	r3, r3
 800708e:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8007090:	89fb      	ldrh	r3, [r7, #14]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	441a      	add	r2, r3
 8007096:	89bb      	ldrh	r3, [r7, #12]
 8007098:	2110      	movs	r1, #16
 800709a:	4618      	mov	r0, r3
 800709c:	f7f9 faba 	bl	8000614 <ExtractBits>
 80070a0:	4603      	mov	r3, r0
 80070a2:	78ba      	ldrb	r2, [r7, #2]
 80070a4:	b298      	uxth	r0, r3
 80070a6:	499a      	ldr	r1, [pc, #616]	; (8007310 <Service_Msg_Extr+0x360>)
 80070a8:	4613      	mov	r3, r2
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	440b      	add	r3, r1
 80070b2:	3306      	adds	r3, #6
 80070b4:	4602      	mov	r2, r0
 80070b6:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 80070b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070bc:	3310      	adds	r3, #16
 80070be:	2b00      	cmp	r3, #0
 80070c0:	da00      	bge.n	80070c4 <Service_Msg_Extr+0x114>
 80070c2:	3307      	adds	r3, #7
 80070c4:	10db      	asrs	r3, r3, #3
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	89fb      	ldrh	r3, [r7, #14]
 80070ca:	4413      	add	r3, r2
 80070cc:	81fb      	strh	r3, [r7, #14]
 80070ce:	89bb      	ldrh	r3, [r7, #12]
 80070d0:	3310      	adds	r3, #16
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	b21b      	sxth	r3, r3
 80070d6:	425a      	negs	r2, r3
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	f002 0207 	and.w	r2, r2, #7
 80070e0:	bf58      	it	pl
 80070e2:	4253      	negpl	r3, r2
 80070e4:	b21b      	sxth	r3, r3
 80070e6:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80070e8:	89fb      	ldrh	r3, [r7, #14]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	441a      	add	r2, r3
 80070ee:	89bb      	ldrh	r3, [r7, #12]
 80070f0:	2110      	movs	r1, #16
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7f9 fa8e 	bl	8000614 <ExtractBits>
 80070f8:	4603      	mov	r3, r0
 80070fa:	78ba      	ldrb	r2, [r7, #2]
 80070fc:	b298      	uxth	r0, r3
 80070fe:	4984      	ldr	r1, [pc, #528]	; (8007310 <Service_Msg_Extr+0x360>)
 8007100:	4613      	mov	r3, r2
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	3304      	adds	r3, #4
 800710c:	4602      	mov	r2, r0
 800710e:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8007110:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007114:	3310      	adds	r3, #16
 8007116:	2b00      	cmp	r3, #0
 8007118:	da00      	bge.n	800711c <Service_Msg_Extr+0x16c>
 800711a:	3307      	adds	r3, #7
 800711c:	10db      	asrs	r3, r3, #3
 800711e:	b29a      	uxth	r2, r3
 8007120:	89fb      	ldrh	r3, [r7, #14]
 8007122:	4413      	add	r3, r2
 8007124:	81fb      	strh	r3, [r7, #14]
 8007126:	89bb      	ldrh	r3, [r7, #12]
 8007128:	3310      	adds	r3, #16
 800712a:	b29b      	uxth	r3, r3
 800712c:	b21b      	sxth	r3, r3
 800712e:	425a      	negs	r2, r3
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	f002 0207 	and.w	r2, r2, #7
 8007138:	bf58      	it	pl
 800713a:	4253      	negpl	r3, r2
 800713c:	b21b      	sxth	r3, r3
 800713e:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007140:	89fb      	ldrh	r3, [r7, #14]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	441a      	add	r2, r3
 8007146:	89bb      	ldrh	r3, [r7, #12]
 8007148:	2108      	movs	r1, #8
 800714a:	4618      	mov	r0, r3
 800714c:	f7f9 fa62 	bl	8000614 <ExtractBits>
 8007150:	4602      	mov	r2, r0
 8007152:	78bb      	ldrb	r3, [r7, #2]
 8007154:	b2d1      	uxtb	r1, r2
 8007156:	4a6f      	ldr	r2, [pc, #444]	; (8007314 <Service_Msg_Extr+0x364>)
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	4413      	add	r3, r2
 800715c:	3302      	adds	r3, #2
 800715e:	460a      	mov	r2, r1
 8007160:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8007162:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007166:	3308      	adds	r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	da00      	bge.n	800716e <Service_Msg_Extr+0x1be>
 800716c:	3307      	adds	r3, #7
 800716e:	10db      	asrs	r3, r3, #3
 8007170:	b29a      	uxth	r2, r3
 8007172:	89fb      	ldrh	r3, [r7, #14]
 8007174:	4413      	add	r3, r2
 8007176:	81fb      	strh	r3, [r7, #14]
 8007178:	89bb      	ldrh	r3, [r7, #12]
 800717a:	3308      	adds	r3, #8
 800717c:	b29b      	uxth	r3, r3
 800717e:	b21b      	sxth	r3, r3
 8007180:	425a      	negs	r2, r3
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	f002 0207 	and.w	r2, r2, #7
 800718a:	bf58      	it	pl
 800718c:	4253      	negpl	r3, r2
 800718e:	b21b      	sxth	r3, r3
 8007190:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007192:	89fb      	ldrh	r3, [r7, #14]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	441a      	add	r2, r3
 8007198:	89bb      	ldrh	r3, [r7, #12]
 800719a:	2108      	movs	r1, #8
 800719c:	4618      	mov	r0, r3
 800719e:	f7f9 fa39 	bl	8000614 <ExtractBits>
 80071a2:	4602      	mov	r2, r0
 80071a4:	78bb      	ldrb	r3, [r7, #2]
 80071a6:	b2d1      	uxtb	r1, r2
 80071a8:	4a5a      	ldr	r2, [pc, #360]	; (8007314 <Service_Msg_Extr+0x364>)
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	4413      	add	r3, r2
 80071ae:	3301      	adds	r3, #1
 80071b0:	460a      	mov	r2, r1
 80071b2:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80071b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071b8:	3308      	adds	r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da00      	bge.n	80071c0 <Service_Msg_Extr+0x210>
 80071be:	3307      	adds	r3, #7
 80071c0:	10db      	asrs	r3, r3, #3
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	89fb      	ldrh	r3, [r7, #14]
 80071c6:	4413      	add	r3, r2
 80071c8:	81fb      	strh	r3, [r7, #14]
 80071ca:	89bb      	ldrh	r3, [r7, #12]
 80071cc:	3308      	adds	r3, #8
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	425a      	negs	r2, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	f002 0207 	and.w	r2, r2, #7
 80071dc:	bf58      	it	pl
 80071de:	4253      	negpl	r3, r2
 80071e0:	b21b      	sxth	r3, r3
 80071e2:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80071e4:	89fb      	ldrh	r3, [r7, #14]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	441a      	add	r2, r3
 80071ea:	89bb      	ldrh	r3, [r7, #12]
 80071ec:	2108      	movs	r1, #8
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7f9 fa10 	bl	8000614 <ExtractBits>
 80071f4:	4603      	mov	r3, r0
 80071f6:	78ba      	ldrb	r2, [r7, #2]
 80071f8:	b2d8      	uxtb	r0, r3
 80071fa:	4945      	ldr	r1, [pc, #276]	; (8007310 <Service_Msg_Extr+0x360>)
 80071fc:	4613      	mov	r3, r2
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	3302      	adds	r3, #2
 8007208:	4602      	mov	r2, r0
 800720a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800720c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007210:	3308      	adds	r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	da00      	bge.n	8007218 <Service_Msg_Extr+0x268>
 8007216:	3307      	adds	r3, #7
 8007218:	10db      	asrs	r3, r3, #3
 800721a:	b29a      	uxth	r2, r3
 800721c:	89fb      	ldrh	r3, [r7, #14]
 800721e:	4413      	add	r3, r2
 8007220:	81fb      	strh	r3, [r7, #14]
 8007222:	89bb      	ldrh	r3, [r7, #12]
 8007224:	3308      	adds	r3, #8
 8007226:	b29b      	uxth	r3, r3
 8007228:	b21b      	sxth	r3, r3
 800722a:	425a      	negs	r2, r3
 800722c:	f003 0307 	and.w	r3, r3, #7
 8007230:	f002 0207 	and.w	r2, r2, #7
 8007234:	bf58      	it	pl
 8007236:	4253      	negpl	r3, r2
 8007238:	b21b      	sxth	r3, r3
 800723a:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800723c:	89fb      	ldrh	r3, [r7, #14]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	441a      	add	r2, r3
 8007242:	89bb      	ldrh	r3, [r7, #12]
 8007244:	2110      	movs	r1, #16
 8007246:	4618      	mov	r0, r3
 8007248:	f7f9 f9e4 	bl	8000614 <ExtractBits>
 800724c:	4602      	mov	r2, r0
 800724e:	78bb      	ldrb	r3, [r7, #2]
 8007250:	b291      	uxth	r1, r2
 8007252:	4a30      	ldr	r2, [pc, #192]	; (8007314 <Service_Msg_Extr+0x364>)
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	4413      	add	r3, r2
 8007258:	3304      	adds	r3, #4
 800725a:	460a      	mov	r2, r1
 800725c:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800725e:	492e      	ldr	r1, [pc, #184]	; (8007318 <Service_Msg_Extr+0x368>)
 8007260:	482e      	ldr	r0, [pc, #184]	; (800731c <Service_Msg_Extr+0x36c>)
 8007262:	f7f8 ffed 	bl	8000240 <strcmp>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10f      	bne.n	800728c <Service_Msg_Extr+0x2dc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 800726c:	78bb      	ldrb	r3, [r7, #2]
 800726e:	4a29      	ldr	r2, [pc, #164]	; (8007314 <Service_Msg_Extr+0x364>)
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	4413      	add	r3, r2
 8007274:	3304      	adds	r3, #4
 8007276:	881a      	ldrh	r2, [r3, #0]
 8007278:	78bb      	ldrb	r3, [r7, #2]
 800727a:	f042 0208 	orr.w	r2, r2, #8
 800727e:	b291      	uxth	r1, r2
 8007280:	4a24      	ldr	r2, [pc, #144]	; (8007314 <Service_Msg_Extr+0x364>)
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	4413      	add	r3, r2
 8007286:	3304      	adds	r3, #4
 8007288:	460a      	mov	r2, r1
 800728a:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 800728c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007290:	3310      	adds	r3, #16
 8007292:	2b00      	cmp	r3, #0
 8007294:	da00      	bge.n	8007298 <Service_Msg_Extr+0x2e8>
 8007296:	3307      	adds	r3, #7
 8007298:	10db      	asrs	r3, r3, #3
 800729a:	b29a      	uxth	r2, r3
 800729c:	89fb      	ldrh	r3, [r7, #14]
 800729e:	4413      	add	r3, r2
 80072a0:	81fb      	strh	r3, [r7, #14]
 80072a2:	89bb      	ldrh	r3, [r7, #12]
 80072a4:	3310      	adds	r3, #16
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	b21b      	sxth	r3, r3
 80072aa:	425a      	negs	r2, r3
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	f002 0207 	and.w	r2, r2, #7
 80072b4:	bf58      	it	pl
 80072b6:	4253      	negpl	r3, r2
 80072b8:	b21b      	sxth	r3, r3
 80072ba:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 80072bc:	78bb      	ldrb	r3, [r7, #2]
 80072be:	4a15      	ldr	r2, [pc, #84]	; (8007314 <Service_Msg_Extr+0x364>)
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	4413      	add	r3, r2
 80072c4:	3304      	adds	r3, #4
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	f003 0320 	and.w	r3, r3, #32
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8126 	beq.w	800751e <Service_Msg_Extr+0x56e>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80072d2:	89fb      	ldrh	r3, [r7, #14]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	441a      	add	r2, r3
 80072d8:	89bb      	ldrh	r3, [r7, #12]
 80072da:	2108      	movs	r1, #8
 80072dc:	4618      	mov	r0, r3
 80072de:	f7f9 f999 	bl	8000614 <ExtractBits>
 80072e2:	4603      	mov	r3, r0
 80072e4:	78ba      	ldrb	r2, [r7, #2]
 80072e6:	b2d8      	uxtb	r0, r3
 80072e8:	490d      	ldr	r1, [pc, #52]	; (8007320 <Service_Msg_Extr+0x370>)
 80072ea:	4613      	mov	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	440b      	add	r3, r1
 80072f4:	3305      	adds	r3, #5
 80072f6:	4602      	mov	r2, r0
 80072f8:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80072fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80072fe:	3308      	adds	r3, #8
 8007300:	2b00      	cmp	r3, #0
 8007302:	da0f      	bge.n	8007324 <Service_Msg_Extr+0x374>
 8007304:	3307      	adds	r3, #7
 8007306:	e00d      	b.n	8007324 <Service_Msg_Extr+0x374>
 8007308:	20002630 	.word	0x20002630
 800730c:	20002658 	.word	0x20002658
 8007310:	20002cb4 	.word	0x20002cb4
 8007314:	200028f4 	.word	0x200028f4
 8007318:	08027f98 	.word	0x08027f98
 800731c:	20000505 	.word	0x20000505
 8007320:	200028b8 	.word	0x200028b8
 8007324:	10db      	asrs	r3, r3, #3
 8007326:	b29a      	uxth	r2, r3
 8007328:	89fb      	ldrh	r3, [r7, #14]
 800732a:	4413      	add	r3, r2
 800732c:	81fb      	strh	r3, [r7, #14]
 800732e:	89bb      	ldrh	r3, [r7, #12]
 8007330:	3308      	adds	r3, #8
 8007332:	b29b      	uxth	r3, r3
 8007334:	b21b      	sxth	r3, r3
 8007336:	425a      	negs	r2, r3
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	f002 0207 	and.w	r2, r2, #7
 8007340:	bf58      	it	pl
 8007342:	4253      	negpl	r3, r2
 8007344:	b21b      	sxth	r3, r3
 8007346:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007348:	89fb      	ldrh	r3, [r7, #14]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	441a      	add	r2, r3
 800734e:	89bb      	ldrh	r3, [r7, #12]
 8007350:	2108      	movs	r1, #8
 8007352:	4618      	mov	r0, r3
 8007354:	f7f9 f95e 	bl	8000614 <ExtractBits>
 8007358:	4603      	mov	r3, r0
 800735a:	78ba      	ldrb	r2, [r7, #2]
 800735c:	b2d8      	uxtb	r0, r3
 800735e:	4989      	ldr	r1, [pc, #548]	; (8007584 <Service_Msg_Extr+0x5d4>)
 8007360:	4613      	mov	r3, r2
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	4413      	add	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	440b      	add	r3, r1
 800736a:	3304      	adds	r3, #4
 800736c:	4602      	mov	r2, r0
 800736e:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8007370:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007374:	3308      	adds	r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	da00      	bge.n	800737c <Service_Msg_Extr+0x3cc>
 800737a:	3307      	adds	r3, #7
 800737c:	10db      	asrs	r3, r3, #3
 800737e:	b29a      	uxth	r2, r3
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	4413      	add	r3, r2
 8007384:	81fb      	strh	r3, [r7, #14]
 8007386:	89bb      	ldrh	r3, [r7, #12]
 8007388:	3308      	adds	r3, #8
 800738a:	b29b      	uxth	r3, r3
 800738c:	b21b      	sxth	r3, r3
 800738e:	425a      	negs	r2, r3
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	f002 0207 	and.w	r2, r2, #7
 8007398:	bf58      	it	pl
 800739a:	4253      	negpl	r3, r2
 800739c:	b21b      	sxth	r3, r3
 800739e:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	441a      	add	r2, r3
 80073a6:	89bb      	ldrh	r3, [r7, #12]
 80073a8:	2108      	movs	r1, #8
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7f9 f932 	bl	8000614 <ExtractBits>
 80073b0:	4603      	mov	r3, r0
 80073b2:	78ba      	ldrb	r2, [r7, #2]
 80073b4:	b2d8      	uxtb	r0, r3
 80073b6:	4973      	ldr	r1, [pc, #460]	; (8007584 <Service_Msg_Extr+0x5d4>)
 80073b8:	4613      	mov	r3, r2
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	4413      	add	r3, r2
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	440b      	add	r3, r1
 80073c2:	3303      	adds	r3, #3
 80073c4:	4602      	mov	r2, r0
 80073c6:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 80073c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073cc:	3308      	adds	r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	da00      	bge.n	80073d4 <Service_Msg_Extr+0x424>
 80073d2:	3307      	adds	r3, #7
 80073d4:	10db      	asrs	r3, r3, #3
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	89fb      	ldrh	r3, [r7, #14]
 80073da:	4413      	add	r3, r2
 80073dc:	81fb      	strh	r3, [r7, #14]
 80073de:	89bb      	ldrh	r3, [r7, #12]
 80073e0:	3308      	adds	r3, #8
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	b21b      	sxth	r3, r3
 80073e6:	425a      	negs	r2, r3
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	f002 0207 	and.w	r2, r2, #7
 80073f0:	bf58      	it	pl
 80073f2:	4253      	negpl	r3, r2
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	441a      	add	r2, r3
 80073fe:	89bb      	ldrh	r3, [r7, #12]
 8007400:	2108      	movs	r1, #8
 8007402:	4618      	mov	r0, r3
 8007404:	f7f9 f906 	bl	8000614 <ExtractBits>
 8007408:	4603      	mov	r3, r0
 800740a:	78ba      	ldrb	r2, [r7, #2]
 800740c:	b2d8      	uxtb	r0, r3
 800740e:	495d      	ldr	r1, [pc, #372]	; (8007584 <Service_Msg_Extr+0x5d4>)
 8007410:	4613      	mov	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	4413      	add	r3, r2
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	440b      	add	r3, r1
 800741a:	4602      	mov	r2, r0
 800741c:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 800741e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007422:	3308      	adds	r3, #8
 8007424:	2b00      	cmp	r3, #0
 8007426:	da00      	bge.n	800742a <Service_Msg_Extr+0x47a>
 8007428:	3307      	adds	r3, #7
 800742a:	10db      	asrs	r3, r3, #3
 800742c:	b29a      	uxth	r2, r3
 800742e:	89fb      	ldrh	r3, [r7, #14]
 8007430:	4413      	add	r3, r2
 8007432:	81fb      	strh	r3, [r7, #14]
 8007434:	89bb      	ldrh	r3, [r7, #12]
 8007436:	3308      	adds	r3, #8
 8007438:	b29b      	uxth	r3, r3
 800743a:	b21b      	sxth	r3, r3
 800743c:	425a      	negs	r2, r3
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	f002 0207 	and.w	r2, r2, #7
 8007446:	bf58      	it	pl
 8007448:	4253      	negpl	r3, r2
 800744a:	b21b      	sxth	r3, r3
 800744c:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800744e:	89fb      	ldrh	r3, [r7, #14]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	441a      	add	r2, r3
 8007454:	89bb      	ldrh	r3, [r7, #12]
 8007456:	2108      	movs	r1, #8
 8007458:	4618      	mov	r0, r3
 800745a:	f7f9 f8db 	bl	8000614 <ExtractBits>
 800745e:	4603      	mov	r3, r0
 8007460:	78ba      	ldrb	r2, [r7, #2]
 8007462:	b2d8      	uxtb	r0, r3
 8007464:	4947      	ldr	r1, [pc, #284]	; (8007584 <Service_Msg_Extr+0x5d4>)
 8007466:	4613      	mov	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4413      	add	r3, r2
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	440b      	add	r3, r1
 8007470:	3301      	adds	r3, #1
 8007472:	4602      	mov	r2, r0
 8007474:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8007476:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800747a:	3308      	adds	r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	da00      	bge.n	8007482 <Service_Msg_Extr+0x4d2>
 8007480:	3307      	adds	r3, #7
 8007482:	10db      	asrs	r3, r3, #3
 8007484:	b29a      	uxth	r2, r3
 8007486:	89fb      	ldrh	r3, [r7, #14]
 8007488:	4413      	add	r3, r2
 800748a:	81fb      	strh	r3, [r7, #14]
 800748c:	89bb      	ldrh	r3, [r7, #12]
 800748e:	3308      	adds	r3, #8
 8007490:	b29b      	uxth	r3, r3
 8007492:	b21b      	sxth	r3, r3
 8007494:	425a      	negs	r2, r3
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	f002 0207 	and.w	r2, r2, #7
 800749e:	bf58      	it	pl
 80074a0:	4253      	negpl	r3, r2
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80074a6:	89fb      	ldrh	r3, [r7, #14]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	441a      	add	r2, r3
 80074ac:	89bb      	ldrh	r3, [r7, #12]
 80074ae:	2108      	movs	r1, #8
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7f9 f8af 	bl	8000614 <ExtractBits>
 80074b6:	4603      	mov	r3, r0
 80074b8:	78ba      	ldrb	r2, [r7, #2]
 80074ba:	b2d8      	uxtb	r0, r3
 80074bc:	4931      	ldr	r1, [pc, #196]	; (8007584 <Service_Msg_Extr+0x5d4>)
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	440b      	add	r3, r1
 80074c8:	3302      	adds	r3, #2
 80074ca:	4602      	mov	r2, r0
 80074cc:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 80074ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074d2:	3308      	adds	r3, #8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	da00      	bge.n	80074da <Service_Msg_Extr+0x52a>
 80074d8:	3307      	adds	r3, #7
 80074da:	10db      	asrs	r3, r3, #3
 80074dc:	b29a      	uxth	r2, r3
 80074de:	89fb      	ldrh	r3, [r7, #14]
 80074e0:	4413      	add	r3, r2
 80074e2:	81fb      	strh	r3, [r7, #14]
 80074e4:	89bb      	ldrh	r3, [r7, #12]
 80074e6:	3308      	adds	r3, #8
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	b21b      	sxth	r3, r3
 80074ec:	425a      	negs	r2, r3
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	f002 0207 	and.w	r2, r2, #7
 80074f6:	bf58      	it	pl
 80074f8:	4253      	negpl	r3, r2
 80074fa:	b21b      	sxth	r3, r3
 80074fc:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80074fe:	78bb      	ldrb	r3, [r7, #2]
 8007500:	4618      	mov	r0, r3
 8007502:	f002 f803 	bl	800950c <IS_MLK_EIPC_TIME_MATCHING>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <Service_Msg_Extr+0x566>
 800750c:	78bb      	ldrb	r3, [r7, #2]
 800750e:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <Service_Msg_Extr+0x5d8>)
 8007510:	2100      	movs	r1, #0
 8007512:	54d1      	strb	r1, [r2, r3]
 8007514:	e003      	b.n	800751e <Service_Msg_Extr+0x56e>
 8007516:	78bb      	ldrb	r3, [r7, #2]
 8007518:	4a1b      	ldr	r2, [pc, #108]	; (8007588 <Service_Msg_Extr+0x5d8>)
 800751a:	2101      	movs	r1, #1
 800751c:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 800751e:	78bb      	ldrb	r3, [r7, #2]
 8007520:	4a1a      	ldr	r2, [pc, #104]	; (800758c <Service_Msg_Extr+0x5dc>)
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <Service_Msg_Extr+0x586>
	{
		LinkEstablishFlag = SET;
 8007532:	2301      	movs	r3, #1
 8007534:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8007536:	787a      	ldrb	r2, [r7, #1]
 8007538:	78bb      	ldrb	r3, [r7, #2]
 800753a:	4611      	mov	r1, r2
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff f8d3 	bl	80066e8 <Send_Status_Message>
	/* Preparing and Sending Reply */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 8007542:	78bb      	ldrb	r3, [r7, #2]
 8007544:	4a12      	ldr	r2, [pc, #72]	; (8007590 <Service_Msg_Extr+0x5e0>)
 8007546:	4413      	add	r3, r2
 8007548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800754c:	2b02      	cmp	r3, #2
 800754e:	d127      	bne.n	80075a0 <Service_Msg_Extr+0x5f0>
 8007550:	78bb      	ldrb	r3, [r7, #2]
 8007552:	4a10      	ldr	r2, [pc, #64]	; (8007594 <Service_Msg_Extr+0x5e4>)
 8007554:	5cd3      	ldrb	r3, [r2, r3]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d822      	bhi.n	80075a0 <Service_Msg_Extr+0x5f0>
 800755a:	78ba      	ldrb	r2, [r7, #2]
 800755c:	490e      	ldr	r1, [pc, #56]	; (8007598 <Service_Msg_Extr+0x5e8>)
 800755e:	4613      	mov	r3, r2
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4413      	add	r3, r2
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	440b      	add	r3, r1
 8007568:	3305      	adds	r3, #5
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d115      	bne.n	80075a0 <Service_Msg_Extr+0x5f0>
 8007574:	78bb      	ldrb	r3, [r7, #2]
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <Service_Msg_Extr+0x5ec>)
 8007578:	5cd3      	ldrb	r3, [r2, r3]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d110      	bne.n	80075a0 <Service_Msg_Extr+0x5f0>
	{
		LinkEstablishFlag = RESET;
 800757e:	2300      	movs	r3, #0
 8007580:	77fb      	strb	r3, [r7, #31]
 8007582:	e037      	b.n	80075f4 <Service_Msg_Extr+0x644>
 8007584:	200028b8 	.word	0x200028b8
 8007588:	20002764 	.word	0x20002764
 800758c:	200028f4 	.word	0x200028f4
 8007590:	20000504 	.word	0x20000504
 8007594:	20002544 	.word	0x20002544
 8007598:	20002ad4 	.word	0x20002ad4
 800759c:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80075a0:	78bb      	ldrb	r3, [r7, #2]
 80075a2:	4aa9      	ldr	r2, [pc, #676]	; (8007848 <Service_Msg_Extr+0x898>)
 80075a4:	4413      	add	r3, r2
 80075a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d122      	bne.n	80075f4 <Service_Msg_Extr+0x644>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 80075ae:	78bb      	ldrb	r3, [r7, #2]
 80075b0:	4aa5      	ldr	r2, [pc, #660]	; (8007848 <Service_Msg_Extr+0x898>)
 80075b2:	3366      	adds	r3, #102	; 0x66
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	6859      	ldr	r1, [r3, #4]
 80075ba:	78bb      	ldrb	r3, [r7, #2]
 80075bc:	4aa3      	ldr	r2, [pc, #652]	; (800784c <Service_Msg_Extr+0x89c>)
 80075be:	5cd3      	ldrb	r3, [r2, r3]
 80075c0:	461a      	mov	r2, r3
 80075c2:	48a3      	ldr	r0, [pc, #652]	; (8007850 <Service_Msg_Extr+0x8a0>)
 80075c4:	f01e ff68 	bl	8026498 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 80075c8:	78bb      	ldrb	r3, [r7, #2]
 80075ca:	4aa2      	ldr	r2, [pc, #648]	; (8007854 <Service_Msg_Extr+0x8a4>)
 80075cc:	5cd3      	ldrb	r3, [r2, r3]
 80075ce:	4619      	mov	r1, r3
 80075d0:	48a1      	ldr	r0, [pc, #644]	; (8007858 <Service_Msg_Extr+0x8a8>)
 80075d2:	f01e ff61 	bl	8026498 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 80075d6:	78ba      	ldrb	r2, [r7, #2]
 80075d8:	49a0      	ldr	r1, [pc, #640]	; (800785c <Service_Msg_Extr+0x8ac>)
 80075da:	4613      	mov	r3, r2
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4413      	add	r3, r2
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	440b      	add	r3, r1
 80075e4:	3305      	adds	r3, #5
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	4619      	mov	r1, r3
 80075ee:	489c      	ldr	r0, [pc, #624]	; (8007860 <Service_Msg_Extr+0x8b0>)
 80075f0:	f01e ff52 	bl	8026498 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 80075f4:	7ffb      	ldrb	r3, [r7, #31]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d179      	bne.n	80076ee <Service_Msg_Extr+0x73e>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80075fa:	78ba      	ldrb	r2, [r7, #2]
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4a97      	ldr	r2, [pc, #604]	; (8007864 <Service_Msg_Extr+0x8b4>)
 8007606:	4413      	add	r3, r2
 8007608:	3301      	adds	r3, #1
 800760a:	2210      	movs	r2, #16
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f01e fe5a 	bl	80262c8 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8007614:	78ba      	ldrb	r2, [r7, #2]
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4a91      	ldr	r2, [pc, #580]	; (8007864 <Service_Msg_Extr+0x8b4>)
 8007620:	1898      	adds	r0, r3, r2
 8007622:	78ba      	ldrb	r2, [r7, #2]
 8007624:	4613      	mov	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	4a8e      	ldr	r2, [pc, #568]	; (8007868 <Service_Msg_Extr+0x8b8>)
 800762e:	4413      	add	r3, r2
 8007630:	2214      	movs	r2, #20
 8007632:	4619      	mov	r1, r3
 8007634:	f01e fe20 	bl	8026278 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8007638:	78bb      	ldrb	r3, [r7, #2]
 800763a:	4a8c      	ldr	r2, [pc, #560]	; (800786c <Service_Msg_Extr+0x8bc>)
 800763c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007640:	78ba      	ldrb	r2, [r7, #2]
 8007642:	4888      	ldr	r0, [pc, #544]	; (8007864 <Service_Msg_Extr+0x8b4>)
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4403      	add	r3, r0
 800764e:	3312      	adds	r3, #18
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	4299      	cmp	r1, r3
 8007654:	d04b      	beq.n	80076ee <Service_Msg_Extr+0x73e>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8007656:	78ba      	ldrb	r2, [r7, #2]
 8007658:	78b9      	ldrb	r1, [r7, #2]
 800765a:	4882      	ldr	r0, [pc, #520]	; (8007864 <Service_Msg_Extr+0x8b4>)
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4403      	add	r3, r0
 8007666:	3312      	adds	r3, #18
 8007668:	881a      	ldrh	r2, [r3, #0]
 800766a:	4b80      	ldr	r3, [pc, #512]	; (800786c <Service_Msg_Extr+0x8bc>)
 800766c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8007670:	2214      	movs	r2, #20
 8007672:	2100      	movs	r1, #0
 8007674:	487e      	ldr	r0, [pc, #504]	; (8007870 <Service_Msg_Extr+0x8c0>)
 8007676:	f01e fe27 	bl	80262c8 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800767a:	78ba      	ldrb	r2, [r7, #2]
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4a77      	ldr	r2, [pc, #476]	; (8007864 <Service_Msg_Extr+0x8b4>)
 8007686:	4413      	add	r3, r2
 8007688:	2214      	movs	r2, #20
 800768a:	4619      	mov	r1, r3
 800768c:	4878      	ldr	r0, [pc, #480]	; (8007870 <Service_Msg_Extr+0x8c0>)
 800768e:	f01e fdf3 	bl	8026278 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8007692:	f44f 7002 	mov.w	r0, #520	; 0x208
 8007696:	f009 f9eb 	bl	8010a70 <TransmitCanPkt>
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800769a:	78b9      	ldrb	r1, [r7, #2]
 800769c:	78ba      	ldrb	r2, [r7, #2]
 800769e:	4871      	ldr	r0, [pc, #452]	; (8007864 <Service_Msg_Extr+0x8b4>)
 80076a0:	460b      	mov	r3, r1
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4403      	add	r3, r0
 80076aa:	3312      	adds	r3, #18
 80076ac:	8818      	ldrh	r0, [r3, #0]
 80076ae:	4971      	ldr	r1, [pc, #452]	; (8007874 <Service_Msg_Extr+0x8c4>)
 80076b0:	4613      	mov	r3, r2
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	4413      	add	r3, r2
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	440b      	add	r3, r1
 80076ba:	3306      	adds	r3, #6
 80076bc:	4602      	mov	r2, r0
 80076be:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 80076c0:	78bb      	ldrb	r3, [r7, #2]
 80076c2:	4a6d      	ldr	r2, [pc, #436]	; (8007878 <Service_Msg_Extr+0x8c8>)
 80076c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d110      	bne.n	80076ee <Service_Msg_Extr+0x73e>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80076cc:	78bb      	ldrb	r3, [r7, #2]
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	4a6a      	ldr	r2, [pc, #424]	; (800787c <Service_Msg_Extr+0x8cc>)
 80076d2:	4413      	add	r3, r2
 80076d4:	1c98      	adds	r0, r3, #2
 80076d6:	78ba      	ldrb	r2, [r7, #2]
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4a60      	ldr	r2, [pc, #384]	; (8007864 <Service_Msg_Extr+0x8b4>)
 80076e2:	4413      	add	r3, r2
 80076e4:	3301      	adds	r3, #1
 80076e6:	2210      	movs	r2, #16
 80076e8:	4619      	mov	r1, r3
 80076ea:	f01e fdc5 	bl	8026278 <memcpy>
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80076ee:	78ba      	ldrb	r2, [r7, #2]
 80076f0:	4960      	ldr	r1, [pc, #384]	; (8007874 <Service_Msg_Extr+0x8c4>)
 80076f2:	4613      	mov	r3, r2
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	4413      	add	r3, r2
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	440b      	add	r3, r1
 80076fc:	3314      	adds	r3, #20
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8007702:	78ba      	ldrb	r2, [r7, #2]
 8007704:	495b      	ldr	r1, [pc, #364]	; (8007874 <Service_Msg_Extr+0x8c4>)
 8007706:	4613      	mov	r3, r2
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	4413      	add	r3, r2
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	440b      	add	r3, r1
 8007710:	3305      	adds	r3, #5
 8007712:	2206      	movs	r2, #6
 8007714:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8007716:	78ba      	ldrb	r2, [r7, #2]
 8007718:	4956      	ldr	r1, [pc, #344]	; (8007874 <Service_Msg_Extr+0x8c4>)
 800771a:	4613      	mov	r3, r2
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4413      	add	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	440b      	add	r3, r1
 8007724:	78ba      	ldrb	r2, [r7, #2]
 8007726:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8007728:	78ba      	ldrb	r2, [r7, #2]
 800772a:	4952      	ldr	r1, [pc, #328]	; (8007874 <Service_Msg_Extr+0x8c4>)
 800772c:	4613      	mov	r3, r2
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4413      	add	r3, r2
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	440b      	add	r3, r1
 8007736:	3301      	adds	r3, #1
 8007738:	2201      	movs	r2, #1
 800773a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 800773c:	78ba      	ldrb	r2, [r7, #2]
 800773e:	494d      	ldr	r1, [pc, #308]	; (8007874 <Service_Msg_Extr+0x8c4>)
 8007740:	4613      	mov	r3, r2
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	4413      	add	r3, r2
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	440b      	add	r3, r1
 800774a:	3302      	adds	r3, #2
 800774c:	7ffa      	ldrb	r2, [r7, #31]
 800774e:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007750:	2218      	movs	r2, #24
 8007752:	2100      	movs	r1, #0
 8007754:	484a      	ldr	r0, [pc, #296]	; (8007880 <Service_Msg_Extr+0x8d0>)
 8007756:	f01e fdb7 	bl	80262c8 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800775a:	78ba      	ldrb	r2, [r7, #2]
 800775c:	4613      	mov	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	4413      	add	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4a43      	ldr	r2, [pc, #268]	; (8007874 <Service_Msg_Extr+0x8c4>)
 8007766:	4413      	add	r3, r2
 8007768:	2218      	movs	r2, #24
 800776a:	4619      	mov	r1, r3
 800776c:	4844      	ldr	r0, [pc, #272]	; (8007880 <Service_Msg_Extr+0x8d0>)
 800776e:	f01e fd83 	bl	8026278 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8007772:	f240 2002 	movw	r0, #514	; 0x202
 8007776:	f009 f97b 	bl	8010a70 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800777a:	78ba      	ldrb	r2, [r7, #2]
 800777c:	493d      	ldr	r1, [pc, #244]	; (8007874 <Service_Msg_Extr+0x8c4>)
 800777e:	4613      	mov	r3, r2
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4413      	add	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	440b      	add	r3, r1
 8007788:	3301      	adds	r3, #1
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 800778e:	78bb      	ldrb	r3, [r7, #2]
 8007790:	493c      	ldr	r1, [pc, #240]	; (8007884 <Service_Msg_Extr+0x8d4>)
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8007798:	7ffb      	ldrb	r3, [r7, #31]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d11d      	bne.n	80077da <Service_Msg_Extr+0x82a>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 800779e:	78bb      	ldrb	r3, [r7, #2]
 80077a0:	4939      	ldr	r1, [pc, #228]	; (8007888 <Service_Msg_Extr+0x8d8>)
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SelfLinkFlag[Source_Index] = SET;
 80077a8:	78bb      	ldrb	r3, [r7, #2]
 80077aa:	4a38      	ldr	r2, [pc, #224]	; (800788c <Service_Msg_Extr+0x8dc>)
 80077ac:	2101      	movs	r1, #1
 80077ae:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 80077b0:	78ba      	ldrb	r2, [r7, #2]
 80077b2:	4937      	ldr	r1, [pc, #220]	; (8007890 <Service_Msg_Extr+0x8e0>)
 80077b4:	4613      	mov	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	3301      	adds	r3, #1
 80077c0:	2201      	movs	r2, #1
 80077c2:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 80077c4:	78ba      	ldrb	r2, [r7, #2]
 80077c6:	4932      	ldr	r1, [pc, #200]	; (8007890 <Service_Msg_Extr+0x8e0>)
 80077c8:	4613      	mov	r3, r2
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	3304      	adds	r3, #4
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	e02e      	b.n	8007838 <Service_Msg_Extr+0x888>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 80077da:	78bb      	ldrb	r3, [r7, #2]
 80077dc:	4a2b      	ldr	r2, [pc, #172]	; (800788c <Service_Msg_Extr+0x8dc>)
 80077de:	2100      	movs	r1, #0
 80077e0:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 80077e2:	78ba      	ldrb	r2, [r7, #2]
 80077e4:	492a      	ldr	r1, [pc, #168]	; (8007890 <Service_Msg_Extr+0x8e0>)
 80077e6:	4613      	mov	r3, r2
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	3308      	adds	r3, #8
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 80077f6:	78ba      	ldrb	r2, [r7, #2]
 80077f8:	4925      	ldr	r1, [pc, #148]	; (8007890 <Service_Msg_Extr+0x8e0>)
 80077fa:	4613      	mov	r3, r2
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	3301      	adds	r3, #1
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800780a:	78ba      	ldrb	r2, [r7, #2]
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4a13      	ldr	r2, [pc, #76]	; (8007864 <Service_Msg_Extr+0x8b4>)
 8007816:	4413      	add	r3, r2
 8007818:	3301      	adds	r3, #1
 800781a:	2210      	movs	r2, #16
 800781c:	2100      	movs	r1, #0
 800781e:	4618      	mov	r0, r3
 8007820:	f01e fd52 	bl	80262c8 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8007824:	78ba      	ldrb	r2, [r7, #2]
 8007826:	490f      	ldr	r1, [pc, #60]	; (8007864 <Service_Msg_Extr+0x8b4>)
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	3312      	adds	r3, #18
 8007834:	2200      	movs	r2, #0
 8007836:	801a      	strh	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8007838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800783c:	4815      	ldr	r0, [pc, #84]	; (8007894 <Service_Msg_Extr+0x8e4>)
 800783e:	f014 fb0a 	bl	801be56 <HAL_GPIO_TogglePin>

}
 8007842:	3720      	adds	r7, #32
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000504 	.word	0x20000504
 800784c:	20002544 	.word	0x20002544
 8007850:	08028920 	.word	0x08028920
 8007854:	20002538 	.word	0x20002538
 8007858:	08028930 	.word	0x08028930
 800785c:	20002ad4 	.word	0x20002ad4
 8007860:	08028948 	.word	0x08028948
 8007864:	200035b0 	.word	0x200035b0
 8007868:	200034e8 	.word	0x200034e8
 800786c:	2000258c 	.word	0x2000258c
 8007870:	20003740 	.word	0x20003740
 8007874:	20002da4 	.word	0x20002da4
 8007878:	20002550 	.word	0x20002550
 800787c:	20002770 	.word	0x20002770
 8007880:	20002f84 	.word	0x20002f84
 8007884:	200024b8 	.word	0x200024b8
 8007888:	200025a0 	.word	0x200025a0
 800788c:	200025f0 	.word	0x200025f0
 8007890:	200033f8 	.word	0x200033f8
 8007894:	40021c00 	.word	0x40021c00

08007898 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b095      	sub	sp, #84	; 0x54
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	460a      	mov	r2, r1
 80078a2:	71fb      	strb	r3, [r7, #7]
 80078a4:	4613      	mov	r3, r2
 80078a6:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	f107 0310 	add.w	r3, r7, #16
 80078b0:	2238      	movs	r2, #56	; 0x38
 80078b2:	2100      	movs	r1, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f01e fd07 	bl	80262c8 <memset>

	BITSTUFFINIT(0, 0);
 80078ba:	2300      	movs	r3, #0
 80078bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80078c0:	2300      	movs	r3, #0
 80078c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 80078c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078ca:	f107 020c 	add.w	r2, r7, #12
 80078ce:	441a      	add	r2, r3
 80078d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80078d4:	23f4      	movs	r3, #244	; 0xf4
 80078d6:	2108      	movs	r1, #8
 80078d8:	f7f8 ff28 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80078dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80078e0:	3308      	adds	r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da00      	bge.n	80078e8 <Send_Service_Signal_Message+0x50>
 80078e6:	3307      	adds	r3, #7
 80078e8:	10db      	asrs	r3, r3, #3
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078f0:	4413      	add	r3, r2
 80078f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80078f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078fa:	3308      	adds	r3, #8
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	b21b      	sxth	r3, r3
 8007900:	425a      	negs	r2, r3
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	f002 0207 	and.w	r2, r2, #7
 800790a:	bf58      	it	pl
 800790c:	4253      	negpl	r3, r2
 800790e:	b21b      	sxth	r3, r3
 8007910:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8007914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007918:	f107 020c 	add.w	r2, r7, #12
 800791c:	441a      	add	r2, r3
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	497b      	ldr	r1, [pc, #492]	; (8007b10 <Send_Service_Signal_Message+0x278>)
 8007922:	3366      	adds	r3, #102	; 0x66
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	440b      	add	r3, r1
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800792e:	2110      	movs	r1, #16
 8007930:	f7f8 fefc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007934:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007938:	3310      	adds	r3, #16
 800793a:	2b00      	cmp	r3, #0
 800793c:	da00      	bge.n	8007940 <Send_Service_Signal_Message+0xa8>
 800793e:	3307      	adds	r3, #7
 8007940:	10db      	asrs	r3, r3, #3
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007948:	4413      	add	r3, r2
 800794a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800794e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007952:	3310      	adds	r3, #16
 8007954:	b29b      	uxth	r3, r3
 8007956:	b21b      	sxth	r3, r3
 8007958:	425a      	negs	r2, r3
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	f002 0207 	and.w	r2, r2, #7
 8007962:	bf58      	it	pl
 8007964:	4253      	negpl	r3, r2
 8007966:	b21b      	sxth	r3, r3
 8007968:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 800796c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007970:	f107 020c 	add.w	r2, r7, #12
 8007974:	441a      	add	r2, r3
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	4965      	ldr	r1, [pc, #404]	; (8007b10 <Send_Service_Signal_Message+0x278>)
 800797a:	3370      	adds	r3, #112	; 0x70
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007986:	2110      	movs	r1, #16
 8007988:	f7f8 fed0 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800798c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007990:	3310      	adds	r3, #16
 8007992:	2b00      	cmp	r3, #0
 8007994:	da00      	bge.n	8007998 <Send_Service_Signal_Message+0x100>
 8007996:	3307      	adds	r3, #7
 8007998:	10db      	asrs	r3, r3, #3
 800799a:	b29a      	uxth	r2, r3
 800799c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079a0:	4413      	add	r3, r2
 80079a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80079a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80079aa:	3310      	adds	r3, #16
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	b21b      	sxth	r3, r3
 80079b0:	425a      	negs	r2, r3
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	f002 0207 	and.w	r2, r2, #7
 80079ba:	bf58      	it	pl
 80079bc:	4253      	negpl	r3, r2
 80079be:	b21b      	sxth	r3, r3
 80079c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80079c4:	4b53      	ldr	r3, [pc, #332]	; (8007b14 <Send_Service_Signal_Message+0x27c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	089b      	lsrs	r3, r3, #2
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d035      	beq.n	8007a3e <Send_Service_Signal_Message+0x1a6>
 80079d2:	4b50      	ldr	r3, [pc, #320]	; (8007b14 <Send_Service_Signal_Message+0x27c>)
 80079d4:	791b      	ldrb	r3, [r3, #4]
 80079d6:	79fa      	ldrb	r2, [r7, #7]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d130      	bne.n	8007a3e <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 80079e2:	484d      	ldr	r0, [pc, #308]	; (8007b18 <Send_Service_Signal_Message+0x280>)
 80079e4:	f016 fa00 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 80079e8:	4602      	mov	r2, r0
 80079ea:	4b4c      	ldr	r3, [pc, #304]	; (8007b1c <Send_Service_Signal_Message+0x284>)
 80079ec:	fba3 1302 	umull	r1, r3, r3, r2
 80079f0:	099b      	lsrs	r3, r3, #6
 80079f2:	21c8      	movs	r1, #200	; 0xc8
 80079f4:	fb01 f303 	mul.w	r3, r1, r3
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 80079fe:	4848      	ldr	r0, [pc, #288]	; (8007b20 <Send_Service_Signal_Message+0x288>)
 8007a00:	f01e fde6 	bl	80265d0 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	4a47      	ldr	r2, [pc, #284]	; (8007b24 <Send_Service_Signal_Message+0x28c>)
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	4619      	mov	r1, r3
 8007a12:	4845      	ldr	r0, [pc, #276]	; (8007b28 <Send_Service_Signal_Message+0x290>)
 8007a14:	f01e fd40 	bl	8026498 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007a18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4843      	ldr	r0, [pc, #268]	; (8007b2c <Send_Service_Signal_Message+0x294>)
 8007a20:	f01e fd3a 	bl	8026498 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8007a24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a28:	f107 020c 	add.w	r2, r7, #12
 8007a2c:	441a      	add	r2, r3
 8007a2e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a32:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007a36:	2108      	movs	r1, #8
 8007a38:	f7f8 fe78 	bl	800072c <InsertBits>
	{
 8007a3c:	e00f      	b.n	8007a5e <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8007a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a42:	f107 020c 	add.w	r2, r7, #12
 8007a46:	441a      	add	r2, r3
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	4936      	ldr	r1, [pc, #216]	; (8007b24 <Send_Service_Signal_Message+0x28c>)
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	440b      	add	r3, r1
 8007a50:	3301      	adds	r3, #1
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007a58:	2108      	movs	r1, #8
 8007a5a:	f7f8 fe67 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8007a5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007a62:	3308      	adds	r3, #8
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	da00      	bge.n	8007a6a <Send_Service_Signal_Message+0x1d2>
 8007a68:	3307      	adds	r3, #7
 8007a6a:	10db      	asrs	r3, r3, #3
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a72:	4413      	add	r3, r2
 8007a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	b21b      	sxth	r3, r3
 8007a82:	425a      	negs	r2, r3
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	f002 0207 	and.w	r2, r2, #7
 8007a8c:	bf58      	it	pl
 8007a8e:	4253      	negpl	r3, r2
 8007a90:	b21b      	sxth	r3, r3
 8007a92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007a96:	4b1f      	ldr	r3, [pc, #124]	; (8007b14 <Send_Service_Signal_Message+0x27c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	08db      	lsrs	r3, r3, #3
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d04b      	beq.n	8007b3c <Send_Service_Signal_Message+0x2a4>
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <Send_Service_Signal_Message+0x27c>)
 8007aa6:	791b      	ldrb	r3, [r3, #4]
 8007aa8:	79fa      	ldrb	r2, [r7, #7]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d146      	bne.n	8007b3c <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007ab4:	4818      	ldr	r0, [pc, #96]	; (8007b18 <Send_Service_Signal_Message+0x280>)
 8007ab6:	f016 f997 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8007aba:	4602      	mov	r2, r0
 8007abc:	4b17      	ldr	r3, [pc, #92]	; (8007b1c <Send_Service_Signal_Message+0x284>)
 8007abe:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac2:	099b      	lsrs	r3, r3, #6
 8007ac4:	21c8      	movs	r1, #200	; 0xc8
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007ad0:	4817      	ldr	r0, [pc, #92]	; (8007b30 <Send_Service_Signal_Message+0x298>)
 8007ad2:	f01e fd7d 	bl	80265d0 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	4a12      	ldr	r2, [pc, #72]	; (8007b24 <Send_Service_Signal_Message+0x28c>)
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	4413      	add	r3, r2
 8007ade:	3302      	adds	r3, #2
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4813      	ldr	r0, [pc, #76]	; (8007b34 <Send_Service_Signal_Message+0x29c>)
 8007ae6:	f01e fcd7 	bl	8026498 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8007aea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007aee:	4619      	mov	r1, r3
 8007af0:	4811      	ldr	r0, [pc, #68]	; (8007b38 <Send_Service_Signal_Message+0x2a0>)
 8007af2:	f01e fcd1 	bl	8026498 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8007af6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007afa:	f107 020c 	add.w	r2, r7, #12
 8007afe:	441a      	add	r2, r3
 8007b00:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007b08:	2108      	movs	r1, #8
 8007b0a:	f7f8 fe0f 	bl	800072c <InsertBits>
	{
 8007b0e:	e033      	b.n	8007b78 <Send_Service_Signal_Message+0x2e0>
 8007b10:	20000504 	.word	0x20000504
 8007b14:	2000308c 	.word	0x2000308c
 8007b18:	2000bc44 	.word	0x2000bc44
 8007b1c:	51eb851f 	.word	0x51eb851f
 8007b20:	08028340 	.word	0x08028340
 8007b24:	200028f4 	.word	0x200028f4
 8007b28:	08028958 	.word	0x08028958
 8007b2c:	08028978 	.word	0x08028978
 8007b30:	080283a4 	.word	0x080283a4
 8007b34:	08028998 	.word	0x08028998
 8007b38:	080289b8 	.word	0x080289b8
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007b3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b40:	f107 020c 	add.w	r2, r7, #12
 8007b44:	18d1      	adds	r1, r2, r3
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	484e      	ldr	r0, [pc, #312]	; (8007c84 <Send_Service_Signal_Message+0x3ec>)
 8007b4a:	011a      	lsls	r2, r3, #4
 8007b4c:	4402      	add	r2, r0
 8007b4e:	3202      	adds	r2, #2
 8007b50:	7812      	ldrb	r2, [r2, #0]
 8007b52:	3201      	adds	r2, #1
 8007b54:	b2d4      	uxtb	r4, r2
 8007b56:	484b      	ldr	r0, [pc, #300]	; (8007c84 <Send_Service_Signal_Message+0x3ec>)
 8007b58:	011a      	lsls	r2, r3, #4
 8007b5a:	4402      	add	r2, r0
 8007b5c:	3202      	adds	r2, #2
 8007b5e:	4620      	mov	r0, r4
 8007b60:	7010      	strb	r0, [r2, #0]
 8007b62:	4a48      	ldr	r2, [pc, #288]	; (8007c84 <Send_Service_Signal_Message+0x3ec>)
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	4413      	add	r3, r2
 8007b68:	3302      	adds	r3, #2
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007b70:	460a      	mov	r2, r1
 8007b72:	2108      	movs	r1, #8
 8007b74:	f7f8 fdda 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007b78:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da00      	bge.n	8007b84 <Send_Service_Signal_Message+0x2ec>
 8007b82:	3307      	adds	r3, #7
 8007b84:	10db      	asrs	r3, r3, #3
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007b92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b96:	3308      	adds	r3, #8
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	b21b      	sxth	r3, r3
 8007b9c:	425a      	negs	r2, r3
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	f002 0207 	and.w	r2, r2, #7
 8007ba6:	bf58      	it	pl
 8007ba8:	4253      	negpl	r3, r2
 8007baa:	b21b      	sxth	r3, r3
 8007bac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007bb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bb4:	f107 020c 	add.w	r2, r7, #12
 8007bb8:	441a      	add	r2, r3
 8007bba:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007bbe:	2306      	movs	r3, #6
 8007bc0:	2108      	movs	r1, #8
 8007bc2:	f7f8 fdb3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007bc6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007bca:	3308      	adds	r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	da00      	bge.n	8007bd2 <Send_Service_Signal_Message+0x33a>
 8007bd0:	3307      	adds	r3, #7
 8007bd2:	10db      	asrs	r3, r3, #3
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bda:	4413      	add	r3, r2
 8007bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007be0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007be4:	3308      	adds	r3, #8
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	b21b      	sxth	r3, r3
 8007bea:	425a      	negs	r2, r3
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	f002 0207 	and.w	r2, r2, #7
 8007bf4:	bf58      	it	pl
 8007bf6:	4253      	negpl	r3, r2
 8007bf8:	b21b      	sxth	r3, r3
 8007bfa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	4a21      	ldr	r2, [pc, #132]	; (8007c88 <Send_Service_Signal_Message+0x3f0>)
 8007c02:	5cd3      	ldrb	r3, [r2, r3]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d147      	bne.n	8007c98 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 8007c08:	f004 fd6a 	bl	800c6e0 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007c0c:	79fa      	ldrb	r2, [r7, #7]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <Send_Service_Signal_Message+0x3f4>)
 8007c18:	4413      	add	r3, r2
 8007c1a:	4a1d      	ldr	r2, [pc, #116]	; (8007c90 <Send_Service_Signal_Message+0x3f8>)
 8007c1c:	6811      	ldr	r1, [r2, #0]
 8007c1e:	6019      	str	r1, [r3, #0]
 8007c20:	8892      	ldrh	r2, [r2, #4]
 8007c22:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8007c24:	481b      	ldr	r0, [pc, #108]	; (8007c94 <Send_Service_Signal_Message+0x3fc>)
 8007c26:	f01e fcd3 	bl	80265d0 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	4a16      	ldr	r2, [pc, #88]	; (8007c88 <Send_Service_Signal_Message+0x3f0>)
 8007c2e:	2100      	movs	r1, #0
 8007c30:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 8007c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c36:	f107 020c 	add.w	r2, r7, #12
 8007c3a:	441a      	add	r2, r3
 8007c3c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007c40:	2369      	movs	r3, #105	; 0x69
 8007c42:	2110      	movs	r1, #16
 8007c44:	f7f8 fd72 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007c48:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007c4c:	3310      	adds	r3, #16
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	da00      	bge.n	8007c54 <Send_Service_Signal_Message+0x3bc>
 8007c52:	3307      	adds	r3, #7
 8007c54:	10db      	asrs	r3, r3, #3
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c62:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c66:	3310      	adds	r3, #16
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	b21b      	sxth	r3, r3
 8007c6c:	425a      	negs	r2, r3
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	f002 0207 	and.w	r2, r2, #7
 8007c76:	bf58      	it	pl
 8007c78:	4253      	negpl	r3, r2
 8007c7a:	b21b      	sxth	r3, r3
 8007c7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c80:	e031      	b.n	8007ce6 <Send_Service_Signal_Message+0x44e>
 8007c82:	bf00      	nop
 8007c84:	200028f4 	.word	0x200028f4
 8007c88:	20002764 	.word	0x20002764
 8007c8c:	200028b8 	.word	0x200028b8
 8007c90:	20003f40 	.word	0x20003f40
 8007c94:	080286fc 	.word	0x080286fc
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007c98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c9c:	f107 020c 	add.w	r2, r7, #12
 8007ca0:	441a      	add	r2, r3
 8007ca2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007ca6:	2329      	movs	r3, #41	; 0x29
 8007ca8:	2110      	movs	r1, #16
 8007caa:	f7f8 fd3f 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007cae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	da00      	bge.n	8007cba <Send_Service_Signal_Message+0x422>
 8007cb8:	3307      	adds	r3, #7
 8007cba:	10db      	asrs	r3, r3, #3
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007cc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ccc:	3310      	adds	r3, #16
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	b21b      	sxth	r3, r3
 8007cd2:	425a      	negs	r2, r3
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	f002 0207 	and.w	r2, r2, #7
 8007cdc:	bf58      	it	pl
 8007cde:	4253      	negpl	r3, r2
 8007ce0:	b21b      	sxth	r3, r3
 8007ce2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8007ce6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cea:	f107 020c 	add.w	r2, r7, #12
 8007cee:	18d1      	adds	r1, r2, r3
 8007cf0:	79fa      	ldrb	r2, [r7, #7]
 8007cf2:	48b5      	ldr	r0, [pc, #724]	; (8007fc8 <Send_Service_Signal_Message+0x730>)
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	4413      	add	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4403      	add	r3, r0
 8007cfe:	3305      	adds	r3, #5
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d06:	460a      	mov	r2, r1
 8007d08:	2108      	movs	r1, #8
 8007d0a:	f7f8 fd0f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007d0e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007d12:	3308      	adds	r3, #8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	da00      	bge.n	8007d1a <Send_Service_Signal_Message+0x482>
 8007d18:	3307      	adds	r3, #7
 8007d1a:	10db      	asrs	r3, r3, #3
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d22:	4413      	add	r3, r2
 8007d24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d28:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	b21b      	sxth	r3, r3
 8007d32:	425a      	negs	r2, r3
 8007d34:	f003 0307 	and.w	r3, r3, #7
 8007d38:	f002 0207 	and.w	r2, r2, #7
 8007d3c:	bf58      	it	pl
 8007d3e:	4253      	negpl	r3, r2
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8007d46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d4a:	f107 020c 	add.w	r2, r7, #12
 8007d4e:	18d1      	adds	r1, r2, r3
 8007d50:	79fa      	ldrb	r2, [r7, #7]
 8007d52:	489d      	ldr	r0, [pc, #628]	; (8007fc8 <Send_Service_Signal_Message+0x730>)
 8007d54:	4613      	mov	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	4413      	add	r3, r2
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	4403      	add	r3, r0
 8007d5e:	3304      	adds	r3, #4
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d66:	460a      	mov	r2, r1
 8007d68:	2108      	movs	r1, #8
 8007d6a:	f7f8 fcdf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007d6e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007d72:	3308      	adds	r3, #8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da00      	bge.n	8007d7a <Send_Service_Signal_Message+0x4e2>
 8007d78:	3307      	adds	r3, #7
 8007d7a:	10db      	asrs	r3, r3, #3
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d82:	4413      	add	r3, r2
 8007d84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	b21b      	sxth	r3, r3
 8007d92:	425a      	negs	r2, r3
 8007d94:	f003 0307 	and.w	r3, r3, #7
 8007d98:	f002 0207 	and.w	r2, r2, #7
 8007d9c:	bf58      	it	pl
 8007d9e:	4253      	negpl	r3, r2
 8007da0:	b21b      	sxth	r3, r3
 8007da2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8007da6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007daa:	f107 020c 	add.w	r2, r7, #12
 8007dae:	18d1      	adds	r1, r2, r3
 8007db0:	79fa      	ldrb	r2, [r7, #7]
 8007db2:	4885      	ldr	r0, [pc, #532]	; (8007fc8 <Send_Service_Signal_Message+0x730>)
 8007db4:	4613      	mov	r3, r2
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	4413      	add	r3, r2
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	4403      	add	r3, r0
 8007dbe:	3303      	adds	r3, #3
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007dc6:	460a      	mov	r2, r1
 8007dc8:	2108      	movs	r1, #8
 8007dca:	f7f8 fcaf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007dce:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da00      	bge.n	8007dda <Send_Service_Signal_Message+0x542>
 8007dd8:	3307      	adds	r3, #7
 8007dda:	10db      	asrs	r3, r3, #3
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007de2:	4413      	add	r3, r2
 8007de4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007de8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007dec:	3308      	adds	r3, #8
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	b21b      	sxth	r3, r3
 8007df2:	425a      	negs	r2, r3
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	f002 0207 	and.w	r2, r2, #7
 8007dfc:	bf58      	it	pl
 8007dfe:	4253      	negpl	r3, r2
 8007e00:	b21b      	sxth	r3, r3
 8007e02:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8007e06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e0a:	f107 020c 	add.w	r2, r7, #12
 8007e0e:	18d1      	adds	r1, r2, r3
 8007e10:	79fa      	ldrb	r2, [r7, #7]
 8007e12:	486d      	ldr	r0, [pc, #436]	; (8007fc8 <Send_Service_Signal_Message+0x730>)
 8007e14:	4613      	mov	r3, r2
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	4413      	add	r3, r2
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	4403      	add	r3, r0
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007e24:	460a      	mov	r2, r1
 8007e26:	2108      	movs	r1, #8
 8007e28:	f7f8 fc80 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007e2c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007e30:	3308      	adds	r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	da00      	bge.n	8007e38 <Send_Service_Signal_Message+0x5a0>
 8007e36:	3307      	adds	r3, #7
 8007e38:	10db      	asrs	r3, r3, #3
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e40:	4413      	add	r3, r2
 8007e42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	b21b      	sxth	r3, r3
 8007e50:	425a      	negs	r2, r3
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	f002 0207 	and.w	r2, r2, #7
 8007e5a:	bf58      	it	pl
 8007e5c:	4253      	negpl	r3, r2
 8007e5e:	b21b      	sxth	r3, r3
 8007e60:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8007e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e68:	f107 020c 	add.w	r2, r7, #12
 8007e6c:	18d1      	adds	r1, r2, r3
 8007e6e:	79fa      	ldrb	r2, [r7, #7]
 8007e70:	4855      	ldr	r0, [pc, #340]	; (8007fc8 <Send_Service_Signal_Message+0x730>)
 8007e72:	4613      	mov	r3, r2
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	4413      	add	r3, r2
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	4403      	add	r3, r0
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007e84:	460a      	mov	r2, r1
 8007e86:	2108      	movs	r1, #8
 8007e88:	f7f8 fc50 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007e8c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007e90:	3308      	adds	r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	da00      	bge.n	8007e98 <Send_Service_Signal_Message+0x600>
 8007e96:	3307      	adds	r3, #7
 8007e98:	10db      	asrs	r3, r3, #3
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007ea6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007eaa:	3308      	adds	r3, #8
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	b21b      	sxth	r3, r3
 8007eb0:	425a      	negs	r2, r3
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	f002 0207 	and.w	r2, r2, #7
 8007eba:	bf58      	it	pl
 8007ebc:	4253      	negpl	r3, r2
 8007ebe:	b21b      	sxth	r3, r3
 8007ec0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007ec4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ec8:	f107 020c 	add.w	r2, r7, #12
 8007ecc:	18d1      	adds	r1, r2, r3
 8007ece:	79fa      	ldrb	r2, [r7, #7]
 8007ed0:	483d      	ldr	r0, [pc, #244]	; (8007fc8 <Send_Service_Signal_Message+0x730>)
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	4403      	add	r3, r0
 8007edc:	3302      	adds	r3, #2
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007ee4:	460a      	mov	r2, r1
 8007ee6:	2108      	movs	r1, #8
 8007ee8:	f7f8 fc20 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007eec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	da00      	bge.n	8007ef8 <Send_Service_Signal_Message+0x660>
 8007ef6:	3307      	adds	r3, #7
 8007ef8:	10db      	asrs	r3, r3, #3
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f00:	4413      	add	r3, r2
 8007f02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	b21b      	sxth	r3, r3
 8007f10:	425a      	negs	r2, r3
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	f002 0207 	and.w	r2, r2, #7
 8007f1a:	bf58      	it	pl
 8007f1c:	4253      	negpl	r3, r2
 8007f1e:	b21b      	sxth	r3, r3
 8007f20:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 8007f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f28:	f107 020c 	add.w	r2, r7, #12
 8007f2c:	18d4      	adds	r4, r2, r3
 8007f2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007f32:	f107 030c 	add.w	r3, r7, #12
 8007f36:	4611      	mov	r1, r2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f00d fd75 	bl	8015a28 <CalculateDirectReverseCrc>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007f44:	4622      	mov	r2, r4
 8007f46:	2120      	movs	r1, #32
 8007f48:	f7f8 fbf0 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007f4c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f50:	3320      	adds	r3, #32
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	da00      	bge.n	8007f58 <Send_Service_Signal_Message+0x6c0>
 8007f56:	3307      	adds	r3, #7
 8007f58:	10db      	asrs	r3, r3, #3
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f60:	4413      	add	r3, r2
 8007f62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f66:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f6a:	3320      	adds	r3, #32
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	b21b      	sxth	r3, r3
 8007f70:	425a      	negs	r2, r3
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	f002 0207 	and.w	r2, r2, #7
 8007f7a:	bf58      	it	pl
 8007f7c:	4253      	negpl	r3, r2
 8007f7e:	b21b      	sxth	r3, r3
 8007f80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007f84:	4b11      	ldr	r3, [pc, #68]	; (8007fcc <Send_Service_Signal_Message+0x734>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	0a5b      	lsrs	r3, r3, #9
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00b      	beq.n	8007faa <Send_Service_Signal_Message+0x712>
 8007f92:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <Send_Service_Signal_Message+0x734>)
 8007f94:	791b      	ldrb	r3, [r3, #4]
 8007f96:	79fa      	ldrb	r2, [r7, #7]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d106      	bne.n	8007faa <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007f9c:	480c      	ldr	r0, [pc, #48]	; (8007fd0 <Send_Service_Signal_Message+0x738>)
 8007f9e:	f01e fb17 	bl	80265d0 <puts>
		printf("Not Sending Reply");
 8007fa2:	480c      	ldr	r0, [pc, #48]	; (8007fd4 <Send_Service_Signal_Message+0x73c>)
 8007fa4:	f01e fa78 	bl	8026498 <iprintf>
 8007fa8:	e009      	b.n	8007fbe <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007faa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007fae:	b2d9      	uxtb	r1, r3
 8007fb0:	79fa      	ldrb	r2, [r7, #7]
 8007fb2:	f107 030c 	add.w	r3, r7, #12
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 f80e 	bl	8007fd8 <Process_Sending_Reply>
	}
}
 8007fbc:	bf00      	nop
 8007fbe:	bf00      	nop
 8007fc0:	3754      	adds	r7, #84	; 0x54
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd90      	pop	{r4, r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200028b8 	.word	0x200028b8
 8007fcc:	2000308c 	.word	0x2000308c
 8007fd0:	08028470 	.word	0x08028470
 8007fd4:	08028488 	.word	0x08028488

08007fd8 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b09c      	sub	sp, #112	; 0x70
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
 8007fec:	f107 030c 	add.w	r3, r7, #12
 8007ff0:	2260      	movs	r2, #96	; 0x60
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f01e f967 	bl	80262c8 <memset>
	uint8_t uc_index = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 8008006:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8008010:	4619      	mov	r1, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	781a      	ldrb	r2, [r3, #0]
 8008016:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800801a:	443b      	add	r3, r7
 800801c:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8008020:	2301      	movs	r3, #1
 8008022:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8008026:	e03c      	b.n	80080a2 <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 8008028:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	4413      	add	r3, r2
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2bef      	cmp	r3, #239	; 0xef
 8008034:	d922      	bls.n	800807c <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 8008036:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4413      	add	r3, r2
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008044:	1c59      	adds	r1, r3, #1
 8008046:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800804a:	f022 020f 	bic.w	r2, r2, #15
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	3370      	adds	r3, #112	; 0x70
 8008052:	443b      	add	r3, r7
 8008054:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 8008058:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	4413      	add	r3, r2
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800806c:	f002 020f 	and.w	r2, r2, #15
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	3370      	adds	r3, #112	; 0x70
 8008074:	443b      	add	r3, r7
 8008076:	f803 2c68 	strb.w	r2, [r3, #-104]
 800807a:	e00d      	b.n	8008098 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 800807c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	441a      	add	r2, r3
 8008084:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008088:	1c59      	adds	r1, r3, #1
 800808a:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800808e:	7812      	ldrb	r2, [r2, #0]
 8008090:	3370      	adds	r3, #112	; 0x70
 8008092:	443b      	add	r3, r7
 8008094:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8008098:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800809c:	3301      	adds	r3, #1
 800809e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80080a2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d3bd      	bcc.n	8008028 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 80080ac:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80080b6:	3370      	adds	r3, #112	; 0x70
 80080b8:	443b      	add	r3, r7
 80080ba:	22f6      	movs	r2, #246	; 0xf6
 80080bc:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 80080c0:	78bb      	ldrb	r3, [r7, #2]
 80080c2:	4a37      	ldr	r2, [pc, #220]	; (80081a0 <Process_Sending_Reply+0x1c8>)
 80080c4:	5cd3      	ldrb	r3, [r2, r3]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d10b      	bne.n	80080e2 <Process_Sending_Reply+0x10a>
 80080ca:	4b36      	ldr	r3, [pc, #216]	; (80081a4 <Process_Sending_Reply+0x1cc>)
 80080cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d106      	bne.n	80080e2 <Process_Sending_Reply+0x10a>
 80080d4:	4b34      	ldr	r3, [pc, #208]	; (80081a8 <Process_Sending_Reply+0x1d0>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d102      	bne.n	80080e2 <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80080dc:	4833      	ldr	r0, [pc, #204]	; (80081ac <Process_Sending_Reply+0x1d4>)
 80080de:	f000 ff65 	bl	8008fac <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 80080e2:	78bb      	ldrb	r3, [r7, #2]
 80080e4:	4a32      	ldr	r2, [pc, #200]	; (80081b0 <Process_Sending_Reply+0x1d8>)
 80080e6:	4413      	add	r3, r2
 80080e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d10d      	bne.n	800810c <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 80080f0:	78bb      	ldrb	r3, [r7, #2]
 80080f2:	4a30      	ldr	r2, [pc, #192]	; (80081b4 <Process_Sending_Reply+0x1dc>)
 80080f4:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80080f8:	f107 0008 	add.w	r0, r7, #8
 80080fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008100:	f008 faaa 	bl	8010658 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = RESET;
 8008104:	78bb      	ldrb	r3, [r7, #2]
 8008106:	4a26      	ldr	r2, [pc, #152]	; (80081a0 <Process_Sending_Reply+0x1c8>)
 8008108:	2100      	movs	r1, #0
 800810a:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800810c:	78bb      	ldrb	r3, [r7, #2]
 800810e:	4a28      	ldr	r2, [pc, #160]	; (80081b0 <Process_Sending_Reply+0x1d8>)
 8008110:	4413      	add	r3, r2
 8008112:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008116:	2b02      	cmp	r3, #2
 8008118:	d119      	bne.n	800814e <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 800811a:	2300      	movs	r3, #0
 800811c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8008120:	e00e      	b.n	8008140 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 8008122:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008126:	3370      	adds	r3, #112	; 0x70
 8008128:	443b      	add	r3, r7
 800812a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800812e:	4619      	mov	r1, r3
 8008130:	2003      	movs	r0, #3
 8008132:	f010 ff4f 	bl	8018fd4 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 8008136:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800813a:	3301      	adds	r3, #1
 800813c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8008140:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008144:	b29b      	uxth	r3, r3
 8008146:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800814a:	429a      	cmp	r2, r3
 800814c:	d3e9      	bcc.n	8008122 <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 800814e:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <Process_Sending_Reply+0x1d0>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d102      	bne.n	800815c <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8008156:	4815      	ldr	r0, [pc, #84]	; (80081ac <Process_Sending_Reply+0x1d4>)
 8008158:	f000 ff28 	bl	8008fac <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 800815c:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <Process_Sending_Reply+0x1cc>)
 800815e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 8008166:	4b0f      	ldr	r3, [pc, #60]	; (80081a4 <Process_Sending_Reply+0x1cc>)
 8008168:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800816c:	461a      	mov	r2, r3
 800816e:	2101      	movs	r1, #1
 8008170:	480c      	ldr	r0, [pc, #48]	; (80081a4 <Process_Sending_Reply+0x1cc>)
 8008172:	f000 fd75 	bl	8008c60 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 8008176:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <Process_Sending_Reply+0x1cc>)
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	461a      	mov	r2, r3
 8008182:	2100      	movs	r1, #0
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fd6b 	bl	8008c60 <Print_EI_DATA>

	if(Debug_flag == 1)
 800818a:	4b07      	ldr	r3, [pc, #28]	; (80081a8 <Process_Sending_Reply+0x1d0>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d102      	bne.n	8008198 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 8008192:	4809      	ldr	r0, [pc, #36]	; (80081b8 <Process_Sending_Reply+0x1e0>)
 8008194:	f000 ff0a 	bl	8008fac <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8008198:	bf00      	nop
 800819a:	3770      	adds	r7, #112	; 0x70
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20002758 	.word	0x20002758
 80081a4:	20003340 	.word	0x20003340
 80081a8:	20000bbb 	.word	0x20000bbb
 80081ac:	080289fc 	.word	0x080289fc
 80081b0:	20000504 	.word	0x20000504
 80081b4:	200026e4 	.word	0x200026e4
 80081b8:	08028a5c 	.word	0x08028a5c

080081bc <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 80081c6:	f011 f95d 	bl	8019484 <HAL_GetTick>
 80081ca:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80081cc:	79fb      	ldrb	r3, [r7, #7]
 80081ce:	4a7c      	ldr	r2, [pc, #496]	; (80083c0 <Check_Primary_r_Secondary+0x204>)
 80081d0:	4413      	add	r3, r2
 80081d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	f000 80ee 	beq.w	80083b8 <Check_Primary_r_Secondary+0x1fc>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80081dc:	79fa      	ldrb	r2, [r7, #7]
 80081de:	4979      	ldr	r1, [pc, #484]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 80081e0:	4613      	mov	r3, r2
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	4413      	add	r3, r2
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	440b      	add	r3, r1
 80081ea:	3303      	adds	r3, #3
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d12b      	bne.n	800824a <Check_Primary_r_Secondary+0x8e>
 80081f2:	79fa      	ldrb	r2, [r7, #7]
 80081f4:	4974      	ldr	r1, [pc, #464]	; (80083c8 <Check_Primary_r_Secondary+0x20c>)
 80081f6:	4613      	mov	r3, r2
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	4413      	add	r3, r2
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	440b      	add	r3, r1
 8008200:	3303      	adds	r3, #3
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d120      	bne.n	800824a <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008208:	79fa      	ldrb	r2, [r7, #7]
 800820a:	496e      	ldr	r1, [pc, #440]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 800820c:	4613      	mov	r3, r2
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	4413      	add	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	440b      	add	r3, r1
 8008216:	3304      	adds	r3, #4
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 80cd 	beq.w	80083ba <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	4a67      	ldr	r2, [pc, #412]	; (80083c0 <Check_Primary_r_Secondary+0x204>)
 8008224:	3366      	adds	r3, #102	; 0x66
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	4619      	mov	r1, r3
 800822e:	4867      	ldr	r0, [pc, #412]	; (80083cc <Check_Primary_r_Secondary+0x210>)
 8008230:	f01e f932 	bl	8026498 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8008234:	79fa      	ldrb	r2, [r7, #7]
 8008236:	4963      	ldr	r1, [pc, #396]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 8008238:	4613      	mov	r3, r2
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	4413      	add	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	440b      	add	r3, r1
 8008242:	3304      	adds	r3, #4
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008248:	e0b7      	b.n	80083ba <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 800824a:	79fa      	ldrb	r2, [r7, #7]
 800824c:	495d      	ldr	r1, [pc, #372]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 800824e:	4613      	mov	r3, r2
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4413      	add	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	440b      	add	r3, r1
 8008258:	3303      	adds	r3, #3
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d12b      	bne.n	80082b8 <Check_Primary_r_Secondary+0xfc>
 8008260:	79fa      	ldrb	r2, [r7, #7]
 8008262:	4959      	ldr	r1, [pc, #356]	; (80083c8 <Check_Primary_r_Secondary+0x20c>)
 8008264:	4613      	mov	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4413      	add	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	440b      	add	r3, r1
 800826e:	3303      	adds	r3, #3
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d120      	bne.n	80082b8 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008276:	79fa      	ldrb	r2, [r7, #7]
 8008278:	4952      	ldr	r1, [pc, #328]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 800827a:	4613      	mov	r3, r2
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4413      	add	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	440b      	add	r3, r1
 8008284:	3304      	adds	r3, #4
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 8096 	beq.w	80083ba <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	4a4b      	ldr	r2, [pc, #300]	; (80083c0 <Check_Primary_r_Secondary+0x204>)
 8008292:	3366      	adds	r3, #102	; 0x66
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	4619      	mov	r1, r3
 800829c:	484c      	ldr	r0, [pc, #304]	; (80083d0 <Check_Primary_r_Secondary+0x214>)
 800829e:	f01e f8fb 	bl	8026498 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80082a2:	79fa      	ldrb	r2, [r7, #7]
 80082a4:	4947      	ldr	r1, [pc, #284]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 80082a6:	4613      	mov	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4413      	add	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	440b      	add	r3, r1
 80082b0:	3304      	adds	r3, #4
 80082b2:	2200      	movs	r2, #0
 80082b4:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80082b6:	e080      	b.n	80083ba <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80082b8:	79fa      	ldrb	r2, [r7, #7]
 80082ba:	4942      	ldr	r1, [pc, #264]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 80082bc:	4613      	mov	r3, r2
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	4413      	add	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	440b      	add	r3, r1
 80082c6:	3303      	adds	r3, #3
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d13e      	bne.n	800834c <Check_Primary_r_Secondary+0x190>
 80082ce:	79fa      	ldrb	r2, [r7, #7]
 80082d0:	493d      	ldr	r1, [pc, #244]	; (80083c8 <Check_Primary_r_Secondary+0x20c>)
 80082d2:	4613      	mov	r3, r2
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	4413      	add	r3, r2
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	440b      	add	r3, r1
 80082dc:	3303      	adds	r3, #3
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d133      	bne.n	800834c <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80082e4:	79fa      	ldrb	r2, [r7, #7]
 80082e6:	4937      	ldr	r1, [pc, #220]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 80082e8:	4613      	mov	r3, r2
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	4413      	add	r3, r2
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	440b      	add	r3, r1
 80082f2:	3304      	adds	r3, #4
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d05f      	beq.n	80083ba <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	4a30      	ldr	r2, [pc, #192]	; (80083c0 <Check_Primary_r_Secondary+0x204>)
 80082fe:	3366      	adds	r3, #102	; 0x66
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	4619      	mov	r1, r3
 8008308:	4832      	ldr	r0, [pc, #200]	; (80083d4 <Check_Primary_r_Secondary+0x218>)
 800830a:	f01e f8c5 	bl	8026498 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	4931      	ldr	r1, [pc, #196]	; (80083d8 <Check_Primary_r_Secondary+0x21c>)
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	4930      	ldr	r1, [pc, #192]	; (80083dc <Check_Primary_r_Secondary+0x220>)
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8008322:	79fa      	ldrb	r2, [r7, #7]
 8008324:	4927      	ldr	r1, [pc, #156]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 8008326:	4613      	mov	r3, r2
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	4413      	add	r3, r2
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	440b      	add	r3, r1
 8008330:	3310      	adds	r3, #16
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 8008336:	79fa      	ldrb	r2, [r7, #7]
 8008338:	4922      	ldr	r1, [pc, #136]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 800833a:	4613      	mov	r3, r2
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	4413      	add	r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	440b      	add	r3, r1
 8008344:	3304      	adds	r3, #4
 8008346:	2201      	movs	r2, #1
 8008348:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 800834a:	e036      	b.n	80083ba <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 800834c:	79fa      	ldrb	r2, [r7, #7]
 800834e:	491d      	ldr	r1, [pc, #116]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 8008350:	4613      	mov	r3, r2
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	4413      	add	r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	440b      	add	r3, r1
 800835a:	3303      	adds	r3, #3
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d12b      	bne.n	80083ba <Check_Primary_r_Secondary+0x1fe>
 8008362:	79fa      	ldrb	r2, [r7, #7]
 8008364:	4918      	ldr	r1, [pc, #96]	; (80083c8 <Check_Primary_r_Secondary+0x20c>)
 8008366:	4613      	mov	r3, r2
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	4413      	add	r3, r2
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	440b      	add	r3, r1
 8008370:	3303      	adds	r3, #3
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d120      	bne.n	80083ba <Check_Primary_r_Secondary+0x1fe>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
			}
#endif

#ifdef EI_2
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008378:	79fa      	ldrb	r2, [r7, #7]
 800837a:	4912      	ldr	r1, [pc, #72]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 800837c:	4613      	mov	r3, r2
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	4413      	add	r3, r2
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	440b      	add	r3, r1
 8008386:	3304      	adds	r3, #4
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d015      	beq.n	80083ba <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards Receiving data,EiPC_2 Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	4a0b      	ldr	r2, [pc, #44]	; (80083c0 <Check_Primary_r_Secondary+0x204>)
 8008392:	3366      	adds	r3, #102	; 0x66
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	4619      	mov	r1, r3
 800839c:	4810      	ldr	r0, [pc, #64]	; (80083e0 <Check_Primary_r_Secondary+0x224>)
 800839e:	f01e f87b 	bl	8026498 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80083a2:	79fa      	ldrb	r2, [r7, #7]
 80083a4:	4907      	ldr	r1, [pc, #28]	; (80083c4 <Check_Primary_r_Secondary+0x208>)
 80083a6:	4613      	mov	r3, r2
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	4413      	add	r3, r2
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	440b      	add	r3, r1
 80083b0:	3304      	adds	r3, #4
 80083b2:	2200      	movs	r2, #0
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	e000      	b.n	80083ba <Check_Primary_r_Secondary+0x1fe>
		return;
 80083b8:	bf00      	nop
			}
#endif

		}
	}
}
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20000504 	.word	0x20000504
 80083c4:	20002da4 	.word	0x20002da4
 80083c8:	20002e94 	.word	0x20002e94
 80083cc:	08028c14 	.word	0x08028c14
 80083d0:	08028c50 	.word	0x08028c50
 80083d4:	08028c8c 	.word	0x08028c8c
 80083d8:	20002630 	.word	0x20002630
 80083dc:	20002658 	.word	0x20002658
 80083e0:	08028cc4 	.word	0x08028cc4

080083e4 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	4aac      	ldr	r2, [pc, #688]	; (80086a4 <Check_Vital_CRC+0x2c0>)
 80083f2:	4413      	add	r3, r2
 80083f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	f000 814f 	beq.w	800869c <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 80083fe:	79fa      	ldrb	r2, [r7, #7]
 8008400:	49a9      	ldr	r1, [pc, #676]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 8008402:	4613      	mov	r3, r2
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	4413      	add	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	440b      	add	r3, r1
 800840c:	3308      	adds	r3, #8
 800840e:	6819      	ldr	r1, [r3, #0]
 8008410:	79fa      	ldrb	r2, [r7, #7]
 8008412:	48a6      	ldr	r0, [pc, #664]	; (80086ac <Check_Vital_CRC+0x2c8>)
 8008414:	4613      	mov	r3, r2
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	4413      	add	r3, r2
 800841a:	00db      	lsls	r3, r3, #3
 800841c:	4403      	add	r3, r0
 800841e:	3308      	adds	r3, #8
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4299      	cmp	r1, r3
 8008424:	f000 8092 	beq.w	800854c <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8008428:	79fa      	ldrb	r2, [r7, #7]
 800842a:	49a0      	ldr	r1, [pc, #640]	; (80086ac <Check_Vital_CRC+0x2c8>)
 800842c:	4613      	mov	r3, r2
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	4413      	add	r3, r2
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	440b      	add	r3, r1
 8008436:	3308      	adds	r3, #8
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 8086 	beq.w	800854c <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8008440:	79fa      	ldrb	r2, [r7, #7]
 8008442:	4999      	ldr	r1, [pc, #612]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 8008444:	4613      	mov	r3, r2
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	4413      	add	r3, r2
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	440b      	add	r3, r1
 800844e:	3304      	adds	r3, #4
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d104      	bne.n	8008460 <Check_Vital_CRC+0x7c>
 8008456:	79fb      	ldrb	r3, [r7, #7]
 8008458:	4a95      	ldr	r2, [pc, #596]	; (80086b0 <Check_Vital_CRC+0x2cc>)
 800845a:	5cd3      	ldrb	r3, [r2, r3]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d175      	bne.n	800854c <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8008460:	79fa      	ldrb	r2, [r7, #7]
 8008462:	4991      	ldr	r1, [pc, #580]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 8008464:	4613      	mov	r3, r2
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	4413      	add	r3, r2
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	440b      	add	r3, r1
 800846e:	3308      	adds	r3, #8
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	79fa      	ldrb	r2, [r7, #7]
 8008474:	488d      	ldr	r0, [pc, #564]	; (80086ac <Check_Vital_CRC+0x2c8>)
 8008476:	4613      	mov	r3, r2
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4413      	add	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4403      	add	r3, r0
 8008480:	3308      	adds	r3, #8
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	1acb      	subs	r3, r1, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	bfb8      	it	lt
 800848a:	425b      	neglt	r3, r3
 800848c:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d104      	bne.n	800849e <Check_Vital_CRC+0xba>
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	4a87      	ldr	r2, [pc, #540]	; (80086b4 <Check_Vital_CRC+0x2d0>)
 8008498:	5cd3      	ldrb	r3, [r2, r3]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d14c      	bne.n	8008538 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	4a84      	ldr	r2, [pc, #528]	; (80086b4 <Check_Vital_CRC+0x2d0>)
 80084a2:	2100      	movs	r1, #0
 80084a4:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	4a7e      	ldr	r2, [pc, #504]	; (80086a4 <Check_Vital_CRC+0x2c0>)
 80084aa:	3366      	adds	r3, #102	; 0x66
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	4619      	mov	r1, r3
 80084b4:	4880      	ldr	r0, [pc, #512]	; (80086b8 <Check_Vital_CRC+0x2d4>)
 80084b6:	f01d ffef 	bl	8026498 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80084ba:	79fa      	ldrb	r2, [r7, #7]
 80084bc:	497a      	ldr	r1, [pc, #488]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 80084be:	4613      	mov	r3, r2
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	4413      	add	r3, r2
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	440b      	add	r3, r1
 80084c8:	3308      	adds	r3, #8
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4619      	mov	r1, r3
 80084ce:	487b      	ldr	r0, [pc, #492]	; (80086bc <Check_Vital_CRC+0x2d8>)
 80084d0:	f01d ffe2 	bl	8026498 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80084d4:	79fa      	ldrb	r2, [r7, #7]
 80084d6:	4975      	ldr	r1, [pc, #468]	; (80086ac <Check_Vital_CRC+0x2c8>)
 80084d8:	4613      	mov	r3, r2
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	4413      	add	r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	440b      	add	r3, r1
 80084e2:	3308      	adds	r3, #8
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4619      	mov	r1, r3
 80084e8:	4875      	ldr	r0, [pc, #468]	; (80086c0 <Check_Vital_CRC+0x2dc>)
 80084ea:	f01d ffd5 	bl	8026498 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 80084ee:	4875      	ldr	r0, [pc, #468]	; (80086c4 <Check_Vital_CRC+0x2e0>)
 80084f0:	f01e f86e 	bl	80265d0 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80084f4:	79fa      	ldrb	r2, [r7, #7]
 80084f6:	79f9      	ldrb	r1, [r7, #7]
 80084f8:	486c      	ldr	r0, [pc, #432]	; (80086ac <Check_Vital_CRC+0x2c8>)
 80084fa:	4613      	mov	r3, r2
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	4413      	add	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	4403      	add	r3, r0
 8008504:	3308      	adds	r3, #8
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	486f      	ldr	r0, [pc, #444]	; (80086c8 <Check_Vital_CRC+0x2e4>)
 800850a:	010b      	lsls	r3, r1, #4
 800850c:	4403      	add	r3, r0
 800850e:	3308      	adds	r3, #8
 8008510:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8008512:	79f9      	ldrb	r1, [r7, #7]
 8008514:	79fa      	ldrb	r2, [r7, #7]
 8008516:	4865      	ldr	r0, [pc, #404]	; (80086ac <Check_Vital_CRC+0x2c8>)
 8008518:	460b      	mov	r3, r1
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	440b      	add	r3, r1
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	4403      	add	r3, r0
 8008522:	3308      	adds	r3, #8
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	4860      	ldr	r0, [pc, #384]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 8008528:	4613      	mov	r3, r2
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	4413      	add	r3, r2
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	4403      	add	r3, r0
 8008532:	3308      	adds	r3, #8
 8008534:	6019      	str	r1, [r3, #0]
 8008536:	e009      	b.n	800854c <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d106      	bne.n	800854c <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	4a5c      	ldr	r2, [pc, #368]	; (80086b4 <Check_Vital_CRC+0x2d0>)
 8008542:	5cd2      	ldrb	r2, [r2, r3]
 8008544:	3201      	adds	r2, #1
 8008546:	b2d1      	uxtb	r1, r2
 8008548:	4a5a      	ldr	r2, [pc, #360]	; (80086b4 <Check_Vital_CRC+0x2d0>)
 800854a:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 800854c:	79fa      	ldrb	r2, [r7, #7]
 800854e:	4956      	ldr	r1, [pc, #344]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 8008550:	4613      	mov	r3, r2
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	4413      	add	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	440b      	add	r3, r1
 800855a:	330c      	adds	r3, #12
 800855c:	6819      	ldr	r1, [r3, #0]
 800855e:	79fa      	ldrb	r2, [r7, #7]
 8008560:	4852      	ldr	r0, [pc, #328]	; (80086ac <Check_Vital_CRC+0x2c8>)
 8008562:	4613      	mov	r3, r2
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	4413      	add	r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	4403      	add	r3, r0
 800856c:	330c      	adds	r3, #12
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4299      	cmp	r1, r3
 8008572:	f000 8094 	beq.w	800869e <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8008576:	79fa      	ldrb	r2, [r7, #7]
 8008578:	494c      	ldr	r1, [pc, #304]	; (80086ac <Check_Vital_CRC+0x2c8>)
 800857a:	4613      	mov	r3, r2
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	4413      	add	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	440b      	add	r3, r1
 8008584:	330c      	adds	r3, #12
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8088 	beq.w	800869e <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 800858e:	79fa      	ldrb	r2, [r7, #7]
 8008590:	4945      	ldr	r1, [pc, #276]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 8008592:	4613      	mov	r3, r2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	4413      	add	r3, r2
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	440b      	add	r3, r1
 800859c:	3304      	adds	r3, #4
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d104      	bne.n	80085ae <Check_Vital_CRC+0x1ca>
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	4a42      	ldr	r2, [pc, #264]	; (80086b0 <Check_Vital_CRC+0x2cc>)
 80085a8:	5cd3      	ldrb	r3, [r2, r3]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d177      	bne.n	800869e <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 80085ae:	79fa      	ldrb	r2, [r7, #7]
 80085b0:	493d      	ldr	r1, [pc, #244]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 80085b2:	4613      	mov	r3, r2
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	4413      	add	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	440b      	add	r3, r1
 80085bc:	330c      	adds	r3, #12
 80085be:	6819      	ldr	r1, [r3, #0]
 80085c0:	79fa      	ldrb	r2, [r7, #7]
 80085c2:	483a      	ldr	r0, [pc, #232]	; (80086ac <Check_Vital_CRC+0x2c8>)
 80085c4:	4613      	mov	r3, r2
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	4413      	add	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	4403      	add	r3, r0
 80085ce:	330c      	adds	r3, #12
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	1acb      	subs	r3, r1, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfb8      	it	lt
 80085d8:	425b      	neglt	r3, r3
 80085da:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d104      	bne.n	80085ec <Check_Vital_CRC+0x208>
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	4a39      	ldr	r2, [pc, #228]	; (80086cc <Check_Vital_CRC+0x2e8>)
 80085e6:	5cd3      	ldrb	r3, [r2, r3]
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d14c      	bne.n	8008686 <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	4a37      	ldr	r2, [pc, #220]	; (80086cc <Check_Vital_CRC+0x2e8>)
 80085f0:	2100      	movs	r1, #0
 80085f2:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	4a2b      	ldr	r2, [pc, #172]	; (80086a4 <Check_Vital_CRC+0x2c0>)
 80085f8:	3366      	adds	r3, #102	; 0x66
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4619      	mov	r1, r3
 8008602:	4833      	ldr	r0, [pc, #204]	; (80086d0 <Check_Vital_CRC+0x2ec>)
 8008604:	f01d ff48 	bl	8026498 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8008608:	79fa      	ldrb	r2, [r7, #7]
 800860a:	4927      	ldr	r1, [pc, #156]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 800860c:	4613      	mov	r3, r2
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	4413      	add	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	440b      	add	r3, r1
 8008616:	330c      	adds	r3, #12
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4619      	mov	r1, r3
 800861c:	482d      	ldr	r0, [pc, #180]	; (80086d4 <Check_Vital_CRC+0x2f0>)
 800861e:	f01d ff3b 	bl	8026498 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8008622:	79fa      	ldrb	r2, [r7, #7]
 8008624:	4921      	ldr	r1, [pc, #132]	; (80086ac <Check_Vital_CRC+0x2c8>)
 8008626:	4613      	mov	r3, r2
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	4413      	add	r3, r2
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	440b      	add	r3, r1
 8008630:	330c      	adds	r3, #12
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4619      	mov	r1, r3
 8008636:	4828      	ldr	r0, [pc, #160]	; (80086d8 <Check_Vital_CRC+0x2f4>)
 8008638:	f01d ff2e 	bl	8026498 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 800863c:	4827      	ldr	r0, [pc, #156]	; (80086dc <Check_Vital_CRC+0x2f8>)
 800863e:	f01d ffc7 	bl	80265d0 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8008642:	79fa      	ldrb	r2, [r7, #7]
 8008644:	79f9      	ldrb	r1, [r7, #7]
 8008646:	4819      	ldr	r0, [pc, #100]	; (80086ac <Check_Vital_CRC+0x2c8>)
 8008648:	4613      	mov	r3, r2
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4413      	add	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	4403      	add	r3, r0
 8008652:	330c      	adds	r3, #12
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	481c      	ldr	r0, [pc, #112]	; (80086c8 <Check_Vital_CRC+0x2e4>)
 8008658:	010b      	lsls	r3, r1, #4
 800865a:	4403      	add	r3, r0
 800865c:	330c      	adds	r3, #12
 800865e:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8008660:	79f9      	ldrb	r1, [r7, #7]
 8008662:	79fa      	ldrb	r2, [r7, #7]
 8008664:	4811      	ldr	r0, [pc, #68]	; (80086ac <Check_Vital_CRC+0x2c8>)
 8008666:	460b      	mov	r3, r1
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	440b      	add	r3, r1
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	4403      	add	r3, r0
 8008670:	330c      	adds	r3, #12
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	480c      	ldr	r0, [pc, #48]	; (80086a8 <Check_Vital_CRC+0x2c4>)
 8008676:	4613      	mov	r3, r2
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4413      	add	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	4403      	add	r3, r0
 8008680:	330c      	adds	r3, #12
 8008682:	6019      	str	r1, [r3, #0]
 8008684:	e00b      	b.n	800869e <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d108      	bne.n	800869e <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	4a0f      	ldr	r2, [pc, #60]	; (80086cc <Check_Vital_CRC+0x2e8>)
 8008690:	5cd2      	ldrb	r2, [r2, r3]
 8008692:	3201      	adds	r2, #1
 8008694:	b2d1      	uxtb	r1, r2
 8008696:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <Check_Vital_CRC+0x2e8>)
 8008698:	54d1      	strb	r1, [r2, r3]
 800869a:	e000      	b.n	800869e <Check_Vital_CRC+0x2ba>
		return;
 800869c:	bf00      	nop
				}
			}
		}
	}
}
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20000504 	.word	0x20000504
 80086a8:	20002da4 	.word	0x20002da4
 80086ac:	20002e94 	.word	0x20002e94
 80086b0:	20002680 	.word	0x20002680
 80086b4:	20003768 	.word	0x20003768
 80086b8:	08028d00 	.word	0x08028d00
 80086bc:	08028d44 	.word	0x08028d44
 80086c0:	08028d68 	.word	0x08028d68
 80086c4:	08028d8c 	.word	0x08028d8c
 80086c8:	200028f4 	.word	0x200028f4
 80086cc:	20003774 	.word	0x20003774
 80086d0:	08028db4 	.word	0x08028db4
 80086d4:	08028df8 	.word	0x08028df8
 80086d8:	08028e1c 	.word	0x08028e1c
 80086dc:	08028e40 	.word	0x08028e40

080086e0 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	4a0a      	ldr	r2, [pc, #40]	; (8008718 <Check_Other_EiPC_Packet+0x38>)
 80086ee:	4413      	add	r3, r2
 80086f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d007      	beq.n	8008708 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff fd5e 	bl	80081bc <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fe6e 	bl	80083e4 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	4618      	mov	r0, r3
 800870c:	f001 f8f2 	bl	80098f4 <CheckOtherLinkStatus>
}
 8008710:	bf00      	nop
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	20000504 	.word	0x20000504

0800871c <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 800871c:	b590      	push	{r4, r7, lr}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008726:	493c      	ldr	r1, [pc, #240]	; (8008818 <CheckLinkEstablishTimeout+0xfc>)
 8008728:	483c      	ldr	r0, [pc, #240]	; (800881c <CheckLinkEstablishTimeout+0x100>)
 800872a:	f7f7 fd89 	bl	8000240 <strcmp>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d06c      	beq.n	800880e <CheckLinkEstablishTimeout+0xf2>
	{
		return;
	}

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008734:	2300      	movs	r3, #0
 8008736:	71fb      	strb	r3, [r7, #7]
 8008738:	e062      	b.n	8008800 <CheckLinkEstablishTimeout+0xe4>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	4a38      	ldr	r2, [pc, #224]	; (8008820 <CheckLinkEstablishTimeout+0x104>)
 800873e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008742:	4618      	mov	r0, r3
 8008744:	f007 fc18 	bl	800ff78 <HAL_Elaps_Ticks>
 8008748:	4602      	mov	r2, r0
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	4935      	ldr	r1, [pc, #212]	; (8008824 <CheckLinkEstablishTimeout+0x108>)
 800874e:	339e      	adds	r3, #158	; 0x9e
 8008750:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008754:	429a      	cmp	r2, r3
 8008756:	d950      	bls.n	80087fa <CheckLinkEstablishTimeout+0xde>
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	4a33      	ldr	r2, [pc, #204]	; (8008828 <CheckLinkEstablishTimeout+0x10c>)
 800875c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	492f      	ldr	r1, [pc, #188]	; (8008820 <CheckLinkEstablishTimeout+0x104>)
 8008764:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008768:	429a      	cmp	r2, r3
 800876a:	d046      	beq.n	80087fa <CheckLinkEstablishTimeout+0xde>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 800876c:	79fa      	ldrb	r2, [r7, #7]
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	492b      	ldr	r1, [pc, #172]	; (8008820 <CheckLinkEstablishTimeout+0x104>)
 8008772:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008776:	492c      	ldr	r1, [pc, #176]	; (8008828 <CheckLinkEstablishTimeout+0x10c>)
 8008778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	4a29      	ldr	r2, [pc, #164]	; (8008824 <CheckLinkEstablishTimeout+0x108>)
 8008780:	3366      	adds	r3, #102	; 0x66
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	4619      	mov	r1, r3
 800878a:	4828      	ldr	r0, [pc, #160]	; (800882c <CheckLinkEstablishTimeout+0x110>)
 800878c:	f01d fe84 	bl	8026498 <iprintf>
			SelfLinkFlag[Traverser] = RESET;
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	4a27      	ldr	r2, [pc, #156]	; (8008830 <CheckLinkEstablishTimeout+0x114>)
 8008794:	2100      	movs	r1, #0
 8008796:	54d1      	strb	r1, [r2, r3]
			memset(&Main_Relays_st[Traverser].RelayIPS_Buff,0,sizeof(Main_Relays_st[Traverser].RelayIPS_Buff));
 8008798:	79fa      	ldrb	r2, [r7, #7]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4a24      	ldr	r2, [pc, #144]	; (8008834 <CheckLinkEstablishTimeout+0x118>)
 80087a4:	4413      	add	r3, r2
 80087a6:	3301      	adds	r3, #1
 80087a8:	2210      	movs	r2, #16
 80087aa:	2100      	movs	r1, #0
 80087ac:	4618      	mov	r0, r3
 80087ae:	f01d fd8b 	bl	80262c8 <memset>
			Main_Relays_st[Traverser].RelayIPS_CRC = 0;
 80087b2:	79fa      	ldrb	r2, [r7, #7]
 80087b4:	491f      	ldr	r1, [pc, #124]	; (8008834 <CheckLinkEstablishTimeout+0x118>)
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	440b      	add	r3, r1
 80087c0:	3312      	adds	r3, #18
 80087c2:	2200      	movs	r2, #0
 80087c4:	801a      	strh	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 80087c6:	79fa      	ldrb	r2, [r7, #7]
 80087c8:	491b      	ldr	r1, [pc, #108]	; (8008838 <CheckLinkEstablishTimeout+0x11c>)
 80087ca:	4613      	mov	r3, r2
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	4413      	add	r3, r2
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	440b      	add	r3, r1
 80087d4:	3310      	adds	r3, #16
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	79fc      	ldrb	r4, [r7, #7]
 80087da:	4618      	mov	r0, r3
 80087dc:	f007 fbcc 	bl	800ff78 <HAL_Elaps_Ticks>
 80087e0:	4602      	mov	r2, r0
 80087e2:	4915      	ldr	r1, [pc, #84]	; (8008838 <CheckLinkEstablishTimeout+0x11c>)
 80087e4:	4623      	mov	r3, r4
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	4423      	add	r3, r4
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	440b      	add	r3, r1
 80087ee:	3310      	adds	r3, #16
 80087f0:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 f87d 	bl	80098f4 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	3301      	adds	r3, #1
 80087fe:	71fb      	strb	r3, [r7, #7]
 8008800:	4b08      	ldr	r3, [pc, #32]	; (8008824 <CheckLinkEstablishTimeout+0x108>)
 8008802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008806:	79fa      	ldrb	r2, [r7, #7]
 8008808:	429a      	cmp	r2, r3
 800880a:	d396      	bcc.n	800873a <CheckLinkEstablishTimeout+0x1e>
 800880c:	e000      	b.n	8008810 <CheckLinkEstablishTimeout+0xf4>
		return;
 800880e:	bf00      	nop
		}
	}
}
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	bd90      	pop	{r4, r7, pc}
 8008816:	bf00      	nop
 8008818:	08027f98 	.word	0x08027f98
 800881c:	20000505 	.word	0x20000505
 8008820:	200025a0 	.word	0x200025a0
 8008824:	20000504 	.word	0x20000504
 8008828:	20003780 	.word	0x20003780
 800882c:	08028e68 	.word	0x08028e68
 8008830:	200025f0 	.word	0x200025f0
 8008834:	200035b0 	.word	0x200035b0
 8008838:	20002da4 	.word	0x20002da4

0800883c <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 800883c:	b590      	push	{r4, r7, lr}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008842:	2300      	movs	r3, #0
 8008844:	71fb      	strb	r3, [r7, #7]
 8008846:	e052      	b.n	80088ee <Send_Self_Sharing+0xb2>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	4a2d      	ldr	r2, [pc, #180]	; (8008900 <Send_Self_Sharing+0xc4>)
 800884c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008850:	4618      	mov	r0, r3
 8008852:	f007 fb91 	bl	800ff78 <HAL_Elaps_Ticks>
 8008856:	4602      	mov	r2, r0
 8008858:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <Send_Self_Sharing+0xc8>)
 800885a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800885e:	429a      	cmp	r2, r3
 8008860:	d942      	bls.n	80088e8 <Send_Self_Sharing+0xac>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8008862:	79fa      	ldrb	r2, [r7, #7]
 8008864:	4928      	ldr	r1, [pc, #160]	; (8008908 <Send_Self_Sharing+0xcc>)
 8008866:	4613      	mov	r3, r2
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	4413      	add	r3, r2
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	440b      	add	r3, r1
 8008870:	3301      	adds	r3, #1
 8008872:	2200      	movs	r2, #0
 8008874:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8008876:	79f9      	ldrb	r1, [r7, #7]
 8008878:	79fa      	ldrb	r2, [r7, #7]
 800887a:	4824      	ldr	r0, [pc, #144]	; (800890c <Send_Self_Sharing+0xd0>)
 800887c:	460b      	mov	r3, r1
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	440b      	add	r3, r1
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4403      	add	r3, r0
 8008886:	3301      	adds	r3, #1
 8008888:	7818      	ldrb	r0, [r3, #0]
 800888a:	491f      	ldr	r1, [pc, #124]	; (8008908 <Send_Self_Sharing+0xcc>)
 800888c:	4613      	mov	r3, r2
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	4413      	add	r3, r2
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	440b      	add	r3, r1
 8008896:	3302      	adds	r3, #2
 8008898:	4602      	mov	r2, r0
 800889a:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800889c:	2218      	movs	r2, #24
 800889e:	2100      	movs	r1, #0
 80088a0:	481b      	ldr	r0, [pc, #108]	; (8008910 <Send_Self_Sharing+0xd4>)
 80088a2:	f01d fd11 	bl	80262c8 <memset>
			Tx_Ei_self_sharing_st[Traverser].Peer_Index = Traverser;
 80088a6:	79fa      	ldrb	r2, [r7, #7]
 80088a8:	4917      	ldr	r1, [pc, #92]	; (8008908 <Send_Self_Sharing+0xcc>)
 80088aa:	4613      	mov	r3, r2
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	4413      	add	r3, r2
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	440b      	add	r3, r1
 80088b4:	79fa      	ldrb	r2, [r7, #7]
 80088b6:	701a      	strb	r2, [r3, #0]
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 80088b8:	79fa      	ldrb	r2, [r7, #7]
 80088ba:	4613      	mov	r3, r2
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	4413      	add	r3, r2
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	4a11      	ldr	r2, [pc, #68]	; (8008908 <Send_Self_Sharing+0xcc>)
 80088c4:	4413      	add	r3, r2
 80088c6:	2218      	movs	r2, #24
 80088c8:	4619      	mov	r1, r3
 80088ca:	4811      	ldr	r0, [pc, #68]	; (8008910 <Send_Self_Sharing+0xd4>)
 80088cc:	f01d fcd4 	bl	8026278 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 80088d0:	f240 2002 	movw	r0, #514	; 0x202
 80088d4:	f008 f8cc 	bl	8010a70 <TransmitCanPkt>
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 80088d8:	79fc      	ldrb	r4, [r7, #7]
 80088da:	f010 fdd3 	bl	8019484 <HAL_GetTick>
 80088de:	4603      	mov	r3, r0
 80088e0:	4a07      	ldr	r2, [pc, #28]	; (8008900 <Send_Self_Sharing+0xc4>)
 80088e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 80088e6:	e008      	b.n	80088fa <Send_Self_Sharing+0xbe>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	3301      	adds	r3, #1
 80088ec:	71fb      	strb	r3, [r7, #7]
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <Send_Self_Sharing+0xc8>)
 80088f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088f4:	79fa      	ldrb	r2, [r7, #7]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d3a6      	bcc.n	8008848 <Send_Self_Sharing+0xc>
		}
	}
}
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd90      	pop	{r4, r7, pc}
 8008900:	200024b8 	.word	0x200024b8
 8008904:	20000504 	.word	0x20000504
 8008908:	20002da4 	.word	0x20002da4
 800890c:	200033f8 	.word	0x200033f8
 8008910:	20002f84 	.word	0x20002f84

08008914 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8008918:	4b29      	ldr	r3, [pc, #164]	; (80089c0 <Detect_CAN_Xchange_Failure+0xac>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d101      	bne.n	8008924 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8008920:	f00d fb32 	bl	8015f88 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008924:	4927      	ldr	r1, [pc, #156]	; (80089c4 <Detect_CAN_Xchange_Failure+0xb0>)
 8008926:	4828      	ldr	r0, [pc, #160]	; (80089c8 <Detect_CAN_Xchange_Failure+0xb4>)
 8008928:	f7f7 fc8a 	bl	8000240 <strcmp>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d103      	bne.n	800893a <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8008932:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <Detect_CAN_Xchange_Failure+0xac>)
 8008934:	2201      	movs	r2, #1
 8008936:	701a      	strb	r2, [r3, #0]
		return;
 8008938:	e040      	b.n	80089bc <Detect_CAN_Xchange_Failure+0xa8>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 800893a:	4b24      	ldr	r3, [pc, #144]	; (80089cc <Detect_CAN_Xchange_Failure+0xb8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f007 fb1a 	bl	800ff78 <HAL_Elaps_Ticks>
 8008944:	4602      	mov	r2, r0
 8008946:	4b22      	ldr	r3, [pc, #136]	; (80089d0 <Detect_CAN_Xchange_Failure+0xbc>)
 8008948:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800894c:	429a      	cmp	r2, r3
 800894e:	d335      	bcc.n	80089bc <Detect_CAN_Xchange_Failure+0xa8>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8008950:	4b20      	ldr	r3, [pc, #128]	; (80089d4 <Detect_CAN_Xchange_Failure+0xc0>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <Detect_CAN_Xchange_Failure+0xb8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d02f      	beq.n	80089bc <Detect_CAN_Xchange_Failure+0xa8>
		{
			Is_CAN_Exchange_happening = NO;
 800895c:	4b18      	ldr	r3, [pc, #96]	; (80089c0 <Detect_CAN_Xchange_Failure+0xac>)
 800895e:	2200      	movs	r2, #0
 8008960:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8008962:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <Detect_CAN_Xchange_Failure+0xb8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a1b      	ldr	r2, [pc, #108]	; (80089d4 <Detect_CAN_Xchange_Failure+0xc0>)
 8008968:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 800896a:	4b18      	ldr	r3, [pc, #96]	; (80089cc <Detect_CAN_Xchange_Failure+0xb8>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4618      	mov	r0, r3
 8008970:	f007 fb02 	bl	800ff78 <HAL_Elaps_Ticks>
 8008974:	4603      	mov	r3, r0
 8008976:	4a18      	ldr	r2, [pc, #96]	; (80089d8 <Detect_CAN_Xchange_Failure+0xc4>)
 8008978:	fba2 2303 	umull	r2, r3, r2, r3
 800897c:	099b      	lsrs	r3, r3, #6
 800897e:	4619      	mov	r1, r3
 8008980:	4816      	ldr	r0, [pc, #88]	; (80089dc <Detect_CAN_Xchange_Failure+0xc8>)
 8008982:	f01d fd89 	bl	8026498 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8008986:	4816      	ldr	r0, [pc, #88]	; (80089e0 <Detect_CAN_Xchange_Failure+0xcc>)
 8008988:	f01d fe22 	bl	80265d0 <puts>
			memset(&Rx_Ei_self_sharing_st,0,(sizeof(EI_SELF_SHARING_t)* EI_data.Hitachi_st.PeersCnt));
 800898c:	4b10      	ldr	r3, [pc, #64]	; (80089d0 <Detect_CAN_Xchange_Failure+0xbc>)
 800898e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008992:	461a      	mov	r2, r3
 8008994:	4613      	mov	r3, r2
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	4413      	add	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	461a      	mov	r2, r3
 800899e:	2100      	movs	r1, #0
 80089a0:	4810      	ldr	r0, [pc, #64]	; (80089e4 <Detect_CAN_Xchange_Failure+0xd0>)
 80089a2:	f01d fc91 	bl	80262c8 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 80089a6:	22a2      	movs	r2, #162	; 0xa2
 80089a8:	2100      	movs	r1, #0
 80089aa:	480f      	ldr	r0, [pc, #60]	; (80089e8 <Detect_CAN_Xchange_Failure+0xd4>)
 80089ac:	f01d fc8c 	bl	80262c8 <memset>
			ReArrangedVitalData();
 80089b0:	f001 fcaa 	bl	800a308 <ReArrangedVitalData>
			TransmitCanPkt(EI_PROCESS_DATA);
 80089b4:	f240 1019 	movw	r0, #281	; 0x119
 80089b8:	f008 f85a 	bl	8010a70 <TransmitCanPkt>
		}
	}
}
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	2000030b 	.word	0x2000030b
 80089c4:	08027f98 	.word	0x08027f98
 80089c8:	20000505 	.word	0x20000505
 80089cc:	200024b4 	.word	0x200024b4
 80089d0:	20000504 	.word	0x20000504
 80089d4:	200037a8 	.word	0x200037a8
 80089d8:	10624dd3 	.word	0x10624dd3
 80089dc:	08028e88 	.word	0x08028e88
 80089e0:	08028eb8 	.word	0x08028eb8
 80089e4:	20002e94 	.word	0x20002e94
 80089e8:	20002770 	.word	0x20002770

080089ec <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
	uint16_t Serial_Byte = RESET;
#endif


	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 80089f2:	4b88      	ldr	r3, [pc, #544]	; (8008c14 <Process_Send_Signals_2_MIE+0x228>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f007 fabe 	bl	800ff78 <HAL_Elaps_Ticks>
 80089fc:	4602      	mov	r2, r0
 80089fe:	4b86      	ldr	r3, [pc, #536]	; (8008c18 <Process_Send_Signals_2_MIE+0x22c>)
 8008a00:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008a04:	429a      	cmp	r2, r3
 8008a06:	f240 8100 	bls.w	8008c0a <Process_Send_Signals_2_MIE+0x21e>
	{
		uint8_t Traverser = RESET;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	71fb      	strb	r3, [r7, #7]
		uint8_t Choice = RESET;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	71bb      	strb	r3, [r7, #6]


#endif
#ifdef EI_2

		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a12:	2300      	movs	r3, #0
 8008a14:	71fb      	strb	r3, [r7, #7]
 8008a16:	e0a7      	b.n	8008b68 <Process_Send_Signals_2_MIE+0x17c>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	4a80      	ldr	r2, [pc, #512]	; (8008c1c <Process_Send_Signals_2_MIE+0x230>)
 8008a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d11b      	bne.n	8008a5c <Process_Send_Signals_2_MIE+0x70>
 8008a24:	497e      	ldr	r1, [pc, #504]	; (8008c20 <Process_Send_Signals_2_MIE+0x234>)
 8008a26:	487f      	ldr	r0, [pc, #508]	; (8008c24 <Process_Send_Signals_2_MIE+0x238>)
 8008a28:	f7f7 fc0a 	bl	8000240 <strcmp>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d014      	beq.n	8008a5c <Process_Send_Signals_2_MIE+0x70>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	4a78      	ldr	r2, [pc, #480]	; (8008c18 <Process_Send_Signals_2_MIE+0x22c>)
 8008a36:	3366      	adds	r3, #102	; 0x66
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4879      	ldr	r0, [pc, #484]	; (8008c28 <Process_Send_Signals_2_MIE+0x23c>)
 8008a42:	f01d fd29 	bl	8026498 <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	011b      	lsls	r3, r3, #4
 8008a4a:	4a78      	ldr	r2, [pc, #480]	; (8008c2c <Process_Send_Signals_2_MIE+0x240>)
 8008a4c:	4413      	add	r3, r2
 8008a4e:	3302      	adds	r3, #2
 8008a50:	2210      	movs	r2, #16
 8008a52:	2100      	movs	r1, #0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f01d fc37 	bl	80262c8 <memset>
				continue;
 8008a5a:	e082      	b.n	8008b62 <Process_Send_Signals_2_MIE+0x176>
			}
			Choice = RESET;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	71bb      	strb	r3, [r7, #6]
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8008a60:	79fb      	ldrb	r3, [r7, #7]
 8008a62:	4a73      	ldr	r2, [pc, #460]	; (8008c30 <Process_Send_Signals_2_MIE+0x244>)
 8008a64:	5cd3      	ldrb	r3, [r2, r3]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d104      	bne.n	8008a74 <Process_Send_Signals_2_MIE+0x88>
 8008a6a:	79bb      	ldrb	r3, [r7, #6]
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	71bb      	strb	r3, [r7, #6]
 8008a72:	e003      	b.n	8008a7c <Process_Send_Signals_2_MIE+0x90>
 8008a74:	79bb      	ldrb	r3, [r7, #6]
 8008a76:	f023 0301 	bic.w	r3, r3, #1
 8008a7a:	71bb      	strb	r3, [r7, #6]
			(SelfLinkFlag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	4a6d      	ldr	r2, [pc, #436]	; (8008c34 <Process_Send_Signals_2_MIE+0x248>)
 8008a80:	5cd3      	ldrb	r3, [r2, r3]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d104      	bne.n	8008a90 <Process_Send_Signals_2_MIE+0xa4>
 8008a86:	79bb      	ldrb	r3, [r7, #6]
 8008a88:	f043 0302 	orr.w	r3, r3, #2
 8008a8c:	71bb      	strb	r3, [r7, #6]
 8008a8e:	e003      	b.n	8008a98 <Process_Send_Signals_2_MIE+0xac>
 8008a90:	79bb      	ldrb	r3, [r7, #6]
 8008a92:	f023 0302 	bic.w	r3, r3, #2
 8008a96:	71bb      	strb	r3, [r7, #6]

			printf("Choice:%02X|%lu\n",Choice,EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008a98:	79b9      	ldrb	r1, [r7, #6]
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	4a5e      	ldr	r2, [pc, #376]	; (8008c18 <Process_Send_Signals_2_MIE+0x22c>)
 8008a9e:	3366      	adds	r3, #102	; 0x66
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	4863      	ldr	r0, [pc, #396]	; (8008c38 <Process_Send_Signals_2_MIE+0x24c>)
 8008aaa:	f01d fcf5 	bl	8026498 <iprintf>

			switch(Choice)
 8008aae:	79bb      	ldrb	r3, [r7, #6]
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d84c      	bhi.n	8008b4e <Process_Send_Signals_2_MIE+0x162>
 8008ab4:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <Process_Send_Signals_2_MIE+0xd0>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008ae3 	.word	0x08008ae3
 8008ac4:	08008b07 	.word	0x08008b07
 8008ac8:	08008b2b 	.word	0x08008b2b
			{
			case BOTHCARD_LINK_NOK:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	4a56      	ldr	r2, [pc, #344]	; (8008c2c <Process_Send_Signals_2_MIE+0x240>)
 8008ad2:	4413      	add	r3, r2
 8008ad4:	3302      	adds	r3, #2
 8008ad6:	2210      	movs	r2, #16
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f01d fbf4 	bl	80262c8 <memset>
				break;
 8008ae0:	e03f      	b.n	8008b62 <Process_Send_Signals_2_MIE+0x176>

			case OTHERCARD_LINK_OK:
				/*printf("\nOtherCard SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	4a51      	ldr	r2, [pc, #324]	; (8008c2c <Process_Send_Signals_2_MIE+0x240>)
 8008ae8:	4413      	add	r3, r2
 8008aea:	1c98      	adds	r0, r3, #2
 8008aec:	79fa      	ldrb	r2, [r7, #7]
 8008aee:	4613      	mov	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4a51      	ldr	r2, [pc, #324]	; (8008c3c <Process_Send_Signals_2_MIE+0x250>)
 8008af8:	4413      	add	r3, r2
 8008afa:	3301      	adds	r3, #1
 8008afc:	2210      	movs	r2, #16
 8008afe:	4619      	mov	r1, r3
 8008b00:	f01d fbba 	bl	8026278 <memcpy>
				break;
 8008b04:	e02d      	b.n	8008b62 <Process_Send_Signals_2_MIE+0x176>
			case THISCARD_LINK_OK:
				/*printf("\nOnly This Card SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	4a48      	ldr	r2, [pc, #288]	; (8008c2c <Process_Send_Signals_2_MIE+0x240>)
 8008b0c:	4413      	add	r3, r2
 8008b0e:	1c98      	adds	r0, r3, #2
 8008b10:	79fa      	ldrb	r2, [r7, #7]
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4a49      	ldr	r2, [pc, #292]	; (8008c40 <Process_Send_Signals_2_MIE+0x254>)
 8008b1c:	4413      	add	r3, r2
 8008b1e:	3301      	adds	r3, #1
 8008b20:	2210      	movs	r2, #16
 8008b22:	4619      	mov	r1, r3
 8008b24:	f01d fba8 	bl	8026278 <memcpy>
				break;
 8008b28:	e01b      	b.n	8008b62 <Process_Send_Signals_2_MIE+0x176>
			case BOTHCARD_LINK_OK:
				/*printf("\nBothCard SET3\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	011b      	lsls	r3, r3, #4
 8008b2e:	4a3f      	ldr	r2, [pc, #252]	; (8008c2c <Process_Send_Signals_2_MIE+0x240>)
 8008b30:	4413      	add	r3, r2
 8008b32:	1c98      	adds	r0, r3, #2
 8008b34:	79fa      	ldrb	r2, [r7, #7]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4a40      	ldr	r2, [pc, #256]	; (8008c40 <Process_Send_Signals_2_MIE+0x254>)
 8008b40:	4413      	add	r3, r2
 8008b42:	3301      	adds	r3, #1
 8008b44:	2210      	movs	r2, #16
 8008b46:	4619      	mov	r1, r3
 8008b48:	f01d fb96 	bl	8026278 <memcpy>
				break;
 8008b4c:	e009      	b.n	8008b62 <Process_Send_Signals_2_MIE+0x176>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	4a36      	ldr	r2, [pc, #216]	; (8008c2c <Process_Send_Signals_2_MIE+0x240>)
 8008b54:	4413      	add	r3, r2
 8008b56:	3302      	adds	r3, #2
 8008b58:	2210      	movs	r2, #16
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f01d fbb3 	bl	80262c8 <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	3301      	adds	r3, #1
 8008b66:	71fb      	strb	r3, [r7, #7]
 8008b68:	4b2b      	ldr	r3, [pc, #172]	; (8008c18 <Process_Send_Signals_2_MIE+0x22c>)
 8008b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b6e:	79fa      	ldrb	r2, [r7, #7]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	f4ff af51 	bcc.w	8008a18 <Process_Send_Signals_2_MIE+0x2c>
			}
		}
		if(Is_CAN_Exchange_happening == NO)
 8008b76:	4b33      	ldr	r3, [pc, #204]	; (8008c44 <Process_Send_Signals_2_MIE+0x258>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d110      	bne.n	8008ba0 <Process_Send_Signals_2_MIE+0x1b4>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008b7e:	4832      	ldr	r0, [pc, #200]	; (8008c48 <Process_Send_Signals_2_MIE+0x25c>)
 8008b80:	f01d fd26 	bl	80265d0 <puts>
			printf("Sending Blank Relay statuses\n");
 8008b84:	4831      	ldr	r0, [pc, #196]	; (8008c4c <Process_Send_Signals_2_MIE+0x260>)
 8008b86:	f01d fd23 	bl	80265d0 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008b8a:	22a2      	movs	r2, #162	; 0xa2
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4827      	ldr	r0, [pc, #156]	; (8008c2c <Process_Send_Signals_2_MIE+0x240>)
 8008b90:	f01d fb9a 	bl	80262c8 <memset>
			ReArrangedVitalData();
 8008b94:	f001 fbb8 	bl	800a308 <ReArrangedVitalData>
			TransmitCanPkt(EI_PROCESS_DATA);
 8008b98:	f240 1019 	movw	r0, #281	; 0x119
 8008b9c:	f007 ff68 	bl	8010a70 <TransmitCanPkt>
		}

		if(Debug_flag == 1)
 8008ba0:	4b2b      	ldr	r3, [pc, #172]	; (8008c50 <Process_Send_Signals_2_MIE+0x264>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d12b      	bne.n	8008c00 <Process_Send_Signals_2_MIE+0x214>
		{
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8008ba8:	4b2a      	ldr	r3, [pc, #168]	; (8008c54 <Process_Send_Signals_2_MIE+0x268>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	4619      	mov	r1, r3
 8008bae:	4b29      	ldr	r3, [pc, #164]	; (8008c54 <Process_Send_Signals_2_MIE+0x268>)
 8008bb0:	785b      	ldrb	r3, [r3, #1]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4b27      	ldr	r3, [pc, #156]	; (8008c54 <Process_Send_Signals_2_MIE+0x268>)
 8008bb6:	789b      	ldrb	r3, [r3, #2]
 8008bb8:	4827      	ldr	r0, [pc, #156]	; (8008c58 <Process_Send_Signals_2_MIE+0x26c>)
 8008bba:	f01d fc6d 	bl	8026498 <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	80bb      	strh	r3, [r7, #4]
 8008bc2:	e013      	b.n	8008bec <Process_Send_Signals_2_MIE+0x200>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8008bc4:	88bb      	ldrh	r3, [r7, #4]
 8008bc6:	4a19      	ldr	r2, [pc, #100]	; (8008c2c <Process_Send_Signals_2_MIE+0x240>)
 8008bc8:	4413      	add	r3, r2
 8008bca:	789b      	ldrb	r3, [r3, #2]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4823      	ldr	r0, [pc, #140]	; (8008c5c <Process_Send_Signals_2_MIE+0x270>)
 8008bd0:	f01d fc62 	bl	8026498 <iprintf>
				if(((Byte+1)%16)==0)
 8008bd4:	88bb      	ldrh	r3, [r7, #4]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	f003 030f 	and.w	r3, r3, #15
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <Process_Send_Signals_2_MIE+0x1fa>
				{
					printf("\n");
 8008be0:	200a      	movs	r0, #10
 8008be2:	f01d fc71 	bl	80264c8 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008be6:	88bb      	ldrh	r3, [r7, #4]
 8008be8:	3301      	adds	r3, #1
 8008bea:	80bb      	strh	r3, [r7, #4]
 8008bec:	88ba      	ldrh	r2, [r7, #4]
 8008bee:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <Process_Send_Signals_2_MIE+0x22c>)
 8008bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	dbe4      	blt.n	8008bc4 <Process_Send_Signals_2_MIE+0x1d8>
				}
			}
			printf("\n");
 8008bfa:	200a      	movs	r0, #10
 8008bfc:	f01d fc64 	bl	80264c8 <putchar>
#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008c00:	f010 fc40 	bl	8019484 <HAL_GetTick>
 8008c04:	4603      	mov	r3, r0
 8008c06:	4a03      	ldr	r2, [pc, #12]	; (8008c14 <Process_Send_Signals_2_MIE+0x228>)
 8008c08:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008c0a:	bf00      	nop
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	200024e4 	.word	0x200024e4
 8008c18:	20000504 	.word	0x20000504
 8008c1c:	20002550 	.word	0x20002550
 8008c20:	08027f98 	.word	0x08027f98
 8008c24:	20000505 	.word	0x20000505
 8008c28:	08028edc 	.word	0x08028edc
 8008c2c:	20002770 	.word	0x20002770
 8008c30:	200025fc 	.word	0x200025fc
 8008c34:	200025f0 	.word	0x200025f0
 8008c38:	08028ef0 	.word	0x08028ef0
 8008c3c:	20003678 	.word	0x20003678
 8008c40:	200035b0 	.word	0x200035b0
 8008c44:	2000030b 	.word	0x2000030b
 8008c48:	08028f04 	.word	0x08028f04
 8008c4c:	08028f28 	.word	0x08028f28
 8008c50:	20000bbb 	.word	0x20000bbb
 8008c54:	20003f38 	.word	0x20003f38
 8008c58:	08028f48 	.word	0x08028f48
 8008c5c:	08028f70 	.word	0x08028f70

08008c60 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c62:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8008c66:	af04      	add	r7, sp, #16
 8008c68:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008c6c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008c70:	6018      	str	r0, [r3, #0]
 8008c72:	4608      	mov	r0, r1
 8008c74:	4611      	mov	r1, r2
 8008c76:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008c7a:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008c7e:	4602      	mov	r2, r0
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008c86:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 8008c8e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008c92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f01d fb10 	bl	80262c8 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 8008cae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008cb2:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <Print_EI_DATA+0x64>
 8008cbc:	48a8      	ldr	r0, [pc, #672]	; (8008f60 <Print_EI_DATA+0x300>)
 8008cbe:	f000 f975 	bl	8008fac <Display>
 8008cc2:	e002      	b.n	8008cca <Print_EI_DATA+0x6a>
 8008cc4:	48a7      	ldr	r0, [pc, #668]	; (8008f64 <Print_EI_DATA+0x304>)
 8008cc6:	f000 f971 	bl	8008fac <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 8008cca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008cce:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	2110      	movs	r1, #16
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f7f7 fc9a 	bl	8000614 <ExtractBits>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	f107 030c 	add.w	r3, r7, #12
 8008ce6:	49a0      	ldr	r1, [pc, #640]	; (8008f68 <Print_EI_DATA+0x308>)
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f01d fd8d 	bl	8026808 <siprintf>
	Display(Print_buff);
 8008cee:	f107 030c 	add.w	r3, r7, #12
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f95a 	bl	8008fac <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8008cf8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008cfc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3303      	adds	r3, #3
 8008d04:	461a      	mov	r2, r3
 8008d06:	2110      	movs	r1, #16
 8008d08:	2000      	movs	r0, #0
 8008d0a:	f7f7 fc83 	bl	8000614 <ExtractBits>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	f107 030c 	add.w	r3, r7, #12
 8008d14:	4995      	ldr	r1, [pc, #596]	; (8008f6c <Print_EI_DATA+0x30c>)
 8008d16:	4618      	mov	r0, r3
 8008d18:	f01d fd76 	bl	8026808 <siprintf>
	Display(Print_buff);
 8008d1c:	f107 030c 	add.w	r3, r7, #12
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 f943 	bl	8008fac <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 8008d26:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008d2a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3307      	adds	r3, #7
 8008d32:	461a      	mov	r2, r3
 8008d34:	2108      	movs	r1, #8
 8008d36:	2000      	movs	r0, #0
 8008d38:	f7f7 fc6c 	bl	8000614 <ExtractBits>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8008d42:	488b      	ldr	r0, [pc, #556]	; (8008f70 <Print_EI_DATA+0x310>)
 8008d44:	f000 f932 	bl	8008fac <Display>
	switch(Msg_type)
 8008d48:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	2b05      	cmp	r3, #5
 8008d50:	d829      	bhi.n	8008da6 <Print_EI_DATA+0x146>
 8008d52:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <Print_EI_DATA+0xf8>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008d71 	.word	0x08008d71
 8008d5c:	08008d8f 	.word	0x08008d8f
 8008d60:	08008da7 	.word	0x08008da7
 8008d64:	08008d97 	.word	0x08008d97
 8008d68:	08008da7 	.word	0x08008da7
 8008d6c:	08008d9f 	.word	0x08008d9f
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008d70:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008d74:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <Print_EI_DATA+0x126>
 8008d7e:	487d      	ldr	r0, [pc, #500]	; (8008f74 <Print_EI_DATA+0x314>)
 8008d80:	f000 f914 	bl	8008fac <Display>
		//Display("INIT     ");
		break;
 8008d84:	e012      	b.n	8008dac <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008d86:	487c      	ldr	r0, [pc, #496]	; (8008f78 <Print_EI_DATA+0x318>)
 8008d88:	f000 f910 	bl	8008fac <Display>
		break;
 8008d8c:	e00e      	b.n	8008dac <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8008d8e:	487b      	ldr	r0, [pc, #492]	; (8008f7c <Print_EI_DATA+0x31c>)
 8008d90:	f000 f90c 	bl	8008fac <Display>
		break;
 8008d94:	e00a      	b.n	8008dac <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 8008d96:	487a      	ldr	r0, [pc, #488]	; (8008f80 <Print_EI_DATA+0x320>)
 8008d98:	f000 f908 	bl	8008fac <Display>
		break;
 8008d9c:	e006      	b.n	8008dac <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 8008d9e:	4879      	ldr	r0, [pc, #484]	; (8008f84 <Print_EI_DATA+0x324>)
 8008da0:	f000 f904 	bl	8008fac <Display>
		break;
 8008da4:	e002      	b.n	8008dac <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 8008da6:	4878      	ldr	r0, [pc, #480]	; (8008f88 <Print_EI_DATA+0x328>)
 8008da8:	f000 f900 	bl	8008fac <Display>
	}
	Display("|");
 8008dac:	4877      	ldr	r0, [pc, #476]	; (8008f8c <Print_EI_DATA+0x32c>)
 8008dae:	f000 f8fd 	bl	8008fac <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 8008db2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008db6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3305      	adds	r3, #5
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2108      	movs	r1, #8
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	f7f7 fc26 	bl	8000614 <ExtractBits>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	f107 030c 	add.w	r3, r7, #12
 8008dce:	4970      	ldr	r1, [pc, #448]	; (8008f90 <Print_EI_DATA+0x330>)
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f01d fd19 	bl	8026808 <siprintf>
	Display(Print_buff);
 8008dd6:	f107 030c 	add.w	r3, r7, #12
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f8e6 	bl	8008fac <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 8008de0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008de4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3306      	adds	r3, #6
 8008dec:	461a      	mov	r2, r3
 8008dee:	2108      	movs	r1, #8
 8008df0:	2000      	movs	r0, #0
 8008df2:	f7f7 fc0f 	bl	8000614 <ExtractBits>
 8008df6:	4602      	mov	r2, r0
 8008df8:	f107 030c 	add.w	r3, r7, #12
 8008dfc:	4965      	ldr	r1, [pc, #404]	; (8008f94 <Print_EI_DATA+0x334>)
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f01d fd02 	bl	8026808 <siprintf>
	Display(Print_buff);
 8008e04:	f107 030c 	add.w	r3, r7, #12
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 f8cf 	bl	8008fac <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8008e0e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e12:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	2110      	movs	r1, #16
 8008e1e:	2000      	movs	r0, #0
 8008e20:	f7f7 fbf8 	bl	8000614 <ExtractBits>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 8008e2a:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8008e2e:	f107 030c 	add.w	r3, r7, #12
 8008e32:	4959      	ldr	r1, [pc, #356]	; (8008f98 <Print_EI_DATA+0x338>)
 8008e34:	4618      	mov	r0, r3
 8008e36:	f01d fce7 	bl	8026808 <siprintf>
	Display(Print_buff);
 8008e3a:	f107 030c 	add.w	r3, r7, #12
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f8b4 	bl	8008fac <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008e44:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008e48:	095b      	lsrs	r3, r3, #5
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d03f      	beq.n	8008ed4 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008e54:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e58:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	330a      	adds	r3, #10
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	461d      	mov	r5, r3
 8008e64:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e68:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	330b      	adds	r3, #11
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	461e      	mov	r6, r3
 8008e74:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e78:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e88:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	330d      	adds	r3, #13
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	4619      	mov	r1, r3
 8008e94:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e98:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	330e      	adds	r3, #14
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	461c      	mov	r4, r3
 8008ea4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ea8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	330f      	adds	r3, #15
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	f107 000c 	add.w	r0, r7, #12
 8008eb6:	9303      	str	r3, [sp, #12]
 8008eb8:	9402      	str	r4, [sp, #8]
 8008eba:	9101      	str	r1, [sp, #4]
 8008ebc:	9200      	str	r2, [sp, #0]
 8008ebe:	4633      	mov	r3, r6
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4936      	ldr	r1, [pc, #216]	; (8008f9c <Print_EI_DATA+0x33c>)
 8008ec4:	f01d fca0 	bl	8026808 <siprintf>
		Display(Print_buff);
 8008ec8:	f107 030c 	add.w	r3, r7, #12
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 f86d 	bl	8008fac <Display>
 8008ed2:	e002      	b.n	8008eda <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 8008ed4:	4832      	ldr	r0, [pc, #200]	; (8008fa0 <Print_EI_DATA+0x340>)
 8008ed6:	f000 f869 	bl	8008fac <Display>
	}
	if(Debug_flag == 1)
 8008eda:	4b32      	ldr	r3, [pc, #200]	; (8008fa4 <Print_EI_DATA+0x344>)
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d139      	bne.n	8008f56 <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008ee8:	e019      	b.n	8008f1e <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 8008eea:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008eee:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008ef2:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008ef6:	6812      	ldr	r2, [r2, #0]
 8008ef8:	4413      	add	r3, r2
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	f107 030c 	add.w	r3, r7, #12
 8008f02:	4929      	ldr	r1, [pc, #164]	; (8008fa8 <Print_EI_DATA+0x348>)
 8008f04:	4618      	mov	r0, r3
 8008f06:	f01d fc7f 	bl	8026808 <siprintf>
			Display(Print_buff);
 8008f0a:	f107 030c 	add.w	r3, r7, #12
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f84c 	bl	8008fac <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008f14:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008f18:	3301      	adds	r3, #1
 8008f1a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008f1e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008f22:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008f26:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d3dc      	bcc.n	8008eea <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008f30:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008f34:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10b      	bne.n	8008f56 <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8008f3e:	f107 030c 	add.w	r3, r7, #12
 8008f42:	22f6      	movs	r2, #246	; 0xf6
 8008f44:	4918      	ldr	r1, [pc, #96]	; (8008fa8 <Print_EI_DATA+0x348>)
 8008f46:	4618      	mov	r0, r3
 8008f48:	f01d fc5e 	bl	8026808 <siprintf>
			Display(Print_buff);
 8008f4c:	f107 030c 	add.w	r3, r7, #12
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 f82b 	bl	8008fac <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 8008f56:	bf00      	nop
 8008f58:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f60:	08028f78 	.word	0x08028f78
 8008f64:	08028f7c 	.word	0x08028f7c
 8008f68:	08028f80 	.word	0x08028f80
 8008f6c:	08028f88 	.word	0x08028f88
 8008f70:	08028f90 	.word	0x08028f90
 8008f74:	08028f94 	.word	0x08028f94
 8008f78:	08028f9c 	.word	0x08028f9c
 8008f7c:	08028fa4 	.word	0x08028fa4
 8008f80:	08028fa8 	.word	0x08028fa8
 8008f84:	08028fac 	.word	0x08028fac
 8008f88:	08028fb0 	.word	0x08028fb0
 8008f8c:	08028fc4 	.word	0x08028fc4
 8008f90:	08028fc8 	.word	0x08028fc8
 8008f94:	08028fd4 	.word	0x08028fd4
 8008f98:	08028fe0 	.word	0x08028fe0
 8008f9c:	08028fec 	.word	0x08028fec
 8008fa0:	08029010 	.word	0x08029010
 8008fa4:	20000bbb 	.word	0x20000bbb
 8008fa8:	08028f70 	.word	0x08028f70

08008fac <Display>:

void Display(char *Data)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 8008fb8:	e00a      	b.n	8008fd0 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f010 f805 	bl	8018fd4 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1ee      	bne.n	8008fba <Display+0xe>
	}
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <print_self_Details_Hitachi>:
	}

}

void print_self_Details_Hitachi(void)
{
 8008fe8:	b5b0      	push	{r4, r5, r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
 8008ff2:	4890      	ldr	r0, [pc, #576]	; (8009234 <print_self_Details_Hitachi+0x24c>)
 8008ff4:	f01d faec 	bl	80265d0 <puts>
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008ff8:	4b8f      	ldr	r3, [pc, #572]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8008ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ffe:	4619      	mov	r1, r3
 8009000:	488e      	ldr	r0, [pc, #568]	; (800923c <print_self_Details_Hitachi+0x254>)
 8009002:	f01d fa49 	bl	8026498 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 8009006:	4b8c      	ldr	r3, [pc, #560]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009008:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800900c:	4619      	mov	r1, r3
 800900e:	488c      	ldr	r0, [pc, #560]	; (8009240 <print_self_Details_Hitachi+0x258>)
 8009010:	f01d fa42 	bl	8026498 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8009014:	4b88      	ldr	r3, [pc, #544]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009016:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800901a:	4619      	mov	r1, r3
 800901c:	4889      	ldr	r0, [pc, #548]	; (8009244 <print_self_Details_Hitachi+0x25c>)
 800901e:	f01d fa3b 	bl	8026498 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8009022:	4b85      	ldr	r3, [pc, #532]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009024:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009028:	4619      	mov	r1, r3
 800902a:	4887      	ldr	r0, [pc, #540]	; (8009248 <print_self_Details_Hitachi+0x260>)
 800902c:	f01d fa34 	bl	8026498 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8009030:	4b81      	ldr	r3, [pc, #516]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009032:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009036:	4619      	mov	r1, r3
 8009038:	4884      	ldr	r0, [pc, #528]	; (800924c <print_self_Details_Hitachi+0x264>)
 800903a:	f01d fa2d 	bl	8026498 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 800903e:	4b7e      	ldr	r3, [pc, #504]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009040:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009044:	4619      	mov	r1, r3
 8009046:	4882      	ldr	r0, [pc, #520]	; (8009250 <print_self_Details_Hitachi+0x268>)
 8009048:	f01d fa26 	bl	8026498 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 800904c:	4b7a      	ldr	r3, [pc, #488]	; (8009238 <print_self_Details_Hitachi+0x250>)
 800904e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009052:	4619      	mov	r1, r3
 8009054:	4879      	ldr	r0, [pc, #484]	; (800923c <print_self_Details_Hitachi+0x254>)
 8009056:	f01d fa1f 	bl	8026498 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800905a:	2300      	movs	r3, #0
 800905c:	71fb      	strb	r3, [r7, #7]
 800905e:	e03b      	b.n	80090d8 <print_self_Details_Hitachi+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8009060:	79f9      	ldrb	r1, [r7, #7]
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	4a74      	ldr	r2, [pc, #464]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009066:	3326      	adds	r3, #38	; 0x26
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	78db      	ldrb	r3, [r3, #3]
 800906e:	461c      	mov	r4, r3
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	4a71      	ldr	r2, [pc, #452]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800907c:	461d      	mov	r5, r3
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	4a6d      	ldr	r2, [pc, #436]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800908a:	4618      	mov	r0, r3
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	4a6a      	ldr	r2, [pc, #424]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	9000      	str	r0, [sp, #0]
 800909c:	462b      	mov	r3, r5
 800909e:	4622      	mov	r2, r4
 80090a0:	486c      	ldr	r0, [pc, #432]	; (8009254 <print_self_Details_Hitachi+0x26c>)
 80090a2:	f01d f9f9 	bl	8026498 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80090a6:	79f9      	ldrb	r1, [r7, #7]
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	4a63      	ldr	r2, [pc, #396]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80090ac:	3352      	adds	r3, #82	; 0x52
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	885b      	ldrh	r3, [r3, #2]
 80090b4:	461a      	mov	r2, r3
 80090b6:	4868      	ldr	r0, [pc, #416]	; (8009258 <print_self_Details_Hitachi+0x270>)
 80090b8:	f01d f9ee 	bl	8026498 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80090bc:	79f9      	ldrb	r1, [r7, #7]
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	4a5d      	ldr	r2, [pc, #372]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 80090ca:	461a      	mov	r2, r3
 80090cc:	4863      	ldr	r0, [pc, #396]	; (800925c <print_self_Details_Hitachi+0x274>)
 80090ce:	f01d f9e3 	bl	8026498 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	3301      	adds	r3, #1
 80090d6:	71fb      	strb	r3, [r7, #7]
 80090d8:	4b57      	ldr	r3, [pc, #348]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80090da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80090de:	79fa      	ldrb	r2, [r7, #7]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d3bd      	bcc.n	8009060 <print_self_Details_Hitachi+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80090e4:	4b54      	ldr	r3, [pc, #336]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80090e6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80090ea:	4619      	mov	r1, r3
 80090ec:	4b52      	ldr	r3, [pc, #328]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80090ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f2:	461a      	mov	r2, r3
 80090f4:	4b50      	ldr	r3, [pc, #320]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80090f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090fa:	4618      	mov	r0, r3
 80090fc:	4b4e      	ldr	r3, [pc, #312]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80090fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	4603      	mov	r3, r0
 8009106:	4856      	ldr	r0, [pc, #344]	; (8009260 <print_self_Details_Hitachi+0x278>)
 8009108:	f01d f9c6 	bl	8026498 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 800910c:	4b4a      	ldr	r3, [pc, #296]	; (8009238 <print_self_Details_Hitachi+0x250>)
 800910e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009112:	4618      	mov	r0, r3
 8009114:	4b48      	ldr	r3, [pc, #288]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009116:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800911a:	461c      	mov	r4, r3
 800911c:	4b46      	ldr	r3, [pc, #280]	; (8009238 <print_self_Details_Hitachi+0x250>)
 800911e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009122:	461d      	mov	r5, r3
 8009124:	4b44      	ldr	r3, [pc, #272]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009126:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800912a:	461a      	mov	r2, r3
 800912c:	4b42      	ldr	r3, [pc, #264]	; (8009238 <print_self_Details_Hitachi+0x250>)
 800912e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009132:	4619      	mov	r1, r3
 8009134:	4b40      	ldr	r3, [pc, #256]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009136:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800913a:	9302      	str	r3, [sp, #8]
 800913c:	9101      	str	r1, [sp, #4]
 800913e:	9200      	str	r2, [sp, #0]
 8009140:	462b      	mov	r3, r5
 8009142:	4622      	mov	r2, r4
 8009144:	4601      	mov	r1, r0
 8009146:	4847      	ldr	r0, [pc, #284]	; (8009264 <print_self_Details_Hitachi+0x27c>)
 8009148:	f01d f9a6 	bl	8026498 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 800914c:	4b3a      	ldr	r3, [pc, #232]	; (8009238 <print_self_Details_Hitachi+0x250>)
 800914e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009152:	4619      	mov	r1, r3
 8009154:	4844      	ldr	r0, [pc, #272]	; (8009268 <print_self_Details_Hitachi+0x280>)
 8009156:	f01d f99f 	bl	8026498 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800915a:	2300      	movs	r3, #0
 800915c:	71fb      	strb	r3, [r7, #7]
 800915e:	e05c      	b.n	800921a <print_self_Details_Hitachi+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	3301      	adds	r3, #1
 8009164:	4619      	mov	r1, r3
 8009166:	4841      	ldr	r0, [pc, #260]	; (800926c <print_self_Details_Hitachi+0x284>)
 8009168:	f01d f996 	bl	8026498 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	4a32      	ldr	r2, [pc, #200]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009170:	3366      	adds	r3, #102	; 0x66
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	4619      	mov	r1, r3
 800917a:	483d      	ldr	r0, [pc, #244]	; (8009270 <print_self_Details_Hitachi+0x288>)
 800917c:	f01d f98c 	bl	8026498 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	4a2d      	ldr	r2, [pc, #180]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009184:	3370      	adds	r3, #112	; 0x70
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4619      	mov	r1, r3
 800918e:	4839      	ldr	r0, [pc, #228]	; (8009274 <print_self_Details_Hitachi+0x28c>)
 8009190:	f01d f982 	bl	8026498 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8009194:	79fb      	ldrb	r3, [r7, #7]
 8009196:	4a28      	ldr	r2, [pc, #160]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009198:	33fe      	adds	r3, #254	; 0xfe
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	4413      	add	r3, r2
 800919e:	889b      	ldrh	r3, [r3, #4]
 80091a0:	4619      	mov	r1, r3
 80091a2:	4835      	ldr	r0, [pc, #212]	; (8009278 <print_self_Details_Hitachi+0x290>)
 80091a4:	f01d f978 	bl	8026498 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	4a23      	ldr	r2, [pc, #140]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80091ac:	4413      	add	r3, r2
 80091ae:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80091b2:	4619      	mov	r1, r3
 80091b4:	4831      	ldr	r0, [pc, #196]	; (800927c <print_self_Details_Hitachi+0x294>)
 80091b6:	f01d f96f 	bl	8026498 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	4a1e      	ldr	r2, [pc, #120]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80091be:	4413      	add	r3, r2
 80091c0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80091c4:	4619      	mov	r1, r3
 80091c6:	482e      	ldr	r0, [pc, #184]	; (8009280 <print_self_Details_Hitachi+0x298>)
 80091c8:	f01d f966 	bl	8026498 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	4a1a      	ldr	r2, [pc, #104]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80091d0:	4413      	add	r3, r2
 80091d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091d6:	4619      	mov	r1, r3
 80091d8:	482a      	ldr	r0, [pc, #168]	; (8009284 <print_self_Details_Hitachi+0x29c>)
 80091da:	f01d f95d 	bl	8026498 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	4a15      	ldr	r2, [pc, #84]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80091e2:	338a      	adds	r3, #138	; 0x8a
 80091e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e8:	4619      	mov	r1, r3
 80091ea:	4827      	ldr	r0, [pc, #156]	; (8009288 <print_self_Details_Hitachi+0x2a0>)
 80091ec:	f01d f954 	bl	8026498 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	4a11      	ldr	r2, [pc, #68]	; (8009238 <print_self_Details_Hitachi+0x250>)
 80091f4:	3394      	adds	r3, #148	; 0x94
 80091f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091fa:	4619      	mov	r1, r3
 80091fc:	4823      	ldr	r0, [pc, #140]	; (800928c <print_self_Details_Hitachi+0x2a4>)
 80091fe:	f01d f94b 	bl	8026498 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	4a0c      	ldr	r2, [pc, #48]	; (8009238 <print_self_Details_Hitachi+0x250>)
 8009206:	339e      	adds	r3, #158	; 0x9e
 8009208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800920c:	4619      	mov	r1, r3
 800920e:	4820      	ldr	r0, [pc, #128]	; (8009290 <print_self_Details_Hitachi+0x2a8>)
 8009210:	f01d f942 	bl	8026498 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	3301      	adds	r3, #1
 8009218:	71fb      	strb	r3, [r7, #7]
 800921a:	4b07      	ldr	r3, [pc, #28]	; (8009238 <print_self_Details_Hitachi+0x250>)
 800921c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009220:	79fa      	ldrb	r2, [r7, #7]
 8009222:	429a      	cmp	r2, r3
 8009224:	d39c      	bcc.n	8009160 <print_self_Details_Hitachi+0x178>

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
 8009226:	4803      	ldr	r0, [pc, #12]	; (8009234 <print_self_Details_Hitachi+0x24c>)
 8009228:	f01d f9d2 	bl	80265d0 <puts>
#endif
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bdb0      	pop	{r4, r5, r7, pc}
 8009234:	08029084 	.word	0x08029084
 8009238:	20000504 	.word	0x20000504
 800923c:	080290d8 	.word	0x080290d8
 8009240:	080290fc 	.word	0x080290fc
 8009244:	08029120 	.word	0x08029120
 8009248:	0802914c 	.word	0x0802914c
 800924c:	08029178 	.word	0x08029178
 8009250:	080291a4 	.word	0x080291a4
 8009254:	080291d0 	.word	0x080291d0
 8009258:	080291f0 	.word	0x080291f0
 800925c:	08029200 	.word	0x08029200
 8009260:	08029210 	.word	0x08029210
 8009264:	0802922c 	.word	0x0802922c
 8009268:	0802925c 	.word	0x0802925c
 800926c:	08029270 	.word	0x08029270
 8009270:	08029284 	.word	0x08029284
 8009274:	080292a0 	.word	0x080292a0
 8009278:	080292bc 	.word	0x080292bc
 800927c:	080292d8 	.word	0x080292d8
 8009280:	080292f0 	.word	0x080292f0
 8009284:	08029304 	.word	0x08029304
 8009288:	08029318 	.word	0x08029318
 800928c:	08029334 	.word	0x08029334
 8009290:	08029350 	.word	0x08029350

08009294 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 800929a:	2300      	movs	r3, #0
 800929c:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800929e:	2300      	movs	r3, #0
 80092a0:	71fb      	strb	r3, [r7, #7]
 80092a2:	e058      	b.n	8009356 <Send_Init_After_Timeout+0xc2>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	4a31      	ldr	r2, [pc, #196]	; (800936c <Send_Init_After_Timeout+0xd8>)
 80092a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d04f      	beq.n	8009350 <Send_Init_After_Timeout+0xbc>
			}
#endif
#ifdef EI_2
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	4a2e      	ldr	r2, [pc, #184]	; (800936c <Send_Init_After_Timeout+0xd8>)
 80092b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f006 fe5d 	bl	800ff78 <HAL_Elaps_Ticks>
 80092be:	4602      	mov	r2, r0
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	492b      	ldr	r1, [pc, #172]	; (8009370 <Send_Init_After_Timeout+0xdc>)
 80092c4:	3394      	adds	r3, #148	; 0x94
 80092c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092ca:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
			if(
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d93e      	bls.n	8009350 <Send_Init_After_Timeout+0xbc>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	4a27      	ldr	r2, [pc, #156]	; (8009374 <Send_Init_After_Timeout+0xe0>)
 80092d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092da:	4618      	mov	r0, r3
 80092dc:	f006 fe4c 	bl	800ff78 <HAL_Elaps_Ticks>
 80092e0:	4602      	mov	r2, r0
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	4922      	ldr	r1, [pc, #136]	; (8009370 <Send_Init_After_Timeout+0xdc>)
 80092e6:	3394      	adds	r3, #148	; 0x94
 80092e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d92d      	bls.n	8009350 <Send_Init_After_Timeout+0xbc>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	4a20      	ldr	r2, [pc, #128]	; (8009378 <Send_Init_After_Timeout+0xe4>)
 80092f8:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d028      	beq.n	8009350 <Send_Init_After_Timeout+0xbc>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 80092fe:	79fb      	ldrb	r3, [r7, #7]
 8009300:	4a1e      	ldr	r2, [pc, #120]	; (800937c <Send_Init_After_Timeout+0xe8>)
 8009302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8009306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800930a:	d921      	bls.n	8009350 <Send_Init_After_Timeout+0xbc>
			)
			{

				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	4a17      	ldr	r2, [pc, #92]	; (800936c <Send_Init_After_Timeout+0xd8>)
 8009310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009314:	4618      	mov	r0, r3
 8009316:	f006 fe2f 	bl	800ff78 <HAL_Elaps_Ticks>
 800931a:	4603      	mov	r3, r0
 800931c:	4a18      	ldr	r2, [pc, #96]	; (8009380 <Send_Init_After_Timeout+0xec>)
 800931e:	fba2 2303 	umull	r2, r3, r2, r3
 8009322:	099b      	lsrs	r3, r3, #6
 8009324:	4619      	mov	r1, r3
 8009326:	4817      	ldr	r0, [pc, #92]	; (8009384 <Send_Init_After_Timeout+0xf0>)
 8009328:	f01d f8b6 	bl	8026498 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 800932c:	79fb      	ldrb	r3, [r7, #7]
 800932e:	4a16      	ldr	r2, [pc, #88]	; (8009388 <Send_Init_After_Timeout+0xf4>)
 8009330:	2101      	movs	r1, #1
 8009332:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8009334:	79fa      	ldrb	r2, [r7, #7]
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7f9 fb3c 	bl	80029b8 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	4a0d      	ldr	r2, [pc, #52]	; (8009378 <Send_Init_After_Timeout+0xe4>)
 8009344:	2101      	movs	r1, #1
 8009346:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	4a10      	ldr	r2, [pc, #64]	; (800938c <Send_Init_After_Timeout+0xf8>)
 800934c:	2101      	movs	r1, #1
 800934e:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	3301      	adds	r3, #1
 8009354:	71fb      	strb	r3, [r7, #7]
 8009356:	4b06      	ldr	r3, [pc, #24]	; (8009370 <Send_Init_After_Timeout+0xdc>)
 8009358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800935c:	79fa      	ldrb	r2, [r7, #7]
 800935e:	429a      	cmp	r2, r3
 8009360:	d3a0      	bcc.n	80092a4 <Send_Init_After_Timeout+0x10>
			}
#endif
		}
	}
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20002630 	.word	0x20002630
 8009370:	20000504 	.word	0x20000504
 8009374:	20002510 	.word	0x20002510
 8009378:	20002718 	.word	0x20002718
 800937c:	20002724 	.word	0x20002724
 8009380:	10624dd3 	.word	0x10624dd3
 8009384:	0802936c 	.word	0x0802936c
 8009388:	20002758 	.word	0x20002758
 800938c:	2000274c 	.word	0x2000274c

08009390 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800939a:	e037      	b.n	800940c <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 800939c:	79fa      	ldrb	r2, [r7, #7]
 800939e:	4921      	ldr	r1, [pc, #132]	; (8009424 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 80093a0:	4613      	mov	r3, r2
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	4413      	add	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	440b      	add	r3, r1
 80093aa:	3304      	adds	r3, #4
 80093ac:	781b      	ldrb	r3, [r3, #0]
		if(
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d006      	beq.n	80093c0 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 80093b6:	4413      	add	r3, r2
 80093b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d122      	bne.n	8009406 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	4a1a      	ldr	r2, [pc, #104]	; (800942c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80093c4:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d11d      	bne.n	8009406 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	4a17      	ldr	r2, [pc, #92]	; (800942c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80093ce:	3302      	adds	r3, #2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f006 fdce 	bl	800ff78 <HAL_Elaps_Ticks>
 80093dc:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80093de:	2b32      	cmp	r3, #50	; 0x32
 80093e0:	d911      	bls.n	8009406 <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 80093e2:	79fa      	ldrb	r2, [r7, #7]
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	4611      	mov	r1, r2
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fb f8e1 	bl	80045b0 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	4a0e      	ldr	r2, [pc, #56]	; (800942c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80093f2:	2100      	movs	r1, #0
 80093f4:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	4a0c      	ldr	r2, [pc, #48]	; (800942c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80093fa:	3302      	adds	r3, #2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	f04f 32ff 	mov.w	r2, #4294967295
 8009404:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	3301      	adds	r3, #1
 800940a:	71fb      	strb	r3, [r7, #7]
 800940c:	4b06      	ldr	r3, [pc, #24]	; (8009428 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 800940e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009412:	79fa      	ldrb	r2, [r7, #7]
 8009414:	429a      	cmp	r2, r3
 8009416:	d3c1      	bcc.n	800939c <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = RESET;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20002da4 	.word	0x20002da4
 8009428:	20000504 	.word	0x20000504
 800942c:	200033c4 	.word	0x200033c4

08009430 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009436:	2300      	movs	r3, #0
 8009438:	71fb      	strb	r3, [r7, #7]
 800943a:	e04e      	b.n	80094da <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 800943c:	79fb      	ldrb	r3, [r7, #7]
 800943e:	4a2c      	ldr	r2, [pc, #176]	; (80094f0 <Check_Recv_Status_fail+0xc0>)
 8009440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d045      	beq.n	80094d4 <Check_Recv_Status_fail+0xa4>
 8009448:	79fa      	ldrb	r2, [r7, #7]
 800944a:	492a      	ldr	r1, [pc, #168]	; (80094f4 <Check_Recv_Status_fail+0xc4>)
 800944c:	4613      	mov	r3, r2
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	4413      	add	r3, r2
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	440b      	add	r3, r1
 8009456:	3303      	adds	r3, #3
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d03a      	beq.n	80094d4 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	4a23      	ldr	r2, [pc, #140]	; (80094f0 <Check_Recv_Status_fail+0xc0>)
 8009462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009466:	4618      	mov	r0, r3
 8009468:	f006 fd86 	bl	800ff78 <HAL_Elaps_Ticks>
 800946c:	4602      	mov	r2, r0
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	4921      	ldr	r1, [pc, #132]	; (80094f8 <Check_Recv_Status_fail+0xc8>)
 8009472:	338a      	adds	r3, #138	; 0x8a
 8009474:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009478:	429a      	cmp	r2, r3
 800947a:	d92b      	bls.n	80094d4 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	4a1e      	ldr	r2, [pc, #120]	; (80094f8 <Check_Recv_Status_fail+0xc8>)
 8009480:	3366      	adds	r3, #102	; 0x66
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	6859      	ldr	r1, [r3, #4]
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	4a1b      	ldr	r2, [pc, #108]	; (80094f8 <Check_Recv_Status_fail+0xc8>)
 800948c:	338a      	adds	r3, #138	; 0x8a
 800948e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009492:	4a1a      	ldr	r2, [pc, #104]	; (80094fc <Check_Recv_Status_fail+0xcc>)
 8009494:	fba2 2303 	umull	r2, r3, r2, r3
 8009498:	099b      	lsrs	r3, r3, #6
 800949a:	461a      	mov	r2, r3
 800949c:	4818      	ldr	r0, [pc, #96]	; (8009500 <Check_Recv_Status_fail+0xd0>)
 800949e:	f01c fffb 	bl	8026498 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	4a12      	ldr	r2, [pc, #72]	; (80094f0 <Check_Recv_Status_fail+0xc0>)
 80094a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094aa:	4619      	mov	r1, r3
 80094ac:	4815      	ldr	r0, [pc, #84]	; (8009504 <Check_Recv_Status_fail+0xd4>)
 80094ae:	f01c fff3 	bl	8026498 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 80094b2:	f00f ffe7 	bl	8019484 <HAL_GetTick>
 80094b6:	4603      	mov	r3, r0
 80094b8:	4619      	mov	r1, r3
 80094ba:	4813      	ldr	r0, [pc, #76]	; (8009508 <Check_Recv_Status_fail+0xd8>)
 80094bc:	f01c ffec 	bl	8026498 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 80094c0:	79fa      	ldrb	r2, [r7, #7]
 80094c2:	490c      	ldr	r1, [pc, #48]	; (80094f4 <Check_Recv_Status_fail+0xc4>)
 80094c4:	4613      	mov	r3, r2
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	4413      	add	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	440b      	add	r3, r1
 80094ce:	3303      	adds	r3, #3
 80094d0:	2200      	movs	r2, #0
 80094d2:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80094d4:	79fb      	ldrb	r3, [r7, #7]
 80094d6:	3301      	adds	r3, #1
 80094d8:	71fb      	strb	r3, [r7, #7]
 80094da:	4b07      	ldr	r3, [pc, #28]	; (80094f8 <Check_Recv_Status_fail+0xc8>)
 80094dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094e0:	79fa      	ldrb	r2, [r7, #7]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d3aa      	bcc.n	800943c <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20002658 	.word	0x20002658
 80094f4:	20002da4 	.word	0x20002da4
 80094f8:	20000504 	.word	0x20000504
 80094fc:	10624dd3 	.word	0x10624dd3
 8009500:	08029398 	.word	0x08029398
 8009504:	080293cc 	.word	0x080293cc
 8009508:	080293fc 	.word	0x080293fc

0800950c <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 800950c:	b590      	push	{r4, r7, lr}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 800951e:	2301      	movs	r3, #1
 8009520:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	4a39      	ldr	r2, [pc, #228]	; (800960c <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8009526:	4413      	add	r3, r2
 8009528:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800952c:	2b01      	cmp	r3, #1
 800952e:	d168      	bne.n	8009602 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8009530:	4b37      	ldr	r3, [pc, #220]	; (8009610 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d164      	bne.n	8009602 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009538:	79fa      	ldrb	r2, [r7, #7]
 800953a:	4936      	ldr	r1, [pc, #216]	; (8009614 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 800953c:	4613      	mov	r3, r2
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	4413      	add	r3, r2
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	440b      	add	r3, r1
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f002 ffcd 	bl	800c4e8 <bcdToDec>
 800954e:	4603      	mov	r3, r0
 8009550:	461a      	mov	r2, r3
 8009552:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009556:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 800955a:	79fa      	ldrb	r2, [r7, #7]
 800955c:	492d      	ldr	r1, [pc, #180]	; (8009614 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 800955e:	4613      	mov	r3, r2
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	4413      	add	r3, r2
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	440b      	add	r3, r1
 8009568:	3301      	adds	r3, #1
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	4618      	mov	r0, r3
 800956e:	f002 ffbb 	bl	800c4e8 <bcdToDec>
 8009572:	4603      	mov	r3, r0
 8009574:	461a      	mov	r2, r3
 8009576:	4613      	mov	r3, r2
 8009578:	011b      	lsls	r3, r3, #4
 800957a:	1a9b      	subs	r3, r3, r2
 800957c:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 800957e:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8009580:	79fa      	ldrb	r2, [r7, #7]
 8009582:	4924      	ldr	r1, [pc, #144]	; (8009614 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8009584:	4613      	mov	r3, r2
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	4413      	add	r3, r2
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	440b      	add	r3, r1
 800958e:	3302      	adds	r3, #2
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	4618      	mov	r0, r3
 8009594:	f002 ffa8 	bl	800c4e8 <bcdToDec>
 8009598:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 800959a:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 800959c:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 800959e:	613b      	str	r3, [r7, #16]

		Get_time();
 80095a0:	f003 f89e 	bl	800c6e0 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80095a4:	4b1c      	ldr	r3, [pc, #112]	; (8009618 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80095ae:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 80095b2:	4b19      	ldr	r3, [pc, #100]	; (8009618 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	4619      	mov	r1, r3
 80095b8:	460b      	mov	r3, r1
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	1a5b      	subs	r3, r3, r1
 80095be:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80095c0:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 80095c2:	4a15      	ldr	r2, [pc, #84]	; (8009618 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80095c4:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 80095c6:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 80095c8:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80095ca:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	bfb8      	it	lt
 80095d6:	425b      	neglt	r3, r3
 80095d8:	2b01      	cmp	r3, #1
 80095da:	dd12      	ble.n	8009602 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80095e6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	4a07      	ldr	r2, [pc, #28]	; (800960c <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 80095ee:	3366      	adds	r3, #102	; 0x66
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	461a      	mov	r2, r3
 80095f8:	4808      	ldr	r0, [pc, #32]	; (800961c <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 80095fa:	f01c ff4d 	bl	8026498 <iprintf>
			Return_Value  = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8009602:	7dfb      	ldrb	r3, [r7, #23]
}
 8009604:	4618      	mov	r0, r3
 8009606:	371c      	adds	r7, #28
 8009608:	46bd      	mov	sp, r7
 800960a:	bd90      	pop	{r4, r7, pc}
 800960c:	20000504 	.word	0x20000504
 8009610:	200024e0 	.word	0x200024e0
 8009614:	200028b8 	.word	0x200028b8
 8009618:	20003f38 	.word	0x20003f38
 800961c:	08029408 	.word	0x08029408

08009620 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009626:	2300      	movs	r3, #0
 8009628:	71fb      	strb	r3, [r7, #7]
 800962a:	e045      	b.n	80096b8 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fed8 	bl	80083e4 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8009634:	79fa      	ldrb	r2, [r7, #7]
 8009636:	4926      	ldr	r1, [pc, #152]	; (80096d0 <Check_All_Peers+0xb0>)
 8009638:	4613      	mov	r3, r2
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	3304      	adds	r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4618      	mov	r0, r3
 8009648:	f006 fc96 	bl	800ff78 <HAL_Elaps_Ticks>
 800964c:	4602      	mov	r2, r0
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	4920      	ldr	r1, [pc, #128]	; (80096d4 <Check_All_Peers+0xb4>)
 8009652:	338a      	adds	r3, #138	; 0x8a
 8009654:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009658:	429a      	cmp	r2, r3
 800965a:	d92a      	bls.n	80096b2 <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 800965c:	79fa      	ldrb	r2, [r7, #7]
 800965e:	491c      	ldr	r1, [pc, #112]	; (80096d0 <Check_All_Peers+0xb0>)
 8009660:	4613      	mov	r3, r2
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	3301      	adds	r3, #1
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d11f      	bne.n	80096b2 <Check_All_Peers+0x92>
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <Check_All_Peers+0xb8>)
 8009676:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800967a:	79fa      	ldrb	r2, [r7, #7]
 800967c:	4814      	ldr	r0, [pc, #80]	; (80096d0 <Check_All_Peers+0xb0>)
 800967e:	4613      	mov	r3, r2
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4403      	add	r3, r0
 8009688:	3304      	adds	r3, #4
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4299      	cmp	r1, r3
 800968e:	d010      	beq.n	80096b2 <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = RESET;
 8009690:	79fa      	ldrb	r2, [r7, #7]
 8009692:	490f      	ldr	r1, [pc, #60]	; (80096d0 <Check_All_Peers+0xb0>)
 8009694:	4613      	mov	r3, r2
 8009696:	005b      	lsls	r3, r3, #1
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	3301      	adds	r3, #1
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 80096a4:	79fc      	ldrb	r4, [r7, #7]
 80096a6:	f00f feed 	bl	8019484 <HAL_GetTick>
 80096aa:	4603      	mov	r3, r0
 80096ac:	4a0a      	ldr	r2, [pc, #40]	; (80096d8 <Check_All_Peers+0xb8>)
 80096ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	3301      	adds	r3, #1
 80096b6:	71fb      	strb	r3, [r7, #7]
 80096b8:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <Check_All_Peers+0xb4>)
 80096ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096be:	79fa      	ldrb	r2, [r7, #7]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d3b3      	bcc.n	800962c <Check_All_Peers+0xc>
			}
		}
	}
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd90      	pop	{r4, r7, pc}
 80096ce:	bf00      	nop
 80096d0:	200033f8 	.word	0x200033f8
 80096d4:	20000504 	.word	0x20000504
 80096d8:	200037ac 	.word	0x200037ac

080096dc <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 80096dc:	b590      	push	{r4, r7, lr}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80096e2:	4976      	ldr	r1, [pc, #472]	; (80098bc <Check_for_RelayMisMatch+0x1e0>)
 80096e4:	4876      	ldr	r0, [pc, #472]	; (80098c0 <Check_for_RelayMisMatch+0x1e4>)
 80096e6:	f7f6 fdab 	bl	8000240 <strcmp>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 80e0 	beq.w	80098b2 <Check_for_RelayMisMatch+0x1d6>
	{
		return;
	}

	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 80096f2:	2300      	movs	r3, #0
 80096f4:	71fb      	strb	r3, [r7, #7]
 80096f6:	e0d4      	b.n	80098a2 <Check_for_RelayMisMatch+0x1c6>
	{
		if(EI_data.Hitachi_st.Interface_Type[Traverser] == ETHERNET)
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	4a72      	ldr	r2, [pc, #456]	; (80098c4 <Check_for_RelayMisMatch+0x1e8>)
 80096fc:	4413      	add	r3, r2
 80096fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009702:	2b01      	cmp	r3, #1
 8009704:	f000 80c7 	beq.w	8009896 <Check_for_RelayMisMatch+0x1ba>
		{
			continue;
		}

		if((HAL_Elaps_Ticks(Check_Clk[Traverser]) < FIVE_SEC ) || (MisMatchFlag[Traverser] == SET))
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	4a6f      	ldr	r2, [pc, #444]	; (80098c8 <Check_for_RelayMisMatch+0x1ec>)
 800970c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009710:	4618      	mov	r0, r3
 8009712:	f006 fc31 	bl	800ff78 <HAL_Elaps_Ticks>
 8009716:	4603      	mov	r3, r0
 8009718:	f241 3287 	movw	r2, #4999	; 0x1387
 800971c:	4293      	cmp	r3, r2
 800971e:	d906      	bls.n	800972e <Check_for_RelayMisMatch+0x52>
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	4a6a      	ldr	r2, [pc, #424]	; (80098cc <Check_for_RelayMisMatch+0x1f0>)
 8009724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009728:	2b01      	cmp	r3, #1
 800972a:	f040 80ac 	bne.w	8009886 <Check_for_RelayMisMatch+0x1aa>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (SelfLinkFlag[Traverser] == RESET))
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	4a67      	ldr	r2, [pc, #412]	; (80098d0 <Check_for_RelayMisMatch+0x1f4>)
 8009732:	5cd3      	ldrb	r3, [r2, r3]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d116      	bne.n	8009766 <Check_for_RelayMisMatch+0x8a>
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	4a66      	ldr	r2, [pc, #408]	; (80098d4 <Check_for_RelayMisMatch+0x1f8>)
 800973c:	5cd3      	ldrb	r3, [r2, r3]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d111      	bne.n	8009766 <Check_for_RelayMisMatch+0x8a>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8009742:	79fa      	ldrb	r2, [r7, #7]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a62      	ldr	r2, [pc, #392]	; (80098d8 <Check_for_RelayMisMatch+0x1fc>)
 800974e:	1898      	adds	r0, r3, r2
 8009750:	79fa      	ldrb	r2, [r7, #7]
 8009752:	4613      	mov	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4413      	add	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4a60      	ldr	r2, [pc, #384]	; (80098dc <Check_for_RelayMisMatch+0x200>)
 800975c:	4413      	add	r3, r2
 800975e:	2214      	movs	r2, #20
 8009760:	4619      	mov	r1, r3
 8009762:	f01c fd89 	bl	8026278 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8009766:	79fa      	ldrb	r2, [r7, #7]
 8009768:	495b      	ldr	r1, [pc, #364]	; (80098d8 <Check_for_RelayMisMatch+0x1fc>)
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	3312      	adds	r3, #18
 8009776:	8819      	ldrh	r1, [r3, #0]
 8009778:	79fa      	ldrb	r2, [r7, #7]
 800977a:	4858      	ldr	r0, [pc, #352]	; (80098dc <Check_for_RelayMisMatch+0x200>)
 800977c:	4613      	mov	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4403      	add	r3, r0
 8009786:	3312      	adds	r3, #18
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	4299      	cmp	r1, r3
 800978c:	d076      	beq.n	800987c <Check_for_RelayMisMatch+0x1a0>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 800978e:	79fb      	ldrb	r3, [r7, #7]
 8009790:	4a53      	ldr	r2, [pc, #332]	; (80098e0 <Check_for_RelayMisMatch+0x204>)
 8009792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009796:	4618      	mov	r0, r3
 8009798:	f006 fbee 	bl	800ff78 <HAL_Elaps_Ticks>
 800979c:	4603      	mov	r3, r0
 800979e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097a2:	d37a      	bcc.n	800989a <Check_for_RelayMisMatch+0x1be>
				{
					continue;
				}
				else
				{
					MisMatchFlag[Traverser] = SET;
 80097a4:	79fb      	ldrb	r3, [r7, #7]
 80097a6:	4a49      	ldr	r2, [pc, #292]	; (80098cc <Check_for_RelayMisMatch+0x1f0>)
 80097a8:	2101      	movs	r1, #1
 80097aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if( ((Main_Relays_st[Traverser].RelayIPS_CRC == 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC != 0)) || ((Main_Relays_st[Traverser].RelayIPS_CRC != 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC == 0)) )
 80097ae:	79fa      	ldrb	r2, [r7, #7]
 80097b0:	4949      	ldr	r1, [pc, #292]	; (80098d8 <Check_for_RelayMisMatch+0x1fc>)
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	3312      	adds	r3, #18
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10a      	bne.n	80097da <Check_for_RelayMisMatch+0xfe>
 80097c4:	79fa      	ldrb	r2, [r7, #7]
 80097c6:	4945      	ldr	r1, [pc, #276]	; (80098dc <Check_for_RelayMisMatch+0x200>)
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	3312      	adds	r3, #18
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d115      	bne.n	8009806 <Check_for_RelayMisMatch+0x12a>
 80097da:	79fa      	ldrb	r2, [r7, #7]
 80097dc:	493e      	ldr	r1, [pc, #248]	; (80098d8 <Check_for_RelayMisMatch+0x1fc>)
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	440b      	add	r3, r1
 80097e8:	3312      	adds	r3, #18
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00f      	beq.n	8009810 <Check_for_RelayMisMatch+0x134>
 80097f0:	79fa      	ldrb	r2, [r7, #7]
 80097f2:	493a      	ldr	r1, [pc, #232]	; (80098dc <Check_for_RelayMisMatch+0x200>)
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	3312      	adds	r3, #18
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <Check_for_RelayMisMatch+0x134>
					{
						MisMatchFlag[Traverser] = RESET;
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	4a30      	ldr	r2, [pc, #192]	; (80098cc <Check_for_RelayMisMatch+0x1f0>)
 800980a:	2100      	movs	r1, #0
 800980c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(MisMatchFlag[Traverser] ==  SET)
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	4a2e      	ldr	r2, [pc, #184]	; (80098cc <Check_for_RelayMisMatch+0x1f0>)
 8009814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d134      	bne.n	8009886 <Check_for_RelayMisMatch+0x1aa>
					{
						printf("S:%u|O:%u\n",SelfLinkFlag[Traverser],OtherCardLink_Flag[Traverser]);
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	4a2d      	ldr	r2, [pc, #180]	; (80098d4 <Check_for_RelayMisMatch+0x1f8>)
 8009820:	5cd3      	ldrb	r3, [r2, r3]
 8009822:	4619      	mov	r1, r3
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	4a2a      	ldr	r2, [pc, #168]	; (80098d0 <Check_for_RelayMisMatch+0x1f4>)
 8009828:	5cd3      	ldrb	r3, [r2, r3]
 800982a:	461a      	mov	r2, r3
 800982c:	482d      	ldr	r0, [pc, #180]	; (80098e4 <Check_for_RelayMisMatch+0x208>)
 800982e:	f01c fe33 	bl	8026498 <iprintf>
						printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	4a23      	ldr	r2, [pc, #140]	; (80098c4 <Check_for_RelayMisMatch+0x1e8>)
 8009836:	3366      	adds	r3, #102	; 0x66
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	4619      	mov	r1, r3
 8009840:	4829      	ldr	r0, [pc, #164]	; (80098e8 <Check_for_RelayMisMatch+0x20c>)
 8009842:	f01c fe29 	bl	8026498 <iprintf>
						printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8009846:	79fa      	ldrb	r2, [r7, #7]
 8009848:	4923      	ldr	r1, [pc, #140]	; (80098d8 <Check_for_RelayMisMatch+0x1fc>)
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	440b      	add	r3, r1
 8009854:	3312      	adds	r3, #18
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	4619      	mov	r1, r3
 800985a:	4824      	ldr	r0, [pc, #144]	; (80098ec <Check_for_RelayMisMatch+0x210>)
 800985c:	f01c fe1c 	bl	8026498 <iprintf>
						printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8009860:	79fa      	ldrb	r2, [r7, #7]
 8009862:	491e      	ldr	r1, [pc, #120]	; (80098dc <Check_for_RelayMisMatch+0x200>)
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	440b      	add	r3, r1
 800986e:	3312      	adds	r3, #18
 8009870:	881b      	ldrh	r3, [r3, #0]
 8009872:	4619      	mov	r1, r3
 8009874:	481e      	ldr	r0, [pc, #120]	; (80098f0 <Check_for_RelayMisMatch+0x214>)
 8009876:	f01c fe0f 	bl	8026498 <iprintf>
 800987a:	e004      	b.n	8009886 <Check_for_RelayMisMatch+0x1aa>
					}
				}
			}
			else
			{
				MisMatchFlag[Traverser] = RESET; /* If both Relay CRC is Matching MisMatch will be RESET */
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	4a13      	ldr	r2, [pc, #76]	; (80098cc <Check_for_RelayMisMatch+0x1f0>)
 8009880:	2100      	movs	r1, #0
 8009882:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
		Check_Clk[Traverser] = HAL_GetTick();
 8009886:	79fc      	ldrb	r4, [r7, #7]
 8009888:	f00f fdfc 	bl	8019484 <HAL_GetTick>
 800988c:	4603      	mov	r3, r0
 800988e:	4a0e      	ldr	r2, [pc, #56]	; (80098c8 <Check_for_RelayMisMatch+0x1ec>)
 8009890:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009894:	e002      	b.n	800989c <Check_for_RelayMisMatch+0x1c0>
			continue;
 8009896:	bf00      	nop
 8009898:	e000      	b.n	800989c <Check_for_RelayMisMatch+0x1c0>
					continue;
 800989a:	bf00      	nop
	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	3301      	adds	r3, #1
 80098a0:	71fb      	strb	r3, [r7, #7]
 80098a2:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <Check_for_RelayMisMatch+0x1e8>)
 80098a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098a8:	79fa      	ldrb	r2, [r7, #7]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	f4ff af24 	bcc.w	80096f8 <Check_for_RelayMisMatch+0x1c>
 80098b0:	e000      	b.n	80098b4 <Check_for_RelayMisMatch+0x1d8>
		return;
 80098b2:	bf00      	nop
	}
}
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd90      	pop	{r4, r7, pc}
 80098ba:	bf00      	nop
 80098bc:	08027f98 	.word	0x08027f98
 80098c0:	20000505 	.word	0x20000505
 80098c4:	20000504 	.word	0x20000504
 80098c8:	200037d4 	.word	0x200037d4
 80098cc:	20002550 	.word	0x20002550
 80098d0:	200025fc 	.word	0x200025fc
 80098d4:	200025f0 	.word	0x200025f0
 80098d8:	200035b0 	.word	0x200035b0
 80098dc:	20003678 	.word	0x20003678
 80098e0:	20002564 	.word	0x20002564
 80098e4:	08029448 	.word	0x08029448
 80098e8:	08029454 	.word	0x08029454
 80098ec:	08029460 	.word	0x08029460
 80098f0:	08029470 	.word	0x08029470

080098f4 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 80098fe:	f00f fdc1 	bl	8019484 <HAL_GetTick>
 8009902:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8009904:	79fa      	ldrb	r2, [r7, #7]
 8009906:	4935      	ldr	r1, [pc, #212]	; (80099dc <CheckOtherLinkStatus+0xe8>)
 8009908:	4613      	mov	r3, r2
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	4413      	add	r3, r2
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	440b      	add	r3, r1
 8009912:	3302      	adds	r3, #2
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d11d      	bne.n	8009956 <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	4930      	ldr	r1, [pc, #192]	; (80099e0 <CheckOtherLinkStatus+0xec>)
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8009924:	79fa      	ldrb	r2, [r7, #7]
 8009926:	492f      	ldr	r1, [pc, #188]	; (80099e4 <CheckOtherLinkStatus+0xf0>)
 8009928:	4613      	mov	r3, r2
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	4413      	add	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	440b      	add	r3, r1
 8009932:	3304      	adds	r3, #4
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009938:	79fa      	ldrb	r2, [r7, #7]
 800993a:	492a      	ldr	r1, [pc, #168]	; (80099e4 <CheckOtherLinkStatus+0xf0>)
 800993c:	4613      	mov	r3, r2
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	4413      	add	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	440b      	add	r3, r1
 8009946:	3301      	adds	r3, #1
 8009948:	2201      	movs	r2, #1
 800994a:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	4a26      	ldr	r2, [pc, #152]	; (80099e8 <CheckOtherLinkStatus+0xf4>)
 8009950:	2101      	movs	r1, #1
 8009952:	54d1      	strb	r1, [r2, r3]
 8009954:	e02e      	b.n	80099b4 <CheckOtherLinkStatus+0xc0>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = RESET;
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	4a23      	ldr	r2, [pc, #140]	; (80099e8 <CheckOtherLinkStatus+0xf4>)
 800995a:	2100      	movs	r1, #0
 800995c:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 800995e:	79fa      	ldrb	r2, [r7, #7]
 8009960:	4920      	ldr	r1, [pc, #128]	; (80099e4 <CheckOtherLinkStatus+0xf0>)
 8009962:	4613      	mov	r3, r2
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	440b      	add	r3, r1
 800996c:	3308      	adds	r3, #8
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = RESET;
 8009972:	79fa      	ldrb	r2, [r7, #7]
 8009974:	491b      	ldr	r1, [pc, #108]	; (80099e4 <CheckOtherLinkStatus+0xf0>)
 8009976:	4613      	mov	r3, r2
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	440b      	add	r3, r1
 8009980:	3301      	adds	r3, #1
 8009982:	2200      	movs	r2, #0
 8009984:	701a      	strb	r2, [r3, #0]
		OtherCard_Relays_st[SourceIndex].RelayIPS_CRC = 0;
 8009986:	79fa      	ldrb	r2, [r7, #7]
 8009988:	4918      	ldr	r1, [pc, #96]	; (80099ec <CheckOtherLinkStatus+0xf8>)
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	440b      	add	r3, r1
 8009994:	3312      	adds	r3, #18
 8009996:	2200      	movs	r2, #0
 8009998:	801a      	strh	r2, [r3, #0]
		memset(&OtherCard_Relays_st[SourceIndex].RelayIPS_Buff,0,sizeof(OtherCard_Relays_st[SourceIndex].RelayIPS_Buff));
 800999a:	79fa      	ldrb	r2, [r7, #7]
 800999c:	4613      	mov	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4a11      	ldr	r2, [pc, #68]	; (80099ec <CheckOtherLinkStatus+0xf8>)
 80099a6:	4413      	add	r3, r2
 80099a8:	3301      	adds	r3, #1
 80099aa:	2210      	movs	r2, #16
 80099ac:	2100      	movs	r1, #0
 80099ae:	4618      	mov	r0, r3
 80099b0:	f01c fc8a 	bl	80262c8 <memset>
	}

	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 80099b4:	79fa      	ldrb	r2, [r7, #7]
 80099b6:	4909      	ldr	r1, [pc, #36]	; (80099dc <CheckOtherLinkStatus+0xe8>)
 80099b8:	4613      	mov	r3, r2
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	4413      	add	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	440b      	add	r3, r1
 80099c2:	3301      	adds	r3, #1
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d104      	bne.n	80099d4 <CheckOtherLinkStatus+0xe0>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	4908      	ldr	r1, [pc, #32]	; (80099f0 <CheckOtherLinkStatus+0xfc>)
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20002e94 	.word	0x20002e94
 80099e0:	200025c8 	.word	0x200025c8
 80099e4:	20003470 	.word	0x20003470
 80099e8:	200025fc 	.word	0x200025fc
 80099ec:	20003678 	.word	0x20003678
 80099f0:	20002510 	.word	0x20002510

080099f4 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 80099f8:	4b1a      	ldr	r3, [pc, #104]	; (8009a64 <SendRelay2_Other+0x70>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f006 fabb 	bl	800ff78 <HAL_Elaps_Ticks>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a08:	d92a      	bls.n	8009a60 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8009a0a:	2214      	movs	r2, #20
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	4816      	ldr	r0, [pc, #88]	; (8009a68 <SendRelay2_Other+0x74>)
 8009a10:	f01c fc5a 	bl	80262c8 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8009a14:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <SendRelay2_Other+0x78>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4a13      	ldr	r2, [pc, #76]	; (8009a70 <SendRelay2_Other+0x7c>)
 8009a22:	4413      	add	r3, r2
 8009a24:	2214      	movs	r2, #20
 8009a26:	4619      	mov	r1, r3
 8009a28:	480f      	ldr	r0, [pc, #60]	; (8009a68 <SendRelay2_Other+0x74>)
 8009a2a:	f01c fc25 	bl	8026278 <memcpy>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8009a2e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8009a32:	f007 f81d 	bl	8010a70 <TransmitCanPkt>
#endif

		++Traverser;
 8009a36:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <SendRelay2_Other+0x78>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	4a0b      	ldr	r2, [pc, #44]	; (8009a6c <SendRelay2_Other+0x78>)
 8009a3e:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009a40:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <SendRelay2_Other+0x80>)
 8009a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a46:	461a      	mov	r2, r3
 8009a48:	4b08      	ldr	r3, [pc, #32]	; (8009a6c <SendRelay2_Other+0x78>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d102      	bne.n	8009a56 <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009a50:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <SendRelay2_Other+0x78>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8009a56:	f00f fd15 	bl	8019484 <HAL_GetTick>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	4a01      	ldr	r2, [pc, #4]	; (8009a64 <SendRelay2_Other+0x70>)
 8009a5e:	6013      	str	r3, [r2, #0]
	}
}
 8009a60:	bf00      	nop
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	200037fc 	.word	0x200037fc
 8009a68:	20003740 	.word	0x20003740
 8009a6c:	20003800 	.word	0x20003800
 8009a70:	200035b0 	.word	0x200035b0
 8009a74:	20000504 	.word	0x20000504

08009a78 <Process_HitachiEI>:




void Process_HitachiEI(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
	while(1)
	{
		process_to_comReceived();
 8009a7c:	f7f7 fc34 	bl	80012e8 <process_to_comReceived>
		Check_OnlineDiag_OFC_Modem();
 8009a80:	f7f7 fa9c 	bl	8000fbc <Check_OnlineDiag_OFC_Modem>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009a84:	f016 ffec 	bl	8020a60 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8009a88:	481b      	ldr	r0, [pc, #108]	; (8009af8 <Process_HitachiEI+0x80>)
 8009a8a:	f013 f861 	bl	801cb50 <HAL_IWDG_Refresh>

		Feed_wdt();
 8009a8e:	f00c fa5f 	bl	8015f50 <Feed_wdt>

		readCanToStructs();
 8009a92:	f007 fdc5 	bl	8011620 <readCanToStructs>

		Check_for_cmd();
 8009a96:	f7f7 f85f 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 8009a9a:	f7f7 fdc9 	bl	8001630 <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8009a9e:	f7f7 fe35 	bl	800170c <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8009aa2:	f7fe ffa3 	bl	80089ec <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8009aa6:	f7fe fec9 	bl	800883c <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 8009aaa:	f7fe ff33 	bl	8008914 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8009aae:	f7fe fe35 	bl	800871c <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8009ab2:	f7ff fdb5 	bl	8009620 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8009ab6:	f7ff fc6b 	bl	8009390 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 8009aba:	f7ff fbeb 	bl	8009294 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8009abe:	f7ff fcb7 	bl	8009430 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8009ac2:	f002 fe6f 	bl	800c7a4 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8009ac6:	f7ff fe09 	bl	80096dc <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8009aca:	f7ff ff93 	bl	80099f4 <SendRelay2_Other>

		Print_BuildDat_Details();
 8009ace:	f00e fc5f 	bl	8018390 <Print_BuildDat_Details>

		CheckEIPC_DAT_CRC();
 8009ad2:	f7f7 fa3b 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8009ad6:	4b09      	ldr	r3, [pc, #36]	; (8009afc <Process_HitachiEI+0x84>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <Process_HitachiEI+0x6e>
		{
			gucFlagUpdate = 3;
 8009ade:	4b08      	ldr	r3, [pc, #32]	; (8009b00 <Process_HitachiEI+0x88>)
 8009ae0:	2203      	movs	r2, #3
 8009ae2:	701a      	strb	r2, [r3, #0]
			break;
 8009ae4:	e002      	b.n	8009aec <Process_HitachiEI+0x74>
		}

		Enable_UART_Interrupts();
 8009ae6:	f00f fabb 	bl	8019060 <Enable_UART_Interrupts>
		process_to_comReceived();
 8009aea:	e7c7      	b.n	8009a7c <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8009aec:	f00e fb4e 	bl	801818c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <Process_HitachiEI+0x80>)
 8009af2:	f013 f82d 	bl	801cb50 <HAL_IWDG_Refresh>
		Data_Processing();
 8009af6:	e7f9      	b.n	8009aec <Process_HitachiEI+0x74>
 8009af8:	2000b3c8 	.word	0x2000b3c8
 8009afc:	20000bba 	.word	0x20000bba
 8009b00:	20000fbd 	.word	0x20000fbd

08009b04 <ReAssignData>:

#endif


void ReAssignData(void)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	f5ad 6dd7 	sub.w	sp, sp, #1720	; 0x6b8
 8009b0a:	af00      	add	r7, sp, #0
	EI_t EI_dataTempEthernet,EI_dataTempSerial;
	uint8_t PeerTraverser = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
	bool SerialFlag = RESET;
 8009b12:	2300      	movs	r3, #0
 8009b14:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
	bool OrderOKFlag = SET;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	uint8_t EthernetIndex = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
	uint8_t SerialIndex = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3



	printf("EI_data.Hitachi_st.EnableSerialPort:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009b2a:	4b8d      	ldr	r3, [pc, #564]	; (8009d60 <ReAssignData+0x25c>)
 8009b2c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009b30:	4619      	mov	r1, r3
 8009b32:	488c      	ldr	r0, [pc, #560]	; (8009d64 <ReAssignData+0x260>)
 8009b34:	f01c fcb0 	bl	8026498 <iprintf>
	if(EI_data.Hitachi_st.EnableSerialPort <= 0)
 8009b38:	4b89      	ldr	r3, [pc, #548]	; (8009d60 <ReAssignData+0x25c>)
 8009b3a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 83d8 	beq.w	800a2f4 <ReAssignData+0x7f0>
	{
		return;
	}

	memset(&EI_dataTempEthernet,0,sizeof(EI_t));
 8009b44:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8009b48:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f01c fbba 	bl	80262c8 <memset>
	memset(&EI_dataTempSerial,0,sizeof(EI_t));
 8009b54:	463b      	mov	r3, r7
 8009b56:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f01c fbb3 	bl	80262c8 <memset>


	/* Check whether the order is valid */
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009b62:	2300      	movs	r3, #0
 8009b64:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009b68:	e026      	b.n	8009bb8 <ReAssignData+0xb4>
	{
		if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 8009b6a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009b6e:	4a7c      	ldr	r2, [pc, #496]	; (8009d60 <ReAssignData+0x25c>)
 8009b70:	4413      	add	r3, r2
 8009b72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d103      	bne.n	8009b82 <ReAssignData+0x7e>
		{
			SerialFlag = SET;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
 8009b80:	e015      	b.n	8009bae <ReAssignData+0xaa>
		}
		else if ((EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET) && (SerialFlag == SET))
 8009b82:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009b86:	4a76      	ldr	r2, [pc, #472]	; (8009d60 <ReAssignData+0x25c>)
 8009b88:	4413      	add	r3, r2
 8009b8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d10d      	bne.n	8009bae <ReAssignData+0xaa>
 8009b92:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d009      	beq.n	8009bae <ReAssignData+0xaa>
		{
			printf("EI_data.Hitachi_st.EnableSerialPort11111111111:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009b9a:	4b71      	ldr	r3, [pc, #452]	; (8009d60 <ReAssignData+0x25c>)
 8009b9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4871      	ldr	r0, [pc, #452]	; (8009d68 <ReAssignData+0x264>)
 8009ba4:	f01c fc78 	bl	8026498 <iprintf>
			OrderOKFlag = RESET;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009bae:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009bb8:	4b69      	ldr	r3, [pc, #420]	; (8009d60 <ReAssignData+0x25c>)
 8009bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bbe:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d3d1      	bcc.n	8009b6a <ReAssignData+0x66>
		}
	}

	if(OrderOKFlag == RESET)
 8009bc6:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8009bca:	f083 0301 	eor.w	r3, r3, #1
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 838b 	beq.w	800a2ec <ReAssignData+0x7e8>
	{
		memcpy(&EI_BeforeReorderData,&EI_data,sizeof(EI_t));
 8009bd6:	4a65      	ldr	r2, [pc, #404]	; (8009d6c <ReAssignData+0x268>)
 8009bd8:	4b61      	ldr	r3, [pc, #388]	; (8009d60 <ReAssignData+0x25c>)
 8009bda:	4610      	mov	r0, r2
 8009bdc:	4619      	mov	r1, r3
 8009bde:	f44f 7356 	mov.w	r3, #856	; 0x358
 8009be2:	461a      	mov	r2, r3
 8009be4:	f01c fb48 	bl	8026278 <memcpy>
		ReorderFlag = SET;
 8009be8:	4b61      	ldr	r3, [pc, #388]	; (8009d70 <ReAssignData+0x26c>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	701a      	strb	r2, [r3, #0]
		printf("\n============================ CONFIG DATA IS NOT IN ORDER RE-ORDERING THE DATA ============================\n");
 8009bee:	4861      	ldr	r0, [pc, #388]	; (8009d74 <ReAssignData+0x270>)
 8009bf0:	f01c fcee 	bl	80265d0 <puts>

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009bfa:	e172      	b.n	8009ee2 <ReAssignData+0x3de>
		{
			if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET)
 8009bfc:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c00:	4a57      	ldr	r2, [pc, #348]	; (8009d60 <ReAssignData+0x25c>)
 8009c02:	4413      	add	r3, r2
 8009c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	f040 80b5 	bne.w	8009d78 <ReAssignData+0x274>
			{
				EI_dataTempEthernet.Hitachi_st.ClockMaster[EthernetIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 8009c0e:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009c12:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009c16:	4952      	ldr	r1, [pc, #328]	; (8009d60 <ReAssignData+0x25c>)
 8009c18:	440a      	add	r2, r1
 8009c1a:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009c1e:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009c22:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009c26:	4413      	add	r3, r2
 8009c28:	460a      	mov	r2, r1
 8009c2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempEthernet.Hitachi_st.Interface_Type[EthernetIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 8009c2e:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009c32:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009c36:	494a      	ldr	r1, [pc, #296]	; (8009d60 <ReAssignData+0x25c>)
 8009c38:	440a      	add	r2, r1
 8009c3a:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8009c3e:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009c42:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009c46:	4413      	add	r3, r2
 8009c48:	460a      	mov	r2, r1
 8009c4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 8009c4e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c52:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 8009c56:	4a42      	ldr	r2, [pc, #264]	; (8009d60 <ReAssignData+0x25c>)
 8009c58:	3366      	adds	r3, #102	; 0x66
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009c64:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8009c68:	f100 0366 	add.w	r3, r0, #102	; 0x66
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 8009c72:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c76:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 8009c7a:	4a39      	ldr	r2, [pc, #228]	; (8009d60 <ReAssignData+0x25c>)
 8009c7c:	3370      	adds	r3, #112	; 0x70
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009c88:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8009c8c:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	440b      	add	r3, r1
 8009c94:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 8009c96:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c9a:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009c9e:	4a30      	ldr	r2, [pc, #192]	; (8009d60 <ReAssignData+0x25c>)
 8009ca0:	33fe      	adds	r3, #254	; 0xfe
 8009ca2:	005b      	lsls	r3, r3, #1
 8009ca4:	4413      	add	r3, r2
 8009ca6:	8898      	ldrh	r0, [r3, #4]
 8009ca8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009cac:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009cb0:	f101 03fe 	add.w	r3, r1, #254	; 0xfe
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	4413      	add	r3, r2
 8009cb8:	4602      	mov	r2, r0
 8009cba:	809a      	strh	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.Bool_outputs[EthernetIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 8009cbc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009cc0:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009cc4:	4926      	ldr	r1, [pc, #152]	; (8009d60 <ReAssignData+0x25c>)
 8009cc6:	440a      	add	r2, r1
 8009cc8:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8009ccc:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009cd0:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009cd4:	4413      	add	r3, r2
 8009cd6:	460a      	mov	r2, r1
 8009cd8:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 8009cdc:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ce0:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 8009ce4:	491e      	ldr	r1, [pc, #120]	; (8009d60 <ReAssignData+0x25c>)
 8009ce6:	338a      	adds	r3, #138	; 0x8a
 8009ce8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009cec:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009cf0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009cf4:	328a      	adds	r2, #138	; 0x8a
 8009cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 8009cfa:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009cfe:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 8009d02:	4917      	ldr	r1, [pc, #92]	; (8009d60 <ReAssignData+0x25c>)
 8009d04:	3394      	adds	r3, #148	; 0x94
 8009d06:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d0a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d0e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d12:	3294      	adds	r2, #148	; 0x94
 8009d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 8009d18:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d1c:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 8009d20:	490f      	ldr	r1, [pc, #60]	; (8009d60 <ReAssignData+0x25c>)
 8009d22:	339e      	adds	r3, #158	; 0x9e
 8009d24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d28:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d2c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d30:	329e      	adds	r2, #158	; 0x9e
 8009d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempEthernet.Hitachi_st.PeersCnt;
 8009d36:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d3a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d42:	3301      	adds	r3, #1
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d4a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d4e:	f883 2020 	strb.w	r2, [r3, #32]
				++EthernetIndex;
 8009d52:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009d56:	3301      	adds	r3, #1
 8009d58:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
 8009d5c:	e0bc      	b.n	8009ed8 <ReAssignData+0x3d4>
 8009d5e:	bf00      	nop
 8009d60:	20000504 	.word	0x20000504
 8009d64:	08029480 	.word	0x08029480
 8009d68:	080294a8 	.word	0x080294a8
 8009d6c:	2000085c 	.word	0x2000085c
 8009d70:	2000254e 	.word	0x2000254e
 8009d74:	080294dc 	.word	0x080294dc
			}
			else if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 8009d78:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d7c:	4aa9      	ldr	r2, [pc, #676]	; (800a024 <ReAssignData+0x520>)
 8009d7e:	4413      	add	r3, r2
 8009d80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	f040 80a7 	bne.w	8009ed8 <ReAssignData+0x3d4>
			{
				EI_dataTempSerial.Hitachi_st.ClockMaster[SerialIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 8009d8a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009d8e:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009d92:	49a4      	ldr	r1, [pc, #656]	; (800a024 <ReAssignData+0x520>)
 8009d94:	440a      	add	r2, r1
 8009d96:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009d9a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009d9e:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009da2:	4413      	add	r3, r2
 8009da4:	460a      	mov	r2, r1
 8009da6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempSerial.Hitachi_st.Interface_Type[SerialIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 8009daa:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009dae:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009db2:	499c      	ldr	r1, [pc, #624]	; (800a024 <ReAssignData+0x520>)
 8009db4:	440a      	add	r2, r1
 8009db6:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8009dba:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009dbe:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009dc2:	4413      	add	r3, r2
 8009dc4:	460a      	mov	r2, r1
 8009dc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 8009dca:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009dce:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 8009dd2:	4a94      	ldr	r2, [pc, #592]	; (800a024 <ReAssignData+0x520>)
 8009dd4:	3366      	adds	r3, #102	; 0x66
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009de0:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 8009de4:	f100 0366 	add.w	r3, r0, #102	; 0x66
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	440b      	add	r3, r1
 8009dec:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 8009dee:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009df2:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 8009df6:	4a8b      	ldr	r2, [pc, #556]	; (800a024 <ReAssignData+0x520>)
 8009df8:	3370      	adds	r3, #112	; 0x70
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009e04:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 8009e08:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	440b      	add	r3, r1
 8009e10:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][SerialIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 8009e12:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e16:	f897 16b3 	ldrb.w	r1, [r7, #1715]	; 0x6b3
 8009e1a:	4a82      	ldr	r2, [pc, #520]	; (800a024 <ReAssignData+0x520>)
 8009e1c:	33fe      	adds	r3, #254	; 0xfe
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	4413      	add	r3, r2
 8009e22:	8898      	ldrh	r0, [r3, #4]
 8009e24:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009e28:	f5a3 62d7 	sub.w	r2, r3, #1720	; 0x6b8
 8009e2c:	f101 03fe 	add.w	r3, r1, #254	; 0xfe
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	4413      	add	r3, r2
 8009e34:	4602      	mov	r2, r0
 8009e36:	809a      	strh	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.Bool_outputs[SerialIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 8009e38:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009e3c:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009e40:	4978      	ldr	r1, [pc, #480]	; (800a024 <ReAssignData+0x520>)
 8009e42:	440a      	add	r2, r1
 8009e44:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8009e48:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009e4c:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009e50:	4413      	add	r3, r2
 8009e52:	460a      	mov	r2, r1
 8009e54:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 8009e58:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e5c:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009e60:	4970      	ldr	r1, [pc, #448]	; (800a024 <ReAssignData+0x520>)
 8009e62:	338a      	adds	r3, #138	; 0x8a
 8009e64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009e68:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009e6c:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009e70:	328a      	adds	r2, #138	; 0x8a
 8009e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 8009e76:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e7a:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009e7e:	4969      	ldr	r1, [pc, #420]	; (800a024 <ReAssignData+0x520>)
 8009e80:	3394      	adds	r3, #148	; 0x94
 8009e82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009e86:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009e8a:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009e8e:	3294      	adds	r2, #148	; 0x94
 8009e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[SerialIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 8009e94:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e98:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009e9c:	4961      	ldr	r1, [pc, #388]	; (800a024 <ReAssignData+0x520>)
 8009e9e:	339e      	adds	r3, #158	; 0x9e
 8009ea0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009ea4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009ea8:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009eac:	329e      	adds	r2, #158	; 0x9e
 8009eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempSerial.Hitachi_st.PeersCnt;
 8009eb2:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009eb6:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009ec6:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009eca:	f883 2020 	strb.w	r2, [r3, #32]
				++SerialIndex;
 8009ece:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009ed8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009edc:	3301      	adds	r3, #1
 8009ede:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009ee2:	4b50      	ldr	r3, [pc, #320]	; (800a024 <ReAssignData+0x520>)
 8009ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ee8:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009eec:	429a      	cmp	r2, r3
 8009eee:	f4ff ae85 	bcc.w	8009bfc <ReAssignData+0xf8>
			}
		}

		EthernetIndex = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		SerialIndex = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 8009efe:	2300      	movs	r3, #0
 8009f00:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009f04:	e077      	b.n	8009ff6 <ReAssignData+0x4f2>
		{
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][0] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][0];
 8009f06:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f0a:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009f0e:	4a45      	ldr	r2, [pc, #276]	; (800a024 <ReAssignData+0x520>)
 8009f10:	3326      	adds	r3, #38	; 0x26
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	78d8      	ldrb	r0, [r3, #3]
 8009f18:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009f1c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009f20:	f101 0326 	add.w	r3, r1, #38	; 0x26
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	4602      	mov	r2, r0
 8009f2a:	70da      	strb	r2, [r3, #3]
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][1] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][1];
 8009f2c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f30:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009f34:	4a3b      	ldr	r2, [pc, #236]	; (800a024 <ReAssignData+0x520>)
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	f893 009c 	ldrb.w	r0, [r3, #156]	; 0x9c
 8009f3e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009f42:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009f46:	008b      	lsls	r3, r1, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][2] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][2];
 8009f50:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f54:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009f58:	4a32      	ldr	r2, [pc, #200]	; (800a024 <ReAssignData+0x520>)
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
 8009f62:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009f66:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009f6a:	008b      	lsls	r3, r1, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	4602      	mov	r2, r0
 8009f70:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][3] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][3];
 8009f74:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f78:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009f7c:	4a29      	ldr	r2, [pc, #164]	; (800a024 <ReAssignData+0x520>)
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
 8009f86:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009f8a:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009f8e:	008b      	lsls	r3, r1, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	4602      	mov	r2, r0
 8009f94:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][TX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][TX_PORT];
 8009f98:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f9c:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009fa0:	4a20      	ldr	r2, [pc, #128]	; (800a024 <ReAssignData+0x520>)
 8009fa2:	3352      	adds	r3, #82	; 0x52
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	8858      	ldrh	r0, [r3, #2]
 8009faa:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009fae:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009fb2:	f101 0352 	add.w	r3, r1, #82	; 0x52
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	4602      	mov	r2, r0
 8009fbc:	805a      	strh	r2, [r3, #2]
			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][RX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][RX_PORT];
 8009fbe:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009fc2:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009fc6:	4a17      	ldr	r2, [pc, #92]	; (800a024 <ReAssignData+0x520>)
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	f8b3 014c 	ldrh.w	r0, [r3, #332]	; 0x14c
 8009fd0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009fd4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009fd8:	008b      	lsls	r3, r1, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	4602      	mov	r2, r0
 8009fde:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
			++EthernetIndex;
 8009fe2:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 8009fec:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009ff6:	4b0b      	ldr	r3, [pc, #44]	; (800a024 <ReAssignData+0x520>)
 8009ff8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009ffc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a000:	429a      	cmp	r2, r3
 800a002:	d380      	bcc.n	8009f06 <ReAssignData+0x402>
		}


		EthernetIndex = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		if(EI_dataTempEthernet.Hitachi_st.PeersCnt > 0)
 800a00a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a00e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a012:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 80af 	beq.w	800a17a <ReAssignData+0x676>
		{
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a01c:	2300      	movs	r3, #0
 800a01e:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a022:	e09f      	b.n	800a164 <ReAssignData+0x660>
 800a024:	20000504 	.word	0x20000504
			{
				EI_data.Hitachi_st.ClockMaster[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.ClockMaster[PeerTraverser];
 800a028:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a02c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a030:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a034:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a038:	440a      	add	r2, r1
 800a03a:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a03e:	4ab0      	ldr	r2, [pc, #704]	; (800a300 <ReAssignData+0x7fc>)
 800a040:	4413      	add	r3, r2
 800a042:	460a      	mov	r2, r1
 800a044:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Interface_Type[PeerTraverser];
 800a048:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a04c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a050:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a054:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a058:	440a      	add	r2, r1
 800a05a:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a05e:	4aa8      	ldr	r2, [pc, #672]	; (800a300 <ReAssignData+0x7fc>)
 800a060:	4413      	add	r3, r2
 800a062:	460a      	mov	r2, r1
 800a064:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a068:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a06c:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a070:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a074:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a078:	3366      	adds	r3, #102	; 0x66
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	489f      	ldr	r0, [pc, #636]	; (800a300 <ReAssignData+0x7fc>)
 800a082:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4403      	add	r3, r0
 800a08a:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a08c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a090:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a094:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a098:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a09c:	3370      	adds	r3, #112	; 0x70
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	4896      	ldr	r0, [pc, #600]	; (800a300 <ReAssignData+0x7fc>)
 800a0a6:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4403      	add	r3, r0
 800a0ae:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser] = EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a0b0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0b4:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a0b8:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a0bc:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a0c0:	33fe      	adds	r3, #254	; 0xfe
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	440b      	add	r3, r1
 800a0c6:	8898      	ldrh	r0, [r3, #4]
 800a0c8:	498d      	ldr	r1, [pc, #564]	; (800a300 <ReAssignData+0x7fc>)
 800a0ca:	f102 03fe 	add.w	r3, r2, #254	; 0xfe
 800a0ce:	005b      	lsls	r3, r3, #1
 800a0d0:	440b      	add	r3, r1
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Bool_outputs[PeerTraverser];
 800a0d6:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a0da:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0de:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a0e2:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a0e6:	440a      	add	r2, r1
 800a0e8:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a0ec:	4a84      	ldr	r2, [pc, #528]	; (800a300 <ReAssignData+0x7fc>)
 800a0ee:	4413      	add	r3, r2
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a0f6:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a0fa:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0fe:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a102:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a106:	318a      	adds	r1, #138	; 0x8a
 800a108:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a10c:	497c      	ldr	r1, [pc, #496]	; (800a300 <ReAssignData+0x7fc>)
 800a10e:	338a      	adds	r3, #138	; 0x8a
 800a110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a114:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a118:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a11c:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a120:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a124:	3194      	adds	r1, #148	; 0x94
 800a126:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a12a:	4975      	ldr	r1, [pc, #468]	; (800a300 <ReAssignData+0x7fc>)
 800a12c:	3394      	adds	r3, #148	; 0x94
 800a12e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a132:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a136:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a13a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a13e:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a142:	319e      	adds	r1, #158	; 0x9e
 800a144:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a148:	496d      	ldr	r1, [pc, #436]	; (800a300 <ReAssignData+0x7fc>)
 800a14a:	339e      	adds	r3, #158	; 0x9e
 800a14c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a150:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a154:	3301      	adds	r3, #1
 800a156:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a15a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a15e:	3301      	adds	r3, #1
 800a160:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a164:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a168:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a16c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a170:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a174:	429a      	cmp	r2, r3
 800a176:	f4ff af57 	bcc.w	800a028 <ReAssignData+0x524>
			}
		}
		if(EI_dataTempSerial.Hitachi_st.PeersCnt > 0)
 800a17a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a17e:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a182:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80ad 	beq.w	800a2e6 <ReAssignData+0x7e2>
		{
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a18c:	2300      	movs	r3, #0
 800a18e:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a192:	e09d      	b.n	800a2d0 <ReAssignData+0x7cc>
			{
				EI_data.Hitachi_st.ClockMaster[EthernetIndex] = EI_dataTempSerial.Hitachi_st.ClockMaster[PeerTraverser];
 800a194:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a198:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a19c:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a1a0:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a1a4:	440a      	add	r2, r1
 800a1a6:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a1aa:	4a55      	ldr	r2, [pc, #340]	; (800a300 <ReAssignData+0x7fc>)
 800a1ac:	4413      	add	r3, r2
 800a1ae:	460a      	mov	r2, r1
 800a1b0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Interface_Type[PeerTraverser];
 800a1b4:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a1b8:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a1bc:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a1c0:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a1ca:	4a4d      	ldr	r2, [pc, #308]	; (800a300 <ReAssignData+0x7fc>)
 800a1cc:	4413      	add	r3, r2
 800a1ce:	460a      	mov	r2, r1
 800a1d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a1d4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1d8:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a1dc:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a1e0:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a1e4:	3366      	adds	r3, #102	; 0x66
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	4844      	ldr	r0, [pc, #272]	; (800a300 <ReAssignData+0x7fc>)
 800a1ee:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4403      	add	r3, r0
 800a1f6:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a1f8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1fc:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a200:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a204:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a208:	3370      	adds	r3, #112	; 0x70
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	483b      	ldr	r0, [pc, #236]	; (800a300 <ReAssignData+0x7fc>)
 800a212:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4403      	add	r3, r0
 800a21a:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a21c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a220:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a224:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a228:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a22c:	33fe      	adds	r3, #254	; 0xfe
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	440b      	add	r3, r1
 800a232:	8898      	ldrh	r0, [r3, #4]
 800a234:	4932      	ldr	r1, [pc, #200]	; (800a300 <ReAssignData+0x7fc>)
 800a236:	f102 03fe 	add.w	r3, r2, #254	; 0xfe
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	440b      	add	r3, r1
 800a23e:	4602      	mov	r2, r0
 800a240:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Bool_outputs[PeerTraverser];
 800a242:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a246:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a24a:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a24e:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a252:	440a      	add	r2, r1
 800a254:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a258:	4a29      	ldr	r2, [pc, #164]	; (800a300 <ReAssignData+0x7fc>)
 800a25a:	4413      	add	r3, r2
 800a25c:	460a      	mov	r2, r1
 800a25e:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a262:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a266:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a26a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a26e:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a272:	318a      	adds	r1, #138	; 0x8a
 800a274:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a278:	4921      	ldr	r1, [pc, #132]	; (800a300 <ReAssignData+0x7fc>)
 800a27a:	338a      	adds	r3, #138	; 0x8a
 800a27c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a280:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a284:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a288:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a28c:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a290:	3194      	adds	r1, #148	; 0x94
 800a292:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a296:	491a      	ldr	r1, [pc, #104]	; (800a300 <ReAssignData+0x7fc>)
 800a298:	3394      	adds	r3, #148	; 0x94
 800a29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a29e:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a2a2:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a2a6:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a2aa:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a2ae:	319e      	adds	r1, #158	; 0x9e
 800a2b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2b4:	4912      	ldr	r1, [pc, #72]	; (800a300 <ReAssignData+0x7fc>)
 800a2b6:	339e      	adds	r3, #158	; 0x9e
 800a2b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a2bc:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a2c6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a2d0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2d4:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a2d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2dc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	f4ff af57 	bcc.w	800a194 <ReAssignData+0x690>

			}
		}

		print_self_Details_Hitachi();
 800a2e6:	f7fe fe7f 	bl	8008fe8 <print_self_Details_Hitachi>
 800a2ea:	e004      	b.n	800a2f6 <ReAssignData+0x7f2>

	}
	else
	{
		printf("\nNo PROBLEM Found\n");
 800a2ec:	4805      	ldr	r0, [pc, #20]	; (800a304 <ReAssignData+0x800>)
 800a2ee:	f01c f96f 	bl	80265d0 <puts>
 800a2f2:	e000      	b.n	800a2f6 <ReAssignData+0x7f2>
		return;
 800a2f4:	bf00      	nop
	}

}
 800a2f6:	f507 67d7 	add.w	r7, r7, #1720	; 0x6b8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20000504 	.word	0x20000504
 800a304:	08029548 	.word	0x08029548

0800a308 <ReArrangedVitalData>:

void ReArrangedVitalData(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
	if(ReorderFlag == SET)
 800a30e:	4b23      	ldr	r3, [pc, #140]	; (800a39c <ReArrangedVitalData+0x94>)
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d13d      	bne.n	800a392 <ReArrangedVitalData+0x8a>
	{
		memset(&HitachiEI_DataReArranged_st,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 800a316:	22a2      	movs	r2, #162	; 0xa2
 800a318:	2100      	movs	r1, #0
 800a31a:	4821      	ldr	r0, [pc, #132]	; (800a3a0 <ReArrangedVitalData+0x98>)
 800a31c:	f01b ffd4 	bl	80262c8 <memset>
		HitachiEI_DataReArranged_st.ActualDataBytes = vEI_Transver_EI_To_MIE.ActualDataBytes;
 800a320:	4b20      	ldr	r3, [pc, #128]	; (800a3a4 <ReArrangedVitalData+0x9c>)
 800a322:	881a      	ldrh	r2, [r3, #0]
 800a324:	4b1e      	ldr	r3, [pc, #120]	; (800a3a0 <ReArrangedVitalData+0x98>)
 800a326:	801a      	strh	r2, [r3, #0]

		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a328:	2300      	movs	r3, #0
 800a32a:	71fb      	strb	r3, [r7, #7]
 800a32c:	e02b      	b.n	800a386 <ReArrangedVitalData+0x7e>
		{
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a32e:	2300      	movs	r3, #0
 800a330:	71bb      	strb	r3, [r7, #6]
 800a332:	e01f      	b.n	800a374 <ReArrangedVitalData+0x6c>
			{
				if(EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser] == EI_BeforeReorderData.Hitachi_st.SOURCE_ADDRESSES[PeerFinder])
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	4a1c      	ldr	r2, [pc, #112]	; (800a3a8 <ReArrangedVitalData+0xa0>)
 800a338:	3366      	adds	r3, #102	; 0x66
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	79bb      	ldrb	r3, [r7, #6]
 800a342:	491a      	ldr	r1, [pc, #104]	; (800a3ac <ReArrangedVitalData+0xa4>)
 800a344:	3366      	adds	r3, #102	; 0x66
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	440b      	add	r3, r1
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d10e      	bne.n	800a36e <ReArrangedVitalData+0x66>
				{
					memcpy(&HitachiEI_DataReArranged_st.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],&vEI_Transver_EI_To_MIE.Inputs[PeerFinder * MAX_OUTPUTS_PER_PEER],MAX_OUTPUTS_PER_PEER);
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	011b      	lsls	r3, r3, #4
 800a354:	4a12      	ldr	r2, [pc, #72]	; (800a3a0 <ReArrangedVitalData+0x98>)
 800a356:	4413      	add	r3, r2
 800a358:	1c98      	adds	r0, r3, #2
 800a35a:	79bb      	ldrb	r3, [r7, #6]
 800a35c:	011b      	lsls	r3, r3, #4
 800a35e:	4a11      	ldr	r2, [pc, #68]	; (800a3a4 <ReArrangedVitalData+0x9c>)
 800a360:	4413      	add	r3, r2
 800a362:	3302      	adds	r3, #2
 800a364:	2210      	movs	r2, #16
 800a366:	4619      	mov	r1, r3
 800a368:	f01b ff86 	bl	8026278 <memcpy>
					break;
 800a36c:	e008      	b.n	800a380 <ReArrangedVitalData+0x78>
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a36e:	79bb      	ldrb	r3, [r7, #6]
 800a370:	3301      	adds	r3, #1
 800a372:	71bb      	strb	r3, [r7, #6]
 800a374:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <ReArrangedVitalData+0xa0>)
 800a376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a37a:	79ba      	ldrb	r2, [r7, #6]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d3d9      	bcc.n	800a334 <ReArrangedVitalData+0x2c>
		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	3301      	adds	r3, #1
 800a384:	71fb      	strb	r3, [r7, #7]
 800a386:	4b08      	ldr	r3, [pc, #32]	; (800a3a8 <ReArrangedVitalData+0xa0>)
 800a388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a38c:	79fa      	ldrb	r2, [r7, #7]
 800a38e:	429a      	cmp	r2, r3
 800a390:	d3cd      	bcc.n	800a32e <ReArrangedVitalData+0x26>
				}
			}
		}
	}
}
 800a392:	bf00      	nop
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	2000254e 	.word	0x2000254e
 800a3a0:	20002814 	.word	0x20002814
 800a3a4:	20002770 	.word	0x20002770
 800a3a8:	20000504 	.word	0x20000504
 800a3ac:	2000085c 	.word	0x2000085c

0800a3b0 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800a3b6:	4b26      	ldr	r3, [pc, #152]	; (800a450 <reset_cause_get+0xa0>)
 800a3b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	da02      	bge.n	800a3c4 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	71fb      	strb	r3, [r7, #7]
 800a3c2:	e037      	b.n	800a434 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800a3c4:	4b22      	ldr	r3, [pc, #136]	; (800a450 <reset_cause_get+0xa0>)
 800a3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	71fb      	strb	r3, [r7, #7]
 800a3d4:	e02e      	b.n	800a434 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800a3d6:	4b1e      	ldr	r3, [pc, #120]	; (800a450 <reset_cause_get+0xa0>)
 800a3d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	71fb      	strb	r3, [r7, #7]
 800a3e6:	e025      	b.n	800a434 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800a3e8:	4b19      	ldr	r3, [pc, #100]	; (800a450 <reset_cause_get+0xa0>)
 800a3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800a3f4:	2304      	movs	r3, #4
 800a3f6:	71fb      	strb	r3, [r7, #7]
 800a3f8:	e01c      	b.n	800a434 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800a3fa:	4b15      	ldr	r3, [pc, #84]	; (800a450 <reset_cause_get+0xa0>)
 800a3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800a406:	2305      	movs	r3, #5
 800a408:	71fb      	strb	r3, [r7, #7]
 800a40a:	e013      	b.n	800a434 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800a40c:	4b10      	ldr	r3, [pc, #64]	; (800a450 <reset_cause_get+0xa0>)
 800a40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800a418:	2306      	movs	r3, #6
 800a41a:	71fb      	strb	r3, [r7, #7]
 800a41c:	e00a      	b.n	800a434 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800a41e:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <reset_cause_get+0xa0>)
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800a42a:	2307      	movs	r3, #7
 800a42c:	71fb      	strb	r3, [r7, #7]
 800a42e:	e001      	b.n	800a434 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 800a430:	2300      	movs	r3, #0
 800a432:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800a434:	4b06      	ldr	r3, [pc, #24]	; (800a450 <reset_cause_get+0xa0>)
 800a436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a438:	4a05      	ldr	r2, [pc, #20]	; (800a450 <reset_cause_get+0xa0>)
 800a43a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a43e:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 800a440:	79fb      	ldrb	r3, [r7, #7]
}
 800a442:	4618      	mov	r0, r3
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	40023800 	.word	0x40023800

0800a454 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 800a45e:	4b1c      	ldr	r3, [pc, #112]	; (800a4d0 <reset_cause_get_name+0x7c>)
 800a460:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 800a462:	79fb      	ldrb	r3, [r7, #7]
 800a464:	2b07      	cmp	r3, #7
 800a466:	d82b      	bhi.n	800a4c0 <reset_cause_get_name+0x6c>
 800a468:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <reset_cause_get_name+0x1c>)
 800a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46e:	bf00      	nop
 800a470:	0800a491 	.word	0x0800a491
 800a474:	0800a497 	.word	0x0800a497
 800a478:	0800a49d 	.word	0x0800a49d
 800a47c:	0800a4a3 	.word	0x0800a4a3
 800a480:	0800a4a9 	.word	0x0800a4a9
 800a484:	0800a4af 	.word	0x0800a4af
 800a488:	0800a4b5 	.word	0x0800a4b5
 800a48c:	0800a4bb 	.word	0x0800a4bb
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800a490:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <reset_cause_get_name+0x80>)
 800a492:	60fb      	str	r3, [r7, #12]
            break;
 800a494:	e014      	b.n	800a4c0 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800a496:	4b10      	ldr	r3, [pc, #64]	; (800a4d8 <reset_cause_get_name+0x84>)
 800a498:	60fb      	str	r3, [r7, #12]
            break;
 800a49a:	e011      	b.n	800a4c0 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800a49c:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <reset_cause_get_name+0x88>)
 800a49e:	60fb      	str	r3, [r7, #12]
            break;
 800a4a0:	e00e      	b.n	800a4c0 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <reset_cause_get_name+0x8c>)
 800a4a4:	60fb      	str	r3, [r7, #12]
            break;
 800a4a6:	e00b      	b.n	800a4c0 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800a4a8:	4b0e      	ldr	r3, [pc, #56]	; (800a4e4 <reset_cause_get_name+0x90>)
 800a4aa:	60fb      	str	r3, [r7, #12]
            break;
 800a4ac:	e008      	b.n	800a4c0 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800a4ae:	4b0e      	ldr	r3, [pc, #56]	; (800a4e8 <reset_cause_get_name+0x94>)
 800a4b0:	60fb      	str	r3, [r7, #12]
            break;
 800a4b2:	e005      	b.n	800a4c0 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800a4b4:	4b0d      	ldr	r3, [pc, #52]	; (800a4ec <reset_cause_get_name+0x98>)
 800a4b6:	60fb      	str	r3, [r7, #12]
            break;
 800a4b8:	e002      	b.n	800a4c0 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800a4ba:	4b0d      	ldr	r3, [pc, #52]	; (800a4f0 <reset_cause_get_name+0x9c>)
 800a4bc:	60fb      	str	r3, [r7, #12]
            break;
 800a4be:	bf00      	nop
    }

    return reset_cause_name;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	0802955c 	.word	0x0802955c
 800a4d4:	08029560 	.word	0x08029560
 800a4d8:	08029568 	.word	0x08029568
 800a4dc:	08029578 	.word	0x08029578
 800a4e0:	08029590 	.word	0x08029590
 800a4e4:	080295ac 	.word	0x080295ac
 800a4e8:	080295bc 	.word	0x080295bc
 800a4ec:	080295ec 	.word	0x080295ec
 800a4f0:	08029608 	.word	0x08029608

0800a4f4 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800a4f8:	f00d ff4a 	bl	8018390 <Print_BuildDat_Details>

		readCanToStructs();
 800a4fc:	f007 f890 	bl	8011620 <readCanToStructs>

		Feed_wdt();
 800a500:	f00b fd26 	bl	8015f50 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 800a504:	4810      	ldr	r0, [pc, #64]	; (800a548 <Process_Medha_EI+0x54>)
 800a506:	f012 fb23 	bl	801cb50 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800a50a:	f000 f91f 	bl	800a74c <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 800a50e:	f000 fef3 	bl	800b2f8 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 800a512:	f000 ff55 	bl	800b3c0 <Process_Clear_Relays>

		Send_Data_to_Other();
 800a516:	f001 f839 	bl	800b58c <Send_Data_to_Other>

		Process_Data_from_Other();
 800a51a:	f001 f891 	bl	800b640 <Process_Data_from_Other>

		CheckforMedhaCMD();
 800a51e:	f001 fa65 	bl	800b9ec <CheckforMedhaCMD>

		CheckEIPC_DAT_CRC();
 800a522:	f7f6 fd13 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800a526:	4b09      	ldr	r3, [pc, #36]	; (800a54c <Process_Medha_EI+0x58>)
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <Process_Medha_EI+0x42>
		{
			gucFlagUpdate = 3;
 800a52e:	4b08      	ldr	r3, [pc, #32]	; (800a550 <Process_Medha_EI+0x5c>)
 800a530:	2203      	movs	r2, #3
 800a532:	701a      	strb	r2, [r3, #0]
			break;
 800a534:	e002      	b.n	800a53c <Process_Medha_EI+0x48>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 800a536:	f00e fd93 	bl	8019060 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 800a53a:	e7dd      	b.n	800a4f8 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 800a53c:	4802      	ldr	r0, [pc, #8]	; (800a548 <Process_Medha_EI+0x54>)
 800a53e:	f012 fb07 	bl	801cb50 <HAL_IWDG_Refresh>
		Data_Processing();
 800a542:	f00d fe23 	bl	801818c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800a546:	e7f9      	b.n	800a53c <Process_Medha_EI+0x48>
 800a548:	2000b3c8 	.word	0x2000b3c8
 800a54c:	20000bba 	.word	0x20000bba
 800a550:	20000fbd 	.word	0x20000fbd

0800a554 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	6039      	str	r1, [r7, #0]
 800a55e:	71fb      	strb	r3, [r7, #7]
 800a560:	4613      	mov	r3, r2
 800a562:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 800a564:	2300      	movs	r3, #0
 800a566:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 800a568:	2300      	movs	r3, #0
 800a56a:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 800a56c:	e0d0      	b.n	800a710 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	4618      	mov	r0, r3
 800a572:	f00e fc5f 	bl	8018e34 <Com_Get_Byte>
 800a576:	4603      	mov	r3, r0
 800a578:	461a      	mov	r2, r3
 800a57a:	4b6c      	ldr	r3, [pc, #432]	; (800a72c <Get_Medha_EI_Message+0x1d8>)
 800a57c:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 800a57e:	4b6c      	ldr	r3, [pc, #432]	; (800a730 <Get_Medha_EI_Message+0x1dc>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	3b01      	subs	r3, #1
 800a584:	2b04      	cmp	r3, #4
 800a586:	f200 80c2 	bhi.w	800a70e <Get_Medha_EI_Message+0x1ba>
 800a58a:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <Get_Medha_EI_Message+0x3c>)
 800a58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a590:	0800a5a5 	.word	0x0800a5a5
 800a594:	0800a5bd 	.word	0x0800a5bd
 800a598:	0800a70f 	.word	0x0800a70f
 800a59c:	0800a609 	.word	0x0800a609
 800a5a0:	0800a661 	.word	0x0800a661
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 800a5a4:	4b61      	ldr	r3, [pc, #388]	; (800a72c <Get_Medha_EI_Message+0x1d8>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b53      	cmp	r3, #83	; 0x53
 800a5aa:	f040 80b1 	bne.w	800a710 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 800a5ae:	4b61      	ldr	r3, [pc, #388]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800a5b4:	4b5e      	ldr	r3, [pc, #376]	; (800a730 <Get_Medha_EI_Message+0x1dc>)
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a5ba:	e0a9      	b.n	800a710 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 800a5bc:	4b5d      	ldr	r3, [pc, #372]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d111      	bne.n	800a5e8 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 800a5c4:	4b5b      	ldr	r3, [pc, #364]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	4a57      	ldr	r2, [pc, #348]	; (800a72c <Get_Medha_EI_Message+0x1d8>)
 800a5d0:	7812      	ldrb	r2, [r2, #0]
 800a5d2:	701a      	strb	r2, [r3, #0]
					i++;
 800a5d4:	4b57      	ldr	r3, [pc, #348]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	4b55      	ldr	r3, [pc, #340]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a5de:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 800a5e0:	4b53      	ldr	r3, [pc, #332]	; (800a730 <Get_Medha_EI_Message+0x1dc>)
 800a5e2:	2204      	movs	r2, #4
 800a5e4:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800a5e6:	e00d      	b.n	800a604 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 800a5e8:	4b52      	ldr	r3, [pc, #328]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	4a4e      	ldr	r2, [pc, #312]	; (800a72c <Get_Medha_EI_Message+0x1d8>)
 800a5f4:	7812      	ldrb	r2, [r2, #0]
 800a5f6:	701a      	strb	r2, [r3, #0]
					i++;
 800a5f8:	4b4e      	ldr	r3, [pc, #312]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	4b4c      	ldr	r3, [pc, #304]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a602:	801a      	strh	r2, [r3, #0]
				break;
 800a604:	bf00      	nop
			}
			break;
 800a606:	e083      	b.n	800a710 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 800a608:	4b4a      	ldr	r3, [pc, #296]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	3b02      	subs	r3, #2
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	4413      	add	r3, r2
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29b      	uxth	r3, r3
 800a616:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 800a618:	4b47      	ldr	r3, [pc, #284]	; (800a738 <Get_Medha_EI_Message+0x1e4>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	801a      	strh	r2, [r3, #0]
				j=1;
 800a61e:	4b47      	ldr	r3, [pc, #284]	; (800a73c <Get_Medha_EI_Message+0x1e8>)
 800a620:	2201      	movs	r2, #1
 800a622:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 800a624:	4b43      	ldr	r3, [pc, #268]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	4413      	add	r3, r2
 800a62e:	4a3f      	ldr	r2, [pc, #252]	; (800a72c <Get_Medha_EI_Message+0x1d8>)
 800a630:	7812      	ldrb	r2, [r2, #0]
 800a632:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 800a634:	4b40      	ldr	r3, [pc, #256]	; (800a738 <Get_Medha_EI_Message+0x1e4>)
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	3301      	adds	r3, #1
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	4b3e      	ldr	r3, [pc, #248]	; (800a738 <Get_Medha_EI_Message+0x1e4>)
 800a63e:	801a      	strh	r2, [r3, #0]
				i++;
 800a640:	4b3c      	ldr	r3, [pc, #240]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	3301      	adds	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	4b3a      	ldr	r3, [pc, #232]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a64a:	801a      	strh	r2, [r3, #0]
				j++;
 800a64c:	4b3b      	ldr	r3, [pc, #236]	; (800a73c <Get_Medha_EI_Message+0x1e8>)
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	3301      	adds	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	4b39      	ldr	r3, [pc, #228]	; (800a73c <Get_Medha_EI_Message+0x1e8>)
 800a656:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 800a658:	4b35      	ldr	r3, [pc, #212]	; (800a730 <Get_Medha_EI_Message+0x1dc>)
 800a65a:	2205      	movs	r2, #5
 800a65c:	701a      	strb	r2, [r3, #0]
				break;
 800a65e:	e057      	b.n	800a710 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 800a660:	4b34      	ldr	r3, [pc, #208]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	4413      	add	r3, r2
 800a66a:	4a30      	ldr	r2, [pc, #192]	; (800a72c <Get_Medha_EI_Message+0x1d8>)
 800a66c:	7812      	ldrb	r2, [r2, #0]
 800a66e:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 800a670:	89ba      	ldrh	r2, [r7, #12]
 800a672:	4b31      	ldr	r3, [pc, #196]	; (800a738 <Get_Medha_EI_Message+0x1e4>)
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d940      	bls.n	800a6fc <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 800a67a:	4b2f      	ldr	r3, [pc, #188]	; (800a738 <Get_Medha_EI_Message+0x1e4>)
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	3301      	adds	r3, #1
 800a680:	b29a      	uxth	r2, r3
 800a682:	4b2d      	ldr	r3, [pc, #180]	; (800a738 <Get_Medha_EI_Message+0x1e4>)
 800a684:	801a      	strh	r2, [r3, #0]
					i++;
 800a686:	4b2b      	ldr	r3, [pc, #172]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	3301      	adds	r3, #1
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	4b29      	ldr	r3, [pc, #164]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a690:	801a      	strh	r2, [r3, #0]
					j++;
 800a692:	4b2a      	ldr	r3, [pc, #168]	; (800a73c <Get_Medha_EI_Message+0x1e8>)
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	3301      	adds	r3, #1
 800a698:	b29a      	uxth	r2, r3
 800a69a:	4b28      	ldr	r3, [pc, #160]	; (800a73c <Get_Medha_EI_Message+0x1e8>)
 800a69c:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 800a69e:	89ba      	ldrh	r2, [r7, #12]
 800a6a0:	4b25      	ldr	r3, [pc, #148]	; (800a738 <Get_Medha_EI_Message+0x1e4>)
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d133      	bne.n	800a710 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 800a6a8:	4b22      	ldr	r3, [pc, #136]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	3b04      	subs	r3, #4
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	4b23      	ldr	r3, [pc, #140]	; (800a740 <Get_Medha_EI_Message+0x1ec>)
 800a6b2:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 800a6b4:	4b22      	ldr	r3, [pc, #136]	; (800a740 <Get_Medha_EI_Message+0x1ec>)
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800a6ba:	4b1e      	ldr	r3, [pc, #120]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 800a6c0:	4b1b      	ldr	r3, [pc, #108]	; (800a730 <Get_Medha_EI_Message+0x1dc>)
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800a6ca:	89fb      	ldrh	r3, [r7, #14]
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d804      	bhi.n	800a6da <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 800a6d0:	481c      	ldr	r0, [pc, #112]	; (800a744 <Get_Medha_EI_Message+0x1f0>)
 800a6d2:	f01b ff7d 	bl	80265d0 <puts>
							return ZERO;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	e023      	b.n	800a722 <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800a6da:	4b19      	ldr	r3, [pc, #100]	; (800a740 <Get_Medha_EI_Message+0x1ec>)
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	6839      	ldr	r1, [r7, #0]
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	f001 fc44 	bl	800bf70 <CheckCRC32>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800a6ee:	89fb      	ldrh	r3, [r7, #14]
 800a6f0:	e017      	b.n	800a722 <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800a6f2:	4815      	ldr	r0, [pc, #84]	; (800a748 <Get_Medha_EI_Message+0x1f4>)
 800a6f4:	f01b ff6c 	bl	80265d0 <puts>
							return ZERO;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e012      	b.n	800a722 <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 800a6fc:	4b0d      	ldr	r3, [pc, #52]	; (800a734 <Get_Medha_EI_Message+0x1e0>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800a702:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <Get_Medha_EI_Message+0x1dc>)
 800a704:	2201      	movs	r2, #1
 800a706:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 800a708:	2300      	movs	r3, #0
 800a70a:	81bb      	strh	r3, [r7, #12]
				}
				break;
 800a70c:	e000      	b.n	800a710 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800a70e:	bf00      	nop
	while(Com_DataReady(ComPort))
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	4618      	mov	r0, r3
 800a714:	f00e fb4e 	bl	8018db4 <Com_DataReady>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f47f af27 	bne.w	800a56e <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20003f04 	.word	0x20003f04
 800a730:	20000316 	.word	0x20000316
 800a734:	20003f06 	.word	0x20003f06
 800a738:	20003f08 	.word	0x20003f08
 800a73c:	20003f0a 	.word	0x20003f0a
 800a740:	20003f0c 	.word	0x20003f0c
 800a744:	08029620 	.word	0x08029620
 800a748:	08029628 	.word	0x08029628

0800a74c <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 800a74c:	b5b0      	push	{r4, r5, r7, lr}
 800a74e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 800a752:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 800a754:	2300      	movs	r3, #0
 800a756:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 800a75a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a75e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	3304      	adds	r3, #4
 800a768:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a76c:	2100      	movs	r1, #0
 800a76e:	4618      	mov	r0, r3
 800a770:	f01b fdaa 	bl	80262c8 <memset>
	uint16_t NoOfInputs 		= 0;
 800a774:	2300      	movs	r3, #0
 800a776:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 800a780:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a784:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	3304      	adds	r3, #4
 800a78e:	227c      	movs	r2, #124	; 0x7c
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f01b fd98 	bl	80262c8 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 800a7a4:	4bc8      	ldr	r3, [pc, #800]	; (800aac8 <Medha_EI_Analyser+0x37c>)
 800a7a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7aa:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800a7ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff fece 	bl	800a554 <Get_Medha_EI_Message>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800a7be:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a7c2:	2b05      	cmp	r3, #5
 800a7c4:	d939      	bls.n	800a83a <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 800a7c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7ca:	48c0      	ldr	r0, [pc, #768]	; (800aacc <Medha_EI_Analyser+0x380>)
 800a7cc:	f011 fb43 	bl	801be56 <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 800a7d0:	48bf      	ldr	r0, [pc, #764]	; (800aad0 <Medha_EI_Analyser+0x384>)
 800a7d2:	f01b fefd 	bl	80265d0 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800a7dc:	e024      	b.n	800a828 <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 800a7de:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d010      	beq.n	800a808 <Medha_EI_Analyser+0xbc>
 800a7e6:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800a7ea:	4bba      	ldr	r3, [pc, #744]	; (800aad4 <Medha_EI_Analyser+0x388>)
 800a7ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a7f0:	08d9      	lsrs	r1, r3, #3
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	440b      	add	r3, r1
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d102      	bne.n	800a808 <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 800a802:	200a      	movs	r0, #10
 800a804:	f01b fe60 	bl	80264c8 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800a808:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a80c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a810:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a814:	5cd3      	ldrb	r3, [r2, r3]
 800a816:	4619      	mov	r1, r3
 800a818:	48af      	ldr	r0, [pc, #700]	; (800aad8 <Medha_EI_Analyser+0x38c>)
 800a81a:	f01b fe3d 	bl	8026498 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800a81e:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a822:	3301      	adds	r3, #1
 800a824:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800a828:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800a82c:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a830:	429a      	cmp	r2, r3
 800a832:	d3d4      	bcc.n	800a7de <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 800a834:	200a      	movs	r0, #10
 800a836:	f01b fe47 	bl	80264c8 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 800a83a:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 83d1 	beq.w	800afe6 <Medha_EI_Analyser+0x89a>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 800a844:	463b      	mov	r3, r7
 800a846:	f44f 7292 	mov.w	r2, #292	; 0x124
 800a84a:	2100      	movs	r1, #0
 800a84c:	4618      	mov	r0, r3
 800a84e:	f01b fd3b 	bl	80262c8 <memset>

		BYTEINIT(0);
 800a852:	2300      	movs	r3, #0
 800a854:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 800a858:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a85c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a860:	4413      	add	r3, r2
 800a862:	781a      	ldrb	r2, [r3, #0]
 800a864:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a868:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a86c:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 800a86e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a872:	3301      	adds	r3, #1
 800a874:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 800a878:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a87c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a880:	4413      	add	r3, r2
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	b29a      	uxth	r2, r3
 800a886:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a88a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a88e:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 800a890:	4b8d      	ldr	r3, [pc, #564]	; (800aac8 <Medha_EI_Analyser+0x37c>)
 800a892:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 800a896:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a89a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a89e:	889b      	ldrh	r3, [r3, #4]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d017      	beq.n	800a8d4 <Medha_EI_Analyser+0x188>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800a8a4:	488d      	ldr	r0, [pc, #564]	; (800aadc <Medha_EI_Analyser+0x390>)
 800a8a6:	f01b fe93 	bl	80265d0 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 800a8aa:	4b87      	ldr	r3, [pc, #540]	; (800aac8 <Medha_EI_Analyser+0x37c>)
 800a8ac:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a8b6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a8ba:	889b      	ldrh	r3, [r3, #4]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4888      	ldr	r0, [pc, #544]	; (800aae0 <Medha_EI_Analyser+0x394>)
 800a8c0:	f01b fdea 	bl	8026498 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800a8c4:	4987      	ldr	r1, [pc, #540]	; (800aae4 <Medha_EI_Analyser+0x398>)
 800a8c6:	4888      	ldr	r0, [pc, #544]	; (800aae8 <Medha_EI_Analyser+0x39c>)
 800a8c8:	f7f5 fcba 	bl	8000240 <strcmp>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f040 838b 	bne.w	800afea <Medha_EI_Analyser+0x89e>
			{
				return;
			}
		}
		BYTEINC(2);
 800a8d4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a8d8:	3302      	adds	r3, #2
 800a8da:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800a8de:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a8e2:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a8e6:	4413      	add	r3, r2
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a8f0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a8f4:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 800a8f6:	4b74      	ldr	r3, [pc, #464]	; (800aac8 <Medha_EI_Analyser+0x37c>)
 800a8f8:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800a8fc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a900:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a904:	885b      	ldrh	r3, [r3, #2]
 800a906:	429a      	cmp	r2, r3
 800a908:	d017      	beq.n	800a93a <Medha_EI_Analyser+0x1ee>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 800a90a:	4878      	ldr	r0, [pc, #480]	; (800aaec <Medha_EI_Analyser+0x3a0>)
 800a90c:	f01b fe60 	bl	80265d0 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800a910:	4b6d      	ldr	r3, [pc, #436]	; (800aac8 <Medha_EI_Analyser+0x37c>)
 800a912:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a916:	4619      	mov	r1, r3
 800a918:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a91c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a920:	885b      	ldrh	r3, [r3, #2]
 800a922:	461a      	mov	r2, r3
 800a924:	486e      	ldr	r0, [pc, #440]	; (800aae0 <Medha_EI_Analyser+0x394>)
 800a926:	f01b fdb7 	bl	8026498 <iprintf>
			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800a92a:	496e      	ldr	r1, [pc, #440]	; (800aae4 <Medha_EI_Analyser+0x398>)
 800a92c:	486e      	ldr	r0, [pc, #440]	; (800aae8 <Medha_EI_Analyser+0x39c>)
 800a92e:	f7f5 fc87 	bl	8000240 <strcmp>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	f040 835a 	bne.w	800afee <Medha_EI_Analyser+0x8a2>
			{
				return;
			}		}
		BYTEINC(2);
 800a93a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a93e:	3302      	adds	r3, #2
 800a940:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 800a944:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a948:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a94c:	4413      	add	r3, r2
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a954:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a958:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 800a95a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a95e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a962:	799b      	ldrb	r3, [r3, #6]
 800a964:	2baa      	cmp	r3, #170	; 0xaa
 800a966:	d010      	beq.n	800a98a <Medha_EI_Analyser+0x23e>
 800a968:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a96c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a970:	799b      	ldrb	r3, [r3, #6]
 800a972:	2bbb      	cmp	r3, #187	; 0xbb
 800a974:	d009      	beq.n	800a98a <Medha_EI_Analyser+0x23e>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 800a976:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a97a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a97e:	799b      	ldrb	r3, [r3, #6]
 800a980:	4619      	mov	r1, r3
 800a982:	485b      	ldr	r0, [pc, #364]	; (800aaf0 <Medha_EI_Analyser+0x3a4>)
 800a984:	f01b fd88 	bl	8026498 <iprintf>
			return;
 800a988:	e332      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
		}
		BYTEINC(1);
 800a98a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a98e:	3301      	adds	r3, #1
 800a990:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 800a994:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a998:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a99c:	4413      	add	r3, r2
 800a99e:	781a      	ldrb	r2, [r3, #0]
 800a9a0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9a4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9a8:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 800a9aa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9ae:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9b2:	79db      	ldrb	r3, [r3, #7]
 800a9b4:	2be1      	cmp	r3, #225	; 0xe1
 800a9b6:	d009      	beq.n	800a9cc <Medha_EI_Analyser+0x280>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 800a9b8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9bc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9c0:	79db      	ldrb	r3, [r3, #7]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	484b      	ldr	r0, [pc, #300]	; (800aaf4 <Medha_EI_Analyser+0x3a8>)
 800a9c6:	f01b fd67 	bl	8026498 <iprintf>
			return;
 800a9ca:	e311      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
		}

		BYTEINC(1);
 800a9cc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 800a9d6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9da:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a9de:	4413      	add	r3, r2
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9e8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9ec:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800a9ee:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 800a9f8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9fc:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aa00:	4413      	add	r3, r2
 800aa02:	781a      	ldrb	r2, [r3, #0]
 800aa04:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa08:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa0c:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800aa0e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa12:	3301      	adds	r3, #1
 800aa14:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 800aa18:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa1c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aa20:	441a      	add	r2, r3
 800aa22:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa26:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa2a:	330b      	adds	r3, #11
 800aa2c:	6811      	ldr	r1, [r2, #0]
 800aa2e:	6019      	str	r1, [r3, #0]
 800aa30:	8891      	ldrh	r1, [r2, #4]
 800aa32:	7992      	ldrb	r2, [r2, #6]
 800aa34:	8099      	strh	r1, [r3, #4]
 800aa36:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 800aa38:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa3c:	3307      	adds	r3, #7
 800aa3e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800aa42:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa46:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aa4a:	4413      	add	r3, r2
 800aa4c:	781a      	ldrb	r2, [r3, #0]
 800aa4e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa52:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa56:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 800aa58:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa5c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa60:	7c9b      	ldrb	r3, [r3, #18]
 800aa62:	2b11      	cmp	r3, #17
 800aa64:	d009      	beq.n	800aa7a <Medha_EI_Analyser+0x32e>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 800aa66:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa6a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa6e:	7c9b      	ldrb	r3, [r3, #18]
 800aa70:	4619      	mov	r1, r3
 800aa72:	4821      	ldr	r0, [pc, #132]	; (800aaf8 <Medha_EI_Analyser+0x3ac>)
 800aa74:	f01b fd10 	bl	8026498 <iprintf>
			return;
 800aa78:	e2ba      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
		}

		BYTEINC(1);
 800aa7a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa7e:	3301      	adds	r3, #1
 800aa80:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 800aa84:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa88:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 800aa8c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa90:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aa94:	4413      	add	r3, r2
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa9e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aaa2:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 800aaa4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aaa8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aab2:	d925      	bls.n	800ab00 <Medha_EI_Analyser+0x3b4>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%lu\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800aab4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aab8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	4619      	mov	r1, r3
 800aac0:	480e      	ldr	r0, [pc, #56]	; (800aafc <Medha_EI_Analyser+0x3b0>)
 800aac2:	f01b fce9 	bl	8026498 <iprintf>
			return;
 800aac6:	e293      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
 800aac8:	20000504 	.word	0x20000504
 800aacc:	40021c00 	.word	0x40021c00
 800aad0:	08029630 	.word	0x08029630
 800aad4:	cccccccd 	.word	0xcccccccd
 800aad8:	0802963c 	.word	0x0802963c
 800aadc:	08029644 	.word	0x08029644
 800aae0:	08029678 	.word	0x08029678
 800aae4:	0802969c 	.word	0x0802969c
 800aae8:	20000505 	.word	0x20000505
 800aaec:	080296a8 	.word	0x080296a8
 800aaf0:	080296d8 	.word	0x080296d8
 800aaf4:	08029710 	.word	0x08029710
 800aaf8:	08029748 	.word	0x08029748
 800aafc:	0802978c 	.word	0x0802978c
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 800ab00:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab04:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab08:	695a      	ldr	r2, [r3, #20]
 800ab0a:	4baa      	ldr	r3, [pc, #680]	; (800adb4 <Medha_EI_Analyser+0x668>)
 800ab0c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d01b      	beq.n	800ab4c <Medha_EI_Analyser+0x400>
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800ab14:	49a8      	ldr	r1, [pc, #672]	; (800adb8 <Medha_EI_Analyser+0x66c>)
 800ab16:	48a9      	ldr	r0, [pc, #676]	; (800adbc <Medha_EI_Analyser+0x670>)
 800ab18:	f7f5 fb92 	bl	8000240 <strcmp>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00c      	beq.n	800ab3c <Medha_EI_Analyser+0x3f0>
			{
				printf("No of Relays Not Matching...\nConfigured:%lu - Received:%lu\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 800ab22:	4ba4      	ldr	r3, [pc, #656]	; (800adb4 <Medha_EI_Analyser+0x668>)
 800ab24:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 800ab28:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab2c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	461a      	mov	r2, r3
 800ab34:	48a2      	ldr	r0, [pc, #648]	; (800adc0 <Medha_EI_Analyser+0x674>)
 800ab36:	f01b fcaf 	bl	8026498 <iprintf>
				return;
 800ab3a:	e259      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
			}
			else
			{
				EI_data.Medha_Prms_st.NoofRelays = Medha_EI_Temp_Rx_st.NoofRelays;
 800ab3c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab40:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	4a9b      	ldr	r2, [pc, #620]	; (800adb4 <Medha_EI_Analyser+0x668>)
 800ab48:	f8c2 3328 	str.w	r3, [r2, #808]	; 0x328
			}
		}

		BYTEINC(2);
 800ab4c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ab50:	3302      	adds	r3, #2
 800ab52:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 800ab56:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab5a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800ab6a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <Medha_EI_Analyser+0x43c>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 800ab72:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab76:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	08db      	lsrs	r3, r3, #3
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	3301      	adds	r3, #1
 800ab82:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 800ab86:	e007      	b.n	800ab98 <Medha_EI_Analyser+0x44c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 800ab88:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab8c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	08db      	lsrs	r3, r3, #3
 800ab94:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ab9e:	e02a      	b.n	800abf6 <Medha_EI_Analyser+0x4aa>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 800aba0:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800aba4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800aba8:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800abac:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800abb0:	5c89      	ldrb	r1, [r1, r2]
 800abb2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800abb6:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800abba:	4413      	add	r3, r2
 800abbc:	460a      	mov	r2, r1
 800abbe:	761a      	strb	r2, [r3, #24]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800abc0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800abc4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800abc8:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800abcc:	4413      	add	r3, r2
 800abce:	7e1a      	ldrb	r2, [r3, #24]
 800abd0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800abd4:	43d2      	mvns	r2, r2
 800abd6:	b2d1      	uxtb	r1, r2
 800abd8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800abdc:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800abe0:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 800abe2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800abe6:	3301      	adds	r3, #1
 800abe8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800abec:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800abf0:	3301      	adds	r3, #1
 800abf2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800abf6:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800abfa:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d3ce      	bcc.n	800aba0 <Medha_EI_Analyser+0x454>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ac02:	2300      	movs	r3, #0
 800ac04:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac08:	e01a      	b.n	800ac40 <Medha_EI_Analyser+0x4f4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 800ac0a:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800ac0e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac12:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800ac16:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ac1a:	5c89      	ldrb	r1, [r1, r2]
 800ac1c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ac20:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800ac24:	4413      	add	r3, r2
 800ac26:	460a      	mov	r2, r1
 800ac28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			BYTEINC(1);
 800ac2c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac30:	3301      	adds	r3, #1
 800ac32:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ac36:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac40:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ac44:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d3de      	bcc.n	800ac0a <Medha_EI_Analyser+0x4be>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 800ac4c:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 800ac50:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800ac54:	463b      	mov	r3, r7
 800ac56:	3398      	adds	r3, #152	; 0x98
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f01b fafd 	bl	8026258 <memcmp>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d03f      	beq.n	800ace4 <Medha_EI_Analyser+0x598>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 800ac64:	4857      	ldr	r0, [pc, #348]	; (800adc4 <Medha_EI_Analyser+0x678>)
 800ac66:	f01b fcb3 	bl	80265d0 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac70:	e011      	b.n	800ac96 <Medha_EI_Analyser+0x54a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 800ac72:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac76:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ac7a:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800ac7e:	4413      	add	r3, r2
 800ac80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ac84:	4619      	mov	r1, r3
 800ac86:	4850      	ldr	r0, [pc, #320]	; (800adc8 <Medha_EI_Analyser+0x67c>)
 800ac88:	f01b fc06 	bl	8026498 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800ac8c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac90:	3301      	adds	r3, #1
 800ac92:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac96:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ac9a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d3e7      	bcc.n	800ac72 <Medha_EI_Analyser+0x526>
			}

			printf("\nExpected Compliment Relay Status:\n");
 800aca2:	484a      	ldr	r0, [pc, #296]	; (800adcc <Medha_EI_Analyser+0x680>)
 800aca4:	f01b fc94 	bl	80265d0 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800aca8:	2300      	movs	r3, #0
 800acaa:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800acae:	e00f      	b.n	800acd0 <Medha_EI_Analyser+0x584>
			{
				printf("%02X ",TempCompliment[Traverser]);
 800acb0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800acb4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800acb8:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800acbc:	5cd3      	ldrb	r3, [r2, r3]
 800acbe:	4619      	mov	r1, r3
 800acc0:	4841      	ldr	r0, [pc, #260]	; (800adc8 <Medha_EI_Analyser+0x67c>)
 800acc2:	f01b fbe9 	bl	8026498 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800acc6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800acca:	3301      	adds	r3, #1
 800accc:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800acd0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800acd4:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800acd8:	429a      	cmp	r2, r3
 800acda:	d3e9      	bcc.n	800acb0 <Medha_EI_Analyser+0x564>
			}

			printf("\nPACKET Rejected\n");
 800acdc:	483c      	ldr	r0, [pc, #240]	; (800add0 <Medha_EI_Analyser+0x684>)
 800acde:	f01b fc77 	bl	80265d0 <puts>
			return;
 800ace2:	e185      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 800ace4:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800ace8:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800acec:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 800acf0:	4618      	mov	r0, r3
 800acf2:	f001 f909 	bl	800bf08 <GetCRC32>
 800acf6:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800acfa:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800acfe:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad02:	4413      	add	r3, r2
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad0c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad10:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 800ad14:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad18:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad1c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ad20:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d00c      	beq.n	800ad42 <Medha_EI_Analyser+0x5f6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 800ad28:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad2c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad30:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ad34:	461a      	mov	r2, r3
 800ad36:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800ad3a:	4826      	ldr	r0, [pc, #152]	; (800add4 <Medha_EI_Analyser+0x688>)
 800ad3c:	f01b fbac 	bl	8026498 <iprintf>
			return;
 800ad40:	e156      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
		}
		BYTEINC(4);
 800ad42:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad46:	3304      	adds	r3, #4
 800ad48:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 800ad4c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad50:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad54:	4413      	add	r3, r2
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad5e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad62:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 800ad66:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad6a:	3302      	adds	r3, #2
 800ad6c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 800ad70:	f00e fb88 	bl	8019484 <HAL_GetTick>
 800ad74:	4603      	mov	r3, r0
 800ad76:	4a18      	ldr	r2, [pc, #96]	; (800add8 <Medha_EI_Analyser+0x68c>)
 800ad78:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 800ad7a:	4a18      	ldr	r2, [pc, #96]	; (800addc <Medha_EI_Analyser+0x690>)
 800ad7c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad80:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad84:	4610      	mov	r0, r2
 800ad86:	4619      	mov	r1, r3
 800ad88:	f44f 7392 	mov.w	r3, #292	; 0x124
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f01b fa73 	bl	8026278 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 800ad92:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <Medha_EI_Analyser+0x694>)
 800ad94:	2201      	movs	r2, #1
 800ad96:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800ad98:	4b10      	ldr	r3, [pc, #64]	; (800addc <Medha_EI_Analyser+0x690>)
 800ad9a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ad9e:	4a10      	ldr	r2, [pc, #64]	; (800ade0 <Medha_EI_Analyser+0x694>)
 800ada0:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 800ada2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 f952 	bl	800b050 <Send_Medha_EI_Reply>
//				Medha_Cur_Relay_Status_st.Relay_Status[Traverser++] = (Medha_EI_Temp_Rx_st.RelayStatus[i]);
//			}
//		}
//		else
		{
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800adac:	2300      	movs	r3, #0
 800adae:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800adb2:	e028      	b.n	800ae06 <Medha_EI_Analyser+0x6ba>
 800adb4:	20000504 	.word	0x20000504
 800adb8:	0802969c 	.word	0x0802969c
 800adbc:	20000505 	.word	0x20000505
 800adc0:	080297e0 	.word	0x080297e0
 800adc4:	0802981c 	.word	0x0802981c
 800adc8:	0802963c 	.word	0x0802963c
 800adcc:	08029868 	.word	0x08029868
 800add0:	0802988c 	.word	0x0802988c
 800add4:	080298a0 	.word	0x080298a0
 800add8:	20003d50 	.word	0x20003d50
 800addc:	20003bf8 	.word	0x20003bf8
 800ade0:	20003d60 	.word	0x20003d60
			{
				//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
				Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800ade4:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ade8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800adec:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800adf0:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 800adf4:	440a      	add	r2, r1
 800adf6:	7e11      	ldrb	r1, [r2, #24]
 800adf8:	4a7f      	ldr	r2, [pc, #508]	; (800aff8 <Medha_EI_Analyser+0x8ac>)
 800adfa:	54d1      	strb	r1, [r2, r3]
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800adfc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ae00:	3301      	adds	r3, #1
 800ae02:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ae06:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ae0a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d3e8      	bcc.n	800ade4 <Medha_EI_Analyser+0x698>





		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800ae12:	4b7a      	ldr	r3, [pc, #488]	; (800affc <Medha_EI_Analyser+0x8b0>)
 800ae14:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ae18:	4a77      	ldr	r2, [pc, #476]	; (800aff8 <Medha_EI_Analyser+0x8ac>)
 800ae1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800ae1e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ae22:	461a      	mov	r2, r3
 800ae24:	4974      	ldr	r1, [pc, #464]	; (800aff8 <Medha_EI_Analyser+0x8ac>)
 800ae26:	4876      	ldr	r0, [pc, #472]	; (800b000 <Medha_EI_Analyser+0x8b4>)
 800ae28:	f01b fa16 	bl	8026258 <memcmp>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d02c      	beq.n	800ae8c <Medha_EI_Analyser+0x740>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800ae32:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ae36:	461a      	mov	r2, r3
 800ae38:	496f      	ldr	r1, [pc, #444]	; (800aff8 <Medha_EI_Analyser+0x8ac>)
 800ae3a:	4871      	ldr	r0, [pc, #452]	; (800b000 <Medha_EI_Analyser+0x8b4>)
 800ae3c:	f01b fa1c 	bl	8026278 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800ae40:	4b6d      	ldr	r3, [pc, #436]	; (800aff8 <Medha_EI_Analyser+0x8ac>)
 800ae42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae46:	4a6e      	ldr	r2, [pc, #440]	; (800b000 <Medha_EI_Analyser+0x8b4>)
 800ae48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 800ae4c:	2230      	movs	r2, #48	; 0x30
 800ae4e:	2100      	movs	r1, #0
 800ae50:	486c      	ldr	r0, [pc, #432]	; (800b004 <Medha_EI_Analyser+0x8b8>)
 800ae52:	f01b fa39 	bl	80262c8 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800ae56:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	4966      	ldr	r1, [pc, #408]	; (800aff8 <Medha_EI_Analyser+0x8ac>)
 800ae5e:	4869      	ldr	r0, [pc, #420]	; (800b004 <Medha_EI_Analyser+0x8b8>)
 800ae60:	f01b fa0a 	bl	8026278 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800ae64:	f00e fb0e 	bl	8019484 <HAL_GetTick>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	4a67      	ldr	r2, [pc, #412]	; (800b008 <Medha_EI_Analyser+0x8bc>)
 800ae6c:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 800ae6e:	4867      	ldr	r0, [pc, #412]	; (800b00c <Medha_EI_Analyser+0x8c0>)
 800ae70:	f01b fbae 	bl	80265d0 <puts>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 800ae74:	f240 2002 	movw	r0, #514	; 0x202
 800ae78:	f005 fdfa 	bl	8010a70 <TransmitCanPkt>
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 800ae7c:	4b64      	ldr	r3, [pc, #400]	; (800b010 <Medha_EI_Analyser+0x8c4>)
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <Medha_EI_Analyser+0x740>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800ae84:	f44f 7002 	mov.w	r0, #520	; 0x208
 800ae88:	f005 fdf2 	bl	8010a70 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 800ae8c:	4861      	ldr	r0, [pc, #388]	; (800b014 <Medha_EI_Analyser+0x8c8>)
 800ae8e:	f01b fb9f 	bl	80265d0 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 800ae92:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae96:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae9a:	889b      	ldrh	r3, [r3, #4]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	485e      	ldr	r0, [pc, #376]	; (800b018 <Medha_EI_Analyser+0x8cc>)
 800aea0:	f01b fafa 	bl	8026498 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 800aea4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aea8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aeac:	885b      	ldrh	r3, [r3, #2]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	485a      	ldr	r0, [pc, #360]	; (800b01c <Medha_EI_Analyser+0x8d0>)
 800aeb2:	f01b faf1 	bl	8026498 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 800aeb6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aeba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aebe:	799b      	ldrb	r3, [r3, #6]
 800aec0:	4619      	mov	r1, r3
 800aec2:	4857      	ldr	r0, [pc, #348]	; (800b020 <Medha_EI_Analyser+0x8d4>)
 800aec4:	f01b fae8 	bl	8026498 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 800aec8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aecc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aed0:	79db      	ldrb	r3, [r3, #7]
 800aed2:	4619      	mov	r1, r3
 800aed4:	4853      	ldr	r0, [pc, #332]	; (800b024 <Medha_EI_Analyser+0x8d8>)
 800aed6:	f01b fadf 	bl	8026498 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 800aeda:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aede:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aee2:	891b      	ldrh	r3, [r3, #8]
 800aee4:	4619      	mov	r1, r3
 800aee6:	4850      	ldr	r0, [pc, #320]	; (800b028 <Medha_EI_Analyser+0x8dc>)
 800aee8:	f01b fad6 	bl	8026498 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 800aeec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aef0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aef4:	7a9b      	ldrb	r3, [r3, #10]
 800aef6:	4619      	mov	r1, r3
 800aef8:	484c      	ldr	r0, [pc, #304]	; (800b02c <Medha_EI_Analyser+0x8e0>)
 800aefa:	f01b facd 	bl	8026498 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 800aefe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af02:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af06:	7b9b      	ldrb	r3, [r3, #14]
 800af08:	4618      	mov	r0, r3
 800af0a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af0e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af12:	7b5b      	ldrb	r3, [r3, #13]
 800af14:	461c      	mov	r4, r3
 800af16:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af1a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af1e:	7b1b      	ldrb	r3, [r3, #12]
 800af20:	461d      	mov	r5, r3
 800af22:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af26:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af2a:	7bdb      	ldrb	r3, [r3, #15]
 800af2c:	461a      	mov	r2, r3
 800af2e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af32:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af36:	7c1b      	ldrb	r3, [r3, #16]
 800af38:	4619      	mov	r1, r3
 800af3a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af3e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af42:	7c5b      	ldrb	r3, [r3, #17]
 800af44:	9302      	str	r3, [sp, #8]
 800af46:	9101      	str	r1, [sp, #4]
 800af48:	9200      	str	r2, [sp, #0]
 800af4a:	462b      	mov	r3, r5
 800af4c:	4622      	mov	r2, r4
 800af4e:	4601      	mov	r1, r0
 800af50:	4837      	ldr	r0, [pc, #220]	; (800b030 <Medha_EI_Analyser+0x8e4>)
 800af52:	f01b faa1 	bl	8026498 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 800af56:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af5a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af5e:	7c9b      	ldrb	r3, [r3, #18]
 800af60:	4619      	mov	r1, r3
 800af62:	4834      	ldr	r0, [pc, #208]	; (800b034 <Medha_EI_Analyser+0x8e8>)
 800af64:	f01b fa98 	bl	8026498 <iprintf>
		printf("RC:%5lu\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800af68:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af6c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	4619      	mov	r1, r3
 800af74:	4830      	ldr	r0, [pc, #192]	; (800b038 <Medha_EI_Analyser+0x8ec>)
 800af76:	f01b fa8f 	bl	8026498 <iprintf>
		printf("SIGNAL DATA       :");
 800af7a:	4830      	ldr	r0, [pc, #192]	; (800b03c <Medha_EI_Analyser+0x8f0>)
 800af7c:	f01b fa8c 	bl	8026498 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800af80:	2300      	movs	r3, #0
 800af82:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800af86:	e021      	b.n	800afcc <Medha_EI_Analyser+0x880>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 800af88:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d010      	beq.n	800afb2 <Medha_EI_Analyser+0x866>
 800af90:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800af94:	4b2a      	ldr	r3, [pc, #168]	; (800b040 <Medha_EI_Analyser+0x8f4>)
 800af96:	fba3 1302 	umull	r1, r3, r3, r2
 800af9a:	08d9      	lsrs	r1, r3, #3
 800af9c:	460b      	mov	r3, r1
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	440b      	add	r3, r1
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d102      	bne.n	800afb2 <Medha_EI_Analyser+0x866>
			{
				printf("\n                   ");
 800afac:	4825      	ldr	r0, [pc, #148]	; (800b044 <Medha_EI_Analyser+0x8f8>)
 800afae:	f01b fa73 	bl	8026498 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 800afb2:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afb6:	4a10      	ldr	r2, [pc, #64]	; (800aff8 <Medha_EI_Analyser+0x8ac>)
 800afb8:	5cd3      	ldrb	r3, [r2, r3]
 800afba:	4619      	mov	r1, r3
 800afbc:	4822      	ldr	r0, [pc, #136]	; (800b048 <Medha_EI_Analyser+0x8fc>)
 800afbe:	f01b fa6b 	bl	8026498 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800afc2:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afc6:	3301      	adds	r3, #1
 800afc8:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800afcc:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800afd0:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d3d7      	bcc.n	800af88 <Medha_EI_Analyser+0x83c>
		}
		printf("\n");
 800afd8:	200a      	movs	r0, #10
 800afda:	f01b fa75 	bl	80264c8 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 800afde:	481b      	ldr	r0, [pc, #108]	; (800b04c <Medha_EI_Analyser+0x900>)
 800afe0:	f01b faf6 	bl	80265d0 <puts>
		return;
 800afe4:	e004      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
	}
	else
	{
		return;
 800afe6:	bf00      	nop
 800afe8:	e002      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
				return;
 800afea:	bf00      	nop
 800afec:	e000      	b.n	800aff0 <Medha_EI_Analyser+0x8a4>
				return;
 800afee:	bf00      	nop
	}
}
 800aff0:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bdb0      	pop	{r4, r5, r7, pc}
 800aff8:	20003d78 	.word	0x20003d78
 800affc:	20003bf8 	.word	0x20003bf8
 800b000:	20003e80 	.word	0x20003e80
 800b004:	20003d1e 	.word	0x20003d1e
 800b008:	20003d50 	.word	0x20003d50
 800b00c:	080298e0 	.word	0x080298e0
 800b010:	20003d68 	.word	0x20003d68
 800b014:	080298f8 	.word	0x080298f8
 800b018:	08029920 	.word	0x08029920
 800b01c:	08029928 	.word	0x08029928
 800b020:	08029930 	.word	0x08029930
 800b024:	0802993c 	.word	0x0802993c
 800b028:	08029948 	.word	0x08029948
 800b02c:	08029950 	.word	0x08029950
 800b030:	08029958 	.word	0x08029958
 800b034:	0802997c 	.word	0x0802997c
 800b038:	08029988 	.word	0x08029988
 800b03c:	08029994 	.word	0x08029994
 800b040:	cccccccd 	.word	0xcccccccd
 800b044:	080299a8 	.word	0x080299a8
 800b048:	0802963c 	.word	0x0802963c
 800b04c:	080299c0 	.word	0x080299c0

0800b050 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b0d2      	sub	sp, #328	; 0x148
 800b054:	af00      	add	r7, sp, #0
 800b056:	4602      	mov	r2, r0
 800b058:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b05c:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b060:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 800b062:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b066:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	3304      	adds	r3, #4
 800b070:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b074:	2100      	movs	r1, #0
 800b076:	4618      	mov	r0, r3
 800b078:	f01b f926 	bl	80262c8 <memset>
	uint32_t Cal_Crc =0;
 800b07c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b080:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 800b08e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b092:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b096:	2200      	movs	r2, #0
 800b098:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 800b09a:	2300      	movs	r3, #0
 800b09c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 800b0a0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0a4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b0a8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b0ac:	2153      	movs	r1, #83	; 0x53
 800b0ae:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b0b0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800b0ba:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0be:	f107 0214 	add.w	r2, r7, #20
 800b0c2:	4413      	add	r3, r2
 800b0c4:	4a88      	ldr	r2, [pc, #544]	; (800b2e8 <Send_Medha_EI_Reply+0x298>)
 800b0c6:	8852      	ldrh	r2, [r2, #2]
 800b0c8:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b0ca:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0ce:	3302      	adds	r3, #2
 800b0d0:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800b0d4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0d8:	f107 0214 	add.w	r2, r7, #20
 800b0dc:	4413      	add	r3, r2
 800b0de:	4a82      	ldr	r2, [pc, #520]	; (800b2e8 <Send_Medha_EI_Reply+0x298>)
 800b0e0:	8892      	ldrh	r2, [r2, #4]
 800b0e2:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b0e4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0e8:	3302      	adds	r3, #2
 800b0ea:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800b0ee:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0f2:	f107 0214 	add.w	r2, r7, #20
 800b0f6:	4413      	add	r3, r2
 800b0f8:	4a7b      	ldr	r2, [pc, #492]	; (800b2e8 <Send_Medha_EI_Reply+0x298>)
 800b0fa:	7992      	ldrb	r2, [r2, #6]
 800b0fc:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b0fe:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b102:	3301      	adds	r3, #1
 800b104:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800b108:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b10c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b110:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b114:	21e2      	movs	r1, #226	; 0xe2
 800b116:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b118:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b11c:	3301      	adds	r3, #1
 800b11e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800b122:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b126:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800b12a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b12e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b132:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b136:	2100      	movs	r1, #0
 800b138:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800b13a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b13e:	3301      	adds	r3, #1
 800b140:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b144:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b148:	2100      	movs	r1, #0
 800b14a:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800b14c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b150:	3302      	adds	r3, #2
 800b152:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800b156:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b15a:	f107 0214 	add.w	r2, r7, #20
 800b15e:	4413      	add	r3, r2
 800b160:	4a61      	ldr	r2, [pc, #388]	; (800b2e8 <Send_Medha_EI_Reply+0x298>)
 800b162:	7a92      	ldrb	r2, [r2, #10]
 800b164:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b166:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b16a:	3301      	adds	r3, #1
 800b16c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800b170:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b174:	f107 0214 	add.w	r2, r7, #20
 800b178:	441a      	add	r2, r3
 800b17a:	4b5b      	ldr	r3, [pc, #364]	; (800b2e8 <Send_Medha_EI_Reply+0x298>)
 800b17c:	330b      	adds	r3, #11
 800b17e:	6819      	ldr	r1, [r3, #0]
 800b180:	6011      	str	r1, [r2, #0]
 800b182:	8899      	ldrh	r1, [r3, #4]
 800b184:	799b      	ldrb	r3, [r3, #6]
 800b186:	8091      	strh	r1, [r2, #4]
 800b188:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800b18a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b18e:	3307      	adds	r3, #7
 800b190:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800b194:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b198:	f107 0214 	add.w	r2, r7, #20
 800b19c:	4413      	add	r3, r2
 800b19e:	4a52      	ldr	r2, [pc, #328]	; (800b2e8 <Send_Medha_EI_Reply+0x298>)
 800b1a0:	8a92      	ldrh	r2, [r2, #20]
 800b1a2:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b1a4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1a8:	3302      	adds	r3, #2
 800b1aa:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800b1ae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1b2:	f107 0214 	add.w	r2, r7, #20
 800b1b6:	18d0      	adds	r0, r2, r3
 800b1b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b1bc:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4949      	ldr	r1, [pc, #292]	; (800b2ec <Send_Medha_EI_Reply+0x29c>)
 800b1c6:	f01b f857 	bl	8026278 <memcpy>
	BYTEINC(Outputs);
 800b1ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b1ce:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b1d2:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	4413      	add	r3, r2
 800b1da:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800b1de:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1e2:	f107 0214 	add.w	r2, r7, #20
 800b1e6:	18d0      	adds	r0, r2, r3
 800b1e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b1ec:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b1f0:	881b      	ldrh	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	493e      	ldr	r1, [pc, #248]	; (800b2f0 <Send_Medha_EI_Reply+0x2a0>)
 800b1f6:	f01b f83f 	bl	8026278 <memcpy>
	BYTEINC(Outputs);
 800b1fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b1fe:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b202:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	4413      	add	r3, r2
 800b20a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800b20e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b212:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b216:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b21a:	2100      	movs	r1, #0
 800b21c:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800b21e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b222:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b226:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b22a:	2100      	movs	r1, #0
 800b22c:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800b22e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b232:	3302      	adds	r3, #2
 800b234:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800b238:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	b29b      	uxth	r3, r3
 800b246:	3302      	adds	r3, #2
 800b248:	b29a      	uxth	r2, r3
 800b24a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b24e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b252:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800b254:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b258:	f107 0214 	add.w	r2, r7, #20
 800b25c:	4413      	add	r3, r2
 800b25e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b262:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800b266:	8812      	ldrh	r2, [r2, #0]
 800b268:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800b26a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b26e:	f107 0314 	add.w	r3, r7, #20
 800b272:	4619      	mov	r1, r3
 800b274:	2000      	movs	r0, #0
 800b276:	f000 fe47 	bl	800bf08 <GetCRC32>
 800b27a:	4602      	mov	r2, r0
 800b27c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b280:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b284:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800b286:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b28a:	f107 0214 	add.w	r2, r7, #20
 800b28e:	4413      	add	r3, r2
 800b290:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b294:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800b298:	6812      	ldr	r2, [r2, #0]
 800b29a:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800b29c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b2ac:	e011      	b.n	800b2d2 <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800b2ae:	4b11      	ldr	r3, [pc, #68]	; (800b2f4 <Send_Medha_EI_Reply+0x2a4>)
 800b2b0:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800b2b4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b2b8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b2bc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b2c0:	5cd3      	ldrb	r3, [r2, r3]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	f00d fe86 	bl	8018fd4 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b2c8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b2d2:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800b2d6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d3e7      	bcc.n	800b2ae <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800b2de:	bf00      	nop
}
 800b2e0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	20003bf8 	.word	0x20003bf8
 800b2ec:	20003c10 	.word	0x20003c10
 800b2f0:	20003c90 	.word	0x20003c90
 800b2f4:	20000504 	.word	0x20000504

0800b2f8 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800b2fe:	4b2a      	ldr	r3, [pc, #168]	; (800b3a8 <Send_Relay_Statuses_2_MIE+0xb0>)
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	4618      	mov	r0, r3
 800b304:	f004 fe38 	bl	800ff78 <HAL_Elaps_Ticks>
 800b308:	4602      	mov	r2, r0
 800b30a:	4b28      	ldr	r3, [pc, #160]	; (800b3ac <Send_Relay_Statuses_2_MIE+0xb4>)
 800b30c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800b310:	429a      	cmp	r2, r3
 800b312:	d345      	bcc.n	800b3a0 <Send_Relay_Statuses_2_MIE+0xa8>
	{
		uint16_t NoOfInputs = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800b318:	4b24      	ldr	r3, [pc, #144]	; (800b3ac <Send_Relay_Statuses_2_MIE+0xb4>)
 800b31a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	2b00      	cmp	r3, #0
 800b324:	d007      	beq.n	800b336 <Send_Relay_Statuses_2_MIE+0x3e>
 800b326:	4b21      	ldr	r3, [pc, #132]	; (800b3ac <Send_Relay_Statuses_2_MIE+0xb4>)
 800b328:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b32c:	08db      	lsrs	r3, r3, #3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	3301      	adds	r3, #1
 800b332:	80fb      	strh	r3, [r7, #6]
 800b334:	e004      	b.n	800b340 <Send_Relay_Statuses_2_MIE+0x48>
 800b336:	4b1d      	ldr	r3, [pc, #116]	; (800b3ac <Send_Relay_Statuses_2_MIE+0xb4>)
 800b338:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b33c:	08db      	lsrs	r3, r3, #3
 800b33e:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800b340:	f00e f8a0 	bl	8019484 <HAL_GetTick>
 800b344:	4603      	mov	r3, r0
 800b346:	4a18      	ldr	r2, [pc, #96]	; (800b3a8 <Send_Relay_Statuses_2_MIE+0xb0>)
 800b348:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800b34a:	4819      	ldr	r0, [pc, #100]	; (800b3b0 <Send_Relay_Statuses_2_MIE+0xb8>)
 800b34c:	f01b f940 	bl	80265d0 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b350:	2300      	movs	r3, #0
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	e01d      	b.n	800b392 <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00e      	beq.n	800b37a <Send_Relay_Statuses_2_MIE+0x82>
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	4b15      	ldr	r3, [pc, #84]	; (800b3b4 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b360:	fba3 2301 	umull	r2, r3, r3, r1
 800b364:	091a      	lsrs	r2, r3, #4
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	1aca      	subs	r2, r1, r3
 800b370:	2a00      	cmp	r2, #0
 800b372:	d102      	bne.n	800b37a <Send_Relay_Statuses_2_MIE+0x82>
			{
				printf("\n");
 800b374:	200a      	movs	r0, #10
 800b376:	f01b f8a7 	bl	80264c8 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800b37a:	4a0f      	ldr	r2, [pc, #60]	; (800b3b8 <Send_Relay_Statuses_2_MIE+0xc0>)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	4413      	add	r3, r2
 800b380:	3302      	adds	r3, #2
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	4619      	mov	r1, r3
 800b386:	480d      	ldr	r0, [pc, #52]	; (800b3bc <Send_Relay_Statuses_2_MIE+0xc4>)
 800b388:	f01b f886 	bl	8026498 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	3301      	adds	r3, #1
 800b390:	603b      	str	r3, [r7, #0]
 800b392:	88fb      	ldrh	r3, [r7, #6]
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d3dd      	bcc.n	800b356 <Send_Relay_Statuses_2_MIE+0x5e>
		}
		printf("\n");
 800b39a:	200a      	movs	r0, #10
 800b39c:	f01b f894 	bl	80264c8 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
#endif
	}
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20003d50 	.word	0x20003d50
 800b3ac:	20000504 	.word	0x20000504
 800b3b0:	080299e8 	.word	0x080299e8
 800b3b4:	cccccccd 	.word	0xcccccccd
 800b3b8:	20003d1c 	.word	0x20003d1c
 800b3bc:	0802963c 	.word	0x0802963c

0800b3c0 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800b3c6:	4b61      	ldr	r3, [pc, #388]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f004 fdd4 	bl	800ff78 <HAL_Elaps_Ticks>
 800b3d0:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b3d2:	4b5f      	ldr	r3, [pc, #380]	; (800b550 <Process_Clear_Relays+0x190>)
 800b3d4:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b3d8:	4a5d      	ldr	r2, [pc, #372]	; (800b550 <Process_Clear_Relays+0x190>)
 800b3da:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800b3de:	fb02 f303 	mul.w	r3, r2, r3
 800b3e2:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800b3e4:	495b      	ldr	r1, [pc, #364]	; (800b554 <Process_Clear_Relays+0x194>)
 800b3e6:	485c      	ldr	r0, [pc, #368]	; (800b558 <Process_Clear_Relays+0x198>)
 800b3e8:	f7f4 ff2a 	bl	8000240 <strcmp>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f000 80a7 	beq.w	800b542 <Process_Clear_Relays+0x182>
	{
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d30c      	bcc.n	800b416 <Process_Clear_Relays+0x56>
 800b3fc:	4b53      	ldr	r3, [pc, #332]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	4b56      	ldr	r3, [pc, #344]	; (800b55c <Process_Clear_Relays+0x19c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	429a      	cmp	r2, r3
 800b406:	d006      	beq.n	800b416 <Process_Clear_Relays+0x56>
 800b408:	4b55      	ldr	r3, [pc, #340]	; (800b560 <Process_Clear_Relays+0x1a0>)
 800b40a:	785a      	ldrb	r2, [r3, #1]
 800b40c:	4b50      	ldr	r3, [pc, #320]	; (800b550 <Process_Clear_Relays+0x190>)
 800b40e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b412:	429a      	cmp	r2, r3
 800b414:	d808      	bhi.n	800b428 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800b416:	4b4d      	ldr	r3, [pc, #308]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d049      	beq.n	800b4b2 <Process_Clear_Relays+0xf2>
 800b41e:	4b51      	ldr	r3, [pc, #324]	; (800b564 <Process_Clear_Relays+0x1a4>)
 800b420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b424:	2b00      	cmp	r3, #0
 800b426:	d044      	beq.n	800b4b2 <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b428:	4b48      	ldr	r3, [pc, #288]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	4619      	mov	r1, r3
 800b42e:	484e      	ldr	r0, [pc, #312]	; (800b568 <Process_Clear_Relays+0x1a8>)
 800b430:	f01b f832 	bl	8026498 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b434:	4b45      	ldr	r3, [pc, #276]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d006      	beq.n	800b44e <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b440:	4b42      	ldr	r3, [pc, #264]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	f023 0301 	bic.w	r3, r3, #1
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4b40      	ldr	r3, [pc, #256]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b44c:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b44e:	4b3f      	ldr	r3, [pc, #252]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d006      	beq.n	800b468 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b45a:	4b3c      	ldr	r3, [pc, #240]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	f023 0302 	bic.w	r3, r3, #2
 800b462:	b2da      	uxtb	r2, r3
 800b464:	4b39      	ldr	r3, [pc, #228]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b466:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b468:	2284      	movs	r2, #132	; 0x84
 800b46a:	2100      	movs	r1, #0
 800b46c:	483d      	ldr	r0, [pc, #244]	; (800b564 <Process_Clear_Relays+0x1a4>)
 800b46e:	f01a ff2b 	bl	80262c8 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b472:	2232      	movs	r2, #50	; 0x32
 800b474:	2100      	movs	r1, #0
 800b476:	483d      	ldr	r0, [pc, #244]	; (800b56c <Process_Clear_Relays+0x1ac>)
 800b478:	f01a ff26 	bl	80262c8 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b47c:	2284      	movs	r2, #132	; 0x84
 800b47e:	2100      	movs	r1, #0
 800b480:	483b      	ldr	r0, [pc, #236]	; (800b570 <Process_Clear_Relays+0x1b0>)
 800b482:	f01a ff21 	bl	80262c8 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b486:	2208      	movs	r2, #8
 800b488:	2100      	movs	r1, #0
 800b48a:	483a      	ldr	r0, [pc, #232]	; (800b574 <Process_Clear_Relays+0x1b4>)
 800b48c:	f01a ff1c 	bl	80262c8 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b490:	2208      	movs	r2, #8
 800b492:	2100      	movs	r1, #0
 800b494:	4832      	ldr	r0, [pc, #200]	; (800b560 <Process_Clear_Relays+0x1a0>)
 800b496:	f01a ff17 	bl	80262c8 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b49a:	2208      	movs	r2, #8
 800b49c:	2100      	movs	r1, #0
 800b49e:	4836      	ldr	r0, [pc, #216]	; (800b578 <Process_Clear_Relays+0x1b8>)
 800b4a0:	f01a ff12 	bl	80262c8 <memset>
		printf("Cleared Relay Statuses\n");
 800b4a4:	4835      	ldr	r0, [pc, #212]	; (800b57c <Process_Clear_Relays+0x1bc>)
 800b4a6:	f01b f893 	bl	80265d0 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b4aa:	4b28      	ldr	r3, [pc, #160]	; (800b54c <Process_Clear_Relays+0x18c>)
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4a2b      	ldr	r2, [pc, #172]	; (800b55c <Process_Clear_Relays+0x19c>)
 800b4b0:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 800b4b2:	4b33      	ldr	r3, [pc, #204]	; (800b580 <Process_Clear_Relays+0x1c0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f004 fd5e 	bl	800ff78 <HAL_Elaps_Ticks>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	4b24      	ldr	r3, [pc, #144]	; (800b550 <Process_Clear_Relays+0x190>)
 800b4c0:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d92a      	bls.n	800b51e <Process_Clear_Relays+0x15e>
 800b4c8:	4b2e      	ldr	r3, [pc, #184]	; (800b584 <Process_Clear_Relays+0x1c4>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d126      	bne.n	800b51e <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 800b4d0:	482d      	ldr	r0, [pc, #180]	; (800b588 <Process_Clear_Relays+0x1c8>)
 800b4d2:	f01b f87d 	bl	80265d0 <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 800b4d6:	4b2b      	ldr	r3, [pc, #172]	; (800b584 <Process_Clear_Relays+0x1c4>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b4dc:	2284      	movs	r2, #132	; 0x84
 800b4de:	2100      	movs	r1, #0
 800b4e0:	4820      	ldr	r0, [pc, #128]	; (800b564 <Process_Clear_Relays+0x1a4>)
 800b4e2:	f01a fef1 	bl	80262c8 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b4e6:	2232      	movs	r2, #50	; 0x32
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	4820      	ldr	r0, [pc, #128]	; (800b56c <Process_Clear_Relays+0x1ac>)
 800b4ec:	f01a feec 	bl	80262c8 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b4f0:	2284      	movs	r2, #132	; 0x84
 800b4f2:	2100      	movs	r1, #0
 800b4f4:	481e      	ldr	r0, [pc, #120]	; (800b570 <Process_Clear_Relays+0x1b0>)
 800b4f6:	f01a fee7 	bl	80262c8 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b4fa:	2208      	movs	r2, #8
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	481d      	ldr	r0, [pc, #116]	; (800b574 <Process_Clear_Relays+0x1b4>)
 800b500:	f01a fee2 	bl	80262c8 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b504:	2208      	movs	r2, #8
 800b506:	2100      	movs	r1, #0
 800b508:	4815      	ldr	r0, [pc, #84]	; (800b560 <Process_Clear_Relays+0x1a0>)
 800b50a:	f01a fedd 	bl	80262c8 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b50e:	2208      	movs	r2, #8
 800b510:	2100      	movs	r1, #0
 800b512:	4819      	ldr	r0, [pc, #100]	; (800b578 <Process_Clear_Relays+0x1b8>)
 800b514:	f01a fed8 	bl	80262c8 <memset>
		printf("Cleared Relay Statuses\n");
 800b518:	4818      	ldr	r0, [pc, #96]	; (800b57c <Process_Clear_Relays+0x1bc>)
 800b51a:	f01b f859 	bl	80265d0 <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 800b51e:	4b18      	ldr	r3, [pc, #96]	; (800b580 <Process_Clear_Relays+0x1c0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4618      	mov	r0, r3
 800b524:	f004 fd28 	bl	800ff78 <HAL_Elaps_Ticks>
 800b528:	4602      	mov	r2, r0
 800b52a:	4b09      	ldr	r3, [pc, #36]	; (800b550 <Process_Clear_Relays+0x190>)
 800b52c:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b530:	429a      	cmp	r2, r3
 800b532:	d207      	bcs.n	800b544 <Process_Clear_Relays+0x184>
 800b534:	4b13      	ldr	r3, [pc, #76]	; (800b584 <Process_Clear_Relays+0x1c4>)
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d103      	bne.n	800b544 <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 800b53c:	f00a fd24 	bl	8015f88 <Blink_S2>
 800b540:	e000      	b.n	800b544 <Process_Clear_Relays+0x184>
		return;
 800b542:	bf00      	nop
	}


}
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	20003d50 	.word	0x20003d50
 800b550:	20000504 	.word	0x20000504
 800b554:	0802969c 	.word	0x0802969c
 800b558:	20000505 	.word	0x20000505
 800b55c:	20003f10 	.word	0x20003f10
 800b560:	20003d68 	.word	0x20003d68
 800b564:	20003d78 	.word	0x20003d78
 800b568:	080299fc 	.word	0x080299fc
 800b56c:	20003d1c 	.word	0x20003d1c
 800b570:	20003e80 	.word	0x20003e80
 800b574:	20003d60 	.word	0x20003d60
 800b578:	20003d70 	.word	0x20003d70
 800b57c:	08029a2c 	.word	0x08029a2c
 800b580:	20003808 	.word	0x20003808
 800b584:	20003804 	.word	0x20003804
 800b588:	08029a44 	.word	0x08029a44

0800b58c <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800b590:	4b26      	ldr	r3, [pc, #152]	; (800b62c <Send_Data_to_Other+0xa0>)
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	4618      	mov	r0, r3
 800b596:	f004 fcef 	bl	800ff78 <HAL_Elaps_Ticks>
 800b59a:	4602      	mov	r2, r0
 800b59c:	4b24      	ldr	r3, [pc, #144]	; (800b630 <Send_Data_to_Other+0xa4>)
 800b59e:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b5a2:	4923      	ldr	r1, [pc, #140]	; (800b630 <Send_Data_to_Other+0xa4>)
 800b5a4:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800b5a8:	fb01 f303 	mul.w	r3, r1, r3
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d306      	bcc.n	800b5be <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800b5b0:	4b20      	ldr	r3, [pc, #128]	; (800b634 <Send_Data_to_Other+0xa8>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800b5b8:	4b1e      	ldr	r3, [pc, #120]	; (800b634 <Send_Data_to_Other+0xa8>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800b5be:	4b1b      	ldr	r3, [pc, #108]	; (800b62c <Send_Data_to_Other+0xa0>)
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f004 fcd8 	bl	800ff78 <HAL_Elaps_Ticks>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	4b19      	ldr	r3, [pc, #100]	; (800b630 <Send_Data_to_Other+0xa4>)
 800b5cc:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d90e      	bls.n	800b5f2 <Send_Data_to_Other+0x66>
 800b5d4:	4b15      	ldr	r3, [pc, #84]	; (800b62c <Send_Data_to_Other+0xa0>)
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	4b17      	ldr	r3, [pc, #92]	; (800b638 <Send_Data_to_Other+0xac>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d008      	beq.n	800b5f2 <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b5e0:	4b12      	ldr	r3, [pc, #72]	; (800b62c <Send_Data_to_Other+0xa0>)
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	4a14      	ldr	r2, [pc, #80]	; (800b638 <Send_Data_to_Other+0xac>)
 800b5e6:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800b5e8:	f240 2002 	movw	r0, #514	; 0x202
 800b5ec:	f005 fa40 	bl	8010a70 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800b5f0:	e01a      	b.n	800b628 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800b5f2:	4b12      	ldr	r3, [pc, #72]	; (800b63c <Send_Data_to_Other+0xb0>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f004 fcbe 	bl	800ff78 <HAL_Elaps_Ticks>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b602:	d911      	bls.n	800b628 <Send_Data_to_Other+0x9c>
 800b604:	4b09      	ldr	r3, [pc, #36]	; (800b62c <Send_Data_to_Other+0xa0>)
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	4618      	mov	r0, r3
 800b60a:	f004 fcb5 	bl	800ff78 <HAL_Elaps_Ticks>
 800b60e:	4603      	mov	r3, r0
 800b610:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b614:	d908      	bls.n	800b628 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800b616:	f00d ff35 	bl	8019484 <HAL_GetTick>
 800b61a:	4603      	mov	r3, r0
 800b61c:	4a07      	ldr	r2, [pc, #28]	; (800b63c <Send_Data_to_Other+0xb0>)
 800b61e:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_2_SELF_SHARING);
 800b620:	f240 2002 	movw	r0, #514	; 0x202
 800b624:	f005 fa24 	bl	8010a70 <TransmitCanPkt>
}
 800b628:	bf00      	nop
 800b62a:	bd80      	pop	{r7, pc}
 800b62c:	20003d50 	.word	0x20003d50
 800b630:	20000504 	.word	0x20000504
 800b634:	20003d60 	.word	0x20003d60
 800b638:	20003f14 	.word	0x20003f14
 800b63c:	20003f18 	.word	0x20003f18

0800b640 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800b640:	b5b0      	push	{r4, r5, r7, lr}
 800b642:	af00      	add	r7, sp, #0


	if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 800b644:	499a      	ldr	r1, [pc, #616]	; (800b8b0 <Process_Data_from_Other+0x270>)
 800b646:	489b      	ldr	r0, [pc, #620]	; (800b8b4 <Process_Data_from_Other+0x274>)
 800b648:	f7f4 fdfa 	bl	8000240 <strcmp>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 812b 	beq.w	800b8aa <Process_Data_from_Other+0x26a>
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800b654:	4b98      	ldr	r3, [pc, #608]	; (800b8b8 <Process_Data_from_Other+0x278>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	4b98      	ldr	r3, [pc, #608]	; (800b8bc <Process_Data_from_Other+0x27c>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d109      	bne.n	800b674 <Process_Data_from_Other+0x34>
 800b660:	4b95      	ldr	r3, [pc, #596]	; (800b8b8 <Process_Data_from_Other+0x278>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4618      	mov	r0, r3
 800b666:	f004 fc87 	bl	800ff78 <HAL_Elaps_Ticks>
 800b66a:	4603      	mov	r3, r0
 800b66c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b670:	f0c0 80e4 	bcc.w	800b83c <Process_Data_from_Other+0x1fc>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800b674:	f00d ff06 	bl	8019484 <HAL_GetTick>
 800b678:	4603      	mov	r3, r0
 800b67a:	4a8f      	ldr	r2, [pc, #572]	; (800b8b8 <Process_Data_from_Other+0x278>)
 800b67c:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800b67e:	4b90      	ldr	r3, [pc, #576]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d007      	beq.n	800b696 <Process_Data_from_Other+0x56>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800b686:	4b8f      	ldr	r3, [pc, #572]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	f043 0301 	orr.w	r3, r3, #1
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	4b8c      	ldr	r3, [pc, #560]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b692:	701a      	strb	r2, [r3, #0]
 800b694:	e006      	b.n	800b6a4 <Process_Data_from_Other+0x64>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800b696:	4b8b      	ldr	r3, [pc, #556]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	f023 0301 	bic.w	r3, r3, #1
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	4b88      	ldr	r3, [pc, #544]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b6a2:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800b6a4:	4b88      	ldr	r3, [pc, #544]	; (800b8c8 <Process_Data_from_Other+0x288>)
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d007      	beq.n	800b6bc <Process_Data_from_Other+0x7c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800b6ac:	4b85      	ldr	r3, [pc, #532]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	f043 0302 	orr.w	r3, r3, #2
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	4b83      	ldr	r3, [pc, #524]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b6b8:	701a      	strb	r2, [r3, #0]
 800b6ba:	e006      	b.n	800b6ca <Process_Data_from_Other+0x8a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800b6bc:	4b81      	ldr	r3, [pc, #516]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	f023 0302 	bic.w	r3, r3, #2
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	4b7f      	ldr	r3, [pc, #508]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b6c8:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800b6ca:	4b7e      	ldr	r3, [pc, #504]	; (800b8c4 <Process_Data_from_Other+0x284>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	f200 809a 	bhi.w	800b808 <Process_Data_from_Other+0x1c8>
 800b6d4:	a201      	add	r2, pc, #4	; (adr r2, 800b6dc <Process_Data_from_Other+0x9c>)
 800b6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6da:	bf00      	nop
 800b6dc:	0800b6ed 	.word	0x0800b6ed
 800b6e0:	0800b77d 	.word	0x0800b77d
 800b6e4:	0800b6fb 	.word	0x0800b6fb
 800b6e8:	0800b7cd 	.word	0x0800b7cd
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b6ec:	4b74      	ldr	r3, [pc, #464]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	4b72      	ldr	r3, [pc, #456]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b6f6:	705a      	strb	r2, [r3, #1]
			break;
 800b6f8:	e086      	b.n	800b808 <Process_Data_from_Other+0x1c8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b6fa:	4b73      	ldr	r3, [pc, #460]	; (800b8c8 <Process_Data_from_Other+0x288>)
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	4b70      	ldr	r3, [pc, #448]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	429a      	cmp	r2, r3
 800b704:	d02f      	beq.n	800b766 <Process_Data_from_Other+0x126>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800b706:	4b71      	ldr	r3, [pc, #452]	; (800b8cc <Process_Data_from_Other+0x28c>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d179      	bne.n	800b802 <Process_Data_from_Other+0x1c2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800b70e:	4b6c      	ldr	r3, [pc, #432]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	4619      	mov	r1, r3
 800b714:	486e      	ldr	r0, [pc, #440]	; (800b8d0 <Process_Data_from_Other+0x290>)
 800b716:	f01a febf 	bl	8026498 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800b71a:	4b6b      	ldr	r3, [pc, #428]	; (800b8c8 <Process_Data_from_Other+0x288>)
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	4619      	mov	r1, r3
 800b720:	486c      	ldr	r0, [pc, #432]	; (800b8d4 <Process_Data_from_Other+0x294>)
 800b722:	f01a feb9 	bl	8026498 <iprintf>
					Received_CAN_Relay_Status=NO;
 800b726:	4b69      	ldr	r3, [pc, #420]	; (800b8cc <Process_Data_from_Other+0x28c>)
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800b72c:	486a      	ldr	r0, [pc, #424]	; (800b8d8 <Process_Data_from_Other+0x298>)
 800b72e:	f01a ff4f 	bl	80265d0 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b732:	4a6a      	ldr	r2, [pc, #424]	; (800b8dc <Process_Data_from_Other+0x29c>)
 800b734:	4b6a      	ldr	r3, [pc, #424]	; (800b8e0 <Process_Data_from_Other+0x2a0>)
 800b736:	4610      	mov	r0, r2
 800b738:	4619      	mov	r1, r3
 800b73a:	2384      	movs	r3, #132	; 0x84
 800b73c:	461a      	mov	r2, r3
 800b73e:	f01a fd9b 	bl	8026278 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800b742:	4a68      	ldr	r2, [pc, #416]	; (800b8e4 <Process_Data_from_Other+0x2a4>)
 800b744:	4b65      	ldr	r3, [pc, #404]	; (800b8dc <Process_Data_from_Other+0x29c>)
 800b746:	4614      	mov	r4, r2
 800b748:	461d      	mov	r5, r3
 800b74a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b74e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b756:	682b      	ldr	r3, [r5, #0]
 800b758:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800b75a:	4b60      	ldr	r3, [pc, #384]	; (800b8dc <Process_Data_from_Other+0x29c>)
 800b75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b760:	4a57      	ldr	r2, [pc, #348]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b762:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800b764:	e04d      	b.n	800b802 <Process_Data_from_Other+0x1c2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800b766:	4b56      	ldr	r3, [pc, #344]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b768:	2200      	movs	r2, #0
 800b76a:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b76c:	4b5e      	ldr	r3, [pc, #376]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	f023 0301 	bic.w	r3, r3, #1
 800b774:	b2da      	uxtb	r2, r3
 800b776:	4b5c      	ldr	r3, [pc, #368]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b778:	701a      	strb	r2, [r3, #0]
			break;
 800b77a:	e042      	b.n	800b802 <Process_Data_from_Other+0x1c2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b77c:	4b52      	ldr	r3, [pc, #328]	; (800b8c8 <Process_Data_from_Other+0x288>)
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4b4f      	ldr	r3, [pc, #316]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	429a      	cmp	r2, r3
 800b786:	d016      	beq.n	800b7b6 <Process_Data_from_Other+0x176>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800b788:	4858      	ldr	r0, [pc, #352]	; (800b8ec <Process_Data_from_Other+0x2ac>)
 800b78a:	f01a ff21 	bl	80265d0 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b78e:	4b4c      	ldr	r3, [pc, #304]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b790:	785b      	ldrb	r3, [r3, #1]
 800b792:	3301      	adds	r3, #1
 800b794:	b2da      	uxtb	r2, r3
 800b796:	4b4a      	ldr	r3, [pc, #296]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b798:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800b79a:	4b49      	ldr	r3, [pc, #292]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b79c:	785b      	ldrb	r3, [r3, #1]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d931      	bls.n	800b806 <Process_Data_from_Other+0x1c6>
 800b7a2:	4b4e      	ldr	r3, [pc, #312]	; (800b8dc <Process_Data_from_Other+0x29c>)
 800b7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d02c      	beq.n	800b806 <Process_Data_from_Other+0x1c6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
					TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800b7ac:	f44f 7002 	mov.w	r0, #520	; 0x208
 800b7b0:	f005 f95e 	bl	8010a70 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800b7b4:	e027      	b.n	800b806 <Process_Data_from_Other+0x1c6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b7b6:	4b4c      	ldr	r3, [pc, #304]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	f023 0301 	bic.w	r3, r3, #1
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	4b49      	ldr	r3, [pc, #292]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b7c2:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800b7c4:	4b3e      	ldr	r3, [pc, #248]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	705a      	strb	r2, [r3, #1]
			break;
 800b7ca:	e01c      	b.n	800b806 <Process_Data_from_Other+0x1c6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b7cc:	4b3e      	ldr	r3, [pc, #248]	; (800b8c8 <Process_Data_from_Other+0x288>)
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	4b3b      	ldr	r3, [pc, #236]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d009      	beq.n	800b7ec <Process_Data_from_Other+0x1ac>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800b7d8:	4844      	ldr	r0, [pc, #272]	; (800b8ec <Process_Data_from_Other+0x2ac>)
 800b7da:	f01a fef9 	bl	80265d0 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b7de:	4b38      	ldr	r3, [pc, #224]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b7e0:	785b      	ldrb	r3, [r3, #1]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	4b36      	ldr	r3, [pc, #216]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b7e8:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800b7ea:	e00d      	b.n	800b808 <Process_Data_from_Other+0x1c8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b7ec:	4b3e      	ldr	r3, [pc, #248]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	f023 0301 	bic.w	r3, r3, #1
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	4b3c      	ldr	r3, [pc, #240]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b7f8:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800b7fa:	4b31      	ldr	r3, [pc, #196]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	705a      	strb	r2, [r3, #1]
			break;
 800b800:	e002      	b.n	800b808 <Process_Data_from_Other+0x1c8>
			break;
 800b802:	bf00      	nop
 800b804:	e000      	b.n	800b808 <Process_Data_from_Other+0x1c8>
			break;
 800b806:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800b808:	4b2d      	ldr	r3, [pc, #180]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b80a:	785a      	ldrb	r2, [r3, #1]
 800b80c:	4b38      	ldr	r3, [pc, #224]	; (800b8f0 <Process_Data_from_Other+0x2b0>)
 800b80e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b812:	429a      	cmp	r2, r3
 800b814:	d312      	bcc.n	800b83c <Process_Data_from_Other+0x1fc>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800b816:	4b34      	ldr	r3, [pc, #208]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	f003 0301 	and.w	r3, r3, #1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10c      	bne.n	800b83c <Process_Data_from_Other+0x1fc>
			{
				printf("MisMatch Count Reached\n");
 800b822:	4834      	ldr	r0, [pc, #208]	; (800b8f4 <Process_Data_from_Other+0x2b4>)
 800b824:	f01a fed4 	bl	80265d0 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800b828:	4b25      	ldr	r3, [pc, #148]	; (800b8c0 <Process_Data_from_Other+0x280>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b82e:	4b2e      	ldr	r3, [pc, #184]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	f043 0301 	orr.w	r3, r3, #1
 800b836:	b2da      	uxtb	r2, r3
 800b838:	4b2b      	ldr	r3, [pc, #172]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b83a:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800b83c:	4b1f      	ldr	r3, [pc, #124]	; (800b8bc <Process_Data_from_Other+0x27c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f004 fb99 	bl	800ff78 <HAL_Elaps_Ticks>
 800b846:	4602      	mov	r2, r0
 800b848:	4b29      	ldr	r3, [pc, #164]	; (800b8f0 <Process_Data_from_Other+0x2b0>)
 800b84a:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b84e:	429a      	cmp	r2, r3
 800b850:	d92c      	bls.n	800b8ac <Process_Data_from_Other+0x26c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800b852:	4b29      	ldr	r3, [pc, #164]	; (800b8f8 <Process_Data_from_Other+0x2b8>)
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	4b19      	ldr	r3, [pc, #100]	; (800b8bc <Process_Data_from_Other+0x27c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d026      	beq.n	800b8ac <Process_Data_from_Other+0x26c>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800b85e:	4b17      	ldr	r3, [pc, #92]	; (800b8bc <Process_Data_from_Other+0x27c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a25      	ldr	r2, [pc, #148]	; (800b8f8 <Process_Data_from_Other+0x2b8>)
 800b864:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800b866:	4b15      	ldr	r3, [pc, #84]	; (800b8bc <Process_Data_from_Other+0x27c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f004 fb84 	bl	800ff78 <HAL_Elaps_Ticks>
 800b870:	4603      	mov	r3, r0
 800b872:	4a22      	ldr	r2, [pc, #136]	; (800b8fc <Process_Data_from_Other+0x2bc>)
 800b874:	fba2 2303 	umull	r2, r3, r2, r3
 800b878:	099b      	lsrs	r3, r3, #6
 800b87a:	4619      	mov	r1, r3
 800b87c:	4820      	ldr	r0, [pc, #128]	; (800b900 <Process_Data_from_Other+0x2c0>)
 800b87e:	f01a fe0b 	bl	8026498 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800b882:	4b0e      	ldr	r3, [pc, #56]	; (800b8bc <Process_Data_from_Other+0x27c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4619      	mov	r1, r3
 800b888:	481e      	ldr	r0, [pc, #120]	; (800b904 <Process_Data_from_Other+0x2c4>)
 800b88a:	f01a fe05 	bl	8026498 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800b88e:	4b16      	ldr	r3, [pc, #88]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	f003 0302 	and.w	r3, r3, #2
 800b896:	2b00      	cmp	r3, #0
 800b898:	d108      	bne.n	800b8ac <Process_Data_from_Other+0x26c>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b89a:	4b13      	ldr	r3, [pc, #76]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	f043 0302 	orr.w	r3, r3, #2
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <Process_Data_from_Other+0x2a8>)
 800b8a6:	701a      	strb	r2, [r3, #0]
 800b8a8:	e000      	b.n	800b8ac <Process_Data_from_Other+0x26c>
		return;
 800b8aa:	bf00      	nop
			}
		}
	}
}
 800b8ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	0802969c 	.word	0x0802969c
 800b8b4:	20000505 	.word	0x20000505
 800b8b8:	20003f1c 	.word	0x20003f1c
 800b8bc:	20003808 	.word	0x20003808
 800b8c0:	20003d60 	.word	0x20003d60
 800b8c4:	20003806 	.word	0x20003806
 800b8c8:	20003d68 	.word	0x20003d68
 800b8cc:	20003805 	.word	0x20003805
 800b8d0:	08029a64 	.word	0x08029a64
 800b8d4:	08029a7c 	.word	0x08029a7c
 800b8d8:	08029a94 	.word	0x08029a94
 800b8dc:	20003d78 	.word	0x20003d78
 800b8e0:	20003dfc 	.word	0x20003dfc
 800b8e4:	20003d1c 	.word	0x20003d1c
 800b8e8:	20003d50 	.word	0x20003d50
 800b8ec:	08029ac8 	.word	0x08029ac8
 800b8f0:	20000504 	.word	0x20000504
 800b8f4:	08029aec 	.word	0x08029aec
 800b8f8:	20003f20 	.word	0x20003f20
 800b8fc:	10624dd3 	.word	0x10624dd3
 800b900:	08029b04 	.word	0x08029b04
 800b904:	08029b34 	.word	0x08029b34

0800b908 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800b90c:	482a      	ldr	r0, [pc, #168]	; (800b9b8 <Print_Medha_Self_Details+0xb0>)
 800b90e:	f01a fe5f 	bl	80265d0 <puts>
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800b912:	4b2a      	ldr	r3, [pc, #168]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b914:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800b918:	4619      	mov	r1, r3
 800b91a:	4829      	ldr	r0, [pc, #164]	; (800b9c0 <Print_Medha_Self_Details+0xb8>)
 800b91c:	f01a fdbc 	bl	8026498 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800b920:	4b26      	ldr	r3, [pc, #152]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b922:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800b926:	4619      	mov	r1, r3
 800b928:	4826      	ldr	r0, [pc, #152]	; (800b9c4 <Print_Medha_Self_Details+0xbc>)
 800b92a:	f01a fdb5 	bl	8026498 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800b92e:	4b23      	ldr	r3, [pc, #140]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b930:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b934:	4619      	mov	r1, r3
 800b936:	4824      	ldr	r0, [pc, #144]	; (800b9c8 <Print_Medha_Self_Details+0xc0>)
 800b938:	f01a fdae 	bl	8026498 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800b93c:	4b1f      	ldr	r3, [pc, #124]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b93e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800b942:	4619      	mov	r1, r3
 800b944:	4821      	ldr	r0, [pc, #132]	; (800b9cc <Print_Medha_Self_Details+0xc4>)
 800b946:	f01a fda7 	bl	8026498 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800b94a:	4b1c      	ldr	r3, [pc, #112]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b94c:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b950:	4619      	mov	r1, r3
 800b952:	481f      	ldr	r0, [pc, #124]	; (800b9d0 <Print_Medha_Self_Details+0xc8>)
 800b954:	f01a fda0 	bl	8026498 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800b958:	4b18      	ldr	r3, [pc, #96]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b95a:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b95e:	4619      	mov	r1, r3
 800b960:	481c      	ldr	r0, [pc, #112]	; (800b9d4 <Print_Medha_Self_Details+0xcc>)
 800b962:	f01a fd99 	bl	8026498 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800b966:	4b15      	ldr	r3, [pc, #84]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b968:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b96c:	4619      	mov	r1, r3
 800b96e:	481a      	ldr	r0, [pc, #104]	; (800b9d8 <Print_Medha_Self_Details+0xd0>)
 800b970:	f01a fd92 	bl	8026498 <iprintf>
	printf("NoofRelays                    :%lu\n",EI_data.Medha_Prms_st.NoofRelays);
 800b974:	4b11      	ldr	r3, [pc, #68]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b976:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b97a:	4619      	mov	r1, r3
 800b97c:	4817      	ldr	r0, [pc, #92]	; (800b9dc <Print_Medha_Self_Details+0xd4>)
 800b97e:	f01a fd8b 	bl	8026498 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800b982:	4b0e      	ldr	r3, [pc, #56]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b984:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b988:	4619      	mov	r1, r3
 800b98a:	4815      	ldr	r0, [pc, #84]	; (800b9e0 <Print_Medha_Self_Details+0xd8>)
 800b98c:	f01a fd84 	bl	8026498 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b990:	4b0a      	ldr	r3, [pc, #40]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b992:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800b996:	4619      	mov	r1, r3
 800b998:	4812      	ldr	r0, [pc, #72]	; (800b9e4 <Print_Medha_Self_Details+0xdc>)
 800b99a:	f01a fd7d 	bl	8026498 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800b99e:	4b07      	ldr	r3, [pc, #28]	; (800b9bc <Print_Medha_Self_Details+0xb4>)
 800b9a0:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4810      	ldr	r0, [pc, #64]	; (800b9e8 <Print_Medha_Self_Details+0xe0>)
 800b9a8:	f01a fd76 	bl	8026498 <iprintf>

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800b9ac:	4802      	ldr	r0, [pc, #8]	; (800b9b8 <Print_Medha_Self_Details+0xb0>)
 800b9ae:	f01a fe0f 	bl	80265d0 <puts>
#endif
}
 800b9b2:	bf00      	nop
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	08029b5c 	.word	0x08029b5c
 800b9bc:	20000504 	.word	0x20000504
 800b9c0:	08029bb0 	.word	0x08029bb0
 800b9c4:	08029bd4 	.word	0x08029bd4
 800b9c8:	08029bf8 	.word	0x08029bf8
 800b9cc:	08029c1c 	.word	0x08029c1c
 800b9d0:	08029c40 	.word	0x08029c40
 800b9d4:	08029c64 	.word	0x08029c64
 800b9d8:	08029c88 	.word	0x08029c88
 800b9dc:	08029cac 	.word	0x08029cac
 800b9e0:	08029cd0 	.word	0x08029cd0
 800b9e4:	08029cf4 	.word	0x08029cf4
 800b9e8:	08029d18 	.word	0x08029d18

0800b9ec <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b09a      	sub	sp, #104	; 0x68
 800b9f0:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800ba04:	2300      	movs	r3, #0
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	1d3b      	adds	r3, r7, #4
 800ba0a:	2260      	movs	r2, #96	; 0x60
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f01a fc5a 	bl	80262c8 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800ba14:	4bb9      	ldr	r3, [pc, #740]	; (800bcfc <CheckforMedhaCMD+0x310>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f004 faad 	bl	800ff78 <HAL_Elaps_Ticks>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b09      	cmp	r3, #9
 800ba22:	f240 81ad 	bls.w	800bd80 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800ba26:	e010      	b.n	800ba4a <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f00d fa03 	bl	8018e34 <Com_Get_Byte>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800ba34:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800ba3e:	3368      	adds	r3, #104	; 0x68
 800ba40:	443b      	add	r3, r7
 800ba42:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ba46:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	f00d f9b2 	bl	8018db4 <Com_DataReady>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1e8      	bne.n	800ba28 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800ba56:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 8144 	beq.w	800bce8 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800ba60:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ba64:	3368      	adds	r3, #104	; 0x68
 800ba66:	443b      	add	r3, r7
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800ba6e:	463b      	mov	r3, r7
 800ba70:	4619      	mov	r1, r3
 800ba72:	48a3      	ldr	r0, [pc, #652]	; (800bd00 <CheckforMedhaCMD+0x314>)
 800ba74:	f01a fd10 	bl	8026498 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800ba78:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800ba7c:	463b      	mov	r3, r7
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 fa0d 	bl	800bea0 <Is_MedhaCommand_Valid>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b0c      	cmp	r3, #12
 800ba8a:	f200 8129 	bhi.w	800bce0 <CheckforMedhaCMD+0x2f4>
 800ba8e:	a201      	add	r2, pc, #4	; (adr r2, 800ba94 <CheckforMedhaCMD+0xa8>)
 800ba90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba94:	0800bac9 	.word	0x0800bac9
 800ba98:	0800bad7 	.word	0x0800bad7
 800ba9c:	0800bb3b 	.word	0x0800bb3b
 800baa0:	0800bb5d 	.word	0x0800bb5d
 800baa4:	0800bb85 	.word	0x0800bb85
 800baa8:	0800bbad 	.word	0x0800bbad
 800baac:	0800bbd5 	.word	0x0800bbd5
 800bab0:	0800bbfd 	.word	0x0800bbfd
 800bab4:	0800bc25 	.word	0x0800bc25
 800bab8:	0800bc4d 	.word	0x0800bc4d
 800babc:	0800bc75 	.word	0x0800bc75
 800bac0:	0800bc9d 	.word	0x0800bc9d
 800bac4:	0800bcc5 	.word	0x0800bcc5
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800bac8:	4b8e      	ldr	r3, [pc, #568]	; (800bd04 <CheckforMedhaCMD+0x318>)
 800baca:	2201      	movs	r2, #1
 800bacc:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800bace:	488e      	ldr	r0, [pc, #568]	; (800bd08 <CheckforMedhaCMD+0x31c>)
 800bad0:	f01a fd7e 	bl	80265d0 <puts>
				break;
 800bad4:	e109      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800bad6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bada:	3b01      	subs	r3, #1
 800badc:	3368      	adds	r3, #104	; 0x68
 800bade:	443b      	add	r3, r7
 800bae0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bae4:	3b30      	subs	r3, #48	; 0x30
 800bae6:	461a      	mov	r2, r3
 800bae8:	4988      	ldr	r1, [pc, #544]	; (800bd0c <CheckforMedhaCMD+0x320>)
 800baea:	4889      	ldr	r0, [pc, #548]	; (800bd10 <CheckforMedhaCMD+0x324>)
 800baec:	f01a fcd4 	bl	8026498 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800baf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800baf4:	3b01      	subs	r3, #1
 800baf6:	3368      	adds	r3, #104	; 0x68
 800baf8:	443b      	add	r3, r7
 800bafa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bafe:	2b2f      	cmp	r3, #47	; 0x2f
 800bb00:	d914      	bls.n	800bb2c <CheckforMedhaCMD+0x140>
 800bb02:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bb06:	3b01      	subs	r3, #1
 800bb08:	3368      	adds	r3, #104	; 0x68
 800bb0a:	443b      	add	r3, r7
 800bb0c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bb10:	2b32      	cmp	r3, #50	; 0x32
 800bb12:	d80b      	bhi.n	800bb2c <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800bb14:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	3368      	adds	r3, #104	; 0x68
 800bb1c:	443b      	add	r3, r7
 800bb1e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bb22:	3b30      	subs	r3, #48	; 0x30
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	4b7b      	ldr	r3, [pc, #492]	; (800bd14 <CheckforMedhaCMD+0x328>)
 800bb28:	701a      	strb	r2, [r3, #0]
 800bb2a:	e002      	b.n	800bb32 <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800bb2c:	487a      	ldr	r0, [pc, #488]	; (800bd18 <CheckforMedhaCMD+0x32c>)
 800bb2e:	f01a fd4f 	bl	80265d0 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800bb32:	2301      	movs	r3, #1
 800bb34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bb38:	e0d7      	b.n	800bcea <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800bb3a:	4978      	ldr	r1, [pc, #480]	; (800bd1c <CheckforMedhaCMD+0x330>)
 800bb3c:	4878      	ldr	r0, [pc, #480]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bb3e:	f01a fcab 	bl	8026498 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800bb42:	4878      	ldr	r0, [pc, #480]	; (800bd24 <CheckforMedhaCMD+0x338>)
 800bb44:	f01a fd44 	bl	80265d0 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bb48:	4b77      	ldr	r3, [pc, #476]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f043 0301 	orr.w	r3, r3, #1
 800bb50:	4a75      	ldr	r2, [pc, #468]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bb52:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bb54:	2301      	movs	r3, #1
 800bb56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bb5a:	e0c6      	b.n	800bcea <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800bb5c:	4973      	ldr	r1, [pc, #460]	; (800bd2c <CheckforMedhaCMD+0x340>)
 800bb5e:	4870      	ldr	r0, [pc, #448]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bb60:	f01a fc9a 	bl	8026498 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800bb64:	4872      	ldr	r0, [pc, #456]	; (800bd30 <CheckforMedhaCMD+0x344>)
 800bb66:	f01a fd33 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bb6a:	4b6f      	ldr	r3, [pc, #444]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bb70:	4b6d      	ldr	r3, [pc, #436]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f043 0302 	orr.w	r3, r3, #2
 800bb78:	4a6b      	ldr	r2, [pc, #428]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bb7a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bb82:	e0b2      	b.n	800bcea <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800bb84:	496b      	ldr	r1, [pc, #428]	; (800bd34 <CheckforMedhaCMD+0x348>)
 800bb86:	4866      	ldr	r0, [pc, #408]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bb88:	f01a fc86 	bl	8026498 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800bb8c:	486a      	ldr	r0, [pc, #424]	; (800bd38 <CheckforMedhaCMD+0x34c>)
 800bb8e:	f01a fd1f 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bb92:	4b65      	ldr	r3, [pc, #404]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bb98:	4b63      	ldr	r3, [pc, #396]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f043 0304 	orr.w	r3, r3, #4
 800bba0:	4a61      	ldr	r2, [pc, #388]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bba2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bbaa:	e09e      	b.n	800bcea <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800bbac:	4963      	ldr	r1, [pc, #396]	; (800bd3c <CheckforMedhaCMD+0x350>)
 800bbae:	485c      	ldr	r0, [pc, #368]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bbb0:	f01a fc72 	bl	8026498 <iprintf>
				printf("INVALID_DES_PORT\n");
 800bbb4:	4862      	ldr	r0, [pc, #392]	; (800bd40 <CheckforMedhaCMD+0x354>)
 800bbb6:	f01a fd0b 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bbba:	4b5b      	ldr	r3, [pc, #364]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bbc0:	4b59      	ldr	r3, [pc, #356]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f043 0308 	orr.w	r3, r3, #8
 800bbc8:	4a57      	ldr	r2, [pc, #348]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bbca:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bbd2:	e08a      	b.n	800bcea <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800bbd4:	495b      	ldr	r1, [pc, #364]	; (800bd44 <CheckforMedhaCMD+0x358>)
 800bbd6:	4852      	ldr	r0, [pc, #328]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bbd8:	f01a fc5e 	bl	8026498 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800bbdc:	485a      	ldr	r0, [pc, #360]	; (800bd48 <CheckforMedhaCMD+0x35c>)
 800bbde:	f01a fcf7 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bbe2:	4b51      	ldr	r3, [pc, #324]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bbe8:	4b4f      	ldr	r3, [pc, #316]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f043 0310 	orr.w	r3, r3, #16
 800bbf0:	4a4d      	ldr	r2, [pc, #308]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bbf2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bbfa:	e076      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800bbfc:	4953      	ldr	r1, [pc, #332]	; (800bd4c <CheckforMedhaCMD+0x360>)
 800bbfe:	4848      	ldr	r0, [pc, #288]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bc00:	f01a fc4a 	bl	8026498 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800bc04:	4852      	ldr	r0, [pc, #328]	; (800bd50 <CheckforMedhaCMD+0x364>)
 800bc06:	f01a fce3 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bc0a:	4b47      	ldr	r3, [pc, #284]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bc10:	4b45      	ldr	r3, [pc, #276]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f043 0320 	orr.w	r3, r3, #32
 800bc18:	4a43      	ldr	r2, [pc, #268]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc1a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bc22:	e062      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800bc24:	494b      	ldr	r1, [pc, #300]	; (800bd54 <CheckforMedhaCMD+0x368>)
 800bc26:	484c      	ldr	r0, [pc, #304]	; (800bd58 <CheckforMedhaCMD+0x36c>)
 800bc28:	f01a fc36 	bl	8026498 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800bc2c:	484b      	ldr	r0, [pc, #300]	; (800bd5c <CheckforMedhaCMD+0x370>)
 800bc2e:	f01a fccf 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bc32:	4b3d      	ldr	r3, [pc, #244]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bc38:	4b3b      	ldr	r3, [pc, #236]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc40:	4a39      	ldr	r2, [pc, #228]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc42:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bc44:	2301      	movs	r3, #1
 800bc46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bc4a:	e04e      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800bc4c:	4944      	ldr	r1, [pc, #272]	; (800bd60 <CheckforMedhaCMD+0x374>)
 800bc4e:	4834      	ldr	r0, [pc, #208]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bc50:	f01a fc22 	bl	8026498 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800bc54:	4843      	ldr	r0, [pc, #268]	; (800bd64 <CheckforMedhaCMD+0x378>)
 800bc56:	f01a fcbb 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bc5a:	4b33      	ldr	r3, [pc, #204]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bc60:	4b31      	ldr	r3, [pc, #196]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc68:	4a2f      	ldr	r2, [pc, #188]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc6a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bc72:	e03a      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800bc74:	493c      	ldr	r1, [pc, #240]	; (800bd68 <CheckforMedhaCMD+0x37c>)
 800bc76:	482a      	ldr	r0, [pc, #168]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bc78:	f01a fc0e 	bl	8026498 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800bc7c:	483b      	ldr	r0, [pc, #236]	; (800bd6c <CheckforMedhaCMD+0x380>)
 800bc7e:	f01a fca7 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bc82:	4b29      	ldr	r3, [pc, #164]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bc88:	4b27      	ldr	r3, [pc, #156]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc90:	4a25      	ldr	r2, [pc, #148]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bc92:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bc9a:	e026      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800bc9c:	4934      	ldr	r1, [pc, #208]	; (800bd70 <CheckforMedhaCMD+0x384>)
 800bc9e:	4820      	ldr	r0, [pc, #128]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bca0:	f01a fbfa 	bl	8026498 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800bca4:	4833      	ldr	r0, [pc, #204]	; (800bd74 <CheckforMedhaCMD+0x388>)
 800bca6:	f01a fc93 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bcaa:	4b1f      	ldr	r3, [pc, #124]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bcb0:	4b1d      	ldr	r3, [pc, #116]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bcb8:	4a1b      	ldr	r2, [pc, #108]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bcba:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bcc2:	e012      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800bcc4:	492c      	ldr	r1, [pc, #176]	; (800bd78 <CheckforMedhaCMD+0x38c>)
 800bcc6:	4816      	ldr	r0, [pc, #88]	; (800bd20 <CheckforMedhaCMD+0x334>)
 800bcc8:	f01a fbe6 	bl	8026498 <iprintf>
				printf("CLEAR ALL\n");
 800bccc:	482b      	ldr	r0, [pc, #172]	; (800bd7c <CheckforMedhaCMD+0x390>)
 800bcce:	f01a fc7f 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bcd2:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <CheckforMedhaCMD+0x33c>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bcde:	e004      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800bce0:	480d      	ldr	r0, [pc, #52]	; (800bd18 <CheckforMedhaCMD+0x32c>)
 800bce2:	f01a fc75 	bl	80265d0 <puts>
 800bce6:	e000      	b.n	800bcea <CheckforMedhaCMD+0x2fe>
			}
		}
 800bce8:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800bcea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d147      	bne.n	800bd82 <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800bcf2:	f240 2005 	movw	r0, #517	; 0x205
 800bcf6:	f004 febb 	bl	8010a70 <TransmitCanPkt>
 800bcfa:	e042      	b.n	800bd82 <CheckforMedhaCMD+0x396>
 800bcfc:	2000bfcc 	.word	0x2000bfcc
 800bd00:	08029d3c 	.word	0x08029d3c
 800bd04:	20000bba 	.word	0x20000bba
 800bd08:	08029d54 	.word	0x08029d54
 800bd0c:	2000383e 	.word	0x2000383e
 800bd10:	08029d94 	.word	0x08029d94
 800bd14:	20000bbb 	.word	0x20000bbb
 800bd18:	08029da8 	.word	0x08029da8
 800bd1c:	20003870 	.word	0x20003870
 800bd20:	08029dc4 	.word	0x08029dc4
 800bd24:	08029dd4 	.word	0x08029dd4
 800bd28:	20004bc8 	.word	0x20004bc8
 800bd2c:	200038a2 	.word	0x200038a2
 800bd30:	08029dec 	.word	0x08029dec
 800bd34:	200038d4 	.word	0x200038d4
 800bd38:	08029e04 	.word	0x08029e04
 800bd3c:	20003906 	.word	0x20003906
 800bd40:	08029e18 	.word	0x08029e18
 800bd44:	20003938 	.word	0x20003938
 800bd48:	08029e2c 	.word	0x08029e2c
 800bd4c:	2000396a 	.word	0x2000396a
 800bd50:	08029e40 	.word	0x08029e40
 800bd54:	2000399c 	.word	0x2000399c
 800bd58:	08029e5c 	.word	0x08029e5c
 800bd5c:	08029e74 	.word	0x08029e74
 800bd60:	200039ce 	.word	0x200039ce
 800bd64:	08029e88 	.word	0x08029e88
 800bd68:	20003a00 	.word	0x20003a00
 800bd6c:	08029ea0 	.word	0x08029ea0
 800bd70:	20003a32 	.word	0x20003a32
 800bd74:	08029ec0 	.word	0x08029ec0
 800bd78:	20003a64 	.word	0x20003a64
 800bd7c:	08029ee0 	.word	0x08029ee0
		return;
 800bd80:	bf00      	nop
		}
	}
}
 800bd82:	3768      	adds	r7, #104	; 0x68
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	4a3d      	ldr	r2, [pc, #244]	; (800be8c <Update_MedhaCommands+0x104>)
 800bd96:	2132      	movs	r1, #50	; 0x32
 800bd98:	fb01 f303 	mul.w	r3, r1, r3
 800bd9c:	4413      	add	r3, r2
 800bd9e:	2224      	movs	r2, #36	; 0x24
 800bda0:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800bda2:	79fb      	ldrb	r3, [r7, #7]
 800bda4:	4a39      	ldr	r2, [pc, #228]	; (800be8c <Update_MedhaCommands+0x104>)
 800bda6:	2132      	movs	r1, #50	; 0x32
 800bda8:	fb01 f303 	mul.w	r3, r1, r3
 800bdac:	4413      	add	r3, r2
 800bdae:	3301      	adds	r3, #1
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	4a35      	ldr	r2, [pc, #212]	; (800be8c <Update_MedhaCommands+0x104>)
 800bdb8:	2132      	movs	r1, #50	; 0x32
 800bdba:	fb01 f303 	mul.w	r3, r1, r3
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3302      	adds	r3, #2
 800bdc2:	2230      	movs	r2, #48	; 0x30
 800bdc4:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	4a30      	ldr	r2, [pc, #192]	; (800be8c <Update_MedhaCommands+0x104>)
 800bdca:	2132      	movs	r1, #50	; 0x32
 800bdcc:	fb01 f303 	mul.w	r3, r1, r3
 800bdd0:	4413      	add	r3, r2
 800bdd2:	3303      	adds	r3, #3
 800bdd4:	2240      	movs	r2, #64	; 0x40
 800bdd6:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
 800bdda:	4a2c      	ldr	r2, [pc, #176]	; (800be8c <Update_MedhaCommands+0x104>)
 800bddc:	2132      	movs	r1, #50	; 0x32
 800bdde:	fb01 f303 	mul.w	r3, r1, r3
 800bde2:	4413      	add	r3, r2
 800bde4:	3304      	adds	r3, #4
 800bde6:	22c0      	movs	r2, #192	; 0xc0
 800bde8:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	4a27      	ldr	r2, [pc, #156]	; (800be8c <Update_MedhaCommands+0x104>)
 800bdee:	2132      	movs	r1, #50	; 0x32
 800bdf0:	fb01 f303 	mul.w	r3, r1, r3
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3305      	adds	r3, #5
 800bdf8:	224e      	movs	r2, #78	; 0x4e
 800bdfa:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	4a23      	ldr	r2, [pc, #140]	; (800be8c <Update_MedhaCommands+0x104>)
 800be00:	2132      	movs	r1, #50	; 0x32
 800be02:	fb01 f303 	mul.w	r3, r1, r3
 800be06:	4413      	add	r3, r2
 800be08:	3306      	adds	r3, #6
 800be0a:	2226      	movs	r2, #38	; 0x26
 800be0c:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800be0e:	79fb      	ldrb	r3, [r7, #7]
 800be10:	3301      	adds	r3, #1
 800be12:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	1c5a      	adds	r2, r3, #1
 800be18:	71fa      	strb	r2, [r7, #7]
 800be1a:	461a      	mov	r2, r3
 800be1c:	2332      	movs	r3, #50	; 0x32
 800be1e:	fb02 f303 	mul.w	r3, r2, r3
 800be22:	4a1a      	ldr	r2, [pc, #104]	; (800be8c <Update_MedhaCommands+0x104>)
 800be24:	4413      	add	r3, r2
 800be26:	491a      	ldr	r1, [pc, #104]	; (800be90 <Update_MedhaCommands+0x108>)
 800be28:	461a      	mov	r2, r3
 800be2a:	460b      	mov	r3, r1
 800be2c:	cb03      	ldmia	r3!, {r0, r1}
 800be2e:	6010      	str	r0, [r2, #0]
 800be30:	6051      	str	r1, [r2, #4]
 800be32:	8819      	ldrh	r1, [r3, #0]
 800be34:	789b      	ldrb	r3, [r3, #2]
 800be36:	8111      	strh	r1, [r2, #8]
 800be38:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800be3a:	79fb      	ldrb	r3, [r7, #7]
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	71fa      	strb	r2, [r7, #7]
 800be40:	461a      	mov	r2, r3
 800be42:	2332      	movs	r3, #50	; 0x32
 800be44:	fb02 f303 	mul.w	r3, r2, r3
 800be48:	4a10      	ldr	r2, [pc, #64]	; (800be8c <Update_MedhaCommands+0x104>)
 800be4a:	4413      	add	r3, r2
 800be4c:	4911      	ldr	r1, [pc, #68]	; (800be94 <Update_MedhaCommands+0x10c>)
 800be4e:	461a      	mov	r2, r3
 800be50:	460b      	mov	r3, r1
 800be52:	cb03      	ldmia	r3!, {r0, r1}
 800be54:	6010      	str	r0, [r2, #0]
 800be56:	6051      	str	r1, [r2, #4]
 800be58:	881b      	ldrh	r3, [r3, #0]
 800be5a:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	71fa      	strb	r2, [r7, #7]
 800be62:	461a      	mov	r2, r3
 800be64:	2332      	movs	r3, #50	; 0x32
 800be66:	fb02 f303 	mul.w	r3, r2, r3
 800be6a:	4a08      	ldr	r2, [pc, #32]	; (800be8c <Update_MedhaCommands+0x104>)
 800be6c:	4413      	add	r3, r2
 800be6e:	4a0a      	ldr	r2, [pc, #40]	; (800be98 <Update_MedhaCommands+0x110>)
 800be70:	6810      	ldr	r0, [r2, #0]
 800be72:	6018      	str	r0, [r3, #0]
 800be74:	7912      	ldrb	r2, [r2, #4]
 800be76:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800be78:	4a08      	ldr	r2, [pc, #32]	; (800be9c <Update_MedhaCommands+0x114>)
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	7013      	strb	r3, [r2, #0]
}
 800be7e:	bf00      	nop
 800be80:	370c      	adds	r7, #12
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	2000380c 	.word	0x2000380c
 800be90:	08029eec 	.word	0x08029eec
 800be94:	08029ef8 	.word	0x08029ef8
 800be98:	08029f04 	.word	0x08029f04
 800be9c:	20003bf4 	.word	0x20003bf4

0800bea0 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800bea0:	b590      	push	{r4, r7, lr}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800beac:	2300      	movs	r3, #0
 800beae:	73fb      	strb	r3, [r7, #15]
 800beb0:	e01c      	b.n	800beec <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	2232      	movs	r2, #50	; 0x32
 800beb6:	fb02 f303 	mul.w	r3, r2, r3
 800beba:	4a11      	ldr	r2, [pc, #68]	; (800bf00 <Is_MedhaCommand_Valid+0x60>)
 800bebc:	189c      	adds	r4, r3, r2
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	2232      	movs	r2, #50	; 0x32
 800bec2:	fb02 f303 	mul.w	r3, r2, r3
 800bec6:	4a0e      	ldr	r2, [pc, #56]	; (800bf00 <Is_MedhaCommand_Valid+0x60>)
 800bec8:	4413      	add	r3, r2
 800beca:	4618      	mov	r0, r3
 800becc:	f7f4 f9c2 	bl	8000254 <strlen>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	4621      	mov	r1, r4
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f01a f9be 	bl	8026258 <memcmp>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
 800bee4:	e008      	b.n	800bef8 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800bee6:	7bfb      	ldrb	r3, [r7, #15]
 800bee8:	3301      	adds	r3, #1
 800beea:	73fb      	strb	r3, [r7, #15]
 800beec:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <Is_MedhaCommand_Valid+0x64>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	7bfa      	ldrb	r2, [r7, #15]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d3dd      	bcc.n	800beb2 <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800bef6:	23ff      	movs	r3, #255	; 0xff
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3714      	adds	r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	bd90      	pop	{r4, r7, pc}
 800bf00:	2000380c 	.word	0x2000380c
 800bf04:	20003bf4 	.word	0x20003bf4

0800bf08 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	6039      	str	r1, [r7, #0]
 800bf12:	80fb      	strh	r3, [r7, #6]
 800bf14:	4613      	mov	r3, r2
 800bf16:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800bf24:	88fb      	ldrh	r3, [r7, #6]
 800bf26:	613b      	str	r3, [r7, #16]
 800bf28:	e015      	b.n	800bf56 <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	440b      	add	r3, r1
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	4053      	eors	r3, r2
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	0a1b      	lsrs	r3, r3, #8
 800bf40:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800bf42:	4a0a      	ldr	r2, [pc, #40]	; (800bf6c <GetCRC32+0x64>)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	4053      	eors	r3, r2
 800bf4e:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	3301      	adds	r3, #1
 800bf54:	613b      	str	r3, [r7, #16]
 800bf56:	88bb      	ldrh	r3, [r7, #4]
 800bf58:	693a      	ldr	r2, [r7, #16]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d3e5      	bcc.n	800bf2a <GetCRC32+0x22>
	}

	return Crc;
 800bf5e:	697b      	ldr	r3, [r7, #20]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	371c      	adds	r7, #28
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	0802d5e8 	.word	0x0802d5e8

0800bf70 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	4603      	mov	r3, r0
 800bf78:	6039      	str	r1, [r7, #0]
 800bf7a:	80fb      	strh	r3, [r7, #6]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800bf88:	88ba      	ldrh	r2, [r7, #4]
 800bf8a:	88fb      	ldrh	r3, [r7, #6]
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff ffba 	bl	800bf08 <GetCRC32>
 800bf94:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800bf96:	88bb      	ldrh	r3, [r7, #4]
 800bf98:	683a      	ldr	r2, [r7, #0]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d101      	bne.n	800bfac <CheckCRC32+0x3c>
	{
		return OK;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e009      	b.n	800bfc0 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4805      	ldr	r0, [pc, #20]	; (800bfc8 <CheckCRC32+0x58>)
 800bfb2:	f01a fa71 	bl	8026498 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800bfb6:	68f9      	ldr	r1, [r7, #12]
 800bfb8:	4804      	ldr	r0, [pc, #16]	; (800bfcc <CheckCRC32+0x5c>)
 800bfba:	f01a fa6d 	bl	8026498 <iprintf>
		return NOT_OK;
 800bfbe:	2300      	movs	r3, #0
	}

}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	08029f0c 	.word	0x08029f0c
 800bfcc:	08029f24 	.word	0x08029f24

0800bfd0 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b086      	sub	sp, #24
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	60fb      	str	r3, [r7, #12]
 800bfde:	f107 0310 	add.w	r3, r7, #16
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800bfe8:	79fb      	ldrb	r3, [r7, #7]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	f107 010c 	add.w	r1, r7, #12
 800bff0:	220a      	movs	r2, #10
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 f846 	bl	800c084 <ReadAndFormMsg>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	dd34      	ble.n	800c068 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800bffe:	7b7b      	ldrb	r3, [r7, #13]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d115      	bne.n	800c030 <CheckForRqst+0x60>
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	2b01      	cmp	r3, #1
 800c008:	d112      	bne.n	800c030 <CheckForRqst+0x60>
 800c00a:	7bfb      	ldrb	r3, [r7, #15]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d10f      	bne.n	800c030 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800c010:	4818      	ldr	r0, [pc, #96]	; (800c074 <CheckForRqst+0xa4>)
 800c012:	f01a fadd 	bl	80265d0 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	2202      	movs	r2, #2
 800c01a:	2101      	movs	r1, #1
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 f933 	bl	800c288 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c022:	f00d fa2f 	bl	8019484 <HAL_GetTick>
 800c026:	4603      	mov	r3, r0
 800c028:	4a13      	ldr	r2, [pc, #76]	; (800c078 <CheckForRqst+0xa8>)
 800c02a:	6013      	str	r3, [r2, #0]
			return 0x01;
 800c02c:	2301      	movs	r3, #1
 800c02e:	e01c      	b.n	800c06a <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c030:	7b7b      	ldrb	r3, [r7, #13]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d115      	bne.n	800c062 <CheckForRqst+0x92>
 800c036:	7bbb      	ldrb	r3, [r7, #14]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d112      	bne.n	800c062 <CheckForRqst+0x92>
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d10f      	bne.n	800c062 <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800c042:	480e      	ldr	r0, [pc, #56]	; (800c07c <CheckForRqst+0xac>)
 800c044:	f01a fac4 	bl	80265d0 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800c048:	79fb      	ldrb	r3, [r7, #7]
 800c04a:	2202      	movs	r2, #2
 800c04c:	2102      	movs	r1, #2
 800c04e:	4618      	mov	r0, r3
 800c050:	f000 f91a 	bl	800c288 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c054:	f00d fa16 	bl	8019484 <HAL_GetTick>
 800c058:	4603      	mov	r3, r0
 800c05a:	4a07      	ldr	r2, [pc, #28]	; (800c078 <CheckForRqst+0xa8>)
 800c05c:	6013      	str	r3, [r2, #0]
			return 0x02;
 800c05e:	2302      	movs	r3, #2
 800c060:	e003      	b.n	800c06a <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800c062:	4807      	ldr	r0, [pc, #28]	; (800c080 <CheckForRqst+0xb0>)
 800c064:	f01a fab4 	bl	80265d0 <puts>
	}
	return 0x00;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	08029f3c 	.word	0x08029f3c
 800c078:	20000fc0 	.word	0x20000fc0
 800c07c:	08029f54 	.word	0x08029f54
 800c080:	08029f6c 	.word	0x08029f6c

0800c084 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c084:	b590      	push	{r4, r7, lr}
 800c086:	b087      	sub	sp, #28
 800c088:	af02      	add	r7, sp, #8
 800c08a:	4603      	mov	r3, r0
 800c08c:	6039      	str	r1, [r7, #0]
 800c08e:	80fb      	strh	r3, [r7, #6]
 800c090:	4613      	mov	r3, r2
 800c092:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c094:	2300      	movs	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800c098:	2300      	movs	r3, #0
 800c09a:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c09c:	2300      	movs	r3, #0
 800c09e:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c0a0:	e0d4      	b.n	800c24c <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800c0a2:	4b71      	ldr	r3, [pc, #452]	; (800c268 <ReadAndFormMsg+0x1e4>)
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800c0a8:	4870      	ldr	r0, [pc, #448]	; (800c26c <ReadAndFormMsg+0x1e8>)
 800c0aa:	f010 fd51 	bl	801cb50 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800c0ae:	88fb      	ldrh	r3, [r7, #6]
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f00c febe 	bl	8018e34 <Com_Get_Byte>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800c0bc:	f00c ffd0 	bl	8019060 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800c0c0:	4b6b      	ldr	r3, [pc, #428]	; (800c270 <ReadAndFormMsg+0x1ec>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	f000 8099 	beq.w	800c1fc <ReadAndFormMsg+0x178>
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	f300 80b0 	bgt.w	800c230 <ReadAndFormMsg+0x1ac>
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d002      	beq.n	800c0da <ReadAndFormMsg+0x56>
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d00e      	beq.n	800c0f6 <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c0d8:	e0aa      	b.n	800c230 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	2b24      	cmp	r3, #36	; 0x24
 800c0de:	f040 80a9 	bne.w	800c234 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	7bfa      	ldrb	r2, [r7, #15]
 800c0e6:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c0e8:	4b62      	ldr	r3, [pc, #392]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c0ee:	4b60      	ldr	r3, [pc, #384]	; (800c270 <ReadAndFormMsg+0x1ec>)
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	701a      	strb	r2, [r3, #0]
			break;
 800c0f4:	e09e      	b.n	800c234 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
 800c0f8:	2b26      	cmp	r3, #38	; 0x26
 800c0fa:	d006      	beq.n	800c10a <ReadAndFormMsg+0x86>
 800c0fc:	2b26      	cmp	r3, #38	; 0x26
 800c0fe:	dc6e      	bgt.n	800c1de <ReadAndFormMsg+0x15a>
 800c100:	2b05      	cmp	r3, #5
 800c102:	d068      	beq.n	800c1d6 <ReadAndFormMsg+0x152>
 800c104:	2b24      	cmp	r3, #36	; 0x24
 800c106:	d05c      	beq.n	800c1c2 <ReadAndFormMsg+0x13e>
 800c108:	e069      	b.n	800c1de <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800c10a:	4b5a      	ldr	r3, [pc, #360]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c10c:	881b      	ldrh	r3, [r3, #0]
 800c10e:	3b02      	subs	r3, #2
 800c110:	b29b      	uxth	r3, r3
 800c112:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800c114:	4b57      	ldr	r3, [pc, #348]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800c11a:	4b56      	ldr	r3, [pc, #344]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c120:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	da01      	bge.n	800c12c <ReadAndFormMsg+0xa8>
					return 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	e099      	b.n	800c260 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800c12c:	4b50      	ldr	r3, [pc, #320]	; (800c270 <ReadAndFormMsg+0x1ec>)
 800c12e:	2201      	movs	r2, #1
 800c130:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c132:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800c136:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	4413      	add	r3, r2
 800c13e:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c140:	461c      	mov	r4, r3
 800c142:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c146:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800c148:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c14c:	3301      	adds	r3, #1
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	4413      	add	r3, r2
 800c152:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	4603      	mov	r3, r0
 800c158:	4622      	mov	r2, r4
 800c15a:	4847      	ldr	r0, [pc, #284]	; (800c278 <ReadAndFormMsg+0x1f4>)
 800c15c:	f01a f99c 	bl	8026498 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c160:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c164:	4619      	mov	r1, r3
 800c166:	6838      	ldr	r0, [r7, #0]
 800c168:	f009 fb50 	bl	801580c <CheckCRC>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d012      	beq.n	800c198 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c172:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	4413      	add	r3, r2
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	4619      	mov	r1, r3
 800c17e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c182:	3301      	adds	r3, #1
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	4413      	add	r3, r2
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	483b      	ldr	r0, [pc, #236]	; (800c27c <ReadAndFormMsg+0x1f8>)
 800c18e:	f01a f983 	bl	8026498 <iprintf>
					return us_ReturnBytes;
 800c192:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c196:	e063      	b.n	800c260 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800c198:	4839      	ldr	r0, [pc, #228]	; (800c280 <ReadAndFormMsg+0x1fc>)
 800c19a:	f01a f97d 	bl	8026498 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c19e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	4832      	ldr	r0, [pc, #200]	; (800c284 <ReadAndFormMsg+0x200>)
 800c1ba:	f01a f96d 	bl	8026498 <iprintf>
					return 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e04e      	b.n	800c260 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	7bfa      	ldrb	r2, [r7, #15]
 800c1c6:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c1c8:	4b2a      	ldr	r3, [pc, #168]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c1ce:	4b28      	ldr	r3, [pc, #160]	; (800c270 <ReadAndFormMsg+0x1ec>)
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	701a      	strb	r2, [r3, #0]
				break;
 800c1d4:	e011      	b.n	800c1fa <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800c1d6:	4b26      	ldr	r3, [pc, #152]	; (800c270 <ReadAndFormMsg+0x1ec>)
 800c1d8:	2203      	movs	r2, #3
 800c1da:	701a      	strb	r2, [r3, #0]
				break;
 800c1dc:	e00d      	b.n	800c1fa <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800c1de:	4b25      	ldr	r3, [pc, #148]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	7bfa      	ldrb	r2, [r7, #15]
 800c1ea:	701a      	strb	r2, [r3, #0]
				j++;
 800c1ec:	4b21      	ldr	r3, [pc, #132]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	4b1f      	ldr	r3, [pc, #124]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c1f6:	801a      	strh	r2, [r3, #0]
				break;
 800c1f8:	bf00      	nop
			break;
 800c1fa:	e01c      	b.n	800c236 <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b24      	cmp	r3, #36	; 0x24
 800c200:	d005      	beq.n	800c20e <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800c202:	7bfb      	ldrb	r3, [r7, #15]
 800c204:	2b26      	cmp	r3, #38	; 0x26
 800c206:	d002      	beq.n	800c20e <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	2b05      	cmp	r3, #5
 800c20c:	d10c      	bne.n	800c228 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800c20e:	4b19      	ldr	r3, [pc, #100]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	461a      	mov	r2, r3
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	4413      	add	r3, r2
 800c218:	7bfa      	ldrb	r2, [r7, #15]
 800c21a:	701a      	strb	r2, [r3, #0]
					j++;
 800c21c:	4b15      	ldr	r3, [pc, #84]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	3301      	adds	r3, #1
 800c222:	b29a      	uxth	r2, r3
 800c224:	4b13      	ldr	r3, [pc, #76]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c226:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c228:	4b11      	ldr	r3, [pc, #68]	; (800c270 <ReadAndFormMsg+0x1ec>)
 800c22a:	2202      	movs	r2, #2
 800c22c:	701a      	strb	r2, [r3, #0]
				break;
 800c22e:	e002      	b.n	800c236 <ReadAndFormMsg+0x1b2>
				break;
 800c230:	bf00      	nop
 800c232:	e000      	b.n	800c236 <ReadAndFormMsg+0x1b2>
			break;
 800c234:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800c236:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c238:	881b      	ldrh	r3, [r3, #0]
 800c23a:	88ba      	ldrh	r2, [r7, #4]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d805      	bhi.n	800c24c <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800c240:	4b0b      	ldr	r3, [pc, #44]	; (800c270 <ReadAndFormMsg+0x1ec>)
 800c242:	2201      	movs	r2, #1
 800c244:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800c246:	4b0b      	ldr	r3, [pc, #44]	; (800c274 <ReadAndFormMsg+0x1f0>)
 800c248:	2200      	movs	r2, #0
 800c24a:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c24c:	88fb      	ldrh	r3, [r7, #6]
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	4618      	mov	r0, r3
 800c252:	f00c fdaf 	bl	8018db4 <Com_DataReady>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f47f af22 	bne.w	800c0a2 <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	bd90      	pop	{r4, r7, pc}
 800c268:	20000fbe 	.word	0x20000fbe
 800c26c:	2000b3c8 	.word	0x2000b3c8
 800c270:	20000317 	.word	0x20000317
 800c274:	20003f24 	.word	0x20003f24
 800c278:	08029f7c 	.word	0x08029f7c
 800c27c:	08029fa4 	.word	0x08029fa4
 800c280:	08029fb8 	.word	0x08029fb8
 800c284:	08029fc4 	.word	0x08029fc4

0800c288 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b086      	sub	sp, #24
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	71fb      	strb	r3, [r7, #7]
 800c292:	460b      	mov	r3, r1
 800c294:	71bb      	strb	r3, [r7, #6]
 800c296:	4613      	mov	r3, r2
 800c298:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60bb      	str	r3, [r7, #8]
 800c2a2:	f107 030c 	add.w	r3, r7, #12
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	601a      	str	r2, [r3, #0]
 800c2aa:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800c2ac:	2324      	movs	r3, #36	; 0x24
 800c2ae:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800c2b0:	79bb      	ldrb	r3, [r7, #6]
 800c2b2:	121b      	asrs	r3, r3, #8
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800c2b8:	79bb      	ldrb	r3, [r7, #6]
 800c2ba:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800c2bc:	797b      	ldrb	r3, [r7, #5]
 800c2be:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800c2c0:	f107 0308 	add.w	r3, r7, #8
 800c2c4:	2104      	movs	r1, #4
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f009 fb4a 	bl	8015960 <ComputeCRC>
	puc_Message[6]= '&';
 800c2cc:	2326      	movs	r3, #38	; 0x26
 800c2ce:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800c2d0:	7b3b      	ldrb	r3, [r7, #12]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	7b7b      	ldrb	r3, [r7, #13]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	480f      	ldr	r0, [pc, #60]	; (800c318 <SendAck+0x90>)
 800c2da:	f01a f8dd 	bl	8026498 <iprintf>

	AckTim=HAL_GetTick();
 800c2de:	f00d f8d1 	bl	8019484 <HAL_GetTick>
 800c2e2:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c2e4:	e002      	b.n	800c2ec <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800c2e6:	480d      	ldr	r0, [pc, #52]	; (800c31c <SendAck+0x94>)
 800c2e8:	f010 fc32 	bl	801cb50 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c2ec:	6978      	ldr	r0, [r7, #20]
 800c2ee:	f003 fe43 	bl	800ff78 <HAL_Elaps_Ticks>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f240 52db 	movw	r2, #1499	; 0x5db
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d9f4      	bls.n	800c2e6 <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800c2fc:	f107 0108 	add.w	r1, r7, #8
 800c300:	79fb      	ldrb	r3, [r7, #7]
 800c302:	2206      	movs	r2, #6
 800c304:	4618      	mov	r0, r3
 800c306:	f00c fe15 	bl	8018f34 <CommTransmitMessage>

	AckTim = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	617b      	str	r3, [r7, #20]
}
 800c30e:	bf00      	nop
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	08029fd0 	.word	0x08029fd0
 800c31c:	2000b3c8 	.word	0x2000b3c8

0800c320 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	4603      	mov	r3, r0
 800c328:	6039      	str	r1, [r7, #0]
 800c32a:	80fb      	strh	r3, [r7, #6]
 800c32c:	4613      	mov	r3, r2
 800c32e:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c330:	2300      	movs	r3, #0
 800c332:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800c334:	2300      	movs	r3, #0
 800c336:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c338:	2300      	movs	r3, #0
 800c33a:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c33c:	e0ba      	b.n	800c4b4 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800c33e:	88fb      	ldrh	r3, [r7, #6]
 800c340:	b2db      	uxtb	r3, r3
 800c342:	4618      	mov	r0, r3
 800c344:	f00c fd76 	bl	8018e34 <Com_Get_Byte>
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800c34c:	f00c fe88 	bl	8019060 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800c350:	485f      	ldr	r0, [pc, #380]	; (800c4d0 <ReadAndFormConfig+0x1b0>)
 800c352:	f010 fbfd 	bl	801cb50 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800c356:	4b5f      	ldr	r3, [pc, #380]	; (800c4d4 <ReadAndFormConfig+0x1b4>)
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	f000 8082 	beq.w	800c464 <ReadAndFormConfig+0x144>
 800c360:	2b03      	cmp	r3, #3
 800c362:	f300 8099 	bgt.w	800c498 <ReadAndFormConfig+0x178>
 800c366:	2b01      	cmp	r3, #1
 800c368:	d002      	beq.n	800c370 <ReadAndFormConfig+0x50>
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d00e      	beq.n	800c38c <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c36e:	e093      	b.n	800c498 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800c370:	7bfb      	ldrb	r3, [r7, #15]
 800c372:	2b24      	cmp	r3, #36	; 0x24
 800c374:	f040 8092 	bne.w	800c49c <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	7bfa      	ldrb	r2, [r7, #15]
 800c37c:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c37e:	4b56      	ldr	r3, [pc, #344]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c380:	2201      	movs	r2, #1
 800c382:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c384:	4b53      	ldr	r3, [pc, #332]	; (800c4d4 <ReadAndFormConfig+0x1b4>)
 800c386:	2202      	movs	r2, #2
 800c388:	701a      	strb	r2, [r3, #0]
			break;
 800c38a:	e087      	b.n	800c49c <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	2b26      	cmp	r3, #38	; 0x26
 800c390:	d006      	beq.n	800c3a0 <ReadAndFormConfig+0x80>
 800c392:	2b26      	cmp	r3, #38	; 0x26
 800c394:	dc57      	bgt.n	800c446 <ReadAndFormConfig+0x126>
 800c396:	2b05      	cmp	r3, #5
 800c398:	d051      	beq.n	800c43e <ReadAndFormConfig+0x11e>
 800c39a:	2b24      	cmp	r3, #36	; 0x24
 800c39c:	d045      	beq.n	800c42a <ReadAndFormConfig+0x10a>
 800c39e:	e052      	b.n	800c446 <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800c3a0:	4b4d      	ldr	r3, [pc, #308]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	3b02      	subs	r3, #2
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800c3aa:	4b4b      	ldr	r3, [pc, #300]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800c3b0:	4b49      	ldr	r3, [pc, #292]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c3b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	da01      	bge.n	800c3c2 <ReadAndFormConfig+0xa2>
					return 0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e082      	b.n	800c4c8 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800c3c2:	4b44      	ldr	r3, [pc, #272]	; (800c4d4 <ReadAndFormConfig+0x1b4>)
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c3c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	6838      	ldr	r0, [r7, #0]
 800c3d0:	f009 fa1c 	bl	801580c <CheckCRC>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d012      	beq.n	800c400 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c3da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	683a      	ldr	r2, [r7, #0]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	4839      	ldr	r0, [pc, #228]	; (800c4dc <ReadAndFormConfig+0x1bc>)
 800c3f6:	f01a f84f 	bl	8026498 <iprintf>
					return us_ReturnBytes;
 800c3fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c3fe:	e063      	b.n	800c4c8 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800c400:	4837      	ldr	r0, [pc, #220]	; (800c4e0 <ReadAndFormConfig+0x1c0>)
 800c402:	f01a f849 	bl	8026498 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c406:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	4413      	add	r3, r2
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	4619      	mov	r1, r3
 800c412:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c416:	3301      	adds	r3, #1
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	4413      	add	r3, r2
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	461a      	mov	r2, r3
 800c420:	4830      	ldr	r0, [pc, #192]	; (800c4e4 <ReadAndFormConfig+0x1c4>)
 800c422:	f01a f839 	bl	8026498 <iprintf>
					return 0;
 800c426:	2300      	movs	r3, #0
 800c428:	e04e      	b.n	800c4c8 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	7bfa      	ldrb	r2, [r7, #15]
 800c42e:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c430:	4b29      	ldr	r3, [pc, #164]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c432:	2201      	movs	r2, #1
 800c434:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c436:	4b27      	ldr	r3, [pc, #156]	; (800c4d4 <ReadAndFormConfig+0x1b4>)
 800c438:	2202      	movs	r2, #2
 800c43a:	701a      	strb	r2, [r3, #0]
				break;
 800c43c:	e011      	b.n	800c462 <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800c43e:	4b25      	ldr	r3, [pc, #148]	; (800c4d4 <ReadAndFormConfig+0x1b4>)
 800c440:	2203      	movs	r2, #3
 800c442:	701a      	strb	r2, [r3, #0]
				break;
 800c444:	e00d      	b.n	800c462 <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800c446:	4b24      	ldr	r3, [pc, #144]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	4413      	add	r3, r2
 800c450:	7bfa      	ldrb	r2, [r7, #15]
 800c452:	701a      	strb	r2, [r3, #0]
				i++;
 800c454:	4b20      	ldr	r3, [pc, #128]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	3301      	adds	r3, #1
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	4b1e      	ldr	r3, [pc, #120]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c45e:	801a      	strh	r2, [r3, #0]
				break;
 800c460:	bf00      	nop
			break;
 800c462:	e01c      	b.n	800c49e <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800c464:	7bfb      	ldrb	r3, [r7, #15]
 800c466:	2b24      	cmp	r3, #36	; 0x24
 800c468:	d005      	beq.n	800c476 <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800c46a:	7bfb      	ldrb	r3, [r7, #15]
 800c46c:	2b26      	cmp	r3, #38	; 0x26
 800c46e:	d002      	beq.n	800c476 <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800c470:	7bfb      	ldrb	r3, [r7, #15]
 800c472:	2b05      	cmp	r3, #5
 800c474:	d10c      	bne.n	800c490 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800c476:	4b18      	ldr	r3, [pc, #96]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	461a      	mov	r2, r3
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	4413      	add	r3, r2
 800c480:	7bfa      	ldrb	r2, [r7, #15]
 800c482:	701a      	strb	r2, [r3, #0]
					i++;
 800c484:	4b14      	ldr	r3, [pc, #80]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	3301      	adds	r3, #1
 800c48a:	b29a      	uxth	r2, r3
 800c48c:	4b12      	ldr	r3, [pc, #72]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c48e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c490:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <ReadAndFormConfig+0x1b4>)
 800c492:	2202      	movs	r2, #2
 800c494:	701a      	strb	r2, [r3, #0]
				break;
 800c496:	e002      	b.n	800c49e <ReadAndFormConfig+0x17e>
				break;
 800c498:	bf00      	nop
 800c49a:	e000      	b.n	800c49e <ReadAndFormConfig+0x17e>
			break;
 800c49c:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800c49e:	4b0e      	ldr	r3, [pc, #56]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c4a0:	881b      	ldrh	r3, [r3, #0]
 800c4a2:	88ba      	ldrh	r2, [r7, #4]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d805      	bhi.n	800c4b4 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <ReadAndFormConfig+0x1b4>)
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800c4ae:	4b0a      	ldr	r3, [pc, #40]	; (800c4d8 <ReadAndFormConfig+0x1b8>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c4b4:	88fb      	ldrh	r3, [r7, #6]
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f00c fc7b 	bl	8018db4 <Com_DataReady>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f47f af3c 	bne.w	800c33e <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	2000b3c8 	.word	0x2000b3c8
 800c4d4:	20000318 	.word	0x20000318
 800c4d8:	20003f26 	.word	0x20003f26
 800c4dc:	08029fec 	.word	0x08029fec
 800c4e0:	08029fb8 	.word	0x08029fb8
 800c4e4:	0802a000 	.word	0x0802a000

0800c4e8 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800c4f2:	79fb      	ldrb	r3, [r7, #7]
 800c4f4:	091b      	lsrs	r3, r3, #4
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	0092      	lsls	r2, r2, #2
 800c4fc:	4413      	add	r3, r2
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	b2da      	uxtb	r2, r3
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	f003 030f 	and.w	r3, r3, #15
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	4413      	add	r3, r2
 800c50c:	b2db      	uxtb	r3, r3
}
 800c50e:	4618      	mov	r0, r3
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
	...

0800c51c <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	4a0d      	ldr	r2, [pc, #52]	; (800c560 <Dec_to_BCD+0x44>)
 800c52a:	fba2 2303 	umull	r2, r3, r2, r3
 800c52e:	08db      	lsrs	r3, r3, #3
 800c530:	b2db      	uxtb	r3, r3
 800c532:	011b      	lsls	r3, r3, #4
 800c534:	b2d8      	uxtb	r0, r3
 800c536:	79fa      	ldrb	r2, [r7, #7]
 800c538:	4b09      	ldr	r3, [pc, #36]	; (800c560 <Dec_to_BCD+0x44>)
 800c53a:	fba3 1302 	umull	r1, r3, r3, r2
 800c53e:	08d9      	lsrs	r1, r3, #3
 800c540:	460b      	mov	r3, r1
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	440b      	add	r3, r1
 800c546:	005b      	lsls	r3, r3, #1
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	4403      	add	r3, r0
 800c54e:	71fb      	strb	r3, [r7, #7]
	return c;
 800c550:	79fb      	ldrb	r3, [r7, #7]
}
 800c552:	4618      	mov	r0, r3
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	cccccccd 	.word	0xcccccccd

0800c564 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800c564:	b480      	push	{r7}
 800c566:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800c568:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <Is_GPS_Valid+0x34>)
 800c56a:	795b      	ldrb	r3, [r3, #5]
 800c56c:	2b09      	cmp	r3, #9
 800c56e:	d801      	bhi.n	800c574 <Is_GPS_Valid+0x10>
	{
		return 0;
 800c570:	2300      	movs	r3, #0
 800c572:	e00c      	b.n	800c58e <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800c574:	4b08      	ldr	r3, [pc, #32]	; (800c598 <Is_GPS_Valid+0x34>)
 800c576:	791b      	ldrb	r3, [r3, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d101      	bne.n	800c580 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	e006      	b.n	800c58e <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800c580:	4b05      	ldr	r3, [pc, #20]	; (800c598 <Is_GPS_Valid+0x34>)
 800c582:	78db      	ldrb	r3, [r3, #3]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <Is_GPS_Valid+0x28>
	{
		return 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	e000      	b.n	800c58e <Is_GPS_Valid+0x2a>
	}
	return 1;
 800c58c:	2301      	movs	r3, #1
}
 800c58e:	4618      	mov	r0, r3
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr
 800c598:	20003f28 	.word	0x20003f28

0800c59c <Write_RTC>:


void Write_RTC(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	603b      	str	r3, [r7, #0]
 800c5a6:	1d3b      	adds	r3, r7, #4
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	460a      	mov	r2, r1
 800c5ac:	801a      	strh	r2, [r3, #0]
 800c5ae:	460a      	mov	r2, r1
 800c5b0:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800c5b2:	f7ff ffd7 	bl	800c564 <Is_GPS_Valid>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d103      	bne.n	800c5c4 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800c5bc:	4844      	ldr	r0, [pc, #272]	; (800c6d0 <Write_RTC+0x134>)
 800c5be:	f01a f807 	bl	80265d0 <puts>
 800c5c2:	e081      	b.n	800c6c8 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800c5c4:	4b43      	ldr	r3, [pc, #268]	; (800c6d4 <Write_RTC+0x138>)
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800c5ca:	4b43      	ldr	r3, [pc, #268]	; (800c6d8 <Write_RTC+0x13c>)
 800c5cc:	789b      	ldrb	r3, [r3, #2]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7ff ffa4 	bl	800c51c <Dec_to_BCD>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800c5d8:	4b3f      	ldr	r3, [pc, #252]	; (800c6d8 <Write_RTC+0x13c>)
 800c5da:	785b      	ldrb	r3, [r3, #1]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff ff9d 	bl	800c51c <Dec_to_BCD>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800c5e6:	4b3c      	ldr	r3, [pc, #240]	; (800c6d8 <Write_RTC+0x13c>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7ff ff96 	bl	800c51c <Dec_to_BCD>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800c5f4:	4b38      	ldr	r3, [pc, #224]	; (800c6d8 <Write_RTC+0x13c>)
 800c5f6:	78db      	ldrb	r3, [r3, #3]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff ff8f 	bl	800c51c <Dec_to_BCD>
 800c5fe:	4603      	mov	r3, r0
 800c600:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800c602:	4b35      	ldr	r3, [pc, #212]	; (800c6d8 <Write_RTC+0x13c>)
 800c604:	791b      	ldrb	r3, [r3, #4]
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff ff88 	bl	800c51c <Dec_to_BCD>
 800c60c:	4603      	mov	r3, r0
 800c60e:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800c610:	4b31      	ldr	r3, [pc, #196]	; (800c6d8 <Write_RTC+0x13c>)
 800c612:	795b      	ldrb	r3, [r3, #5]
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff ff81 	bl	800c51c <Dec_to_BCD>
 800c61a:	4603      	mov	r3, r0
 800c61c:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800c61e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c622:	9302      	str	r3, [sp, #8]
 800c624:	2301      	movs	r3, #1
 800c626:	9301      	str	r3, [sp, #4]
 800c628:	463b      	mov	r3, r7
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	2301      	movs	r3, #1
 800c62e:	2200      	movs	r2, #0
 800c630:	21d0      	movs	r1, #208	; 0xd0
 800c632:	482a      	ldr	r0, [pc, #168]	; (800c6dc <Write_RTC+0x140>)
 800c634:	f00f fcde 	bl	801bff4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800c638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c63c:	9302      	str	r3, [sp, #8]
 800c63e:	2301      	movs	r3, #1
 800c640:	9301      	str	r3, [sp, #4]
 800c642:	463b      	mov	r3, r7
 800c644:	3301      	adds	r3, #1
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	2301      	movs	r3, #1
 800c64a:	2201      	movs	r2, #1
 800c64c:	21d0      	movs	r1, #208	; 0xd0
 800c64e:	4823      	ldr	r0, [pc, #140]	; (800c6dc <Write_RTC+0x140>)
 800c650:	f00f fcd0 	bl	801bff4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800c654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c658:	9302      	str	r3, [sp, #8]
 800c65a:	2301      	movs	r3, #1
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	463b      	mov	r3, r7
 800c660:	3302      	adds	r3, #2
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	2301      	movs	r3, #1
 800c666:	2202      	movs	r2, #2
 800c668:	21d0      	movs	r1, #208	; 0xd0
 800c66a:	481c      	ldr	r0, [pc, #112]	; (800c6dc <Write_RTC+0x140>)
 800c66c:	f00f fcc2 	bl	801bff4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800c670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c674:	9302      	str	r3, [sp, #8]
 800c676:	2301      	movs	r3, #1
 800c678:	9301      	str	r3, [sp, #4]
 800c67a:	463b      	mov	r3, r7
 800c67c:	3303      	adds	r3, #3
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	2301      	movs	r3, #1
 800c682:	2204      	movs	r2, #4
 800c684:	21d0      	movs	r1, #208	; 0xd0
 800c686:	4815      	ldr	r0, [pc, #84]	; (800c6dc <Write_RTC+0x140>)
 800c688:	f00f fcb4 	bl	801bff4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800c68c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c690:	9302      	str	r3, [sp, #8]
 800c692:	2301      	movs	r3, #1
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	463b      	mov	r3, r7
 800c698:	3304      	adds	r3, #4
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	2301      	movs	r3, #1
 800c69e:	2205      	movs	r2, #5
 800c6a0:	21d0      	movs	r1, #208	; 0xd0
 800c6a2:	480e      	ldr	r0, [pc, #56]	; (800c6dc <Write_RTC+0x140>)
 800c6a4:	f00f fca6 	bl	801bff4 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800c6a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6ac:	9302      	str	r3, [sp, #8]
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	9301      	str	r3, [sp, #4]
 800c6b2:	463b      	mov	r3, r7
 800c6b4:	3305      	adds	r3, #5
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	2206      	movs	r2, #6
 800c6bc:	21d0      	movs	r1, #208	; 0xd0
 800c6be:	4807      	ldr	r0, [pc, #28]	; (800c6dc <Write_RTC+0x140>)
 800c6c0:	f00f fc98 	bl	801bff4 <HAL_I2C_Mem_Write>

	Get_time();
 800c6c4:	f000 f80c 	bl	800c6e0 <Get_time>

}
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	0802a060 	.word	0x0802a060
 800c6d4:	200024e0 	.word	0x200024e0
 800c6d8:	20003f28 	.word	0x20003f28
 800c6dc:	2000b320 	.word	0x2000b320

0800c6e0 <Get_time>:


void Get_time(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800c6e6:	463b      	mov	r3, r7
 800c6e8:	2207      	movs	r2, #7
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f019 fdeb 	bl	80262c8 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800c6f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6f6:	9302      	str	r3, [sp, #8]
 800c6f8:	2307      	movs	r3, #7
 800c6fa:	9301      	str	r3, [sp, #4]
 800c6fc:	463b      	mov	r3, r7
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	2301      	movs	r3, #1
 800c702:	2200      	movs	r2, #0
 800c704:	21d0      	movs	r1, #208	; 0xd0
 800c706:	4824      	ldr	r0, [pc, #144]	; (800c798 <Get_time+0xb8>)
 800c708:	f00f fd88 	bl	801c21c <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800c70c:	783b      	ldrb	r3, [r7, #0]
 800c70e:	4618      	mov	r0, r3
 800c710:	f7ff feea 	bl	800c4e8 <bcdToDec>
 800c714:	4603      	mov	r3, r0
 800c716:	461a      	mov	r2, r3
 800c718:	4b20      	ldr	r3, [pc, #128]	; (800c79c <Get_time+0xbc>)
 800c71a:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800c71c:	787b      	ldrb	r3, [r7, #1]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff fee2 	bl	800c4e8 <bcdToDec>
 800c724:	4603      	mov	r3, r0
 800c726:	461a      	mov	r2, r3
 800c728:	4b1c      	ldr	r3, [pc, #112]	; (800c79c <Get_time+0xbc>)
 800c72a:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800c72c:	78bb      	ldrb	r3, [r7, #2]
 800c72e:	4618      	mov	r0, r3
 800c730:	f7ff feda 	bl	800c4e8 <bcdToDec>
 800c734:	4603      	mov	r3, r0
 800c736:	461a      	mov	r2, r3
 800c738:	4b18      	ldr	r3, [pc, #96]	; (800c79c <Get_time+0xbc>)
 800c73a:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800c73c:	793b      	ldrb	r3, [r7, #4]
 800c73e:	4618      	mov	r0, r3
 800c740:	f7ff fed2 	bl	800c4e8 <bcdToDec>
 800c744:	4603      	mov	r3, r0
 800c746:	461a      	mov	r2, r3
 800c748:	4b14      	ldr	r3, [pc, #80]	; (800c79c <Get_time+0xbc>)
 800c74a:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800c74c:	797b      	ldrb	r3, [r7, #5]
 800c74e:	4618      	mov	r0, r3
 800c750:	f7ff feca 	bl	800c4e8 <bcdToDec>
 800c754:	4603      	mov	r3, r0
 800c756:	461a      	mov	r2, r3
 800c758:	4b10      	ldr	r3, [pc, #64]	; (800c79c <Get_time+0xbc>)
 800c75a:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800c75c:	79bb      	ldrb	r3, [r7, #6]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff fec2 	bl	800c4e8 <bcdToDec>
 800c764:	4603      	mov	r3, r0
 800c766:	461a      	mov	r2, r3
 800c768:	4b0c      	ldr	r3, [pc, #48]	; (800c79c <Get_time+0xbc>)
 800c76a:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800c76c:	783a      	ldrb	r2, [r7, #0]
 800c76e:	4b0c      	ldr	r3, [pc, #48]	; (800c7a0 <Get_time+0xc0>)
 800c770:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800c772:	787a      	ldrb	r2, [r7, #1]
 800c774:	4b0a      	ldr	r3, [pc, #40]	; (800c7a0 <Get_time+0xc0>)
 800c776:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800c778:	78ba      	ldrb	r2, [r7, #2]
 800c77a:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <Get_time+0xc0>)
 800c77c:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800c77e:	793a      	ldrb	r2, [r7, #4]
 800c780:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <Get_time+0xc0>)
 800c782:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800c784:	797a      	ldrb	r2, [r7, #5]
 800c786:	4b06      	ldr	r3, [pc, #24]	; (800c7a0 <Get_time+0xc0>)
 800c788:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800c78a:	79ba      	ldrb	r2, [r7, #6]
 800c78c:	4b04      	ldr	r3, [pc, #16]	; (800c7a0 <Get_time+0xc0>)
 800c78e:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800c790:	bf00      	nop
}
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	2000b320 	.word	0x2000b320
 800c79c:	20003f38 	.word	0x20003f38
 800c7a0:	20003f40 	.word	0x20003f40

0800c7a4 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800c7a8:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <Update_Time_Every_Sec+0x2c>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f003 fbe3 	bl	800ff78 <HAL_Elaps_Ticks>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7b8:	d307      	bcc.n	800c7ca <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800c7ba:	f7ff ff91 	bl	800c6e0 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800c7be:	f00c fe61 	bl	8019484 <HAL_GetTick>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	4a02      	ldr	r2, [pc, #8]	; (800c7d0 <Update_Time_Every_Sec+0x2c>)
 800c7c6:	6013      	str	r3, [r2, #0]
	}
	return;
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
}
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20003f48 	.word	0x20003f48

0800c7d4 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800c7d8:	f014 f942 	bl	8020a60 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800c7dc:	4814      	ldr	r0, [pc, #80]	; (800c830 <Process_SiemensEI+0x5c>)
 800c7de:	f010 f9b7 	bl	801cb50 <HAL_IWDG_Refresh>

		Feed_wdt();
 800c7e2:	f009 fbb5 	bl	8015f50 <Feed_wdt>

		readCanToStructs();
 800c7e6:	f004 ff1b 	bl	8011620 <readCanToStructs>

		Chech_forSiemensCMD();
 800c7ea:	f001 fdef 	bl	800e3cc <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800c7ee:	f001 fb7f 	bl	800def0 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800c7f2:	f001 fc33 	bl	800e05c <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800c7f6:	f000 f821 	bl	800c83c <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800c7fa:	f001 fc51 	bl	800e0a0 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800c7fe:	f001 fc93 	bl	800e128 <SendRelays2Other>

		CheckRelayMisMatch();
 800c802:	f001 fca9 	bl	800e158 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800c806:	f001 fce1 	bl	800e1cc <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800c80a:	f00b fdc1 	bl	8018390 <Print_BuildDat_Details>

		GetTimeStamp();
 800c80e:	f002 fd67 	bl	800f2e0 <GetTimeStamp>

		CheckEIPC_DAT_CRC();
 800c812:	f7f4 fb9b 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800c816:	4b07      	ldr	r3, [pc, #28]	; (800c834 <Process_SiemensEI+0x60>)
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0dc      	beq.n	800c7d8 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800c81e:	4b06      	ldr	r3, [pc, #24]	; (800c838 <Process_SiemensEI+0x64>)
 800c820:	2203      	movs	r2, #3
 800c822:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800c824:	f00b fcb2 	bl	801818c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800c828:	4801      	ldr	r0, [pc, #4]	; (800c830 <Process_SiemensEI+0x5c>)
 800c82a:	f010 f991 	bl	801cb50 <HAL_IWDG_Refresh>
		Data_Processing();
 800c82e:	e7f9      	b.n	800c824 <Process_SiemensEI+0x50>
 800c830:	2000b3c8 	.word	0x2000b3c8
 800c834:	20000bba 	.word	0x20000bba
 800c838:	20000fbd 	.word	0x20000fbd

0800c83c <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800c842:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800c844:	2300      	movs	r3, #0
 800c846:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800c850:	2300      	movs	r3, #0
 800c852:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800c856:	2300      	movs	r3, #0
 800c858:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800c85c:	2300      	movs	r3, #0
 800c85e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800c862:	2300      	movs	r3, #0
 800c864:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800c868:	2300      	movs	r3, #0
 800c86a:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800c86e:	2300      	movs	r3, #0
 800c870:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800c892:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c896:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	3304      	adds	r3, #4
 800c8a0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f019 fd0e 	bl	80262c8 <memset>
	uint16_t Size = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800c8b8:	4b7c      	ldr	r3, [pc, #496]	; (800caac <Siemens_Data_Analyser+0x270>)
 800c8ba:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c8be:	2b0a      	cmp	r3, #10
 800c8c0:	f240 86d4 	bls.w	800d66c <Siemens_Data_Analyser+0xe30>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800c8c4:	4b79      	ldr	r3, [pc, #484]	; (800caac <Siemens_Data_Analyser+0x270>)
 800c8c6:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	f107 030c 	add.w	r3, r7, #12
 800c8d0:	4976      	ldr	r1, [pc, #472]	; (800caac <Siemens_Data_Analyser+0x270>)
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f019 fcd0 	bl	8026278 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800c8d8:	4b74      	ldr	r3, [pc, #464]	; (800caac <Siemens_Data_Analyser+0x270>)
 800c8da:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c8de:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800c8e2:	f240 6204 	movw	r2, #1540	; 0x604
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	4870      	ldr	r0, [pc, #448]	; (800caac <Siemens_Data_Analyser+0x270>)
 800c8ea:	f019 fced 	bl	80262c8 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800c8ee:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c8f2:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f019 fce5 	bl	80262c8 <memset>


	BITSTUFFINIT(0,0);
 800c8fe:	2300      	movs	r3, #0
 800c900:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c904:	2300      	movs	r3, #0
 800c906:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800c90a:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c90e:	085b      	lsrs	r3, r3, #1
 800c910:	b29b      	uxth	r3, r3
 800c912:	3b02      	subs	r3, #2
 800c914:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800c918:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c91c:	085b      	lsrs	r3, r3, #1
 800c91e:	b29b      	uxth	r3, r3
 800c920:	3b02      	subs	r3, #2
 800c922:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800c926:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c92a:	3b02      	subs	r3, #2
 800c92c:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800c930:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c934:	085b      	lsrs	r3, r3, #1
 800c936:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800c93a:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800c93e:	f107 030c 	add.w	r3, r7, #12
 800c942:	2200      	movs	r2, #0
 800c944:	4618      	mov	r0, r3
 800c946:	f002 fbb1 	bl	800f0ac <Data_Compliment>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d004      	beq.n	800c95a <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800c950:	4857      	ldr	r0, [pc, #348]	; (800cab0 <Siemens_Data_Analyser+0x274>)
 800c952:	f019 fe3d 	bl	80265d0 <puts>
		return ;
 800c956:	f000 be8c 	b.w	800d672 <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800c95a:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800c95e:	f107 020c 	add.w	r2, r7, #12
 800c962:	4413      	add	r3, r2
 800c964:	461a      	mov	r2, r3
 800c966:	2110      	movs	r1, #16
 800c968:	2000      	movs	r0, #0
 800c96a:	f7f3 fe53 	bl	8000614 <ExtractBits>
 800c96e:	4603      	mov	r3, r0
 800c970:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800c974:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800c978:	f107 030c 	add.w	r3, r7, #12
 800c97c:	4611      	mov	r1, r2
 800c97e:	4618      	mov	r0, r3
 800c980:	f002 f898 	bl	800eab4 <Siemens_CRC>
 800c984:	4603      	mov	r3, r0
 800c986:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c98a:	4b4a      	ldr	r3, [pc, #296]	; (800cab4 <Siemens_Data_Analyser+0x278>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	095b      	lsrs	r3, r3, #5
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	2b00      	cmp	r3, #0
 800c996:	d01c      	beq.n	800c9d2 <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c998:	4847      	ldr	r0, [pc, #284]	; (800cab8 <Siemens_Data_Analyser+0x27c>)
 800c99a:	f019 fe19 	bl	80265d0 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c99e:	4847      	ldr	r0, [pc, #284]	; (800cabc <Siemens_Data_Analyser+0x280>)
 800c9a0:	f011 fa22 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800c9a4:	4601      	mov	r1, r0
 800c9a6:	4b46      	ldr	r3, [pc, #280]	; (800cac0 <Siemens_Data_Analyser+0x284>)
 800c9a8:	fba3 2301 	umull	r2, r3, r3, r1
 800c9ac:	0bda      	lsrs	r2, r3, #15
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	041b      	lsls	r3, r3, #16
 800c9b2:	1a9b      	subs	r3, r3, r2
 800c9b4:	1aca      	subs	r2, r1, r3
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800c9bc:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800c9c0:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d104      	bne.n	800c9d2 <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800c9c8:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800c9d2:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800c9d6:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d010      	beq.n	800ca00 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800c9de:	4839      	ldr	r0, [pc, #228]	; (800cac4 <Siemens_Data_Analyser+0x288>)
 800c9e0:	f019 fdf6 	bl	80265d0 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800c9e4:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4837      	ldr	r0, [pc, #220]	; (800cac8 <Siemens_Data_Analyser+0x28c>)
 800c9ec:	f019 fd54 	bl	8026498 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800c9f0:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	4835      	ldr	r0, [pc, #212]	; (800cacc <Siemens_Data_Analyser+0x290>)
 800c9f8:	f019 fd4e 	bl	8026498 <iprintf>
		return;
 800c9fc:	f000 be39 	b.w	800d672 <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800ca00:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800ca04:	f107 020c 	add.w	r2, r7, #12
 800ca08:	4413      	add	r3, r2
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	2110      	movs	r1, #16
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f7f3 fe00 	bl	8000614 <ExtractBits>
 800ca14:	4603      	mov	r3, r0
 800ca16:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800ca1a:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800ca1e:	f107 020c 	add.w	r2, r7, #12
 800ca22:	4413      	add	r3, r2
 800ca24:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800ca28:	4611      	mov	r1, r2
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f002 f842 	bl	800eab4 <Siemens_CRC>
 800ca30:	4603      	mov	r3, r0
 800ca32:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ca36:	4b1f      	ldr	r3, [pc, #124]	; (800cab4 <Siemens_Data_Analyser+0x278>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	0a1b      	lsrs	r3, r3, #8
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d01c      	beq.n	800ca7e <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800ca44:	4822      	ldr	r0, [pc, #136]	; (800cad0 <Siemens_Data_Analyser+0x294>)
 800ca46:	f019 fdc3 	bl	80265d0 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800ca4a:	481c      	ldr	r0, [pc, #112]	; (800cabc <Siemens_Data_Analyser+0x280>)
 800ca4c:	f011 f9cc 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800ca50:	4601      	mov	r1, r0
 800ca52:	4b1b      	ldr	r3, [pc, #108]	; (800cac0 <Siemens_Data_Analyser+0x284>)
 800ca54:	fba3 2301 	umull	r2, r3, r3, r1
 800ca58:	0bda      	lsrs	r2, r3, #15
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	041b      	lsls	r3, r3, #16
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	1aca      	subs	r2, r1, r3
 800ca62:	4613      	mov	r3, r2
 800ca64:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800ca68:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800ca6c:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d104      	bne.n	800ca7e <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800ca74:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800ca78:	3304      	adds	r3, #4
 800ca7a:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800ca7e:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800ca82:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d02a      	beq.n	800cae0 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800ca8a:	4812      	ldr	r0, [pc, #72]	; (800cad4 <Siemens_Data_Analyser+0x298>)
 800ca8c:	f019 fda0 	bl	80265d0 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800ca90:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800ca94:	4619      	mov	r1, r3
 800ca96:	4810      	ldr	r0, [pc, #64]	; (800cad8 <Siemens_Data_Analyser+0x29c>)
 800ca98:	f019 fcfe 	bl	8026498 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800ca9c:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800caa0:	4619      	mov	r1, r3
 800caa2:	480e      	ldr	r0, [pc, #56]	; (800cadc <Siemens_Data_Analyser+0x2a0>)
 800caa4:	f019 fcf8 	bl	8026498 <iprintf>
		return;
 800caa8:	f000 bde3 	b.w	800d672 <Siemens_Data_Analyser+0xe36>
 800caac:	20006304 	.word	0x20006304
 800cab0:	0802a080 	.word	0x0802a080
 800cab4:	20004bc8 	.word	0x20004bc8
 800cab8:	0802a0a0 	.word	0x0802a0a0
 800cabc:	2000bc44 	.word	0x2000bc44
 800cac0:	80008001 	.word	0x80008001
 800cac4:	0802a0c8 	.word	0x0802a0c8
 800cac8:	0802a0d8 	.word	0x0802a0d8
 800cacc:	0802a0ec 	.word	0x0802a0ec
 800cad0:	0802a100 	.word	0x0802a100
 800cad4:	0802a12c 	.word	0x0802a12c
 800cad8:	0802a13c 	.word	0x0802a13c
 800cadc:	0802a158 	.word	0x0802a158
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800cae0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cae4:	b2d8      	uxtb	r0, r3
 800cae6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800caea:	f107 020c 	add.w	r2, r7, #12
 800caee:	441a      	add	r2, r3
 800caf0:	2301      	movs	r3, #1
 800caf2:	2108      	movs	r1, #8
 800caf4:	f002 f832 	bl	800eb5c <Extract_Parity_Data>
 800caf8:	4603      	mov	r3, r0
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb00:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb04:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cb06:	4b56      	ldr	r3, [pc, #344]	; (800cc60 <Siemens_Data_Analyser+0x424>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d02a      	beq.n	800cb68 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800cb12:	4854      	ldr	r0, [pc, #336]	; (800cc64 <Siemens_Data_Analyser+0x428>)
 800cb14:	f019 fd5c 	bl	80265d0 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800cb18:	4853      	ldr	r0, [pc, #332]	; (800cc68 <Siemens_Data_Analyser+0x42c>)
 800cb1a:	f011 f965 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800cb1e:	4601      	mov	r1, r0
 800cb20:	4b52      	ldr	r3, [pc, #328]	; (800cc6c <Siemens_Data_Analyser+0x430>)
 800cb22:	fba3 2301 	umull	r2, r3, r3, r1
 800cb26:	09da      	lsrs	r2, r3, #7
 800cb28:	4613      	mov	r3, r2
 800cb2a:	021b      	lsls	r3, r3, #8
 800cb2c:	1a9b      	subs	r3, r3, r2
 800cb2e:	1aca      	subs	r2, r1, r3
 800cb30:	b2d2      	uxtb	r2, r2
 800cb32:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb36:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb3a:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800cb3c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb40:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb44:	781a      	ldrb	r2, [r3, #0]
 800cb46:	4b4a      	ldr	r3, [pc, #296]	; (800cc70 <Siemens_Data_Analyser+0x434>)
 800cb48:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d10b      	bne.n	800cb68 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800cb50:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb54:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb62:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb66:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800cb68:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb6c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb70:	781a      	ldrb	r2, [r3, #0]
 800cb72:	4b3f      	ldr	r3, [pc, #252]	; (800cc70 <Siemens_Data_Analyser+0x434>)
 800cb74:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d015      	beq.n	800cba8 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800cb7c:	483d      	ldr	r0, [pc, #244]	; (800cc74 <Siemens_Data_Analyser+0x438>)
 800cb7e:	f019 fd27 	bl	80265d0 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800cb82:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb86:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	483a      	ldr	r0, [pc, #232]	; (800cc78 <Siemens_Data_Analyser+0x43c>)
 800cb90:	f019 fc82 	bl	8026498 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800cb94:	4b36      	ldr	r3, [pc, #216]	; (800cc70 <Siemens_Data_Analyser+0x434>)
 800cb96:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4837      	ldr	r0, [pc, #220]	; (800cc7c <Siemens_Data_Analyser+0x440>)
 800cb9e:	f019 fc7b 	bl	8026498 <iprintf>
		RejectPacketFlag = 1;
 800cba2:	2301      	movs	r3, #1
 800cba4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800cba8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cbac:	3308      	adds	r3, #8
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	da00      	bge.n	800cbb4 <Siemens_Data_Analyser+0x378>
 800cbb2:	3307      	adds	r3, #7
 800cbb4:	10db      	asrs	r3, r3, #3
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cbbc:	4413      	add	r3, r2
 800cbbe:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cbc2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cbc6:	3308      	adds	r3, #8
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	b21b      	sxth	r3, r3
 800cbcc:	425a      	negs	r2, r3
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	f002 0207 	and.w	r2, r2, #7
 800cbd6:	bf58      	it	pl
 800cbd8:	4253      	negpl	r3, r2
 800cbda:	b21b      	sxth	r3, r3
 800cbdc:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800cbe0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cbe4:	b2d8      	uxtb	r0, r3
 800cbe6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cbea:	f107 020c 	add.w	r2, r7, #12
 800cbee:	441a      	add	r2, r3
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	2118      	movs	r1, #24
 800cbf4:	f001 ffb2 	bl	800eb5c <Extract_Parity_Data>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc00:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc04:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800cc06:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc0a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc14:	d036      	beq.n	800cc84 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800cc16:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc1a:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800cc1e:	4a18      	ldr	r2, [pc, #96]	; (800cc80 <Siemens_Data_Analyser+0x444>)
 800cc20:	8812      	ldrh	r2, [r2, #0]
 800cc22:	801a      	strh	r2, [r3, #0]
 800cc24:	2200      	movs	r2, #0
 800cc26:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800cc28:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cc2c:	f107 020c 	add.w	r2, r7, #12
 800cc30:	4413      	add	r3, r2
 800cc32:	f107 0208 	add.w	r2, r7, #8
 800cc36:	2103      	movs	r1, #3
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f000 fd45 	bl	800d6c8 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800cc3e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc42:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc46:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800cc4a:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800cc4e:	3308      	adds	r3, #8
 800cc50:	6812      	ldr	r2, [r2, #0]
 800cc52:	4611      	mov	r1, r2
 800cc54:	8019      	strh	r1, [r3, #0]
 800cc56:	3302      	adds	r3, #2
 800cc58:	0c12      	lsrs	r2, r2, #16
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	e015      	b.n	800cc8a <Siemens_Data_Analyser+0x44e>
 800cc5e:	bf00      	nop
 800cc60:	20004bc8 	.word	0x20004bc8
 800cc64:	0802a174 	.word	0x0802a174
 800cc68:	2000bc44 	.word	0x2000bc44
 800cc6c:	80808081 	.word	0x80808081
 800cc70:	20000504 	.word	0x20000504
 800cc74:	0802a194 	.word	0x0802a194
 800cc78:	0802a1b8 	.word	0x0802a1b8
 800cc7c:	0802a1c8 	.word	0x0802a1c8
 800cc80:	0802a34c 	.word	0x0802a34c
	}
	else
	{
		RejectPacketFlag = 1;
 800cc84:	2301      	movs	r3, #1
 800cc86:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800cc8a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc8e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc92:	689a      	ldr	r2, [r3, #8]
 800cc94:	4bbf      	ldr	r3, [pc, #764]	; (800cf94 <Siemens_Data_Analyser+0x758>)
 800cc96:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d015      	beq.n	800ccca <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800cc9e:	48be      	ldr	r0, [pc, #760]	; (800cf98 <Siemens_Data_Analyser+0x75c>)
 800cca0:	f019 fc96 	bl	80265d0 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800cca4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cca8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	48ba      	ldr	r0, [pc, #744]	; (800cf9c <Siemens_Data_Analyser+0x760>)
 800ccb2:	f019 fbf1 	bl	8026498 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800ccb6:	4bb7      	ldr	r3, [pc, #732]	; (800cf94 <Siemens_Data_Analyser+0x758>)
 800ccb8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	48b8      	ldr	r0, [pc, #736]	; (800cfa0 <Siemens_Data_Analyser+0x764>)
 800ccc0:	f019 fbea 	bl	8026498 <iprintf>
		RejectPacketFlag = 1;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800ccca:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ccce:	3318      	adds	r3, #24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	da00      	bge.n	800ccd6 <Siemens_Data_Analyser+0x49a>
 800ccd4:	3307      	adds	r3, #7
 800ccd6:	10db      	asrs	r3, r3, #3
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ccde:	4413      	add	r3, r2
 800cce0:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cce4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cce8:	3318      	adds	r3, #24
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	b21b      	sxth	r3, r3
 800ccee:	425a      	negs	r2, r3
 800ccf0:	f003 0307 	and.w	r3, r3, #7
 800ccf4:	f002 0207 	and.w	r2, r2, #7
 800ccf8:	bf58      	it	pl
 800ccfa:	4253      	negpl	r3, r2
 800ccfc:	b21b      	sxth	r3, r3
 800ccfe:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800cd02:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cd06:	b2d8      	uxtb	r0, r3
 800cd08:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cd0c:	f107 020c 	add.w	r2, r7, #12
 800cd10:	441a      	add	r2, r3
 800cd12:	2301      	movs	r3, #1
 800cd14:	2108      	movs	r1, #8
 800cd16:	f001 ff21 	bl	800eb5c <Extract_Parity_Data>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd22:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd26:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cd28:	4b9e      	ldr	r3, [pc, #632]	; (800cfa4 <Siemens_Data_Analyser+0x768>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	085b      	lsrs	r3, r3, #1
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d02a      	beq.n	800cd8c <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800cd36:	489c      	ldr	r0, [pc, #624]	; (800cfa8 <Siemens_Data_Analyser+0x76c>)
 800cd38:	f019 fc4a 	bl	80265d0 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800cd3c:	489b      	ldr	r0, [pc, #620]	; (800cfac <Siemens_Data_Analyser+0x770>)
 800cd3e:	f011 f853 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800cd42:	4601      	mov	r1, r0
 800cd44:	4b9a      	ldr	r3, [pc, #616]	; (800cfb0 <Siemens_Data_Analyser+0x774>)
 800cd46:	fba3 2301 	umull	r2, r3, r3, r1
 800cd4a:	09da      	lsrs	r2, r3, #7
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	1a9b      	subs	r3, r3, r2
 800cd52:	1aca      	subs	r2, r1, r3
 800cd54:	b2d2      	uxtb	r2, r2
 800cd56:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd5a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd5e:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800cd60:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd64:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd68:	7b1a      	ldrb	r2, [r3, #12]
 800cd6a:	4b8a      	ldr	r3, [pc, #552]	; (800cf94 <Siemens_Data_Analyser+0x758>)
 800cd6c:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d10b      	bne.n	800cd8c <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800cd74:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd78:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd7c:	7b1b      	ldrb	r3, [r3, #12]
 800cd7e:	3304      	adds	r3, #4
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd86:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd8a:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800cd8c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd90:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd94:	7b1a      	ldrb	r2, [r3, #12]
 800cd96:	4b7f      	ldr	r3, [pc, #508]	; (800cf94 <Siemens_Data_Analyser+0x758>)
 800cd98:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d015      	beq.n	800cdcc <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800cda0:	4884      	ldr	r0, [pc, #528]	; (800cfb4 <Siemens_Data_Analyser+0x778>)
 800cda2:	f019 fc15 	bl	80265d0 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800cda6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cdaa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cdae:	7b1b      	ldrb	r3, [r3, #12]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4881      	ldr	r0, [pc, #516]	; (800cfb8 <Siemens_Data_Analyser+0x77c>)
 800cdb4:	f019 fb70 	bl	8026498 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800cdb8:	4b76      	ldr	r3, [pc, #472]	; (800cf94 <Siemens_Data_Analyser+0x758>)
 800cdba:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	487e      	ldr	r0, [pc, #504]	; (800cfbc <Siemens_Data_Analyser+0x780>)
 800cdc2:	f019 fb69 	bl	8026498 <iprintf>
		RejectPacketFlag = 1;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800cdcc:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	da00      	bge.n	800cdd8 <Siemens_Data_Analyser+0x59c>
 800cdd6:	3307      	adds	r3, #7
 800cdd8:	10db      	asrs	r3, r3, #3
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cde0:	4413      	add	r3, r2
 800cde2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cde6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cdea:	3308      	adds	r3, #8
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	b21b      	sxth	r3, r3
 800cdf0:	425a      	negs	r2, r3
 800cdf2:	f003 0307 	and.w	r3, r3, #7
 800cdf6:	f002 0207 	and.w	r2, r2, #7
 800cdfa:	bf58      	it	pl
 800cdfc:	4253      	negpl	r3, r2
 800cdfe:	b21b      	sxth	r3, r3
 800ce00:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800ce04:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ce08:	b2d8      	uxtb	r0, r3
 800ce0a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ce0e:	f107 020c 	add.w	r2, r7, #12
 800ce12:	441a      	add	r2, r3
 800ce14:	2300      	movs	r3, #0
 800ce16:	2118      	movs	r1, #24
 800ce18:	f001 fea0 	bl	800eb5c <Extract_Parity_Data>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	461a      	mov	r2, r3
 800ce20:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce24:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce28:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800ce2a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce2e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce38:	d021      	beq.n	800ce7e <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800ce3a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce3e:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800ce42:	4a5f      	ldr	r2, [pc, #380]	; (800cfc0 <Siemens_Data_Analyser+0x784>)
 800ce44:	8812      	ldrh	r2, [r2, #0]
 800ce46:	801a      	strh	r2, [r3, #0]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800ce4c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ce50:	f107 020c 	add.w	r2, r7, #12
 800ce54:	4413      	add	r3, r2
 800ce56:	1d3a      	adds	r2, r7, #4
 800ce58:	2103      	movs	r1, #3
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 fc34 	bl	800d6c8 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800ce60:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce64:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce68:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800ce6c:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800ce70:	3314      	adds	r3, #20
 800ce72:	6812      	ldr	r2, [r2, #0]
 800ce74:	4611      	mov	r1, r2
 800ce76:	8019      	strh	r1, [r3, #0]
 800ce78:	3302      	adds	r3, #2
 800ce7a:	0c12      	lsrs	r2, r2, #16
 800ce7c:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ce7e:	4b49      	ldr	r3, [pc, #292]	; (800cfa4 <Siemens_Data_Analyser+0x768>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	089b      	lsrs	r3, r3, #2
 800ce84:	f003 0301 	and.w	r3, r3, #1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d02c      	beq.n	800cee6 <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800ce8c:	484d      	ldr	r0, [pc, #308]	; (800cfc4 <Siemens_Data_Analyser+0x788>)
 800ce8e:	f019 fb9f 	bl	80265d0 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800ce92:	4846      	ldr	r0, [pc, #280]	; (800cfac <Siemens_Data_Analyser+0x770>)
 800ce94:	f010 ffa8 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800ce98:	4601      	mov	r1, r0
 800ce9a:	f240 1301 	movw	r3, #257	; 0x101
 800ce9e:	fba3 2301 	umull	r2, r3, r3, r1
 800cea2:	1aca      	subs	r2, r1, r3
 800cea4:	0852      	lsrs	r2, r2, #1
 800cea6:	4413      	add	r3, r2
 800cea8:	0dda      	lsrs	r2, r3, #23
 800ceaa:	4613      	mov	r3, r2
 800ceac:	061b      	lsls	r3, r3, #24
 800ceae:	1a9b      	subs	r3, r3, r2
 800ceb0:	1aca      	subs	r2, r1, r3
 800ceb2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ceb6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ceba:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800cebc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cec0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cec4:	695a      	ldr	r2, [r3, #20]
 800cec6:	4b33      	ldr	r3, [pc, #204]	; (800cf94 <Siemens_Data_Analyser+0x758>)
 800cec8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cecc:	429a      	cmp	r2, r3
 800cece:	d10a      	bne.n	800cee6 <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800ced0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ced4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ced8:	695b      	ldr	r3, [r3, #20]
 800ceda:	1d1a      	adds	r2, r3, #4
 800cedc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cee0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cee4:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800cee6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ceea:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ceee:	695a      	ldr	r2, [r3, #20]
 800cef0:	4b28      	ldr	r3, [pc, #160]	; (800cf94 <Siemens_Data_Analyser+0x758>)
 800cef2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d015      	beq.n	800cf26 <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800cefa:	4833      	ldr	r0, [pc, #204]	; (800cfc8 <Siemens_Data_Analyser+0x78c>)
 800cefc:	f019 fb68 	bl	80265d0 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800cf00:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf04:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4823      	ldr	r0, [pc, #140]	; (800cf9c <Siemens_Data_Analyser+0x760>)
 800cf0e:	f019 fac3 	bl	8026498 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800cf12:	4b20      	ldr	r3, [pc, #128]	; (800cf94 <Siemens_Data_Analyser+0x758>)
 800cf14:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4821      	ldr	r0, [pc, #132]	; (800cfa0 <Siemens_Data_Analyser+0x764>)
 800cf1c:	f019 fabc 	bl	8026498 <iprintf>
		RejectPacketFlag = 1;
 800cf20:	2301      	movs	r3, #1
 800cf22:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800cf26:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cf2a:	3318      	adds	r3, #24
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	da00      	bge.n	800cf32 <Siemens_Data_Analyser+0x6f6>
 800cf30:	3307      	adds	r3, #7
 800cf32:	10db      	asrs	r3, r3, #3
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cf3a:	4413      	add	r3, r2
 800cf3c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cf40:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cf44:	3318      	adds	r3, #24
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	b21b      	sxth	r3, r3
 800cf4a:	425a      	negs	r2, r3
 800cf4c:	f003 0307 	and.w	r3, r3, #7
 800cf50:	f002 0207 	and.w	r2, r2, #7
 800cf54:	bf58      	it	pl
 800cf56:	4253      	negpl	r3, r2
 800cf58:	b21b      	sxth	r3, r3
 800cf5a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800cf5e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cf62:	b2d8      	uxtb	r0, r3
 800cf64:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cf68:	f107 020c 	add.w	r2, r7, #12
 800cf6c:	441a      	add	r2, r3
 800cf6e:	2300      	movs	r3, #0
 800cf70:	2108      	movs	r1, #8
 800cf72:	f001 fdf3 	bl	800eb5c <Extract_Parity_Data>
 800cf76:	4603      	mov	r3, r0
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf7e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf82:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800cf84:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cf88:	3308      	adds	r3, #8
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	da1e      	bge.n	800cfcc <Siemens_Data_Analyser+0x790>
 800cf8e:	3307      	adds	r3, #7
 800cf90:	e01c      	b.n	800cfcc <Siemens_Data_Analyser+0x790>
 800cf92:	bf00      	nop
 800cf94:	20000504 	.word	0x20000504
 800cf98:	0802a1d8 	.word	0x0802a1d8
 800cf9c:	0802a1f8 	.word	0x0802a1f8
 800cfa0:	0802a208 	.word	0x0802a208
 800cfa4:	20004bc8 	.word	0x20004bc8
 800cfa8:	0802a218 	.word	0x0802a218
 800cfac:	2000bc44 	.word	0x2000bc44
 800cfb0:	80808081 	.word	0x80808081
 800cfb4:	0802a238 	.word	0x0802a238
 800cfb8:	0802a1b8 	.word	0x0802a1b8
 800cfbc:	0802a1c8 	.word	0x0802a1c8
 800cfc0:	0802a34c 	.word	0x0802a34c
 800cfc4:	0802a258 	.word	0x0802a258
 800cfc8:	0802a274 	.word	0x0802a274
 800cfcc:	10db      	asrs	r3, r3, #3
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cfda:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cfde:	3308      	adds	r3, #8
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	b21b      	sxth	r3, r3
 800cfe4:	425a      	negs	r2, r3
 800cfe6:	f003 0307 	and.w	r3, r3, #7
 800cfea:	f002 0207 	and.w	r2, r2, #7
 800cfee:	bf58      	it	pl
 800cff0:	4253      	negpl	r3, r2
 800cff2:	b21b      	sxth	r3, r3
 800cff4:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800cff8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cffc:	b2d8      	uxtb	r0, r3
 800cffe:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d002:	f107 020c 	add.w	r2, r7, #12
 800d006:	441a      	add	r2, r3
 800d008:	2301      	movs	r3, #1
 800d00a:	2108      	movs	r1, #8
 800d00c:	f001 fda6 	bl	800eb5c <Extract_Parity_Data>
 800d010:	4603      	mov	r3, r0
 800d012:	b2da      	uxtb	r2, r3
 800d014:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d018:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d01c:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800d01e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d022:	3308      	adds	r3, #8
 800d024:	2b00      	cmp	r3, #0
 800d026:	da00      	bge.n	800d02a <Siemens_Data_Analyser+0x7ee>
 800d028:	3307      	adds	r3, #7
 800d02a:	10db      	asrs	r3, r3, #3
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d032:	4413      	add	r3, r2
 800d034:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d038:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d03c:	3308      	adds	r3, #8
 800d03e:	b29b      	uxth	r3, r3
 800d040:	b21b      	sxth	r3, r3
 800d042:	425a      	negs	r2, r3
 800d044:	f003 0307 	and.w	r3, r3, #7
 800d048:	f002 0207 	and.w	r2, r2, #7
 800d04c:	bf58      	it	pl
 800d04e:	4253      	negpl	r3, r2
 800d050:	b21b      	sxth	r3, r3
 800d052:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d056:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d05a:	b2d8      	uxtb	r0, r3
 800d05c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d060:	f107 020c 	add.w	r2, r7, #12
 800d064:	441a      	add	r2, r3
 800d066:	2302      	movs	r3, #2
 800d068:	2108      	movs	r1, #8
 800d06a:	f001 fd77 	bl	800eb5c <Extract_Parity_Data>
 800d06e:	4603      	mov	r3, r0
 800d070:	b2da      	uxtb	r2, r3
 800d072:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d076:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d07a:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d07c:	4bab      	ldr	r3, [pc, #684]	; (800d32c <Siemens_Data_Analyser+0xaf0>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	08db      	lsrs	r3, r3, #3
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d02a      	beq.n	800d0e0 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800d08a:	48a9      	ldr	r0, [pc, #676]	; (800d330 <Siemens_Data_Analyser+0xaf4>)
 800d08c:	f019 faa0 	bl	80265d0 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d090:	48a8      	ldr	r0, [pc, #672]	; (800d334 <Siemens_Data_Analyser+0xaf8>)
 800d092:	f010 fea9 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800d096:	4601      	mov	r1, r0
 800d098:	4ba7      	ldr	r3, [pc, #668]	; (800d338 <Siemens_Data_Analyser+0xafc>)
 800d09a:	fba3 2301 	umull	r2, r3, r3, r1
 800d09e:	09da      	lsrs	r2, r3, #7
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	021b      	lsls	r3, r3, #8
 800d0a4:	1a9b      	subs	r3, r3, r2
 800d0a6:	1aca      	subs	r2, r1, r3
 800d0a8:	b2d2      	uxtb	r2, r2
 800d0aa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0ae:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0b2:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800d0b4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0b8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0bc:	7e9a      	ldrb	r2, [r3, #26]
 800d0be:	4b9f      	ldr	r3, [pc, #636]	; (800d33c <Siemens_Data_Analyser+0xb00>)
 800d0c0:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d10b      	bne.n	800d0e0 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800d0c8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0cc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0d0:	7e9b      	ldrb	r3, [r3, #26]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0da:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0de:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800d0e0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0e4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0e8:	7e9a      	ldrb	r2, [r3, #26]
 800d0ea:	4b94      	ldr	r3, [pc, #592]	; (800d33c <Siemens_Data_Analyser+0xb00>)
 800d0ec:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d015      	beq.n	800d120 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800d0f4:	4892      	ldr	r0, [pc, #584]	; (800d340 <Siemens_Data_Analyser+0xb04>)
 800d0f6:	f019 fa6b 	bl	80265d0 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800d0fa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0fe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d102:	7e9b      	ldrb	r3, [r3, #26]
 800d104:	4619      	mov	r1, r3
 800d106:	488f      	ldr	r0, [pc, #572]	; (800d344 <Siemens_Data_Analyser+0xb08>)
 800d108:	f019 f9c6 	bl	8026498 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800d10c:	4b8b      	ldr	r3, [pc, #556]	; (800d33c <Siemens_Data_Analyser+0xb00>)
 800d10e:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d112:	4619      	mov	r1, r3
 800d114:	488c      	ldr	r0, [pc, #560]	; (800d348 <Siemens_Data_Analyser+0xb0c>)
 800d116:	f019 f9bf 	bl	8026498 <iprintf>
		RejectPacketFlag = 1;
 800d11a:	2301      	movs	r3, #1
 800d11c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800d120:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d124:	3308      	adds	r3, #8
 800d126:	2b00      	cmp	r3, #0
 800d128:	da00      	bge.n	800d12c <Siemens_Data_Analyser+0x8f0>
 800d12a:	3307      	adds	r3, #7
 800d12c:	10db      	asrs	r3, r3, #3
 800d12e:	b29a      	uxth	r2, r3
 800d130:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d134:	4413      	add	r3, r2
 800d136:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d13a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d13e:	3308      	adds	r3, #8
 800d140:	b29b      	uxth	r3, r3
 800d142:	b21b      	sxth	r3, r3
 800d144:	425a      	negs	r2, r3
 800d146:	f003 0307 	and.w	r3, r3, #7
 800d14a:	f002 0207 	and.w	r2, r2, #7
 800d14e:	bf58      	it	pl
 800d150:	4253      	negpl	r3, r2
 800d152:	b21b      	sxth	r3, r3
 800d154:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d158:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d15c:	b2d8      	uxtb	r0, r3
 800d15e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d162:	f107 020c 	add.w	r2, r7, #12
 800d166:	441a      	add	r2, r3
 800d168:	2302      	movs	r3, #2
 800d16a:	2108      	movs	r1, #8
 800d16c:	f001 fcf6 	bl	800eb5c <Extract_Parity_Data>
 800d170:	4603      	mov	r3, r0
 800d172:	b2da      	uxtb	r2, r3
 800d174:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d178:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d17c:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d17e:	4b6b      	ldr	r3, [pc, #428]	; (800d32c <Siemens_Data_Analyser+0xaf0>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	091b      	lsrs	r3, r3, #4
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d02a      	beq.n	800d1e2 <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800d18c:	486f      	ldr	r0, [pc, #444]	; (800d34c <Siemens_Data_Analyser+0xb10>)
 800d18e:	f019 fa1f 	bl	80265d0 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d192:	4868      	ldr	r0, [pc, #416]	; (800d334 <Siemens_Data_Analyser+0xaf8>)
 800d194:	f010 fe28 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800d198:	4601      	mov	r1, r0
 800d19a:	4b67      	ldr	r3, [pc, #412]	; (800d338 <Siemens_Data_Analyser+0xafc>)
 800d19c:	fba3 2301 	umull	r2, r3, r3, r1
 800d1a0:	09da      	lsrs	r2, r3, #7
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	021b      	lsls	r3, r3, #8
 800d1a6:	1a9b      	subs	r3, r3, r2
 800d1a8:	1aca      	subs	r2, r1, r3
 800d1aa:	b2d2      	uxtb	r2, r2
 800d1ac:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1b0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1b4:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800d1b6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1ba:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1be:	7eda      	ldrb	r2, [r3, #27]
 800d1c0:	4b5e      	ldr	r3, [pc, #376]	; (800d33c <Siemens_Data_Analyser+0xb00>)
 800d1c2:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d10b      	bne.n	800d1e2 <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800d1ca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1ce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1d2:	7edb      	ldrb	r3, [r3, #27]
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1dc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1e0:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800d1e2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1ea:	7eda      	ldrb	r2, [r3, #27]
 800d1ec:	4b53      	ldr	r3, [pc, #332]	; (800d33c <Siemens_Data_Analyser+0xb00>)
 800d1ee:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d015      	beq.n	800d222 <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800d1f6:	4856      	ldr	r0, [pc, #344]	; (800d350 <Siemens_Data_Analyser+0xb14>)
 800d1f8:	f019 f9ea 	bl	80265d0 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800d1fc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d200:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d204:	7edb      	ldrb	r3, [r3, #27]
 800d206:	4619      	mov	r1, r3
 800d208:	484e      	ldr	r0, [pc, #312]	; (800d344 <Siemens_Data_Analyser+0xb08>)
 800d20a:	f019 f945 	bl	8026498 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800d20e:	4b4b      	ldr	r3, [pc, #300]	; (800d33c <Siemens_Data_Analyser+0xb00>)
 800d210:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d214:	4619      	mov	r1, r3
 800d216:	484c      	ldr	r0, [pc, #304]	; (800d348 <Siemens_Data_Analyser+0xb0c>)
 800d218:	f019 f93e 	bl	8026498 <iprintf>
		RejectPacketFlag = 1;
 800d21c:	2301      	movs	r3, #1
 800d21e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800d222:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d226:	3308      	adds	r3, #8
 800d228:	2b00      	cmp	r3, #0
 800d22a:	da00      	bge.n	800d22e <Siemens_Data_Analyser+0x9f2>
 800d22c:	3307      	adds	r3, #7
 800d22e:	10db      	asrs	r3, r3, #3
 800d230:	b29a      	uxth	r2, r3
 800d232:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d236:	4413      	add	r3, r2
 800d238:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d23c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d240:	3308      	adds	r3, #8
 800d242:	b29b      	uxth	r3, r3
 800d244:	b21b      	sxth	r3, r3
 800d246:	425a      	negs	r2, r3
 800d248:	f003 0307 	and.w	r3, r3, #7
 800d24c:	f002 0207 	and.w	r2, r2, #7
 800d250:	bf58      	it	pl
 800d252:	4253      	negpl	r3, r2
 800d254:	b21b      	sxth	r3, r3
 800d256:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d25a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d25e:	b2d8      	uxtb	r0, r3
 800d260:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d264:	f107 020c 	add.w	r2, r7, #12
 800d268:	441a      	add	r2, r3
 800d26a:	2302      	movs	r3, #2
 800d26c:	2120      	movs	r1, #32
 800d26e:	f001 fc75 	bl	800eb5c <Extract_Parity_Data>
 800d272:	4603      	mov	r3, r0
 800d274:	461a      	mov	r2, r3
 800d276:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d27a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d27e:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800d280:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d284:	3320      	adds	r3, #32
 800d286:	2b00      	cmp	r3, #0
 800d288:	da00      	bge.n	800d28c <Siemens_Data_Analyser+0xa50>
 800d28a:	3307      	adds	r3, #7
 800d28c:	10db      	asrs	r3, r3, #3
 800d28e:	b29a      	uxth	r2, r3
 800d290:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d294:	4413      	add	r3, r2
 800d296:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d29a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d29e:	3320      	adds	r3, #32
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	b21b      	sxth	r3, r3
 800d2a4:	425a      	negs	r2, r3
 800d2a6:	f003 0307 	and.w	r3, r3, #7
 800d2aa:	f002 0207 	and.w	r2, r2, #7
 800d2ae:	bf58      	it	pl
 800d2b0:	4253      	negpl	r3, r2
 800d2b2:	b21b      	sxth	r3, r3
 800d2b4:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d2b8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d2bc:	b2d8      	uxtb	r0, r3
 800d2be:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d2c2:	f107 020c 	add.w	r2, r7, #12
 800d2c6:	441a      	add	r2, r3
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	2120      	movs	r1, #32
 800d2cc:	f001 fc46 	bl	800eb5c <Extract_Parity_Data>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2d8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2dc:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800d2de:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d2e2:	3320      	adds	r3, #32
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	da00      	bge.n	800d2ea <Siemens_Data_Analyser+0xaae>
 800d2e8:	3307      	adds	r3, #7
 800d2ea:	10db      	asrs	r3, r3, #3
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d2f2:	4413      	add	r3, r2
 800d2f4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d2f8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d2fc:	3320      	adds	r3, #32
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	b21b      	sxth	r3, r3
 800d302:	425a      	negs	r2, r3
 800d304:	f003 0307 	and.w	r3, r3, #7
 800d308:	f002 0207 	and.w	r2, r2, #7
 800d30c:	bf58      	it	pl
 800d30e:	4253      	negpl	r3, r2
 800d310:	b21b      	sxth	r3, r3
 800d312:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800d316:	2300      	movs	r3, #0
 800d318:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800d31c:	200a      	movs	r0, #10
 800d31e:	f019 f8d3 	bl	80264c8 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d322:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d326:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d32a:	e052      	b.n	800d3d2 <Siemens_Data_Analyser+0xb96>
 800d32c:	20004bc8 	.word	0x20004bc8
 800d330:	0802a290 	.word	0x0802a290
 800d334:	2000bc44 	.word	0x2000bc44
 800d338:	80808081 	.word	0x80808081
 800d33c:	20000504 	.word	0x20000504
 800d340:	0802a2ac 	.word	0x0802a2ac
 800d344:	0802a1b8 	.word	0x0802a1b8
 800d348:	0802a1c8 	.word	0x0802a1c8
 800d34c:	0802a2cc 	.word	0x0802a2cc
 800d350:	0802a2e8 	.word	0x0802a2e8
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800d354:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d358:	b2d8      	uxtb	r0, r3
 800d35a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d35e:	f107 020c 	add.w	r2, r7, #12
 800d362:	441a      	add	r2, r3
 800d364:	2300      	movs	r3, #0
 800d366:	2108      	movs	r1, #8
 800d368:	f001 fbf8 	bl	800eb5c <Extract_Parity_Data>
 800d36c:	4601      	mov	r1, r0
 800d36e:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800d378:	461a      	mov	r2, r3
 800d37a:	b2c9      	uxtb	r1, r1
 800d37c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d380:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800d384:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800d386:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800d38a:	3301      	adds	r3, #1
 800d38c:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800d390:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d394:	3308      	adds	r3, #8
 800d396:	2b00      	cmp	r3, #0
 800d398:	da00      	bge.n	800d39c <Siemens_Data_Analyser+0xb60>
 800d39a:	3307      	adds	r3, #7
 800d39c:	10db      	asrs	r3, r3, #3
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d3aa:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	b21b      	sxth	r3, r3
 800d3b4:	425a      	negs	r2, r3
 800d3b6:	f003 0307 	and.w	r3, r3, #7
 800d3ba:	f002 0207 	and.w	r2, r2, #7
 800d3be:	bf58      	it	pl
 800d3c0:	4253      	negpl	r3, r2
 800d3c2:	b21b      	sxth	r3, r3
 800d3c4:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d3c8:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d3d2:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d8b9      	bhi.n	800d354 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800d3e0:	200a      	movs	r0, #10
 800d3e2:	f019 f871 	bl	80264c8 <putchar>


	//	printf("App_data_Size:%u\n",App_data_Size);
	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800d3e6:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d3ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d3ee:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800d3f2:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 f966 	bl	800d6c8 <ExtractAppData>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	461a      	mov	r2, r3
 800d400:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d404:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d408:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800d40a:	4b9c      	ldr	r3, [pc, #624]	; (800d67c <Siemens_Data_Analyser+0xe40>)
 800d40c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d410:	f003 0307 	and.w	r3, r3, #7
 800d414:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800d418:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d008      	beq.n	800d432 <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800d420:	4b96      	ldr	r3, [pc, #600]	; (800d67c <Siemens_Data_Analyser+0xe40>)
 800d422:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d426:	08db      	lsrs	r3, r3, #3
 800d428:	b29b      	uxth	r3, r3
 800d42a:	3301      	adds	r3, #1
 800d42c:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800d430:	e005      	b.n	800d43e <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800d432:	4b92      	ldr	r3, [pc, #584]	; (800d67c <Siemens_Data_Analyser+0xe40>)
 800d434:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d438:	08db      	lsrs	r3, r3, #3
 800d43a:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800d43e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d442:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d446:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d448:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d02c      	beq.n	800d4aa <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800d450:	488b      	ldr	r0, [pc, #556]	; (800d680 <Siemens_Data_Analyser+0xe44>)
 800d452:	f019 f8bd 	bl	80265d0 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800d456:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d45a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d45e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d460:	4619      	mov	r1, r3
 800d462:	4888      	ldr	r0, [pc, #544]	; (800d684 <Siemens_Data_Analyser+0xe48>)
 800d464:	f019 f818 	bl	8026498 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800d468:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d46c:	4619      	mov	r1, r3
 800d46e:	4886      	ldr	r0, [pc, #536]	; (800d688 <Siemens_Data_Analyser+0xe4c>)
 800d470:	f019 f812 	bl	8026498 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800d474:	4985      	ldr	r1, [pc, #532]	; (800d68c <Siemens_Data_Analyser+0xe50>)
 800d476:	4886      	ldr	r0, [pc, #536]	; (800d690 <Siemens_Data_Analyser+0xe54>)
 800d478:	f7f2 fee2 	bl	8000240 <strcmp>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d002      	beq.n	800d488 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800d482:	2301      	movs	r3, #1
 800d484:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800d488:	4980      	ldr	r1, [pc, #512]	; (800d68c <Siemens_Data_Analyser+0xe50>)
 800d48a:	4881      	ldr	r0, [pc, #516]	; (800d690 <Siemens_Data_Analyser+0xe54>)
 800d48c:	f7f2 fed8 	bl	8000240 <strcmp>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d109      	bne.n	800d4aa <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800d496:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d49a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d49e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4a0:	00db      	lsls	r3, r3, #3
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	4b75      	ldr	r3, [pc, #468]	; (800d67c <Siemens_Data_Analyser+0xe40>)
 800d4a6:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800d4aa:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	f000 80de 	beq.w	800d670 <Siemens_Data_Analyser+0xe34>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800d4b4:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800d4b8:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d4bc:	3326      	adds	r3, #38	; 0x26
 800d4be:	4619      	mov	r1, r3
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	f008 f9f7 	bl	80158b4 <GetCRC16>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800d4cc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d4d0:	f107 020c 	add.w	r2, r7, #12
 800d4d4:	4413      	add	r3, r2
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	2110      	movs	r1, #16
 800d4da:	2000      	movs	r0, #0
 800d4dc:	f7f3 f89a 	bl	8000614 <ExtractBits>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4e8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4ec:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800d4f0:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	4867      	ldr	r0, [pc, #412]	; (800d694 <Siemens_Data_Analyser+0xe58>)
 800d4f8:	f018 fee6 	bl	80262c8 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800d4fc:	4a65      	ldr	r2, [pc, #404]	; (800d694 <Siemens_Data_Analyser+0xe58>)
 800d4fe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d502:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d506:	4610      	mov	r0, r2
 800d508:	4619      	mov	r1, r3
 800d50a:	f44f 730a 	mov.w	r3, #552	; 0x228
 800d50e:	461a      	mov	r2, r3
 800d510:	f018 feb2 	bl	8026278 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800d514:	f000 f92e 	bl	800d774 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d518:	4b5f      	ldr	r3, [pc, #380]	; (800d698 <Siemens_Data_Analyser+0xe5c>)
 800d51a:	881b      	ldrh	r3, [r3, #0]
 800d51c:	461a      	mov	r2, r3
 800d51e:	4b57      	ldr	r3, [pc, #348]	; (800d67c <Siemens_Data_Analyser+0xe40>)
 800d520:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	2b00      	cmp	r3, #0
 800d528:	bfb8      	it	lt
 800d52a:	425b      	neglt	r3, r3
 800d52c:	461a      	mov	r2, r3
 800d52e:	4b53      	ldr	r3, [pc, #332]	; (800d67c <Siemens_Data_Analyser+0xe40>)
 800d530:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d534:	429a      	cmp	r2, r3
 800d536:	d869      	bhi.n	800d60c <Siemens_Data_Analyser+0xdd0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800d538:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d53c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d540:	69da      	ldr	r2, [r3, #28]
 800d542:	4b56      	ldr	r3, [pc, #344]	; (800d69c <Siemens_Data_Analyser+0xe60>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	429a      	cmp	r2, r3
 800d548:	d044      	beq.n	800d5d4 <Siemens_Data_Analyser+0xd98>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800d54a:	f00b ff9b 	bl	8019484 <HAL_GetTick>
 800d54e:	4603      	mov	r3, r0
 800d550:	4a53      	ldr	r2, [pc, #332]	; (800d6a0 <Siemens_Data_Analyser+0xe64>)
 800d552:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800d554:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d558:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d55c:	69db      	ldr	r3, [r3, #28]
 800d55e:	4a4f      	ldr	r2, [pc, #316]	; (800d69c <Siemens_Data_Analyser+0xe60>)
 800d560:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800d562:	4b4d      	ldr	r3, [pc, #308]	; (800d698 <Siemens_Data_Analyser+0xe5c>)
 800d564:	2200      	movs	r2, #0
 800d566:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800d568:	4b4e      	ldr	r3, [pc, #312]	; (800d6a4 <Siemens_Data_Analyser+0xe68>)
 800d56a:	885b      	ldrh	r3, [r3, #2]
 800d56c:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800d570:	429a      	cmp	r2, r3
 800d572:	d04b      	beq.n	800d60c <Siemens_Data_Analyser+0xdd0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800d574:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d578:	2100      	movs	r1, #0
 800d57a:	484a      	ldr	r0, [pc, #296]	; (800d6a4 <Siemens_Data_Analyser+0xe68>)
 800d57c:	f018 fea4 	bl	80262c8 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800d580:	f240 2202 	movw	r2, #514	; 0x202
 800d584:	2100      	movs	r1, #0
 800d586:	4848      	ldr	r0, [pc, #288]	; (800d6a8 <Siemens_Data_Analyser+0xe6c>)
 800d588:	f018 fe9e 	bl	80262c8 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800d58c:	4a45      	ldr	r2, [pc, #276]	; (800d6a4 <Siemens_Data_Analyser+0xe68>)
 800d58e:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800d592:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d594:	4b3f      	ldr	r3, [pc, #252]	; (800d694 <Siemens_Data_Analyser+0xe58>)
 800d596:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d598:	4b42      	ldr	r3, [pc, #264]	; (800d6a4 <Siemens_Data_Analyser+0xe68>)
 800d59a:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d59c:	4b3d      	ldr	r3, [pc, #244]	; (800d694 <Siemens_Data_Analyser+0xe58>)
 800d59e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4942      	ldr	r1, [pc, #264]	; (800d6ac <Siemens_Data_Analyser+0xe70>)
 800d5a4:	4842      	ldr	r0, [pc, #264]	; (800d6b0 <Siemens_Data_Analyser+0xe74>)
 800d5a6:	f018 fe67 	bl	8026278 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d5aa:	4b3a      	ldr	r3, [pc, #232]	; (800d694 <Siemens_Data_Analyser+0xe58>)
 800d5ac:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d5ae:	4b3e      	ldr	r3, [pc, #248]	; (800d6a8 <Siemens_Data_Analyser+0xe6c>)
 800d5b0:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d5b2:	4b38      	ldr	r3, [pc, #224]	; (800d694 <Siemens_Data_Analyser+0xe58>)
 800d5b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	493c      	ldr	r1, [pc, #240]	; (800d6ac <Siemens_Data_Analyser+0xe70>)
 800d5ba:	483e      	ldr	r0, [pc, #248]	; (800d6b4 <Siemens_Data_Analyser+0xe78>)
 800d5bc:	f018 fe5c 	bl	8026278 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);

#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800d5c0:	f44f 7002 	mov.w	r0, #520	; 0x208
 800d5c4:	f003 fa54 	bl	8010a70 <TransmitCanPkt>
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d5c8:	f00b ff5c 	bl	8019484 <HAL_GetTick>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	4a34      	ldr	r2, [pc, #208]	; (800d6a0 <Siemens_Data_Analyser+0xe64>)
 800d5d0:	6113      	str	r3, [r2, #16]
 800d5d2:	e01b      	b.n	800d60c <Siemens_Data_Analyser+0xdd0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800d5d4:	4b30      	ldr	r3, [pc, #192]	; (800d698 <Siemens_Data_Analyser+0xe5c>)
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	4b2e      	ldr	r3, [pc, #184]	; (800d698 <Siemens_Data_Analyser+0xe5c>)
 800d5de:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d5e0:	4b2d      	ldr	r3, [pc, #180]	; (800d698 <Siemens_Data_Analyser+0xe5c>)
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	4b25      	ldr	r3, [pc, #148]	; (800d67c <Siemens_Data_Analyser+0xe40>)
 800d5e8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d90d      	bls.n	800d60c <Siemens_Data_Analyser+0xdd0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800d5f0:	4b29      	ldr	r3, [pc, #164]	; (800d698 <Siemens_Data_Analyser+0xe5c>)
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4830      	ldr	r0, [pc, #192]	; (800d6b8 <Siemens_Data_Analyser+0xe7c>)
 800d5f8:	f018 ff4e 	bl	8026498 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800d5fc:	4b1f      	ldr	r3, [pc, #124]	; (800d67c <Siemens_Data_Analyser+0xe40>)
 800d5fe:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d602:	b29b      	uxth	r3, r3
 800d604:	3301      	adds	r3, #1
 800d606:	b29a      	uxth	r2, r3
 800d608:	4b23      	ldr	r3, [pc, #140]	; (800d698 <Siemens_Data_Analyser+0xe5c>)
 800d60a:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800d60c:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800d610:	f107 010c 	add.w	r1, r7, #12
 800d614:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800d618:	2302      	movs	r3, #2
 800d61a:	f000 fe11 	bl	800e240 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800d61e:	4b27      	ldr	r3, [pc, #156]	; (800d6bc <Siemens_Data_Analyser+0xe80>)
 800d620:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00d      	beq.n	800d644 <Siemens_Data_Analyser+0xe08>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800d628:	4b24      	ldr	r3, [pc, #144]	; (800d6bc <Siemens_Data_Analyser+0xe80>)
 800d62a:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800d62e:	2301      	movs	r3, #1
 800d630:	4922      	ldr	r1, [pc, #136]	; (800d6bc <Siemens_Data_Analyser+0xe80>)
 800d632:	4823      	ldr	r0, [pc, #140]	; (800d6c0 <Siemens_Data_Analyser+0xe84>)
 800d634:	f000 fe04 	bl	800e240 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800d638:	f240 6202 	movw	r2, #1538	; 0x602
 800d63c:	2100      	movs	r1, #0
 800d63e:	481f      	ldr	r0, [pc, #124]	; (800d6bc <Siemens_Data_Analyser+0xe80>)
 800d640:	f018 fe42 	bl	80262c8 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800d644:	4b14      	ldr	r3, [pc, #80]	; (800d698 <Siemens_Data_Analyser+0xe5c>)
 800d646:	881a      	ldrh	r2, [r3, #0]
 800d648:	4b1e      	ldr	r3, [pc, #120]	; (800d6c4 <Siemens_Data_Analyser+0xe88>)
 800d64a:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800d64c:	4b1d      	ldr	r3, [pc, #116]	; (800d6c4 <Siemens_Data_Analyser+0xe88>)
 800d64e:	2201      	movs	r2, #1
 800d650:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800d652:	4b1c      	ldr	r3, [pc, #112]	; (800d6c4 <Siemens_Data_Analyser+0xe88>)
 800d654:	2201      	movs	r2, #1
 800d656:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 800d658:	f240 2002 	movw	r0, #514	; 0x202
 800d65c:	f003 fa08 	bl	8010a70 <TransmitCanPkt>
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800d660:	f00b ff10 	bl	8019484 <HAL_GetTick>
 800d664:	4603      	mov	r3, r0
 800d666:	4a0e      	ldr	r2, [pc, #56]	; (800d6a0 <Siemens_Data_Analyser+0xe64>)
 800d668:	6093      	str	r3, [r2, #8]

	return;
 800d66a:	e002      	b.n	800d672 <Siemens_Data_Analyser+0xe36>
		return;
 800d66c:	bf00      	nop
 800d66e:	e000      	b.n	800d672 <Siemens_Data_Analyser+0xe36>
		return;
 800d670:	bf00      	nop
}
 800d672:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	20000504 	.word	0x20000504
 800d680:	0802a300 	.word	0x0802a300
 800d684:	0802a1b8 	.word	0x0802a1b8
 800d688:	0802a1c8 	.word	0x0802a1c8
 800d68c:	0802a320 	.word	0x0802a320
 800d690:	20000505 	.word	0x20000505
 800d694:	20003f4c 	.word	0x20003f4c
 800d698:	2000540c 	.word	0x2000540c
 800d69c:	20005408 	.word	0x20005408
 800d6a0:	20004bdc 	.word	0x20004bdc
 800d6a4:	20004dfc 	.word	0x20004dfc
 800d6a8:	20004bf8 	.word	0x20004bf8
 800d6ac:	20003f72 	.word	0x20003f72
 800d6b0:	20004e00 	.word	0x20004e00
 800d6b4:	20004bfa 	.word	0x20004bfa
 800d6b8:	0802a32c 	.word	0x0802a32c
 800d6bc:	200045c4 	.word	0x200045c4
 800d6c0:	2000439c 	.word	0x2000439c
 800d6c4:	20004bd0 	.word	0x20004bd0

0800d6c8 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b089      	sub	sp, #36	; 0x24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800d6de:	897b      	ldrh	r3, [r7, #10]
 800d6e0:	00db      	lsls	r3, r3, #3
 800d6e2:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	837b      	strh	r3, [r7, #26]
 800d6e8:	e039      	b.n	800d75e <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800d6ea:	8b7b      	ldrh	r3, [r7, #26]
 800d6ec:	08db      	lsrs	r3, r3, #3
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800d6f2:	8b7b      	ldrh	r3, [r7, #26]
 800d6f4:	f003 0307 	and.w	r3, r3, #7
 800d6f8:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	2b07      	cmp	r3, #7
 800d6fe:	d02a      	beq.n	800d756 <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	4413      	add	r3, r2
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	461a      	mov	r2, r3
 800d70a:	8b7b      	ldrh	r3, [r7, #26]
 800d70c:	f003 0307 	and.w	r3, r3, #7
 800d710:	fa42 f303 	asr.w	r3, r2, r3
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d010      	beq.n	800d73e <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800d71c:	8bfb      	ldrh	r3, [r7, #30]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	4413      	add	r3, r2
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	b25a      	sxtb	r2, r3
 800d726:	7f7b      	ldrb	r3, [r7, #29]
 800d728:	2101      	movs	r1, #1
 800d72a:	fa01 f303 	lsl.w	r3, r1, r3
 800d72e:	b25b      	sxtb	r3, r3
 800d730:	4313      	orrs	r3, r2
 800d732:	b259      	sxtb	r1, r3
 800d734:	8bfb      	ldrh	r3, [r7, #30]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	4413      	add	r3, r2
 800d73a:	b2ca      	uxtb	r2, r1
 800d73c:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800d73e:	7f7b      	ldrb	r3, [r7, #29]
 800d740:	3301      	adds	r3, #1
 800d742:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800d744:	7f7b      	ldrb	r3, [r7, #29]
 800d746:	2b08      	cmp	r3, #8
 800d748:	d106      	bne.n	800d758 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800d74e:	8bfb      	ldrh	r3, [r7, #30]
 800d750:	3301      	adds	r3, #1
 800d752:	83fb      	strh	r3, [r7, #30]
 800d754:	e000      	b.n	800d758 <ExtractAppData+0x90>
			continue;
 800d756:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800d758:	8b7b      	ldrh	r3, [r7, #26]
 800d75a:	3301      	adds	r3, #1
 800d75c:	837b      	strh	r3, [r7, #26]
 800d75e:	8b7a      	ldrh	r2, [r7, #26]
 800d760:	8b3b      	ldrh	r3, [r7, #24]
 800d762:	429a      	cmp	r2, r3
 800d764:	d3c1      	bcc.n	800d6ea <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800d766:	8bfb      	ldrh	r3, [r7, #30]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3724      	adds	r7, #36	; 0x24
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800d774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d778:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800d77c:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800d77e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800d782:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800d786:	2300      	movs	r3, #0
 800d788:	6013      	str	r3, [r2, #0]
 800d78a:	1d10      	adds	r0, r2, #4
 800d78c:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800d790:	461a      	mov	r2, r3
 800d792:	2100      	movs	r1, #0
 800d794:	f018 fd98 	bl	80262c8 <memset>
	uint16_t App_data_Traverser = 0;
 800d798:	2300      	movs	r3, #0
 800d79a:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800d7bc:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	48ba      	ldr	r0, [pc, #744]	; (800daac <Form_Siemens_Reply+0x338>)
 800d7c4:	f018 fd80 	bl	80262c8 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800d7c8:	4bb9      	ldr	r3, [pc, #740]	; (800dab0 <Form_Siemens_Reply+0x33c>)
 800d7ca:	7b1b      	ldrb	r3, [r3, #12]
 800d7cc:	4ab7      	ldr	r2, [pc, #732]	; (800daac <Form_Siemens_Reply+0x338>)
 800d7ce:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800d7d0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d7d4:	b2d8      	uxtb	r0, r3
 800d7d6:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d7da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d7de:	1899      	adds	r1, r3, r2
 800d7e0:	4bb2      	ldr	r3, [pc, #712]	; (800daac <Form_Siemens_Reply+0x338>)
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	461c      	mov	r4, r3
 800d7ea:	4615      	mov	r5, r2
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	9302      	str	r3, [sp, #8]
 800d7f0:	e9cd 4500 	strd	r4, r5, [sp]
 800d7f4:	460a      	mov	r2, r1
 800d7f6:	2108      	movs	r1, #8
 800d7f8:	f001 faf2 	bl	800ede0 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d7fc:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d800:	3308      	adds	r3, #8
 800d802:	2b00      	cmp	r3, #0
 800d804:	da00      	bge.n	800d808 <Form_Siemens_Reply+0x94>
 800d806:	3307      	adds	r3, #7
 800d808:	10db      	asrs	r3, r3, #3
 800d80a:	b29a      	uxth	r2, r3
 800d80c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d810:	4413      	add	r3, r2
 800d812:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d816:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d81a:	3308      	adds	r3, #8
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	b21b      	sxth	r3, r3
 800d820:	425a      	negs	r2, r3
 800d822:	f003 0107 	and.w	r1, r3, #7
 800d826:	f002 0307 	and.w	r3, r2, #7
 800d82a:	bf58      	it	pl
 800d82c:	4259      	negpl	r1, r3
 800d82e:	b20b      	sxth	r3, r1
 800d830:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800d834:	4b9e      	ldr	r3, [pc, #632]	; (800dab0 <Form_Siemens_Reply+0x33c>)
 800d836:	691a      	ldr	r2, [r3, #16]
 800d838:	4b9c      	ldr	r3, [pc, #624]	; (800daac <Form_Siemens_Reply+0x338>)
 800d83a:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800d83c:	4b9c      	ldr	r3, [pc, #624]	; (800dab0 <Form_Siemens_Reply+0x33c>)
 800d83e:	695a      	ldr	r2, [r3, #20]
 800d840:	4b9a      	ldr	r3, [pc, #616]	; (800daac <Form_Siemens_Reply+0x338>)
 800d842:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800d844:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d848:	b2d8      	uxtb	r0, r3
 800d84a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d84e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d852:	1899      	adds	r1, r3, r2
 800d854:	4b95      	ldr	r3, [pc, #596]	; (800daac <Form_Siemens_Reply+0x338>)
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	4698      	mov	r8, r3
 800d85c:	4691      	mov	r9, r2
 800d85e:	2300      	movs	r3, #0
 800d860:	9302      	str	r3, [sp, #8]
 800d862:	e9cd 8900 	strd	r8, r9, [sp]
 800d866:	460a      	mov	r2, r1
 800d868:	2118      	movs	r1, #24
 800d86a:	f001 fab9 	bl	800ede0 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800d86e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d872:	3318      	adds	r3, #24
 800d874:	2b00      	cmp	r3, #0
 800d876:	da00      	bge.n	800d87a <Form_Siemens_Reply+0x106>
 800d878:	3307      	adds	r3, #7
 800d87a:	10db      	asrs	r3, r3, #3
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d882:	4413      	add	r3, r2
 800d884:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d888:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d88c:	3318      	adds	r3, #24
 800d88e:	b29b      	uxth	r3, r3
 800d890:	b21b      	sxth	r3, r3
 800d892:	425a      	negs	r2, r3
 800d894:	f003 0107 	and.w	r1, r3, #7
 800d898:	f002 0307 	and.w	r3, r2, #7
 800d89c:	bf58      	it	pl
 800d89e:	4259      	negpl	r1, r3
 800d8a0:	b20b      	sxth	r3, r1
 800d8a2:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800d8a6:	4b82      	ldr	r3, [pc, #520]	; (800dab0 <Form_Siemens_Reply+0x33c>)
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	4a80      	ldr	r2, [pc, #512]	; (800daac <Form_Siemens_Reply+0x338>)
 800d8ac:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800d8ae:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d8b2:	b2d8      	uxtb	r0, r3
 800d8b4:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d8b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d8bc:	1899      	adds	r1, r3, r2
 800d8be:	4b7b      	ldr	r3, [pc, #492]	; (800daac <Form_Siemens_Reply+0x338>)
 800d8c0:	7b1b      	ldrb	r3, [r3, #12]
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	469a      	mov	sl, r3
 800d8c8:	4693      	mov	fp, r2
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	9302      	str	r3, [sp, #8]
 800d8ce:	e9cd ab00 	strd	sl, fp, [sp]
 800d8d2:	460a      	mov	r2, r1
 800d8d4:	2108      	movs	r1, #8
 800d8d6:	f001 fa83 	bl	800ede0 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d8da:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d8de:	3308      	adds	r3, #8
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	da00      	bge.n	800d8e6 <Form_Siemens_Reply+0x172>
 800d8e4:	3307      	adds	r3, #7
 800d8e6:	10db      	asrs	r3, r3, #3
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d8ee:	4413      	add	r3, r2
 800d8f0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d8f4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	b21b      	sxth	r3, r3
 800d8fe:	425a      	negs	r2, r3
 800d900:	f003 0107 	and.w	r1, r3, #7
 800d904:	f002 0307 	and.w	r3, r2, #7
 800d908:	bf58      	it	pl
 800d90a:	4259      	negpl	r1, r3
 800d90c:	b20b      	sxth	r3, r1
 800d90e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800d912:	4b67      	ldr	r3, [pc, #412]	; (800dab0 <Form_Siemens_Reply+0x33c>)
 800d914:	685a      	ldr	r2, [r3, #4]
 800d916:	4b65      	ldr	r3, [pc, #404]	; (800daac <Form_Siemens_Reply+0x338>)
 800d918:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800d91a:	4b65      	ldr	r3, [pc, #404]	; (800dab0 <Form_Siemens_Reply+0x33c>)
 800d91c:	689a      	ldr	r2, [r3, #8]
 800d91e:	4b63      	ldr	r3, [pc, #396]	; (800daac <Form_Siemens_Reply+0x338>)
 800d920:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800d922:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d926:	b2d8      	uxtb	r0, r3
 800d928:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d92c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d930:	1899      	adds	r1, r3, r2
 800d932:	4b5e      	ldr	r3, [pc, #376]	; (800daac <Form_Siemens_Reply+0x338>)
 800d934:	691b      	ldr	r3, [r3, #16]
 800d936:	2200      	movs	r2, #0
 800d938:	643b      	str	r3, [r7, #64]	; 0x40
 800d93a:	647a      	str	r2, [r7, #68]	; 0x44
 800d93c:	2300      	movs	r3, #0
 800d93e:	9302      	str	r3, [sp, #8]
 800d940:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d944:	e9cd 3400 	strd	r3, r4, [sp]
 800d948:	460a      	mov	r2, r1
 800d94a:	2118      	movs	r1, #24
 800d94c:	f001 fa48 	bl	800ede0 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800d950:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d954:	3318      	adds	r3, #24
 800d956:	2b00      	cmp	r3, #0
 800d958:	da00      	bge.n	800d95c <Form_Siemens_Reply+0x1e8>
 800d95a:	3307      	adds	r3, #7
 800d95c:	10db      	asrs	r3, r3, #3
 800d95e:	b29a      	uxth	r2, r3
 800d960:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d964:	4413      	add	r3, r2
 800d966:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d96a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d96e:	3318      	adds	r3, #24
 800d970:	b29b      	uxth	r3, r3
 800d972:	b21b      	sxth	r3, r3
 800d974:	425a      	negs	r2, r3
 800d976:	f003 0107 	and.w	r1, r3, #7
 800d97a:	f002 0307 	and.w	r3, r2, #7
 800d97e:	bf58      	it	pl
 800d980:	4259      	negpl	r1, r3
 800d982:	b20b      	sxth	r3, r1
 800d984:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	//	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
	Siemens_TX_st.ProdDataVer = Siemens_RX_st.ProdDataVer; //Self Product Version
 800d988:	4b49      	ldr	r3, [pc, #292]	; (800dab0 <Form_Siemens_Reply+0x33c>)
 800d98a:	7e1b      	ldrb	r3, [r3, #24]
 800d98c:	4a47      	ldr	r2, [pc, #284]	; (800daac <Form_Siemens_Reply+0x338>)
 800d98e:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800d990:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d994:	b2d8      	uxtb	r0, r3
 800d996:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d99a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d99e:	1899      	adds	r1, r3, r2
 800d9a0:	4b42      	ldr	r3, [pc, #264]	; (800daac <Form_Siemens_Reply+0x338>)
 800d9a2:	7e1b      	ldrb	r3, [r3, #24]
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9aa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	9302      	str	r3, [sp, #8]
 800d9b0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d9b4:	e9cd 3400 	strd	r3, r4, [sp]
 800d9b8:	460a      	mov	r2, r1
 800d9ba:	2108      	movs	r1, #8
 800d9bc:	f001 fa10 	bl	800ede0 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d9c0:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	da00      	bge.n	800d9cc <Form_Siemens_Reply+0x258>
 800d9ca:	3307      	adds	r3, #7
 800d9cc:	10db      	asrs	r3, r3, #3
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d9da:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d9de:	3308      	adds	r3, #8
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	b21b      	sxth	r3, r3
 800d9e4:	425a      	negs	r2, r3
 800d9e6:	f003 0107 	and.w	r1, r3, #7
 800d9ea:	f002 0307 	and.w	r3, r2, #7
 800d9ee:	bf58      	it	pl
 800d9f0:	4259      	negpl	r1, r3
 800d9f2:	b20b      	sxth	r3, r1
 800d9f4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800d9f8:	4a2c      	ldr	r2, [pc, #176]	; (800daac <Form_Siemens_Reply+0x338>)
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800d9fe:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800da02:	b2d8      	uxtb	r0, r3
 800da04:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800da08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da0c:	1899      	adds	r1, r3, r2
 800da0e:	4b27      	ldr	r3, [pc, #156]	; (800daac <Form_Siemens_Reply+0x338>)
 800da10:	7e5b      	ldrb	r3, [r3, #25]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	2200      	movs	r2, #0
 800da16:	633b      	str	r3, [r7, #48]	; 0x30
 800da18:	637a      	str	r2, [r7, #52]	; 0x34
 800da1a:	2301      	movs	r3, #1
 800da1c:	9302      	str	r3, [sp, #8]
 800da1e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800da22:	e9cd 3400 	strd	r3, r4, [sp]
 800da26:	460a      	mov	r2, r1
 800da28:	2108      	movs	r1, #8
 800da2a:	f001 f9d9 	bl	800ede0 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800da2e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800da32:	3308      	adds	r3, #8
 800da34:	2b00      	cmp	r3, #0
 800da36:	da00      	bge.n	800da3a <Form_Siemens_Reply+0x2c6>
 800da38:	3307      	adds	r3, #7
 800da3a:	10db      	asrs	r3, r3, #3
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800da42:	4413      	add	r3, r2
 800da44:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800da48:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800da4c:	3308      	adds	r3, #8
 800da4e:	b29b      	uxth	r3, r3
 800da50:	b21b      	sxth	r3, r3
 800da52:	425a      	negs	r2, r3
 800da54:	f003 0307 	and.w	r3, r3, #7
 800da58:	f002 0207 	and.w	r2, r2, #7
 800da5c:	bf58      	it	pl
 800da5e:	4253      	negpl	r3, r2
 800da60:	b21b      	sxth	r3, r3
 800da62:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800da66:	4b12      	ldr	r3, [pc, #72]	; (800dab0 <Form_Siemens_Reply+0x33c>)
 800da68:	7edb      	ldrb	r3, [r3, #27]
 800da6a:	4a10      	ldr	r2, [pc, #64]	; (800daac <Form_Siemens_Reply+0x338>)
 800da6c:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800da6e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800da72:	b2d8      	uxtb	r0, r3
 800da74:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800da78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da7c:	1899      	adds	r1, r3, r2
 800da7e:	4b0b      	ldr	r3, [pc, #44]	; (800daac <Form_Siemens_Reply+0x338>)
 800da80:	7e9b      	ldrb	r3, [r3, #26]
 800da82:	b2db      	uxtb	r3, r3
 800da84:	2200      	movs	r2, #0
 800da86:	62bb      	str	r3, [r7, #40]	; 0x28
 800da88:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da8a:	2302      	movs	r3, #2
 800da8c:	9302      	str	r3, [sp, #8]
 800da8e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800da92:	e9cd 3400 	strd	r3, r4, [sp]
 800da96:	460a      	mov	r2, r1
 800da98:	2108      	movs	r1, #8
 800da9a:	f001 f9a1 	bl	800ede0 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800da9e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800daa2:	3308      	adds	r3, #8
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	da05      	bge.n	800dab4 <Form_Siemens_Reply+0x340>
 800daa8:	3307      	adds	r3, #7
 800daaa:	e003      	b.n	800dab4 <Form_Siemens_Reply+0x340>
 800daac:	20004174 	.word	0x20004174
 800dab0:	20003f4c 	.word	0x20003f4c
 800dab4:	10db      	asrs	r3, r3, #3
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dabc:	4413      	add	r3, r2
 800dabe:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dac2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dac6:	3308      	adds	r3, #8
 800dac8:	b29b      	uxth	r3, r3
 800daca:	b21b      	sxth	r3, r3
 800dacc:	425a      	negs	r2, r3
 800dace:	f003 0307 	and.w	r3, r3, #7
 800dad2:	f002 0207 	and.w	r2, r2, #7
 800dad6:	bf58      	it	pl
 800dad8:	4253      	negpl	r3, r2
 800dada:	b21b      	sxth	r3, r3
 800dadc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800dae0:	4bc4      	ldr	r3, [pc, #784]	; (800ddf4 <Form_Siemens_Reply+0x680>)
 800dae2:	7e9a      	ldrb	r2, [r3, #26]
 800dae4:	4bc4      	ldr	r3, [pc, #784]	; (800ddf8 <Form_Siemens_Reply+0x684>)
 800dae6:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800dae8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800daec:	b2d8      	uxtb	r0, r3
 800daee:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800daf2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800daf6:	441a      	add	r2, r3
 800daf8:	4bbf      	ldr	r3, [pc, #764]	; (800ddf8 <Form_Siemens_Reply+0x684>)
 800dafa:	7edb      	ldrb	r3, [r3, #27]
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	2100      	movs	r1, #0
 800db00:	623b      	str	r3, [r7, #32]
 800db02:	6279      	str	r1, [r7, #36]	; 0x24
 800db04:	2302      	movs	r3, #2
 800db06:	9302      	str	r3, [sp, #8]
 800db08:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800db0c:	e9cd 3400 	strd	r3, r4, [sp]
 800db10:	2108      	movs	r1, #8
 800db12:	f001 f965 	bl	800ede0 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800db16:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800db1a:	3308      	adds	r3, #8
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	da00      	bge.n	800db22 <Form_Siemens_Reply+0x3ae>
 800db20:	3307      	adds	r3, #7
 800db22:	10db      	asrs	r3, r3, #3
 800db24:	b29a      	uxth	r2, r3
 800db26:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800db2a:	4413      	add	r3, r2
 800db2c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800db30:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800db34:	3308      	adds	r3, #8
 800db36:	b29b      	uxth	r3, r3
 800db38:	b21b      	sxth	r3, r3
 800db3a:	425a      	negs	r2, r3
 800db3c:	f003 0307 	and.w	r3, r3, #7
 800db40:	f002 0207 	and.w	r2, r2, #7
 800db44:	bf58      	it	pl
 800db46:	4253      	negpl	r3, r2
 800db48:	b21b      	sxth	r3, r3
 800db4a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800db4e:	4ba9      	ldr	r3, [pc, #676]	; (800ddf4 <Form_Siemens_Reply+0x680>)
 800db50:	6a1b      	ldr	r3, [r3, #32]
 800db52:	4aa9      	ldr	r2, [pc, #676]	; (800ddf8 <Form_Siemens_Reply+0x684>)
 800db54:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800db56:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800db5a:	b2d8      	uxtb	r0, r3
 800db5c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800db60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800db64:	4413      	add	r3, r2
 800db66:	4aa4      	ldr	r2, [pc, #656]	; (800ddf8 <Form_Siemens_Reply+0x684>)
 800db68:	69d2      	ldr	r2, [r2, #28]
 800db6a:	2100      	movs	r1, #0
 800db6c:	61ba      	str	r2, [r7, #24]
 800db6e:	61f9      	str	r1, [r7, #28]
 800db70:	2202      	movs	r2, #2
 800db72:	9202      	str	r2, [sp, #8]
 800db74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800db78:	e9cd 1200 	strd	r1, r2, [sp]
 800db7c:	461a      	mov	r2, r3
 800db7e:	2120      	movs	r1, #32
 800db80:	f001 f92e 	bl	800ede0 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800db84:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800db88:	3320      	adds	r3, #32
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	da00      	bge.n	800db90 <Form_Siemens_Reply+0x41c>
 800db8e:	3307      	adds	r3, #7
 800db90:	10db      	asrs	r3, r3, #3
 800db92:	b29a      	uxth	r2, r3
 800db94:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800db98:	4413      	add	r3, r2
 800db9a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800db9e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dba2:	3320      	adds	r3, #32
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	b21b      	sxth	r3, r3
 800dba8:	425a      	negs	r2, r3
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	f002 0207 	and.w	r2, r2, #7
 800dbb2:	bf58      	it	pl
 800dbb4:	4253      	negpl	r3, r2
 800dbb6:	b21b      	sxth	r3, r3
 800dbb8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800dbbc:	4b8f      	ldr	r3, [pc, #572]	; (800ddfc <Form_Siemens_Reply+0x688>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a8d      	ldr	r2, [pc, #564]	; (800ddf8 <Form_Siemens_Reply+0x684>)
 800dbc2:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800dbc4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dbc8:	b2d8      	uxtb	r0, r3
 800dbca:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dbce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dbd2:	4413      	add	r3, r2
 800dbd4:	4a88      	ldr	r2, [pc, #544]	; (800ddf8 <Form_Siemens_Reply+0x684>)
 800dbd6:	6a12      	ldr	r2, [r2, #32]
 800dbd8:	2100      	movs	r1, #0
 800dbda:	613a      	str	r2, [r7, #16]
 800dbdc:	6179      	str	r1, [r7, #20]
 800dbde:	2202      	movs	r2, #2
 800dbe0:	9202      	str	r2, [sp, #8]
 800dbe2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dbe6:	e9cd 1200 	strd	r1, r2, [sp]
 800dbea:	461a      	mov	r2, r3
 800dbec:	2120      	movs	r1, #32
 800dbee:	f001 f8f7 	bl	800ede0 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800dbf2:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dbf6:	3320      	adds	r3, #32
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	da00      	bge.n	800dbfe <Form_Siemens_Reply+0x48a>
 800dbfc:	3307      	adds	r3, #7
 800dbfe:	10db      	asrs	r3, r3, #3
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dc06:	4413      	add	r3, r2
 800dc08:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dc0c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dc10:	3320      	adds	r3, #32
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	b21b      	sxth	r3, r3
 800dc16:	425a      	negs	r2, r3
 800dc18:	f003 0307 	and.w	r3, r3, #7
 800dc1c:	f002 0207 	and.w	r2, r2, #7
 800dc20:	bf58      	it	pl
 800dc22:	4253      	negpl	r3, r2
 800dc24:	b21b      	sxth	r3, r3
 800dc26:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800dc2a:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800dc2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc32:	2201      	movs	r2, #1
 800dc34:	4618      	mov	r0, r3
 800dc36:	f001 fa39 	bl	800f0ac <Data_Compliment>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800dc40:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dc44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc48:	4611      	mov	r1, r2
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 ff32 	bl	800eab4 <Siemens_CRC>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800dc56:	4b6a      	ldr	r3, [pc, #424]	; (800de00 <Form_Siemens_Reply+0x68c>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	09db      	lsrs	r3, r3, #7
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d02c      	beq.n	800dcbe <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800dc64:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800dc68:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800dc6c:	4865      	ldr	r0, [pc, #404]	; (800de04 <Form_Siemens_Reply+0x690>)
 800dc6e:	f018 fcaf 	bl	80265d0 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800dc72:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800dc76:	4619      	mov	r1, r3
 800dc78:	4863      	ldr	r0, [pc, #396]	; (800de08 <Form_Siemens_Reply+0x694>)
 800dc7a:	f018 fc0d 	bl	8026498 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800dc7e:	4863      	ldr	r0, [pc, #396]	; (800de0c <Form_Siemens_Reply+0x698>)
 800dc80:	f010 f8b2 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800dc84:	4601      	mov	r1, r0
 800dc86:	4b62      	ldr	r3, [pc, #392]	; (800de10 <Form_Siemens_Reply+0x69c>)
 800dc88:	fba3 2301 	umull	r2, r3, r3, r1
 800dc8c:	0bda      	lsrs	r2, r3, #15
 800dc8e:	4613      	mov	r3, r2
 800dc90:	041b      	lsls	r3, r3, #16
 800dc92:	1a9b      	subs	r3, r3, r2
 800dc94:	1aca      	subs	r2, r1, r3
 800dc96:	4613      	mov	r3, r2
 800dc98:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800dc9c:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800dca0:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d104      	bne.n	800dcb2 <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800dca8:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800dcac:	3304      	adds	r3, #4
 800dcae:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800dcb2:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	4856      	ldr	r0, [pc, #344]	; (800de14 <Form_Siemens_Reply+0x6a0>)
 800dcba:	f018 fbed 	bl	8026498 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800dcbe:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dcc2:	b2d8      	uxtb	r0, r3
 800dcc4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dcc8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dccc:	4413      	add	r3, r2
 800dcce:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	60ba      	str	r2, [r7, #8]
 800dcd6:	60f9      	str	r1, [r7, #12]
 800dcd8:	2202      	movs	r2, #2
 800dcda:	9202      	str	r2, [sp, #8]
 800dcdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dce0:	e9cd 1200 	strd	r1, r2, [sp]
 800dce4:	461a      	mov	r2, r3
 800dce6:	2110      	movs	r1, #16
 800dce8:	f001 f87a 	bl	800ede0 <Insert_cal_parity>
	BITSTUFFINC(16);
 800dcec:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dcf0:	3310      	adds	r3, #16
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	da00      	bge.n	800dcf8 <Form_Siemens_Reply+0x584>
 800dcf6:	3307      	adds	r3, #7
 800dcf8:	10db      	asrs	r3, r3, #3
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd00:	4413      	add	r3, r2
 800dd02:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dd06:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd0a:	3310      	adds	r3, #16
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	b21b      	sxth	r3, r3
 800dd10:	425a      	negs	r2, r3
 800dd12:	f003 0307 	and.w	r3, r3, #7
 800dd16:	f002 0207 	and.w	r2, r2, #7
 800dd1a:	bf58      	it	pl
 800dd1c:	4253      	negpl	r3, r2
 800dd1e:	b21b      	sxth	r3, r3
 800dd20:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800dd24:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dd2c:	441a      	add	r2, r3
 800dd2e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd32:	3b02      	subs	r3, #2
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	4619      	mov	r1, r3
 800dd38:	4610      	mov	r0, r2
 800dd3a:	f000 febb 	bl	800eab4 <Siemens_CRC>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800dd44:	4b2e      	ldr	r3, [pc, #184]	; (800de00 <Form_Siemens_Reply+0x68c>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	0a5b      	lsrs	r3, r3, #9
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d02c      	beq.n	800ddac <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800dd52:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800dd56:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800dd5a:	482a      	ldr	r0, [pc, #168]	; (800de04 <Form_Siemens_Reply+0x690>)
 800dd5c:	f018 fc38 	bl	80265d0 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800dd60:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800dd64:	4619      	mov	r1, r3
 800dd66:	482c      	ldr	r0, [pc, #176]	; (800de18 <Form_Siemens_Reply+0x6a4>)
 800dd68:	f018 fb96 	bl	8026498 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800dd6c:	4827      	ldr	r0, [pc, #156]	; (800de0c <Form_Siemens_Reply+0x698>)
 800dd6e:	f010 f83b 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 800dd72:	4601      	mov	r1, r0
 800dd74:	4b26      	ldr	r3, [pc, #152]	; (800de10 <Form_Siemens_Reply+0x69c>)
 800dd76:	fba3 2301 	umull	r2, r3, r3, r1
 800dd7a:	0bda      	lsrs	r2, r3, #15
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	041b      	lsls	r3, r3, #16
 800dd80:	1a9b      	subs	r3, r3, r2
 800dd82:	1aca      	subs	r2, r1, r3
 800dd84:	4613      	mov	r3, r2
 800dd86:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800dd8a:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800dd8e:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d104      	bne.n	800dda0 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800dd96:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800dda0:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800dda4:	4619      	mov	r1, r3
 800dda6:	481d      	ldr	r0, [pc, #116]	; (800de1c <Form_Siemens_Reply+0x6a8>)
 800dda8:	f018 fb76 	bl	8026498 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800ddac:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ddb0:	005b      	lsls	r3, r3, #1
 800ddb2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800ddb6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ddba:	b2d8      	uxtb	r0, r3
 800ddbc:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800ddc0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800ddca:	2100      	movs	r1, #0
 800ddcc:	603a      	str	r2, [r7, #0]
 800ddce:	6079      	str	r1, [r7, #4]
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	9202      	str	r2, [sp, #8]
 800ddd4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ddd8:	e9cd 1200 	strd	r1, r2, [sp]
 800dddc:	461a      	mov	r2, r3
 800ddde:	2110      	movs	r1, #16
 800dde0:	f000 fffe 	bl	800ede0 <Insert_cal_parity>
	BITSTUFFINC(16);
 800dde4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dde8:	3310      	adds	r3, #16
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	da18      	bge.n	800de20 <Form_Siemens_Reply+0x6ac>
 800ddee:	3307      	adds	r3, #7
 800ddf0:	e016      	b.n	800de20 <Form_Siemens_Reply+0x6ac>
 800ddf2:	bf00      	nop
 800ddf4:	20003f4c 	.word	0x20003f4c
 800ddf8:	20004174 	.word	0x20004174
 800ddfc:	20005410 	.word	0x20005410
 800de00:	20004bc8 	.word	0x20004bc8
 800de04:	0802a0a0 	.word	0x0802a0a0
 800de08:	0802a350 	.word	0x0802a350
 800de0c:	2000bc44 	.word	0x2000bc44
 800de10:	80008001 	.word	0x80008001
 800de14:	0802a364 	.word	0x0802a364
 800de18:	0802a378 	.word	0x0802a378
 800de1c:	0802a394 	.word	0x0802a394
 800de20:	10db      	asrs	r3, r3, #3
 800de22:	b29a      	uxth	r2, r3
 800de24:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800de28:	4413      	add	r3, r2
 800de2a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800de2e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de32:	3310      	adds	r3, #16
 800de34:	b29b      	uxth	r3, r3
 800de36:	b21b      	sxth	r3, r3
 800de38:	425a      	negs	r2, r3
 800de3a:	f003 0307 	and.w	r3, r3, #7
 800de3e:	f002 0207 	and.w	r2, r2, #7
 800de42:	bf58      	it	pl
 800de44:	4253      	negpl	r3, r2
 800de46:	b21b      	sxth	r3, r3
 800de48:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800de4c:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800de50:	3302      	adds	r3, #2
 800de52:	461a      	mov	r2, r3
 800de54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de58:	4619      	mov	r1, r3
 800de5a:	481e      	ldr	r0, [pc, #120]	; (800ded4 <Form_Siemens_Reply+0x760>)
 800de5c:	f018 fa0c 	bl	8026278 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800de60:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800de64:	3302      	adds	r3, #2
 800de66:	b29a      	uxth	r2, r3
 800de68:	4b1a      	ldr	r3, [pc, #104]	; (800ded4 <Form_Siemens_Reply+0x760>)
 800de6a:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800de6e:	f001 f989 	bl	800f184 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800de72:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <Form_Siemens_Reply+0x764>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	099b      	lsrs	r3, r3, #6
 800de78:	f003 0301 	and.w	r3, r3, #1
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d003      	beq.n	800de88 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800de80:	4816      	ldr	r0, [pc, #88]	; (800dedc <Form_Siemens_Reply+0x768>)
 800de82:	f018 fba5 	bl	80265d0 <puts>
 800de86:	e00f      	b.n	800dea8 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800de88:	4b15      	ldr	r3, [pc, #84]	; (800dee0 <Form_Siemens_Reply+0x76c>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d10b      	bne.n	800dea8 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800de90:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800de94:	b2db      	uxtb	r3, r3
 800de96:	3302      	adds	r3, #2
 800de98:	b2d9      	uxtb	r1, r3
 800de9a:	4a12      	ldr	r2, [pc, #72]	; (800dee4 <Form_Siemens_Reply+0x770>)
 800de9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dea0:	6812      	ldr	r2, [r2, #0]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f002 fbd8 	bl	8010658 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800dea8:	f44f 720a 	mov.w	r2, #552	; 0x228
 800deac:	2100      	movs	r1, #0
 800deae:	480e      	ldr	r0, [pc, #56]	; (800dee8 <Form_Siemens_Reply+0x774>)
 800deb0:	f018 fa0a 	bl	80262c8 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800deb4:	4a0c      	ldr	r2, [pc, #48]	; (800dee8 <Form_Siemens_Reply+0x774>)
 800deb6:	4b0d      	ldr	r3, [pc, #52]	; (800deec <Form_Siemens_Reply+0x778>)
 800deb8:	4610      	mov	r0, r2
 800deba:	4619      	mov	r1, r3
 800debc:	f44f 730a 	mov.w	r3, #552	; 0x228
 800dec0:	461a      	mov	r2, r3
 800dec2:	f018 f9d9 	bl	8026278 <memcpy>
	UNUSED(App_data_Traverser);
}
 800dec6:	bf00      	nop
 800dec8:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800decc:	46bd      	mov	sp, r7
 800dece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ded2:	bf00      	nop
 800ded4:	200045c4 	.word	0x200045c4
 800ded8:	20004bc8 	.word	0x20004bc8
 800dedc:	0802a3b4 	.word	0x0802a3b4
 800dee0:	200062f1 	.word	0x200062f1
 800dee4:	20006958 	.word	0x20006958
 800dee8:	2000439c 	.word	0x2000439c
 800deec:	20004174 	.word	0x20004174

0800def0 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800def4:	4b4d      	ldr	r3, [pc, #308]	; (800e02c <ProcessSendingSignals2MIE+0x13c>)
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	4618      	mov	r0, r3
 800defa:	f002 f83d 	bl	800ff78 <HAL_Elaps_Ticks>
 800defe:	4602      	mov	r2, r0
 800df00:	4b4b      	ldr	r3, [pc, #300]	; (800e030 <ProcessSendingSignals2MIE+0x140>)
 800df02:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800df06:	429a      	cmp	r2, r3
 800df08:	f240 808d 	bls.w	800e026 <ProcessSendingSignals2MIE+0x136>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800df0c:	4b47      	ldr	r3, [pc, #284]	; (800e02c <ProcessSendingSignals2MIE+0x13c>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
		if(
 800df10:	2b00      	cmp	r3, #0
 800df12:	d113      	bne.n	800df3c <ProcessSendingSignals2MIE+0x4c>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800df14:	4b45      	ldr	r3, [pc, #276]	; (800e02c <ProcessSendingSignals2MIE+0x13c>)
 800df16:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d10f      	bne.n	800df3c <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800df1c:	4b45      	ldr	r3, [pc, #276]	; (800e034 <ProcessSendingSignals2MIE+0x144>)
 800df1e:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800df20:	2b01      	cmp	r3, #1
 800df22:	d10b      	bne.n	800df3c <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800df24:	4b44      	ldr	r3, [pc, #272]	; (800e038 <ProcessSendingSignals2MIE+0x148>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d107      	bne.n	800df3c <ProcessSendingSignals2MIE+0x4c>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800df2c:	4b43      	ldr	r3, [pc, #268]	; (800e03c <ProcessSendingSignals2MIE+0x14c>)
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	461a      	mov	r2, r3
 800df32:	4943      	ldr	r1, [pc, #268]	; (800e040 <ProcessSendingSignals2MIE+0x150>)
 800df34:	4843      	ldr	r0, [pc, #268]	; (800e044 <ProcessSendingSignals2MIE+0x154>)
 800df36:	f018 f99f 	bl	8026278 <memcpy>
 800df3a:	e02d      	b.n	800df98 <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800df3c:	4b3d      	ldr	r3, [pc, #244]	; (800e034 <ProcessSendingSignals2MIE+0x144>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d10f      	bne.n	800df64 <ProcessSendingSignals2MIE+0x74>
 800df44:	4b3c      	ldr	r3, [pc, #240]	; (800e038 <ProcessSendingSignals2MIE+0x148>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10b      	bne.n	800df64 <ProcessSendingSignals2MIE+0x74>
 800df4c:	4b37      	ldr	r3, [pc, #220]	; (800e02c <ProcessSendingSignals2MIE+0x13c>)
 800df4e:	785b      	ldrb	r3, [r3, #1]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d107      	bne.n	800df64 <ProcessSendingSignals2MIE+0x74>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800df54:	4b3c      	ldr	r3, [pc, #240]	; (800e048 <ProcessSendingSignals2MIE+0x158>)
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	461a      	mov	r2, r3
 800df5a:	493c      	ldr	r1, [pc, #240]	; (800e04c <ProcessSendingSignals2MIE+0x15c>)
 800df5c:	4839      	ldr	r0, [pc, #228]	; (800e044 <ProcessSendingSignals2MIE+0x154>)
 800df5e:	f018 f98b 	bl	8026278 <memcpy>
 800df62:	e019      	b.n	800df98 <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800df64:	4b34      	ldr	r3, [pc, #208]	; (800e038 <ProcessSendingSignals2MIE+0x148>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d10f      	bne.n	800df8c <ProcessSendingSignals2MIE+0x9c>
 800df6c:	4b31      	ldr	r3, [pc, #196]	; (800e034 <ProcessSendingSignals2MIE+0x144>)
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10b      	bne.n	800df8c <ProcessSendingSignals2MIE+0x9c>
 800df74:	4b2d      	ldr	r3, [pc, #180]	; (800e02c <ProcessSendingSignals2MIE+0x13c>)
 800df76:	785b      	ldrb	r3, [r3, #1]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d107      	bne.n	800df8c <ProcessSendingSignals2MIE+0x9c>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800df7c:	4b2f      	ldr	r3, [pc, #188]	; (800e03c <ProcessSendingSignals2MIE+0x14c>)
 800df7e:	881b      	ldrh	r3, [r3, #0]
 800df80:	461a      	mov	r2, r3
 800df82:	492f      	ldr	r1, [pc, #188]	; (800e040 <ProcessSendingSignals2MIE+0x150>)
 800df84:	482f      	ldr	r0, [pc, #188]	; (800e044 <ProcessSendingSignals2MIE+0x154>)
 800df86:	f018 f977 	bl	8026278 <memcpy>
 800df8a:	e005      	b.n	800df98 <ProcessSendingSignals2MIE+0xa8>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800df8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df90:	2100      	movs	r1, #0
 800df92:	482c      	ldr	r0, [pc, #176]	; (800e044 <ProcessSendingSignals2MIE+0x154>)
 800df94:	f018 f998 	bl	80262c8 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800df98:	4b27      	ldr	r3, [pc, #156]	; (800e038 <ProcessSendingSignals2MIE+0x148>)
 800df9a:	885b      	ldrh	r3, [r3, #2]
 800df9c:	461a      	mov	r2, r3
 800df9e:	4b24      	ldr	r3, [pc, #144]	; (800e030 <ProcessSendingSignals2MIE+0x140>)
 800dfa0:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d30d      	bcc.n	800dfc4 <ProcessSendingSignals2MIE+0xd4>
 800dfa8:	4b22      	ldr	r3, [pc, #136]	; (800e034 <ProcessSendingSignals2MIE+0x144>)
 800dfaa:	885b      	ldrh	r3, [r3, #2]
 800dfac:	461a      	mov	r2, r3
 800dfae:	4b20      	ldr	r3, [pc, #128]	; (800e030 <ProcessSendingSignals2MIE+0x140>)
 800dfb0:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d305      	bcc.n	800dfc4 <ProcessSendingSignals2MIE+0xd4>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800dfb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	4821      	ldr	r0, [pc, #132]	; (800e044 <ProcessSendingSignals2MIE+0x154>)
 800dfc0:	f018 f982 	bl	80262c8 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800dfc4:	4b1a      	ldr	r3, [pc, #104]	; (800e030 <ProcessSendingSignals2MIE+0x140>)
 800dfc6:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800dfca:	f003 0307 	and.w	r3, r3, #7
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	4b1f      	ldr	r3, [pc, #124]	; (800e050 <ProcessSendingSignals2MIE+0x160>)
 800dfd2:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800dfd4:	4b1e      	ldr	r3, [pc, #120]	; (800e050 <ProcessSendingSignals2MIE+0x160>)
 800dfd6:	881b      	ldrh	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d009      	beq.n	800dff0 <ProcessSendingSignals2MIE+0x100>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800dfdc:	4b14      	ldr	r3, [pc, #80]	; (800e030 <ProcessSendingSignals2MIE+0x140>)
 800dfde:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800dfe2:	08db      	lsrs	r3, r3, #3
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	4b19      	ldr	r3, [pc, #100]	; (800e050 <ProcessSendingSignals2MIE+0x160>)
 800dfec:	801a      	strh	r2, [r3, #0]
 800dfee:	e006      	b.n	800dffe <ProcessSendingSignals2MIE+0x10e>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800dff0:	4b0f      	ldr	r3, [pc, #60]	; (800e030 <ProcessSendingSignals2MIE+0x140>)
 800dff2:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800dff6:	08db      	lsrs	r3, r3, #3
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	4b15      	ldr	r3, [pc, #84]	; (800e050 <ProcessSendingSignals2MIE+0x160>)
 800dffc:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800dffe:	4915      	ldr	r1, [pc, #84]	; (800e054 <ProcessSendingSignals2MIE+0x164>)
 800e000:	4815      	ldr	r0, [pc, #84]	; (800e058 <ProcessSendingSignals2MIE+0x168>)
 800e002:	f7f2 f91d 	bl	8000240 <strcmp>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d007      	beq.n	800e01c <ProcessSendingSignals2MIE+0x12c>
 800e00c:	4b07      	ldr	r3, [pc, #28]	; (800e02c <ProcessSendingSignals2MIE+0x13c>)
 800e00e:	785b      	ldrb	r3, [r3, #1]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d103      	bne.n	800e01c <ProcessSendingSignals2MIE+0x12c>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800e014:	f240 1019 	movw	r0, #281	; 0x119
 800e018:	f002 fd2a 	bl	8010a70 <TransmitCanPkt>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800e01c:	f00b fa32 	bl	8019484 <HAL_GetTick>
 800e020:	4603      	mov	r3, r0
 800e022:	4a02      	ldr	r2, [pc, #8]	; (800e02c <ProcessSendingSignals2MIE+0x13c>)
 800e024:	6053      	str	r3, [r2, #4]
	}
}
 800e026:	bf00      	nop
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20004bdc 	.word	0x20004bdc
 800e030:	20000504 	.word	0x20000504
 800e034:	20004bd4 	.word	0x20004bd4
 800e038:	20004bd0 	.word	0x20004bd0
 800e03c:	20004dfc 	.word	0x20004dfc
 800e040:	20004e00 	.word	0x20004e00
 800e044:	20004bfa 	.word	0x20004bfa
 800e048:	20005000 	.word	0x20005000
 800e04c:	20005004 	.word	0x20005004
 800e050:	20004bf8 	.word	0x20004bf8
 800e054:	0802a320 	.word	0x0802a320
 800e058:	20000505 	.word	0x20000505

0800e05c <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800e060:	4b0c      	ldr	r3, [pc, #48]	; (800e094 <ProcessSelfSharing+0x38>)
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	4618      	mov	r0, r3
 800e066:	f001 ff87 	bl	800ff78 <HAL_Elaps_Ticks>
 800e06a:	4602      	mov	r2, r0
 800e06c:	4b0a      	ldr	r3, [pc, #40]	; (800e098 <ProcessSelfSharing+0x3c>)
 800e06e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800e072:	429a      	cmp	r2, r3
 800e074:	d90b      	bls.n	800e08e <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800e076:	4b09      	ldr	r3, [pc, #36]	; (800e09c <ProcessSelfSharing+0x40>)
 800e078:	2200      	movs	r2, #0
 800e07a:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800e07c:	f240 2002 	movw	r0, #514	; 0x202
 800e080:	f002 fcf6 	bl	8010a70 <TransmitCanPkt>
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800e084:	f00b f9fe 	bl	8019484 <HAL_GetTick>
 800e088:	4603      	mov	r3, r0
 800e08a:	4a02      	ldr	r2, [pc, #8]	; (800e094 <ProcessSelfSharing+0x38>)
 800e08c:	6093      	str	r3, [r2, #8]
	}
}
 800e08e:	bf00      	nop
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	20004bdc 	.word	0x20004bdc
 800e098:	20000504 	.word	0x20000504
 800e09c:	20004bd0 	.word	0x20004bd0

0800e0a0 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800e0a4:	4b1a      	ldr	r3, [pc, #104]	; (800e110 <ProcessDetectNoValidDataReceive+0x70>)
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d014      	beq.n	800e0d6 <ProcessDetectNoValidDataReceive+0x36>
 800e0ac:	4b18      	ldr	r3, [pc, #96]	; (800e110 <ProcessDetectNoValidDataReceive+0x70>)
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f001 ff61 	bl	800ff78 <HAL_Elaps_Ticks>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	4b16      	ldr	r3, [pc, #88]	; (800e114 <ProcessDetectNoValidDataReceive+0x74>)
 800e0ba:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d909      	bls.n	800e0d6 <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e0c2:	4b15      	ldr	r3, [pc, #84]	; (800e118 <ProcessDetectNoValidDataReceive+0x78>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d005      	beq.n	800e0d6 <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800e0ca:	4814      	ldr	r0, [pc, #80]	; (800e11c <ProcessDetectNoValidDataReceive+0x7c>)
 800e0cc:	f018 fa80 	bl	80265d0 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e0d0:	4b11      	ldr	r3, [pc, #68]	; (800e118 <ProcessDetectNoValidDataReceive+0x78>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800e0d6:	4b10      	ldr	r3, [pc, #64]	; (800e118 <ProcessDetectNoValidDataReceive+0x78>)
 800e0d8:	885b      	ldrh	r3, [r3, #2]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <ProcessDetectNoValidDataReceive+0x74>)
 800e0de:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d911      	bls.n	800e10a <ProcessDetectNoValidDataReceive+0x6a>
 800e0e6:	4b0e      	ldr	r3, [pc, #56]	; (800e120 <ProcessDetectNoValidDataReceive+0x80>)
 800e0e8:	885b      	ldrh	r3, [r3, #2]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	4b09      	ldr	r3, [pc, #36]	; (800e114 <ProcessDetectNoValidDataReceive+0x74>)
 800e0ee:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d909      	bls.n	800e10a <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e0f6:	4b08      	ldr	r3, [pc, #32]	; (800e118 <ProcessDetectNoValidDataReceive+0x78>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d005      	beq.n	800e10a <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800e0fe:	4809      	ldr	r0, [pc, #36]	; (800e124 <ProcessDetectNoValidDataReceive+0x84>)
 800e100:	f018 fa66 	bl	80265d0 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e104:	4b04      	ldr	r3, [pc, #16]	; (800e118 <ProcessDetectNoValidDataReceive+0x78>)
 800e106:	2200      	movs	r2, #0
 800e108:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800e10a:	bf00      	nop
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	20004bdc 	.word	0x20004bdc
 800e114:	20000504 	.word	0x20000504
 800e118:	20004bd0 	.word	0x20004bd0
 800e11c:	0802a3dc 	.word	0x0802a3dc
 800e120:	20004bd4 	.word	0x20004bd4
 800e124:	0802a3fc 	.word	0x0802a3fc

0800e128 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800e12c:	4b09      	ldr	r3, [pc, #36]	; (800e154 <SendRelays2Other+0x2c>)
 800e12e:	691b      	ldr	r3, [r3, #16]
 800e130:	4618      	mov	r0, r3
 800e132:	f001 ff21 	bl	800ff78 <HAL_Elaps_Ticks>
 800e136:	4603      	mov	r3, r0
 800e138:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e13c:	d908      	bls.n	800e150 <SendRelays2Other+0x28>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800e13e:	f44f 7002 	mov.w	r0, #520	; 0x208
 800e142:	f002 fc95 	bl	8010a70 <TransmitCanPkt>
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800e146:	f00b f99d 	bl	8019484 <HAL_GetTick>
 800e14a:	4603      	mov	r3, r0
 800e14c:	4a01      	ldr	r2, [pc, #4]	; (800e154 <SendRelays2Other+0x2c>)
 800e14e:	6113      	str	r3, [r2, #16]

	}
}
 800e150:	bf00      	nop
 800e152:	bd80      	pop	{r7, pc}
 800e154:	20004bdc 	.word	0x20004bdc

0800e158 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800e15c:	4b16      	ldr	r3, [pc, #88]	; (800e1b8 <CheckRelayMisMatch+0x60>)
 800e15e:	695b      	ldr	r3, [r3, #20]
 800e160:	4618      	mov	r0, r3
 800e162:	f001 ff09 	bl	800ff78 <HAL_Elaps_Ticks>
 800e166:	4603      	mov	r3, r0
 800e168:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e16c:	d922      	bls.n	800e1b4 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e16e:	4b13      	ldr	r3, [pc, #76]	; (800e1bc <CheckRelayMisMatch+0x64>)
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10c      	bne.n	800e190 <CheckRelayMisMatch+0x38>
 800e176:	4b12      	ldr	r3, [pc, #72]	; (800e1c0 <CheckRelayMisMatch+0x68>)
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d108      	bne.n	800e190 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800e17e:	4a11      	ldr	r2, [pc, #68]	; (800e1c4 <CheckRelayMisMatch+0x6c>)
 800e180:	4b11      	ldr	r3, [pc, #68]	; (800e1c8 <CheckRelayMisMatch+0x70>)
 800e182:	4610      	mov	r0, r2
 800e184:	4619      	mov	r1, r3
 800e186:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e18a:	461a      	mov	r2, r3
 800e18c:	f018 f874 	bl	8026278 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800e190:	4b0d      	ldr	r3, [pc, #52]	; (800e1c8 <CheckRelayMisMatch+0x70>)
 800e192:	885a      	ldrh	r2, [r3, #2]
 800e194:	4b0b      	ldr	r3, [pc, #44]	; (800e1c4 <CheckRelayMisMatch+0x6c>)
 800e196:	885b      	ldrh	r3, [r3, #2]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d003      	beq.n	800e1a4 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800e19c:	4b06      	ldr	r3, [pc, #24]	; (800e1b8 <CheckRelayMisMatch+0x60>)
 800e19e:	2201      	movs	r2, #1
 800e1a0:	701a      	strb	r2, [r3, #0]
 800e1a2:	e002      	b.n	800e1aa <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = RESET;
 800e1a4:	4b04      	ldr	r3, [pc, #16]	; (800e1b8 <CheckRelayMisMatch+0x60>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800e1aa:	f00b f96b 	bl	8019484 <HAL_GetTick>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	4a01      	ldr	r2, [pc, #4]	; (800e1b8 <CheckRelayMisMatch+0x60>)
 800e1b2:	6153      	str	r3, [r2, #20]
	}
}
 800e1b4:	bf00      	nop
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	20004bdc 	.word	0x20004bdc
 800e1bc:	20004bd0 	.word	0x20004bd0
 800e1c0:	20004bd4 	.word	0x20004bd4
 800e1c4:	20004dfc 	.word	0x20004dfc
 800e1c8:	20005000 	.word	0x20005000

0800e1cc <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800e1d0:	4b16      	ldr	r3, [pc, #88]	; (800e22c <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e1d2:	785b      	ldrb	r3, [r3, #1]
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d101      	bne.n	800e1dc <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800e1d8:	f007 fed6 	bl	8015f88 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800e1dc:	4b13      	ldr	r3, [pc, #76]	; (800e22c <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e1de:	699b      	ldr	r3, [r3, #24]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f001 fec9 	bl	800ff78 <HAL_Elaps_Ticks>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	4b11      	ldr	r3, [pc, #68]	; (800e230 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800e1ea:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d31a      	bcc.n	800e228 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800e1f2:	4b0e      	ldr	r3, [pc, #56]	; (800e22c <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e1f4:	699a      	ldr	r2, [r3, #24]
 800e1f6:	4b0f      	ldr	r3, [pc, #60]	; (800e234 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d014      	beq.n	800e228 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800e1fe:	4b0b      	ldr	r3, [pc, #44]	; (800e22c <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e200:	2200      	movs	r2, #0
 800e202:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800e204:	4b09      	ldr	r3, [pc, #36]	; (800e22c <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e206:	699b      	ldr	r3, [r3, #24]
 800e208:	4a0a      	ldr	r2, [pc, #40]	; (800e234 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e20a:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800e20c:	4b07      	ldr	r3, [pc, #28]	; (800e22c <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e20e:	699b      	ldr	r3, [r3, #24]
 800e210:	4618      	mov	r0, r3
 800e212:	f001 feb1 	bl	800ff78 <HAL_Elaps_Ticks>
 800e216:	4603      	mov	r3, r0
 800e218:	4a07      	ldr	r2, [pc, #28]	; (800e238 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800e21a:	fba2 2303 	umull	r2, r3, r2, r3
 800e21e:	099b      	lsrs	r3, r3, #6
 800e220:	4619      	mov	r1, r3
 800e222:	4806      	ldr	r0, [pc, #24]	; (800e23c <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800e224:	f018 f938 	bl	8026498 <iprintf>
		}
	}
}
 800e228:	bf00      	nop
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	20004bdc 	.word	0x20004bdc
 800e230:	20000504 	.word	0x20000504
 800e234:	200062f4 	.word	0x200062f4
 800e238:	10624dd3 	.word	0x10624dd3
 800e23c:	0802a420 	.word	0x0802a420

0800e240 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	4611      	mov	r1, r2
 800e24c:	461a      	mov	r2, r3
 800e24e:	460b      	mov	r3, r1
 800e250:	80fb      	strh	r3, [r7, #6]
 800e252:	4613      	mov	r3, r2
 800e254:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800e256:	484d      	ldr	r0, [pc, #308]	; (800e38c <Print_Siemens_MSG+0x14c>)
 800e258:	f018 f91e 	bl	8026498 <iprintf>
	if(TX_RX == TX)
 800e25c:	797b      	ldrb	r3, [r7, #5]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d103      	bne.n	800e26a <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800e262:	484b      	ldr	r0, [pc, #300]	; (800e390 <Print_Siemens_MSG+0x150>)
 800e264:	f018 f918 	bl	8026498 <iprintf>
 800e268:	e005      	b.n	800e276 <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800e26a:	797b      	ldrb	r3, [r7, #5]
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d102      	bne.n	800e276 <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800e270:	4848      	ldr	r0, [pc, #288]	; (800e394 <Print_Siemens_MSG+0x154>)
 800e272:	f018 f911 	bl	8026498 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	4619      	mov	r1, r3
 800e27c:	4846      	ldr	r0, [pc, #280]	; (800e398 <Print_Siemens_MSG+0x158>)
 800e27e:	f018 f90b 	bl	8026498 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	4619      	mov	r1, r3
 800e288:	4844      	ldr	r0, [pc, #272]	; (800e39c <Print_Siemens_MSG+0x15c>)
 800e28a:	f018 f905 	bl	8026498 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	7b1b      	ldrb	r3, [r3, #12]
 800e292:	4619      	mov	r1, r3
 800e294:	4842      	ldr	r0, [pc, #264]	; (800e3a0 <Print_Siemens_MSG+0x160>)
 800e296:	f018 f8ff 	bl	8026498 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	4619      	mov	r1, r3
 800e2a0:	4840      	ldr	r0, [pc, #256]	; (800e3a4 <Print_Siemens_MSG+0x164>)
 800e2a2:	f018 f8f9 	bl	8026498 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	7e1b      	ldrb	r3, [r3, #24]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	483e      	ldr	r0, [pc, #248]	; (800e3a8 <Print_Siemens_MSG+0x168>)
 800e2ae:	f018 f8f3 	bl	8026498 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	7e5b      	ldrb	r3, [r3, #25]
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	483c      	ldr	r0, [pc, #240]	; (800e3ac <Print_Siemens_MSG+0x16c>)
 800e2ba:	f018 f8ed 	bl	8026498 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	7e9b      	ldrb	r3, [r3, #26]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	483a      	ldr	r0, [pc, #232]	; (800e3b0 <Print_Siemens_MSG+0x170>)
 800e2c6:	f018 f8e7 	bl	8026498 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	7edb      	ldrb	r3, [r3, #27]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	4838      	ldr	r0, [pc, #224]	; (800e3b4 <Print_Siemens_MSG+0x174>)
 800e2d2:	f018 f8e1 	bl	8026498 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	69db      	ldr	r3, [r3, #28]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	4836      	ldr	r0, [pc, #216]	; (800e3b8 <Print_Siemens_MSG+0x178>)
 800e2de:	f018 f8db 	bl	8026498 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	4834      	ldr	r0, [pc, #208]	; (800e3bc <Print_Siemens_MSG+0x17c>)
 800e2ea:	f018 f8d5 	bl	8026498 <iprintf>
	if(TX_RX == RX)
 800e2ee:	797b      	ldrb	r3, [r7, #5]
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d122      	bne.n	800e33a <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	4831      	ldr	r0, [pc, #196]	; (800e3c0 <Print_Siemens_MSG+0x180>)
 800e2fc:	f018 f8cc 	bl	8026498 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e300:	2300      	movs	r3, #0
 800e302:	82fb      	strh	r3, [r7, #22]
 800e304:	e00b      	b.n	800e31e <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800e306:	8afb      	ldrh	r3, [r7, #22]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	4413      	add	r3, r2
 800e30c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800e310:	4619      	mov	r1, r3
 800e312:	482c      	ldr	r0, [pc, #176]	; (800e3c4 <Print_Siemens_MSG+0x184>)
 800e314:	f018 f8c0 	bl	8026498 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e318:	8afb      	ldrh	r3, [r7, #22]
 800e31a:	3301      	adds	r3, #1
 800e31c:	82fb      	strh	r3, [r7, #22]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e322:	8afa      	ldrh	r2, [r7, #22]
 800e324:	429a      	cmp	r2, r3
 800e326:	d3ee      	bcc.n	800e306 <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800e328:	200a      	movs	r0, #10
 800e32a:	f018 f8cd 	bl	80264c8 <putchar>

		if(Debug_flag == 2)
 800e32e:	4b26      	ldr	r3, [pc, #152]	; (800e3c8 <Print_Siemens_MSG+0x188>)
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	2b02      	cmp	r3, #2
 800e334:	d101      	bne.n	800e33a <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800e336:	f000 ff65 	bl	800f204 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800e33a:	4b23      	ldr	r3, [pc, #140]	; (800e3c8 <Print_Siemens_MSG+0x188>)
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d120      	bne.n	800e384 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e342:	2300      	movs	r3, #0
 800e344:	82bb      	strh	r3, [r7, #20]
 800e346:	e016      	b.n	800e376 <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800e348:	8abb      	ldrh	r3, [r7, #20]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d008      	beq.n	800e360 <Print_Siemens_MSG+0x120>
 800e34e:	8abb      	ldrh	r3, [r7, #20]
 800e350:	f003 031f 	and.w	r3, r3, #31
 800e354:	b29b      	uxth	r3, r3
 800e356:	2b00      	cmp	r3, #0
 800e358:	d102      	bne.n	800e360 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800e35a:	200a      	movs	r0, #10
 800e35c:	f018 f8b4 	bl	80264c8 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800e360:	8abb      	ldrh	r3, [r7, #20]
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	4413      	add	r3, r2
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	4619      	mov	r1, r3
 800e36a:	4816      	ldr	r0, [pc, #88]	; (800e3c4 <Print_Siemens_MSG+0x184>)
 800e36c:	f018 f894 	bl	8026498 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e370:	8abb      	ldrh	r3, [r7, #20]
 800e372:	3301      	adds	r3, #1
 800e374:	82bb      	strh	r3, [r7, #20]
 800e376:	8aba      	ldrh	r2, [r7, #20]
 800e378:	88fb      	ldrh	r3, [r7, #6]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d3e4      	bcc.n	800e348 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800e37e:	200a      	movs	r0, #10
 800e380:	f018 f8a2 	bl	80264c8 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800e384:	bf00      	nop
 800e386:	3718      	adds	r7, #24
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	0802a450 	.word	0x0802a450
 800e390:	0802a458 	.word	0x0802a458
 800e394:	0802a45c 	.word	0x0802a45c
 800e398:	0802a460 	.word	0x0802a460
 800e39c:	0802a468 	.word	0x0802a468
 800e3a0:	0802a470 	.word	0x0802a470
 800e3a4:	0802a478 	.word	0x0802a478
 800e3a8:	0802a480 	.word	0x0802a480
 800e3ac:	0802a48c 	.word	0x0802a48c
 800e3b0:	0802a494 	.word	0x0802a494
 800e3b4:	0802a49c 	.word	0x0802a49c
 800e3b8:	0802a4a4 	.word	0x0802a4a4
 800e3bc:	0802a4b0 	.word	0x0802a4b0
 800e3c0:	0802a4bc 	.word	0x0802a4bc
 800e3c4:	0802a4c4 	.word	0x0802a4c4
 800e3c8:	20000bbb 	.word	0x20000bbb

0800e3cc <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b09a      	sub	sp, #104	; 0x68
 800e3d0:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	603b      	str	r3, [r7, #0]
 800e3e8:	1d3b      	adds	r3, r7, #4
 800e3ea:	2260      	movs	r2, #96	; 0x60
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f017 ff6a 	bl	80262c8 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800e3f4:	4bb9      	ldr	r3, [pc, #740]	; (800e6dc <Chech_forSiemensCMD+0x310>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f001 fdbd 	bl	800ff78 <HAL_Elaps_Ticks>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b09      	cmp	r3, #9
 800e402:	f240 81ad 	bls.w	800e760 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800e406:	e010      	b.n	800e42a <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800e408:	2000      	movs	r0, #0
 800e40a:	f00a fd13 	bl	8018e34 <Com_Get_Byte>
 800e40e:	4603      	mov	r3, r0
 800e410:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800e414:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e418:	1c5a      	adds	r2, r3, #1
 800e41a:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800e41e:	3368      	adds	r3, #104	; 0x68
 800e420:	443b      	add	r3, r7
 800e422:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e426:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800e42a:	2000      	movs	r0, #0
 800e42c:	f00a fcc2 	bl	8018db4 <Com_DataReady>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1e8      	bne.n	800e408 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800e436:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	f000 8144 	beq.w	800e6c8 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800e440:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e444:	3368      	adds	r3, #104	; 0x68
 800e446:	443b      	add	r3, r7
 800e448:	2200      	movs	r2, #0
 800e44a:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800e44e:	463b      	mov	r3, r7
 800e450:	4619      	mov	r1, r3
 800e452:	48a3      	ldr	r0, [pc, #652]	; (800e6e0 <Chech_forSiemensCMD+0x314>)
 800e454:	f018 f820 	bl	8026498 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800e458:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800e45c:	463b      	mov	r3, r7
 800e45e:	4611      	mov	r1, r2
 800e460:	4618      	mov	r0, r3
 800e462:	f000 faf3 	bl	800ea4c <Is_SiemensCommand_Valid>
 800e466:	4603      	mov	r3, r0
 800e468:	2b0c      	cmp	r3, #12
 800e46a:	f200 8129 	bhi.w	800e6c0 <Chech_forSiemensCMD+0x2f4>
 800e46e:	a201      	add	r2, pc, #4	; (adr r2, 800e474 <Chech_forSiemensCMD+0xa8>)
 800e470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e474:	0800e4a9 	.word	0x0800e4a9
 800e478:	0800e4b7 	.word	0x0800e4b7
 800e47c:	0800e51b 	.word	0x0800e51b
 800e480:	0800e53d 	.word	0x0800e53d
 800e484:	0800e565 	.word	0x0800e565
 800e488:	0800e58d 	.word	0x0800e58d
 800e48c:	0800e5b5 	.word	0x0800e5b5
 800e490:	0800e5dd 	.word	0x0800e5dd
 800e494:	0800e605 	.word	0x0800e605
 800e498:	0800e62d 	.word	0x0800e62d
 800e49c:	0800e655 	.word	0x0800e655
 800e4a0:	0800e67d 	.word	0x0800e67d
 800e4a4:	0800e6a5 	.word	0x0800e6a5
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800e4a8:	4b8e      	ldr	r3, [pc, #568]	; (800e6e4 <Chech_forSiemensCMD+0x318>)
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800e4ae:	488e      	ldr	r0, [pc, #568]	; (800e6e8 <Chech_forSiemensCMD+0x31c>)
 800e4b0:	f018 f88e 	bl	80265d0 <puts>
				break;
 800e4b4:	e109      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800e4b6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	3368      	adds	r3, #104	; 0x68
 800e4be:	443b      	add	r3, r7
 800e4c0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e4c4:	3b30      	subs	r3, #48	; 0x30
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	4988      	ldr	r1, [pc, #544]	; (800e6ec <Chech_forSiemensCMD+0x320>)
 800e4ca:	4889      	ldr	r0, [pc, #548]	; (800e6f0 <Chech_forSiemensCMD+0x324>)
 800e4cc:	f017 ffe4 	bl	8026498 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800e4d0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e4d4:	3b01      	subs	r3, #1
 800e4d6:	3368      	adds	r3, #104	; 0x68
 800e4d8:	443b      	add	r3, r7
 800e4da:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e4de:	2b2f      	cmp	r3, #47	; 0x2f
 800e4e0:	d914      	bls.n	800e50c <Chech_forSiemensCMD+0x140>
 800e4e2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	3368      	adds	r3, #104	; 0x68
 800e4ea:	443b      	add	r3, r7
 800e4ec:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e4f0:	2b32      	cmp	r3, #50	; 0x32
 800e4f2:	d80b      	bhi.n	800e50c <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800e4f4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	3368      	adds	r3, #104	; 0x68
 800e4fc:	443b      	add	r3, r7
 800e4fe:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e502:	3b30      	subs	r3, #48	; 0x30
 800e504:	b2da      	uxtb	r2, r3
 800e506:	4b7b      	ldr	r3, [pc, #492]	; (800e6f4 <Chech_forSiemensCMD+0x328>)
 800e508:	701a      	strb	r2, [r3, #0]
 800e50a:	e002      	b.n	800e512 <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800e50c:	487a      	ldr	r0, [pc, #488]	; (800e6f8 <Chech_forSiemensCMD+0x32c>)
 800e50e:	f018 f85f 	bl	80265d0 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800e512:	2301      	movs	r3, #1
 800e514:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e518:	e0d7      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800e51a:	4978      	ldr	r1, [pc, #480]	; (800e6fc <Chech_forSiemensCMD+0x330>)
 800e51c:	4878      	ldr	r0, [pc, #480]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e51e:	f017 ffbb 	bl	8026498 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800e522:	4878      	ldr	r0, [pc, #480]	; (800e704 <Chech_forSiemensCMD+0x338>)
 800e524:	f018 f854 	bl	80265d0 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e528:	4b77      	ldr	r3, [pc, #476]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f043 0301 	orr.w	r3, r3, #1
 800e530:	4a75      	ldr	r2, [pc, #468]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e532:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e534:	2301      	movs	r3, #1
 800e536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e53a:	e0c6      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800e53c:	4973      	ldr	r1, [pc, #460]	; (800e70c <Chech_forSiemensCMD+0x340>)
 800e53e:	4870      	ldr	r0, [pc, #448]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e540:	f017 ffaa 	bl	8026498 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800e544:	4872      	ldr	r0, [pc, #456]	; (800e710 <Chech_forSiemensCMD+0x344>)
 800e546:	f018 f843 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e54a:	4b6f      	ldr	r3, [pc, #444]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e550:	4b6d      	ldr	r3, [pc, #436]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f043 0302 	orr.w	r3, r3, #2
 800e558:	4a6b      	ldr	r2, [pc, #428]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e55a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e55c:	2301      	movs	r3, #1
 800e55e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e562:	e0b2      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800e564:	496b      	ldr	r1, [pc, #428]	; (800e714 <Chech_forSiemensCMD+0x348>)
 800e566:	4866      	ldr	r0, [pc, #408]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e568:	f017 ff96 	bl	8026498 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800e56c:	486a      	ldr	r0, [pc, #424]	; (800e718 <Chech_forSiemensCMD+0x34c>)
 800e56e:	f018 f82f 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e572:	4b65      	ldr	r3, [pc, #404]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e574:	2200      	movs	r2, #0
 800e576:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e578:	4b63      	ldr	r3, [pc, #396]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f043 0304 	orr.w	r3, r3, #4
 800e580:	4a61      	ldr	r2, [pc, #388]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e582:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e584:	2301      	movs	r3, #1
 800e586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e58a:	e09e      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800e58c:	4963      	ldr	r1, [pc, #396]	; (800e71c <Chech_forSiemensCMD+0x350>)
 800e58e:	485c      	ldr	r0, [pc, #368]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e590:	f017 ff82 	bl	8026498 <iprintf>
				printf("INVALID_DES_PORT\n");
 800e594:	4862      	ldr	r0, [pc, #392]	; (800e720 <Chech_forSiemensCMD+0x354>)
 800e596:	f018 f81b 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e59a:	4b5b      	ldr	r3, [pc, #364]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e5a0:	4b59      	ldr	r3, [pc, #356]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f043 0308 	orr.w	r3, r3, #8
 800e5a8:	4a57      	ldr	r2, [pc, #348]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e5aa:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e5b2:	e08a      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800e5b4:	495b      	ldr	r1, [pc, #364]	; (800e724 <Chech_forSiemensCMD+0x358>)
 800e5b6:	4852      	ldr	r0, [pc, #328]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e5b8:	f017 ff6e 	bl	8026498 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800e5bc:	485a      	ldr	r0, [pc, #360]	; (800e728 <Chech_forSiemensCMD+0x35c>)
 800e5be:	f018 f807 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e5c2:	4b51      	ldr	r3, [pc, #324]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e5c8:	4b4f      	ldr	r3, [pc, #316]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f043 0310 	orr.w	r3, r3, #16
 800e5d0:	4a4d      	ldr	r2, [pc, #308]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e5d2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e5da:	e076      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800e5dc:	4953      	ldr	r1, [pc, #332]	; (800e72c <Chech_forSiemensCMD+0x360>)
 800e5de:	4848      	ldr	r0, [pc, #288]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e5e0:	f017 ff5a 	bl	8026498 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800e5e4:	4852      	ldr	r0, [pc, #328]	; (800e730 <Chech_forSiemensCMD+0x364>)
 800e5e6:	f017 fff3 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e5ea:	4b47      	ldr	r3, [pc, #284]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e5f0:	4b45      	ldr	r3, [pc, #276]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f043 0320 	orr.w	r3, r3, #32
 800e5f8:	4a43      	ldr	r2, [pc, #268]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e5fa:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e602:	e062      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800e604:	494b      	ldr	r1, [pc, #300]	; (800e734 <Chech_forSiemensCMD+0x368>)
 800e606:	484c      	ldr	r0, [pc, #304]	; (800e738 <Chech_forSiemensCMD+0x36c>)
 800e608:	f017 ff46 	bl	8026498 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800e60c:	484b      	ldr	r0, [pc, #300]	; (800e73c <Chech_forSiemensCMD+0x370>)
 800e60e:	f017 ffdf 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e612:	4b3d      	ldr	r3, [pc, #244]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e614:	2200      	movs	r2, #0
 800e616:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e618:	4b3b      	ldr	r3, [pc, #236]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e620:	4a39      	ldr	r2, [pc, #228]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e622:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e624:	2301      	movs	r3, #1
 800e626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e62a:	e04e      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800e62c:	4944      	ldr	r1, [pc, #272]	; (800e740 <Chech_forSiemensCMD+0x374>)
 800e62e:	4834      	ldr	r0, [pc, #208]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e630:	f017 ff32 	bl	8026498 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800e634:	4843      	ldr	r0, [pc, #268]	; (800e744 <Chech_forSiemensCMD+0x378>)
 800e636:	f017 ffcb 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e63a:	4b33      	ldr	r3, [pc, #204]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e640:	4b31      	ldr	r3, [pc, #196]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e648:	4a2f      	ldr	r2, [pc, #188]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e64a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e64c:	2301      	movs	r3, #1
 800e64e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e652:	e03a      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800e654:	493c      	ldr	r1, [pc, #240]	; (800e748 <Chech_forSiemensCMD+0x37c>)
 800e656:	482a      	ldr	r0, [pc, #168]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e658:	f017 ff1e 	bl	8026498 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800e65c:	483b      	ldr	r0, [pc, #236]	; (800e74c <Chech_forSiemensCMD+0x380>)
 800e65e:	f017 ffb7 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e662:	4b29      	ldr	r3, [pc, #164]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e664:	2200      	movs	r2, #0
 800e666:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e668:	4b27      	ldr	r3, [pc, #156]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e670:	4a25      	ldr	r2, [pc, #148]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e672:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e674:	2301      	movs	r3, #1
 800e676:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e67a:	e026      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800e67c:	4934      	ldr	r1, [pc, #208]	; (800e750 <Chech_forSiemensCMD+0x384>)
 800e67e:	4820      	ldr	r0, [pc, #128]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e680:	f017 ff0a 	bl	8026498 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800e684:	4833      	ldr	r0, [pc, #204]	; (800e754 <Chech_forSiemensCMD+0x388>)
 800e686:	f017 ffa3 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e68a:	4b1f      	ldr	r3, [pc, #124]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e690:	4b1d      	ldr	r3, [pc, #116]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e698:	4a1b      	ldr	r2, [pc, #108]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e69a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e69c:	2301      	movs	r3, #1
 800e69e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e6a2:	e012      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800e6a4:	492c      	ldr	r1, [pc, #176]	; (800e758 <Chech_forSiemensCMD+0x38c>)
 800e6a6:	4816      	ldr	r0, [pc, #88]	; (800e700 <Chech_forSiemensCMD+0x334>)
 800e6a8:	f017 fef6 	bl	8026498 <iprintf>
				printf("CLEAR ALL\n");
 800e6ac:	482b      	ldr	r0, [pc, #172]	; (800e75c <Chech_forSiemensCMD+0x390>)
 800e6ae:	f017 ff8f 	bl	80265d0 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e6b2:	4b15      	ldr	r3, [pc, #84]	; (800e708 <Chech_forSiemensCMD+0x33c>)
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e6be:	e004      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800e6c0:	480d      	ldr	r0, [pc, #52]	; (800e6f8 <Chech_forSiemensCMD+0x32c>)
 800e6c2:	f017 ff85 	bl	80265d0 <puts>
 800e6c6:	e000      	b.n	800e6ca <Chech_forSiemensCMD+0x2fe>
			}
		}
 800e6c8:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800e6ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d147      	bne.n	800e762 <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800e6d2:	f240 2005 	movw	r0, #517	; 0x205
 800e6d6:	f002 f9cb 	bl	8010a70 <TransmitCanPkt>
 800e6da:	e042      	b.n	800e762 <Chech_forSiemensCMD+0x396>
 800e6dc:	2000bfcc 	.word	0x2000bfcc
 800e6e0:	0802a4cc 	.word	0x0802a4cc
 800e6e4:	20000bba 	.word	0x20000bba
 800e6e8:	0802a4e4 	.word	0x0802a4e4
 800e6ec:	20005f3a 	.word	0x20005f3a
 800e6f0:	0802a524 	.word	0x0802a524
 800e6f4:	20000bbb 	.word	0x20000bbb
 800e6f8:	0802a538 	.word	0x0802a538
 800e6fc:	20005f6c 	.word	0x20005f6c
 800e700:	0802a554 	.word	0x0802a554
 800e704:	0802a564 	.word	0x0802a564
 800e708:	20004bc8 	.word	0x20004bc8
 800e70c:	20005f9e 	.word	0x20005f9e
 800e710:	0802a57c 	.word	0x0802a57c
 800e714:	20005fd0 	.word	0x20005fd0
 800e718:	0802a594 	.word	0x0802a594
 800e71c:	20006002 	.word	0x20006002
 800e720:	0802a5a8 	.word	0x0802a5a8
 800e724:	20006034 	.word	0x20006034
 800e728:	0802a5bc 	.word	0x0802a5bc
 800e72c:	20006066 	.word	0x20006066
 800e730:	0802a5d0 	.word	0x0802a5d0
 800e734:	20006098 	.word	0x20006098
 800e738:	0802a5ec 	.word	0x0802a5ec
 800e73c:	0802a604 	.word	0x0802a604
 800e740:	200060ca 	.word	0x200060ca
 800e744:	0802a618 	.word	0x0802a618
 800e748:	200060fc 	.word	0x200060fc
 800e74c:	0802a630 	.word	0x0802a630
 800e750:	2000612e 	.word	0x2000612e
 800e754:	0802a650 	.word	0x0802a650
 800e758:	20006160 	.word	0x20006160
 800e75c:	0802a670 	.word	0x0802a670
		return;
 800e760:	bf00      	nop
		}
	}
}
 800e762:	3768      	adds	r7, #104	; 0x68
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800e768:	b4b0      	push	{r4, r5, r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800e772:	79fb      	ldrb	r3, [r7, #7]
 800e774:	4aa6      	ldr	r2, [pc, #664]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e776:	2132      	movs	r1, #50	; 0x32
 800e778:	fb01 f303 	mul.w	r3, r1, r3
 800e77c:	4413      	add	r3, r2
 800e77e:	2224      	movs	r2, #36	; 0x24
 800e780:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800e782:	79fb      	ldrb	r3, [r7, #7]
 800e784:	4aa2      	ldr	r2, [pc, #648]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e786:	2132      	movs	r1, #50	; 0x32
 800e788:	fb01 f303 	mul.w	r3, r1, r3
 800e78c:	4413      	add	r3, r2
 800e78e:	3301      	adds	r3, #1
 800e790:	2201      	movs	r2, #1
 800e792:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800e794:	79fb      	ldrb	r3, [r7, #7]
 800e796:	4a9e      	ldr	r2, [pc, #632]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e798:	2132      	movs	r1, #50	; 0x32
 800e79a:	fb01 f303 	mul.w	r3, r1, r3
 800e79e:	4413      	add	r3, r2
 800e7a0:	3302      	adds	r3, #2
 800e7a2:	2230      	movs	r2, #48	; 0x30
 800e7a4:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800e7a6:	79fb      	ldrb	r3, [r7, #7]
 800e7a8:	4a99      	ldr	r2, [pc, #612]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e7aa:	2132      	movs	r1, #50	; 0x32
 800e7ac:	fb01 f303 	mul.w	r3, r1, r3
 800e7b0:	4413      	add	r3, r2
 800e7b2:	3303      	adds	r3, #3
 800e7b4:	2240      	movs	r2, #64	; 0x40
 800e7b6:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	4a95      	ldr	r2, [pc, #596]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e7bc:	2132      	movs	r1, #50	; 0x32
 800e7be:	fb01 f303 	mul.w	r3, r1, r3
 800e7c2:	4413      	add	r3, r2
 800e7c4:	3304      	adds	r3, #4
 800e7c6:	22c0      	movs	r2, #192	; 0xc0
 800e7c8:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	4a90      	ldr	r2, [pc, #576]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e7ce:	2132      	movs	r1, #50	; 0x32
 800e7d0:	fb01 f303 	mul.w	r3, r1, r3
 800e7d4:	4413      	add	r3, r2
 800e7d6:	3305      	adds	r3, #5
 800e7d8:	224e      	movs	r2, #78	; 0x4e
 800e7da:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	4a8c      	ldr	r2, [pc, #560]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e7e0:	2132      	movs	r1, #50	; 0x32
 800e7e2:	fb01 f303 	mul.w	r3, r1, r3
 800e7e6:	4413      	add	r3, r2
 800e7e8:	3306      	adds	r3, #6
 800e7ea:	2226      	movs	r2, #38	; 0x26
 800e7ec:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800e7ee:	79fb      	ldrb	r3, [r7, #7]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800e7f4:	79fb      	ldrb	r3, [r7, #7]
 800e7f6:	1c5a      	adds	r2, r3, #1
 800e7f8:	71fa      	strb	r2, [r7, #7]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	2332      	movs	r3, #50	; 0x32
 800e7fe:	fb02 f303 	mul.w	r3, r2, r3
 800e802:	4a83      	ldr	r2, [pc, #524]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e804:	4413      	add	r3, r2
 800e806:	4983      	ldr	r1, [pc, #524]	; (800ea14 <Update_SiemensCommands+0x2ac>)
 800e808:	461a      	mov	r2, r3
 800e80a:	460b      	mov	r3, r1
 800e80c:	cb03      	ldmia	r3!, {r0, r1}
 800e80e:	6010      	str	r0, [r2, #0]
 800e810:	6051      	str	r1, [r2, #4]
 800e812:	8819      	ldrh	r1, [r3, #0]
 800e814:	789b      	ldrb	r3, [r3, #2]
 800e816:	8111      	strh	r1, [r2, #8]
 800e818:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800e81a:	79fb      	ldrb	r3, [r7, #7]
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	71fa      	strb	r2, [r7, #7]
 800e820:	461a      	mov	r2, r3
 800e822:	2332      	movs	r3, #50	; 0x32
 800e824:	fb02 f303 	mul.w	r3, r2, r3
 800e828:	4a79      	ldr	r2, [pc, #484]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e82a:	4413      	add	r3, r2
 800e82c:	4a7a      	ldr	r2, [pc, #488]	; (800ea18 <Update_SiemensCommands+0x2b0>)
 800e82e:	461d      	mov	r5, r3
 800e830:	4614      	mov	r4, r2
 800e832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e834:	6028      	str	r0, [r5, #0]
 800e836:	6069      	str	r1, [r5, #4]
 800e838:	60aa      	str	r2, [r5, #8]
 800e83a:	60eb      	str	r3, [r5, #12]
 800e83c:	6820      	ldr	r0, [r4, #0]
 800e83e:	6128      	str	r0, [r5, #16]
 800e840:	7923      	ldrb	r3, [r4, #4]
 800e842:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800e844:	79fb      	ldrb	r3, [r7, #7]
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	71fa      	strb	r2, [r7, #7]
 800e84a:	461a      	mov	r2, r3
 800e84c:	2332      	movs	r3, #50	; 0x32
 800e84e:	fb02 f303 	mul.w	r3, r2, r3
 800e852:	4a6f      	ldr	r2, [pc, #444]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e854:	4413      	add	r3, r2
 800e856:	4a71      	ldr	r2, [pc, #452]	; (800ea1c <Update_SiemensCommands+0x2b4>)
 800e858:	461d      	mov	r5, r3
 800e85a:	4614      	mov	r4, r2
 800e85c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e85e:	6028      	str	r0, [r5, #0]
 800e860:	6069      	str	r1, [r5, #4]
 800e862:	60aa      	str	r2, [r5, #8]
 800e864:	60eb      	str	r3, [r5, #12]
 800e866:	6820      	ldr	r0, [r4, #0]
 800e868:	6128      	str	r0, [r5, #16]
 800e86a:	7923      	ldrb	r3, [r4, #4]
 800e86c:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800e86e:	79fb      	ldrb	r3, [r7, #7]
 800e870:	1c5a      	adds	r2, r3, #1
 800e872:	71fa      	strb	r2, [r7, #7]
 800e874:	461a      	mov	r2, r3
 800e876:	2332      	movs	r3, #50	; 0x32
 800e878:	fb02 f303 	mul.w	r3, r2, r3
 800e87c:	4a64      	ldr	r2, [pc, #400]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e87e:	4413      	add	r3, r2
 800e880:	4a67      	ldr	r2, [pc, #412]	; (800ea20 <Update_SiemensCommands+0x2b8>)
 800e882:	461d      	mov	r5, r3
 800e884:	4614      	mov	r4, r2
 800e886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e888:	6028      	str	r0, [r5, #0]
 800e88a:	6069      	str	r1, [r5, #4]
 800e88c:	60aa      	str	r2, [r5, #8]
 800e88e:	60eb      	str	r3, [r5, #12]
 800e890:	7823      	ldrb	r3, [r4, #0]
 800e892:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	1c5a      	adds	r2, r3, #1
 800e898:	71fa      	strb	r2, [r7, #7]
 800e89a:	461a      	mov	r2, r3
 800e89c:	2332      	movs	r3, #50	; 0x32
 800e89e:	fb02 f303 	mul.w	r3, r2, r3
 800e8a2:	4a5b      	ldr	r2, [pc, #364]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e8a4:	4413      	add	r3, r2
 800e8a6:	4a5f      	ldr	r2, [pc, #380]	; (800ea24 <Update_SiemensCommands+0x2bc>)
 800e8a8:	461d      	mov	r5, r3
 800e8aa:	4614      	mov	r4, r2
 800e8ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8ae:	6028      	str	r0, [r5, #0]
 800e8b0:	6069      	str	r1, [r5, #4]
 800e8b2:	60aa      	str	r2, [r5, #8]
 800e8b4:	60eb      	str	r3, [r5, #12]
 800e8b6:	7823      	ldrb	r3, [r4, #0]
 800e8b8:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800e8ba:	79fb      	ldrb	r3, [r7, #7]
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	71fa      	strb	r2, [r7, #7]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	2332      	movs	r3, #50	; 0x32
 800e8c4:	fb02 f303 	mul.w	r3, r2, r3
 800e8c8:	4a51      	ldr	r2, [pc, #324]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e8ca:	4413      	add	r3, r2
 800e8cc:	4a56      	ldr	r2, [pc, #344]	; (800ea28 <Update_SiemensCommands+0x2c0>)
 800e8ce:	461d      	mov	r5, r3
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8d4:	6028      	str	r0, [r5, #0]
 800e8d6:	6069      	str	r1, [r5, #4]
 800e8d8:	60aa      	str	r2, [r5, #8]
 800e8da:	60eb      	str	r3, [r5, #12]
 800e8dc:	7823      	ldrb	r3, [r4, #0]
 800e8de:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	1c5a      	adds	r2, r3, #1
 800e8e4:	71fa      	strb	r2, [r7, #7]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	2332      	movs	r3, #50	; 0x32
 800e8ea:	fb02 f303 	mul.w	r3, r2, r3
 800e8ee:	4a48      	ldr	r2, [pc, #288]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e8f0:	4413      	add	r3, r2
 800e8f2:	4a4e      	ldr	r2, [pc, #312]	; (800ea2c <Update_SiemensCommands+0x2c4>)
 800e8f4:	461d      	mov	r5, r3
 800e8f6:	4614      	mov	r4, r2
 800e8f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8fa:	6028      	str	r0, [r5, #0]
 800e8fc:	6069      	str	r1, [r5, #4]
 800e8fe:	60aa      	str	r2, [r5, #8]
 800e900:	60eb      	str	r3, [r5, #12]
 800e902:	cc03      	ldmia	r4!, {r0, r1}
 800e904:	6128      	str	r0, [r5, #16]
 800e906:	6169      	str	r1, [r5, #20]
 800e908:	8823      	ldrh	r3, [r4, #0]
 800e90a:	78a2      	ldrb	r2, [r4, #2]
 800e90c:	832b      	strh	r3, [r5, #24]
 800e90e:	4613      	mov	r3, r2
 800e910:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800e912:	79fb      	ldrb	r3, [r7, #7]
 800e914:	1c5a      	adds	r2, r3, #1
 800e916:	71fa      	strb	r2, [r7, #7]
 800e918:	461a      	mov	r2, r3
 800e91a:	2332      	movs	r3, #50	; 0x32
 800e91c:	fb02 f303 	mul.w	r3, r2, r3
 800e920:	4a3b      	ldr	r2, [pc, #236]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e922:	4413      	add	r3, r2
 800e924:	4a42      	ldr	r2, [pc, #264]	; (800ea30 <Update_SiemensCommands+0x2c8>)
 800e926:	461d      	mov	r5, r3
 800e928:	4614      	mov	r4, r2
 800e92a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e92c:	6028      	str	r0, [r5, #0]
 800e92e:	6069      	str	r1, [r5, #4]
 800e930:	60aa      	str	r2, [r5, #8]
 800e932:	60eb      	str	r3, [r5, #12]
 800e934:	8823      	ldrh	r3, [r4, #0]
 800e936:	78a2      	ldrb	r2, [r4, #2]
 800e938:	822b      	strh	r3, [r5, #16]
 800e93a:	4613      	mov	r3, r2
 800e93c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800e93e:	79fb      	ldrb	r3, [r7, #7]
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	71fa      	strb	r2, [r7, #7]
 800e944:	461a      	mov	r2, r3
 800e946:	2332      	movs	r3, #50	; 0x32
 800e948:	fb02 f303 	mul.w	r3, r2, r3
 800e94c:	4a30      	ldr	r2, [pc, #192]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e94e:	4413      	add	r3, r2
 800e950:	4a38      	ldr	r2, [pc, #224]	; (800ea34 <Update_SiemensCommands+0x2cc>)
 800e952:	461d      	mov	r5, r3
 800e954:	4614      	mov	r4, r2
 800e956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e958:	6028      	str	r0, [r5, #0]
 800e95a:	6069      	str	r1, [r5, #4]
 800e95c:	60aa      	str	r2, [r5, #8]
 800e95e:	60eb      	str	r3, [r5, #12]
 800e960:	cc03      	ldmia	r4!, {r0, r1}
 800e962:	6128      	str	r0, [r5, #16]
 800e964:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800e966:	79fb      	ldrb	r3, [r7, #7]
 800e968:	1c5a      	adds	r2, r3, #1
 800e96a:	71fa      	strb	r2, [r7, #7]
 800e96c:	461a      	mov	r2, r3
 800e96e:	2332      	movs	r3, #50	; 0x32
 800e970:	fb02 f303 	mul.w	r3, r2, r3
 800e974:	4a26      	ldr	r2, [pc, #152]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e976:	4413      	add	r3, r2
 800e978:	4a2f      	ldr	r2, [pc, #188]	; (800ea38 <Update_SiemensCommands+0x2d0>)
 800e97a:	461c      	mov	r4, r3
 800e97c:	4615      	mov	r5, r2
 800e97e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e980:	6020      	str	r0, [r4, #0]
 800e982:	6061      	str	r1, [r4, #4]
 800e984:	60a2      	str	r2, [r4, #8]
 800e986:	60e3      	str	r3, [r4, #12]
 800e988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e98a:	6120      	str	r0, [r4, #16]
 800e98c:	6161      	str	r1, [r4, #20]
 800e98e:	61a2      	str	r2, [r4, #24]
 800e990:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	1c5a      	adds	r2, r3, #1
 800e996:	71fa      	strb	r2, [r7, #7]
 800e998:	461a      	mov	r2, r3
 800e99a:	2332      	movs	r3, #50	; 0x32
 800e99c:	fb02 f303 	mul.w	r3, r2, r3
 800e9a0:	4a1b      	ldr	r2, [pc, #108]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e9a2:	4413      	add	r3, r2
 800e9a4:	4a25      	ldr	r2, [pc, #148]	; (800ea3c <Update_SiemensCommands+0x2d4>)
 800e9a6:	461d      	mov	r5, r3
 800e9a8:	4614      	mov	r4, r2
 800e9aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9ac:	6028      	str	r0, [r5, #0]
 800e9ae:	6069      	str	r1, [r5, #4]
 800e9b0:	60aa      	str	r2, [r5, #8]
 800e9b2:	60eb      	str	r3, [r5, #12]
 800e9b4:	cc07      	ldmia	r4!, {r0, r1, r2}
 800e9b6:	6128      	str	r0, [r5, #16]
 800e9b8:	6169      	str	r1, [r5, #20]
 800e9ba:	61aa      	str	r2, [r5, #24]
 800e9bc:	7823      	ldrb	r3, [r4, #0]
 800e9be:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800e9c0:	79fb      	ldrb	r3, [r7, #7]
 800e9c2:	1c5a      	adds	r2, r3, #1
 800e9c4:	71fa      	strb	r2, [r7, #7]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	2332      	movs	r3, #50	; 0x32
 800e9ca:	fb02 f303 	mul.w	r3, r2, r3
 800e9ce:	4a10      	ldr	r2, [pc, #64]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e9d0:	4413      	add	r3, r2
 800e9d2:	491b      	ldr	r1, [pc, #108]	; (800ea40 <Update_SiemensCommands+0x2d8>)
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	cb03      	ldmia	r3!, {r0, r1}
 800e9da:	6010      	str	r0, [r2, #0]
 800e9dc:	6051      	str	r1, [r2, #4]
 800e9de:	881b      	ldrh	r3, [r3, #0]
 800e9e0:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800e9e2:	79fb      	ldrb	r3, [r7, #7]
 800e9e4:	1c5a      	adds	r2, r3, #1
 800e9e6:	71fa      	strb	r2, [r7, #7]
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	2332      	movs	r3, #50	; 0x32
 800e9ec:	fb02 f303 	mul.w	r3, r2, r3
 800e9f0:	4a07      	ldr	r2, [pc, #28]	; (800ea10 <Update_SiemensCommands+0x2a8>)
 800e9f2:	4413      	add	r3, r2
 800e9f4:	4a13      	ldr	r2, [pc, #76]	; (800ea44 <Update_SiemensCommands+0x2dc>)
 800e9f6:	6810      	ldr	r0, [r2, #0]
 800e9f8:	6018      	str	r0, [r3, #0]
 800e9fa:	7912      	ldrb	r2, [r2, #4]
 800e9fc:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800e9fe:	4a12      	ldr	r2, [pc, #72]	; (800ea48 <Update_SiemensCommands+0x2e0>)
 800ea00:	79fb      	ldrb	r3, [r7, #7]
 800ea02:	7013      	strb	r3, [r2, #0]
}
 800ea04:	bf00      	nop
 800ea06:	370c      	adds	r7, #12
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bcb0      	pop	{r4, r5, r7}
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	20005f08 	.word	0x20005f08
 800ea14:	0802a67c 	.word	0x0802a67c
 800ea18:	0802a564 	.word	0x0802a564
 800ea1c:	0802a57c 	.word	0x0802a57c
 800ea20:	0802a594 	.word	0x0802a594
 800ea24:	0802a5a8 	.word	0x0802a5a8
 800ea28:	0802a5bc 	.word	0x0802a5bc
 800ea2c:	0802a688 	.word	0x0802a688
 800ea30:	0802a604 	.word	0x0802a604
 800ea34:	0802a618 	.word	0x0802a618
 800ea38:	0802a630 	.word	0x0802a630
 800ea3c:	0802a650 	.word	0x0802a650
 800ea40:	0802a6a4 	.word	0x0802a6a4
 800ea44:	0802a6b0 	.word	0x0802a6b0
 800ea48:	200062f0 	.word	0x200062f0

0800ea4c <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800ea4c:	b590      	push	{r4, r7, lr}
 800ea4e:	b085      	sub	sp, #20
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	460b      	mov	r3, r1
 800ea56:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
 800ea5c:	e01c      	b.n	800ea98 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
 800ea60:	2232      	movs	r2, #50	; 0x32
 800ea62:	fb02 f303 	mul.w	r3, r2, r3
 800ea66:	4a11      	ldr	r2, [pc, #68]	; (800eaac <Is_SiemensCommand_Valid+0x60>)
 800ea68:	189c      	adds	r4, r3, r2
 800ea6a:	7bfb      	ldrb	r3, [r7, #15]
 800ea6c:	2232      	movs	r2, #50	; 0x32
 800ea6e:	fb02 f303 	mul.w	r3, r2, r3
 800ea72:	4a0e      	ldr	r2, [pc, #56]	; (800eaac <Is_SiemensCommand_Valid+0x60>)
 800ea74:	4413      	add	r3, r2
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f1 fbec 	bl	8000254 <strlen>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	461a      	mov	r2, r3
 800ea80:	4621      	mov	r1, r4
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f017 fbe8 	bl	8026258 <memcmp>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d101      	bne.n	800ea92 <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800ea8e:	7bfb      	ldrb	r3, [r7, #15]
 800ea90:	e008      	b.n	800eaa4 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ea92:	7bfb      	ldrb	r3, [r7, #15]
 800ea94:	3301      	adds	r3, #1
 800ea96:	73fb      	strb	r3, [r7, #15]
 800ea98:	4b05      	ldr	r3, [pc, #20]	; (800eab0 <Is_SiemensCommand_Valid+0x64>)
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	7bfa      	ldrb	r2, [r7, #15]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d3dd      	bcc.n	800ea5e <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800eaa2:	23ff      	movs	r3, #255	; 0xff
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd90      	pop	{r4, r7, pc}
 800eaac:	20005f08 	.word	0x20005f08
 800eab0:	200062f0 	.word	0x200062f0

0800eab4 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b087      	sub	sp, #28
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800eac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eac4:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800eac6:	2300      	movs	r3, #0
 800eac8:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800eace:	2300      	movs	r3, #0
 800ead0:	82bb      	strh	r3, [r7, #20]
 800ead2:	e022      	b.n	800eb1a <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800ead4:	8abb      	ldrh	r3, [r7, #20]
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	4413      	add	r3, r2
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	b29a      	uxth	r2, r3
 800eade:	8afb      	ldrh	r3, [r7, #22]
 800eae0:	4053      	eors	r3, r2
 800eae2:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800eae4:	2300      	movs	r3, #0
 800eae6:	613b      	str	r3, [r7, #16]
 800eae8:	e011      	b.n	800eb0e <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800eaea:	8afb      	ldrh	r3, [r7, #22]
 800eaec:	f003 0301 	and.w	r3, r3, #1
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d006      	beq.n	800eb02 <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800eaf4:	8afb      	ldrh	r3, [r7, #22]
 800eaf6:	085b      	lsrs	r3, r3, #1
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	4b17      	ldr	r3, [pc, #92]	; (800eb58 <Siemens_CRC+0xa4>)
 800eafc:	4053      	eors	r3, r2
 800eafe:	82fb      	strh	r3, [r7, #22]
 800eb00:	e002      	b.n	800eb08 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800eb02:	8afb      	ldrh	r3, [r7, #22]
 800eb04:	085b      	lsrs	r3, r3, #1
 800eb06:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	613b      	str	r3, [r7, #16]
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	2b07      	cmp	r3, #7
 800eb12:	ddea      	ble.n	800eaea <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800eb14:	8abb      	ldrh	r3, [r7, #20]
 800eb16:	3301      	adds	r3, #1
 800eb18:	82bb      	strh	r3, [r7, #20]
 800eb1a:	8aba      	ldrh	r2, [r7, #20]
 800eb1c:	887b      	ldrh	r3, [r7, #2]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d3d8      	bcc.n	800ead4 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800eb22:	8afb      	ldrh	r3, [r7, #22]
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800eb28:	8afb      	ldrh	r3, [r7, #22]
 800eb2a:	0a1b      	lsrs	r3, r3, #8
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800eb32:	7b3b      	ldrb	r3, [r7, #12]
 800eb34:	021b      	lsls	r3, r3, #8
 800eb36:	b21a      	sxth	r2, r3
 800eb38:	7b7b      	ldrb	r3, [r7, #13]
 800eb3a:	b21b      	sxth	r3, r3
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	b21b      	sxth	r3, r3
 800eb40:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800eb42:	8afb      	ldrh	r3, [r7, #22]
 800eb44:	43db      	mvns	r3, r3
 800eb46:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800eb48:	8afb      	ldrh	r3, [r7, #22]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	371c      	adds	r7, #28
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop
 800eb58:	ffff8408 	.word	0xffff8408

0800eb5c <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	603a      	str	r2, [r7, #0]
 800eb64:	461a      	mov	r2, r3
 800eb66:	4603      	mov	r3, r0
 800eb68:	71fb      	strb	r3, [r7, #7]
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	71bb      	strb	r3, [r7, #6]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800eb72:	2300      	movs	r3, #0
 800eb74:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800eb7a:	797b      	ldrb	r3, [r7, #5]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d010      	beq.n	800eba2 <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800eb80:	79bb      	ldrb	r3, [r7, #6]
 800eb82:	08db      	lsrs	r3, r3, #3
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	797a      	ldrb	r2, [r7, #5]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	6838      	ldr	r0, [r7, #0]
 800eb8c:	f000 f8d0 	bl	800ed30 <Verify_parity>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d110      	bne.n	800ebb8 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800eb96:	4840      	ldr	r0, [pc, #256]	; (800ec98 <Extract_Parity_Data+0x13c>)
 800eb98:	f017 fd1a 	bl	80265d0 <puts>
			return -1;
 800eb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eba0:	e075      	b.n	800ec8e <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800eba2:	79fb      	ldrb	r3, [r7, #7]
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	79ba      	ldrb	r2, [r7, #6]
 800eba8:	b291      	uxth	r1, r2
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7f1 fd31 	bl	8000614 <ExtractBits>
 800ebb2:	6138      	str	r0, [r7, #16]
		return Return_value;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	e06a      	b.n	800ec8e <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800ebb8:	79bb      	ldrb	r3, [r7, #6]
 800ebba:	2b08      	cmp	r3, #8
 800ebbc:	d108      	bne.n	800ebd0 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800ebc4:	7dfb      	ldrb	r3, [r7, #23]
 800ebc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebca:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800ebcc:	7dfb      	ldrb	r3, [r7, #23]
 800ebce:	e05e      	b.n	800ec8e <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800ebd0:	79bb      	ldrb	r3, [r7, #6]
 800ebd2:	2b18      	cmp	r3, #24
 800ebd4:	d15a      	bne.n	800ec8c <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800ebdc:	7dfb      	ldrb	r3, [r7, #23]
 800ebde:	f003 0301 	and.w	r3, r3, #1
 800ebe2:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800ebe4:	7dfb      	ldrb	r3, [r7, #23]
 800ebe6:	085b      	lsrs	r3, r3, #1
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	f003 0301 	and.w	r3, r3, #1
 800ebee:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
 800ebf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebf6:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800ebf8:	7dfb      	ldrb	r3, [r7, #23]
 800ebfa:	089b      	lsrs	r3, r3, #2
 800ebfc:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	785b      	ldrb	r3, [r3, #1]
 800ec06:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
 800ec0a:	f003 0301 	and.w	r3, r3, #1
 800ec0e:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800ec10:	7dfb      	ldrb	r3, [r7, #23]
 800ec12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec16:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800ec18:	7dfb      	ldrb	r3, [r7, #23]
 800ec1a:	085b      	lsrs	r3, r3, #1
 800ec1c:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800ec1e:	7bbb      	ldrb	r3, [r7, #14]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d104      	bne.n	800ec2e <Extract_Parity_Data+0xd2>
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
 800ec26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec2a:	75fb      	strb	r3, [r7, #23]
 800ec2c:	e003      	b.n	800ec36 <Extract_Parity_Data+0xda>
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec34:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d104      	bne.n	800ec46 <Extract_Parity_Data+0xea>
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec42:	75fb      	strb	r3, [r7, #23]
 800ec44:	e003      	b.n	800ec4e <Extract_Parity_Data+0xf2>
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4c:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	021b      	lsls	r3, r3, #8
 800ec52:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800ec54:	7dfb      	ldrb	r3, [r7, #23]
 800ec56:	693a      	ldr	r2, [r7, #16]
 800ec58:	4413      	add	r3, r2
 800ec5a:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	789b      	ldrb	r3, [r3, #2]
 800ec60:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800ec62:	7b7b      	ldrb	r3, [r7, #13]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d104      	bne.n	800ec72 <Extract_Parity_Data+0x116>
 800ec68:	7dfb      	ldrb	r3, [r7, #23]
 800ec6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec6e:	75fb      	strb	r3, [r7, #23]
 800ec70:	e003      	b.n	800ec7a <Extract_Parity_Data+0x11e>
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec78:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	021b      	lsls	r3, r3, #8
 800ec7e:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	4413      	add	r3, r2
 800ec86:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	e000      	b.n	800ec8e <Extract_Parity_Data+0x132>
	}
	return 0;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3718      	adds	r7, #24
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	0802a6b8 	.word	0x0802a6b8

0800ec9c <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	460a      	mov	r2, r1
 800eca6:	71fb      	strb	r3, [r7, #7]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800ecb4:	2306      	movs	r3, #6
 800ecb6:	73fb      	strb	r3, [r7, #15]
 800ecb8:	e014      	b.n	800ece4 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800ecba:	79fa      	ldrb	r2, [r7, #7]
 800ecbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecc0:	fa42 f303 	asr.w	r3, r2, r3
 800ecc4:	f003 0301 	and.w	r3, r3, #1
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d005      	beq.n	800ecd8 <Calculate_Parity+0x3c>
		{
			count++;
 800eccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800ecd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	3b01      	subs	r3, #1
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	73fb      	strb	r3, [r7, #15]
 800ece4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	dae6      	bge.n	800ecba <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800ecec:	79bb      	ldrb	r3, [r7, #6]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d109      	bne.n	800ed06 <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800ecf2:	7bbb      	ldrb	r3, [r7, #14]
 800ecf4:	f003 0301 	and.w	r3, r3, #1
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d101      	bne.n	800ed02 <Calculate_Parity+0x66>
		{
			return 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	e00f      	b.n	800ed22 <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800ed02:	2301      	movs	r3, #1
 800ed04:	e00d      	b.n	800ed22 <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800ed06:	79bb      	ldrb	r3, [r7, #6]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d109      	bne.n	800ed20 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800ed0c:	7bbb      	ldrb	r3, [r7, #14]
 800ed0e:	f003 0301 	and.w	r3, r3, #1
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d101      	bne.n	800ed1c <Calculate_Parity+0x80>
		{
			return 1;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e002      	b.n	800ed22 <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	e000      	b.n	800ed22 <Calculate_Parity+0x86>
		}
	}
	return 0;
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3714      	adds	r7, #20
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr
	...

0800ed30 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	70fb      	strb	r3, [r7, #3]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800ed40:	2300      	movs	r3, #0
 800ed42:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800ed44:	2300      	movs	r3, #0
 800ed46:	73fb      	strb	r3, [r7, #15]
 800ed48:	e03b      	b.n	800edc2 <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	4413      	add	r3, r2
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	78ba      	ldrb	r2, [r7, #2]
 800ed54:	4611      	mov	r1, r2
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7ff ffa0 	bl	800ec9c <Calculate_Parity>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	4619      	mov	r1, r3
 800ed60:	7bfb      	ldrb	r3, [r7, #15]
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	4413      	add	r3, r2
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	09db      	lsrs	r3, r3, #7
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	f003 0301 	and.w	r3, r3, #1
 800ed70:	4299      	cmp	r1, r3
 800ed72:	d023      	beq.n	800edbc <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800ed74:	7bfb      	ldrb	r3, [r7, #15]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	4413      	add	r3, r2
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	4815      	ldr	r0, [pc, #84]	; (800edd4 <Verify_parity+0xa4>)
 800ed80:	f017 fb8a 	bl	8026498 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	4413      	add	r3, r2
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	78ba      	ldrb	r2, [r7, #2]
 800ed8e:	4611      	mov	r1, r2
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7ff ff83 	bl	800ec9c <Calculate_Parity>
 800ed96:	4603      	mov	r3, r0
 800ed98:	4619      	mov	r1, r3
 800ed9a:	480f      	ldr	r0, [pc, #60]	; (800edd8 <Verify_parity+0xa8>)
 800ed9c:	f017 fb7c 	bl	8026498 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	4413      	add	r3, r2
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	09db      	lsrs	r3, r3, #7
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	f003 0301 	and.w	r3, r3, #1
 800edb0:	4619      	mov	r1, r3
 800edb2:	480a      	ldr	r0, [pc, #40]	; (800eddc <Verify_parity+0xac>)
 800edb4:	f017 fb70 	bl	8026498 <iprintf>
			return 0;
 800edb8:	2300      	movs	r3, #0
 800edba:	e007      	b.n	800edcc <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	3301      	adds	r3, #1
 800edc0:	73fb      	strb	r3, [r7, #15]
 800edc2:	7bfa      	ldrb	r2, [r7, #15]
 800edc4:	78fb      	ldrb	r3, [r7, #3]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d3bf      	bcc.n	800ed4a <Verify_parity+0x1a>
		}
	}
	return 1;
 800edca:	2301      	movs	r3, #1
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	0802a6d4 	.word	0x0802a6d4
 800edd8:	0802a6ec 	.word	0x0802a6ec
 800eddc:	0802a700 	.word	0x0802a700

0800ede0 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	b089      	sub	sp, #36	; 0x24
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	4603      	mov	r3, r0
 800edea:	60ba      	str	r2, [r7, #8]
 800edec:	73fb      	strb	r3, [r7, #15]
 800edee:	460b      	mov	r3, r1
 800edf0:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800edf2:	2300      	movs	r3, #0
 800edf4:	83fb      	strh	r3, [r7, #30]
 800edf6:	2300      	movs	r3, #0
 800edf8:	83bb      	strh	r3, [r7, #28]
 800edfa:	2300      	movs	r3, #0
 800edfc:	833b      	strh	r3, [r7, #24]
 800edfe:	2300      	movs	r3, #0
 800ee00:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800ee06:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d108      	bne.n	800ee20 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800ee0e:	7bfb      	ldrb	r3, [r7, #15]
 800ee10:	b298      	uxth	r0, r3
 800ee12:	7bbb      	ldrb	r3, [r7, #14]
 800ee14:	b299      	uxth	r1, r3
 800ee16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee18:	68ba      	ldr	r2, [r7, #8]
 800ee1a:	f7f1 fc87 	bl	800072c <InsertBits>
		return;
 800ee1e:	e13b      	b.n	800f098 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800ee20:	7bbb      	ldrb	r3, [r7, #14]
 800ee22:	2b08      	cmp	r3, #8
 800ee24:	d12c      	bne.n	800ee80 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800ee26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ee2a:	2a80      	cmp	r2, #128	; 0x80
 800ee2c:	f173 0300 	sbcs.w	r3, r3, #0
 800ee30:	d303      	bcc.n	800ee3a <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800ee32:	489b      	ldr	r0, [pc, #620]	; (800f0a0 <Insert_cal_parity+0x2c0>)
 800ee34:	f017 fbcc 	bl	80265d0 <puts>
			return;
 800ee38:	e12e      	b.n	800f098 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800ee3a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ee3e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ee42:	4611      	mov	r1, r2
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff ff29 	bl	800ec9c <Calculate_Parity>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b01      	cmp	r3, #1
 800ee4e:	d10b      	bne.n	800ee68 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800ee50:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee60:	b2da      	uxtb	r2, r3
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	701a      	strb	r2, [r3, #0]
 800ee66:	e117      	b.n	800f098 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800ee68:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	701a      	strb	r2, [r3, #0]
 800ee7e:	e10b      	b.n	800f098 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800ee80:	7bbb      	ldrb	r3, [r7, #14]
 800ee82:	2b18      	cmp	r3, #24
 800ee84:	f040 8104 	bne.w	800f090 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800ee88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ee8c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800ee90:	f173 0300 	sbcs.w	r3, r3, #0
 800ee94:	d303      	bcc.n	800ee9e <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800ee96:	4883      	ldr	r0, [pc, #524]	; (800f0a4 <Insert_cal_parity+0x2c4>)
 800ee98:	f017 fb9a 	bl	80265d0 <puts>
			return;
 800ee9c:	e0fc      	b.n	800f098 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800eea2:	2300      	movs	r3, #0
 800eea4:	76bb      	strb	r3, [r7, #26]
 800eea6:	e0ee      	b.n	800f086 <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800eea8:	7ebb      	ldrb	r3, [r7, #26]
 800eeaa:	00d9      	lsls	r1, r3, #3
 800eeac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eeb0:	f1c1 0620 	rsb	r6, r1, #32
 800eeb4:	f1a1 0c20 	sub.w	ip, r1, #32
 800eeb8:	fa22 f001 	lsr.w	r0, r2, r1
 800eebc:	6038      	str	r0, [r7, #0]
 800eebe:	fa03 f606 	lsl.w	r6, r3, r6
 800eec2:	6838      	ldr	r0, [r7, #0]
 800eec4:	4330      	orrs	r0, r6
 800eec6:	6038      	str	r0, [r7, #0]
 800eec8:	fa23 fc0c 	lsr.w	ip, r3, ip
 800eecc:	6838      	ldr	r0, [r7, #0]
 800eece:	ea40 000c 	orr.w	r0, r0, ip
 800eed2:	6038      	str	r0, [r7, #0]
 800eed4:	40cb      	lsrs	r3, r1
 800eed6:	607b      	str	r3, [r7, #4]
 800eed8:	783b      	ldrb	r3, [r7, #0]
 800eeda:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800eedc:	7ebb      	ldrb	r3, [r7, #26]
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d07a      	beq.n	800efd8 <Insert_cal_parity+0x1f8>
 800eee2:	2b02      	cmp	r3, #2
 800eee4:	f300 8094 	bgt.w	800f010 <Insert_cal_parity+0x230>
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <Insert_cal_parity+0x112>
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d01f      	beq.n	800ef30 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800eef0:	e08e      	b.n	800f010 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800eef2:	7ebb      	ldrb	r3, [r7, #26]
 800eef4:	00d9      	lsls	r1, r3, #3
 800eef6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eefa:	f1c1 0620 	rsb	r6, r1, #32
 800eefe:	f1a1 0020 	sub.w	r0, r1, #32
 800ef02:	fa22 f401 	lsr.w	r4, r2, r1
 800ef06:	fa03 f606 	lsl.w	r6, r3, r6
 800ef0a:	4334      	orrs	r4, r6
 800ef0c:	fa23 f000 	lsr.w	r0, r3, r0
 800ef10:	4304      	orrs	r4, r0
 800ef12:	fa23 f501 	lsr.w	r5, r3, r1
 800ef16:	f04f 0200 	mov.w	r2, #0
 800ef1a:	f04f 0300 	mov.w	r3, #0
 800ef1e:	09e2      	lsrs	r2, r4, #7
 800ef20:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800ef24:	09eb      	lsrs	r3, r5, #7
 800ef26:	b293      	uxth	r3, r2
 800ef28:	f003 0301 	and.w	r3, r3, #1
 800ef2c:	83fb      	strh	r3, [r7, #30]
					break;
 800ef2e:	e070      	b.n	800f012 <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800ef30:	7efb      	ldrb	r3, [r7, #27]
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800ef36:	8bfb      	ldrh	r3, [r7, #30]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d104      	bne.n	800ef46 <Insert_cal_parity+0x166>
 800ef3c:	7efb      	ldrb	r3, [r7, #27]
 800ef3e:	f023 0301 	bic.w	r3, r3, #1
 800ef42:	76fb      	strb	r3, [r7, #27]
 800ef44:	e003      	b.n	800ef4e <Insert_cal_parity+0x16e>
 800ef46:	7efb      	ldrb	r3, [r7, #27]
 800ef48:	f043 0301 	orr.w	r3, r3, #1
 800ef4c:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800ef4e:	7ebb      	ldrb	r3, [r7, #26]
 800ef50:	00d9      	lsls	r1, r3, #3
 800ef52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef56:	f1c1 0620 	rsb	r6, r1, #32
 800ef5a:	f1a1 0020 	sub.w	r0, r1, #32
 800ef5e:	fa22 f801 	lsr.w	r8, r2, r1
 800ef62:	fa03 f606 	lsl.w	r6, r3, r6
 800ef66:	ea48 0806 	orr.w	r8, r8, r6
 800ef6a:	fa23 f000 	lsr.w	r0, r3, r0
 800ef6e:	ea48 0800 	orr.w	r8, r8, r0
 800ef72:	fa23 f901 	lsr.w	r9, r3, r1
 800ef76:	f04f 0200 	mov.w	r2, #0
 800ef7a:	f04f 0300 	mov.w	r3, #0
 800ef7e:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800ef82:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800ef86:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800ef8a:	b293      	uxth	r3, r2
 800ef8c:	f003 0301 	and.w	r3, r3, #1
 800ef90:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800ef92:	7ebb      	ldrb	r3, [r7, #26]
 800ef94:	00d9      	lsls	r1, r3, #3
 800ef96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef9a:	f1c1 0620 	rsb	r6, r1, #32
 800ef9e:	f1a1 0020 	sub.w	r0, r1, #32
 800efa2:	fa22 fa01 	lsr.w	sl, r2, r1
 800efa6:	fa03 f606 	lsl.w	r6, r3, r6
 800efaa:	ea4a 0a06 	orr.w	sl, sl, r6
 800efae:	fa23 f000 	lsr.w	r0, r3, r0
 800efb2:	ea4a 0a00 	orr.w	sl, sl, r0
 800efb6:	fa23 fb01 	lsr.w	fp, r3, r1
 800efba:	f04f 0200 	mov.w	r2, #0
 800efbe:	f04f 0300 	mov.w	r3, #0
 800efc2:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800efc6:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800efca:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800efce:	b293      	uxth	r3, r2
 800efd0:	f003 0301 	and.w	r3, r3, #1
 800efd4:	83bb      	strh	r3, [r7, #28]
					break;
 800efd6:	e01c      	b.n	800f012 <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800efd8:	7efb      	ldrb	r3, [r7, #27]
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800efde:	8bbb      	ldrh	r3, [r7, #28]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d104      	bne.n	800efee <Insert_cal_parity+0x20e>
 800efe4:	7efb      	ldrb	r3, [r7, #27]
 800efe6:	f023 0301 	bic.w	r3, r3, #1
 800efea:	76fb      	strb	r3, [r7, #27]
 800efec:	e003      	b.n	800eff6 <Insert_cal_parity+0x216>
 800efee:	7efb      	ldrb	r3, [r7, #27]
 800eff0:	f043 0301 	orr.w	r3, r3, #1
 800eff4:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800eff6:	8bfb      	ldrh	r3, [r7, #30]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d104      	bne.n	800f006 <Insert_cal_parity+0x226>
 800effc:	7efb      	ldrb	r3, [r7, #27]
 800effe:	f023 0302 	bic.w	r3, r3, #2
 800f002:	76fb      	strb	r3, [r7, #27]
					break;
 800f004:	e005      	b.n	800f012 <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f006:	7efb      	ldrb	r3, [r7, #27]
 800f008:	f043 0302 	orr.w	r3, r3, #2
 800f00c:	76fb      	strb	r3, [r7, #27]
					break;
 800f00e:	e000      	b.n	800f012 <Insert_cal_parity+0x232>
					break;
 800f010:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800f012:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f016:	7efb      	ldrb	r3, [r7, #27]
 800f018:	4611      	mov	r1, r2
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff fe3e 	bl	800ec9c <Calculate_Parity>
 800f020:	4603      	mov	r3, r0
 800f022:	2b01      	cmp	r3, #1
 800f024:	d116      	bne.n	800f054 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f026:	7ebb      	ldrb	r3, [r7, #26]
 800f028:	f1c3 0302 	rsb	r3, r3, #2
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	4413      	add	r3, r2
 800f030:	7efa      	ldrb	r2, [r7, #27]
 800f032:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800f034:	7ebb      	ldrb	r3, [r7, #26]
 800f036:	f1c3 0302 	rsb	r3, r3, #2
 800f03a:	68ba      	ldr	r2, [r7, #8]
 800f03c:	4413      	add	r3, r2
 800f03e:	781a      	ldrb	r2, [r3, #0]
 800f040:	7ebb      	ldrb	r3, [r7, #26]
 800f042:	f1c3 0302 	rsb	r3, r3, #2
 800f046:	68b9      	ldr	r1, [r7, #8]
 800f048:	440b      	add	r3, r1
 800f04a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f04e:	b2d2      	uxtb	r2, r2
 800f050:	701a      	strb	r2, [r3, #0]
 800f052:	e015      	b.n	800f080 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f054:	7ebb      	ldrb	r3, [r7, #26]
 800f056:	f1c3 0302 	rsb	r3, r3, #2
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	4413      	add	r3, r2
 800f05e:	7efa      	ldrb	r2, [r7, #27]
 800f060:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800f062:	7ebb      	ldrb	r3, [r7, #26]
 800f064:	f1c3 0302 	rsb	r3, r3, #2
 800f068:	68ba      	ldr	r2, [r7, #8]
 800f06a:	4413      	add	r3, r2
 800f06c:	781a      	ldrb	r2, [r3, #0]
 800f06e:	7ebb      	ldrb	r3, [r7, #26]
 800f070:	f1c3 0302 	rsb	r3, r3, #2
 800f074:	68b9      	ldr	r1, [r7, #8]
 800f076:	440b      	add	r3, r1
 800f078:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f07c:	b2d2      	uxtb	r2, r2
 800f07e:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800f080:	7ebb      	ldrb	r3, [r7, #26]
 800f082:	3301      	adds	r3, #1
 800f084:	76bb      	strb	r3, [r7, #26]
 800f086:	7ebb      	ldrb	r3, [r7, #26]
 800f088:	2b02      	cmp	r3, #2
 800f08a:	f67f af0d 	bls.w	800eea8 <Insert_cal_parity+0xc8>
 800f08e:	e003      	b.n	800f098 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800f090:	4805      	ldr	r0, [pc, #20]	; (800f0a8 <Insert_cal_parity+0x2c8>)
 800f092:	f017 fa9d 	bl	80265d0 <puts>
		return;
 800f096:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800f098:	3724      	adds	r7, #36	; 0x24
 800f09a:	46bd      	mov	sp, r7
 800f09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a0:	0802a718 	.word	0x0802a718
 800f0a4:	0802a74c 	.word	0x0802a74c
 800f0a8:	0802a780 	.word	0x0802a780

0800f0ac <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	807b      	strh	r3, [r7, #2]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800f0c4:	787b      	ldrb	r3, [r7, #1]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d133      	bne.n	800f132 <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800f0ca:	887b      	ldrh	r3, [r7, #2]
 800f0cc:	085b      	lsrs	r3, r3, #1
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	3b02      	subs	r3, #2
 800f0d2:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	81fb      	strh	r3, [r7, #14]
 800f0d8:	e025      	b.n	800f126 <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800f0da:	89fb      	ldrh	r3, [r7, #14]
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	4413      	add	r3, r2
 800f0e0:	781a      	ldrb	r2, [r3, #0]
 800f0e2:	89f9      	ldrh	r1, [r7, #14]
 800f0e4:	89bb      	ldrh	r3, [r7, #12]
 800f0e6:	440b      	add	r3, r1
 800f0e8:	3302      	adds	r3, #2
 800f0ea:	6879      	ldr	r1, [r7, #4]
 800f0ec:	440b      	add	r3, r1
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	43db      	mvns	r3, r3
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d013      	beq.n	800f120 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800f0f8:	89fb      	ldrh	r3, [r7, #14]
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	4619      	mov	r1, r3
 800f102:	89fa      	ldrh	r2, [r7, #14]
 800f104:	89bb      	ldrh	r3, [r7, #12]
 800f106:	4413      	add	r3, r2
 800f108:	3302      	adds	r3, #2
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	4413      	add	r3, r2
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	43db      	mvns	r3, r3
 800f112:	b2db      	uxtb	r3, r3
 800f114:	461a      	mov	r2, r3
 800f116:	481a      	ldr	r0, [pc, #104]	; (800f180 <Data_Compliment+0xd4>)
 800f118:	f017 f9be 	bl	8026498 <iprintf>
				return 0;
 800f11c:	2300      	movs	r3, #0
 800f11e:	e02b      	b.n	800f178 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f120:	89fb      	ldrh	r3, [r7, #14]
 800f122:	3301      	adds	r3, #1
 800f124:	81fb      	strh	r3, [r7, #14]
 800f126:	89fa      	ldrh	r2, [r7, #14]
 800f128:	89bb      	ldrh	r3, [r7, #12]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d3d5      	bcc.n	800f0da <Data_Compliment+0x2e>
			}
		}
		return 1;
 800f12e:	2301      	movs	r3, #1
 800f130:	e022      	b.n	800f178 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800f132:	787b      	ldrb	r3, [r7, #1]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d11e      	bne.n	800f176 <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f138:	2300      	movs	r3, #0
 800f13a:	81fb      	strh	r3, [r7, #14]
 800f13c:	e010      	b.n	800f160 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800f13e:	89fb      	ldrh	r3, [r7, #14]
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	4413      	add	r3, r2
 800f144:	781a      	ldrb	r2, [r3, #0]
 800f146:	89fb      	ldrh	r3, [r7, #14]
 800f148:	1c99      	adds	r1, r3, #2
 800f14a:	887b      	ldrh	r3, [r7, #2]
 800f14c:	440b      	add	r3, r1
 800f14e:	4619      	mov	r1, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	440b      	add	r3, r1
 800f154:	43d2      	mvns	r2, r2
 800f156:	b2d2      	uxtb	r2, r2
 800f158:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f15a:	89fb      	ldrh	r3, [r7, #14]
 800f15c:	3301      	adds	r3, #1
 800f15e:	81fb      	strh	r3, [r7, #14]
 800f160:	89fa      	ldrh	r2, [r7, #14]
 800f162:	887b      	ldrh	r3, [r7, #2]
 800f164:	429a      	cmp	r2, r3
 800f166:	d3ea      	bcc.n	800f13e <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800f168:	89fa      	ldrh	r2, [r7, #14]
 800f16a:	887b      	ldrh	r3, [r7, #2]
 800f16c:	4413      	add	r3, r2
 800f16e:	b29b      	uxth	r3, r3
 800f170:	3302      	adds	r3, #2
 800f172:	b29b      	uxth	r3, r3
 800f174:	e000      	b.n	800f178 <Data_Compliment+0xcc>
	}
	return 0;
 800f176:	2300      	movs	r3, #0
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}
 800f180:	0802a790 	.word	0x0802a790

0800f184 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f18e:	4b1a      	ldr	r3, [pc, #104]	; (800f1f8 <CheckToSendReplyorNot+0x74>)
 800f190:	785b      	ldrb	r3, [r3, #1]
 800f192:	2b01      	cmp	r3, #1
 800f194:	d104      	bne.n	800f1a0 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800f196:	79fb      	ldrb	r3, [r7, #7]
 800f198:	f043 0301 	orr.w	r3, r3, #1
 800f19c:	71fb      	strb	r3, [r7, #7]
 800f19e:	e003      	b.n	800f1a8 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800f1a0:	79fb      	ldrb	r3, [r7, #7]
 800f1a2:	f023 0301 	bic.w	r3, r3, #1
 800f1a6:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f1a8:	4b14      	ldr	r3, [pc, #80]	; (800f1fc <CheckToSendReplyorNot+0x78>)
 800f1aa:	785b      	ldrb	r3, [r3, #1]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d104      	bne.n	800f1ba <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800f1b0:	79fb      	ldrb	r3, [r7, #7]
 800f1b2:	f043 0302 	orr.w	r3, r3, #2
 800f1b6:	71fb      	strb	r3, [r7, #7]
 800f1b8:	e003      	b.n	800f1c2 <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800f1ba:	79fb      	ldrb	r3, [r7, #7]
 800f1bc:	f023 0302 	bic.w	r3, r3, #2
 800f1c0:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800f1c2:	79fb      	ldrb	r3, [r7, #7]
 800f1c4:	2b02      	cmp	r3, #2
 800f1c6:	dc02      	bgt.n	800f1ce <CheckToSendReplyorNot+0x4a>
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	da03      	bge.n	800f1d4 <CheckToSendReplyorNot+0x50>
 800f1cc:	e00a      	b.n	800f1e4 <CheckToSendReplyorNot+0x60>
 800f1ce:	2b03      	cmp	r3, #3
 800f1d0:	d004      	beq.n	800f1dc <CheckToSendReplyorNot+0x58>
 800f1d2:	e007      	b.n	800f1e4 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800f1d4:	4b0a      	ldr	r3, [pc, #40]	; (800f200 <CheckToSendReplyorNot+0x7c>)
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	701a      	strb	r2, [r3, #0]
		break;
 800f1da:	e007      	b.n	800f1ec <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
#endif
#ifdef EI_2
		SendReply = 0;
 800f1dc:	4b08      	ldr	r3, [pc, #32]	; (800f200 <CheckToSendReplyorNot+0x7c>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	701a      	strb	r2, [r3, #0]
#endif
		break;
 800f1e2:	e003      	b.n	800f1ec <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800f1e4:	4b06      	ldr	r3, [pc, #24]	; (800f200 <CheckToSendReplyorNot+0x7c>)
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	701a      	strb	r2, [r3, #0]
		break;
 800f1ea:	bf00      	nop
	}

}
 800f1ec:	bf00      	nop
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr
 800f1f8:	20004bd0 	.word	0x20004bd0
 800f1fc:	20004bd4 	.word	0x20004bd4
 800f200:	200062f1 	.word	0x200062f1

0800f204 <PrintSignals>:



void PrintSignals(void)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800f20a:	4b2d      	ldr	r3, [pc, #180]	; (800f2c0 <PrintSignals+0xbc>)
 800f20c:	881b      	ldrh	r3, [r3, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	492c      	ldr	r1, [pc, #176]	; (800f2c4 <PrintSignals+0xc0>)
 800f212:	482d      	ldr	r0, [pc, #180]	; (800f2c8 <PrintSignals+0xc4>)
 800f214:	f017 f830 	bl	8026278 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f218:	2301      	movs	r3, #1
 800f21a:	80fb      	strh	r3, [r7, #6]
 800f21c:	e045      	b.n	800f2aa <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800f21e:	4b2b      	ldr	r3, [pc, #172]	; (800f2cc <PrintSignals+0xc8>)
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	88fa      	ldrh	r2, [r7, #6]
 800f224:	429a      	cmp	r2, r3
 800f226:	d83c      	bhi.n	800f2a2 <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800f228:	88fb      	ldrh	r3, [r7, #6]
 800f22a:	3b01      	subs	r3, #1
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	da00      	bge.n	800f232 <PrintSignals+0x2e>
 800f230:	3307      	adds	r3, #7
 800f232:	10db      	asrs	r3, r3, #3
 800f234:	461a      	mov	r2, r3
 800f236:	4b26      	ldr	r3, [pc, #152]	; (800f2d0 <PrintSignals+0xcc>)
 800f238:	4413      	add	r3, r2
 800f23a:	789b      	ldrb	r3, [r3, #2]
 800f23c:	4619      	mov	r1, r3
 800f23e:	88fb      	ldrh	r3, [r7, #6]
 800f240:	3b01      	subs	r3, #1
 800f242:	425a      	negs	r2, r3
 800f244:	f003 0307 	and.w	r3, r3, #7
 800f248:	f002 0207 	and.w	r2, r2, #7
 800f24c:	bf58      	it	pl
 800f24e:	4253      	negpl	r3, r2
 800f250:	2201      	movs	r2, #1
 800f252:	fa02 f303 	lsl.w	r3, r2, r3
 800f256:	400b      	ands	r3, r1
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dd0c      	ble.n	800f276 <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800f25c:	88fb      	ldrh	r3, [r7, #6]
 800f25e:	1e5a      	subs	r2, r3, #1
 800f260:	4613      	mov	r3, r2
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	00db      	lsls	r3, r3, #3
 800f268:	4a1a      	ldr	r2, [pc, #104]	; (800f2d4 <PrintSignals+0xd0>)
 800f26a:	4413      	add	r3, r2
 800f26c:	4619      	mov	r1, r3
 800f26e:	481a      	ldr	r0, [pc, #104]	; (800f2d8 <PrintSignals+0xd4>)
 800f270:	f017 f912 	bl	8026498 <iprintf>
 800f274:	e00b      	b.n	800f28e <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800f276:	88fb      	ldrh	r3, [r7, #6]
 800f278:	1e5a      	subs	r2, r3, #1
 800f27a:	4613      	mov	r3, r2
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	4413      	add	r3, r2
 800f280:	00db      	lsls	r3, r3, #3
 800f282:	4a14      	ldr	r2, [pc, #80]	; (800f2d4 <PrintSignals+0xd0>)
 800f284:	4413      	add	r3, r2
 800f286:	4619      	mov	r1, r3
 800f288:	4814      	ldr	r0, [pc, #80]	; (800f2dc <PrintSignals+0xd8>)
 800f28a:	f017 f905 	bl	8026498 <iprintf>
		}

		if( (Traverser%2) == 0)
 800f28e:	88fb      	ldrh	r3, [r7, #6]
 800f290:	f003 0301 	and.w	r3, r3, #1
 800f294:	b29b      	uxth	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d104      	bne.n	800f2a4 <PrintSignals+0xa0>
		{
			printf("\n");
 800f29a:	200a      	movs	r0, #10
 800f29c:	f017 f914 	bl	80264c8 <putchar>
 800f2a0:	e000      	b.n	800f2a4 <PrintSignals+0xa0>
			continue;
 800f2a2:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f2a4:	88fb      	ldrh	r3, [r7, #6]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	80fb      	strh	r3, [r7, #6]
 800f2aa:	88fa      	ldrh	r2, [r7, #6]
 800f2ac:	4b08      	ldr	r3, [pc, #32]	; (800f2d0 <PrintSignals+0xcc>)
 800f2ae:	881b      	ldrh	r3, [r3, #0]
 800f2b0:	00db      	lsls	r3, r3, #3
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	ddb3      	ble.n	800f21e <PrintSignals+0x1a>
		}
	}
}
 800f2b6:	bf00      	nop
 800f2b8:	bf00      	nop
 800f2ba:	3708      	adds	r7, #8
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}
 800f2c0:	20004dfc 	.word	0x20004dfc
 800f2c4:	20004e00 	.word	0x20004e00
 800f2c8:	20004bfa 	.word	0x20004bfa
 800f2cc:	20005f04 	.word	0x20005f04
 800f2d0:	20004bf8 	.word	0x20004bf8
 800f2d4:	20005414 	.word	0x20005414
 800f2d8:	0802a7c8 	.word	0x0802a7c8
 800f2dc:	0802a7d8 	.word	0x0802a7d8

0800f2e0 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	607b      	str	r3, [r7, #4]

	Get_time();
 800f2f2:	f7fd f9f5 	bl	800c6e0 <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800f2f6:	4b21      	ldr	r3, [pc, #132]	; (800f37c <GetTimeStamp+0x9c>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f300:	fb03 f202 	mul.w	r2, r3, r2
 800f304:	4b1d      	ldr	r3, [pc, #116]	; (800f37c <GetTimeStamp+0x9c>)
 800f306:	785b      	ldrb	r3, [r3, #1]
 800f308:	4619      	mov	r1, r3
 800f30a:	460b      	mov	r3, r1
 800f30c:	011b      	lsls	r3, r3, #4
 800f30e:	1a5b      	subs	r3, r3, r1
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4413      	add	r3, r2
 800f314:	4a19      	ldr	r2, [pc, #100]	; (800f37c <GetTimeStamp+0x9c>)
 800f316:	7892      	ldrb	r2, [r2, #2]
 800f318:	4413      	add	r3, r2
 800f31a:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800f31c:	4b18      	ldr	r3, [pc, #96]	; (800f380 <GetTimeStamp+0xa0>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	429a      	cmp	r2, r3
 800f324:	d007      	beq.n	800f336 <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800f326:	4a16      	ldr	r2, [pc, #88]	; (800f380 <GetTimeStamp+0xa0>)
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800f32c:	f00a f8aa 	bl	8019484 <HAL_GetTick>
 800f330:	4603      	mov	r3, r0
 800f332:	4a14      	ldr	r2, [pc, #80]	; (800f384 <GetTimeStamp+0xa4>)
 800f334:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800f336:	4b13      	ldr	r3, [pc, #76]	; (800f384 <GetTimeStamp+0xa4>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f000 fe1c 	bl	800ff78 <HAL_Elaps_Ticks>
 800f340:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	4613      	mov	r3, r2
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	4413      	add	r3, r2
 800f34a:	005b      	lsls	r3, r3, #1
 800f34c:	4619      	mov	r1, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a0d      	ldr	r2, [pc, #52]	; (800f388 <GetTimeStamp+0xa8>)
 800f352:	fba2 2303 	umull	r2, r3, r2, r3
 800f356:	095b      	lsrs	r3, r3, #5
 800f358:	440b      	add	r3, r1
 800f35a:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800f35c:	4b0b      	ldr	r3, [pc, #44]	; (800f38c <GetTimeStamp+0xac>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	429a      	cmp	r2, r3
 800f364:	d005      	beq.n	800f372 <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800f366:	4a09      	ldr	r2, [pc, #36]	; (800f38c <GetTimeStamp+0xac>)
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800f36c:	4a08      	ldr	r2, [pc, #32]	; (800f390 <GetTimeStamp+0xb0>)
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800f372:	bf00      	nop
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	20003f38 	.word	0x20003f38
 800f380:	200062f8 	.word	0x200062f8
 800f384:	200062fc 	.word	0x200062fc
 800f388:	51eb851f 	.word	0x51eb851f
 800f38c:	20006300 	.word	0x20006300
 800f390:	20005410 	.word	0x20005410

0800f394 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800f394:	b490      	push	{r4, r7}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	1c5a      	adds	r2, r3, #1
 800f3a2:	71fa      	strb	r2, [r7, #7]
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4413      	add	r3, r2
 800f3ac:	00db      	lsls	r3, r3, #3
 800f3ae:	4acd      	ldr	r2, [pc, #820]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f3b0:	4413      	add	r3, r2
 800f3b2:	4acd      	ldr	r2, [pc, #820]	; (800f6e8 <UpdateSIGNALSNames+0x354>)
 800f3b4:	6810      	ldr	r0, [r2, #0]
 800f3b6:	6018      	str	r0, [r3, #0]
 800f3b8:	8892      	ldrh	r2, [r2, #4]
 800f3ba:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800f3bc:	79fb      	ldrb	r3, [r7, #7]
 800f3be:	1c5a      	adds	r2, r3, #1
 800f3c0:	71fa      	strb	r2, [r7, #7]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	4413      	add	r3, r2
 800f3ca:	00db      	lsls	r3, r3, #3
 800f3cc:	4ac5      	ldr	r2, [pc, #788]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f3ce:	4413      	add	r3, r2
 800f3d0:	4ac6      	ldr	r2, [pc, #792]	; (800f6ec <UpdateSIGNALSNames+0x358>)
 800f3d2:	6810      	ldr	r0, [r2, #0]
 800f3d4:	6018      	str	r0, [r3, #0]
 800f3d6:	8892      	ldrh	r2, [r2, #4]
 800f3d8:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800f3da:	79fb      	ldrb	r3, [r7, #7]
 800f3dc:	1c5a      	adds	r2, r3, #1
 800f3de:	71fa      	strb	r2, [r7, #7]
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	4413      	add	r3, r2
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	4abe      	ldr	r2, [pc, #760]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f3ec:	4413      	add	r3, r2
 800f3ee:	4ac0      	ldr	r2, [pc, #768]	; (800f6f0 <UpdateSIGNALSNames+0x35c>)
 800f3f0:	6810      	ldr	r0, [r2, #0]
 800f3f2:	6018      	str	r0, [r3, #0]
 800f3f4:	8892      	ldrh	r2, [r2, #4]
 800f3f6:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800f3f8:	79fb      	ldrb	r3, [r7, #7]
 800f3fa:	1c5a      	adds	r2, r3, #1
 800f3fc:	71fa      	strb	r2, [r7, #7]
 800f3fe:	461a      	mov	r2, r3
 800f400:	4613      	mov	r3, r2
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	4413      	add	r3, r2
 800f406:	00db      	lsls	r3, r3, #3
 800f408:	4ab6      	ldr	r2, [pc, #728]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f40a:	4413      	add	r3, r2
 800f40c:	4ab9      	ldr	r2, [pc, #740]	; (800f6f4 <UpdateSIGNALSNames+0x360>)
 800f40e:	6810      	ldr	r0, [r2, #0]
 800f410:	6018      	str	r0, [r3, #0]
 800f412:	8892      	ldrh	r2, [r2, #4]
 800f414:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800f416:	79fb      	ldrb	r3, [r7, #7]
 800f418:	1c5a      	adds	r2, r3, #1
 800f41a:	71fa      	strb	r2, [r7, #7]
 800f41c:	461a      	mov	r2, r3
 800f41e:	4613      	mov	r3, r2
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	4413      	add	r3, r2
 800f424:	00db      	lsls	r3, r3, #3
 800f426:	4aaf      	ldr	r2, [pc, #700]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f428:	4413      	add	r3, r2
 800f42a:	4ab3      	ldr	r2, [pc, #716]	; (800f6f8 <UpdateSIGNALSNames+0x364>)
 800f42c:	6810      	ldr	r0, [r2, #0]
 800f42e:	6018      	str	r0, [r3, #0]
 800f430:	8892      	ldrh	r2, [r2, #4]
 800f432:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800f434:	79fb      	ldrb	r3, [r7, #7]
 800f436:	1c5a      	adds	r2, r3, #1
 800f438:	71fa      	strb	r2, [r7, #7]
 800f43a:	461a      	mov	r2, r3
 800f43c:	4613      	mov	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	00db      	lsls	r3, r3, #3
 800f444:	4aa7      	ldr	r2, [pc, #668]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f446:	4413      	add	r3, r2
 800f448:	4aac      	ldr	r2, [pc, #688]	; (800f6fc <UpdateSIGNALSNames+0x368>)
 800f44a:	6810      	ldr	r0, [r2, #0]
 800f44c:	6018      	str	r0, [r3, #0]
 800f44e:	8891      	ldrh	r1, [r2, #4]
 800f450:	7992      	ldrb	r2, [r2, #6]
 800f452:	8099      	strh	r1, [r3, #4]
 800f454:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800f456:	79fb      	ldrb	r3, [r7, #7]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	71fa      	strb	r2, [r7, #7]
 800f45c:	461a      	mov	r2, r3
 800f45e:	4613      	mov	r3, r2
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	4413      	add	r3, r2
 800f464:	00db      	lsls	r3, r3, #3
 800f466:	4a9f      	ldr	r2, [pc, #636]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f468:	4413      	add	r3, r2
 800f46a:	4aa5      	ldr	r2, [pc, #660]	; (800f700 <UpdateSIGNALSNames+0x36c>)
 800f46c:	6810      	ldr	r0, [r2, #0]
 800f46e:	6018      	str	r0, [r3, #0]
 800f470:	8891      	ldrh	r1, [r2, #4]
 800f472:	7992      	ldrb	r2, [r2, #6]
 800f474:	8099      	strh	r1, [r3, #4]
 800f476:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800f478:	79fb      	ldrb	r3, [r7, #7]
 800f47a:	1c5a      	adds	r2, r3, #1
 800f47c:	71fa      	strb	r2, [r7, #7]
 800f47e:	461a      	mov	r2, r3
 800f480:	4613      	mov	r3, r2
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	4413      	add	r3, r2
 800f486:	00db      	lsls	r3, r3, #3
 800f488:	4a96      	ldr	r2, [pc, #600]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f48a:	4413      	add	r3, r2
 800f48c:	4a9d      	ldr	r2, [pc, #628]	; (800f704 <UpdateSIGNALSNames+0x370>)
 800f48e:	6810      	ldr	r0, [r2, #0]
 800f490:	6018      	str	r0, [r3, #0]
 800f492:	7912      	ldrb	r2, [r2, #4]
 800f494:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800f496:	79fb      	ldrb	r3, [r7, #7]
 800f498:	1c5a      	adds	r2, r3, #1
 800f49a:	71fa      	strb	r2, [r7, #7]
 800f49c:	461a      	mov	r2, r3
 800f49e:	4613      	mov	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	4a8f      	ldr	r2, [pc, #572]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f4a8:	4413      	add	r3, r2
 800f4aa:	4997      	ldr	r1, [pc, #604]	; (800f708 <UpdateSIGNALSNames+0x374>)
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	cb03      	ldmia	r3!, {r0, r1}
 800f4b2:	6010      	str	r0, [r2, #0]
 800f4b4:	6051      	str	r1, [r2, #4]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800f4ba:	79fb      	ldrb	r3, [r7, #7]
 800f4bc:	1c5a      	adds	r2, r3, #1
 800f4be:	71fa      	strb	r2, [r7, #7]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	4a86      	ldr	r2, [pc, #536]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f4cc:	4413      	add	r3, r2
 800f4ce:	4a8f      	ldr	r2, [pc, #572]	; (800f70c <UpdateSIGNALSNames+0x378>)
 800f4d0:	6810      	ldr	r0, [r2, #0]
 800f4d2:	6018      	str	r0, [r3, #0]
 800f4d4:	8892      	ldrh	r2, [r2, #4]
 800f4d6:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800f4d8:	79fb      	ldrb	r3, [r7, #7]
 800f4da:	1c5a      	adds	r2, r3, #1
 800f4dc:	71fa      	strb	r2, [r7, #7]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	4413      	add	r3, r2
 800f4e6:	00db      	lsls	r3, r3, #3
 800f4e8:	4a7e      	ldr	r2, [pc, #504]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f4ea:	4413      	add	r3, r2
 800f4ec:	4988      	ldr	r1, [pc, #544]	; (800f710 <UpdateSIGNALSNames+0x37c>)
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	cb03      	ldmia	r3!, {r0, r1}
 800f4f4:	6010      	str	r0, [r2, #0]
 800f4f6:	6051      	str	r1, [r2, #4]
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	1c5a      	adds	r2, r3, #1
 800f500:	71fa      	strb	r2, [r7, #7]
 800f502:	461a      	mov	r2, r3
 800f504:	4613      	mov	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	4413      	add	r3, r2
 800f50a:	00db      	lsls	r3, r3, #3
 800f50c:	4a75      	ldr	r2, [pc, #468]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f50e:	4413      	add	r3, r2
 800f510:	4980      	ldr	r1, [pc, #512]	; (800f714 <UpdateSIGNALSNames+0x380>)
 800f512:	461a      	mov	r2, r3
 800f514:	460b      	mov	r3, r1
 800f516:	cb03      	ldmia	r3!, {r0, r1}
 800f518:	6010      	str	r0, [r2, #0]
 800f51a:	6051      	str	r1, [r2, #4]
 800f51c:	8819      	ldrh	r1, [r3, #0]
 800f51e:	789b      	ldrb	r3, [r3, #2]
 800f520:	8111      	strh	r1, [r2, #8]
 800f522:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800f524:	79fb      	ldrb	r3, [r7, #7]
 800f526:	1c5a      	adds	r2, r3, #1
 800f528:	71fa      	strb	r2, [r7, #7]
 800f52a:	461a      	mov	r2, r3
 800f52c:	4613      	mov	r3, r2
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4413      	add	r3, r2
 800f532:	00db      	lsls	r3, r3, #3
 800f534:	4a6b      	ldr	r2, [pc, #428]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f536:	4413      	add	r3, r2
 800f538:	4977      	ldr	r1, [pc, #476]	; (800f718 <UpdateSIGNALSNames+0x384>)
 800f53a:	461a      	mov	r2, r3
 800f53c:	460b      	mov	r3, r1
 800f53e:	cb03      	ldmia	r3!, {r0, r1}
 800f540:	6010      	str	r0, [r2, #0]
 800f542:	6051      	str	r1, [r2, #4]
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800f548:	79fb      	ldrb	r3, [r7, #7]
 800f54a:	1c5a      	adds	r2, r3, #1
 800f54c:	71fa      	strb	r2, [r7, #7]
 800f54e:	461a      	mov	r2, r3
 800f550:	4613      	mov	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4413      	add	r3, r2
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	4a62      	ldr	r2, [pc, #392]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f55a:	4413      	add	r3, r2
 800f55c:	496f      	ldr	r1, [pc, #444]	; (800f71c <UpdateSIGNALSNames+0x388>)
 800f55e:	461a      	mov	r2, r3
 800f560:	460b      	mov	r3, r1
 800f562:	cb03      	ldmia	r3!, {r0, r1}
 800f564:	6010      	str	r0, [r2, #0]
 800f566:	6051      	str	r1, [r2, #4]
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800f56c:	79fb      	ldrb	r3, [r7, #7]
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	71fa      	strb	r2, [r7, #7]
 800f572:	461a      	mov	r2, r3
 800f574:	4613      	mov	r3, r2
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	4413      	add	r3, r2
 800f57a:	00db      	lsls	r3, r3, #3
 800f57c:	4a59      	ldr	r2, [pc, #356]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f57e:	4413      	add	r3, r2
 800f580:	4967      	ldr	r1, [pc, #412]	; (800f720 <UpdateSIGNALSNames+0x38c>)
 800f582:	461a      	mov	r2, r3
 800f584:	460b      	mov	r3, r1
 800f586:	cb03      	ldmia	r3!, {r0, r1}
 800f588:	6010      	str	r0, [r2, #0]
 800f58a:	6051      	str	r1, [r2, #4]
 800f58c:	8819      	ldrh	r1, [r3, #0]
 800f58e:	789b      	ldrb	r3, [r3, #2]
 800f590:	8111      	strh	r1, [r2, #8]
 800f592:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800f594:	79fb      	ldrb	r3, [r7, #7]
 800f596:	1c5a      	adds	r2, r3, #1
 800f598:	71fa      	strb	r2, [r7, #7]
 800f59a:	461a      	mov	r2, r3
 800f59c:	4613      	mov	r3, r2
 800f59e:	009b      	lsls	r3, r3, #2
 800f5a0:	4413      	add	r3, r2
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	4a4f      	ldr	r2, [pc, #316]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f5a6:	4413      	add	r3, r2
 800f5a8:	495e      	ldr	r1, [pc, #376]	; (800f724 <UpdateSIGNALSNames+0x390>)
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	cb03      	ldmia	r3!, {r0, r1}
 800f5b0:	6010      	str	r0, [r2, #0]
 800f5b2:	6051      	str	r1, [r2, #4]
 800f5b4:	881b      	ldrh	r3, [r3, #0]
 800f5b6:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800f5b8:	79fb      	ldrb	r3, [r7, #7]
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	71fa      	strb	r2, [r7, #7]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4413      	add	r3, r2
 800f5c6:	00db      	lsls	r3, r3, #3
 800f5c8:	4a46      	ldr	r2, [pc, #280]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f5ca:	4413      	add	r3, r2
 800f5cc:	4a56      	ldr	r2, [pc, #344]	; (800f728 <UpdateSIGNALSNames+0x394>)
 800f5ce:	6810      	ldr	r0, [r2, #0]
 800f5d0:	6018      	str	r0, [r3, #0]
 800f5d2:	8891      	ldrh	r1, [r2, #4]
 800f5d4:	7992      	ldrb	r2, [r2, #6]
 800f5d6:	8099      	strh	r1, [r3, #4]
 800f5d8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800f5da:	79fb      	ldrb	r3, [r7, #7]
 800f5dc:	1c5a      	adds	r2, r3, #1
 800f5de:	71fa      	strb	r2, [r7, #7]
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	4413      	add	r3, r2
 800f5e8:	00db      	lsls	r3, r3, #3
 800f5ea:	4a3e      	ldr	r2, [pc, #248]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f5ec:	4413      	add	r3, r2
 800f5ee:	4a4f      	ldr	r2, [pc, #316]	; (800f72c <UpdateSIGNALSNames+0x398>)
 800f5f0:	6810      	ldr	r0, [r2, #0]
 800f5f2:	6018      	str	r0, [r3, #0]
 800f5f4:	8891      	ldrh	r1, [r2, #4]
 800f5f6:	7992      	ldrb	r2, [r2, #6]
 800f5f8:	8099      	strh	r1, [r3, #4]
 800f5fa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800f5fc:	79fb      	ldrb	r3, [r7, #7]
 800f5fe:	1c5a      	adds	r2, r3, #1
 800f600:	71fa      	strb	r2, [r7, #7]
 800f602:	461a      	mov	r2, r3
 800f604:	4613      	mov	r3, r2
 800f606:	009b      	lsls	r3, r3, #2
 800f608:	4413      	add	r3, r2
 800f60a:	00db      	lsls	r3, r3, #3
 800f60c:	4a35      	ldr	r2, [pc, #212]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f60e:	4413      	add	r3, r2
 800f610:	4a47      	ldr	r2, [pc, #284]	; (800f730 <UpdateSIGNALSNames+0x39c>)
 800f612:	6810      	ldr	r0, [r2, #0]
 800f614:	6018      	str	r0, [r3, #0]
 800f616:	8891      	ldrh	r1, [r2, #4]
 800f618:	7992      	ldrb	r2, [r2, #6]
 800f61a:	8099      	strh	r1, [r3, #4]
 800f61c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	1c5a      	adds	r2, r3, #1
 800f622:	71fa      	strb	r2, [r7, #7]
 800f624:	461a      	mov	r2, r3
 800f626:	4613      	mov	r3, r2
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	4413      	add	r3, r2
 800f62c:	00db      	lsls	r3, r3, #3
 800f62e:	4a2d      	ldr	r2, [pc, #180]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f630:	4413      	add	r3, r2
 800f632:	4a40      	ldr	r2, [pc, #256]	; (800f734 <UpdateSIGNALSNames+0x3a0>)
 800f634:	6810      	ldr	r0, [r2, #0]
 800f636:	6018      	str	r0, [r3, #0]
 800f638:	8891      	ldrh	r1, [r2, #4]
 800f63a:	7992      	ldrb	r2, [r2, #6]
 800f63c:	8099      	strh	r1, [r3, #4]
 800f63e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800f640:	79fb      	ldrb	r3, [r7, #7]
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	71fa      	strb	r2, [r7, #7]
 800f646:	461a      	mov	r2, r3
 800f648:	4613      	mov	r3, r2
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	4413      	add	r3, r2
 800f64e:	00db      	lsls	r3, r3, #3
 800f650:	4a24      	ldr	r2, [pc, #144]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f652:	4413      	add	r3, r2
 800f654:	4938      	ldr	r1, [pc, #224]	; (800f738 <UpdateSIGNALSNames+0x3a4>)
 800f656:	461a      	mov	r2, r3
 800f658:	460b      	mov	r3, r1
 800f65a:	cb03      	ldmia	r3!, {r0, r1}
 800f65c:	6010      	str	r0, [r2, #0]
 800f65e:	6051      	str	r1, [r2, #4]
 800f660:	8819      	ldrh	r1, [r3, #0]
 800f662:	789b      	ldrb	r3, [r3, #2]
 800f664:	8111      	strh	r1, [r2, #8]
 800f666:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	71fa      	strb	r2, [r7, #7]
 800f66e:	461a      	mov	r2, r3
 800f670:	4613      	mov	r3, r2
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4413      	add	r3, r2
 800f676:	00db      	lsls	r3, r3, #3
 800f678:	4a1a      	ldr	r2, [pc, #104]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f67a:	4413      	add	r3, r2
 800f67c:	4a2f      	ldr	r2, [pc, #188]	; (800f73c <UpdateSIGNALSNames+0x3a8>)
 800f67e:	6810      	ldr	r0, [r2, #0]
 800f680:	6018      	str	r0, [r3, #0]
 800f682:	8891      	ldrh	r1, [r2, #4]
 800f684:	7992      	ldrb	r2, [r2, #6]
 800f686:	8099      	strh	r1, [r3, #4]
 800f688:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	1c5a      	adds	r2, r3, #1
 800f68e:	71fa      	strb	r2, [r7, #7]
 800f690:	461a      	mov	r2, r3
 800f692:	4613      	mov	r3, r2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4413      	add	r3, r2
 800f698:	00db      	lsls	r3, r3, #3
 800f69a:	4a12      	ldr	r2, [pc, #72]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f69c:	4413      	add	r3, r2
 800f69e:	4a28      	ldr	r2, [pc, #160]	; (800f740 <UpdateSIGNALSNames+0x3ac>)
 800f6a0:	6810      	ldr	r0, [r2, #0]
 800f6a2:	6018      	str	r0, [r3, #0]
 800f6a4:	8891      	ldrh	r1, [r2, #4]
 800f6a6:	7992      	ldrb	r2, [r2, #6]
 800f6a8:	8099      	strh	r1, [r3, #4]
 800f6aa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800f6ac:	79fb      	ldrb	r3, [r7, #7]
 800f6ae:	1c5a      	adds	r2, r3, #1
 800f6b0:	71fa      	strb	r2, [r7, #7]
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	4613      	mov	r3, r2
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	4413      	add	r3, r2
 800f6ba:	00db      	lsls	r3, r3, #3
 800f6bc:	4a09      	ldr	r2, [pc, #36]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f6be:	4413      	add	r3, r2
 800f6c0:	4a20      	ldr	r2, [pc, #128]	; (800f744 <UpdateSIGNALSNames+0x3b0>)
 800f6c2:	6810      	ldr	r0, [r2, #0]
 800f6c4:	6018      	str	r0, [r3, #0]
 800f6c6:	8891      	ldrh	r1, [r2, #4]
 800f6c8:	7992      	ldrb	r2, [r2, #6]
 800f6ca:	8099      	strh	r1, [r3, #4]
 800f6cc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800f6ce:	79fb      	ldrb	r3, [r7, #7]
 800f6d0:	1c5a      	adds	r2, r3, #1
 800f6d2:	71fa      	strb	r2, [r7, #7]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	4413      	add	r3, r2
 800f6dc:	00db      	lsls	r3, r3, #3
 800f6de:	4a01      	ldr	r2, [pc, #4]	; (800f6e4 <UpdateSIGNALSNames+0x350>)
 800f6e0:	4413      	add	r3, r2
 800f6e2:	e031      	b.n	800f748 <UpdateSIGNALSNames+0x3b4>
 800f6e4:	20005414 	.word	0x20005414
 800f6e8:	0802a7e8 	.word	0x0802a7e8
 800f6ec:	0802a7f0 	.word	0x0802a7f0
 800f6f0:	0802a7f8 	.word	0x0802a7f8
 800f6f4:	0802a800 	.word	0x0802a800
 800f6f8:	0802a808 	.word	0x0802a808
 800f6fc:	0802a810 	.word	0x0802a810
 800f700:	0802a818 	.word	0x0802a818
 800f704:	0802a820 	.word	0x0802a820
 800f708:	0802a828 	.word	0x0802a828
 800f70c:	0802a834 	.word	0x0802a834
 800f710:	0802a83c 	.word	0x0802a83c
 800f714:	0802a848 	.word	0x0802a848
 800f718:	0802a854 	.word	0x0802a854
 800f71c:	0802a860 	.word	0x0802a860
 800f720:	0802a86c 	.word	0x0802a86c
 800f724:	0802a878 	.word	0x0802a878
 800f728:	0802a884 	.word	0x0802a884
 800f72c:	0802a88c 	.word	0x0802a88c
 800f730:	0802a894 	.word	0x0802a894
 800f734:	0802a89c 	.word	0x0802a89c
 800f738:	0802a8a4 	.word	0x0802a8a4
 800f73c:	0802a8b0 	.word	0x0802a8b0
 800f740:	0802a8b8 	.word	0x0802a8b8
 800f744:	0802a8c0 	.word	0x0802a8c0
 800f748:	4acd      	ldr	r2, [pc, #820]	; (800fa80 <UpdateSIGNALSNames+0x6ec>)
 800f74a:	6810      	ldr	r0, [r2, #0]
 800f74c:	6018      	str	r0, [r3, #0]
 800f74e:	8891      	ldrh	r1, [r2, #4]
 800f750:	7992      	ldrb	r2, [r2, #6]
 800f752:	8099      	strh	r1, [r3, #4]
 800f754:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	1c5a      	adds	r2, r3, #1
 800f75a:	71fa      	strb	r2, [r7, #7]
 800f75c:	461a      	mov	r2, r3
 800f75e:	4613      	mov	r3, r2
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	4413      	add	r3, r2
 800f764:	00db      	lsls	r3, r3, #3
 800f766:	4ac7      	ldr	r2, [pc, #796]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f768:	4413      	add	r3, r2
 800f76a:	4ac7      	ldr	r2, [pc, #796]	; (800fa88 <UpdateSIGNALSNames+0x6f4>)
 800f76c:	6810      	ldr	r0, [r2, #0]
 800f76e:	6018      	str	r0, [r3, #0]
 800f770:	8891      	ldrh	r1, [r2, #4]
 800f772:	7992      	ldrb	r2, [r2, #6]
 800f774:	8099      	strh	r1, [r3, #4]
 800f776:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800f778:	79fb      	ldrb	r3, [r7, #7]
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	71fa      	strb	r2, [r7, #7]
 800f77e:	461a      	mov	r2, r3
 800f780:	4613      	mov	r3, r2
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	4413      	add	r3, r2
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	4abe      	ldr	r2, [pc, #760]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f78a:	4413      	add	r3, r2
 800f78c:	4abf      	ldr	r2, [pc, #764]	; (800fa8c <UpdateSIGNALSNames+0x6f8>)
 800f78e:	6810      	ldr	r0, [r2, #0]
 800f790:	6018      	str	r0, [r3, #0]
 800f792:	8891      	ldrh	r1, [r2, #4]
 800f794:	7992      	ldrb	r2, [r2, #6]
 800f796:	8099      	strh	r1, [r3, #4]
 800f798:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800f79a:	79fb      	ldrb	r3, [r7, #7]
 800f79c:	1c5a      	adds	r2, r3, #1
 800f79e:	71fa      	strb	r2, [r7, #7]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	4613      	mov	r3, r2
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	4413      	add	r3, r2
 800f7a8:	00db      	lsls	r3, r3, #3
 800f7aa:	4ab6      	ldr	r2, [pc, #728]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f7ac:	4413      	add	r3, r2
 800f7ae:	4ab8      	ldr	r2, [pc, #736]	; (800fa90 <UpdateSIGNALSNames+0x6fc>)
 800f7b0:	6810      	ldr	r0, [r2, #0]
 800f7b2:	6018      	str	r0, [r3, #0]
 800f7b4:	8891      	ldrh	r1, [r2, #4]
 800f7b6:	7992      	ldrb	r2, [r2, #6]
 800f7b8:	8099      	strh	r1, [r3, #4]
 800f7ba:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	1c5a      	adds	r2, r3, #1
 800f7c0:	71fa      	strb	r2, [r7, #7]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	00db      	lsls	r3, r3, #3
 800f7cc:	4aad      	ldr	r2, [pc, #692]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f7ce:	4413      	add	r3, r2
 800f7d0:	49b0      	ldr	r1, [pc, #704]	; (800fa94 <UpdateSIGNALSNames+0x700>)
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	cb03      	ldmia	r3!, {r0, r1}
 800f7d8:	6010      	str	r0, [r2, #0]
 800f7da:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800f7dc:	79fb      	ldrb	r3, [r7, #7]
 800f7de:	1c5a      	adds	r2, r3, #1
 800f7e0:	71fa      	strb	r2, [r7, #7]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	4613      	mov	r3, r2
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	4413      	add	r3, r2
 800f7ea:	00db      	lsls	r3, r3, #3
 800f7ec:	4aa5      	ldr	r2, [pc, #660]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f7ee:	4413      	add	r3, r2
 800f7f0:	49a9      	ldr	r1, [pc, #676]	; (800fa98 <UpdateSIGNALSNames+0x704>)
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	cb03      	ldmia	r3!, {r0, r1}
 800f7f8:	6010      	str	r0, [r2, #0]
 800f7fa:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800f7fc:	79fb      	ldrb	r3, [r7, #7]
 800f7fe:	1c5a      	adds	r2, r3, #1
 800f800:	71fa      	strb	r2, [r7, #7]
 800f802:	461a      	mov	r2, r3
 800f804:	4613      	mov	r3, r2
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	00db      	lsls	r3, r3, #3
 800f80c:	4a9d      	ldr	r2, [pc, #628]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f80e:	4413      	add	r3, r2
 800f810:	49a2      	ldr	r1, [pc, #648]	; (800fa9c <UpdateSIGNALSNames+0x708>)
 800f812:	461a      	mov	r2, r3
 800f814:	460b      	mov	r3, r1
 800f816:	cb03      	ldmia	r3!, {r0, r1}
 800f818:	6010      	str	r0, [r2, #0]
 800f81a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800f81c:	79fb      	ldrb	r3, [r7, #7]
 800f81e:	1c5a      	adds	r2, r3, #1
 800f820:	71fa      	strb	r2, [r7, #7]
 800f822:	461a      	mov	r2, r3
 800f824:	4613      	mov	r3, r2
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	4413      	add	r3, r2
 800f82a:	00db      	lsls	r3, r3, #3
 800f82c:	4a95      	ldr	r2, [pc, #596]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f82e:	4413      	add	r3, r2
 800f830:	499b      	ldr	r1, [pc, #620]	; (800faa0 <UpdateSIGNALSNames+0x70c>)
 800f832:	461a      	mov	r2, r3
 800f834:	460b      	mov	r3, r1
 800f836:	cb03      	ldmia	r3!, {r0, r1}
 800f838:	6010      	str	r0, [r2, #0]
 800f83a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800f83c:	79fb      	ldrb	r3, [r7, #7]
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	71fa      	strb	r2, [r7, #7]
 800f842:	461a      	mov	r2, r3
 800f844:	4613      	mov	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	4413      	add	r3, r2
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	4a8d      	ldr	r2, [pc, #564]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f84e:	4413      	add	r3, r2
 800f850:	4994      	ldr	r1, [pc, #592]	; (800faa4 <UpdateSIGNALSNames+0x710>)
 800f852:	461a      	mov	r2, r3
 800f854:	460b      	mov	r3, r1
 800f856:	cb03      	ldmia	r3!, {r0, r1}
 800f858:	6010      	str	r0, [r2, #0]
 800f85a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800f85c:	79fb      	ldrb	r3, [r7, #7]
 800f85e:	1c5a      	adds	r2, r3, #1
 800f860:	71fa      	strb	r2, [r7, #7]
 800f862:	461a      	mov	r2, r3
 800f864:	4613      	mov	r3, r2
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	4413      	add	r3, r2
 800f86a:	00db      	lsls	r3, r3, #3
 800f86c:	4a85      	ldr	r2, [pc, #532]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f86e:	4413      	add	r3, r2
 800f870:	498d      	ldr	r1, [pc, #564]	; (800faa8 <UpdateSIGNALSNames+0x714>)
 800f872:	461a      	mov	r2, r3
 800f874:	460b      	mov	r3, r1
 800f876:	cb03      	ldmia	r3!, {r0, r1}
 800f878:	6010      	str	r0, [r2, #0]
 800f87a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800f87c:	79fb      	ldrb	r3, [r7, #7]
 800f87e:	1c5a      	adds	r2, r3, #1
 800f880:	71fa      	strb	r2, [r7, #7]
 800f882:	461a      	mov	r2, r3
 800f884:	4613      	mov	r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	4413      	add	r3, r2
 800f88a:	00db      	lsls	r3, r3, #3
 800f88c:	4a7d      	ldr	r2, [pc, #500]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f88e:	4413      	add	r3, r2
 800f890:	4986      	ldr	r1, [pc, #536]	; (800faac <UpdateSIGNALSNames+0x718>)
 800f892:	461a      	mov	r2, r3
 800f894:	460b      	mov	r3, r1
 800f896:	cb03      	ldmia	r3!, {r0, r1}
 800f898:	6010      	str	r0, [r2, #0]
 800f89a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	71fa      	strb	r2, [r7, #7]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	009b      	lsls	r3, r3, #2
 800f8a8:	4413      	add	r3, r2
 800f8aa:	00db      	lsls	r3, r3, #3
 800f8ac:	4a75      	ldr	r2, [pc, #468]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f8ae:	4413      	add	r3, r2
 800f8b0:	497f      	ldr	r1, [pc, #508]	; (800fab0 <UpdateSIGNALSNames+0x71c>)
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	cb03      	ldmia	r3!, {r0, r1}
 800f8b8:	6010      	str	r0, [r2, #0]
 800f8ba:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800f8bc:	79fb      	ldrb	r3, [r7, #7]
 800f8be:	1c5a      	adds	r2, r3, #1
 800f8c0:	71fa      	strb	r2, [r7, #7]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	00db      	lsls	r3, r3, #3
 800f8cc:	4a6d      	ldr	r2, [pc, #436]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f8ce:	4413      	add	r3, r2
 800f8d0:	4978      	ldr	r1, [pc, #480]	; (800fab4 <UpdateSIGNALSNames+0x720>)
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	cb03      	ldmia	r3!, {r0, r1}
 800f8d8:	6010      	str	r0, [r2, #0]
 800f8da:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800f8dc:	79fb      	ldrb	r3, [r7, #7]
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	71fa      	strb	r2, [r7, #7]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	4413      	add	r3, r2
 800f8ea:	00db      	lsls	r3, r3, #3
 800f8ec:	4a65      	ldr	r2, [pc, #404]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f8ee:	4413      	add	r3, r2
 800f8f0:	4971      	ldr	r1, [pc, #452]	; (800fab8 <UpdateSIGNALSNames+0x724>)
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	cb03      	ldmia	r3!, {r0, r1}
 800f8f8:	6010      	str	r0, [r2, #0]
 800f8fa:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800f8fc:	79fb      	ldrb	r3, [r7, #7]
 800f8fe:	1c5a      	adds	r2, r3, #1
 800f900:	71fa      	strb	r2, [r7, #7]
 800f902:	461a      	mov	r2, r3
 800f904:	4613      	mov	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4413      	add	r3, r2
 800f90a:	00db      	lsls	r3, r3, #3
 800f90c:	4a5d      	ldr	r2, [pc, #372]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f90e:	4413      	add	r3, r2
 800f910:	496a      	ldr	r1, [pc, #424]	; (800fabc <UpdateSIGNALSNames+0x728>)
 800f912:	461a      	mov	r2, r3
 800f914:	460b      	mov	r3, r1
 800f916:	cb03      	ldmia	r3!, {r0, r1}
 800f918:	6010      	str	r0, [r2, #0]
 800f91a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	71fa      	strb	r2, [r7, #7]
 800f922:	461a      	mov	r2, r3
 800f924:	4613      	mov	r3, r2
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	4413      	add	r3, r2
 800f92a:	00db      	lsls	r3, r3, #3
 800f92c:	4a55      	ldr	r2, [pc, #340]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f92e:	4413      	add	r3, r2
 800f930:	4963      	ldr	r1, [pc, #396]	; (800fac0 <UpdateSIGNALSNames+0x72c>)
 800f932:	461a      	mov	r2, r3
 800f934:	460b      	mov	r3, r1
 800f936:	cb03      	ldmia	r3!, {r0, r1}
 800f938:	6010      	str	r0, [r2, #0]
 800f93a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800f93c:	79fb      	ldrb	r3, [r7, #7]
 800f93e:	1c5a      	adds	r2, r3, #1
 800f940:	71fa      	strb	r2, [r7, #7]
 800f942:	461a      	mov	r2, r3
 800f944:	4613      	mov	r3, r2
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	4413      	add	r3, r2
 800f94a:	00db      	lsls	r3, r3, #3
 800f94c:	4a4d      	ldr	r2, [pc, #308]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f94e:	4413      	add	r3, r2
 800f950:	495c      	ldr	r1, [pc, #368]	; (800fac4 <UpdateSIGNALSNames+0x730>)
 800f952:	461a      	mov	r2, r3
 800f954:	460b      	mov	r3, r1
 800f956:	cb03      	ldmia	r3!, {r0, r1}
 800f958:	6010      	str	r0, [r2, #0]
 800f95a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800f95c:	79fb      	ldrb	r3, [r7, #7]
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	71fa      	strb	r2, [r7, #7]
 800f962:	461a      	mov	r2, r3
 800f964:	4613      	mov	r3, r2
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	4413      	add	r3, r2
 800f96a:	00db      	lsls	r3, r3, #3
 800f96c:	4a45      	ldr	r2, [pc, #276]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f96e:	4413      	add	r3, r2
 800f970:	4a55      	ldr	r2, [pc, #340]	; (800fac8 <UpdateSIGNALSNames+0x734>)
 800f972:	461c      	mov	r4, r3
 800f974:	4613      	mov	r3, r2
 800f976:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f978:	6020      	str	r0, [r4, #0]
 800f97a:	6061      	str	r1, [r4, #4]
 800f97c:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800f97e:	79fb      	ldrb	r3, [r7, #7]
 800f980:	1c5a      	adds	r2, r3, #1
 800f982:	71fa      	strb	r2, [r7, #7]
 800f984:	461a      	mov	r2, r3
 800f986:	4613      	mov	r3, r2
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	4413      	add	r3, r2
 800f98c:	00db      	lsls	r3, r3, #3
 800f98e:	4a3d      	ldr	r2, [pc, #244]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f990:	4413      	add	r3, r2
 800f992:	494e      	ldr	r1, [pc, #312]	; (800facc <UpdateSIGNALSNames+0x738>)
 800f994:	461a      	mov	r2, r3
 800f996:	460b      	mov	r3, r1
 800f998:	cb03      	ldmia	r3!, {r0, r1}
 800f99a:	6010      	str	r0, [r2, #0]
 800f99c:	6051      	str	r1, [r2, #4]
 800f99e:	8819      	ldrh	r1, [r3, #0]
 800f9a0:	789b      	ldrb	r3, [r3, #2]
 800f9a2:	8111      	strh	r1, [r2, #8]
 800f9a4:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800f9a6:	79fb      	ldrb	r3, [r7, #7]
 800f9a8:	1c5a      	adds	r2, r3, #1
 800f9aa:	71fa      	strb	r2, [r7, #7]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4413      	add	r3, r2
 800f9b4:	00db      	lsls	r3, r3, #3
 800f9b6:	4a33      	ldr	r2, [pc, #204]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f9b8:	4413      	add	r3, r2
 800f9ba:	4a45      	ldr	r2, [pc, #276]	; (800fad0 <UpdateSIGNALSNames+0x73c>)
 800f9bc:	461c      	mov	r4, r3
 800f9be:	4613      	mov	r3, r2
 800f9c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9c2:	6020      	str	r0, [r4, #0]
 800f9c4:	6061      	str	r1, [r4, #4]
 800f9c6:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800f9c8:	79fb      	ldrb	r3, [r7, #7]
 800f9ca:	1c5a      	adds	r2, r3, #1
 800f9cc:	71fa      	strb	r2, [r7, #7]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	4413      	add	r3, r2
 800f9d6:	00db      	lsls	r3, r3, #3
 800f9d8:	4a2a      	ldr	r2, [pc, #168]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800f9da:	4413      	add	r3, r2
 800f9dc:	493d      	ldr	r1, [pc, #244]	; (800fad4 <UpdateSIGNALSNames+0x740>)
 800f9de:	461a      	mov	r2, r3
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	cb03      	ldmia	r3!, {r0, r1}
 800f9e4:	6010      	str	r0, [r2, #0]
 800f9e6:	6051      	str	r1, [r2, #4]
 800f9e8:	8819      	ldrh	r1, [r3, #0]
 800f9ea:	789b      	ldrb	r3, [r3, #2]
 800f9ec:	8111      	strh	r1, [r2, #8]
 800f9ee:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800f9f0:	79fb      	ldrb	r3, [r7, #7]
 800f9f2:	1c5a      	adds	r2, r3, #1
 800f9f4:	71fa      	strb	r2, [r7, #7]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	009b      	lsls	r3, r3, #2
 800f9fc:	4413      	add	r3, r2
 800f9fe:	00db      	lsls	r3, r3, #3
 800fa00:	4a20      	ldr	r2, [pc, #128]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800fa02:	4413      	add	r3, r2
 800fa04:	4934      	ldr	r1, [pc, #208]	; (800fad8 <UpdateSIGNALSNames+0x744>)
 800fa06:	461a      	mov	r2, r3
 800fa08:	460b      	mov	r3, r1
 800fa0a:	cb03      	ldmia	r3!, {r0, r1}
 800fa0c:	6010      	str	r0, [r2, #0]
 800fa0e:	6051      	str	r1, [r2, #4]
 800fa10:	8819      	ldrh	r1, [r3, #0]
 800fa12:	789b      	ldrb	r3, [r3, #2]
 800fa14:	8111      	strh	r1, [r2, #8]
 800fa16:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800fa18:	79fb      	ldrb	r3, [r7, #7]
 800fa1a:	1c5a      	adds	r2, r3, #1
 800fa1c:	71fa      	strb	r2, [r7, #7]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	4613      	mov	r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	00db      	lsls	r3, r3, #3
 800fa28:	4a16      	ldr	r2, [pc, #88]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800fa2a:	4413      	add	r3, r2
 800fa2c:	4a2b      	ldr	r2, [pc, #172]	; (800fadc <UpdateSIGNALSNames+0x748>)
 800fa2e:	461c      	mov	r4, r3
 800fa30:	4613      	mov	r3, r2
 800fa32:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa34:	6020      	str	r0, [r4, #0]
 800fa36:	6061      	str	r1, [r4, #4]
 800fa38:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800fa3a:	79fb      	ldrb	r3, [r7, #7]
 800fa3c:	1c5a      	adds	r2, r3, #1
 800fa3e:	71fa      	strb	r2, [r7, #7]
 800fa40:	461a      	mov	r2, r3
 800fa42:	4613      	mov	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4413      	add	r3, r2
 800fa48:	00db      	lsls	r3, r3, #3
 800fa4a:	4a0e      	ldr	r2, [pc, #56]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800fa4c:	4413      	add	r3, r2
 800fa4e:	4924      	ldr	r1, [pc, #144]	; (800fae0 <UpdateSIGNALSNames+0x74c>)
 800fa50:	461a      	mov	r2, r3
 800fa52:	460b      	mov	r3, r1
 800fa54:	cb03      	ldmia	r3!, {r0, r1}
 800fa56:	6010      	str	r0, [r2, #0]
 800fa58:	6051      	str	r1, [r2, #4]
 800fa5a:	8819      	ldrh	r1, [r3, #0]
 800fa5c:	789b      	ldrb	r3, [r3, #2]
 800fa5e:	8111      	strh	r1, [r2, #8]
 800fa60:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800fa62:	79fb      	ldrb	r3, [r7, #7]
 800fa64:	1c5a      	adds	r2, r3, #1
 800fa66:	71fa      	strb	r2, [r7, #7]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	4413      	add	r3, r2
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	4a04      	ldr	r2, [pc, #16]	; (800fa84 <UpdateSIGNALSNames+0x6f0>)
 800fa74:	4413      	add	r3, r2
 800fa76:	4a1b      	ldr	r2, [pc, #108]	; (800fae4 <UpdateSIGNALSNames+0x750>)
 800fa78:	6810      	ldr	r0, [r2, #0]
 800fa7a:	6018      	str	r0, [r3, #0]
 800fa7c:	e034      	b.n	800fae8 <UpdateSIGNALSNames+0x754>
 800fa7e:	bf00      	nop
 800fa80:	0802a8c8 	.word	0x0802a8c8
 800fa84:	20005414 	.word	0x20005414
 800fa88:	0802a8d0 	.word	0x0802a8d0
 800fa8c:	0802a8d8 	.word	0x0802a8d8
 800fa90:	0802a8e0 	.word	0x0802a8e0
 800fa94:	0802a8e8 	.word	0x0802a8e8
 800fa98:	0802a8f0 	.word	0x0802a8f0
 800fa9c:	0802a8f8 	.word	0x0802a8f8
 800faa0:	0802a900 	.word	0x0802a900
 800faa4:	0802a908 	.word	0x0802a908
 800faa8:	0802a910 	.word	0x0802a910
 800faac:	0802a918 	.word	0x0802a918
 800fab0:	0802a920 	.word	0x0802a920
 800fab4:	0802a928 	.word	0x0802a928
 800fab8:	0802a930 	.word	0x0802a930
 800fabc:	0802a938 	.word	0x0802a938
 800fac0:	0802a940 	.word	0x0802a940
 800fac4:	0802a948 	.word	0x0802a948
 800fac8:	0802a950 	.word	0x0802a950
 800facc:	0802a95c 	.word	0x0802a95c
 800fad0:	0802a968 	.word	0x0802a968
 800fad4:	0802a974 	.word	0x0802a974
 800fad8:	0802a980 	.word	0x0802a980
 800fadc:	0802a98c 	.word	0x0802a98c
 800fae0:	0802a998 	.word	0x0802a998
 800fae4:	0802a9a4 	.word	0x0802a9a4
 800fae8:	8891      	ldrh	r1, [r2, #4]
 800faea:	7992      	ldrb	r2, [r2, #6]
 800faec:	8099      	strh	r1, [r3, #4]
 800faee:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800faf0:	79fb      	ldrb	r3, [r7, #7]
 800faf2:	1c5a      	adds	r2, r3, #1
 800faf4:	71fa      	strb	r2, [r7, #7]
 800faf6:	461a      	mov	r2, r3
 800faf8:	4613      	mov	r3, r2
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	4413      	add	r3, r2
 800fafe:	00db      	lsls	r3, r3, #3
 800fb00:	4a82      	ldr	r2, [pc, #520]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fb02:	4413      	add	r3, r2
 800fb04:	4a82      	ldr	r2, [pc, #520]	; (800fd10 <UpdateSIGNALSNames+0x97c>)
 800fb06:	6810      	ldr	r0, [r2, #0]
 800fb08:	6018      	str	r0, [r3, #0]
 800fb0a:	8891      	ldrh	r1, [r2, #4]
 800fb0c:	7992      	ldrb	r2, [r2, #6]
 800fb0e:	8099      	strh	r1, [r3, #4]
 800fb10:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800fb12:	79fb      	ldrb	r3, [r7, #7]
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	71fa      	strb	r2, [r7, #7]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	4413      	add	r3, r2
 800fb20:	00db      	lsls	r3, r3, #3
 800fb22:	4a7a      	ldr	r2, [pc, #488]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fb24:	4413      	add	r3, r2
 800fb26:	4a7b      	ldr	r2, [pc, #492]	; (800fd14 <UpdateSIGNALSNames+0x980>)
 800fb28:	6810      	ldr	r0, [r2, #0]
 800fb2a:	6018      	str	r0, [r3, #0]
 800fb2c:	8891      	ldrh	r1, [r2, #4]
 800fb2e:	7992      	ldrb	r2, [r2, #6]
 800fb30:	8099      	strh	r1, [r3, #4]
 800fb32:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800fb34:	79fb      	ldrb	r3, [r7, #7]
 800fb36:	1c5a      	adds	r2, r3, #1
 800fb38:	71fa      	strb	r2, [r7, #7]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	4413      	add	r3, r2
 800fb42:	00db      	lsls	r3, r3, #3
 800fb44:	4a71      	ldr	r2, [pc, #452]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fb46:	4413      	add	r3, r2
 800fb48:	4a73      	ldr	r2, [pc, #460]	; (800fd18 <UpdateSIGNALSNames+0x984>)
 800fb4a:	6810      	ldr	r0, [r2, #0]
 800fb4c:	6018      	str	r0, [r3, #0]
 800fb4e:	8891      	ldrh	r1, [r2, #4]
 800fb50:	7992      	ldrb	r2, [r2, #6]
 800fb52:	8099      	strh	r1, [r3, #4]
 800fb54:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800fb56:	79fb      	ldrb	r3, [r7, #7]
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	71fa      	strb	r2, [r7, #7]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	4613      	mov	r3, r2
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	4413      	add	r3, r2
 800fb64:	00db      	lsls	r3, r3, #3
 800fb66:	4a69      	ldr	r2, [pc, #420]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fb68:	4413      	add	r3, r2
 800fb6a:	4a6c      	ldr	r2, [pc, #432]	; (800fd1c <UpdateSIGNALSNames+0x988>)
 800fb6c:	6810      	ldr	r0, [r2, #0]
 800fb6e:	6018      	str	r0, [r3, #0]
 800fb70:	8891      	ldrh	r1, [r2, #4]
 800fb72:	7992      	ldrb	r2, [r2, #6]
 800fb74:	8099      	strh	r1, [r3, #4]
 800fb76:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800fb78:	79fb      	ldrb	r3, [r7, #7]
 800fb7a:	1c5a      	adds	r2, r3, #1
 800fb7c:	71fa      	strb	r2, [r7, #7]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	4613      	mov	r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4413      	add	r3, r2
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	4a60      	ldr	r2, [pc, #384]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fb8a:	4413      	add	r3, r2
 800fb8c:	4a64      	ldr	r2, [pc, #400]	; (800fd20 <UpdateSIGNALSNames+0x98c>)
 800fb8e:	6810      	ldr	r0, [r2, #0]
 800fb90:	6018      	str	r0, [r3, #0]
 800fb92:	8891      	ldrh	r1, [r2, #4]
 800fb94:	7992      	ldrb	r2, [r2, #6]
 800fb96:	8099      	strh	r1, [r3, #4]
 800fb98:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800fb9a:	79fb      	ldrb	r3, [r7, #7]
 800fb9c:	1c5a      	adds	r2, r3, #1
 800fb9e:	71fa      	strb	r2, [r7, #7]
 800fba0:	461a      	mov	r2, r3
 800fba2:	4613      	mov	r3, r2
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	4413      	add	r3, r2
 800fba8:	00db      	lsls	r3, r3, #3
 800fbaa:	4a58      	ldr	r2, [pc, #352]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fbac:	4413      	add	r3, r2
 800fbae:	4a5d      	ldr	r2, [pc, #372]	; (800fd24 <UpdateSIGNALSNames+0x990>)
 800fbb0:	6810      	ldr	r0, [r2, #0]
 800fbb2:	6018      	str	r0, [r3, #0]
 800fbb4:	8891      	ldrh	r1, [r2, #4]
 800fbb6:	7992      	ldrb	r2, [r2, #6]
 800fbb8:	8099      	strh	r1, [r3, #4]
 800fbba:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800fbbc:	79fb      	ldrb	r3, [r7, #7]
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	71fa      	strb	r2, [r7, #7]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	00db      	lsls	r3, r3, #3
 800fbcc:	4a4f      	ldr	r2, [pc, #316]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fbce:	4413      	add	r3, r2
 800fbd0:	4a55      	ldr	r2, [pc, #340]	; (800fd28 <UpdateSIGNALSNames+0x994>)
 800fbd2:	6810      	ldr	r0, [r2, #0]
 800fbd4:	6018      	str	r0, [r3, #0]
 800fbd6:	8891      	ldrh	r1, [r2, #4]
 800fbd8:	7992      	ldrb	r2, [r2, #6]
 800fbda:	8099      	strh	r1, [r3, #4]
 800fbdc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800fbde:	79fb      	ldrb	r3, [r7, #7]
 800fbe0:	1c5a      	adds	r2, r3, #1
 800fbe2:	71fa      	strb	r2, [r7, #7]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4413      	add	r3, r2
 800fbec:	00db      	lsls	r3, r3, #3
 800fbee:	4a47      	ldr	r2, [pc, #284]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fbf0:	4413      	add	r3, r2
 800fbf2:	4a4e      	ldr	r2, [pc, #312]	; (800fd2c <UpdateSIGNALSNames+0x998>)
 800fbf4:	6810      	ldr	r0, [r2, #0]
 800fbf6:	6018      	str	r0, [r3, #0]
 800fbf8:	8891      	ldrh	r1, [r2, #4]
 800fbfa:	7992      	ldrb	r2, [r2, #6]
 800fbfc:	8099      	strh	r1, [r3, #4]
 800fbfe:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800fc00:	79fb      	ldrb	r3, [r7, #7]
 800fc02:	1c5a      	adds	r2, r3, #1
 800fc04:	71fa      	strb	r2, [r7, #7]
 800fc06:	461a      	mov	r2, r3
 800fc08:	4613      	mov	r3, r2
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	4413      	add	r3, r2
 800fc0e:	00db      	lsls	r3, r3, #3
 800fc10:	4a3e      	ldr	r2, [pc, #248]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fc12:	4413      	add	r3, r2
 800fc14:	4a46      	ldr	r2, [pc, #280]	; (800fd30 <UpdateSIGNALSNames+0x99c>)
 800fc16:	6810      	ldr	r0, [r2, #0]
 800fc18:	6018      	str	r0, [r3, #0]
 800fc1a:	8891      	ldrh	r1, [r2, #4]
 800fc1c:	7992      	ldrb	r2, [r2, #6]
 800fc1e:	8099      	strh	r1, [r3, #4]
 800fc20:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800fc22:	79fb      	ldrb	r3, [r7, #7]
 800fc24:	1c5a      	adds	r2, r3, #1
 800fc26:	71fa      	strb	r2, [r7, #7]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	4613      	mov	r3, r2
 800fc2c:	009b      	lsls	r3, r3, #2
 800fc2e:	4413      	add	r3, r2
 800fc30:	00db      	lsls	r3, r3, #3
 800fc32:	4a36      	ldr	r2, [pc, #216]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fc34:	4413      	add	r3, r2
 800fc36:	4a3f      	ldr	r2, [pc, #252]	; (800fd34 <UpdateSIGNALSNames+0x9a0>)
 800fc38:	6810      	ldr	r0, [r2, #0]
 800fc3a:	6018      	str	r0, [r3, #0]
 800fc3c:	8891      	ldrh	r1, [r2, #4]
 800fc3e:	7992      	ldrb	r2, [r2, #6]
 800fc40:	8099      	strh	r1, [r3, #4]
 800fc42:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800fc44:	79fb      	ldrb	r3, [r7, #7]
 800fc46:	1c5a      	adds	r2, r3, #1
 800fc48:	71fa      	strb	r2, [r7, #7]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	4413      	add	r3, r2
 800fc52:	00db      	lsls	r3, r3, #3
 800fc54:	4a2d      	ldr	r2, [pc, #180]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fc56:	4413      	add	r3, r2
 800fc58:	4a37      	ldr	r2, [pc, #220]	; (800fd38 <UpdateSIGNALSNames+0x9a4>)
 800fc5a:	6810      	ldr	r0, [r2, #0]
 800fc5c:	6018      	str	r0, [r3, #0]
 800fc5e:	8891      	ldrh	r1, [r2, #4]
 800fc60:	7992      	ldrb	r2, [r2, #6]
 800fc62:	8099      	strh	r1, [r3, #4]
 800fc64:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800fc66:	79fb      	ldrb	r3, [r7, #7]
 800fc68:	1c5a      	adds	r2, r3, #1
 800fc6a:	71fa      	strb	r2, [r7, #7]
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	4613      	mov	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4413      	add	r3, r2
 800fc74:	00db      	lsls	r3, r3, #3
 800fc76:	4a25      	ldr	r2, [pc, #148]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fc78:	4413      	add	r3, r2
 800fc7a:	4930      	ldr	r1, [pc, #192]	; (800fd3c <UpdateSIGNALSNames+0x9a8>)
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	460b      	mov	r3, r1
 800fc80:	cb03      	ldmia	r3!, {r0, r1}
 800fc82:	6010      	str	r0, [r2, #0]
 800fc84:	6051      	str	r1, [r2, #4]
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	1c5a      	adds	r2, r3, #1
 800fc8e:	71fa      	strb	r2, [r7, #7]
 800fc90:	461a      	mov	r2, r3
 800fc92:	4613      	mov	r3, r2
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	4413      	add	r3, r2
 800fc98:	00db      	lsls	r3, r3, #3
 800fc9a:	4a1c      	ldr	r2, [pc, #112]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fc9c:	4413      	add	r3, r2
 800fc9e:	4a28      	ldr	r2, [pc, #160]	; (800fd40 <UpdateSIGNALSNames+0x9ac>)
 800fca0:	6810      	ldr	r0, [r2, #0]
 800fca2:	6018      	str	r0, [r3, #0]
 800fca4:	8891      	ldrh	r1, [r2, #4]
 800fca6:	7992      	ldrb	r2, [r2, #6]
 800fca8:	8099      	strh	r1, [r3, #4]
 800fcaa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800fcac:	79fb      	ldrb	r3, [r7, #7]
 800fcae:	1c5a      	adds	r2, r3, #1
 800fcb0:	71fa      	strb	r2, [r7, #7]
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4413      	add	r3, r2
 800fcba:	00db      	lsls	r3, r3, #3
 800fcbc:	4a13      	ldr	r2, [pc, #76]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fcbe:	4413      	add	r3, r2
 800fcc0:	4a20      	ldr	r2, [pc, #128]	; (800fd44 <UpdateSIGNALSNames+0x9b0>)
 800fcc2:	461c      	mov	r4, r3
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fcc8:	6020      	str	r0, [r4, #0]
 800fcca:	6061      	str	r1, [r4, #4]
 800fccc:	60a2      	str	r2, [r4, #8]
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800fcd2:	79fb      	ldrb	r3, [r7, #7]
 800fcd4:	1c5a      	adds	r2, r3, #1
 800fcd6:	71fa      	strb	r2, [r7, #7]
 800fcd8:	461a      	mov	r2, r3
 800fcda:	4613      	mov	r3, r2
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	4413      	add	r3, r2
 800fce0:	00db      	lsls	r3, r3, #3
 800fce2:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <UpdateSIGNALSNames+0x978>)
 800fce4:	4413      	add	r3, r2
 800fce6:	4a18      	ldr	r2, [pc, #96]	; (800fd48 <UpdateSIGNALSNames+0x9b4>)
 800fce8:	461c      	mov	r4, r3
 800fcea:	4613      	mov	r3, r2
 800fcec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fcee:	6020      	str	r0, [r4, #0]
 800fcf0:	6061      	str	r1, [r4, #4]
 800fcf2:	60a2      	str	r2, [r4, #8]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	4b13      	ldr	r3, [pc, #76]	; (800fd4c <UpdateSIGNALSNames+0x9b8>)
 800fcfe:	801a      	strh	r2, [r3, #0]


}
 800fd00:	bf00      	nop
 800fd02:	3708      	adds	r7, #8
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bc90      	pop	{r4, r7}
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	20005414 	.word	0x20005414
 800fd10:	0802a9ac 	.word	0x0802a9ac
 800fd14:	0802a9b4 	.word	0x0802a9b4
 800fd18:	0802a9bc 	.word	0x0802a9bc
 800fd1c:	0802a9c4 	.word	0x0802a9c4
 800fd20:	0802a9cc 	.word	0x0802a9cc
 800fd24:	0802a9d4 	.word	0x0802a9d4
 800fd28:	0802a9dc 	.word	0x0802a9dc
 800fd2c:	0802a9e4 	.word	0x0802a9e4
 800fd30:	0802a9ec 	.word	0x0802a9ec
 800fd34:	0802a9f4 	.word	0x0802a9f4
 800fd38:	0802a9fc 	.word	0x0802a9fc
 800fd3c:	0802aa04 	.word	0x0802aa04
 800fd40:	0802aa10 	.word	0x0802aa10
 800fd44:	0802aa18 	.word	0x0802aa18
 800fd48:	0802aa28 	.word	0x0802aa28
 800fd4c:	20005f04 	.word	0x20005f04

0800fd50 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800fd50:	b5b0      	push	{r4, r5, r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800fd56:	4974      	ldr	r1, [pc, #464]	; (800ff28 <print_self_DetailsSiemens+0x1d8>)
 800fd58:	4874      	ldr	r0, [pc, #464]	; (800ff2c <print_self_DetailsSiemens+0x1dc>)
 800fd5a:	f016 fb9d 	bl	8026498 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800fd5e:	4b74      	ldr	r3, [pc, #464]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fd60:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fd64:	4619      	mov	r1, r3
 800fd66:	4873      	ldr	r0, [pc, #460]	; (800ff34 <print_self_DetailsSiemens+0x1e4>)
 800fd68:	f016 fb96 	bl	8026498 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800fd6c:	4b70      	ldr	r3, [pc, #448]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fd6e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800fd72:	4619      	mov	r1, r3
 800fd74:	4b6e      	ldr	r3, [pc, #440]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fd76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	4b6c      	ldr	r3, [pc, #432]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fd7e:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800fd82:	4618      	mov	r0, r3
 800fd84:	4b6a      	ldr	r3, [pc, #424]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fd86:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	486a      	ldr	r0, [pc, #424]	; (800ff38 <print_self_DetailsSiemens+0x1e8>)
 800fd90:	f016 fb82 	bl	8026498 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800fd94:	4b66      	ldr	r3, [pc, #408]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fd96:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	4b64      	ldr	r3, [pc, #400]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fd9e:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800fda2:	461c      	mov	r4, r3
 800fda4:	4b62      	ldr	r3, [pc, #392]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fda6:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800fdaa:	461d      	mov	r5, r3
 800fdac:	4b60      	ldr	r3, [pc, #384]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fdae:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	4b5e      	ldr	r3, [pc, #376]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fdb6:	f893 32b7 	ldrb.w	r3, [r3, #695]	; 0x2b7
 800fdba:	4619      	mov	r1, r3
 800fdbc:	4b5c      	ldr	r3, [pc, #368]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fdbe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800fdc2:	9302      	str	r3, [sp, #8]
 800fdc4:	9101      	str	r1, [sp, #4]
 800fdc6:	9200      	str	r2, [sp, #0]
 800fdc8:	462b      	mov	r3, r5
 800fdca:	4622      	mov	r2, r4
 800fdcc:	4601      	mov	r1, r0
 800fdce:	485b      	ldr	r0, [pc, #364]	; (800ff3c <print_self_DetailsSiemens+0x1ec>)
 800fdd0:	f016 fb62 	bl	8026498 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800fdd4:	4b56      	ldr	r3, [pc, #344]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fdd6:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 800fdda:	4619      	mov	r1, r3
 800fddc:	4858      	ldr	r0, [pc, #352]	; (800ff40 <print_self_DetailsSiemens+0x1f0>)
 800fdde:	f016 fb5b 	bl	8026498 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800fde2:	2300      	movs	r3, #0
 800fde4:	71fb      	strb	r3, [r7, #7]
 800fde6:	e037      	b.n	800fe58 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	1c59      	adds	r1, r3, #1
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	4a50      	ldr	r2, [pc, #320]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fdf0:	33b2      	adds	r3, #178	; 0xb2
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	4413      	add	r3, r2
 800fdf6:	785b      	ldrb	r3, [r3, #1]
 800fdf8:	461c      	mov	r4, r3
 800fdfa:	79fb      	ldrb	r3, [r7, #7]
 800fdfc:	4a4c      	ldr	r2, [pc, #304]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fdfe:	009b      	lsls	r3, r3, #2
 800fe00:	4413      	add	r3, r2
 800fe02:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800fe06:	461d      	mov	r5, r3
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	4a49      	ldr	r2, [pc, #292]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe0c:	009b      	lsls	r3, r3, #2
 800fe0e:	4413      	add	r3, r2
 800fe10:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800fe14:	4618      	mov	r0, r3
 800fe16:	79fb      	ldrb	r3, [r7, #7]
 800fe18:	4a45      	ldr	r2, [pc, #276]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	4413      	add	r3, r2
 800fe1e:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800fe22:	9301      	str	r3, [sp, #4]
 800fe24:	9000      	str	r0, [sp, #0]
 800fe26:	462b      	mov	r3, r5
 800fe28:	4622      	mov	r2, r4
 800fe2a:	4846      	ldr	r0, [pc, #280]	; (800ff44 <print_self_DetailsSiemens+0x1f4>)
 800fe2c:	f016 fb34 	bl	8026498 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800fe30:	79fb      	ldrb	r3, [r7, #7]
 800fe32:	4a3f      	ldr	r2, [pc, #252]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe34:	33ba      	adds	r3, #186	; 0xba
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4413      	add	r3, r2
 800fe3a:	88db      	ldrh	r3, [r3, #6]
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	79fb      	ldrb	r3, [r7, #7]
 800fe40:	4a3b      	ldr	r2, [pc, #236]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe42:	009b      	lsls	r3, r3, #2
 800fe44:	4413      	add	r3, r2
 800fe46:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	483e      	ldr	r0, [pc, #248]	; (800ff48 <print_self_DetailsSiemens+0x1f8>)
 800fe4e:	f016 fb23 	bl	8026498 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800fe52:	79fb      	ldrb	r3, [r7, #7]
 800fe54:	3301      	adds	r3, #1
 800fe56:	71fb      	strb	r3, [r7, #7]
 800fe58:	4b35      	ldr	r3, [pc, #212]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fe5e:	79fa      	ldrb	r2, [r7, #7]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d3c1      	bcc.n	800fde8 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800fe64:	4b32      	ldr	r3, [pc, #200]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe66:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	4837      	ldr	r0, [pc, #220]	; (800ff4c <print_self_DetailsSiemens+0x1fc>)
 800fe6e:	f016 fb13 	bl	8026498 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800fe72:	4b2f      	ldr	r3, [pc, #188]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe74:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800fe78:	4619      	mov	r1, r3
 800fe7a:	4835      	ldr	r0, [pc, #212]	; (800ff50 <print_self_DetailsSiemens+0x200>)
 800fe7c:	f016 fb0c 	bl	8026498 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800fe80:	4b2b      	ldr	r3, [pc, #172]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fe86:	4619      	mov	r1, r3
 800fe88:	4832      	ldr	r0, [pc, #200]	; (800ff54 <print_self_DetailsSiemens+0x204>)
 800fe8a:	f016 fb05 	bl	8026498 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800fe8e:	4b28      	ldr	r3, [pc, #160]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe90:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800fe94:	4619      	mov	r1, r3
 800fe96:	482f      	ldr	r0, [pc, #188]	; (800ff54 <print_self_DetailsSiemens+0x204>)
 800fe98:	f016 fafe 	bl	8026498 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800fe9c:	4b24      	ldr	r3, [pc, #144]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fe9e:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800fea2:	4619      	mov	r1, r3
 800fea4:	482c      	ldr	r0, [pc, #176]	; (800ff58 <print_self_DetailsSiemens+0x208>)
 800fea6:	f016 faf7 	bl	8026498 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800feaa:	4b21      	ldr	r3, [pc, #132]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800feac:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800feb0:	4619      	mov	r1, r3
 800feb2:	482a      	ldr	r0, [pc, #168]	; (800ff5c <print_self_DetailsSiemens+0x20c>)
 800feb4:	f016 faf0 	bl	8026498 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800feb8:	4b1d      	ldr	r3, [pc, #116]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800feba:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800febe:	4619      	mov	r1, r3
 800fec0:	4827      	ldr	r0, [pc, #156]	; (800ff60 <print_self_DetailsSiemens+0x210>)
 800fec2:	f016 fae9 	bl	8026498 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800fec6:	4b1a      	ldr	r3, [pc, #104]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fec8:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800fecc:	4619      	mov	r1, r3
 800fece:	4825      	ldr	r0, [pc, #148]	; (800ff64 <print_self_DetailsSiemens+0x214>)
 800fed0:	f016 fae2 	bl	8026498 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800fed4:	4b16      	ldr	r3, [pc, #88]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fed6:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800feda:	4619      	mov	r1, r3
 800fedc:	4822      	ldr	r0, [pc, #136]	; (800ff68 <print_self_DetailsSiemens+0x218>)
 800fede:	f016 fadb 	bl	8026498 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800fee2:	4b13      	ldr	r3, [pc, #76]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fee4:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800fee8:	4619      	mov	r1, r3
 800feea:	4820      	ldr	r0, [pc, #128]	; (800ff6c <print_self_DetailsSiemens+0x21c>)
 800feec:	f016 fad4 	bl	8026498 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800fef0:	4b0f      	ldr	r3, [pc, #60]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800fef2:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800fef6:	4619      	mov	r1, r3
 800fef8:	481d      	ldr	r0, [pc, #116]	; (800ff70 <print_self_DetailsSiemens+0x220>)
 800fefa:	f016 facd 	bl	8026498 <iprintf>
	if(EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount == 0)
 800fefe:	4b0c      	ldr	r3, [pc, #48]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800ff00:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d103      	bne.n	800ff10 <print_self_DetailsSiemens+0x1c0>
	{
		EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount = 50;
 800ff08:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800ff0a:	2232      	movs	r2, #50	; 0x32
 800ff0c:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800ff10:	4b07      	ldr	r3, [pc, #28]	; (800ff30 <print_self_DetailsSiemens+0x1e0>)
 800ff12:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ff16:	4619      	mov	r1, r3
 800ff18:	4816      	ldr	r0, [pc, #88]	; (800ff74 <print_self_DetailsSiemens+0x224>)
 800ff1a:	f016 fabd 	bl	8026498 <iprintf>

}
 800ff1e:	bf00      	nop
 800ff20:	3708      	adds	r7, #8
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bdb0      	pop	{r4, r5, r7, pc}
 800ff26:	bf00      	nop
 800ff28:	20000505 	.word	0x20000505
 800ff2c:	0802aa38 	.word	0x0802aa38
 800ff30:	20000504 	.word	0x20000504
 800ff34:	0802aa4c 	.word	0x0802aa4c
 800ff38:	0802aa5c 	.word	0x0802aa5c
 800ff3c:	0802aa74 	.word	0x0802aa74
 800ff40:	0802aa9c 	.word	0x0802aa9c
 800ff44:	0802aab4 	.word	0x0802aab4
 800ff48:	0802aac8 	.word	0x0802aac8
 800ff4c:	0802aae0 	.word	0x0802aae0
 800ff50:	0802aaf0 	.word	0x0802aaf0
 800ff54:	0802ab04 	.word	0x0802ab04
 800ff58:	0802ab18 	.word	0x0802ab18
 800ff5c:	0802ab28 	.word	0x0802ab28
 800ff60:	0802ab38 	.word	0x0802ab38
 800ff64:	0802ab4c 	.word	0x0802ab4c
 800ff68:	0802ab64 	.word	0x0802ab64
 800ff6c:	0802ab7c 	.word	0x0802ab7c
 800ff70:	0802ab98 	.word	0x0802ab98
 800ff74:	0802abb4 	.word	0x0802abb4

0800ff78 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800ff80:	f009 fa80 	bl	8019484 <HAL_GetTick>
 800ff84:	4602      	mov	r2, r0
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	1ad3      	subs	r3, r2, r3
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	bfb8      	it	lt
 800ff8e:	425b      	neglt	r3, r3
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800ff9e:	23f3      	movs	r3, #243	; 0xf3
 800ffa0:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800ffa2:	f013 fd83 	bl	8023aac <udp_new>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	4a7a      	ldr	r2, [pc, #488]	; (8010194 <udpServer_init+0x1fc>)
 800ffaa:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800ffac:	4b7a      	ldr	r3, [pc, #488]	; (8010198 <udpServer_init+0x200>)
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	d002      	beq.n	800ffba <udpServer_init+0x22>
 800ffb4:	2b02      	cmp	r3, #2
 800ffb6:	d074      	beq.n	80100a2 <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800ffb8:	e0e9      	b.n	801018e <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800ffba:	4b77      	ldr	r3, [pc, #476]	; (8010198 <udpServer_init+0x200>)
 800ffbc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ffc0:	061a      	lsls	r2, r3, #24
 800ffc2:	4b75      	ldr	r3, [pc, #468]	; (8010198 <udpServer_init+0x200>)
 800ffc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffc8:	041b      	lsls	r3, r3, #16
 800ffca:	431a      	orrs	r2, r3
 800ffcc:	4b72      	ldr	r3, [pc, #456]	; (8010198 <udpServer_init+0x200>)
 800ffce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffd2:	021b      	lsls	r3, r3, #8
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	4a70      	ldr	r2, [pc, #448]	; (8010198 <udpServer_init+0x200>)
 800ffd8:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	061a      	lsls	r2, r3, #24
 800ffe0:	4b6d      	ldr	r3, [pc, #436]	; (8010198 <udpServer_init+0x200>)
 800ffe2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ffe6:	0619      	lsls	r1, r3, #24
 800ffe8:	4b6b      	ldr	r3, [pc, #428]	; (8010198 <udpServer_init+0x200>)
 800ffea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffee:	041b      	lsls	r3, r3, #16
 800fff0:	4319      	orrs	r1, r3
 800fff2:	4b69      	ldr	r3, [pc, #420]	; (8010198 <udpServer_init+0x200>)
 800fff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fff8:	021b      	lsls	r3, r3, #8
 800fffa:	430b      	orrs	r3, r1
 800fffc:	4966      	ldr	r1, [pc, #408]	; (8010198 <udpServer_init+0x200>)
 800fffe:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 8010002:	430b      	orrs	r3, r1
 8010004:	021b      	lsls	r3, r3, #8
 8010006:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801000a:	431a      	orrs	r2, r3
 801000c:	4b62      	ldr	r3, [pc, #392]	; (8010198 <udpServer_init+0x200>)
 801000e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8010012:	0619      	lsls	r1, r3, #24
 8010014:	4b60      	ldr	r3, [pc, #384]	; (8010198 <udpServer_init+0x200>)
 8010016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801001a:	041b      	lsls	r3, r3, #16
 801001c:	4319      	orrs	r1, r3
 801001e:	4b5e      	ldr	r3, [pc, #376]	; (8010198 <udpServer_init+0x200>)
 8010020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010024:	021b      	lsls	r3, r3, #8
 8010026:	430b      	orrs	r3, r1
 8010028:	495b      	ldr	r1, [pc, #364]	; (8010198 <udpServer_init+0x200>)
 801002a:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 801002e:	430b      	orrs	r3, r1
 8010030:	0a1b      	lsrs	r3, r3, #8
 8010032:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010036:	431a      	orrs	r2, r3
 8010038:	4b57      	ldr	r3, [pc, #348]	; (8010198 <udpServer_init+0x200>)
 801003a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 801003e:	0619      	lsls	r1, r3, #24
 8010040:	4b55      	ldr	r3, [pc, #340]	; (8010198 <udpServer_init+0x200>)
 8010042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010046:	041b      	lsls	r3, r3, #16
 8010048:	4319      	orrs	r1, r3
 801004a:	4b53      	ldr	r3, [pc, #332]	; (8010198 <udpServer_init+0x200>)
 801004c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010050:	021b      	lsls	r3, r3, #8
 8010052:	430b      	orrs	r3, r1
 8010054:	4950      	ldr	r1, [pc, #320]	; (8010198 <udpServer_init+0x200>)
 8010056:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 801005a:	430b      	orrs	r3, r1
 801005c:	0e1b      	lsrs	r3, r3, #24
 801005e:	4313      	orrs	r3, r2
 8010060:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 8010062:	4b4c      	ldr	r3, [pc, #304]	; (8010194 <udpServer_init+0x1fc>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	4a4c      	ldr	r2, [pc, #304]	; (8010198 <udpServer_init+0x200>)
 8010068:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 801006c:	4639      	mov	r1, r7
 801006e:	4618      	mov	r0, r3
 8010070:	f013 fc32 	bl	80238d8 <udp_bind>
 8010074:	4603      	mov	r3, r0
 8010076:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 8010078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d107      	bne.n	8010090 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 8010080:	4b44      	ldr	r3, [pc, #272]	; (8010194 <udpServer_init+0x1fc>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2200      	movs	r2, #0
 8010086:	4945      	ldr	r1, [pc, #276]	; (801019c <udpServer_init+0x204>)
 8010088:	4618      	mov	r0, r3
 801008a:	f013 fcad 	bl	80239e8 <udp_recv>
		break;
 801008e:	e07c      	b.n	801018a <udpServer_init+0x1f2>
			printf("N-OK\n");
 8010090:	4843      	ldr	r0, [pc, #268]	; (80101a0 <udpServer_init+0x208>)
 8010092:	f016 fa9d 	bl	80265d0 <puts>
			udp_remove(upcb);
 8010096:	4b3f      	ldr	r3, [pc, #252]	; (8010194 <udpServer_init+0x1fc>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4618      	mov	r0, r3
 801009c:	f013 fcc4 	bl	8023a28 <udp_remove>
		break;
 80100a0:	e073      	b.n	801018a <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 80100a2:	4b3d      	ldr	r3, [pc, #244]	; (8010198 <udpServer_init+0x200>)
 80100a4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80100a8:	061a      	lsls	r2, r3, #24
 80100aa:	4b3b      	ldr	r3, [pc, #236]	; (8010198 <udpServer_init+0x200>)
 80100ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80100b0:	041b      	lsls	r3, r3, #16
 80100b2:	431a      	orrs	r2, r3
 80100b4:	4b38      	ldr	r3, [pc, #224]	; (8010198 <udpServer_init+0x200>)
 80100b6:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 80100ba:	021b      	lsls	r3, r3, #8
 80100bc:	4313      	orrs	r3, r2
 80100be:	4a36      	ldr	r2, [pc, #216]	; (8010198 <udpServer_init+0x200>)
 80100c0:	f892 22ac 	ldrb.w	r2, [r2, #684]	; 0x2ac
 80100c4:	4313      	orrs	r3, r2
 80100c6:	061a      	lsls	r2, r3, #24
 80100c8:	4b33      	ldr	r3, [pc, #204]	; (8010198 <udpServer_init+0x200>)
 80100ca:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80100ce:	0619      	lsls	r1, r3, #24
 80100d0:	4b31      	ldr	r3, [pc, #196]	; (8010198 <udpServer_init+0x200>)
 80100d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80100d6:	041b      	lsls	r3, r3, #16
 80100d8:	4319      	orrs	r1, r3
 80100da:	4b2f      	ldr	r3, [pc, #188]	; (8010198 <udpServer_init+0x200>)
 80100dc:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 80100e0:	021b      	lsls	r3, r3, #8
 80100e2:	430b      	orrs	r3, r1
 80100e4:	492c      	ldr	r1, [pc, #176]	; (8010198 <udpServer_init+0x200>)
 80100e6:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 80100ea:	430b      	orrs	r3, r1
 80100ec:	021b      	lsls	r3, r3, #8
 80100ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80100f2:	431a      	orrs	r2, r3
 80100f4:	4b28      	ldr	r3, [pc, #160]	; (8010198 <udpServer_init+0x200>)
 80100f6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80100fa:	0619      	lsls	r1, r3, #24
 80100fc:	4b26      	ldr	r3, [pc, #152]	; (8010198 <udpServer_init+0x200>)
 80100fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010102:	041b      	lsls	r3, r3, #16
 8010104:	4319      	orrs	r1, r3
 8010106:	4b24      	ldr	r3, [pc, #144]	; (8010198 <udpServer_init+0x200>)
 8010108:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 801010c:	021b      	lsls	r3, r3, #8
 801010e:	430b      	orrs	r3, r1
 8010110:	4921      	ldr	r1, [pc, #132]	; (8010198 <udpServer_init+0x200>)
 8010112:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 8010116:	430b      	orrs	r3, r1
 8010118:	0a1b      	lsrs	r3, r3, #8
 801011a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801011e:	431a      	orrs	r2, r3
 8010120:	4b1d      	ldr	r3, [pc, #116]	; (8010198 <udpServer_init+0x200>)
 8010122:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8010126:	0619      	lsls	r1, r3, #24
 8010128:	4b1b      	ldr	r3, [pc, #108]	; (8010198 <udpServer_init+0x200>)
 801012a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801012e:	041b      	lsls	r3, r3, #16
 8010130:	4319      	orrs	r1, r3
 8010132:	4b19      	ldr	r3, [pc, #100]	; (8010198 <udpServer_init+0x200>)
 8010134:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 8010138:	021b      	lsls	r3, r3, #8
 801013a:	430b      	orrs	r3, r1
 801013c:	4916      	ldr	r1, [pc, #88]	; (8010198 <udpServer_init+0x200>)
 801013e:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 8010142:	430b      	orrs	r3, r1
 8010144:	0e1b      	lsrs	r3, r3, #24
 8010146:	4313      	orrs	r3, r2
 8010148:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 801014a:	4b12      	ldr	r3, [pc, #72]	; (8010194 <udpServer_init+0x1fc>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a12      	ldr	r2, [pc, #72]	; (8010198 <udpServer_init+0x200>)
 8010150:	f8b2 22dc 	ldrh.w	r2, [r2, #732]	; 0x2dc
 8010154:	4639      	mov	r1, r7
 8010156:	4618      	mov	r0, r3
 8010158:	f013 fbbe 	bl	80238d8 <udp_bind>
 801015c:	4603      	mov	r3, r0
 801015e:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 8010160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d107      	bne.n	8010178 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 8010168:	4b0a      	ldr	r3, [pc, #40]	; (8010194 <udpServer_init+0x1fc>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2200      	movs	r2, #0
 801016e:	490b      	ldr	r1, [pc, #44]	; (801019c <udpServer_init+0x204>)
 8010170:	4618      	mov	r0, r3
 8010172:	f013 fc39 	bl	80239e8 <udp_recv>
		break;
 8010176:	e007      	b.n	8010188 <udpServer_init+0x1f0>
			printf("N-OK\n");
 8010178:	4809      	ldr	r0, [pc, #36]	; (80101a0 <udpServer_init+0x208>)
 801017a:	f016 fa29 	bl	80265d0 <puts>
			udp_remove(upcb);
 801017e:	4b05      	ldr	r3, [pc, #20]	; (8010194 <udpServer_init+0x1fc>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4618      	mov	r0, r3
 8010184:	f013 fc50 	bl	8023a28 <udp_remove>
		break;
 8010188:	bf00      	nop
	}

	udpClient_connect();
 801018a:	f000 f90d 	bl	80103a8 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	20006984 	.word	0x20006984
 8010198:	20000504 	.word	0x20000504
 801019c:	080101a5 	.word	0x080101a5
 80101a0:	0802abd4 	.word	0x0802abd4

080101a4 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b086      	sub	sp, #24
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	607a      	str	r2, [r7, #4]
 80101b0:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 80101be:	4a70      	ldr	r2, [pc, #448]	; (8010380 <UDP_Receive_Callback+0x1dc>)
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	6013      	str	r3, [r2, #0]
	Length = p->len;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	895b      	ldrh	r3, [r3, #10]
 80101ca:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 80101cc:	4b6d      	ldr	r3, [pc, #436]	; (8010384 <UDP_Receive_Callback+0x1e0>)
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d02e      	beq.n	8010232 <UDP_Receive_Callback+0x8e>
 80101d4:	2b02      	cmp	r3, #2
 80101d6:	d045      	beq.n	8010264 <UDP_Receive_Callback+0xc0>
 80101d8:	e069      	b.n	80102ae <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 80101da:	4b69      	ldr	r3, [pc, #420]	; (8010380 <UDP_Receive_Callback+0x1dc>)
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	7dfb      	ldrb	r3, [r7, #23]
 80101e0:	4969      	ldr	r1, [pc, #420]	; (8010388 <UDP_Receive_Callback+0x1e4>)
 80101e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d120      	bne.n	801022c <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 80101ea:	7dbb      	ldrb	r3, [r7, #22]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d109      	bne.n	8010204 <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 80101f0:	6838      	ldr	r0, [r7, #0]
 80101f2:	f015 f859 	bl	80252a8 <ip4addr_ntoa>
 80101f6:	4603      	mov	r3, r0
 80101f8:	4619      	mov	r1, r3
 80101fa:	4864      	ldr	r0, [pc, #400]	; (801038c <UDP_Receive_Callback+0x1e8>)
 80101fc:	f016 f94c 	bl	8026498 <iprintf>
					IpMatched = 1;
 8010200:	2301      	movs	r3, #1
 8010202:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 8010204:	7dfb      	ldrb	r3, [r7, #23]
 8010206:	085b      	lsrs	r3, r3, #1
 8010208:	b2db      	uxtb	r3, r3
 801020a:	4619      	mov	r1, r3
 801020c:	4a60      	ldr	r2, [pc, #384]	; (8010390 <UDP_Receive_Callback+0x1ec>)
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 8010216:	7dfb      	ldrb	r3, [r7, #23]
 8010218:	f003 0301 	and.w	r3, r3, #1
 801021c:	b2db      	uxtb	r3, r3
 801021e:	7dfa      	ldrb	r2, [r7, #23]
 8010220:	0852      	lsrs	r2, r2, #1
 8010222:	b2d2      	uxtb	r2, r2
 8010224:	3301      	adds	r3, #1
 8010226:	b2d9      	uxtb	r1, r3
 8010228:	4b5a      	ldr	r3, [pc, #360]	; (8010394 <UDP_Receive_Callback+0x1f0>)
 801022a:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 801022c:	7dfb      	ldrb	r3, [r7, #23]
 801022e:	3301      	adds	r3, #1
 8010230:	75fb      	strb	r3, [r7, #23]
 8010232:	4b54      	ldr	r3, [pc, #336]	; (8010384 <UDP_Receive_Callback+0x1e0>)
 8010234:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010238:	7dfa      	ldrb	r2, [r7, #23]
 801023a:	429a      	cmp	r2, r3
 801023c:	d3cd      	bcc.n	80101da <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 801023e:	4b51      	ldr	r3, [pc, #324]	; (8010384 <UDP_Receive_Callback+0x1e0>)
 8010240:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010244:	7dfa      	ldrb	r2, [r7, #23]
 8010246:	429a      	cmp	r2, r3
 8010248:	d935      	bls.n	80102b6 <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f012 fbec 	bl	8022a28 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 8010250:	6838      	ldr	r0, [r7, #0]
 8010252:	f015 f829 	bl	80252a8 <ip4addr_ntoa>
 8010256:	4601      	mov	r1, r0
 8010258:	7dfb      	ldrb	r3, [r7, #23]
 801025a:	461a      	mov	r2, r3
 801025c:	484e      	ldr	r0, [pc, #312]	; (8010398 <UDP_Receive_Callback+0x1f4>)
 801025e:	f016 f91b 	bl	8026498 <iprintf>
			return;
 8010262:	e08a      	b.n	801037a <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010264:	2300      	movs	r3, #0
 8010266:	75fb      	strb	r3, [r7, #23]
 8010268:	e00a      	b.n	8010280 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 801026a:	4b45      	ldr	r3, [pc, #276]	; (8010380 <UDP_Receive_Callback+0x1dc>)
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	4945      	ldr	r1, [pc, #276]	; (8010388 <UDP_Receive_Callback+0x1e4>)
 8010272:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010276:	429a      	cmp	r2, r3
 8010278:	d009      	beq.n	801028e <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 801027a:	7dfb      	ldrb	r3, [r7, #23]
 801027c:	3301      	adds	r3, #1
 801027e:	75fb      	strb	r3, [r7, #23]
 8010280:	4b40      	ldr	r3, [pc, #256]	; (8010384 <UDP_Receive_Callback+0x1e0>)
 8010282:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010286:	7dfa      	ldrb	r2, [r7, #23]
 8010288:	429a      	cmp	r2, r3
 801028a:	d3ee      	bcc.n	801026a <UDP_Receive_Callback+0xc6>
 801028c:	e000      	b.n	8010290 <UDP_Receive_Callback+0xec>
			{
				break;
 801028e:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 8010290:	4b3c      	ldr	r3, [pc, #240]	; (8010384 <UDP_Receive_Callback+0x1e0>)
 8010292:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010296:	7dfa      	ldrb	r2, [r7, #23]
 8010298:	429a      	cmp	r2, r3
 801029a:	d90e      	bls.n	80102ba <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f012 fbc3 	bl	8022a28 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 80102a2:	7dfb      	ldrb	r3, [r7, #23]
 80102a4:	4619      	mov	r1, r3
 80102a6:	483d      	ldr	r0, [pc, #244]	; (801039c <UDP_Receive_Callback+0x1f8>)
 80102a8:	f016 f8f6 	bl	8026498 <iprintf>
			return;
 80102ac:	e065      	b.n	801037a <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f012 fbba 	bl	8022a28 <pbuf_free>
		return;
 80102b4:	e061      	b.n	801037a <UDP_Receive_Callback+0x1d6>
		break;
 80102b6:	bf00      	nop
 80102b8:	e000      	b.n	80102bc <UDP_Receive_Callback+0x118>
		break;
 80102ba:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 80102bc:	4b31      	ldr	r3, [pc, #196]	; (8010384 <UDP_Receive_Callback+0x1e0>)
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d002      	beq.n	80102ca <UDP_Receive_Callback+0x126>
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d049      	beq.n	801035c <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 80102c8:	e054      	b.n	8010374 <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 80102ca:	f009 f8db 	bl	8019484 <HAL_GetTick>
 80102ce:	4603      	mov	r3, r0
 80102d0:	4a33      	ldr	r2, [pc, #204]	; (80103a0 <UDP_Receive_Callback+0x1fc>)
 80102d2:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 80102d4:	4b33      	ldr	r3, [pc, #204]	; (80103a4 <UDP_Receive_Callback+0x200>)
 80102d6:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 80102da:	461a      	mov	r2, r3
 80102dc:	8abb      	ldrh	r3, [r7, #20]
 80102de:	4413      	add	r3, r2
 80102e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80102e4:	dd24      	ble.n	8010330 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 80102e6:	4b2f      	ldr	r3, [pc, #188]	; (80103a4 <UDP_Receive_Callback+0x200>)
 80102e8:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 80102ec:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 80102f0:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 80102f2:	4b2c      	ldr	r3, [pc, #176]	; (80103a4 <UDP_Receive_Callback+0x200>)
 80102f4:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 80102f8:	461a      	mov	r2, r3
 80102fa:	4b2a      	ldr	r3, [pc, #168]	; (80103a4 <UDP_Receive_Callback+0x200>)
 80102fc:	18d0      	adds	r0, r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	8a7a      	ldrh	r2, [r7, #18]
 8010304:	4619      	mov	r1, r3
 8010306:	f015 ffb7 	bl	8026278 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	685a      	ldr	r2, [r3, #4]
 801030e:	8a7b      	ldrh	r3, [r7, #18]
 8010310:	18d1      	adds	r1, r2, r3
 8010312:	8aba      	ldrh	r2, [r7, #20]
 8010314:	8a7b      	ldrh	r3, [r7, #18]
 8010316:	1ad3      	subs	r3, r2, r3
 8010318:	461a      	mov	r2, r3
 801031a:	4822      	ldr	r0, [pc, #136]	; (80103a4 <UDP_Receive_Callback+0x200>)
 801031c:	f015 ffac 	bl	8026278 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 8010320:	8aba      	ldrh	r2, [r7, #20]
 8010322:	8a7b      	ldrh	r3, [r7, #18]
 8010324:	1ad3      	subs	r3, r2, r3
 8010326:	b29a      	uxth	r2, r3
 8010328:	4b1e      	ldr	r3, [pc, #120]	; (80103a4 <UDP_Receive_Callback+0x200>)
 801032a:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 801032e:	e021      	b.n	8010374 <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 8010330:	4b1c      	ldr	r3, [pc, #112]	; (80103a4 <UDP_Receive_Callback+0x200>)
 8010332:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010336:	461a      	mov	r2, r3
 8010338:	4b1a      	ldr	r3, [pc, #104]	; (80103a4 <UDP_Receive_Callback+0x200>)
 801033a:	18d0      	adds	r0, r2, r3
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	8aba      	ldrh	r2, [r7, #20]
 8010342:	4619      	mov	r1, r3
 8010344:	f015 ff98 	bl	8026278 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 8010348:	4b16      	ldr	r3, [pc, #88]	; (80103a4 <UDP_Receive_Callback+0x200>)
 801034a:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 801034e:	8abb      	ldrh	r3, [r7, #20]
 8010350:	4413      	add	r3, r2
 8010352:	b29a      	uxth	r2, r3
 8010354:	4b13      	ldr	r3, [pc, #76]	; (80103a4 <UDP_Receive_Callback+0x200>)
 8010356:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 801035a:	e00b      	b.n	8010374 <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	8aba      	ldrh	r2, [r7, #20]
 8010362:	4619      	mov	r1, r3
 8010364:	480f      	ldr	r0, [pc, #60]	; (80103a4 <UDP_Receive_Callback+0x200>)
 8010366:	f015 ff87 	bl	8026278 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 801036a:	4a0e      	ldr	r2, [pc, #56]	; (80103a4 <UDP_Receive_Callback+0x200>)
 801036c:	8abb      	ldrh	r3, [r7, #20]
 801036e:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 8010372:	bf00      	nop
	}


	pbuf_free(p);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f012 fb57 	bl	8022a28 <pbuf_free>
}
 801037a:	3718      	adds	r7, #24
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	20006958 	.word	0x20006958
 8010384:	20000504 	.word	0x20000504
 8010388:	20006908 	.word	0x20006908
 801038c:	0802abdc 	.word	0x0802abdc
 8010390:	200026e4 	.word	0x200026e4
 8010394:	2000270c 	.word	0x2000270c
 8010398:	0802abe8 	.word	0x0802abe8
 801039c:	0802ac14 	.word	0x0802ac14
 80103a0:	200024b0 	.word	0x200024b0
 80103a4:	20006304 	.word	0x20006304

080103a8 <udpClient_connect>:
void udpClient_connect(void)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
//	err_t err;
	uint8_t Traverser = 0;
 80103ae:	2300      	movs	r3, #0
 80103b0:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 80103b2:	4ba6      	ldr	r3, [pc, #664]	; (801064c <udpClient_connect+0x2a4>)
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	d003      	beq.n	80103c2 <udpClient_connect+0x1a>
 80103ba:	2b02      	cmp	r3, #2
 80103bc:	f000 80a1 	beq.w	8010502 <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 80103c0:	e13f      	b.n	8010642 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80103c2:	2300      	movs	r3, #0
 80103c4:	71fb      	strb	r3, [r7, #7]
 80103c6:	e094      	b.n	80104f2 <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 80103c8:	79fb      	ldrb	r3, [r7, #7]
 80103ca:	4aa0      	ldr	r2, [pc, #640]	; (801064c <udpClient_connect+0x2a4>)
 80103cc:	3326      	adds	r3, #38	; 0x26
 80103ce:	009b      	lsls	r3, r3, #2
 80103d0:	4413      	add	r3, r2
 80103d2:	78db      	ldrb	r3, [r3, #3]
 80103d4:	061a      	lsls	r2, r3, #24
 80103d6:	79fb      	ldrb	r3, [r7, #7]
 80103d8:	499c      	ldr	r1, [pc, #624]	; (801064c <udpClient_connect+0x2a4>)
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	440b      	add	r3, r1
 80103de:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80103e2:	041b      	lsls	r3, r3, #16
 80103e4:	431a      	orrs	r2, r3
 80103e6:	79fb      	ldrb	r3, [r7, #7]
 80103e8:	4998      	ldr	r1, [pc, #608]	; (801064c <udpClient_connect+0x2a4>)
 80103ea:	009b      	lsls	r3, r3, #2
 80103ec:	440b      	add	r3, r1
 80103ee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80103f2:	021b      	lsls	r3, r3, #8
 80103f4:	431a      	orrs	r2, r3
 80103f6:	79fb      	ldrb	r3, [r7, #7]
 80103f8:	4994      	ldr	r1, [pc, #592]	; (801064c <udpClient_connect+0x2a4>)
 80103fa:	009b      	lsls	r3, r3, #2
 80103fc:	440b      	add	r3, r1
 80103fe:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010402:	4313      	orrs	r3, r2
 8010404:	061a      	lsls	r2, r3, #24
 8010406:	79fb      	ldrb	r3, [r7, #7]
 8010408:	4990      	ldr	r1, [pc, #576]	; (801064c <udpClient_connect+0x2a4>)
 801040a:	3326      	adds	r3, #38	; 0x26
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	440b      	add	r3, r1
 8010410:	78db      	ldrb	r3, [r3, #3]
 8010412:	0619      	lsls	r1, r3, #24
 8010414:	79fb      	ldrb	r3, [r7, #7]
 8010416:	488d      	ldr	r0, [pc, #564]	; (801064c <udpClient_connect+0x2a4>)
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	4403      	add	r3, r0
 801041c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010420:	041b      	lsls	r3, r3, #16
 8010422:	4319      	orrs	r1, r3
 8010424:	79fb      	ldrb	r3, [r7, #7]
 8010426:	4889      	ldr	r0, [pc, #548]	; (801064c <udpClient_connect+0x2a4>)
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	4403      	add	r3, r0
 801042c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010430:	021b      	lsls	r3, r3, #8
 8010432:	4319      	orrs	r1, r3
 8010434:	79fb      	ldrb	r3, [r7, #7]
 8010436:	4885      	ldr	r0, [pc, #532]	; (801064c <udpClient_connect+0x2a4>)
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	4403      	add	r3, r0
 801043c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010440:	430b      	orrs	r3, r1
 8010442:	021b      	lsls	r3, r3, #8
 8010444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010448:	431a      	orrs	r2, r3
 801044a:	79fb      	ldrb	r3, [r7, #7]
 801044c:	497f      	ldr	r1, [pc, #508]	; (801064c <udpClient_connect+0x2a4>)
 801044e:	3326      	adds	r3, #38	; 0x26
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	440b      	add	r3, r1
 8010454:	78db      	ldrb	r3, [r3, #3]
 8010456:	0619      	lsls	r1, r3, #24
 8010458:	79fb      	ldrb	r3, [r7, #7]
 801045a:	487c      	ldr	r0, [pc, #496]	; (801064c <udpClient_connect+0x2a4>)
 801045c:	009b      	lsls	r3, r3, #2
 801045e:	4403      	add	r3, r0
 8010460:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010464:	041b      	lsls	r3, r3, #16
 8010466:	4319      	orrs	r1, r3
 8010468:	79fb      	ldrb	r3, [r7, #7]
 801046a:	4878      	ldr	r0, [pc, #480]	; (801064c <udpClient_connect+0x2a4>)
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	4403      	add	r3, r0
 8010470:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010474:	021b      	lsls	r3, r3, #8
 8010476:	4319      	orrs	r1, r3
 8010478:	79fb      	ldrb	r3, [r7, #7]
 801047a:	4874      	ldr	r0, [pc, #464]	; (801064c <udpClient_connect+0x2a4>)
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	4403      	add	r3, r0
 8010480:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010484:	430b      	orrs	r3, r1
 8010486:	0a1b      	lsrs	r3, r3, #8
 8010488:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801048c:	ea42 0103 	orr.w	r1, r2, r3
 8010490:	79fb      	ldrb	r3, [r7, #7]
 8010492:	4a6e      	ldr	r2, [pc, #440]	; (801064c <udpClient_connect+0x2a4>)
 8010494:	3326      	adds	r3, #38	; 0x26
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	4413      	add	r3, r2
 801049a:	78db      	ldrb	r3, [r3, #3]
 801049c:	061a      	lsls	r2, r3, #24
 801049e:	79fb      	ldrb	r3, [r7, #7]
 80104a0:	486a      	ldr	r0, [pc, #424]	; (801064c <udpClient_connect+0x2a4>)
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	4403      	add	r3, r0
 80104a6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80104aa:	041b      	lsls	r3, r3, #16
 80104ac:	431a      	orrs	r2, r3
 80104ae:	79fb      	ldrb	r3, [r7, #7]
 80104b0:	4866      	ldr	r0, [pc, #408]	; (801064c <udpClient_connect+0x2a4>)
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	4403      	add	r3, r0
 80104b6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80104ba:	021b      	lsls	r3, r3, #8
 80104bc:	431a      	orrs	r2, r3
 80104be:	79fb      	ldrb	r3, [r7, #7]
 80104c0:	4862      	ldr	r0, [pc, #392]	; (801064c <udpClient_connect+0x2a4>)
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	4403      	add	r3, r0
 80104c6:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80104ca:	4313      	orrs	r3, r2
 80104cc:	0e1a      	lsrs	r2, r3, #24
 80104ce:	79fb      	ldrb	r3, [r7, #7]
 80104d0:	430a      	orrs	r2, r1
 80104d2:	495f      	ldr	r1, [pc, #380]	; (8010650 <udpClient_connect+0x2a8>)
 80104d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	79fa      	ldrb	r2, [r7, #7]
 80104dc:	495b      	ldr	r1, [pc, #364]	; (801064c <udpClient_connect+0x2a4>)
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	440b      	add	r3, r1
 80104e2:	f8b3 114c 	ldrh.w	r1, [r3, #332]	; 0x14c
 80104e6:	4b5b      	ldr	r3, [pc, #364]	; (8010654 <udpClient_connect+0x2ac>)
 80104e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80104ec:	79fb      	ldrb	r3, [r7, #7]
 80104ee:	3301      	adds	r3, #1
 80104f0:	71fb      	strb	r3, [r7, #7]
 80104f2:	4b56      	ldr	r3, [pc, #344]	; (801064c <udpClient_connect+0x2a4>)
 80104f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80104f8:	79fa      	ldrb	r2, [r7, #7]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	f4ff af64 	bcc.w	80103c8 <udpClient_connect+0x20>
		break;
 8010500:	e09f      	b.n	8010642 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010502:	2300      	movs	r3, #0
 8010504:	71fb      	strb	r3, [r7, #7]
 8010506:	e094      	b.n	8010632 <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010508:	79fb      	ldrb	r3, [r7, #7]
 801050a:	4a50      	ldr	r2, [pc, #320]	; (801064c <udpClient_connect+0x2a4>)
 801050c:	33b2      	adds	r3, #178	; 0xb2
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	4413      	add	r3, r2
 8010512:	785b      	ldrb	r3, [r3, #1]
 8010514:	061a      	lsls	r2, r3, #24
 8010516:	79fb      	ldrb	r3, [r7, #7]
 8010518:	494c      	ldr	r1, [pc, #304]	; (801064c <udpClient_connect+0x2a4>)
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	440b      	add	r3, r1
 801051e:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 8010522:	041b      	lsls	r3, r3, #16
 8010524:	431a      	orrs	r2, r3
 8010526:	79fb      	ldrb	r3, [r7, #7]
 8010528:	4948      	ldr	r1, [pc, #288]	; (801064c <udpClient_connect+0x2a4>)
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	440b      	add	r3, r1
 801052e:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 8010532:	021b      	lsls	r3, r3, #8
 8010534:	431a      	orrs	r2, r3
 8010536:	79fb      	ldrb	r3, [r7, #7]
 8010538:	4944      	ldr	r1, [pc, #272]	; (801064c <udpClient_connect+0x2a4>)
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	440b      	add	r3, r1
 801053e:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 8010542:	4313      	orrs	r3, r2
 8010544:	061a      	lsls	r2, r3, #24
 8010546:	79fb      	ldrb	r3, [r7, #7]
 8010548:	4940      	ldr	r1, [pc, #256]	; (801064c <udpClient_connect+0x2a4>)
 801054a:	33b2      	adds	r3, #178	; 0xb2
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	440b      	add	r3, r1
 8010550:	785b      	ldrb	r3, [r3, #1]
 8010552:	0619      	lsls	r1, r3, #24
 8010554:	79fb      	ldrb	r3, [r7, #7]
 8010556:	483d      	ldr	r0, [pc, #244]	; (801064c <udpClient_connect+0x2a4>)
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	4403      	add	r3, r0
 801055c:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 8010560:	041b      	lsls	r3, r3, #16
 8010562:	4319      	orrs	r1, r3
 8010564:	79fb      	ldrb	r3, [r7, #7]
 8010566:	4839      	ldr	r0, [pc, #228]	; (801064c <udpClient_connect+0x2a4>)
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	4403      	add	r3, r0
 801056c:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 8010570:	021b      	lsls	r3, r3, #8
 8010572:	4319      	orrs	r1, r3
 8010574:	79fb      	ldrb	r3, [r7, #7]
 8010576:	4835      	ldr	r0, [pc, #212]	; (801064c <udpClient_connect+0x2a4>)
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	4403      	add	r3, r0
 801057c:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 8010580:	430b      	orrs	r3, r1
 8010582:	021b      	lsls	r3, r3, #8
 8010584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010588:	431a      	orrs	r2, r3
 801058a:	79fb      	ldrb	r3, [r7, #7]
 801058c:	492f      	ldr	r1, [pc, #188]	; (801064c <udpClient_connect+0x2a4>)
 801058e:	33b2      	adds	r3, #178	; 0xb2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	440b      	add	r3, r1
 8010594:	785b      	ldrb	r3, [r3, #1]
 8010596:	0619      	lsls	r1, r3, #24
 8010598:	79fb      	ldrb	r3, [r7, #7]
 801059a:	482c      	ldr	r0, [pc, #176]	; (801064c <udpClient_connect+0x2a4>)
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4403      	add	r3, r0
 80105a0:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 80105a4:	041b      	lsls	r3, r3, #16
 80105a6:	4319      	orrs	r1, r3
 80105a8:	79fb      	ldrb	r3, [r7, #7]
 80105aa:	4828      	ldr	r0, [pc, #160]	; (801064c <udpClient_connect+0x2a4>)
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	4403      	add	r3, r0
 80105b0:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 80105b4:	021b      	lsls	r3, r3, #8
 80105b6:	4319      	orrs	r1, r3
 80105b8:	79fb      	ldrb	r3, [r7, #7]
 80105ba:	4824      	ldr	r0, [pc, #144]	; (801064c <udpClient_connect+0x2a4>)
 80105bc:	009b      	lsls	r3, r3, #2
 80105be:	4403      	add	r3, r0
 80105c0:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 80105c4:	430b      	orrs	r3, r1
 80105c6:	0a1b      	lsrs	r3, r3, #8
 80105c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80105cc:	ea42 0103 	orr.w	r1, r2, r3
 80105d0:	79fb      	ldrb	r3, [r7, #7]
 80105d2:	4a1e      	ldr	r2, [pc, #120]	; (801064c <udpClient_connect+0x2a4>)
 80105d4:	33b2      	adds	r3, #178	; 0xb2
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	4413      	add	r3, r2
 80105da:	785b      	ldrb	r3, [r3, #1]
 80105dc:	061a      	lsls	r2, r3, #24
 80105de:	79fb      	ldrb	r3, [r7, #7]
 80105e0:	481a      	ldr	r0, [pc, #104]	; (801064c <udpClient_connect+0x2a4>)
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	4403      	add	r3, r0
 80105e6:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 80105ea:	041b      	lsls	r3, r3, #16
 80105ec:	431a      	orrs	r2, r3
 80105ee:	79fb      	ldrb	r3, [r7, #7]
 80105f0:	4816      	ldr	r0, [pc, #88]	; (801064c <udpClient_connect+0x2a4>)
 80105f2:	009b      	lsls	r3, r3, #2
 80105f4:	4403      	add	r3, r0
 80105f6:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 80105fa:	021b      	lsls	r3, r3, #8
 80105fc:	431a      	orrs	r2, r3
 80105fe:	79fb      	ldrb	r3, [r7, #7]
 8010600:	4812      	ldr	r0, [pc, #72]	; (801064c <udpClient_connect+0x2a4>)
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4403      	add	r3, r0
 8010606:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 801060a:	4313      	orrs	r3, r2
 801060c:	0e1a      	lsrs	r2, r3, #24
 801060e:	79fb      	ldrb	r3, [r7, #7]
 8010610:	430a      	orrs	r2, r1
 8010612:	490f      	ldr	r1, [pc, #60]	; (8010650 <udpClient_connect+0x2a8>)
 8010614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010618:	79fb      	ldrb	r3, [r7, #7]
 801061a:	79fa      	ldrb	r2, [r7, #7]
 801061c:	490b      	ldr	r1, [pc, #44]	; (801064c <udpClient_connect+0x2a4>)
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	440b      	add	r3, r1
 8010622:	f8b3 12f0 	ldrh.w	r1, [r3, #752]	; 0x2f0
 8010626:	4b0b      	ldr	r3, [pc, #44]	; (8010654 <udpClient_connect+0x2ac>)
 8010628:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 801062c:	79fb      	ldrb	r3, [r7, #7]
 801062e:	3301      	adds	r3, #1
 8010630:	71fb      	strb	r3, [r7, #7]
 8010632:	4b06      	ldr	r3, [pc, #24]	; (801064c <udpClient_connect+0x2a4>)
 8010634:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010638:	79fa      	ldrb	r2, [r7, #7]
 801063a:	429a      	cmp	r2, r3
 801063c:	f4ff af64 	bcc.w	8010508 <udpClient_connect+0x160>
		break;
 8010640:	bf00      	nop
	}
}
 8010642:	370c      	adds	r7, #12
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr
 801064c:	20000504 	.word	0x20000504
 8010650:	20006908 	.word	0x20006908
 8010654:	2000695c 	.word	0x2000695c

08010658 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	460b      	mov	r3, r1
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 8010666:	2300      	movs	r3, #0
 8010668:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 801066a:	7afb      	ldrb	r3, [r7, #11]
 801066c:	b29b      	uxth	r3, r3
 801066e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010672:	4619      	mov	r1, r3
 8010674:	2036      	movs	r0, #54	; 0x36
 8010676:	f011 fef5 	bl	8022464 <pbuf_alloc>
 801067a:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d01d      	beq.n	80106be <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 8010682:	7afb      	ldrb	r3, [r7, #11]
 8010684:	b29b      	uxth	r3, r3
 8010686:	461a      	mov	r2, r3
 8010688:	68f9      	ldr	r1, [r7, #12]
 801068a:	6938      	ldr	r0, [r7, #16]
 801068c:	f012 fbc6 	bl	8022e1c <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 8010690:	4b0d      	ldr	r3, [pc, #52]	; (80106c8 <udpClient_send+0x70>)
 8010692:	6818      	ldr	r0, [r3, #0]
 8010694:	4b0d      	ldr	r3, [pc, #52]	; (80106cc <udpClient_send+0x74>)
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	1d3a      	adds	r2, r7, #4
 801069a:	6939      	ldr	r1, [r7, #16]
 801069c:	f012 ff66 	bl	802356c <udp_sendto>
 80106a0:	4603      	mov	r3, r0
 80106a2:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 80106a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d005      	beq.n	80106b8 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 80106ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106b0:	4619      	mov	r1, r3
 80106b2:	4807      	ldr	r0, [pc, #28]	; (80106d0 <udpClient_send+0x78>)
 80106b4:	f015 fef0 	bl	8026498 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 80106b8:	6938      	ldr	r0, [r7, #16]
 80106ba:	f012 f9b5 	bl	8022a28 <pbuf_free>
	}
}
 80106be:	bf00      	nop
 80106c0:	3718      	adds	r7, #24
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	20006984 	.word	0x20006984
 80106cc:	2000695c 	.word	0x2000695c
 80106d0:	0802ac3c 	.word	0x0802ac3c

080106d4 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 80106d4:	b480      	push	{r7}
 80106d6:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 80106d8:	4b07      	ldr	r3, [pc, #28]	; (80106f8 <Is_There_EI_Data+0x24>)
 80106da:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 80106de:	4b06      	ldr	r3, [pc, #24]	; (80106f8 <Is_There_EI_Data+0x24>)
 80106e0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d001      	beq.n	80106ec <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 80106e8:	2301      	movs	r3, #1
 80106ea:	e000      	b.n	80106ee <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 80106ec:	2300      	movs	r3, #0
	}
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr
 80106f8:	20006304 	.word	0x20006304

080106fc <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 8010702:	4b15      	ldr	r3, [pc, #84]	; (8010758 <Get_Eth_Byte+0x5c>)
 8010704:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010708:	1c5a      	adds	r2, r3, #1
 801070a:	b291      	uxth	r1, r2
 801070c:	4a12      	ldr	r2, [pc, #72]	; (8010758 <Get_Eth_Byte+0x5c>)
 801070e:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 8010712:	461a      	mov	r2, r3
 8010714:	4b10      	ldr	r3, [pc, #64]	; (8010758 <Get_Eth_Byte+0x5c>)
 8010716:	5c9b      	ldrb	r3, [r3, r2]
 8010718:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 801071a:	4b0f      	ldr	r3, [pc, #60]	; (8010758 <Get_Eth_Byte+0x5c>)
 801071c:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010720:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010724:	d313      	bcc.n	801074e <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 8010726:	4b0c      	ldr	r3, [pc, #48]	; (8010758 <Get_Eth_Byte+0x5c>)
 8010728:	2200      	movs	r2, #0
 801072a:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 801072e:	4b0a      	ldr	r3, [pc, #40]	; (8010758 <Get_Eth_Byte+0x5c>)
 8010730:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010734:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010738:	d109      	bne.n	801074e <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 801073a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801073e:	2100      	movs	r1, #0
 8010740:	4805      	ldr	r0, [pc, #20]	; (8010758 <Get_Eth_Byte+0x5c>)
 8010742:	f015 fdc1 	bl	80262c8 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 8010746:	4b04      	ldr	r3, [pc, #16]	; (8010758 <Get_Eth_Byte+0x5c>)
 8010748:	2200      	movs	r2, #0
 801074a:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 801074e:	79fb      	ldrb	r3, [r7, #7]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	20006304 	.word	0x20006304

0801075c <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b094      	sub	sp, #80	; 0x50
 8010760:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8010762:	4b38      	ldr	r3, [pc, #224]	; (8010844 <MX_CAN2_Init+0xe8>)
 8010764:	4a38      	ldr	r2, [pc, #224]	; (8010848 <MX_CAN2_Init+0xec>)
 8010766:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 8010768:	4b36      	ldr	r3, [pc, #216]	; (8010844 <MX_CAN2_Init+0xe8>)
 801076a:	2212      	movs	r2, #18
 801076c:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 801076e:	4b35      	ldr	r3, [pc, #212]	; (8010844 <MX_CAN2_Init+0xe8>)
 8010770:	2200      	movs	r2, #0
 8010772:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8010774:	4b33      	ldr	r3, [pc, #204]	; (8010844 <MX_CAN2_Init+0xe8>)
 8010776:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 801077a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 801077c:	4b31      	ldr	r3, [pc, #196]	; (8010844 <MX_CAN2_Init+0xe8>)
 801077e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010782:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8010784:	4b2f      	ldr	r3, [pc, #188]	; (8010844 <MX_CAN2_Init+0xe8>)
 8010786:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801078a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 801078c:	4b2d      	ldr	r3, [pc, #180]	; (8010844 <MX_CAN2_Init+0xe8>)
 801078e:	2200      	movs	r2, #0
 8010790:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8010792:	4b2c      	ldr	r3, [pc, #176]	; (8010844 <MX_CAN2_Init+0xe8>)
 8010794:	2200      	movs	r2, #0
 8010796:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8010798:	4b2a      	ldr	r3, [pc, #168]	; (8010844 <MX_CAN2_Init+0xe8>)
 801079a:	2200      	movs	r2, #0
 801079c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 801079e:	4b29      	ldr	r3, [pc, #164]	; (8010844 <MX_CAN2_Init+0xe8>)
 80107a0:	2201      	movs	r2, #1
 80107a2:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 80107a4:	4b27      	ldr	r3, [pc, #156]	; (8010844 <MX_CAN2_Init+0xe8>)
 80107a6:	2200      	movs	r2, #0
 80107a8:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80107aa:	4b26      	ldr	r3, [pc, #152]	; (8010844 <MX_CAN2_Init+0xe8>)
 80107ac:	2200      	movs	r2, #0
 80107ae:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80107b0:	4824      	ldr	r0, [pc, #144]	; (8010844 <MX_CAN2_Init+0xe8>)
 80107b2:	f008 fe97 	bl	80194e4 <HAL_CAN_Init>
 80107b6:	4603      	mov	r3, r0
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d001      	beq.n	80107c0 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 80107bc:	f007 f868 	bl	8017890 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 80107c0:	2301      	movs	r3, #1
 80107c2:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 80107c4:	2304      	movs	r3, #4
 80107c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80107c8:	2301      	movs	r3, #1
 80107ca:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 80107cc:	f242 0360 	movw	r3, #8288	; 0x2060
 80107d0:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 80107d2:	2300      	movs	r3, #0
 80107d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 80107d6:	f242 0360 	movw	r3, #8288	; 0x2060
 80107da:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 80107dc:	2300      	movs	r3, #0
 80107de:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 80107e0:	2301      	movs	r3, #1
 80107e2:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 80107e4:	2301      	movs	r3, #1
 80107e6:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 80107e8:	2302      	movs	r3, #2
 80107ea:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 80107ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107f0:	4619      	mov	r1, r3
 80107f2:	4814      	ldr	r0, [pc, #80]	; (8010844 <MX_CAN2_Init+0xe8>)
 80107f4:	f008 ffbc 	bl	8019770 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 80107f8:	2301      	movs	r3, #1
 80107fa:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 80107fc:	2305      	movs	r3, #5
 80107fe:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010800:	2301      	movs	r3, #1
 8010802:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010804:	f242 1320 	movw	r3, #8480	; 0x2120
 8010808:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 801080a:	2300      	movs	r3, #0
 801080c:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 801080e:	f242 1320 	movw	r3, #8480	; 0x2120
 8010812:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 8010814:	2300      	movs	r3, #0
 8010816:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 8010818:	2301      	movs	r3, #1
 801081a:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 801081c:	2301      	movs	r3, #1
 801081e:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 8010820:	2302      	movs	r3, #2
 8010822:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 8010824:	463b      	mov	r3, r7
 8010826:	4619      	mov	r1, r3
 8010828:	4806      	ldr	r0, [pc, #24]	; (8010844 <MX_CAN2_Init+0xe8>)
 801082a:	f008 ffa1 	bl	8019770 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 801082e:	4805      	ldr	r0, [pc, #20]	; (8010844 <MX_CAN2_Init+0xe8>)
 8010830:	f009 f88a 	bl	8019948 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 8010834:	2110      	movs	r1, #16
 8010836:	4803      	ldr	r0, [pc, #12]	; (8010844 <MX_CAN2_Init+0xe8>)
 8010838:	f009 fad0 	bl	8019ddc <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 801083c:	bf00      	nop
 801083e:	3750      	adds	r7, #80	; 0x50
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	2000b244 	.word	0x2000b244
 8010848:	40006800 	.word	0x40006800

0801084c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b08a      	sub	sp, #40	; 0x28
 8010850:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 8010852:	4b34      	ldr	r3, [pc, #208]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010854:	4a34      	ldr	r2, [pc, #208]	; (8010928 <MX_CAN3_Init+0xdc>)
 8010856:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 8010858:	4b32      	ldr	r3, [pc, #200]	; (8010924 <MX_CAN3_Init+0xd8>)
 801085a:	2205      	movs	r2, #5
 801085c:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 801085e:	4b31      	ldr	r3, [pc, #196]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010860:	2200      	movs	r2, #0
 8010862:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8010864:	4b2f      	ldr	r3, [pc, #188]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010866:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 801086a:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 801086c:	4b2d      	ldr	r3, [pc, #180]	; (8010924 <MX_CAN3_Init+0xd8>)
 801086e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8010872:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 8010874:	4b2b      	ldr	r3, [pc, #172]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010876:	2200      	movs	r2, #0
 8010878:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 801087a:	4b2a      	ldr	r3, [pc, #168]	; (8010924 <MX_CAN3_Init+0xd8>)
 801087c:	4a2a      	ldr	r2, [pc, #168]	; (8010928 <MX_CAN3_Init+0xdc>)
 801087e:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 8010880:	4b28      	ldr	r3, [pc, #160]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010882:	2212      	movs	r2, #18
 8010884:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 8010886:	4b27      	ldr	r3, [pc, #156]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010888:	2200      	movs	r2, #0
 801088a:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 801088c:	4b25      	ldr	r3, [pc, #148]	; (8010924 <MX_CAN3_Init+0xd8>)
 801088e:	2200      	movs	r2, #0
 8010890:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 8010892:	4b24      	ldr	r3, [pc, #144]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010894:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010898:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 801089a:	4b22      	ldr	r3, [pc, #136]	; (8010924 <MX_CAN3_Init+0xd8>)
 801089c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80108a0:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 80108a2:	4b20      	ldr	r3, [pc, #128]	; (8010924 <MX_CAN3_Init+0xd8>)
 80108a4:	2200      	movs	r2, #0
 80108a6:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 80108a8:	4b1e      	ldr	r3, [pc, #120]	; (8010924 <MX_CAN3_Init+0xd8>)
 80108aa:	2200      	movs	r2, #0
 80108ac:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 80108ae:	4b1d      	ldr	r3, [pc, #116]	; (8010924 <MX_CAN3_Init+0xd8>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 80108b4:	4b1b      	ldr	r3, [pc, #108]	; (8010924 <MX_CAN3_Init+0xd8>)
 80108b6:	2201      	movs	r2, #1
 80108b8:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 80108ba:	4b1a      	ldr	r3, [pc, #104]	; (8010924 <MX_CAN3_Init+0xd8>)
 80108bc:	2200      	movs	r2, #0
 80108be:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 80108c0:	4b18      	ldr	r3, [pc, #96]	; (8010924 <MX_CAN3_Init+0xd8>)
 80108c2:	2200      	movs	r2, #0
 80108c4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80108c6:	4817      	ldr	r0, [pc, #92]	; (8010924 <MX_CAN3_Init+0xd8>)
 80108c8:	f008 fe0c 	bl	80194e4 <HAL_CAN_Init>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d001      	beq.n	80108d6 <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 80108d2:	f006 ffdd 	bl	8017890 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 80108d6:	2301      	movs	r3, #1
 80108d8:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 80108da:	2301      	movs	r3, #1
 80108dc:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80108de:	2300      	movs	r3, #0
 80108e0:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 80108e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80108e6:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 80108e8:	2300      	movs	r3, #0
 80108ea:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 80108ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80108f0:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 80108f2:	2300      	movs	r3, #0
 80108f4:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 80108fa:	2301      	movs	r3, #1
 80108fc:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 80108fe:	2306      	movs	r3, #6
 8010900:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 8010902:	463b      	mov	r3, r7
 8010904:	4619      	mov	r1, r3
 8010906:	4807      	ldr	r0, [pc, #28]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010908:	f008 ff32 	bl	8019770 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 801090c:	4805      	ldr	r0, [pc, #20]	; (8010924 <MX_CAN3_Init+0xd8>)
 801090e:	f009 f81b 	bl	8019948 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 8010912:	2102      	movs	r1, #2
 8010914:	4803      	ldr	r0, [pc, #12]	; (8010924 <MX_CAN3_Init+0xd8>)
 8010916:	f009 fa61 	bl	8019ddc <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 801091a:	bf00      	nop
 801091c:	3728      	adds	r7, #40	; 0x28
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}
 8010922:	bf00      	nop
 8010924:	2000b2a8 	.word	0x2000b2a8
 8010928:	40003400 	.word	0x40003400

0801092c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b08c      	sub	sp, #48	; 0x30
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010934:	f107 031c 	add.w	r3, r7, #28
 8010938:	2200      	movs	r2, #0
 801093a:	601a      	str	r2, [r3, #0]
 801093c:	605a      	str	r2, [r3, #4]
 801093e:	609a      	str	r2, [r3, #8]
 8010940:	60da      	str	r2, [r3, #12]
 8010942:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a44      	ldr	r2, [pc, #272]	; (8010a5c <HAL_CAN_MspInit+0x130>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d144      	bne.n	80109d8 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 801094e:	4b44      	ldr	r3, [pc, #272]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 8010950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010952:	4a43      	ldr	r2, [pc, #268]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 8010954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010958:	6413      	str	r3, [r2, #64]	; 0x40
 801095a:	4b41      	ldr	r3, [pc, #260]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 801095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010962:	61bb      	str	r3, [r7, #24]
 8010964:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8010966:	4b3e      	ldr	r3, [pc, #248]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 8010968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801096a:	4a3d      	ldr	r2, [pc, #244]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 801096c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010970:	6413      	str	r3, [r2, #64]	; 0x40
 8010972:	4b3b      	ldr	r3, [pc, #236]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 8010974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801097a:	617b      	str	r3, [r7, #20]
 801097c:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 801097e:	4b38      	ldr	r3, [pc, #224]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 8010980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010982:	4a37      	ldr	r2, [pc, #220]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 8010984:	f043 0302 	orr.w	r3, r3, #2
 8010988:	6313      	str	r3, [r2, #48]	; 0x30
 801098a:	4b35      	ldr	r3, [pc, #212]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 801098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801098e:	f003 0302 	and.w	r3, r3, #2
 8010992:	613b      	str	r3, [r7, #16]
 8010994:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 8010996:	2360      	movs	r3, #96	; 0x60
 8010998:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801099a:	2302      	movs	r3, #2
 801099c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801099e:	2300      	movs	r3, #0
 80109a0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109a2:	2303      	movs	r3, #3
 80109a4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80109a6:	2309      	movs	r3, #9
 80109a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80109aa:	f107 031c 	add.w	r3, r7, #28
 80109ae:	4619      	mov	r1, r3
 80109b0:	482c      	ldr	r0, [pc, #176]	; (8010a64 <HAL_CAN_MspInit+0x138>)
 80109b2:	f00b f873 	bl	801ba9c <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 80109b6:	2200      	movs	r2, #0
 80109b8:	2104      	movs	r1, #4
 80109ba:	2040      	movs	r0, #64	; 0x40
 80109bc:	f009 fd43 	bl	801a446 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80109c0:	2040      	movs	r0, #64	; 0x40
 80109c2:	f009 fd5c 	bl	801a47e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 80109c6:	2201      	movs	r2, #1
 80109c8:	2104      	movs	r1, #4
 80109ca:	2041      	movs	r0, #65	; 0x41
 80109cc:	f009 fd3b 	bl	801a446 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80109d0:	2041      	movs	r0, #65	; 0x41
 80109d2:	f009 fd54 	bl	801a47e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 80109d6:	e03d      	b.n	8010a54 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4a22      	ldr	r2, [pc, #136]	; (8010a68 <HAL_CAN_MspInit+0x13c>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d138      	bne.n	8010a54 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 80109e2:	4b1f      	ldr	r3, [pc, #124]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 80109e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e6:	4a1e      	ldr	r2, [pc, #120]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 80109e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80109ec:	6413      	str	r3, [r2, #64]	; 0x40
 80109ee:	4b1c      	ldr	r3, [pc, #112]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 80109f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80109f6:	60fb      	str	r3, [r7, #12]
 80109f8:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80109fa:	4b19      	ldr	r3, [pc, #100]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 80109fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109fe:	4a18      	ldr	r2, [pc, #96]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 8010a00:	f043 0301 	orr.w	r3, r3, #1
 8010a04:	6313      	str	r3, [r2, #48]	; 0x30
 8010a06:	4b16      	ldr	r3, [pc, #88]	; (8010a60 <HAL_CAN_MspInit+0x134>)
 8010a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a0a:	f003 0301 	and.w	r3, r3, #1
 8010a0e:	60bb      	str	r3, [r7, #8]
 8010a10:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 8010a12:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8010a16:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a18:	2302      	movs	r3, #2
 8010a1a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a20:	2303      	movs	r3, #3
 8010a22:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8010a24:	230b      	movs	r3, #11
 8010a26:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a28:	f107 031c 	add.w	r3, r7, #28
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	480f      	ldr	r0, [pc, #60]	; (8010a6c <HAL_CAN_MspInit+0x140>)
 8010a30:	f00b f834 	bl	801ba9c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8010a34:	2200      	movs	r2, #0
 8010a36:	2100      	movs	r1, #0
 8010a38:	2069      	movs	r0, #105	; 0x69
 8010a3a:	f009 fd04 	bl	801a446 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8010a3e:	2069      	movs	r0, #105	; 0x69
 8010a40:	f009 fd1d 	bl	801a47e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 8010a44:	2200      	movs	r2, #0
 8010a46:	2100      	movs	r1, #0
 8010a48:	206a      	movs	r0, #106	; 0x6a
 8010a4a:	f009 fcfc 	bl	801a446 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 8010a4e:	206a      	movs	r0, #106	; 0x6a
 8010a50:	f009 fd15 	bl	801a47e <HAL_NVIC_EnableIRQ>
}
 8010a54:	bf00      	nop
 8010a56:	3730      	adds	r7, #48	; 0x30
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	40006800 	.word	0x40006800
 8010a60:	40023800 	.word	0x40023800
 8010a64:	40020400 	.word	0x40020400
 8010a68:	40003400 	.word	0x40003400
 8010a6c:	40020000 	.word	0x40020000

08010a70 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 8010a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a72:	b087      	sub	sp, #28
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	4603      	mov	r3, r0
 8010a78:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	823b      	strh	r3, [r7, #16]
	uint16_t uc_size = 0;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	82fb      	strh	r3, [r7, #22]



	switch(EI_data.ProtocolType)
 8010a82:	4ba1      	ldr	r3, [pc, #644]	; (8010d08 <TransmitCanPkt+0x298>)
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	3b01      	subs	r3, #1
 8010a88:	2b03      	cmp	r3, #3
 8010a8a:	f200 8344 	bhi.w	8011116 <TransmitCanPkt+0x6a6>
 8010a8e:	a201      	add	r2, pc, #4	; (adr r2, 8010a94 <TransmitCanPkt+0x24>)
 8010a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a94:	08010aa5 	.word	0x08010aa5
 8010a98:	08010c85 	.word	0x08010c85
 8010a9c:	08010e21 	.word	0x08010e21
 8010aa0:	08010f9f 	.word	0x08010f9f
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8010aa4:	4b99      	ldr	r3, [pc, #612]	; (8010d0c <TransmitCanPkt+0x29c>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	0a1b      	lsrs	r3, r3, #8
 8010aaa:	f003 0301 	and.w	r3, r3, #1
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d003      	beq.n	8010aba <TransmitCanPkt+0x4a>
		{
			printf("Stopping CAN Transmission\n");
 8010ab2:	4897      	ldr	r0, [pc, #604]	; (8010d10 <TransmitCanPkt+0x2a0>)
 8010ab4:	f015 fd8c 	bl	80265d0 <puts>
			return;
 8010ab8:	e32d      	b.n	8011116 <TransmitCanPkt+0x6a6>
		}

		switch((int)Ken_idetifier)
 8010aba:	88fb      	ldrh	r3, [r7, #6]
 8010abc:	f240 220a 	movw	r2, #522	; 0x20a
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	f300 80d9 	bgt.w	8010c78 <TransmitCanPkt+0x208>
 8010ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010aca:	dc0d      	bgt.n	8010ae8 <TransmitCanPkt+0x78>
 8010acc:	f240 1219 	movw	r2, #281	; 0x119
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d025      	beq.n	8010b20 <TransmitCanPkt+0xb0>
 8010ad4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8010ad8:	f340 80ce 	ble.w	8010c78 <TransmitCanPkt+0x208>
 8010adc:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	f200 80c9 	bhi.w	8010c78 <TransmitCanPkt+0x208>
 8010ae6:	e058      	b.n	8010b9a <TransmitCanPkt+0x12a>
 8010ae8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010aec:	2b09      	cmp	r3, #9
 8010aee:	f200 80c3 	bhi.w	8010c78 <TransmitCanPkt+0x208>
 8010af2:	a201      	add	r2, pc, #4	; (adr r2, 8010af8 <TransmitCanPkt+0x88>)
 8010af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010af8:	08010bbf 	.word	0x08010bbf
 8010afc:	08010bbf 	.word	0x08010bbf
 8010b00:	08010be9 	.word	0x08010be9
 8010b04:	08010be9 	.word	0x08010be9
 8010b08:	08010c0d 	.word	0x08010c0d
 8010b0c:	08010c79 	.word	0x08010c79
 8010b10:	08010c31 	.word	0x08010c31
 8010b14:	08010c31 	.word	0x08010c31
 8010b18:	08010c55 	.word	0x08010c55
 8010b1c:	08010c55 	.word	0x08010c55
		{
		case EI_PROCESS_DATA:
			if(ReorderFlag == RESET)
 8010b20:	4b7c      	ldr	r3, [pc, #496]	; (8010d14 <TransmitCanPkt+0x2a4>)
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d11c      	bne.n	8010b62 <TransmitCanPkt+0xf2>
			{
				vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 8010b28:	4b77      	ldr	r3, [pc, #476]	; (8010d08 <TransmitCanPkt+0x298>)
 8010b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	011b      	lsls	r3, r3, #4
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	4b78      	ldr	r3, [pc, #480]	; (8010d18 <TransmitCanPkt+0x2a8>)
 8010b36:	801a      	strh	r2, [r3, #0]
				pp_ptr = &vEI_Transver_EI_To_MIE;
 8010b38:	4b77      	ldr	r3, [pc, #476]	; (8010d18 <TransmitCanPkt+0x2a8>)
 8010b3a:	60fb      	str	r3, [r7, #12]
				uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 8010b3c:	4b76      	ldr	r3, [pc, #472]	; (8010d18 <TransmitCanPkt+0x2a8>)
 8010b3e:	881b      	ldrh	r3, [r3, #0]
 8010b40:	3302      	adds	r3, #2
 8010b42:	82fb      	strh	r3, [r7, #22]
				//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
				sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010b44:	8afb      	ldrh	r3, [r7, #22]
 8010b46:	88fa      	ldrh	r2, [r7, #6]
 8010b48:	4619      	mov	r1, r3
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f000 fafc 	bl	8011148 <sendCanPkts>
				if(Debug_flag == 1)
 8010b50:	4b72      	ldr	r3, [pc, #456]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	f040 8091 	bne.w	8010c7c <TransmitCanPkt+0x20c>
				{
					printf("SENT SIGNAL DATA TO MIE\n");
 8010b5a:	4871      	ldr	r0, [pc, #452]	; (8010d20 <TransmitCanPkt+0x2b0>)
 8010b5c:	f015 fd38 	bl	80265d0 <puts>
				if(Debug_flag == 1)
				{
					printf("SENT ReArranged SIGNAL DATA TO MIE\n");
				}
			}
			break;
 8010b60:	e08c      	b.n	8010c7c <TransmitCanPkt+0x20c>
				HitachiEI_DataReArranged_st.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 8010b62:	4b69      	ldr	r3, [pc, #420]	; (8010d08 <TransmitCanPkt+0x298>)
 8010b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	011b      	lsls	r3, r3, #4
 8010b6c:	b29a      	uxth	r2, r3
 8010b6e:	4b6d      	ldr	r3, [pc, #436]	; (8010d24 <TransmitCanPkt+0x2b4>)
 8010b70:	801a      	strh	r2, [r3, #0]
				pp_ptr = &HitachiEI_DataReArranged_st;
 8010b72:	4b6c      	ldr	r3, [pc, #432]	; (8010d24 <TransmitCanPkt+0x2b4>)
 8010b74:	60fb      	str	r3, [r7, #12]
				uc_size =(HitachiEI_DataReArranged_st.ActualDataBytes + sizeof(HitachiEI_DataReArranged_st.ActualDataBytes)); /* +2 is by Considering */
 8010b76:	4b6b      	ldr	r3, [pc, #428]	; (8010d24 <TransmitCanPkt+0x2b4>)
 8010b78:	881b      	ldrh	r3, [r3, #0]
 8010b7a:	3302      	adds	r3, #2
 8010b7c:	82fb      	strh	r3, [r7, #22]
				sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010b7e:	8afb      	ldrh	r3, [r7, #22]
 8010b80:	88fa      	ldrh	r2, [r7, #6]
 8010b82:	4619      	mov	r1, r3
 8010b84:	68f8      	ldr	r0, [r7, #12]
 8010b86:	f000 fadf 	bl	8011148 <sendCanPkts>
				if(Debug_flag == 1)
 8010b8a:	4b64      	ldr	r3, [pc, #400]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d174      	bne.n	8010c7c <TransmitCanPkt+0x20c>
					printf("SENT ReArranged SIGNAL DATA TO MIE\n");
 8010b92:	4865      	ldr	r0, [pc, #404]	; (8010d28 <TransmitCanPkt+0x2b8>)
 8010b94:	f015 fd1c 	bl	80265d0 <puts>
			break;
 8010b98:	e070      	b.n	8010c7c <TransmitCanPkt+0x20c>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 8010b9a:	4b64      	ldr	r3, [pc, #400]	; (8010d2c <TransmitCanPkt+0x2bc>)
 8010b9c:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 8010b9e:	2316      	movs	r3, #22
 8010ba0:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010ba2:	4b5e      	ldr	r3, [pc, #376]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	d102      	bne.n	8010bb0 <TransmitCanPkt+0x140>
			{
				printf("\nHealth 2 MIE\n");
 8010baa:	4861      	ldr	r0, [pc, #388]	; (8010d30 <TransmitCanPkt+0x2c0>)
 8010bac:	f015 fd10 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010bb0:	8afb      	ldrh	r3, [r7, #22]
 8010bb2:	88fa      	ldrh	r2, [r7, #6]
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f000 fac6 	bl	8011148 <sendCanPkts>
			break;
 8010bbc:	e061      	b.n	8010c82 <TransmitCanPkt+0x212>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 8010bbe:	4b5d      	ldr	r3, [pc, #372]	; (8010d34 <TransmitCanPkt+0x2c4>)
 8010bc0:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(EI_SELF_SHARING_t);
 8010bc2:	2318      	movs	r3, #24
 8010bc4:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010bc6:	8afb      	ldrh	r3, [r7, #22]
 8010bc8:	88fa      	ldrh	r2, [r7, #6]
 8010bca:	4619      	mov	r1, r3
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f000 fabb 	bl	8011148 <sendCanPkts>
			if(Debug_flag == 1)
 8010bd2:	4b52      	ldr	r3, [pc, #328]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d152      	bne.n	8010c80 <TransmitCanPkt+0x210>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 8010bda:	4b56      	ldr	r3, [pc, #344]	; (8010d34 <TransmitCanPkt+0x2c4>)
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	4619      	mov	r1, r3
 8010be0:	4855      	ldr	r0, [pc, #340]	; (8010d38 <TransmitCanPkt+0x2c8>)
 8010be2:	f015 fc59 	bl	8026498 <iprintf>
			}
			break;
 8010be6:	e04b      	b.n	8010c80 <TransmitCanPkt+0x210>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 8010be8:	4b54      	ldr	r3, [pc, #336]	; (8010d3c <TransmitCanPkt+0x2cc>)
 8010bea:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 8010bec:	2346      	movs	r3, #70	; 0x46
 8010bee:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010bf0:	4b4a      	ldr	r3, [pc, #296]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	2b01      	cmp	r3, #1
 8010bf6:	d102      	bne.n	8010bfe <TransmitCanPkt+0x18e>
			{
				printf("\nSending V-Message 2-O\n");
 8010bf8:	4851      	ldr	r0, [pc, #324]	; (8010d40 <TransmitCanPkt+0x2d0>)
 8010bfa:	f015 fce9 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010bfe:	8afb      	ldrh	r3, [r7, #22]
 8010c00:	88fa      	ldrh	r2, [r7, #6]
 8010c02:	4619      	mov	r1, r3
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f000 fa9f 	bl	8011148 <sendCanPkts>
			break;
 8010c0a:	e03a      	b.n	8010c82 <TransmitCanPkt+0x212>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 8010c0c:	4b3f      	ldr	r3, [pc, #252]	; (8010d0c <TransmitCanPkt+0x29c>)
 8010c0e:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 8010c10:	2308      	movs	r3, #8
 8010c12:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010c14:	4b41      	ldr	r3, [pc, #260]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d102      	bne.n	8010c22 <TransmitCanPkt+0x1b2>
			{
				printf("\nSending Fault Injection data 2-O\n");
 8010c1c:	4849      	ldr	r0, [pc, #292]	; (8010d44 <TransmitCanPkt+0x2d4>)
 8010c1e:	f015 fcd7 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010c22:	8afb      	ldrh	r3, [r7, #22]
 8010c24:	88fa      	ldrh	r2, [r7, #6]
 8010c26:	4619      	mov	r1, r3
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f000 fa8d 	bl	8011148 <sendCanPkts>
			break;
 8010c2e:	e028      	b.n	8010c82 <TransmitCanPkt+0x212>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 8010c30:	4b45      	ldr	r3, [pc, #276]	; (8010d48 <TransmitCanPkt+0x2d8>)
 8010c32:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(RELAYS_t);
 8010c34:	2314      	movs	r3, #20
 8010c36:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010c38:	4b38      	ldr	r3, [pc, #224]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d102      	bne.n	8010c46 <TransmitCanPkt+0x1d6>
			{
				printf("Sending Relays-O\n");
 8010c40:	4842      	ldr	r0, [pc, #264]	; (8010d4c <TransmitCanPkt+0x2dc>)
 8010c42:	f015 fcc5 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010c46:	8afb      	ldrh	r3, [r7, #22]
 8010c48:	88fa      	ldrh	r2, [r7, #6]
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	68f8      	ldr	r0, [r7, #12]
 8010c4e:	f000 fa7b 	bl	8011148 <sendCanPkts>
			break;
 8010c52:	e016      	b.n	8010c82 <TransmitCanPkt+0x212>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 8010c54:	4b3e      	ldr	r3, [pc, #248]	; (8010d50 <TransmitCanPkt+0x2e0>)
 8010c56:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 8010c58:	2302      	movs	r3, #2
 8010c5a:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010c5c:	4b2f      	ldr	r3, [pc, #188]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d102      	bne.n	8010c6a <TransmitCanPkt+0x1fa>
			{
				printf("Sending App Data CRC to Other\n");
 8010c64:	483b      	ldr	r0, [pc, #236]	; (8010d54 <TransmitCanPkt+0x2e4>)
 8010c66:	f015 fcb3 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010c6a:	8afb      	ldrh	r3, [r7, #22]
 8010c6c:	88fa      	ldrh	r2, [r7, #6]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	68f8      	ldr	r0, [r7, #12]
 8010c72:	f000 fa69 	bl	8011148 <sendCanPkts>
			break;
 8010c76:	e004      	b.n	8010c82 <TransmitCanPkt+0x212>


		default:
			break;
 8010c78:	bf00      	nop
 8010c7a:	e24c      	b.n	8011116 <TransmitCanPkt+0x6a6>
			break;
 8010c7c:	bf00      	nop
 8010c7e:	e24a      	b.n	8011116 <TransmitCanPkt+0x6a6>
			break;
 8010c80:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 8010c82:	e248      	b.n	8011116 <TransmitCanPkt+0x6a6>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 8010c84:	88fb      	ldrh	r3, [r7, #6]
 8010c86:	f240 1219 	movw	r2, #281	; 0x119
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d028      	beq.n	8010ce0 <TransmitCanPkt+0x270>
 8010c8e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8010c92:	f340 80c3 	ble.w	8010e1c <TransmitCanPkt+0x3ac>
 8010c96:	f240 220a 	movw	r2, #522	; 0x20a
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	f300 80be 	bgt.w	8010e1c <TransmitCanPkt+0x3ac>
 8010ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ca4:	f340 80ba 	ble.w	8010e1c <TransmitCanPkt+0x3ac>
 8010ca8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010cac:	2b09      	cmp	r3, #9
 8010cae:	f200 80b5 	bhi.w	8010e1c <TransmitCanPkt+0x3ac>
 8010cb2:	a201      	add	r2, pc, #4	; (adr r2, 8010cb8 <TransmitCanPkt+0x248>)
 8010cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb8:	08010d61 	.word	0x08010d61
 8010cbc:	08010d61 	.word	0x08010d61
 8010cc0:	08010e1d 	.word	0x08010e1d
 8010cc4:	08010e1d 	.word	0x08010e1d
 8010cc8:	08010ddd 	.word	0x08010ddd
 8010ccc:	08010e1d 	.word	0x08010e1d
 8010cd0:	08010d85 	.word	0x08010d85
 8010cd4:	08010d85 	.word	0x08010d85
 8010cd8:	08010df9 	.word	0x08010df9
 8010cdc:	08010df9 	.word	0x08010df9
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 8010ce0:	4b1d      	ldr	r3, [pc, #116]	; (8010d58 <TransmitCanPkt+0x2e8>)
 8010ce2:	60fb      	str	r3, [r7, #12]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 8010ce4:	4b1c      	ldr	r3, [pc, #112]	; (8010d58 <TransmitCanPkt+0x2e8>)
 8010ce6:	881b      	ldrh	r3, [r3, #0]
 8010ce8:	3302      	adds	r3, #2
 8010cea:	82fb      	strh	r3, [r7, #22]

			if(Debug_flag == 1)
 8010cec:	4b0b      	ldr	r3, [pc, #44]	; (8010d1c <TransmitCanPkt+0x2ac>)
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d102      	bne.n	8010cfa <TransmitCanPkt+0x28a>
			{
				printf("Sending Signals 2 MIE\n");
 8010cf4:	4819      	ldr	r0, [pc, #100]	; (8010d5c <TransmitCanPkt+0x2ec>)
 8010cf6:	f015 fc6b 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010cfa:	8afb      	ldrh	r3, [r7, #22]
 8010cfc:	88fa      	ldrh	r2, [r7, #6]
 8010cfe:	4619      	mov	r1, r3
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f000 fa21 	bl	8011148 <sendCanPkts>
			break;
 8010d06:	e08a      	b.n	8010e1e <TransmitCanPkt+0x3ae>
 8010d08:	20000504 	.word	0x20000504
 8010d0c:	2000308c 	.word	0x2000308c
 8010d10:	0802ac78 	.word	0x0802ac78
 8010d14:	2000254e 	.word	0x2000254e
 8010d18:	20002770 	.word	0x20002770
 8010d1c:	20000bbb 	.word	0x20000bbb
 8010d20:	0802ac94 	.word	0x0802ac94
 8010d24:	20002814 	.word	0x20002814
 8010d28:	0802acac 	.word	0x0802acac
 8010d2c:	20003094 	.word	0x20003094
 8010d30:	0802acd0 	.word	0x0802acd0
 8010d34:	20002f84 	.word	0x20002f84
 8010d38:	0802ace0 	.word	0x0802ace0
 8010d3c:	20002fb4 	.word	0x20002fb4
 8010d40:	0802acec 	.word	0x0802acec
 8010d44:	0802ad04 	.word	0x0802ad04
 8010d48:	20003740 	.word	0x20003740
 8010d4c:	0802ad28 	.word	0x0802ad28
 8010d50:	20000bb8 	.word	0x20000bb8
 8010d54:	0802ad3c 	.word	0x0802ad3c
 8010d58:	20004bf8 	.word	0x20004bf8
 8010d5c:	0802ad5c 	.word	0x0802ad5c

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 8010d60:	4b9c      	ldr	r3, [pc, #624]	; (8010fd4 <TransmitCanPkt+0x564>)
 8010d62:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 8010d64:	2304      	movs	r3, #4
 8010d66:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010d68:	4b9b      	ldr	r3, [pc, #620]	; (8010fd8 <TransmitCanPkt+0x568>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d102      	bne.n	8010d76 <TransmitCanPkt+0x306>
			{
				printf("Sending Signals 2 MIE\n");
 8010d70:	489a      	ldr	r0, [pc, #616]	; (8010fdc <TransmitCanPkt+0x56c>)
 8010d72:	f015 fc2d 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010d76:	8afb      	ldrh	r3, [r7, #22]
 8010d78:	88fa      	ldrh	r2, [r7, #6]
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f000 f9e3 	bl	8011148 <sendCanPkts>
			break;
 8010d82:	e04c      	b.n	8010e1e <TransmitCanPkt+0x3ae>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 8010d84:	4b96      	ldr	r3, [pc, #600]	; (8010fe0 <TransmitCanPkt+0x570>)
 8010d86:	60fb      	str	r3, [r7, #12]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 8010d88:	4b96      	ldr	r3, [pc, #600]	; (8010fe4 <TransmitCanPkt+0x574>)
 8010d8a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8010d8e:	f003 0307 	and.w	r3, r3, #7
 8010d92:	82fb      	strh	r3, [r7, #22]
			if (uc_size != 0)
 8010d94:	8afb      	ldrh	r3, [r7, #22]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d007      	beq.n	8010daa <TransmitCanPkt+0x33a>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 8010d9a:	4b92      	ldr	r3, [pc, #584]	; (8010fe4 <TransmitCanPkt+0x574>)
 8010d9c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8010da0:	08db      	lsrs	r3, r3, #3
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	3301      	adds	r3, #1
 8010da6:	82fb      	strh	r3, [r7, #22]
 8010da8:	e004      	b.n	8010db4 <TransmitCanPkt+0x344>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 8010daa:	4b8e      	ldr	r3, [pc, #568]	; (8010fe4 <TransmitCanPkt+0x574>)
 8010dac:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8010db0:	08db      	lsrs	r3, r3, #3
 8010db2:	82fb      	strh	r3, [r7, #22]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 8010db4:	4a8a      	ldr	r2, [pc, #552]	; (8010fe0 <TransmitCanPkt+0x570>)
 8010db6:	8afb      	ldrh	r3, [r7, #22]
 8010db8:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 8010dba:	8afb      	ldrh	r3, [r7, #22]
 8010dbc:	3304      	adds	r3, #4
 8010dbe:	82fb      	strh	r3, [r7, #22]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 8010dc0:	4b85      	ldr	r3, [pc, #532]	; (8010fd8 <TransmitCanPkt+0x568>)
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d102      	bne.n	8010dce <TransmitCanPkt+0x35e>
			{
				printf("Sending Relays 2 Other\n");
 8010dc8:	4887      	ldr	r0, [pc, #540]	; (8010fe8 <TransmitCanPkt+0x578>)
 8010dca:	f015 fc01 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010dce:	8afb      	ldrh	r3, [r7, #22]
 8010dd0:	88fa      	ldrh	r2, [r7, #6]
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	68f8      	ldr	r0, [r7, #12]
 8010dd6:	f000 f9b7 	bl	8011148 <sendCanPkts>
			break;
 8010dda:	e020      	b.n	8010e1e <TransmitCanPkt+0x3ae>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 8010ddc:	4b83      	ldr	r3, [pc, #524]	; (8010fec <TransmitCanPkt+0x57c>)
 8010dde:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 8010de0:	2308      	movs	r3, #8
 8010de2:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 8010de4:	4882      	ldr	r0, [pc, #520]	; (8010ff0 <TransmitCanPkt+0x580>)
 8010de6:	f015 fbf3 	bl	80265d0 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8010dea:	8afb      	ldrh	r3, [r7, #22]
 8010dec:	88fa      	ldrh	r2, [r7, #6]
 8010dee:	4619      	mov	r1, r3
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f000 f9a9 	bl	8011148 <sendCanPkts>
			break;
 8010df6:	e012      	b.n	8010e1e <TransmitCanPkt+0x3ae>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 8010df8:	4b7e      	ldr	r3, [pc, #504]	; (8010ff4 <TransmitCanPkt+0x584>)
 8010dfa:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 8010dfc:	2302      	movs	r3, #2
 8010dfe:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010e00:	4b75      	ldr	r3, [pc, #468]	; (8010fd8 <TransmitCanPkt+0x568>)
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d102      	bne.n	8010e0e <TransmitCanPkt+0x39e>
			{
				printf("Sending App Data CRC to Other\n");
 8010e08:	487b      	ldr	r0, [pc, #492]	; (8010ff8 <TransmitCanPkt+0x588>)
 8010e0a:	f015 fbe1 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010e0e:	8afb      	ldrh	r3, [r7, #22]
 8010e10:	88fa      	ldrh	r2, [r7, #6]
 8010e12:	4619      	mov	r1, r3
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f000 f997 	bl	8011148 <sendCanPkts>
			break;
 8010e1a:	e000      	b.n	8010e1e <TransmitCanPkt+0x3ae>

		default:
			break;
 8010e1c:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 8010e1e:	e17a      	b.n	8011116 <TransmitCanPkt+0x6a6>

	case MEDHA:
	{

		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 8010e20:	88fb      	ldrh	r3, [r7, #6]
 8010e22:	f240 220a 	movw	r2, #522	; 0x20a
 8010e26:	4293      	cmp	r3, r2
 8010e28:	f300 80b5 	bgt.w	8010f96 <TransmitCanPkt+0x526>
 8010e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e30:	dc0d      	bgt.n	8010e4e <TransmitCanPkt+0x3de>
 8010e32:	f240 1219 	movw	r2, #281	; 0x119
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d026      	beq.n	8010e88 <TransmitCanPkt+0x418>
 8010e3a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8010e3e:	f340 80aa 	ble.w	8010f96 <TransmitCanPkt+0x526>
 8010e42:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	f200 80a5 	bhi.w	8010f96 <TransmitCanPkt+0x526>
 8010e4c:	e05f      	b.n	8010f0e <TransmitCanPkt+0x49e>
 8010e4e:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010e52:	2b09      	cmp	r3, #9
 8010e54:	f200 809f 	bhi.w	8010f96 <TransmitCanPkt+0x526>
 8010e58:	a201      	add	r2, pc, #4	; (adr r2, 8010e60 <TransmitCanPkt+0x3f0>)
 8010e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e5e:	bf00      	nop
 8010e60:	08010eeb 	.word	0x08010eeb
 8010e64:	08010eeb 	.word	0x08010eeb
 8010e68:	08010f97 	.word	0x08010f97
 8010e6c:	08010f97 	.word	0x08010f97
 8010e70:	08010f33 	.word	0x08010f33
 8010e74:	08010f97 	.word	0x08010f97
 8010e78:	08010f4f 	.word	0x08010f4f
 8010e7c:	08010f4f 	.word	0x08010f4f
 8010e80:	08010f73 	.word	0x08010f73
 8010e84:	08010f73 	.word	0x08010f73
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 8010e88:	4b5c      	ldr	r3, [pc, #368]	; (8010ffc <TransmitCanPkt+0x58c>)
 8010e8a:	60fb      	str	r3, [r7, #12]

			uint16_t Length =  EI_data.Medha_Prms_st.NoofRelays%8;
 8010e8c:	4b55      	ldr	r3, [pc, #340]	; (8010fe4 <TransmitCanPkt+0x574>)
 8010e8e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	f003 0307 	and.w	r3, r3, #7
 8010e98:	82bb      	strh	r3, [r7, #20]

			if(Length != 0)
 8010e9a:	8abb      	ldrh	r3, [r7, #20]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d007      	beq.n	8010eb0 <TransmitCanPkt+0x440>
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8) + 1;
 8010ea0:	4b50      	ldr	r3, [pc, #320]	; (8010fe4 <TransmitCanPkt+0x574>)
 8010ea2:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8010ea6:	08db      	lsrs	r3, r3, #3
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	3301      	adds	r3, #1
 8010eac:	82bb      	strh	r3, [r7, #20]
 8010eae:	e004      	b.n	8010eba <TransmitCanPkt+0x44a>
			}
			else
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8);
 8010eb0:	4b4c      	ldr	r3, [pc, #304]	; (8010fe4 <TransmitCanPkt+0x574>)
 8010eb2:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8010eb6:	08db      	lsrs	r3, r3, #3
 8010eb8:	82bb      	strh	r3, [r7, #20]
			}

			Medha_Relay_Sts_st.ActualDataBytes =  Length;
 8010eba:	4a50      	ldr	r2, [pc, #320]	; (8010ffc <TransmitCanPkt+0x58c>)
 8010ebc:	8abb      	ldrh	r3, [r7, #20]
 8010ebe:	8013      	strh	r3, [r2, #0]
			uc_size =(Length + sizeof(Length)); /* +2 is by Considering */
 8010ec0:	8abb      	ldrh	r3, [r7, #20]
 8010ec2:	3302      	adds	r3, #2
 8010ec4:	82fb      	strh	r3, [r7, #22]

			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010ec6:	8afb      	ldrh	r3, [r7, #22]
 8010ec8:	88fa      	ldrh	r2, [r7, #6]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	68f8      	ldr	r0, [r7, #12]
 8010ece:	f000 f93b 	bl	8011148 <sendCanPkts>
			if(Debug_flag == 1)
 8010ed2:	4b41      	ldr	r3, [pc, #260]	; (8010fd8 <TransmitCanPkt+0x568>)
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	2b01      	cmp	r3, #1
 8010ed8:	d15f      	bne.n	8010f9a <TransmitCanPkt+0x52a>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 8010eda:	f008 fad3 	bl	8019484 <HAL_GetTick>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	4847      	ldr	r0, [pc, #284]	; (8011000 <TransmitCanPkt+0x590>)
 8010ee4:	f015 fad8 	bl	8026498 <iprintf>
			}
			break;
 8010ee8:	e057      	b.n	8010f9a <TransmitCanPkt+0x52a>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 8010eea:	4b46      	ldr	r3, [pc, #280]	; (8011004 <TransmitCanPkt+0x594>)
 8010eec:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 8010eee:	2308      	movs	r3, #8
 8010ef0:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010ef2:	4b39      	ldr	r3, [pc, #228]	; (8010fd8 <TransmitCanPkt+0x568>)
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	2b01      	cmp	r3, #1
 8010ef8:	d102      	bne.n	8010f00 <TransmitCanPkt+0x490>
			{
				printf("\nSending_2_O\n");
 8010efa:	4843      	ldr	r0, [pc, #268]	; (8011008 <TransmitCanPkt+0x598>)
 8010efc:	f015 fb68 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010f00:	8afb      	ldrh	r3, [r7, #22]
 8010f02:	88fa      	ldrh	r2, [r7, #6]
 8010f04:	4619      	mov	r1, r3
 8010f06:	68f8      	ldr	r0, [r7, #12]
 8010f08:	f000 f91e 	bl	8011148 <sendCanPkts>
			break;
 8010f0c:	e046      	b.n	8010f9c <TransmitCanPkt+0x52c>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 8010f0e:	4b3f      	ldr	r3, [pc, #252]	; (801100c <TransmitCanPkt+0x59c>)
 8010f10:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 8010f12:	2316      	movs	r3, #22
 8010f14:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010f16:	4b30      	ldr	r3, [pc, #192]	; (8010fd8 <TransmitCanPkt+0x568>)
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d102      	bne.n	8010f24 <TransmitCanPkt+0x4b4>
			{
				printf("\nHealth 2 MIE\n");
 8010f1e:	483c      	ldr	r0, [pc, #240]	; (8011010 <TransmitCanPkt+0x5a0>)
 8010f20:	f015 fb56 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010f24:	8afb      	ldrh	r3, [r7, #22]
 8010f26:	88fa      	ldrh	r2, [r7, #6]
 8010f28:	4619      	mov	r1, r3
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f000 f90c 	bl	8011148 <sendCanPkts>
			break;
 8010f30:	e034      	b.n	8010f9c <TransmitCanPkt+0x52c>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 8010f32:	4b38      	ldr	r3, [pc, #224]	; (8011014 <TransmitCanPkt+0x5a4>)
 8010f34:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 8010f36:	2304      	movs	r3, #4
 8010f38:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 8010f3a:	482d      	ldr	r0, [pc, #180]	; (8010ff0 <TransmitCanPkt+0x580>)
 8010f3c:	f015 fb48 	bl	80265d0 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010f40:	8afb      	ldrh	r3, [r7, #22]
 8010f42:	88fa      	ldrh	r2, [r7, #6]
 8010f44:	4619      	mov	r1, r3
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f000 f8fe 	bl	8011148 <sendCanPkts>
			break;
 8010f4c:	e026      	b.n	8010f9c <TransmitCanPkt+0x52c>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 8010f4e:	4b32      	ldr	r3, [pc, #200]	; (8011018 <TransmitCanPkt+0x5a8>)
 8010f50:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 8010f52:	2384      	movs	r3, #132	; 0x84
 8010f54:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010f56:	4b20      	ldr	r3, [pc, #128]	; (8010fd8 <TransmitCanPkt+0x568>)
 8010f58:	781b      	ldrb	r3, [r3, #0]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	d102      	bne.n	8010f64 <TransmitCanPkt+0x4f4>
			{
				printf("\nRelay Data 2-O\n");
 8010f5e:	482f      	ldr	r0, [pc, #188]	; (801101c <TransmitCanPkt+0x5ac>)
 8010f60:	f015 fb36 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010f64:	8afb      	ldrh	r3, [r7, #22]
 8010f66:	88fa      	ldrh	r2, [r7, #6]
 8010f68:	4619      	mov	r1, r3
 8010f6a:	68f8      	ldr	r0, [r7, #12]
 8010f6c:	f000 f8ec 	bl	8011148 <sendCanPkts>
			break;
 8010f70:	e014      	b.n	8010f9c <TransmitCanPkt+0x52c>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 8010f72:	4b20      	ldr	r3, [pc, #128]	; (8010ff4 <TransmitCanPkt+0x584>)
 8010f74:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 8010f76:	2302      	movs	r3, #2
 8010f78:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8010f7a:	4b17      	ldr	r3, [pc, #92]	; (8010fd8 <TransmitCanPkt+0x568>)
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	d102      	bne.n	8010f88 <TransmitCanPkt+0x518>
			{
				printf("Sending App Data CRC to Other\n");
 8010f82:	481d      	ldr	r0, [pc, #116]	; (8010ff8 <TransmitCanPkt+0x588>)
 8010f84:	f015 fb24 	bl	80265d0 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8010f88:	8afb      	ldrh	r3, [r7, #22]
 8010f8a:	88fa      	ldrh	r2, [r7, #6]
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f000 f8da 	bl	8011148 <sendCanPkts>
			break;
 8010f94:	e002      	b.n	8010f9c <TransmitCanPkt+0x52c>

		default:
			break;
 8010f96:	bf00      	nop
 8010f98:	e0bd      	b.n	8011116 <TransmitCanPkt+0x6a6>
			break;
 8010f9a:	bf00      	nop
		}

		break;
 8010f9c:	e0bb      	b.n	8011116 <TransmitCanPkt+0x6a6>
		/* _____________________________ MEDHA ________________________________________ */

	}
	case KYOSAN:
	{
		switch((int)Ken_idetifier)
 8010f9e:	88fb      	ldrh	r3, [r7, #6]
 8010fa0:	f240 220a 	movw	r2, #522	; 0x20a
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	f300 80b2 	bgt.w	801110e <TransmitCanPkt+0x69e>
 8010faa:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010fae:	f300 809c 	bgt.w	80110ea <TransmitCanPkt+0x67a>
 8010fb2:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010fb6:	f300 80aa 	bgt.w	801110e <TransmitCanPkt+0x69e>
 8010fba:	f240 2207 	movw	r2, #519	; 0x207
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	da77      	bge.n	80110b2 <TransmitCanPkt+0x642>
 8010fc2:	f240 1219 	movw	r2, #281	; 0x119
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d02a      	beq.n	8011020 <TransmitCanPkt+0x5b0>
 8010fca:	f240 2205 	movw	r2, #517	; 0x205
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d07d      	beq.n	80110ce <TransmitCanPkt+0x65e>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
			break;

		default:
			break;
 8010fd2:	e09c      	b.n	801110e <TransmitCanPkt+0x69e>
 8010fd4:	20004bd0 	.word	0x20004bd0
 8010fd8:	20000bbb 	.word	0x20000bbb
 8010fdc:	0802ad5c 	.word	0x0802ad5c
 8010fe0:	20004dfc 	.word	0x20004dfc
 8010fe4:	20000504 	.word	0x20000504
 8010fe8:	0802ad74 	.word	0x0802ad74
 8010fec:	20004bc8 	.word	0x20004bc8
 8010ff0:	0802ad04 	.word	0x0802ad04
 8010ff4:	20000bb8 	.word	0x20000bb8
 8010ff8:	0802ad3c 	.word	0x0802ad3c
 8010ffc:	20003d1c 	.word	0x20003d1c
 8011000:	0802ad8c 	.word	0x0802ad8c
 8011004:	20003d60 	.word	0x20003d60
 8011008:	0802adb0 	.word	0x0802adb0
 801100c:	20003094 	.word	0x20003094
 8011010:	0802acd0 	.word	0x0802acd0
 8011014:	20003d5c 	.word	0x20003d5c
 8011018:	20003d78 	.word	0x20003d78
 801101c:	0802adc0 	.word	0x0802adc0
			memcpy(Kyosan_can_relays_st.Relays,Kyosan_FinalRelays.Relays,MAX_KYOSAN_RELAYS);
 8011020:	4a3e      	ldr	r2, [pc, #248]	; (801111c <TransmitCanPkt+0x6ac>)
 8011022:	4b3f      	ldr	r3, [pc, #252]	; (8011120 <TransmitCanPkt+0x6b0>)
 8011024:	3302      	adds	r3, #2
 8011026:	1c90      	adds	r0, r2, #2
 8011028:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801102c:	4602      	mov	r2, r0
 801102e:	4619      	mov	r1, r3
 8011030:	f8d1 c000 	ldr.w	ip, [r1]
 8011034:	684e      	ldr	r6, [r1, #4]
 8011036:	688d      	ldr	r5, [r1, #8]
 8011038:	68c9      	ldr	r1, [r1, #12]
 801103a:	f8c2 c000 	str.w	ip, [r2]
 801103e:	6056      	str	r6, [r2, #4]
 8011040:	6095      	str	r5, [r2, #8]
 8011042:	60d1      	str	r1, [r2, #12]
 8011044:	3310      	adds	r3, #16
 8011046:	3010      	adds	r0, #16
 8011048:	42a3      	cmp	r3, r4
 801104a:	d1ef      	bne.n	801102c <TransmitCanPkt+0x5bc>
 801104c:	4602      	mov	r2, r0
 801104e:	6818      	ldr	r0, [r3, #0]
 8011050:	6859      	ldr	r1, [r3, #4]
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	6010      	str	r0, [r2, #0]
 8011056:	6051      	str	r1, [r2, #4]
 8011058:	6093      	str	r3, [r2, #8]
			Kyosan_can_relays_st.No_Of_CAN_Bytes = 60;
 801105a:	4b30      	ldr	r3, [pc, #192]	; (801111c <TransmitCanPkt+0x6ac>)
 801105c:	223c      	movs	r2, #60	; 0x3c
 801105e:	801a      	strh	r2, [r3, #0]
			pp_ptr = &Kyosan_can_relays_st;
 8011060:	4b2e      	ldr	r3, [pc, #184]	; (801111c <TransmitCanPkt+0x6ac>)
 8011062:	60fb      	str	r3, [r7, #12]
			uc_size =(sizeof(KYOSAN_CAN_RELAYS_t));
 8011064:	233e      	movs	r3, #62	; 0x3e
 8011066:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011068:	8afb      	ldrh	r3, [r7, #22]
 801106a:	88fa      	ldrh	r2, [r7, #6]
 801106c:	4619      	mov	r1, r3
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	f000 f86a 	bl	8011148 <sendCanPkts>
			if(Debug_flag == 1)
 8011074:	4b2b      	ldr	r3, [pc, #172]	; (8011124 <TransmitCanPkt+0x6b4>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b01      	cmp	r3, #1
 801107a:	d14a      	bne.n	8011112 <TransmitCanPkt+0x6a2>
				printf("SENT SIGNAL DATA TO MIE\n");
 801107c:	482a      	ldr	r0, [pc, #168]	; (8011128 <TransmitCanPkt+0x6b8>)
 801107e:	f015 faa7 	bl	80265d0 <puts>
				for(uint8_t i=0;i<Kyosan_can_relays_st.No_Of_CAN_Bytes;++i)
 8011082:	2300      	movs	r3, #0
 8011084:	74fb      	strb	r3, [r7, #19]
 8011086:	e00a      	b.n	801109e <TransmitCanPkt+0x62e>
					printf("%02X ",Kyosan_can_relays_st.Relays[i]);
 8011088:	7cfb      	ldrb	r3, [r7, #19]
 801108a:	4a24      	ldr	r2, [pc, #144]	; (801111c <TransmitCanPkt+0x6ac>)
 801108c:	4413      	add	r3, r2
 801108e:	789b      	ldrb	r3, [r3, #2]
 8011090:	4619      	mov	r1, r3
 8011092:	4826      	ldr	r0, [pc, #152]	; (801112c <TransmitCanPkt+0x6bc>)
 8011094:	f015 fa00 	bl	8026498 <iprintf>
				for(uint8_t i=0;i<Kyosan_can_relays_st.No_Of_CAN_Bytes;++i)
 8011098:	7cfb      	ldrb	r3, [r7, #19]
 801109a:	3301      	adds	r3, #1
 801109c:	74fb      	strb	r3, [r7, #19]
 801109e:	7cfb      	ldrb	r3, [r7, #19]
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	4b1e      	ldr	r3, [pc, #120]	; (801111c <TransmitCanPkt+0x6ac>)
 80110a4:	881b      	ldrh	r3, [r3, #0]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d3ee      	bcc.n	8011088 <TransmitCanPkt+0x618>
				printf("\n");
 80110aa:	200a      	movs	r0, #10
 80110ac:	f015 fa0c 	bl	80264c8 <putchar>
			break;
 80110b0:	e02f      	b.n	8011112 <TransmitCanPkt+0x6a2>
			pp_ptr = &Kyosan_SelfRelays;
 80110b2:	4b1f      	ldr	r3, [pc, #124]	; (8011130 <TransmitCanPkt+0x6c0>)
 80110b4:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_RELAYS_t);
 80110b6:	2340      	movs	r3, #64	; 0x40
 80110b8:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Relays 2-O\n");
 80110ba:	481e      	ldr	r0, [pc, #120]	; (8011134 <TransmitCanPkt+0x6c4>)
 80110bc:	f015 fa88 	bl	80265d0 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80110c0:	8afb      	ldrh	r3, [r7, #22]
 80110c2:	88fa      	ldrh	r2, [r7, #6]
 80110c4:	4619      	mov	r1, r3
 80110c6:	68f8      	ldr	r0, [r7, #12]
 80110c8:	f000 f83e 	bl	8011148 <sendCanPkts>
			break;
 80110cc:	e022      	b.n	8011114 <TransmitCanPkt+0x6a4>
			pp_ptr = &KyosanFaultInjection_st;
 80110ce:	4b1a      	ldr	r3, [pc, #104]	; (8011138 <TransmitCanPkt+0x6c8>)
 80110d0:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_FAULT_INJECTION_t);
 80110d2:	2308      	movs	r3, #8
 80110d4:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 80110d6:	4819      	ldr	r0, [pc, #100]	; (801113c <TransmitCanPkt+0x6cc>)
 80110d8:	f015 fa7a 	bl	80265d0 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80110dc:	8afb      	ldrh	r3, [r7, #22]
 80110de:	88fa      	ldrh	r2, [r7, #6]
 80110e0:	4619      	mov	r1, r3
 80110e2:	68f8      	ldr	r0, [r7, #12]
 80110e4:	f000 f830 	bl	8011148 <sendCanPkts>
			break;
 80110e8:	e014      	b.n	8011114 <TransmitCanPkt+0x6a4>
			pp_ptr = &DatCrcXchangeOther_st;
 80110ea:	4b15      	ldr	r3, [pc, #84]	; (8011140 <TransmitCanPkt+0x6d0>)
 80110ec:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 80110ee:	2302      	movs	r3, #2
 80110f0:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80110f2:	4b0c      	ldr	r3, [pc, #48]	; (8011124 <TransmitCanPkt+0x6b4>)
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d102      	bne.n	8011100 <TransmitCanPkt+0x690>
				printf("Sending App Data CRC to Other\n");
 80110fa:	4812      	ldr	r0, [pc, #72]	; (8011144 <TransmitCanPkt+0x6d4>)
 80110fc:	f015 fa68 	bl	80265d0 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011100:	8afb      	ldrh	r3, [r7, #22]
 8011102:	88fa      	ldrh	r2, [r7, #6]
 8011104:	4619      	mov	r1, r3
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f000 f81e 	bl	8011148 <sendCanPkts>
			break;
 801110c:	e002      	b.n	8011114 <TransmitCanPkt+0x6a4>
			break;
 801110e:	bf00      	nop
 8011110:	e000      	b.n	8011114 <TransmitCanPkt+0x6a4>
			break;
 8011112:	bf00      	nop
		}
		break;
 8011114:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 8011116:	371c      	adds	r7, #28
 8011118:	46bd      	mov	sp, r7
 801111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801111c:	2000b4f4 	.word	0x2000b4f4
 8011120:	2000b4b4 	.word	0x2000b4b4
 8011124:	20000bbb 	.word	0x20000bbb
 8011128:	0802ac94 	.word	0x0802ac94
 801112c:	0802add0 	.word	0x0802add0
 8011130:	2000b3f4 	.word	0x2000b3f4
 8011134:	0802add8 	.word	0x0802add8
 8011138:	2000b3d8 	.word	0x2000b3d8
 801113c:	0802ad04 	.word	0x0802ad04
 8011140:	20000bb8 	.word	0x20000bb8
 8011144:	0802ad3c 	.word	0x0802ad3c

08011148 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b088      	sub	sp, #32
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	4613      	mov	r3, r2
 8011154:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	61fb      	str	r3, [r7, #28]
 801115a:	2300      	movs	r3, #0
 801115c:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	617b      	str	r3, [r7, #20]
	while(j > 0)
 8011162:	e019      	b.n	8011198 <sendCanPkts+0x50>
	{
		if(j < 7)
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	2b06      	cmp	r3, #6
 8011168:	dc07      	bgt.n	801117a <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 801116a:	88f8      	ldrh	r0, [r7, #6]
 801116c:	69fb      	ldr	r3, [r7, #28]
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	6979      	ldr	r1, [r7, #20]
 8011174:	f000 f818 	bl	80111a8 <CAN_transmit>
 8011178:	e005      	b.n	8011186 <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 801117a:	88f8      	ldrh	r0, [r7, #6]
 801117c:	69bb      	ldr	r3, [r7, #24]
 801117e:	2208      	movs	r2, #8
 8011180:	6979      	ldr	r1, [r7, #20]
 8011182:	f000 f811 	bl	80111a8 <CAN_transmit>
		}
		cptr += 7;
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	3307      	adds	r3, #7
 801118a:	617b      	str	r3, [r7, #20]
		j-=7;
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	3b07      	subs	r3, #7
 8011190:	61fb      	str	r3, [r7, #28]
		seqNo++;
 8011192:	69bb      	ldr	r3, [r7, #24]
 8011194:	3301      	adds	r3, #1
 8011196:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	2b00      	cmp	r3, #0
 801119c:	dce2      	bgt.n	8011164 <sendCanPkts+0x1c>
	}
}
 801119e:	bf00      	nop
 80111a0:	bf00      	nop
 80111a2:	3720      	adds	r7, #32
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b088      	sub	sp, #32
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	603b      	str	r3, [r7, #0]
	char i=0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 80111ba:	f008 f963 	bl	8019484 <HAL_GetTick>
 80111be:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	b2da      	uxtb	r2, r3
 80111c4:	4b4d      	ldr	r3, [pc, #308]	; (80112fc <CAN_transmit+0x154>)
 80111c6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 80111c8:	2300      	movs	r3, #0
 80111ca:	77fb      	strb	r3, [r7, #31]
 80111cc:	e00a      	b.n	80111e4 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 80111ce:	7ffb      	ldrb	r3, [r7, #31]
 80111d0:	68ba      	ldr	r2, [r7, #8]
 80111d2:	441a      	add	r2, r3
 80111d4:	7ffb      	ldrb	r3, [r7, #31]
 80111d6:	3301      	adds	r3, #1
 80111d8:	7811      	ldrb	r1, [r2, #0]
 80111da:	4a48      	ldr	r2, [pc, #288]	; (80112fc <CAN_transmit+0x154>)
 80111dc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 80111de:	7ffb      	ldrb	r3, [r7, #31]
 80111e0:	3301      	adds	r3, #1
 80111e2:	77fb      	strb	r3, [r7, #31]
 80111e4:	7ffa      	ldrb	r2, [r7, #31]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	429a      	cmp	r2, r3
 80111ec:	dbef      	blt.n	80111ce <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111f4:	da3b      	bge.n	801126e <CAN_transmit+0xc6>
	{
		while(len!=0)
 80111f6:	e036      	b.n	8011266 <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 80111f8:	4b41      	ldr	r3, [pc, #260]	; (8011300 <CAN_transmit+0x158>)
 80111fa:	2200      	movs	r2, #0
 80111fc:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	4a3f      	ldr	r2, [pc, #252]	; (8011300 <CAN_transmit+0x158>)
 8011202:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 8011204:	4b3e      	ldr	r3, [pc, #248]	; (8011300 <CAN_transmit+0x158>)
 8011206:	2200      	movs	r2, #0
 8011208:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4a3c      	ldr	r2, [pc, #240]	; (8011300 <CAN_transmit+0x158>)
 801120e:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 8011210:	2300      	movs	r3, #0
 8011212:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 8011214:	4b3b      	ldr	r3, [pc, #236]	; (8011304 <CAN_transmit+0x15c>)
 8011216:	4a39      	ldr	r2, [pc, #228]	; (80112fc <CAN_transmit+0x154>)
 8011218:	4939      	ldr	r1, [pc, #228]	; (8011300 <CAN_transmit+0x158>)
 801121a:	483b      	ldr	r0, [pc, #236]	; (8011308 <CAN_transmit+0x160>)
 801121c:	f008 fbd8 	bl	80199d0 <HAL_CAN_AddTxMessage>
 8011220:	4603      	mov	r3, r0
 8011222:	461a      	mov	r2, r3
 8011224:	4b39      	ldr	r3, [pc, #228]	; (801130c <CAN_transmit+0x164>)
 8011226:	701a      	strb	r2, [r3, #0]
 8011228:	4b38      	ldr	r3, [pc, #224]	; (801130c <CAN_transmit+0x164>)
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00d      	beq.n	801124c <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 8011230:	4837      	ldr	r0, [pc, #220]	; (8011310 <CAN_transmit+0x168>)
 8011232:	f015 f9cd 	bl	80265d0 <puts>
				return;
 8011236:	e05e      	b.n	80112f6 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 8011238:	69b8      	ldr	r0, [r7, #24]
 801123a:	f7fe fe9d 	bl	800ff78 <HAL_Elaps_Ticks>
 801123e:	4603      	mov	r3, r0
 8011240:	2b64      	cmp	r3, #100	; 0x64
 8011242:	d903      	bls.n	801124c <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 8011244:	4832      	ldr	r0, [pc, #200]	; (8011310 <CAN_transmit+0x168>)
 8011246:	f015 f9c3 	bl	80265d0 <puts>
					return;
 801124a:	e054      	b.n	80112f6 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 801124c:	4b2d      	ldr	r3, [pc, #180]	; (8011304 <CAN_transmit+0x15c>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	4619      	mov	r1, r3
 8011252:	482d      	ldr	r0, [pc, #180]	; (8011308 <CAN_transmit+0x160>)
 8011254:	f008 fc8c 	bl	8019b70 <HAL_CAN_IsTxMessagePending>
 8011258:	4603      	mov	r3, r0
 801125a:	75bb      	strb	r3, [r7, #22]
 801125c:	7dbb      	ldrb	r3, [r7, #22]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1ea      	bne.n	8011238 <CAN_transmit+0x90>
				}
			}

			len=0;
 8011262:	2300      	movs	r3, #0
 8011264:	607b      	str	r3, [r7, #4]
		while(len!=0)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d1c5      	bne.n	80111f8 <CAN_transmit+0x50>
 801126c:	e043      	b.n	80112f6 <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 801126e:	4929      	ldr	r1, [pc, #164]	; (8011314 <CAN_transmit+0x16c>)
 8011270:	4829      	ldr	r0, [pc, #164]	; (8011318 <CAN_transmit+0x170>)
 8011272:	f7ee ffe5 	bl	8000240 <strcmp>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d03b      	beq.n	80112f4 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 801127c:	e036      	b.n	80112ec <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 801127e:	4b27      	ldr	r3, [pc, #156]	; (801131c <CAN_transmit+0x174>)
 8011280:	2200      	movs	r2, #0
 8011282:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	4a25      	ldr	r2, [pc, #148]	; (801131c <CAN_transmit+0x174>)
 8011288:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 801128a:	4b24      	ldr	r3, [pc, #144]	; (801131c <CAN_transmit+0x174>)
 801128c:	2200      	movs	r2, #0
 801128e:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	4a22      	ldr	r2, [pc, #136]	; (801131c <CAN_transmit+0x174>)
 8011294:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 8011296:	2300      	movs	r3, #0
 8011298:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 801129a:	4b21      	ldr	r3, [pc, #132]	; (8011320 <CAN_transmit+0x178>)
 801129c:	4a17      	ldr	r2, [pc, #92]	; (80112fc <CAN_transmit+0x154>)
 801129e:	491f      	ldr	r1, [pc, #124]	; (801131c <CAN_transmit+0x174>)
 80112a0:	4820      	ldr	r0, [pc, #128]	; (8011324 <CAN_transmit+0x17c>)
 80112a2:	f008 fb95 	bl	80199d0 <HAL_CAN_AddTxMessage>
 80112a6:	4603      	mov	r3, r0
 80112a8:	461a      	mov	r2, r3
 80112aa:	4b18      	ldr	r3, [pc, #96]	; (801130c <CAN_transmit+0x164>)
 80112ac:	701a      	strb	r2, [r3, #0]
 80112ae:	4b17      	ldr	r3, [pc, #92]	; (801130c <CAN_transmit+0x164>)
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d00d      	beq.n	80112d2 <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 80112b6:	481c      	ldr	r0, [pc, #112]	; (8011328 <CAN_transmit+0x180>)
 80112b8:	f015 f98a 	bl	80265d0 <puts>
				return;
 80112bc:	e01b      	b.n	80112f6 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 80112be:	69b8      	ldr	r0, [r7, #24]
 80112c0:	f7fe fe5a 	bl	800ff78 <HAL_Elaps_Ticks>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b64      	cmp	r3, #100	; 0x64
 80112c8:	d903      	bls.n	80112d2 <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 80112ca:	4817      	ldr	r0, [pc, #92]	; (8011328 <CAN_transmit+0x180>)
 80112cc:	f015 f980 	bl	80265d0 <puts>
					return;
 80112d0:	e011      	b.n	80112f6 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 80112d2:	4b13      	ldr	r3, [pc, #76]	; (8011320 <CAN_transmit+0x178>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4619      	mov	r1, r3
 80112d8:	4812      	ldr	r0, [pc, #72]	; (8011324 <CAN_transmit+0x17c>)
 80112da:	f008 fc49 	bl	8019b70 <HAL_CAN_IsTxMessagePending>
 80112de:	4603      	mov	r3, r0
 80112e0:	75fb      	strb	r3, [r7, #23]
 80112e2:	7dfb      	ldrb	r3, [r7, #23]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d1ea      	bne.n	80112be <CAN_transmit+0x116>
				}
			}
			len=0;
 80112e8:	2300      	movs	r3, #0
 80112ea:	607b      	str	r3, [r7, #4]
		while(len!=0)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d1c5      	bne.n	801127e <CAN_transmit+0xd6>
 80112f2:	e000      	b.n	80112f6 <CAN_transmit+0x14e>
			return;
 80112f4:	bf00      	nop
		}
	}
}
 80112f6:	3720      	adds	r7, #32
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	2000b238 	.word	0x2000b238
 8011300:	2000b1b8 	.word	0x2000b1b8
 8011304:	2000b1e8 	.word	0x2000b1e8
 8011308:	2000b244 	.word	0x2000b244
 801130c:	2000b240 	.word	0x2000b240
 8011310:	0802adec 	.word	0x0802adec
 8011314:	0802adfc 	.word	0x0802adfc
 8011318:	20000505 	.word	0x20000505
 801131c:	2000b1d0 	.word	0x2000b1d0
 8011320:	2000b1ec 	.word	0x2000b1ec
 8011324:	2000b2a8 	.word	0x2000b2a8
 8011328:	0802ae08 	.word	0x0802ae08

0801132c <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4a3e      	ldr	r2, [pc, #248]	; (8011434 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d175      	bne.n	801142a <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 801133e:	4b3e      	ldr	r3, [pc, #248]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011340:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011344:	881b      	ldrh	r3, [r3, #0]
 8011346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801134a:	d104      	bne.n	8011356 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 801134c:	4b3a      	ldr	r3, [pc, #232]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801134e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011352:	2200      	movs	r2, #0
 8011354:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 8011356:	4b39      	ldr	r3, [pc, #228]	; (801143c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8011358:	4a39      	ldr	r2, [pc, #228]	; (8011440 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801135a:	2100      	movs	r1, #0
 801135c:	4839      	ldr	r0, [pc, #228]	; (8011444 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 801135e:	f008 fc2b 	bl	8019bb8 <HAL_CAN_GetRxMessage>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d001      	beq.n	801136c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 8011368:	f006 fa92 	bl	8017890 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 801136c:	4b32      	ldr	r3, [pc, #200]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801136e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011372:	881b      	ldrh	r3, [r3, #0]
 8011374:	4a30      	ldr	r2, [pc, #192]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011376:	011b      	lsls	r3, r3, #4
 8011378:	4413      	add	r3, r2
 801137a:	330f      	adds	r3, #15
 801137c:	2203      	movs	r2, #3
 801137e:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 8011380:	4b2f      	ldr	r3, [pc, #188]	; (8011440 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011382:	691a      	ldr	r2, [r3, #16]
 8011384:	4b2c      	ldr	r3, [pc, #176]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011386:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801138a:	881b      	ldrh	r3, [r3, #0]
 801138c:	b2d1      	uxtb	r1, r2
 801138e:	4a2a      	ldr	r2, [pc, #168]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011390:	011b      	lsls	r3, r3, #4
 8011392:	4413      	add	r3, r2
 8011394:	330c      	adds	r3, #12
 8011396:	460a      	mov	r2, r1
 8011398:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 801139a:	4b29      	ldr	r3, [pc, #164]	; (8011440 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801139c:	689a      	ldr	r2, [r3, #8]
 801139e:	4b26      	ldr	r3, [pc, #152]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113a4:	881b      	ldrh	r3, [r3, #0]
 80113a6:	b2d1      	uxtb	r1, r2
 80113a8:	4a23      	ldr	r2, [pc, #140]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113aa:	011b      	lsls	r3, r3, #4
 80113ac:	4413      	add	r3, r2
 80113ae:	330d      	adds	r3, #13
 80113b0:	460a      	mov	r2, r1
 80113b2:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 80113b4:	4b22      	ldr	r3, [pc, #136]	; (8011440 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80113b6:	68da      	ldr	r2, [r3, #12]
 80113b8:	4b1f      	ldr	r3, [pc, #124]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113be:	881b      	ldrh	r3, [r3, #0]
 80113c0:	b2d1      	uxtb	r1, r2
 80113c2:	4a1d      	ldr	r2, [pc, #116]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113c4:	011b      	lsls	r3, r3, #4
 80113c6:	4413      	add	r3, r2
 80113c8:	330e      	adds	r3, #14
 80113ca:	460a      	mov	r2, r1
 80113cc:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 80113ce:	4b1a      	ldr	r3, [pc, #104]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113d4:	881b      	ldrh	r3, [r3, #0]
 80113d6:	4618      	mov	r0, r3
 80113d8:	4b19      	ldr	r3, [pc, #100]	; (8011440 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80113da:	681a      	ldr	r2, [r3, #0]
 80113dc:	4916      	ldr	r1, [pc, #88]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113de:	0103      	lsls	r3, r0, #4
 80113e0:	440b      	add	r3, r1
 80113e2:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 80113e4:	4b14      	ldr	r3, [pc, #80]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113ea:	881b      	ldrh	r3, [r3, #0]
 80113ec:	4a12      	ldr	r2, [pc, #72]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113ee:	011b      	lsls	r3, r3, #4
 80113f0:	4413      	add	r3, r2
 80113f2:	330e      	adds	r3, #14
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d117      	bne.n	801142a <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 80113fa:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80113fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011400:	881b      	ldrh	r3, [r3, #0]
 8011402:	011b      	lsls	r3, r3, #4
 8011404:	4a0c      	ldr	r2, [pc, #48]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011406:	4413      	add	r3, r2
 8011408:	3304      	adds	r3, #4
 801140a:	490c      	ldr	r1, [pc, #48]	; (801143c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 801140c:	461a      	mov	r2, r3
 801140e:	460b      	mov	r3, r1
 8011410:	cb03      	ldmia	r3!, {r0, r1}
 8011412:	6010      	str	r0, [r2, #0]
 8011414:	6051      	str	r1, [r2, #4]
			canRead.In++;
 8011416:	4b08      	ldr	r3, [pc, #32]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011418:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801141c:	881b      	ldrh	r3, [r3, #0]
 801141e:	3301      	adds	r3, #1
 8011420:	b29a      	uxth	r2, r3
 8011422:	4b05      	ldr	r3, [pc, #20]	; (8011438 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011424:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011428:	801a      	strh	r2, [r3, #0]
		}
	}
}
 801142a:	bf00      	nop
 801142c:	3708      	adds	r7, #8
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	40003400 	.word	0x40003400
 8011438:	200071b4 	.word	0x200071b4
 801143c:	2000b230 	.word	0x2000b230
 8011440:	2000b20c 	.word	0x2000b20c
 8011444:	2000b2a8 	.word	0x2000b2a8

08011448 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 8011450:	4b42      	ldr	r3, [pc, #264]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011452:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801145c:	d104      	bne.n	8011468 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 801145e:	4b3f      	ldr	r3, [pc, #252]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011460:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011464:	2200      	movs	r2, #0
 8011466:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 8011468:	4b3d      	ldr	r3, [pc, #244]	; (8011560 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 801146a:	4a3e      	ldr	r2, [pc, #248]	; (8011564 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 801146c:	2101      	movs	r1, #1
 801146e:	483e      	ldr	r0, [pc, #248]	; (8011568 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8011470:	f008 fba2 	bl	8019bb8 <HAL_CAN_GetRxMessage>
 8011474:	4603      	mov	r3, r0
 8011476:	461a      	mov	r2, r3
 8011478:	4b3c      	ldr	r3, [pc, #240]	; (801156c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 801147a:	701a      	strb	r2, [r3, #0]
 801147c:	4b3b      	ldr	r3, [pc, #236]	; (801156c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d007      	beq.n	8011494 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 8011484:	4b39      	ldr	r3, [pc, #228]	; (801156c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	4619      	mov	r1, r3
 801148a:	4839      	ldr	r0, [pc, #228]	; (8011570 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 801148c:	f015 f804 	bl	8026498 <iprintf>
		Error_Handler();
 8011490:	f006 f9fe 	bl	8017890 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 8011494:	4b31      	ldr	r3, [pc, #196]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011496:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801149a:	881b      	ldrh	r3, [r3, #0]
 801149c:	4a2f      	ldr	r2, [pc, #188]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801149e:	011b      	lsls	r3, r3, #4
 80114a0:	4413      	add	r3, r2
 80114a2:	330f      	adds	r3, #15
 80114a4:	2202      	movs	r2, #2
 80114a6:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 80114a8:	4b2e      	ldr	r3, [pc, #184]	; (8011564 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80114aa:	691a      	ldr	r2, [r3, #16]
 80114ac:	4b2b      	ldr	r3, [pc, #172]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80114ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114b2:	881b      	ldrh	r3, [r3, #0]
 80114b4:	b2d1      	uxtb	r1, r2
 80114b6:	4a29      	ldr	r2, [pc, #164]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80114b8:	011b      	lsls	r3, r3, #4
 80114ba:	4413      	add	r3, r2
 80114bc:	330c      	adds	r3, #12
 80114be:	460a      	mov	r2, r1
 80114c0:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 80114c2:	4b28      	ldr	r3, [pc, #160]	; (8011564 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80114c4:	689a      	ldr	r2, [r3, #8]
 80114c6:	4b25      	ldr	r3, [pc, #148]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80114c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114cc:	881b      	ldrh	r3, [r3, #0]
 80114ce:	b2d1      	uxtb	r1, r2
 80114d0:	4a22      	ldr	r2, [pc, #136]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80114d2:	011b      	lsls	r3, r3, #4
 80114d4:	4413      	add	r3, r2
 80114d6:	330d      	adds	r3, #13
 80114d8:	460a      	mov	r2, r1
 80114da:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 80114dc:	4b21      	ldr	r3, [pc, #132]	; (8011564 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80114de:	68da      	ldr	r2, [r3, #12]
 80114e0:	4b1e      	ldr	r3, [pc, #120]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80114e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114e6:	881b      	ldrh	r3, [r3, #0]
 80114e8:	b2d1      	uxtb	r1, r2
 80114ea:	4a1c      	ldr	r2, [pc, #112]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80114ec:	011b      	lsls	r3, r3, #4
 80114ee:	4413      	add	r3, r2
 80114f0:	330e      	adds	r3, #14
 80114f2:	460a      	mov	r2, r1
 80114f4:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 80114f6:	4b19      	ldr	r3, [pc, #100]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80114f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114fc:	881b      	ldrh	r3, [r3, #0]
 80114fe:	4618      	mov	r0, r3
 8011500:	4b18      	ldr	r3, [pc, #96]	; (8011564 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	4915      	ldr	r1, [pc, #84]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011506:	0103      	lsls	r3, r0, #4
 8011508:	440b      	add	r3, r1
 801150a:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 801150c:	4b13      	ldr	r3, [pc, #76]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801150e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011512:	881b      	ldrh	r3, [r3, #0]
 8011514:	4a11      	ldr	r2, [pc, #68]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011516:	011b      	lsls	r3, r3, #4
 8011518:	4413      	add	r3, r2
 801151a:	330e      	adds	r3, #14
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d117      	bne.n	8011552 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 8011522:	4b0e      	ldr	r3, [pc, #56]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011524:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	011b      	lsls	r3, r3, #4
 801152c:	4a0b      	ldr	r2, [pc, #44]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801152e:	4413      	add	r3, r2
 8011530:	3304      	adds	r3, #4
 8011532:	490b      	ldr	r1, [pc, #44]	; (8011560 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8011534:	461a      	mov	r2, r3
 8011536:	460b      	mov	r3, r1
 8011538:	cb03      	ldmia	r3!, {r0, r1}
 801153a:	6010      	str	r0, [r2, #0]
 801153c:	6051      	str	r1, [r2, #4]
		canRead.In++;
 801153e:	4b07      	ldr	r3, [pc, #28]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011540:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011544:	881b      	ldrh	r3, [r3, #0]
 8011546:	3301      	adds	r3, #1
 8011548:	b29a      	uxth	r2, r3
 801154a:	4b04      	ldr	r3, [pc, #16]	; (801155c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801154c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011550:	801a      	strh	r2, [r3, #0]
	}
}
 8011552:	bf00      	nop
 8011554:	3708      	adds	r7, #8
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	200071b4 	.word	0x200071b4
 8011560:	2000b228 	.word	0x2000b228
 8011564:	2000b1f0 	.word	0x2000b1f0
 8011568:	2000b244 	.word	0x2000b244
 801156c:	2000b240 	.word	0x2000b240
 8011570:	0802ae18 	.word	0x0802ae18

08011574 <canDataReady>:


unsigned char canDataReady()
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 801157a:	2300      	movs	r3, #0
 801157c:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 801157e:	4b27      	ldr	r3, [pc, #156]	; (801161c <canDataReady+0xa8>)
 8011580:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011584:	881a      	ldrh	r2, [r3, #0]
 8011586:	4b25      	ldr	r3, [pc, #148]	; (801161c <canDataReady+0xa8>)
 8011588:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801158c:	885b      	ldrh	r3, [r3, #2]
 801158e:	429a      	cmp	r2, r3
 8011590:	d101      	bne.n	8011596 <canDataReady+0x22>
	{
		return 0;
 8011592:	2300      	movs	r3, #0
 8011594:	e03e      	b.n	8011614 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8011596:	4b21      	ldr	r3, [pc, #132]	; (801161c <canDataReady+0xa8>)
 8011598:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801159c:	885b      	ldrh	r3, [r3, #2]
 801159e:	3301      	adds	r3, #1
 80115a0:	607b      	str	r3, [r7, #4]
 80115a2:	e02e      	b.n	8011602 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 80115a4:	4b1d      	ldr	r3, [pc, #116]	; (801161c <canDataReady+0xa8>)
 80115a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115aa:	885b      	ldrh	r3, [r3, #2]
 80115ac:	011b      	lsls	r3, r3, #4
 80115ae:	4a1b      	ldr	r2, [pc, #108]	; (801161c <canDataReady+0xa8>)
 80115b0:	1898      	adds	r0, r3, r2
 80115b2:	4b1a      	ldr	r3, [pc, #104]	; (801161c <canDataReady+0xa8>)
 80115b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115b8:	881b      	ldrh	r3, [r3, #0]
 80115ba:	011b      	lsls	r3, r3, #4
 80115bc:	4a17      	ldr	r2, [pc, #92]	; (801161c <canDataReady+0xa8>)
 80115be:	4413      	add	r3, r2
 80115c0:	2210      	movs	r2, #16
 80115c2:	4619      	mov	r1, r3
 80115c4:	f014 fe48 	bl	8026258 <memcmp>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d116      	bne.n	80115fc <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80115ce:	4b13      	ldr	r3, [pc, #76]	; (801161c <canDataReady+0xa8>)
 80115d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115d4:	885b      	ldrh	r3, [r3, #2]
 80115d6:	011b      	lsls	r3, r3, #4
 80115d8:	4a10      	ldr	r2, [pc, #64]	; (801161c <canDataReady+0xa8>)
 80115da:	4413      	add	r3, r2
 80115dc:	2210      	movs	r2, #16
 80115de:	2100      	movs	r1, #0
 80115e0:	4618      	mov	r0, r3
 80115e2:	f014 fe71 	bl	80262c8 <memset>
			canRead.Out++;
 80115e6:	4b0d      	ldr	r3, [pc, #52]	; (801161c <canDataReady+0xa8>)
 80115e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115ec:	885b      	ldrh	r3, [r3, #2]
 80115ee:	3301      	adds	r3, #1
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	4b0a      	ldr	r3, [pc, #40]	; (801161c <canDataReady+0xa8>)
 80115f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115f8:	805a      	strh	r2, [r3, #2]
			break;
 80115fa:	e00a      	b.n	8011612 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	3301      	adds	r3, #1
 8011600:	607b      	str	r3, [r7, #4]
 8011602:	4b06      	ldr	r3, [pc, #24]	; (801161c <canDataReady+0xa8>)
 8011604:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011608:	881b      	ldrh	r3, [r3, #0]
 801160a:	461a      	mov	r2, r3
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	4293      	cmp	r3, r2
 8011610:	d3c8      	bcc.n	80115a4 <canDataReady+0x30>
		}
	}
	return 1;
 8011612:	2301      	movs	r3, #1
}
 8011614:	4618      	mov	r0, r3
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	200071b4 	.word	0x200071b4

08011620 <readCanToStructs>:

void readCanToStructs(void)
{
 8011620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011622:	b08f      	sub	sp, #60	; 0x3c
 8011624:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801162c:	2300      	movs	r3, #0
 801162e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011632:	2300      	movs	r3, #0
 8011634:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 8011638:	2300      	movs	r3, #0
 801163a:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 801163c:	4bc4      	ldr	r3, [pc, #784]	; (8011950 <readCanToStructs+0x330>)
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	3b01      	subs	r3, #1
 8011642:	2b03      	cmp	r3, #3
 8011644:	f204 80d7 	bhi.w	80157f6 <readCanToStructs+0x41d6>
 8011648:	a201      	add	r2, pc, #4	; (adr r2, 8011650 <readCanToStructs+0x30>)
 801164a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801164e:	bf00      	nop
 8011650:	08011661 	.word	0x08011661
 8011654:	08013d67 	.word	0x08013d67
 8011658:	08014e35 	.word	0x08014e35
 801165c:	080157eb 	.word	0x080157eb
	{
	case HITACHI:
	{
		/* ___________________ HITACHI _______________ */
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8011660:	4bbc      	ldr	r3, [pc, #752]	; (8011954 <readCanToStructs+0x334>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	09db      	lsrs	r3, r3, #7
 8011666:	f003 0301 	and.w	r3, r3, #1
 801166a:	2b00      	cmp	r3, #0
 801166c:	f044 80c5 	bne.w	80157fa <readCanToStructs+0x41da>
		{
			return;
		}
		while(canDataReady())
 8011670:	f001 baf3 	b.w	8012c5a <readCanToStructs+0x163a>
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011674:	4bb8      	ldr	r3, [pc, #736]	; (8011958 <readCanToStructs+0x338>)
 8011676:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801167a:	885b      	ldrh	r3, [r3, #2]
 801167c:	4ab6      	ldr	r2, [pc, #728]	; (8011958 <readCanToStructs+0x338>)
 801167e:	011b      	lsls	r3, r3, #4
 8011680:	4413      	add	r3, r2
 8011682:	330f      	adds	r3, #15
 8011684:	781b      	ldrb	r3, [r3, #0]
 8011686:	3b01      	subs	r3, #1
 8011688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 801168c:	4bb2      	ldr	r3, [pc, #712]	; (8011958 <readCanToStructs+0x338>)
 801168e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011692:	885b      	ldrh	r3, [r3, #2]
 8011694:	4ab0      	ldr	r2, [pc, #704]	; (8011958 <readCanToStructs+0x338>)
 8011696:	011b      	lsls	r3, r3, #4
 8011698:	4413      	add	r3, r2
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	f240 220a 	movw	r2, #522	; 0x20a
 80116a0:	4293      	cmp	r3, r2
 80116a2:	f201 82b7 	bhi.w	8012c14 <readCanToStructs+0x15f4>
 80116a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116aa:	d80a      	bhi.n	80116c2 <readCanToStructs+0xa2>
 80116ac:	f240 1203 	movw	r2, #259	; 0x103
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d023      	beq.n	80116fc <readCanToStructs+0xdc>
 80116b4:	f240 1209 	movw	r2, #265	; 0x109
 80116b8:	4293      	cmp	r3, r2
 80116ba:	f000 80f5 	beq.w	80118a8 <readCanToStructs+0x288>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 80116be:	f001 baa9 	b.w	8012c14 <readCanToStructs+0x15f4>
 80116c2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80116c6:	2b09      	cmp	r3, #9
 80116c8:	f201 82a4 	bhi.w	8012c14 <readCanToStructs+0x15f4>
 80116cc:	a201      	add	r2, pc, #4	; (adr r2, 80116d4 <readCanToStructs+0xb4>)
 80116ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d2:	bf00      	nop
 80116d4:	08011a7d 	.word	0x08011a7d
 80116d8:	08011c85 	.word	0x08011c85
 80116dc:	08011e5d 	.word	0x08011e5d
 80116e0:	08012077 	.word	0x08012077
 80116e4:	08012293 	.word	0x08012293
 80116e8:	08012c15 	.word	0x08012c15
 80116ec:	0801242b 	.word	0x0801242b
 80116f0:	08012663 	.word	0x08012663
 80116f4:	0801289f 	.word	0x0801289f
 80116f8:	08012a41 	.word	0x08012a41
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80116fc:	4b97      	ldr	r3, [pc, #604]	; (801195c <readCanToStructs+0x33c>)
 80116fe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011700:	4b95      	ldr	r3, [pc, #596]	; (8011958 <readCanToStructs+0x338>)
 8011702:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011706:	885b      	ldrh	r3, [r3, #2]
 8011708:	4a93      	ldr	r2, [pc, #588]	; (8011958 <readCanToStructs+0x338>)
 801170a:	011b      	lsls	r3, r3, #4
 801170c:	4413      	add	r3, r2
 801170e:	3304      	adds	r3, #4
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011716:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801171a:	2b00      	cmp	r3, #0
 801171c:	d110      	bne.n	8011740 <readCanToStructs+0x120>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801171e:	2206      	movs	r2, #6
 8011720:	2100      	movs	r1, #0
 8011722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011724:	f014 fdd0 	bl	80262c8 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801172c:	4a8c      	ldr	r2, [pc, #560]	; (8011960 <readCanToStructs+0x340>)
 801172e:	f240 4116 	movw	r1, #1046	; 0x416
 8011732:	fb01 f303 	mul.w	r3, r1, r3
 8011736:	4413      	add	r3, r2
 8011738:	f203 2307 	addw	r3, r3, #519	; 0x207
 801173c:	2200      	movs	r2, #0
 801173e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011744:	4a86      	ldr	r2, [pc, #536]	; (8011960 <readCanToStructs+0x340>)
 8011746:	f240 4116 	movw	r1, #1046	; 0x416
 801174a:	fb01 f303 	mul.w	r3, r1, r3
 801174e:	4413      	add	r3, r2
 8011750:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011754:	781b      	ldrb	r3, [r3, #0]
 8011756:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801175a:	429a      	cmp	r2, r3
 801175c:	d015      	beq.n	801178a <readCanToStructs+0x16a>
					printf("GPS Packet Seq no MisMatch\n");
 801175e:	4881      	ldr	r0, [pc, #516]	; (8011964 <readCanToStructs+0x344>)
 8011760:	f014 ff36 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011764:	2206      	movs	r2, #6
 8011766:	2100      	movs	r1, #0
 8011768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801176a:	f014 fdad 	bl	80262c8 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801176e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011772:	4a7b      	ldr	r2, [pc, #492]	; (8011960 <readCanToStructs+0x340>)
 8011774:	f240 4116 	movw	r1, #1046	; 0x416
 8011778:	fb01 f303 	mul.w	r3, r1, r3
 801177c:	4413      	add	r3, r2
 801177e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011782:	2200      	movs	r2, #0
 8011784:	701a      	strb	r2, [r3, #0]
					break;
 8011786:	f001 ba46 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801178a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801178e:	4613      	mov	r3, r2
 8011790:	00db      	lsls	r3, r3, #3
 8011792:	1a9b      	subs	r3, r3, r2
 8011794:	461a      	mov	r2, r3
 8011796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011798:	4413      	add	r3, r2
 801179a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801179c:	2301      	movs	r3, #1
 801179e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80117a2:	e016      	b.n	80117d2 <readCanToStructs+0x1b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80117a4:	4b6c      	ldr	r3, [pc, #432]	; (8011958 <readCanToStructs+0x338>)
 80117a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80117aa:	885b      	ldrh	r3, [r3, #2]
 80117ac:	461a      	mov	r2, r3
 80117ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117b2:	4969      	ldr	r1, [pc, #420]	; (8011958 <readCanToStructs+0x338>)
 80117b4:	0112      	lsls	r2, r2, #4
 80117b6:	440a      	add	r2, r1
 80117b8:	4413      	add	r3, r2
 80117ba:	3304      	adds	r3, #4
 80117bc:	781a      	ldrb	r2, [r3, #0]
 80117be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80117c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c4:	3301      	adds	r3, #1
 80117c6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80117c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117cc:	3301      	adds	r3, #1
 80117ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80117d2:	4b61      	ldr	r3, [pc, #388]	; (8011958 <readCanToStructs+0x338>)
 80117d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80117d8:	885b      	ldrh	r3, [r3, #2]
 80117da:	4a5f      	ldr	r2, [pc, #380]	; (8011958 <readCanToStructs+0x338>)
 80117dc:	011b      	lsls	r3, r3, #4
 80117de:	4413      	add	r3, r2
 80117e0:	330c      	adds	r3, #12
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d3db      	bcc.n	80117a4 <readCanToStructs+0x184>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80117ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117f0:	4a5b      	ldr	r2, [pc, #364]	; (8011960 <readCanToStructs+0x340>)
 80117f2:	f240 4116 	movw	r1, #1046	; 0x416
 80117f6:	fb01 f303 	mul.w	r3, r1, r3
 80117fa:	4413      	add	r3, r2
 80117fc:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	461a      	mov	r2, r3
 8011804:	4613      	mov	r3, r2
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801180a:	4b53      	ldr	r3, [pc, #332]	; (8011958 <readCanToStructs+0x338>)
 801180c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011810:	885b      	ldrh	r3, [r3, #2]
 8011812:	4951      	ldr	r1, [pc, #324]	; (8011958 <readCanToStructs+0x338>)
 8011814:	011b      	lsls	r3, r3, #4
 8011816:	440b      	add	r3, r1
 8011818:	330c      	adds	r3, #12
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	3b01      	subs	r3, #1
 801181e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011820:	2b05      	cmp	r3, #5
 8011822:	d91c      	bls.n	801185e <readCanToStructs+0x23e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011824:	4b50      	ldr	r3, [pc, #320]	; (8011968 <readCanToStructs+0x348>)
 8011826:	4a4d      	ldr	r2, [pc, #308]	; (801195c <readCanToStructs+0x33c>)
 8011828:	6811      	ldr	r1, [r2, #0]
 801182a:	6019      	str	r1, [r3, #0]
 801182c:	8892      	ldrh	r2, [r2, #4]
 801182e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011830:	4b4e      	ldr	r3, [pc, #312]	; (801196c <readCanToStructs+0x34c>)
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	2b01      	cmp	r3, #1
 8011836:	d102      	bne.n	801183e <readCanToStructs+0x21e>
						printf("GPS_PACKET_RECEIVED\n");
 8011838:	484d      	ldr	r0, [pc, #308]	; (8011970 <readCanToStructs+0x350>)
 801183a:	f014 fec9 	bl	80265d0 <puts>
					Write_RTC();
 801183e:	f7fa fead 	bl	800c59c <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011846:	4a46      	ldr	r2, [pc, #280]	; (8011960 <readCanToStructs+0x340>)
 8011848:	f240 4116 	movw	r1, #1046	; 0x416
 801184c:	fb01 f303 	mul.w	r3, r1, r3
 8011850:	4413      	add	r3, r2
 8011852:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011856:	2200      	movs	r2, #0
 8011858:	701a      	strb	r2, [r3, #0]
				break;
 801185a:	f001 b9dc 	b.w	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801185e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011862:	4a3f      	ldr	r2, [pc, #252]	; (8011960 <readCanToStructs+0x340>)
 8011864:	f240 4116 	movw	r1, #1046	; 0x416
 8011868:	fb01 f303 	mul.w	r3, r1, r3
 801186c:	4413      	add	r3, r2
 801186e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011872:	2201      	movs	r2, #1
 8011874:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8011876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801187a:	4939      	ldr	r1, [pc, #228]	; (8011960 <readCanToStructs+0x340>)
 801187c:	f240 4216 	movw	r2, #1046	; 0x416
 8011880:	fb03 f202 	mul.w	r2, r3, r2
 8011884:	440a      	add	r2, r1
 8011886:	f202 2207 	addw	r2, r2, #519	; 0x207
 801188a:	7812      	ldrb	r2, [r2, #0]
 801188c:	3201      	adds	r2, #1
 801188e:	b2d0      	uxtb	r0, r2
 8011890:	4a33      	ldr	r2, [pc, #204]	; (8011960 <readCanToStructs+0x340>)
 8011892:	f240 4116 	movw	r1, #1046	; 0x416
 8011896:	fb01 f303 	mul.w	r3, r1, r3
 801189a:	4413      	add	r3, r2
 801189c:	f203 2307 	addw	r3, r3, #519	; 0x207
 80118a0:	4602      	mov	r2, r0
 80118a2:	701a      	strb	r2, [r3, #0]
				break;
 80118a4:	f001 b9b7 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80118a8:	4b2c      	ldr	r3, [pc, #176]	; (801195c <readCanToStructs+0x33c>)
 80118aa:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80118ac:	4b2a      	ldr	r3, [pc, #168]	; (8011958 <readCanToStructs+0x338>)
 80118ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118b2:	885b      	ldrh	r3, [r3, #2]
 80118b4:	4a28      	ldr	r2, [pc, #160]	; (8011958 <readCanToStructs+0x338>)
 80118b6:	011b      	lsls	r3, r3, #4
 80118b8:	4413      	add	r3, r2
 80118ba:	3304      	adds	r3, #4
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80118c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d110      	bne.n	80118ec <readCanToStructs+0x2cc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80118ca:	2206      	movs	r2, #6
 80118cc:	2100      	movs	r1, #0
 80118ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118d0:	f014 fcfa 	bl	80262c8 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80118d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118d8:	4a21      	ldr	r2, [pc, #132]	; (8011960 <readCanToStructs+0x340>)
 80118da:	f240 4116 	movw	r1, #1046	; 0x416
 80118de:	fb01 f303 	mul.w	r3, r1, r3
 80118e2:	4413      	add	r3, r2
 80118e4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80118e8:	2200      	movs	r2, #0
 80118ea:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80118ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118f0:	4a1b      	ldr	r2, [pc, #108]	; (8011960 <readCanToStructs+0x340>)
 80118f2:	f240 4116 	movw	r1, #1046	; 0x416
 80118f6:	fb01 f303 	mul.w	r3, r1, r3
 80118fa:	4413      	add	r3, r2
 80118fc:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011906:	429a      	cmp	r2, r3
 8011908:	d015      	beq.n	8011936 <readCanToStructs+0x316>
					printf("GPS2 Packet Seq no MisMatch\n");
 801190a:	481a      	ldr	r0, [pc, #104]	; (8011974 <readCanToStructs+0x354>)
 801190c:	f014 fe60 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011910:	2206      	movs	r2, #6
 8011912:	2100      	movs	r1, #0
 8011914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011916:	f014 fcd7 	bl	80262c8 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801191a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801191e:	4a10      	ldr	r2, [pc, #64]	; (8011960 <readCanToStructs+0x340>)
 8011920:	f240 4116 	movw	r1, #1046	; 0x416
 8011924:	fb01 f303 	mul.w	r3, r1, r3
 8011928:	4413      	add	r3, r2
 801192a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801192e:	2200      	movs	r2, #0
 8011930:	701a      	strb	r2, [r3, #0]
					break;
 8011932:	f001 b970 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011936:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801193a:	4613      	mov	r3, r2
 801193c:	00db      	lsls	r3, r3, #3
 801193e:	1a9b      	subs	r3, r3, r2
 8011940:	461a      	mov	r2, r3
 8011942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011944:	4413      	add	r3, r2
 8011946:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011948:	2301      	movs	r3, #1
 801194a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801194e:	e02a      	b.n	80119a6 <readCanToStructs+0x386>
 8011950:	20000504 	.word	0x20000504
 8011954:	2000308c 	.word	0x2000308c
 8011958:	200071b4 	.word	0x200071b4
 801195c:	20003f30 	.word	0x20003f30
 8011960:	20006988 	.word	0x20006988
 8011964:	0802ae40 	.word	0x0802ae40
 8011968:	20003f28 	.word	0x20003f28
 801196c:	20000bbb 	.word	0x20000bbb
 8011970:	0802ae5c 	.word	0x0802ae5c
 8011974:	0802ae70 	.word	0x0802ae70
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011978:	4bb6      	ldr	r3, [pc, #728]	; (8011c54 <readCanToStructs+0x634>)
 801197a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801197e:	885b      	ldrh	r3, [r3, #2]
 8011980:	461a      	mov	r2, r3
 8011982:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011986:	49b3      	ldr	r1, [pc, #716]	; (8011c54 <readCanToStructs+0x634>)
 8011988:	0112      	lsls	r2, r2, #4
 801198a:	440a      	add	r2, r1
 801198c:	4413      	add	r3, r2
 801198e:	3304      	adds	r3, #4
 8011990:	781a      	ldrb	r2, [r3, #0]
 8011992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011994:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011998:	3301      	adds	r3, #1
 801199a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801199c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119a0:	3301      	adds	r3, #1
 80119a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119a6:	4bab      	ldr	r3, [pc, #684]	; (8011c54 <readCanToStructs+0x634>)
 80119a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119ac:	885b      	ldrh	r3, [r3, #2]
 80119ae:	4aa9      	ldr	r2, [pc, #676]	; (8011c54 <readCanToStructs+0x634>)
 80119b0:	011b      	lsls	r3, r3, #4
 80119b2:	4413      	add	r3, r2
 80119b4:	330c      	adds	r3, #12
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119bc:	429a      	cmp	r2, r3
 80119be:	d3db      	bcc.n	8011978 <readCanToStructs+0x358>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80119c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119c4:	4aa4      	ldr	r2, [pc, #656]	; (8011c58 <readCanToStructs+0x638>)
 80119c6:	f240 4116 	movw	r1, #1046	; 0x416
 80119ca:	fb01 f303 	mul.w	r3, r1, r3
 80119ce:	4413      	add	r3, r2
 80119d0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	461a      	mov	r2, r3
 80119d8:	4613      	mov	r3, r2
 80119da:	00db      	lsls	r3, r3, #3
 80119dc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80119de:	4b9d      	ldr	r3, [pc, #628]	; (8011c54 <readCanToStructs+0x634>)
 80119e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119e4:	885b      	ldrh	r3, [r3, #2]
 80119e6:	499b      	ldr	r1, [pc, #620]	; (8011c54 <readCanToStructs+0x634>)
 80119e8:	011b      	lsls	r3, r3, #4
 80119ea:	440b      	add	r3, r1
 80119ec:	330c      	adds	r3, #12
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	3b01      	subs	r3, #1
 80119f2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80119f4:	2b05      	cmp	r3, #5
 80119f6:	d91c      	bls.n	8011a32 <readCanToStructs+0x412>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80119f8:	4b98      	ldr	r3, [pc, #608]	; (8011c5c <readCanToStructs+0x63c>)
 80119fa:	4a99      	ldr	r2, [pc, #612]	; (8011c60 <readCanToStructs+0x640>)
 80119fc:	6811      	ldr	r1, [r2, #0]
 80119fe:	6019      	str	r1, [r3, #0]
 8011a00:	8892      	ldrh	r2, [r2, #4]
 8011a02:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011a04:	4b97      	ldr	r3, [pc, #604]	; (8011c64 <readCanToStructs+0x644>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	2b01      	cmp	r3, #1
 8011a0a:	d102      	bne.n	8011a12 <readCanToStructs+0x3f2>
						printf("GPS2_PACKET_RECEIVED\n");
 8011a0c:	4896      	ldr	r0, [pc, #600]	; (8011c68 <readCanToStructs+0x648>)
 8011a0e:	f014 fddf 	bl	80265d0 <puts>
					Write_RTC();
 8011a12:	f7fa fdc3 	bl	800c59c <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a1a:	4a8f      	ldr	r2, [pc, #572]	; (8011c58 <readCanToStructs+0x638>)
 8011a1c:	f240 4116 	movw	r1, #1046	; 0x416
 8011a20:	fb01 f303 	mul.w	r3, r1, r3
 8011a24:	4413      	add	r3, r2
 8011a26:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	701a      	strb	r2, [r3, #0]
				break;
 8011a2e:	f001 b8f2 	b.w	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8011a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a36:	4a88      	ldr	r2, [pc, #544]	; (8011c58 <readCanToStructs+0x638>)
 8011a38:	f240 4116 	movw	r1, #1046	; 0x416
 8011a3c:	fb01 f303 	mul.w	r3, r1, r3
 8011a40:	4413      	add	r3, r2
 8011a42:	f203 2312 	addw	r3, r3, #530	; 0x212
 8011a46:	2201      	movs	r2, #1
 8011a48:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8011a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a4e:	4982      	ldr	r1, [pc, #520]	; (8011c58 <readCanToStructs+0x638>)
 8011a50:	f240 4216 	movw	r2, #1046	; 0x416
 8011a54:	fb03 f202 	mul.w	r2, r3, r2
 8011a58:	440a      	add	r2, r1
 8011a5a:	f202 2213 	addw	r2, r2, #531	; 0x213
 8011a5e:	7812      	ldrb	r2, [r2, #0]
 8011a60:	3201      	adds	r2, #1
 8011a62:	b2d0      	uxtb	r0, r2
 8011a64:	4a7c      	ldr	r2, [pc, #496]	; (8011c58 <readCanToStructs+0x638>)
 8011a66:	f240 4116 	movw	r1, #1046	; 0x416
 8011a6a:	fb01 f303 	mul.w	r3, r1, r3
 8011a6e:	4413      	add	r3, r2
 8011a70:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011a74:	4602      	mov	r2, r0
 8011a76:	701a      	strb	r2, [r3, #0]
				break;
 8011a78:	f001 b8cd 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8011a7c:	4b7b      	ldr	r3, [pc, #492]	; (8011c6c <readCanToStructs+0x64c>)
 8011a7e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011a80:	4b74      	ldr	r3, [pc, #464]	; (8011c54 <readCanToStructs+0x634>)
 8011a82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a86:	885b      	ldrh	r3, [r3, #2]
 8011a88:	4a72      	ldr	r2, [pc, #456]	; (8011c54 <readCanToStructs+0x634>)
 8011a8a:	011b      	lsls	r3, r3, #4
 8011a8c:	4413      	add	r3, r2
 8011a8e:	3304      	adds	r3, #4
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011a96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d110      	bne.n	8011ac0 <readCanToStructs+0x4a0>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011a9e:	2218      	movs	r2, #24
 8011aa0:	2100      	movs	r1, #0
 8011aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011aa4:	f014 fc10 	bl	80262c8 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011aac:	4a6a      	ldr	r2, [pc, #424]	; (8011c58 <readCanToStructs+0x638>)
 8011aae:	f240 4116 	movw	r1, #1046	; 0x416
 8011ab2:	fb01 f303 	mul.w	r3, r1, r3
 8011ab6:	4413      	add	r3, r2
 8011ab8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011abc:	2200      	movs	r2, #0
 8011abe:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8011ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ac4:	4a64      	ldr	r2, [pc, #400]	; (8011c58 <readCanToStructs+0x638>)
 8011ac6:	f240 4116 	movw	r1, #1046	; 0x416
 8011aca:	fb01 f303 	mul.w	r3, r1, r3
 8011ace:	4413      	add	r3, r2
 8011ad0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d015      	beq.n	8011b0a <readCanToStructs+0x4ea>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8011ade:	4864      	ldr	r0, [pc, #400]	; (8011c70 <readCanToStructs+0x650>)
 8011ae0:	f014 fd76 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011ae4:	2218      	movs	r2, #24
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011aea:	f014 fbed 	bl	80262c8 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011af2:	4a59      	ldr	r2, [pc, #356]	; (8011c58 <readCanToStructs+0x638>)
 8011af4:	f240 4116 	movw	r1, #1046	; 0x416
 8011af8:	fb01 f303 	mul.w	r3, r1, r3
 8011afc:	4413      	add	r3, r2
 8011afe:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011b02:	2200      	movs	r2, #0
 8011b04:	701a      	strb	r2, [r3, #0]
					break;
 8011b06:	f001 b886 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011b0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011b0e:	4613      	mov	r3, r2
 8011b10:	00db      	lsls	r3, r3, #3
 8011b12:	1a9b      	subs	r3, r3, r2
 8011b14:	461a      	mov	r2, r3
 8011b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b18:	4413      	add	r3, r2
 8011b1a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b22:	e016      	b.n	8011b52 <readCanToStructs+0x532>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011b24:	4b4b      	ldr	r3, [pc, #300]	; (8011c54 <readCanToStructs+0x634>)
 8011b26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b2a:	885b      	ldrh	r3, [r3, #2]
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b32:	4948      	ldr	r1, [pc, #288]	; (8011c54 <readCanToStructs+0x634>)
 8011b34:	0112      	lsls	r2, r2, #4
 8011b36:	440a      	add	r2, r1
 8011b38:	4413      	add	r3, r2
 8011b3a:	3304      	adds	r3, #4
 8011b3c:	781a      	ldrb	r2, [r3, #0]
 8011b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b40:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b44:	3301      	adds	r3, #1
 8011b46:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011b48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b52:	4b40      	ldr	r3, [pc, #256]	; (8011c54 <readCanToStructs+0x634>)
 8011b54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b58:	885b      	ldrh	r3, [r3, #2]
 8011b5a:	4a3e      	ldr	r2, [pc, #248]	; (8011c54 <readCanToStructs+0x634>)
 8011b5c:	011b      	lsls	r3, r3, #4
 8011b5e:	4413      	add	r3, r2
 8011b60:	330c      	adds	r3, #12
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d3db      	bcc.n	8011b24 <readCanToStructs+0x504>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b70:	4a39      	ldr	r2, [pc, #228]	; (8011c58 <readCanToStructs+0x638>)
 8011b72:	f240 4116 	movw	r1, #1046	; 0x416
 8011b76:	fb01 f303 	mul.w	r3, r1, r3
 8011b7a:	4413      	add	r3, r2
 8011b7c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	461a      	mov	r2, r3
 8011b84:	4613      	mov	r3, r2
 8011b86:	00db      	lsls	r3, r3, #3
 8011b88:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8011b8a:	4b32      	ldr	r3, [pc, #200]	; (8011c54 <readCanToStructs+0x634>)
 8011b8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b90:	885b      	ldrh	r3, [r3, #2]
 8011b92:	4930      	ldr	r1, [pc, #192]	; (8011c54 <readCanToStructs+0x634>)
 8011b94:	011b      	lsls	r3, r3, #4
 8011b96:	440b      	add	r3, r1
 8011b98:	330c      	adds	r3, #12
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011ba0:	2b17      	cmp	r3, #23
 8011ba2:	d932      	bls.n	8011c0a <readCanToStructs+0x5ea>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8011ba4:	4b31      	ldr	r3, [pc, #196]	; (8011c6c <readCanToStructs+0x64c>)
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	4613      	mov	r3, r2
 8011bac:	005b      	lsls	r3, r3, #1
 8011bae:	4413      	add	r3, r2
 8011bb0:	00db      	lsls	r3, r3, #3
 8011bb2:	4a30      	ldr	r2, [pc, #192]	; (8011c74 <readCanToStructs+0x654>)
 8011bb4:	4413      	add	r3, r2
 8011bb6:	2218      	movs	r2, #24
 8011bb8:	492c      	ldr	r1, [pc, #176]	; (8011c6c <readCanToStructs+0x64c>)
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f014 fb5c 	bl	8026278 <memcpy>
					if(Debug_flag == 1)
 8011bc0:	4b28      	ldr	r3, [pc, #160]	; (8011c64 <readCanToStructs+0x644>)
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d105      	bne.n	8011bd4 <readCanToStructs+0x5b4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011bc8:	4b28      	ldr	r3, [pc, #160]	; (8011c6c <readCanToStructs+0x64c>)
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	4619      	mov	r1, r3
 8011bce:	482a      	ldr	r0, [pc, #168]	; (8011c78 <readCanToStructs+0x658>)
 8011bd0:	f014 fc62 	bl	8026498 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8011bd4:	4b29      	ldr	r3, [pc, #164]	; (8011c7c <readCanToStructs+0x65c>)
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8011bda:	f007 fc53 	bl	8019484 <HAL_GetTick>
 8011bde:	4603      	mov	r3, r0
 8011be0:	4a27      	ldr	r2, [pc, #156]	; (8011c80 <readCanToStructs+0x660>)
 8011be2:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011be4:	4b21      	ldr	r3, [pc, #132]	; (8011c6c <readCanToStructs+0x64c>)
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7f6 fd79 	bl	80086e0 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011bee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bf2:	4a19      	ldr	r2, [pc, #100]	; (8011c58 <readCanToStructs+0x638>)
 8011bf4:	f240 4116 	movw	r1, #1046	; 0x416
 8011bf8:	fb01 f303 	mul.w	r3, r1, r3
 8011bfc:	4413      	add	r3, r2
 8011bfe:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011c02:	2200      	movs	r2, #0
 8011c04:	701a      	strb	r2, [r3, #0]
				break;
 8011c06:	f001 b806 	b.w	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8011c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c0e:	4a12      	ldr	r2, [pc, #72]	; (8011c58 <readCanToStructs+0x638>)
 8011c10:	f240 4116 	movw	r1, #1046	; 0x416
 8011c14:	fb01 f303 	mul.w	r3, r1, r3
 8011c18:	4413      	add	r3, r2
 8011c1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011c1e:	2201      	movs	r2, #1
 8011c20:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8011c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c26:	490c      	ldr	r1, [pc, #48]	; (8011c58 <readCanToStructs+0x638>)
 8011c28:	f240 4216 	movw	r2, #1046	; 0x416
 8011c2c:	fb03 f202 	mul.w	r2, r3, r2
 8011c30:	440a      	add	r2, r1
 8011c32:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8011c36:	7812      	ldrb	r2, [r2, #0]
 8011c38:	3201      	adds	r2, #1
 8011c3a:	b2d0      	uxtb	r0, r2
 8011c3c:	4a06      	ldr	r2, [pc, #24]	; (8011c58 <readCanToStructs+0x638>)
 8011c3e:	f240 4116 	movw	r1, #1046	; 0x416
 8011c42:	fb01 f303 	mul.w	r3, r1, r3
 8011c46:	4413      	add	r3, r2
 8011c48:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	701a      	strb	r2, [r3, #0]
				break;
 8011c50:	f000 bfe1 	b.w	8012c16 <readCanToStructs+0x15f6>
 8011c54:	200071b4 	.word	0x200071b4
 8011c58:	20006988 	.word	0x20006988
 8011c5c:	20003f28 	.word	0x20003f28
 8011c60:	20003f30 	.word	0x20003f30
 8011c64:	20000bbb 	.word	0x20000bbb
 8011c68:	0802ae8c 	.word	0x0802ae8c
 8011c6c:	20002f9c 	.word	0x20002f9c
 8011c70:	0802aea4 	.word	0x0802aea4
 8011c74:	20002e94 	.word	0x20002e94
 8011c78:	0802aec8 	.word	0x0802aec8
 8011c7c:	2000030b 	.word	0x2000030b
 8011c80:	200024b4 	.word	0x200024b4
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8011c84:	4b9f      	ldr	r3, [pc, #636]	; (8011f04 <readCanToStructs+0x8e4>)
 8011c86:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011c88:	4b9f      	ldr	r3, [pc, #636]	; (8011f08 <readCanToStructs+0x8e8>)
 8011c8a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c8e:	885b      	ldrh	r3, [r3, #2]
 8011c90:	4a9d      	ldr	r2, [pc, #628]	; (8011f08 <readCanToStructs+0x8e8>)
 8011c92:	011b      	lsls	r3, r3, #4
 8011c94:	4413      	add	r3, r2
 8011c96:	3304      	adds	r3, #4
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011c9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d110      	bne.n	8011cc8 <readCanToStructs+0x6a8>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011ca6:	2218      	movs	r2, #24
 8011ca8:	2100      	movs	r1, #0
 8011caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cac:	f014 fb0c 	bl	80262c8 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cb4:	4a95      	ldr	r2, [pc, #596]	; (8011f0c <readCanToStructs+0x8ec>)
 8011cb6:	f240 4116 	movw	r1, #1046	; 0x416
 8011cba:	fb01 f303 	mul.w	r3, r1, r3
 8011cbe:	4413      	add	r3, r2
 8011cc0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8011cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ccc:	4a8f      	ldr	r2, [pc, #572]	; (8011f0c <readCanToStructs+0x8ec>)
 8011cce:	f240 4116 	movw	r1, #1046	; 0x416
 8011cd2:	fb01 f303 	mul.w	r3, r1, r3
 8011cd6:	4413      	add	r3, r2
 8011cd8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d015      	beq.n	8011d12 <readCanToStructs+0x6f2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8011ce6:	488a      	ldr	r0, [pc, #552]	; (8011f10 <readCanToStructs+0x8f0>)
 8011ce8:	f014 fc72 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011cec:	2218      	movs	r2, #24
 8011cee:	2100      	movs	r1, #0
 8011cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cf2:	f014 fae9 	bl	80262c8 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cfa:	4a84      	ldr	r2, [pc, #528]	; (8011f0c <readCanToStructs+0x8ec>)
 8011cfc:	f240 4116 	movw	r1, #1046	; 0x416
 8011d00:	fb01 f303 	mul.w	r3, r1, r3
 8011d04:	4413      	add	r3, r2
 8011d06:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	701a      	strb	r2, [r3, #0]
					break;
 8011d0e:	f000 bf82 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011d12:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d16:	4613      	mov	r3, r2
 8011d18:	00db      	lsls	r3, r3, #3
 8011d1a:	1a9b      	subs	r3, r3, r2
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d20:	4413      	add	r3, r2
 8011d22:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d24:	2301      	movs	r3, #1
 8011d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d2a:	e016      	b.n	8011d5a <readCanToStructs+0x73a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011d2c:	4b76      	ldr	r3, [pc, #472]	; (8011f08 <readCanToStructs+0x8e8>)
 8011d2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d32:	885b      	ldrh	r3, [r3, #2]
 8011d34:	461a      	mov	r2, r3
 8011d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d3a:	4973      	ldr	r1, [pc, #460]	; (8011f08 <readCanToStructs+0x8e8>)
 8011d3c:	0112      	lsls	r2, r2, #4
 8011d3e:	440a      	add	r2, r1
 8011d40:	4413      	add	r3, r2
 8011d42:	3304      	adds	r3, #4
 8011d44:	781a      	ldrb	r2, [r3, #0]
 8011d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d48:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d54:	3301      	adds	r3, #1
 8011d56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d5a:	4b6b      	ldr	r3, [pc, #428]	; (8011f08 <readCanToStructs+0x8e8>)
 8011d5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d60:	885b      	ldrh	r3, [r3, #2]
 8011d62:	4a69      	ldr	r2, [pc, #420]	; (8011f08 <readCanToStructs+0x8e8>)
 8011d64:	011b      	lsls	r3, r3, #4
 8011d66:	4413      	add	r3, r2
 8011d68:	330c      	adds	r3, #12
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d3db      	bcc.n	8011d2c <readCanToStructs+0x70c>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d78:	4a64      	ldr	r2, [pc, #400]	; (8011f0c <readCanToStructs+0x8ec>)
 8011d7a:	f240 4116 	movw	r1, #1046	; 0x416
 8011d7e:	fb01 f303 	mul.w	r3, r1, r3
 8011d82:	4413      	add	r3, r2
 8011d84:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	00db      	lsls	r3, r3, #3
 8011d90:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8011d92:	4b5d      	ldr	r3, [pc, #372]	; (8011f08 <readCanToStructs+0x8e8>)
 8011d94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d98:	885b      	ldrh	r3, [r3, #2]
 8011d9a:	495b      	ldr	r1, [pc, #364]	; (8011f08 <readCanToStructs+0x8e8>)
 8011d9c:	011b      	lsls	r3, r3, #4
 8011d9e:	440b      	add	r3, r1
 8011da0:	330c      	adds	r3, #12
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011da8:	2b17      	cmp	r3, #23
 8011daa:	d932      	bls.n	8011e12 <readCanToStructs+0x7f2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8011dac:	4b55      	ldr	r3, [pc, #340]	; (8011f04 <readCanToStructs+0x8e4>)
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	461a      	mov	r2, r3
 8011db2:	4613      	mov	r3, r2
 8011db4:	005b      	lsls	r3, r3, #1
 8011db6:	4413      	add	r3, r2
 8011db8:	00db      	lsls	r3, r3, #3
 8011dba:	4a56      	ldr	r2, [pc, #344]	; (8011f14 <readCanToStructs+0x8f4>)
 8011dbc:	4413      	add	r3, r2
 8011dbe:	2218      	movs	r2, #24
 8011dc0:	4950      	ldr	r1, [pc, #320]	; (8011f04 <readCanToStructs+0x8e4>)
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f014 fa58 	bl	8026278 <memcpy>
					if(Debug_flag == 1)
 8011dc8:	4b53      	ldr	r3, [pc, #332]	; (8011f18 <readCanToStructs+0x8f8>)
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d105      	bne.n	8011ddc <readCanToStructs+0x7bc>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011dd0:	4b4c      	ldr	r3, [pc, #304]	; (8011f04 <readCanToStructs+0x8e4>)
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	4851      	ldr	r0, [pc, #324]	; (8011f1c <readCanToStructs+0x8fc>)
 8011dd8:	f014 fb5e 	bl	8026498 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8011ddc:	f007 fb52 	bl	8019484 <HAL_GetTick>
 8011de0:	4603      	mov	r3, r0
 8011de2:	4a4f      	ldr	r2, [pc, #316]	; (8011f20 <readCanToStructs+0x900>)
 8011de4:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 8011de6:	4b4f      	ldr	r3, [pc, #316]	; (8011f24 <readCanToStructs+0x904>)
 8011de8:	2201      	movs	r2, #1
 8011dea:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011dec:	4b45      	ldr	r3, [pc, #276]	; (8011f04 <readCanToStructs+0x8e4>)
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7f6 fc75 	bl	80086e0 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dfa:	4a44      	ldr	r2, [pc, #272]	; (8011f0c <readCanToStructs+0x8ec>)
 8011dfc:	f240 4116 	movw	r1, #1046	; 0x416
 8011e00:	fb01 f303 	mul.w	r3, r1, r3
 8011e04:	4413      	add	r3, r2
 8011e06:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	701a      	strb	r2, [r3, #0]
				break;
 8011e0e:	f000 bf02 	b.w	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8011e12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e16:	4a3d      	ldr	r2, [pc, #244]	; (8011f0c <readCanToStructs+0x8ec>)
 8011e18:	f240 4116 	movw	r1, #1046	; 0x416
 8011e1c:	fb01 f303 	mul.w	r3, r1, r3
 8011e20:	4413      	add	r3, r2
 8011e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011e26:	2201      	movs	r2, #1
 8011e28:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8011e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e2e:	4937      	ldr	r1, [pc, #220]	; (8011f0c <readCanToStructs+0x8ec>)
 8011e30:	f240 4216 	movw	r2, #1046	; 0x416
 8011e34:	fb03 f202 	mul.w	r2, r3, r2
 8011e38:	440a      	add	r2, r1
 8011e3a:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011e3e:	7812      	ldrb	r2, [r2, #0]
 8011e40:	3201      	adds	r2, #1
 8011e42:	b2d0      	uxtb	r0, r2
 8011e44:	4a31      	ldr	r2, [pc, #196]	; (8011f0c <readCanToStructs+0x8ec>)
 8011e46:	f240 4116 	movw	r1, #1046	; 0x416
 8011e4a:	fb01 f303 	mul.w	r3, r1, r3
 8011e4e:	4413      	add	r3, r2
 8011e50:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011e54:	4602      	mov	r2, r0
 8011e56:	701a      	strb	r2, [r3, #0]
				break;
 8011e58:	f000 bedd 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8011e5c:	4b32      	ldr	r3, [pc, #200]	; (8011f28 <readCanToStructs+0x908>)
 8011e5e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011e60:	4b29      	ldr	r3, [pc, #164]	; (8011f08 <readCanToStructs+0x8e8>)
 8011e62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e66:	885b      	ldrh	r3, [r3, #2]
 8011e68:	4a27      	ldr	r2, [pc, #156]	; (8011f08 <readCanToStructs+0x8e8>)
 8011e6a:	011b      	lsls	r3, r3, #4
 8011e6c:	4413      	add	r3, r2
 8011e6e:	3304      	adds	r3, #4
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011e76:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d110      	bne.n	8011ea0 <readCanToStructs+0x880>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011e7e:	2246      	movs	r2, #70	; 0x46
 8011e80:	2100      	movs	r1, #0
 8011e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e84:	f014 fa20 	bl	80262c8 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e8c:	4a1f      	ldr	r2, [pc, #124]	; (8011f0c <readCanToStructs+0x8ec>)
 8011e8e:	f240 4116 	movw	r1, #1046	; 0x416
 8011e92:	fb01 f303 	mul.w	r3, r1, r3
 8011e96:	4413      	add	r3, r2
 8011e98:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8011ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ea4:	4a19      	ldr	r2, [pc, #100]	; (8011f0c <readCanToStructs+0x8ec>)
 8011ea6:	f240 4116 	movw	r1, #1046	; 0x416
 8011eaa:	fb01 f303 	mul.w	r3, r1, r3
 8011eae:	4413      	add	r3, r2
 8011eb0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d015      	beq.n	8011eea <readCanToStructs+0x8ca>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8011ebe:	481b      	ldr	r0, [pc, #108]	; (8011f2c <readCanToStructs+0x90c>)
 8011ec0:	f014 fb86 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011ec4:	2246      	movs	r2, #70	; 0x46
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eca:	f014 f9fd 	bl	80262c8 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ed2:	4a0e      	ldr	r2, [pc, #56]	; (8011f0c <readCanToStructs+0x8ec>)
 8011ed4:	f240 4116 	movw	r1, #1046	; 0x416
 8011ed8:	fb01 f303 	mul.w	r3, r1, r3
 8011edc:	4413      	add	r3, r2
 8011ede:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	701a      	strb	r2, [r3, #0]
					break;
 8011ee6:	f000 be96 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011eea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011eee:	4613      	mov	r3, r2
 8011ef0:	00db      	lsls	r3, r3, #3
 8011ef2:	1a9b      	subs	r3, r3, r2
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef8:	4413      	add	r3, r2
 8011efa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011efc:	2301      	movs	r3, #1
 8011efe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f02:	e02c      	b.n	8011f5e <readCanToStructs+0x93e>
 8011f04:	20002f9c 	.word	0x20002f9c
 8011f08:	200071b4 	.word	0x200071b4
 8011f0c:	20006988 	.word	0x20006988
 8011f10:	0802aed8 	.word	0x0802aed8
 8011f14:	20002e94 	.word	0x20002e94
 8011f18:	20000bbb 	.word	0x20000bbb
 8011f1c:	0802aefc 	.word	0x0802aefc
 8011f20:	200024b4 	.word	0x200024b4
 8011f24:	2000030b 	.word	0x2000030b
 8011f28:	20003044 	.word	0x20003044
 8011f2c:	0802af0c 	.word	0x0802af0c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011f30:	4bba      	ldr	r3, [pc, #744]	; (801221c <readCanToStructs+0xbfc>)
 8011f32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f36:	885b      	ldrh	r3, [r3, #2]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f3e:	49b7      	ldr	r1, [pc, #732]	; (801221c <readCanToStructs+0xbfc>)
 8011f40:	0112      	lsls	r2, r2, #4
 8011f42:	440a      	add	r2, r1
 8011f44:	4413      	add	r3, r2
 8011f46:	3304      	adds	r3, #4
 8011f48:	781a      	ldrb	r2, [r3, #0]
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f50:	3301      	adds	r3, #1
 8011f52:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f58:	3301      	adds	r3, #1
 8011f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f5e:	4baf      	ldr	r3, [pc, #700]	; (801221c <readCanToStructs+0xbfc>)
 8011f60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f64:	885b      	ldrh	r3, [r3, #2]
 8011f66:	4aad      	ldr	r2, [pc, #692]	; (801221c <readCanToStructs+0xbfc>)
 8011f68:	011b      	lsls	r3, r3, #4
 8011f6a:	4413      	add	r3, r2
 8011f6c:	330c      	adds	r3, #12
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d3db      	bcc.n	8011f30 <readCanToStructs+0x910>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8011f78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f7c:	4aa8      	ldr	r2, [pc, #672]	; (8012220 <readCanToStructs+0xc00>)
 8011f7e:	f240 4116 	movw	r1, #1046	; 0x416
 8011f82:	fb01 f303 	mul.w	r3, r1, r3
 8011f86:	4413      	add	r3, r2
 8011f88:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	461a      	mov	r2, r3
 8011f90:	4613      	mov	r3, r2
 8011f92:	00db      	lsls	r3, r3, #3
 8011f94:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8011f96:	4ba1      	ldr	r3, [pc, #644]	; (801221c <readCanToStructs+0xbfc>)
 8011f98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f9c:	885b      	ldrh	r3, [r3, #2]
 8011f9e:	499f      	ldr	r1, [pc, #636]	; (801221c <readCanToStructs+0xbfc>)
 8011fa0:	011b      	lsls	r3, r3, #4
 8011fa2:	440b      	add	r3, r1
 8011fa4:	330c      	adds	r3, #12
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8011fac:	2b45      	cmp	r3, #69	; 0x45
 8011fae:	d93d      	bls.n	801202c <readCanToStructs+0xa0c>
					if(Debug_flag == 1)
 8011fb0:	4b9c      	ldr	r3, [pc, #624]	; (8012224 <readCanToStructs+0xc04>)
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	2b01      	cmp	r3, #1
 8011fb6:	d102      	bne.n	8011fbe <readCanToStructs+0x99e>
						printf("RCV V-Message-1\n");
 8011fb8:	489b      	ldr	r0, [pc, #620]	; (8012228 <readCanToStructs+0xc08>)
 8011fba:	f014 fb09 	bl	80265d0 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011fbe:	2246      	movs	r2, #70	; 0x46
 8011fc0:	2100      	movs	r1, #0
 8011fc2:	489a      	ldr	r0, [pc, #616]	; (801222c <readCanToStructs+0xc0c>)
 8011fc4:	f014 f980 	bl	80262c8 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011fc8:	4a98      	ldr	r2, [pc, #608]	; (801222c <readCanToStructs+0xc0c>)
 8011fca:	4b99      	ldr	r3, [pc, #612]	; (8012230 <readCanToStructs+0xc10>)
 8011fcc:	4610      	mov	r0, r2
 8011fce:	4619      	mov	r1, r3
 8011fd0:	2346      	movs	r3, #70	; 0x46
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	f014 f950 	bl	8026278 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8011fd8:	4b96      	ldr	r3, [pc, #600]	; (8012234 <readCanToStructs+0xc14>)
 8011fda:	2201      	movs	r2, #1
 8011fdc:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8011fde:	4b93      	ldr	r3, [pc, #588]	; (801222c <readCanToStructs+0xc0c>)
 8011fe0:	881b      	ldrh	r3, [r3, #0]
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	4a94      	ldr	r2, [pc, #592]	; (8012238 <readCanToStructs+0xc18>)
 8011fe6:	460b      	mov	r3, r1
 8011fe8:	005b      	lsls	r3, r3, #1
 8011fea:	440b      	add	r3, r1
 8011fec:	00db      	lsls	r3, r3, #3
 8011fee:	4413      	add	r3, r2
 8011ff0:	3304      	adds	r3, #4
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d00b      	beq.n	8012010 <readCanToStructs+0x9f0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8011ff8:	4b8c      	ldr	r3, [pc, #560]	; (801222c <readCanToStructs+0xc0c>)
 8011ffa:	889b      	ldrh	r3, [r3, #4]
 8011ffc:	b2d9      	uxtb	r1, r3
 8011ffe:	4b8b      	ldr	r3, [pc, #556]	; (801222c <readCanToStructs+0xc0c>)
 8012000:	881b      	ldrh	r3, [r3, #0]
 8012002:	b2da      	uxtb	r2, r3
 8012004:	4b89      	ldr	r3, [pc, #548]	; (801222c <readCanToStructs+0xc0c>)
 8012006:	885b      	ldrh	r3, [r3, #2]
 8012008:	b2db      	uxtb	r3, r3
 801200a:	488c      	ldr	r0, [pc, #560]	; (801223c <readCanToStructs+0xc1c>)
 801200c:	f7f2 ff4e 	bl	8004eac <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8012010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012014:	4a82      	ldr	r2, [pc, #520]	; (8012220 <readCanToStructs+0xc00>)
 8012016:	f240 4116 	movw	r1, #1046	; 0x416
 801201a:	fb01 f303 	mul.w	r3, r1, r3
 801201e:	4413      	add	r3, r2
 8012020:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8012024:	2200      	movs	r2, #0
 8012026:	701a      	strb	r2, [r3, #0]
				break;
 8012028:	f000 bdf5 	b.w	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 801202c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012030:	4a7b      	ldr	r2, [pc, #492]	; (8012220 <readCanToStructs+0xc00>)
 8012032:	f240 4116 	movw	r1, #1046	; 0x416
 8012036:	fb01 f303 	mul.w	r3, r1, r3
 801203a:	4413      	add	r3, r2
 801203c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012040:	2201      	movs	r2, #1
 8012042:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 8012044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012048:	4975      	ldr	r1, [pc, #468]	; (8012220 <readCanToStructs+0xc00>)
 801204a:	f240 4216 	movw	r2, #1046	; 0x416
 801204e:	fb03 f202 	mul.w	r2, r3, r2
 8012052:	440a      	add	r2, r1
 8012054:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8012058:	7812      	ldrb	r2, [r2, #0]
 801205a:	3201      	adds	r2, #1
 801205c:	b2d0      	uxtb	r0, r2
 801205e:	4a70      	ldr	r2, [pc, #448]	; (8012220 <readCanToStructs+0xc00>)
 8012060:	f240 4116 	movw	r1, #1046	; 0x416
 8012064:	fb01 f303 	mul.w	r3, r1, r3
 8012068:	4413      	add	r3, r2
 801206a:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801206e:	4602      	mov	r2, r0
 8012070:	701a      	strb	r2, [r3, #0]
				break;
 8012072:	f000 bdd0 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8012076:	4b6e      	ldr	r3, [pc, #440]	; (8012230 <readCanToStructs+0xc10>)
 8012078:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801207a:	4b68      	ldr	r3, [pc, #416]	; (801221c <readCanToStructs+0xbfc>)
 801207c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012080:	885b      	ldrh	r3, [r3, #2]
 8012082:	4a66      	ldr	r2, [pc, #408]	; (801221c <readCanToStructs+0xbfc>)
 8012084:	011b      	lsls	r3, r3, #4
 8012086:	4413      	add	r3, r2
 8012088:	3304      	adds	r3, #4
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012090:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012094:	2b00      	cmp	r3, #0
 8012096:	d110      	bne.n	80120ba <readCanToStructs+0xa9a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8012098:	2246      	movs	r2, #70	; 0x46
 801209a:	2100      	movs	r1, #0
 801209c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801209e:	f014 f913 	bl	80262c8 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80120a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120a6:	4a5e      	ldr	r2, [pc, #376]	; (8012220 <readCanToStructs+0xc00>)
 80120a8:	f240 4116 	movw	r1, #1046	; 0x416
 80120ac:	fb01 f303 	mul.w	r3, r1, r3
 80120b0:	4413      	add	r3, r2
 80120b2:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80120b6:	2200      	movs	r2, #0
 80120b8:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 80120ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120be:	4a58      	ldr	r2, [pc, #352]	; (8012220 <readCanToStructs+0xc00>)
 80120c0:	f240 4116 	movw	r1, #1046	; 0x416
 80120c4:	fb01 f303 	mul.w	r3, r1, r3
 80120c8:	4413      	add	r3, r2
 80120ca:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80120ce:	781b      	ldrb	r3, [r3, #0]
 80120d0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d015      	beq.n	8012104 <readCanToStructs+0xae4>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 80120d8:	4859      	ldr	r0, [pc, #356]	; (8012240 <readCanToStructs+0xc20>)
 80120da:	f014 fa79 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80120de:	2246      	movs	r2, #70	; 0x46
 80120e0:	2100      	movs	r1, #0
 80120e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120e4:	f014 f8f0 	bl	80262c8 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80120e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ec:	4a4c      	ldr	r2, [pc, #304]	; (8012220 <readCanToStructs+0xc00>)
 80120ee:	f240 4116 	movw	r1, #1046	; 0x416
 80120f2:	fb01 f303 	mul.w	r3, r1, r3
 80120f6:	4413      	add	r3, r2
 80120f8:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80120fc:	2200      	movs	r2, #0
 80120fe:	701a      	strb	r2, [r3, #0]
					break;
 8012100:	f000 bd89 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012104:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012108:	4613      	mov	r3, r2
 801210a:	00db      	lsls	r3, r3, #3
 801210c:	1a9b      	subs	r3, r3, r2
 801210e:	461a      	mov	r2, r3
 8012110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012112:	4413      	add	r3, r2
 8012114:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012116:	2301      	movs	r3, #1
 8012118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801211c:	e016      	b.n	801214c <readCanToStructs+0xb2c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801211e:	4b3f      	ldr	r3, [pc, #252]	; (801221c <readCanToStructs+0xbfc>)
 8012120:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012124:	885b      	ldrh	r3, [r3, #2]
 8012126:	461a      	mov	r2, r3
 8012128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801212c:	493b      	ldr	r1, [pc, #236]	; (801221c <readCanToStructs+0xbfc>)
 801212e:	0112      	lsls	r2, r2, #4
 8012130:	440a      	add	r2, r1
 8012132:	4413      	add	r3, r2
 8012134:	3304      	adds	r3, #4
 8012136:	781a      	ldrb	r2, [r3, #0]
 8012138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213a:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213e:	3301      	adds	r3, #1
 8012140:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012142:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012146:	3301      	adds	r3, #1
 8012148:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801214c:	4b33      	ldr	r3, [pc, #204]	; (801221c <readCanToStructs+0xbfc>)
 801214e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012152:	885b      	ldrh	r3, [r3, #2]
 8012154:	4a31      	ldr	r2, [pc, #196]	; (801221c <readCanToStructs+0xbfc>)
 8012156:	011b      	lsls	r3, r3, #4
 8012158:	4413      	add	r3, r2
 801215a:	330c      	adds	r3, #12
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012162:	429a      	cmp	r2, r3
 8012164:	d3db      	bcc.n	801211e <readCanToStructs+0xafe>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8012166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801216a:	4a2d      	ldr	r2, [pc, #180]	; (8012220 <readCanToStructs+0xc00>)
 801216c:	f240 4116 	movw	r1, #1046	; 0x416
 8012170:	fb01 f303 	mul.w	r3, r1, r3
 8012174:	4413      	add	r3, r2
 8012176:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	461a      	mov	r2, r3
 801217e:	4613      	mov	r3, r2
 8012180:	00db      	lsls	r3, r3, #3
 8012182:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8012184:	4b25      	ldr	r3, [pc, #148]	; (801221c <readCanToStructs+0xbfc>)
 8012186:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801218a:	885b      	ldrh	r3, [r3, #2]
 801218c:	4923      	ldr	r1, [pc, #140]	; (801221c <readCanToStructs+0xbfc>)
 801218e:	011b      	lsls	r3, r3, #4
 8012190:	440b      	add	r3, r1
 8012192:	330c      	adds	r3, #12
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	3b01      	subs	r3, #1
 8012198:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 801219a:	2b45      	cmp	r3, #69	; 0x45
 801219c:	d954      	bls.n	8012248 <readCanToStructs+0xc28>
					if(Debug_flag == 1)
 801219e:	4b21      	ldr	r3, [pc, #132]	; (8012224 <readCanToStructs+0xc04>)
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d102      	bne.n	80121ac <readCanToStructs+0xb8c>
						printf("RCV V-Message-2\n");
 80121a6:	4827      	ldr	r0, [pc, #156]	; (8012244 <readCanToStructs+0xc24>)
 80121a8:	f014 fa12 	bl	80265d0 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80121ac:	2246      	movs	r2, #70	; 0x46
 80121ae:	2100      	movs	r1, #0
 80121b0:	481e      	ldr	r0, [pc, #120]	; (801222c <readCanToStructs+0xc0c>)
 80121b2:	f014 f889 	bl	80262c8 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80121b6:	4a1d      	ldr	r2, [pc, #116]	; (801222c <readCanToStructs+0xc0c>)
 80121b8:	4b1d      	ldr	r3, [pc, #116]	; (8012230 <readCanToStructs+0xc10>)
 80121ba:	4610      	mov	r0, r2
 80121bc:	4619      	mov	r1, r3
 80121be:	2346      	movs	r3, #70	; 0x46
 80121c0:	461a      	mov	r2, r3
 80121c2:	f014 f859 	bl	8026278 <memcpy>
					Is_CAN_Exchange_happening = YES;
 80121c6:	4b1b      	ldr	r3, [pc, #108]	; (8012234 <readCanToStructs+0xc14>)
 80121c8:	2201      	movs	r2, #1
 80121ca:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 80121cc:	4b17      	ldr	r3, [pc, #92]	; (801222c <readCanToStructs+0xc0c>)
 80121ce:	881b      	ldrh	r3, [r3, #0]
 80121d0:	4619      	mov	r1, r3
 80121d2:	4a19      	ldr	r2, [pc, #100]	; (8012238 <readCanToStructs+0xc18>)
 80121d4:	460b      	mov	r3, r1
 80121d6:	005b      	lsls	r3, r3, #1
 80121d8:	440b      	add	r3, r1
 80121da:	00db      	lsls	r3, r3, #3
 80121dc:	4413      	add	r3, r2
 80121de:	3303      	adds	r3, #3
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d00b      	beq.n	80121fe <readCanToStructs+0xbde>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 80121e6:	4b11      	ldr	r3, [pc, #68]	; (801222c <readCanToStructs+0xc0c>)
 80121e8:	889b      	ldrh	r3, [r3, #4]
 80121ea:	b2d9      	uxtb	r1, r3
 80121ec:	4b0f      	ldr	r3, [pc, #60]	; (801222c <readCanToStructs+0xc0c>)
 80121ee:	881b      	ldrh	r3, [r3, #0]
 80121f0:	b2da      	uxtb	r2, r3
 80121f2:	4b0e      	ldr	r3, [pc, #56]	; (801222c <readCanToStructs+0xc0c>)
 80121f4:	885b      	ldrh	r3, [r3, #2]
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	4810      	ldr	r0, [pc, #64]	; (801223c <readCanToStructs+0xc1c>)
 80121fa:	f7f2 fe57 	bl	8004eac <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80121fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012202:	4a07      	ldr	r2, [pc, #28]	; (8012220 <readCanToStructs+0xc00>)
 8012204:	f240 4116 	movw	r1, #1046	; 0x416
 8012208:	fb01 f303 	mul.w	r3, r1, r3
 801220c:	4413      	add	r3, r2
 801220e:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8012212:	2200      	movs	r2, #0
 8012214:	701a      	strb	r2, [r3, #0]
				break;
 8012216:	f000 bcfe 	b.w	8012c16 <readCanToStructs+0x15f6>
 801221a:	bf00      	nop
 801221c:	200071b4 	.word	0x200071b4
 8012220:	20006988 	.word	0x20006988
 8012224:	20000bbb 	.word	0x20000bbb
 8012228:	0802af30 	.word	0x0802af30
 801222c:	20002ffc 	.word	0x20002ffc
 8012230:	20003044 	.word	0x20003044
 8012234:	2000030b 	.word	0x2000030b
 8012238:	20002da4 	.word	0x20002da4
 801223c:	20003002 	.word	0x20003002
 8012240:	0802af40 	.word	0x0802af40
 8012244:	0802af64 	.word	0x0802af64
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8012248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801224c:	4aa0      	ldr	r2, [pc, #640]	; (80124d0 <readCanToStructs+0xeb0>)
 801224e:	f240 4116 	movw	r1, #1046	; 0x416
 8012252:	fb01 f303 	mul.w	r3, r1, r3
 8012256:	4413      	add	r3, r2
 8012258:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801225c:	2201      	movs	r2, #1
 801225e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 8012260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012264:	499a      	ldr	r1, [pc, #616]	; (80124d0 <readCanToStructs+0xeb0>)
 8012266:	f240 4216 	movw	r2, #1046	; 0x416
 801226a:	fb03 f202 	mul.w	r2, r3, r2
 801226e:	440a      	add	r2, r1
 8012270:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8012274:	7812      	ldrb	r2, [r2, #0]
 8012276:	3201      	adds	r2, #1
 8012278:	b2d0      	uxtb	r0, r2
 801227a:	4a95      	ldr	r2, [pc, #596]	; (80124d0 <readCanToStructs+0xeb0>)
 801227c:	f240 4116 	movw	r1, #1046	; 0x416
 8012280:	fb01 f303 	mul.w	r3, r1, r3
 8012284:	4413      	add	r3, r2
 8012286:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801228a:	4602      	mov	r2, r0
 801228c:	701a      	strb	r2, [r3, #0]
				break;
 801228e:	f000 bcc2 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8012292:	4b90      	ldr	r3, [pc, #576]	; (80124d4 <readCanToStructs+0xeb4>)
 8012294:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012296:	4b90      	ldr	r3, [pc, #576]	; (80124d8 <readCanToStructs+0xeb8>)
 8012298:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801229c:	885b      	ldrh	r3, [r3, #2]
 801229e:	4a8e      	ldr	r2, [pc, #568]	; (80124d8 <readCanToStructs+0xeb8>)
 80122a0:	011b      	lsls	r3, r3, #4
 80122a2:	4413      	add	r3, r2
 80122a4:	3304      	adds	r3, #4
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80122ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d110      	bne.n	80122d6 <readCanToStructs+0xcb6>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80122b4:	2208      	movs	r2, #8
 80122b6:	2100      	movs	r1, #0
 80122b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ba:	f014 f805 	bl	80262c8 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80122be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122c2:	4a83      	ldr	r2, [pc, #524]	; (80124d0 <readCanToStructs+0xeb0>)
 80122c4:	f240 4116 	movw	r1, #1046	; 0x416
 80122c8:	fb01 f303 	mul.w	r3, r1, r3
 80122cc:	4413      	add	r3, r2
 80122ce:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80122d2:	2200      	movs	r2, #0
 80122d4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80122d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122da:	4a7d      	ldr	r2, [pc, #500]	; (80124d0 <readCanToStructs+0xeb0>)
 80122dc:	f240 4116 	movw	r1, #1046	; 0x416
 80122e0:	fb01 f303 	mul.w	r3, r1, r3
 80122e4:	4413      	add	r3, r2
 80122e6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d015      	beq.n	8012320 <readCanToStructs+0xd00>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 80122f4:	4879      	ldr	r0, [pc, #484]	; (80124dc <readCanToStructs+0xebc>)
 80122f6:	f014 f96b 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80122fa:	2208      	movs	r2, #8
 80122fc:	2100      	movs	r1, #0
 80122fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012300:	f013 ffe2 	bl	80262c8 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012308:	4a71      	ldr	r2, [pc, #452]	; (80124d0 <readCanToStructs+0xeb0>)
 801230a:	f240 4116 	movw	r1, #1046	; 0x416
 801230e:	fb01 f303 	mul.w	r3, r1, r3
 8012312:	4413      	add	r3, r2
 8012314:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012318:	2200      	movs	r2, #0
 801231a:	701a      	strb	r2, [r3, #0]
					break;
 801231c:	f000 bc7b 	b.w	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012320:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012324:	4613      	mov	r3, r2
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	1a9b      	subs	r3, r3, r2
 801232a:	461a      	mov	r2, r3
 801232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232e:	4413      	add	r3, r2
 8012330:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012332:	2301      	movs	r3, #1
 8012334:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012338:	e016      	b.n	8012368 <readCanToStructs+0xd48>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801233a:	4b67      	ldr	r3, [pc, #412]	; (80124d8 <readCanToStructs+0xeb8>)
 801233c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012340:	885b      	ldrh	r3, [r3, #2]
 8012342:	461a      	mov	r2, r3
 8012344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012348:	4963      	ldr	r1, [pc, #396]	; (80124d8 <readCanToStructs+0xeb8>)
 801234a:	0112      	lsls	r2, r2, #4
 801234c:	440a      	add	r2, r1
 801234e:	4413      	add	r3, r2
 8012350:	3304      	adds	r3, #4
 8012352:	781a      	ldrb	r2, [r3, #0]
 8012354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012356:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235a:	3301      	adds	r3, #1
 801235c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801235e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012362:	3301      	adds	r3, #1
 8012364:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012368:	4b5b      	ldr	r3, [pc, #364]	; (80124d8 <readCanToStructs+0xeb8>)
 801236a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801236e:	885b      	ldrh	r3, [r3, #2]
 8012370:	4a59      	ldr	r2, [pc, #356]	; (80124d8 <readCanToStructs+0xeb8>)
 8012372:	011b      	lsls	r3, r3, #4
 8012374:	4413      	add	r3, r2
 8012376:	330c      	adds	r3, #12
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801237e:	429a      	cmp	r2, r3
 8012380:	d3db      	bcc.n	801233a <readCanToStructs+0xd1a>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8012382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012386:	4a52      	ldr	r2, [pc, #328]	; (80124d0 <readCanToStructs+0xeb0>)
 8012388:	f240 4116 	movw	r1, #1046	; 0x416
 801238c:	fb01 f303 	mul.w	r3, r1, r3
 8012390:	4413      	add	r3, r2
 8012392:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	461a      	mov	r2, r3
 801239a:	4613      	mov	r3, r2
 801239c:	00db      	lsls	r3, r3, #3
 801239e:	1a9a      	subs	r2, r3, r2
 80123a0:	4b4d      	ldr	r3, [pc, #308]	; (80124d8 <readCanToStructs+0xeb8>)
 80123a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123a6:	885b      	ldrh	r3, [r3, #2]
 80123a8:	494b      	ldr	r1, [pc, #300]	; (80124d8 <readCanToStructs+0xeb8>)
 80123aa:	011b      	lsls	r3, r3, #4
 80123ac:	440b      	add	r3, r1
 80123ae:	330c      	adds	r3, #12
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	3b01      	subs	r3, #1
 80123b4:	4413      	add	r3, r2
 80123b6:	2b07      	cmp	r3, #7
 80123b8:	d913      	bls.n	80123e2 <readCanToStructs+0xdc2>
					printf("Received Fault Injection Data\n");
 80123ba:	4849      	ldr	r0, [pc, #292]	; (80124e0 <readCanToStructs+0xec0>)
 80123bc:	f014 f908 	bl	80265d0 <puts>
					Is_CAN_Exchange_happening = YES;
 80123c0:	4b48      	ldr	r3, [pc, #288]	; (80124e4 <readCanToStructs+0xec4>)
 80123c2:	2201      	movs	r2, #1
 80123c4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80123c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123ca:	4a41      	ldr	r2, [pc, #260]	; (80124d0 <readCanToStructs+0xeb0>)
 80123cc:	f240 4116 	movw	r1, #1046	; 0x416
 80123d0:	fb01 f303 	mul.w	r3, r1, r3
 80123d4:	4413      	add	r3, r2
 80123d6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80123da:	2200      	movs	r2, #0
 80123dc:	701a      	strb	r2, [r3, #0]
				break;
 80123de:	f000 bc1a 	b.w	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80123e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123e6:	4a3a      	ldr	r2, [pc, #232]	; (80124d0 <readCanToStructs+0xeb0>)
 80123e8:	f240 4116 	movw	r1, #1046	; 0x416
 80123ec:	fb01 f303 	mul.w	r3, r1, r3
 80123f0:	4413      	add	r3, r2
 80123f2:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80123f6:	2201      	movs	r2, #1
 80123f8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80123fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123fe:	4934      	ldr	r1, [pc, #208]	; (80124d0 <readCanToStructs+0xeb0>)
 8012400:	f240 4216 	movw	r2, #1046	; 0x416
 8012404:	fb03 f202 	mul.w	r2, r3, r2
 8012408:	440a      	add	r2, r1
 801240a:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 801240e:	7812      	ldrb	r2, [r2, #0]
 8012410:	3201      	adds	r2, #1
 8012412:	b2d0      	uxtb	r0, r2
 8012414:	4a2e      	ldr	r2, [pc, #184]	; (80124d0 <readCanToStructs+0xeb0>)
 8012416:	f240 4116 	movw	r1, #1046	; 0x416
 801241a:	fb01 f303 	mul.w	r3, r1, r3
 801241e:	4413      	add	r3, r2
 8012420:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012424:	4602      	mov	r2, r0
 8012426:	701a      	strb	r2, [r3, #0]
				break;
 8012428:	e3f5      	b.n	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 801242a:	4b2f      	ldr	r3, [pc, #188]	; (80124e8 <readCanToStructs+0xec8>)
 801242c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801242e:	4b2a      	ldr	r3, [pc, #168]	; (80124d8 <readCanToStructs+0xeb8>)
 8012430:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012434:	885b      	ldrh	r3, [r3, #2]
 8012436:	4a28      	ldr	r2, [pc, #160]	; (80124d8 <readCanToStructs+0xeb8>)
 8012438:	011b      	lsls	r3, r3, #4
 801243a:	4413      	add	r3, r2
 801243c:	3304      	adds	r3, #4
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012444:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012448:	2b00      	cmp	r3, #0
 801244a:	d110      	bne.n	801246e <readCanToStructs+0xe4e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 801244c:	2214      	movs	r2, #20
 801244e:	2100      	movs	r1, #0
 8012450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012452:	f013 ff39 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801245a:	4a1d      	ldr	r2, [pc, #116]	; (80124d0 <readCanToStructs+0xeb0>)
 801245c:	f240 4116 	movw	r1, #1046	; 0x416
 8012460:	fb01 f303 	mul.w	r3, r1, r3
 8012464:	4413      	add	r3, r2
 8012466:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801246a:	2200      	movs	r2, #0
 801246c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 801246e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012472:	4a17      	ldr	r2, [pc, #92]	; (80124d0 <readCanToStructs+0xeb0>)
 8012474:	f240 4116 	movw	r1, #1046	; 0x416
 8012478:	fb01 f303 	mul.w	r3, r1, r3
 801247c:	4413      	add	r3, r2
 801247e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012488:	429a      	cmp	r2, r3
 801248a:	d014      	beq.n	80124b6 <readCanToStructs+0xe96>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 801248c:	4817      	ldr	r0, [pc, #92]	; (80124ec <readCanToStructs+0xecc>)
 801248e:	f014 f89f 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012492:	2214      	movs	r2, #20
 8012494:	2100      	movs	r1, #0
 8012496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012498:	f013 ff16 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801249c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124a0:	4a0b      	ldr	r2, [pc, #44]	; (80124d0 <readCanToStructs+0xeb0>)
 80124a2:	f240 4116 	movw	r1, #1046	; 0x416
 80124a6:	fb01 f303 	mul.w	r3, r1, r3
 80124aa:	4413      	add	r3, r2
 80124ac:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80124b0:	2200      	movs	r2, #0
 80124b2:	701a      	strb	r2, [r3, #0]
					break;
 80124b4:	e3af      	b.n	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80124b6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80124ba:	4613      	mov	r3, r2
 80124bc:	00db      	lsls	r3, r3, #3
 80124be:	1a9b      	subs	r3, r3, r2
 80124c0:	461a      	mov	r2, r3
 80124c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c4:	4413      	add	r3, r2
 80124c6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80124c8:	2301      	movs	r3, #1
 80124ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80124ce:	e026      	b.n	801251e <readCanToStructs+0xefe>
 80124d0:	20006988 	.word	0x20006988
 80124d4:	2000308c 	.word	0x2000308c
 80124d8:	200071b4 	.word	0x200071b4
 80124dc:	0802af74 	.word	0x0802af74
 80124e0:	0802af94 	.word	0x0802af94
 80124e4:	2000030b 	.word	0x2000030b
 80124e8:	20003754 	.word	0x20003754
 80124ec:	0802afb4 	.word	0x0802afb4
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80124f0:	4bb9      	ldr	r3, [pc, #740]	; (80127d8 <readCanToStructs+0x11b8>)
 80124f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124f6:	885b      	ldrh	r3, [r3, #2]
 80124f8:	461a      	mov	r2, r3
 80124fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124fe:	49b6      	ldr	r1, [pc, #728]	; (80127d8 <readCanToStructs+0x11b8>)
 8012500:	0112      	lsls	r2, r2, #4
 8012502:	440a      	add	r2, r1
 8012504:	4413      	add	r3, r2
 8012506:	3304      	adds	r3, #4
 8012508:	781a      	ldrb	r2, [r3, #0]
 801250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012510:	3301      	adds	r3, #1
 8012512:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012518:	3301      	adds	r3, #1
 801251a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801251e:	4bae      	ldr	r3, [pc, #696]	; (80127d8 <readCanToStructs+0x11b8>)
 8012520:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012524:	885b      	ldrh	r3, [r3, #2]
 8012526:	4aac      	ldr	r2, [pc, #688]	; (80127d8 <readCanToStructs+0x11b8>)
 8012528:	011b      	lsls	r3, r3, #4
 801252a:	4413      	add	r3, r2
 801252c:	330c      	adds	r3, #12
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012534:	429a      	cmp	r2, r3
 8012536:	d3db      	bcc.n	80124f0 <readCanToStructs+0xed0>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8012538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801253c:	4aa7      	ldr	r2, [pc, #668]	; (80127dc <readCanToStructs+0x11bc>)
 801253e:	f240 4116 	movw	r1, #1046	; 0x416
 8012542:	fb01 f303 	mul.w	r3, r1, r3
 8012546:	4413      	add	r3, r2
 8012548:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	461a      	mov	r2, r3
 8012550:	4613      	mov	r3, r2
 8012552:	00db      	lsls	r3, r3, #3
 8012554:	1a9a      	subs	r2, r3, r2
 8012556:	4ba0      	ldr	r3, [pc, #640]	; (80127d8 <readCanToStructs+0x11b8>)
 8012558:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801255c:	885b      	ldrh	r3, [r3, #2]
 801255e:	499e      	ldr	r1, [pc, #632]	; (80127d8 <readCanToStructs+0x11b8>)
 8012560:	011b      	lsls	r3, r3, #4
 8012562:	440b      	add	r3, r1
 8012564:	330c      	adds	r3, #12
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	3b01      	subs	r3, #1
 801256a:	4413      	add	r3, r2
 801256c:	2b13      	cmp	r3, #19
 801256e:	d954      	bls.n	801261a <readCanToStructs+0xffa>
					uint16_t CRC16 = 0;
 8012570:	2300      	movs	r3, #0
 8012572:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8012574:	2300      	movs	r3, #0
 8012576:	603b      	str	r3, [r7, #0]
 8012578:	1d3b      	adds	r3, r7, #4
 801257a:	2224      	movs	r2, #36	; 0x24
 801257c:	2100      	movs	r1, #0
 801257e:	4618      	mov	r0, r3
 8012580:	f013 fea2 	bl	80262c8 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8012584:	463b      	mov	r3, r7
 8012586:	2214      	movs	r2, #20
 8012588:	4995      	ldr	r1, [pc, #596]	; (80127e0 <readCanToStructs+0x11c0>)
 801258a:	4618      	mov	r0, r3
 801258c:	f013 fe74 	bl	8026278 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8012590:	463b      	mov	r3, r7
 8012592:	2214      	movs	r2, #20
 8012594:	4619      	mov	r1, r3
 8012596:	2000      	movs	r0, #0
 8012598:	f003 f98c 	bl	80158b4 <GetCRC16>
 801259c:	4603      	mov	r3, r0
 801259e:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 80125a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d10c      	bne.n	80125c0 <readCanToStructs+0xfa0>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80125a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125aa:	4a8c      	ldr	r2, [pc, #560]	; (80127dc <readCanToStructs+0x11bc>)
 80125ac:	f240 4116 	movw	r1, #1046	; 0x416
 80125b0:	fb01 f303 	mul.w	r3, r1, r3
 80125b4:	4413      	add	r3, r2
 80125b6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80125ba:	2200      	movs	r2, #0
 80125bc:	701a      	strb	r2, [r3, #0]
				break;
 80125be:	e32a      	b.n	8012c16 <readCanToStructs+0x15f6>
						if(Debug_flag == 1)
 80125c0:	4b88      	ldr	r3, [pc, #544]	; (80127e4 <readCanToStructs+0x11c4>)
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d10a      	bne.n	80125de <readCanToStructs+0xfbe>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 80125c8:	4b85      	ldr	r3, [pc, #532]	; (80127e0 <readCanToStructs+0x11c0>)
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	4a86      	ldr	r2, [pc, #536]	; (80127e8 <readCanToStructs+0x11c8>)
 80125ce:	3366      	adds	r3, #102	; 0x66
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	4413      	add	r3, r2
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	4619      	mov	r1, r3
 80125d8:	4884      	ldr	r0, [pc, #528]	; (80127ec <readCanToStructs+0x11cc>)
 80125da:	f013 ff5d 	bl	8026498 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 80125de:	4b80      	ldr	r3, [pc, #512]	; (80127e0 <readCanToStructs+0x11c0>)
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	461a      	mov	r2, r3
 80125e4:	4613      	mov	r3, r2
 80125e6:	009b      	lsls	r3, r3, #2
 80125e8:	4413      	add	r3, r2
 80125ea:	009b      	lsls	r3, r3, #2
 80125ec:	4a80      	ldr	r2, [pc, #512]	; (80127f0 <readCanToStructs+0x11d0>)
 80125ee:	4413      	add	r3, r2
 80125f0:	2214      	movs	r2, #20
 80125f2:	497b      	ldr	r1, [pc, #492]	; (80127e0 <readCanToStructs+0x11c0>)
 80125f4:	4618      	mov	r0, r3
 80125f6:	f013 fe3f 	bl	8026278 <memcpy>
						Is_CAN_Exchange_happening = YES;
 80125fa:	4b7e      	ldr	r3, [pc, #504]	; (80127f4 <readCanToStructs+0x11d4>)
 80125fc:	2201      	movs	r2, #1
 80125fe:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012604:	4a75      	ldr	r2, [pc, #468]	; (80127dc <readCanToStructs+0x11bc>)
 8012606:	f240 4116 	movw	r1, #1046	; 0x416
 801260a:	fb01 f303 	mul.w	r3, r1, r3
 801260e:	4413      	add	r3, r2
 8012610:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012614:	2200      	movs	r2, #0
 8012616:	701a      	strb	r2, [r3, #0]
				break;
 8012618:	e2fd      	b.n	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 801261a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801261e:	4a6f      	ldr	r2, [pc, #444]	; (80127dc <readCanToStructs+0x11bc>)
 8012620:	f240 4116 	movw	r1, #1046	; 0x416
 8012624:	fb01 f303 	mul.w	r3, r1, r3
 8012628:	4413      	add	r3, r2
 801262a:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 801262e:	2201      	movs	r2, #1
 8012630:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012636:	4969      	ldr	r1, [pc, #420]	; (80127dc <readCanToStructs+0x11bc>)
 8012638:	f240 4216 	movw	r2, #1046	; 0x416
 801263c:	fb03 f202 	mul.w	r2, r3, r2
 8012640:	440a      	add	r2, r1
 8012642:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012646:	7812      	ldrb	r2, [r2, #0]
 8012648:	3201      	adds	r2, #1
 801264a:	b2d0      	uxtb	r0, r2
 801264c:	4a63      	ldr	r2, [pc, #396]	; (80127dc <readCanToStructs+0x11bc>)
 801264e:	f240 4116 	movw	r1, #1046	; 0x416
 8012652:	fb01 f303 	mul.w	r3, r1, r3
 8012656:	4413      	add	r3, r2
 8012658:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801265c:	4602      	mov	r2, r0
 801265e:	701a      	strb	r2, [r3, #0]
				break;
 8012660:	e2d9      	b.n	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8012662:	4b5f      	ldr	r3, [pc, #380]	; (80127e0 <readCanToStructs+0x11c0>)
 8012664:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012666:	4b5c      	ldr	r3, [pc, #368]	; (80127d8 <readCanToStructs+0x11b8>)
 8012668:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801266c:	885b      	ldrh	r3, [r3, #2]
 801266e:	4a5a      	ldr	r2, [pc, #360]	; (80127d8 <readCanToStructs+0x11b8>)
 8012670:	011b      	lsls	r3, r3, #4
 8012672:	4413      	add	r3, r2
 8012674:	3304      	adds	r3, #4
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801267c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012680:	2b00      	cmp	r3, #0
 8012682:	d110      	bne.n	80126a6 <readCanToStructs+0x1086>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012684:	2214      	movs	r2, #20
 8012686:	2100      	movs	r1, #0
 8012688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801268a:	f013 fe1d 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801268e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012692:	4a52      	ldr	r2, [pc, #328]	; (80127dc <readCanToStructs+0x11bc>)
 8012694:	f240 4116 	movw	r1, #1046	; 0x416
 8012698:	fb01 f303 	mul.w	r3, r1, r3
 801269c:	4413      	add	r3, r2
 801269e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80126a2:	2200      	movs	r2, #0
 80126a4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80126a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126aa:	4a4c      	ldr	r2, [pc, #304]	; (80127dc <readCanToStructs+0x11bc>)
 80126ac:	f240 4116 	movw	r1, #1046	; 0x416
 80126b0:	fb01 f303 	mul.w	r3, r1, r3
 80126b4:	4413      	add	r3, r2
 80126b6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d014      	beq.n	80126ee <readCanToStructs+0x10ce>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 80126c4:	484c      	ldr	r0, [pc, #304]	; (80127f8 <readCanToStructs+0x11d8>)
 80126c6:	f013 ff83 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80126ca:	2214      	movs	r2, #20
 80126cc:	2100      	movs	r1, #0
 80126ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126d0:	f013 fdfa 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80126d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126d8:	4a40      	ldr	r2, [pc, #256]	; (80127dc <readCanToStructs+0x11bc>)
 80126da:	f240 4116 	movw	r1, #1046	; 0x416
 80126de:	fb01 f303 	mul.w	r3, r1, r3
 80126e2:	4413      	add	r3, r2
 80126e4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80126e8:	2200      	movs	r2, #0
 80126ea:	701a      	strb	r2, [r3, #0]
					break;
 80126ec:	e293      	b.n	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80126ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80126f2:	4613      	mov	r3, r2
 80126f4:	00db      	lsls	r3, r3, #3
 80126f6:	1a9b      	subs	r3, r3, r2
 80126f8:	461a      	mov	r2, r3
 80126fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fc:	4413      	add	r3, r2
 80126fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012700:	2301      	movs	r3, #1
 8012702:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012706:	e016      	b.n	8012736 <readCanToStructs+0x1116>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012708:	4b33      	ldr	r3, [pc, #204]	; (80127d8 <readCanToStructs+0x11b8>)
 801270a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801270e:	885b      	ldrh	r3, [r3, #2]
 8012710:	461a      	mov	r2, r3
 8012712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012716:	4930      	ldr	r1, [pc, #192]	; (80127d8 <readCanToStructs+0x11b8>)
 8012718:	0112      	lsls	r2, r2, #4
 801271a:	440a      	add	r2, r1
 801271c:	4413      	add	r3, r2
 801271e:	3304      	adds	r3, #4
 8012720:	781a      	ldrb	r2, [r3, #0]
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012728:	3301      	adds	r3, #1
 801272a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801272c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012730:	3301      	adds	r3, #1
 8012732:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012736:	4b28      	ldr	r3, [pc, #160]	; (80127d8 <readCanToStructs+0x11b8>)
 8012738:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801273c:	885b      	ldrh	r3, [r3, #2]
 801273e:	4a26      	ldr	r2, [pc, #152]	; (80127d8 <readCanToStructs+0x11b8>)
 8012740:	011b      	lsls	r3, r3, #4
 8012742:	4413      	add	r3, r2
 8012744:	330c      	adds	r3, #12
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801274c:	429a      	cmp	r2, r3
 801274e:	d3db      	bcc.n	8012708 <readCanToStructs+0x10e8>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8012750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012754:	4a21      	ldr	r2, [pc, #132]	; (80127dc <readCanToStructs+0x11bc>)
 8012756:	f240 4116 	movw	r1, #1046	; 0x416
 801275a:	fb01 f303 	mul.w	r3, r1, r3
 801275e:	4413      	add	r3, r2
 8012760:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	461a      	mov	r2, r3
 8012768:	4613      	mov	r3, r2
 801276a:	00db      	lsls	r3, r3, #3
 801276c:	1a9a      	subs	r2, r3, r2
 801276e:	4b1a      	ldr	r3, [pc, #104]	; (80127d8 <readCanToStructs+0x11b8>)
 8012770:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012774:	885b      	ldrh	r3, [r3, #2]
 8012776:	4918      	ldr	r1, [pc, #96]	; (80127d8 <readCanToStructs+0x11b8>)
 8012778:	011b      	lsls	r3, r3, #4
 801277a:	440b      	add	r3, r1
 801277c:	330c      	adds	r3, #12
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	3b01      	subs	r3, #1
 8012782:	4413      	add	r3, r2
 8012784:	2b13      	cmp	r3, #19
 8012786:	d966      	bls.n	8012856 <readCanToStructs+0x1236>
					uint16_t CRC16 = 0;
 8012788:	2300      	movs	r3, #0
 801278a:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 801278c:	2300      	movs	r3, #0
 801278e:	603b      	str	r3, [r7, #0]
 8012790:	1d3b      	adds	r3, r7, #4
 8012792:	2224      	movs	r2, #36	; 0x24
 8012794:	2100      	movs	r1, #0
 8012796:	4618      	mov	r0, r3
 8012798:	f013 fd96 	bl	80262c8 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 801279c:	463b      	mov	r3, r7
 801279e:	2214      	movs	r2, #20
 80127a0:	490f      	ldr	r1, [pc, #60]	; (80127e0 <readCanToStructs+0x11c0>)
 80127a2:	4618      	mov	r0, r3
 80127a4:	f013 fd68 	bl	8026278 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80127a8:	463b      	mov	r3, r7
 80127aa:	2214      	movs	r2, #20
 80127ac:	4619      	mov	r1, r3
 80127ae:	2000      	movs	r0, #0
 80127b0:	f003 f880 	bl	80158b4 <GetCRC16>
 80127b4:	4603      	mov	r3, r0
 80127b6:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 80127b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d11e      	bne.n	80127fc <readCanToStructs+0x11dc>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80127be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127c2:	4a06      	ldr	r2, [pc, #24]	; (80127dc <readCanToStructs+0x11bc>)
 80127c4:	f240 4116 	movw	r1, #1046	; 0x416
 80127c8:	fb01 f303 	mul.w	r3, r1, r3
 80127cc:	4413      	add	r3, r2
 80127ce:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80127d2:	2200      	movs	r2, #0
 80127d4:	701a      	strb	r2, [r3, #0]
				break;
 80127d6:	e21e      	b.n	8012c16 <readCanToStructs+0x15f6>
 80127d8:	200071b4 	.word	0x200071b4
 80127dc:	20006988 	.word	0x20006988
 80127e0:	20003754 	.word	0x20003754
 80127e4:	20000bbb 	.word	0x20000bbb
 80127e8:	20000504 	.word	0x20000504
 80127ec:	0802afd0 	.word	0x0802afd0
 80127f0:	20003678 	.word	0x20003678
 80127f4:	2000030b 	.word	0x2000030b
 80127f8:	0802afe4 	.word	0x0802afe4
						if(Debug_flag == 1)
 80127fc:	4bba      	ldr	r3, [pc, #744]	; (8012ae8 <readCanToStructs+0x14c8>)
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b01      	cmp	r3, #1
 8012802:	d10a      	bne.n	801281a <readCanToStructs+0x11fa>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8012804:	4bb9      	ldr	r3, [pc, #740]	; (8012aec <readCanToStructs+0x14cc>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	4ab9      	ldr	r2, [pc, #740]	; (8012af0 <readCanToStructs+0x14d0>)
 801280a:	3366      	adds	r3, #102	; 0x66
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	4413      	add	r3, r2
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	4619      	mov	r1, r3
 8012814:	48b7      	ldr	r0, [pc, #732]	; (8012af4 <readCanToStructs+0x14d4>)
 8012816:	f013 fe3f 	bl	8026498 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 801281a:	4bb4      	ldr	r3, [pc, #720]	; (8012aec <readCanToStructs+0x14cc>)
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	461a      	mov	r2, r3
 8012820:	4613      	mov	r3, r2
 8012822:	009b      	lsls	r3, r3, #2
 8012824:	4413      	add	r3, r2
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	4ab3      	ldr	r2, [pc, #716]	; (8012af8 <readCanToStructs+0x14d8>)
 801282a:	4413      	add	r3, r2
 801282c:	2214      	movs	r2, #20
 801282e:	49af      	ldr	r1, [pc, #700]	; (8012aec <readCanToStructs+0x14cc>)
 8012830:	4618      	mov	r0, r3
 8012832:	f013 fd21 	bl	8026278 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8012836:	4bb1      	ldr	r3, [pc, #708]	; (8012afc <readCanToStructs+0x14dc>)
 8012838:	2201      	movs	r2, #1
 801283a:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801283c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012840:	4aaf      	ldr	r2, [pc, #700]	; (8012b00 <readCanToStructs+0x14e0>)
 8012842:	f240 4116 	movw	r1, #1046	; 0x416
 8012846:	fb01 f303 	mul.w	r3, r1, r3
 801284a:	4413      	add	r3, r2
 801284c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012850:	2200      	movs	r2, #0
 8012852:	701a      	strb	r2, [r3, #0]
				break;
 8012854:	e1df      	b.n	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8012856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801285a:	4aa9      	ldr	r2, [pc, #676]	; (8012b00 <readCanToStructs+0x14e0>)
 801285c:	f240 4116 	movw	r1, #1046	; 0x416
 8012860:	fb01 f303 	mul.w	r3, r1, r3
 8012864:	4413      	add	r3, r2
 8012866:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801286a:	2201      	movs	r2, #1
 801286c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 801286e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012872:	49a3      	ldr	r1, [pc, #652]	; (8012b00 <readCanToStructs+0x14e0>)
 8012874:	f240 4216 	movw	r2, #1046	; 0x416
 8012878:	fb03 f202 	mul.w	r2, r3, r2
 801287c:	440a      	add	r2, r1
 801287e:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012882:	7812      	ldrb	r2, [r2, #0]
 8012884:	3201      	adds	r2, #1
 8012886:	b2d0      	uxtb	r0, r2
 8012888:	4a9d      	ldr	r2, [pc, #628]	; (8012b00 <readCanToStructs+0x14e0>)
 801288a:	f240 4116 	movw	r1, #1046	; 0x416
 801288e:	fb01 f303 	mul.w	r3, r1, r3
 8012892:	4413      	add	r3, r2
 8012894:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012898:	4602      	mov	r2, r0
 801289a:	701a      	strb	r2, [r3, #0]
				break;
 801289c:	e1bb      	b.n	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 801289e:	4b99      	ldr	r3, [pc, #612]	; (8012b04 <readCanToStructs+0x14e4>)
 80128a0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80128a2:	4b99      	ldr	r3, [pc, #612]	; (8012b08 <readCanToStructs+0x14e8>)
 80128a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128a8:	885b      	ldrh	r3, [r3, #2]
 80128aa:	4a97      	ldr	r2, [pc, #604]	; (8012b08 <readCanToStructs+0x14e8>)
 80128ac:	011b      	lsls	r3, r3, #4
 80128ae:	4413      	add	r3, r2
 80128b0:	3304      	adds	r3, #4
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80128b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d110      	bne.n	80128e2 <readCanToStructs+0x12c2>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80128c0:	2202      	movs	r2, #2
 80128c2:	2100      	movs	r1, #0
 80128c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128c6:	f013 fcff 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80128ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128ce:	4a8c      	ldr	r2, [pc, #560]	; (8012b00 <readCanToStructs+0x14e0>)
 80128d0:	f240 4116 	movw	r1, #1046	; 0x416
 80128d4:	fb01 f303 	mul.w	r3, r1, r3
 80128d8:	4413      	add	r3, r2
 80128da:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80128de:	2200      	movs	r2, #0
 80128e0:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 80128e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128e6:	4a86      	ldr	r2, [pc, #536]	; (8012b00 <readCanToStructs+0x14e0>)
 80128e8:	f240 4116 	movw	r1, #1046	; 0x416
 80128ec:	fb01 f303 	mul.w	r3, r1, r3
 80128f0:	4413      	add	r3, r2
 80128f2:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d014      	beq.n	801292a <readCanToStructs+0x130a>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8012900:	4882      	ldr	r0, [pc, #520]	; (8012b0c <readCanToStructs+0x14ec>)
 8012902:	f013 fe65 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012906:	2202      	movs	r2, #2
 8012908:	2100      	movs	r1, #0
 801290a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801290c:	f013 fcdc 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012914:	4a7a      	ldr	r2, [pc, #488]	; (8012b00 <readCanToStructs+0x14e0>)
 8012916:	f240 4116 	movw	r1, #1046	; 0x416
 801291a:	fb01 f303 	mul.w	r3, r1, r3
 801291e:	4413      	add	r3, r2
 8012920:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012924:	2200      	movs	r2, #0
 8012926:	701a      	strb	r2, [r3, #0]
					break;
 8012928:	e175      	b.n	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801292a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801292e:	4613      	mov	r3, r2
 8012930:	00db      	lsls	r3, r3, #3
 8012932:	1a9b      	subs	r3, r3, r2
 8012934:	461a      	mov	r2, r3
 8012936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012938:	4413      	add	r3, r2
 801293a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801293c:	2301      	movs	r3, #1
 801293e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012942:	e016      	b.n	8012972 <readCanToStructs+0x1352>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012944:	4b70      	ldr	r3, [pc, #448]	; (8012b08 <readCanToStructs+0x14e8>)
 8012946:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801294a:	885b      	ldrh	r3, [r3, #2]
 801294c:	461a      	mov	r2, r3
 801294e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012952:	496d      	ldr	r1, [pc, #436]	; (8012b08 <readCanToStructs+0x14e8>)
 8012954:	0112      	lsls	r2, r2, #4
 8012956:	440a      	add	r2, r1
 8012958:	4413      	add	r3, r2
 801295a:	3304      	adds	r3, #4
 801295c:	781a      	ldrb	r2, [r3, #0]
 801295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012960:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012964:	3301      	adds	r3, #1
 8012966:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012968:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801296c:	3301      	adds	r3, #1
 801296e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012972:	4b65      	ldr	r3, [pc, #404]	; (8012b08 <readCanToStructs+0x14e8>)
 8012974:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012978:	885b      	ldrh	r3, [r3, #2]
 801297a:	4a63      	ldr	r2, [pc, #396]	; (8012b08 <readCanToStructs+0x14e8>)
 801297c:	011b      	lsls	r3, r3, #4
 801297e:	4413      	add	r3, r2
 8012980:	330c      	adds	r3, #12
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012988:	429a      	cmp	r2, r3
 801298a:	d3db      	bcc.n	8012944 <readCanToStructs+0x1324>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 801298c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012990:	4a5b      	ldr	r2, [pc, #364]	; (8012b00 <readCanToStructs+0x14e0>)
 8012992:	f240 4116 	movw	r1, #1046	; 0x416
 8012996:	fb01 f303 	mul.w	r3, r1, r3
 801299a:	4413      	add	r3, r2
 801299c:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	461a      	mov	r2, r3
 80129a4:	4613      	mov	r3, r2
 80129a6:	00db      	lsls	r3, r3, #3
 80129a8:	1a9a      	subs	r2, r3, r2
 80129aa:	4b57      	ldr	r3, [pc, #348]	; (8012b08 <readCanToStructs+0x14e8>)
 80129ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129b0:	885b      	ldrh	r3, [r3, #2]
 80129b2:	4955      	ldr	r1, [pc, #340]	; (8012b08 <readCanToStructs+0x14e8>)
 80129b4:	011b      	lsls	r3, r3, #4
 80129b6:	440b      	add	r3, r1
 80129b8:	330c      	adds	r3, #12
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	3b01      	subs	r3, #1
 80129be:	4413      	add	r3, r2
 80129c0:	2b01      	cmp	r3, #1
 80129c2:	d919      	bls.n	80129f8 <readCanToStructs+0x13d8>
					if(Debug_flag == 1)
 80129c4:	4b48      	ldr	r3, [pc, #288]	; (8012ae8 <readCanToStructs+0x14c8>)
 80129c6:	781b      	ldrb	r3, [r3, #0]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	d105      	bne.n	80129d8 <readCanToStructs+0x13b8>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 80129cc:	4b4d      	ldr	r3, [pc, #308]	; (8012b04 <readCanToStructs+0x14e4>)
 80129ce:	881b      	ldrh	r3, [r3, #0]
 80129d0:	4619      	mov	r1, r3
 80129d2:	484f      	ldr	r0, [pc, #316]	; (8012b10 <readCanToStructs+0x14f0>)
 80129d4:	f013 fd60 	bl	8026498 <iprintf>
					Is_CAN_Exchange_happening = YES;
 80129d8:	4b48      	ldr	r3, [pc, #288]	; (8012afc <readCanToStructs+0x14dc>)
 80129da:	2201      	movs	r2, #1
 80129dc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80129de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129e2:	4a47      	ldr	r2, [pc, #284]	; (8012b00 <readCanToStructs+0x14e0>)
 80129e4:	f240 4116 	movw	r1, #1046	; 0x416
 80129e8:	fb01 f303 	mul.w	r3, r1, r3
 80129ec:	4413      	add	r3, r2
 80129ee:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80129f2:	2200      	movs	r2, #0
 80129f4:	701a      	strb	r2, [r3, #0]
				break;
 80129f6:	e10e      	b.n	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 80129f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129fc:	4a40      	ldr	r2, [pc, #256]	; (8012b00 <readCanToStructs+0x14e0>)
 80129fe:	f240 4116 	movw	r1, #1046	; 0x416
 8012a02:	fb01 f303 	mul.w	r3, r1, r3
 8012a06:	4413      	add	r3, r2
 8012a08:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8012a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a14:	493a      	ldr	r1, [pc, #232]	; (8012b00 <readCanToStructs+0x14e0>)
 8012a16:	f240 4216 	movw	r2, #1046	; 0x416
 8012a1a:	fb03 f202 	mul.w	r2, r3, r2
 8012a1e:	440a      	add	r2, r1
 8012a20:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8012a24:	7812      	ldrb	r2, [r2, #0]
 8012a26:	3201      	adds	r2, #1
 8012a28:	b2d0      	uxtb	r0, r2
 8012a2a:	4a35      	ldr	r2, [pc, #212]	; (8012b00 <readCanToStructs+0x14e0>)
 8012a2c:	f240 4116 	movw	r1, #1046	; 0x416
 8012a30:	fb01 f303 	mul.w	r3, r1, r3
 8012a34:	4413      	add	r3, r2
 8012a36:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012a3a:	4602      	mov	r2, r0
 8012a3c:	701a      	strb	r2, [r3, #0]
				break;
 8012a3e:	e0ea      	b.n	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8012a40:	4b30      	ldr	r3, [pc, #192]	; (8012b04 <readCanToStructs+0x14e4>)
 8012a42:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012a44:	4b30      	ldr	r3, [pc, #192]	; (8012b08 <readCanToStructs+0x14e8>)
 8012a46:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a4a:	885b      	ldrh	r3, [r3, #2]
 8012a4c:	4a2e      	ldr	r2, [pc, #184]	; (8012b08 <readCanToStructs+0x14e8>)
 8012a4e:	011b      	lsls	r3, r3, #4
 8012a50:	4413      	add	r3, r2
 8012a52:	3304      	adds	r3, #4
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012a5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d110      	bne.n	8012a84 <readCanToStructs+0x1464>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012a62:	2202      	movs	r2, #2
 8012a64:	2100      	movs	r1, #0
 8012a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a68:	f013 fc2e 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8012a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a70:	4a23      	ldr	r2, [pc, #140]	; (8012b00 <readCanToStructs+0x14e0>)
 8012a72:	f240 4116 	movw	r1, #1046	; 0x416
 8012a76:	fb01 f303 	mul.w	r3, r1, r3
 8012a7a:	4413      	add	r3, r2
 8012a7c:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012a80:	2200      	movs	r2, #0
 8012a82:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8012a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a88:	4a1d      	ldr	r2, [pc, #116]	; (8012b00 <readCanToStructs+0x14e0>)
 8012a8a:	f240 4116 	movw	r1, #1046	; 0x416
 8012a8e:	fb01 f303 	mul.w	r3, r1, r3
 8012a92:	4413      	add	r3, r2
 8012a94:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d014      	beq.n	8012acc <readCanToStructs+0x14ac>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8012aa2:	481c      	ldr	r0, [pc, #112]	; (8012b14 <readCanToStructs+0x14f4>)
 8012aa4:	f013 fd94 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012aa8:	2202      	movs	r2, #2
 8012aaa:	2100      	movs	r1, #0
 8012aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012aae:	f013 fc0b 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8012ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ab6:	4a12      	ldr	r2, [pc, #72]	; (8012b00 <readCanToStructs+0x14e0>)
 8012ab8:	f240 4116 	movw	r1, #1046	; 0x416
 8012abc:	fb01 f303 	mul.w	r3, r1, r3
 8012ac0:	4413      	add	r3, r2
 8012ac2:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	701a      	strb	r2, [r3, #0]
					break;
 8012aca:	e0a4      	b.n	8012c16 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012acc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012ad0:	4613      	mov	r3, r2
 8012ad2:	00db      	lsls	r3, r3, #3
 8012ad4:	1a9b      	subs	r3, r3, r2
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ada:	4413      	add	r3, r2
 8012adc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ade:	2301      	movs	r3, #1
 8012ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ae4:	e02f      	b.n	8012b46 <readCanToStructs+0x1526>
 8012ae6:	bf00      	nop
 8012ae8:	20000bbb 	.word	0x20000bbb
 8012aec:	20003754 	.word	0x20003754
 8012af0:	20000504 	.word	0x20000504
 8012af4:	0802b004 	.word	0x0802b004
 8012af8:	20003678 	.word	0x20003678
 8012afc:	2000030b 	.word	0x2000030b
 8012b00:	20006988 	.word	0x20006988
 8012b04:	20000bb8 	.word	0x20000bb8
 8012b08:	200071b4 	.word	0x200071b4
 8012b0c:	0802b018 	.word	0x0802b018
 8012b10:	0802b040 	.word	0x0802b040
 8012b14:	0802b054 	.word	0x0802b054
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012b18:	4b9f      	ldr	r3, [pc, #636]	; (8012d98 <readCanToStructs+0x1778>)
 8012b1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b1e:	885b      	ldrh	r3, [r3, #2]
 8012b20:	461a      	mov	r2, r3
 8012b22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b26:	499c      	ldr	r1, [pc, #624]	; (8012d98 <readCanToStructs+0x1778>)
 8012b28:	0112      	lsls	r2, r2, #4
 8012b2a:	440a      	add	r2, r1
 8012b2c:	4413      	add	r3, r2
 8012b2e:	3304      	adds	r3, #4
 8012b30:	781a      	ldrb	r2, [r3, #0]
 8012b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b34:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b38:	3301      	adds	r3, #1
 8012b3a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b40:	3301      	adds	r3, #1
 8012b42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b46:	4b94      	ldr	r3, [pc, #592]	; (8012d98 <readCanToStructs+0x1778>)
 8012b48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b4c:	885b      	ldrh	r3, [r3, #2]
 8012b4e:	4a92      	ldr	r2, [pc, #584]	; (8012d98 <readCanToStructs+0x1778>)
 8012b50:	011b      	lsls	r3, r3, #4
 8012b52:	4413      	add	r3, r2
 8012b54:	330c      	adds	r3, #12
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d3db      	bcc.n	8012b18 <readCanToStructs+0x14f8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8012b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b64:	4a8d      	ldr	r2, [pc, #564]	; (8012d9c <readCanToStructs+0x177c>)
 8012b66:	f240 4116 	movw	r1, #1046	; 0x416
 8012b6a:	fb01 f303 	mul.w	r3, r1, r3
 8012b6e:	4413      	add	r3, r2
 8012b70:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	461a      	mov	r2, r3
 8012b78:	4613      	mov	r3, r2
 8012b7a:	00db      	lsls	r3, r3, #3
 8012b7c:	1a9a      	subs	r2, r3, r2
 8012b7e:	4b86      	ldr	r3, [pc, #536]	; (8012d98 <readCanToStructs+0x1778>)
 8012b80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b84:	885b      	ldrh	r3, [r3, #2]
 8012b86:	4984      	ldr	r1, [pc, #528]	; (8012d98 <readCanToStructs+0x1778>)
 8012b88:	011b      	lsls	r3, r3, #4
 8012b8a:	440b      	add	r3, r1
 8012b8c:	330c      	adds	r3, #12
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	3b01      	subs	r3, #1
 8012b92:	4413      	add	r3, r2
 8012b94:	2b01      	cmp	r3, #1
 8012b96:	d919      	bls.n	8012bcc <readCanToStructs+0x15ac>
					if(Debug_flag == 1)
 8012b98:	4b81      	ldr	r3, [pc, #516]	; (8012da0 <readCanToStructs+0x1780>)
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d105      	bne.n	8012bac <readCanToStructs+0x158c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8012ba0:	4b80      	ldr	r3, [pc, #512]	; (8012da4 <readCanToStructs+0x1784>)
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	4880      	ldr	r0, [pc, #512]	; (8012da8 <readCanToStructs+0x1788>)
 8012ba8:	f013 fc76 	bl	8026498 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8012bac:	4b7f      	ldr	r3, [pc, #508]	; (8012dac <readCanToStructs+0x178c>)
 8012bae:	2201      	movs	r2, #1
 8012bb0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8012bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bb6:	4a79      	ldr	r2, [pc, #484]	; (8012d9c <readCanToStructs+0x177c>)
 8012bb8:	f240 4116 	movw	r1, #1046	; 0x416
 8012bbc:	fb01 f303 	mul.w	r3, r1, r3
 8012bc0:	4413      	add	r3, r2
 8012bc2:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	701a      	strb	r2, [r3, #0]
				break;
 8012bca:	e024      	b.n	8012c16 <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8012bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bd0:	4a72      	ldr	r2, [pc, #456]	; (8012d9c <readCanToStructs+0x177c>)
 8012bd2:	f240 4116 	movw	r1, #1046	; 0x416
 8012bd6:	fb01 f303 	mul.w	r3, r1, r3
 8012bda:	4413      	add	r3, r2
 8012bdc:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012be0:	2201      	movs	r2, #1
 8012be2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8012be4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012be8:	496c      	ldr	r1, [pc, #432]	; (8012d9c <readCanToStructs+0x177c>)
 8012bea:	f240 4216 	movw	r2, #1046	; 0x416
 8012bee:	fb03 f202 	mul.w	r2, r3, r2
 8012bf2:	440a      	add	r2, r1
 8012bf4:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8012bf8:	7812      	ldrb	r2, [r2, #0]
 8012bfa:	3201      	adds	r2, #1
 8012bfc:	b2d0      	uxtb	r0, r2
 8012bfe:	4a67      	ldr	r2, [pc, #412]	; (8012d9c <readCanToStructs+0x177c>)
 8012c00:	f240 4116 	movw	r1, #1046	; 0x416
 8012c04:	fb01 f303 	mul.w	r3, r1, r3
 8012c08:	4413      	add	r3, r2
 8012c0a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012c0e:	4602      	mov	r2, r0
 8012c10:	701a      	strb	r2, [r3, #0]
				break;
 8012c12:	e000      	b.n	8012c16 <readCanToStructs+0x15f6>
				break;
 8012c14:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8012c16:	4b60      	ldr	r3, [pc, #384]	; (8012d98 <readCanToStructs+0x1778>)
 8012c18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c1c:	885b      	ldrh	r3, [r3, #2]
 8012c1e:	011b      	lsls	r3, r3, #4
 8012c20:	4a5d      	ldr	r2, [pc, #372]	; (8012d98 <readCanToStructs+0x1778>)
 8012c22:	4413      	add	r3, r2
 8012c24:	2210      	movs	r2, #16
 8012c26:	2100      	movs	r1, #0
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f013 fb4d 	bl	80262c8 <memset>
			canRead.Out++;
 8012c2e:	4b5a      	ldr	r3, [pc, #360]	; (8012d98 <readCanToStructs+0x1778>)
 8012c30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c34:	885b      	ldrh	r3, [r3, #2]
 8012c36:	3301      	adds	r3, #1
 8012c38:	b29a      	uxth	r2, r3
 8012c3a:	4b57      	ldr	r3, [pc, #348]	; (8012d98 <readCanToStructs+0x1778>)
 8012c3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c40:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8012c42:	4b55      	ldr	r3, [pc, #340]	; (8012d98 <readCanToStructs+0x1778>)
 8012c44:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c48:	885b      	ldrh	r3, [r3, #2]
 8012c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012c4e:	d104      	bne.n	8012c5a <readCanToStructs+0x163a>
				canRead.Out = 0;
 8012c50:	4b51      	ldr	r3, [pc, #324]	; (8012d98 <readCanToStructs+0x1778>)
 8012c52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c56:	2200      	movs	r2, #0
 8012c58:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8012c5a:	f7fe fc8b 	bl	8011574 <canDataReady>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	f47e ad07 	bne.w	8011674 <readCanToStructs+0x54>

		}
		/* ___________________ HITACHI _______________ */
	}
	break;
 8012c66:	f002 bdc9 	b.w	80157fc <readCanToStructs+0x41dc>
	case SIEMENS:
	{
		/* __________ SIEMENS _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8012c6a:	4b4b      	ldr	r3, [pc, #300]	; (8012d98 <readCanToStructs+0x1778>)
 8012c6c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c70:	885b      	ldrh	r3, [r3, #2]
 8012c72:	4a49      	ldr	r2, [pc, #292]	; (8012d98 <readCanToStructs+0x1778>)
 8012c74:	011b      	lsls	r3, r3, #4
 8012c76:	4413      	add	r3, r2
 8012c78:	330f      	adds	r3, #15
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	3b01      	subs	r3, #1
 8012c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8012c82:	4b45      	ldr	r3, [pc, #276]	; (8012d98 <readCanToStructs+0x1778>)
 8012c84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c88:	885b      	ldrh	r3, [r3, #2]
 8012c8a:	4a43      	ldr	r2, [pc, #268]	; (8012d98 <readCanToStructs+0x1778>)
 8012c8c:	011b      	lsls	r3, r3, #4
 8012c8e:	4413      	add	r3, r2
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	f240 220a 	movw	r2, #522	; 0x20a
 8012c96:	4293      	cmp	r3, r2
 8012c98:	f201 803e 	bhi.w	8013d18 <readCanToStructs+0x26f8>
 8012c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ca0:	d80a      	bhi.n	8012cb8 <readCanToStructs+0x1698>
 8012ca2:	f240 1203 	movw	r2, #259	; 0x103
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d022      	beq.n	8012cf0 <readCanToStructs+0x16d0>
 8012caa:	f240 1209 	movw	r2, #265	; 0x109
 8012cae:	4293      	cmp	r3, r2
 8012cb0:	f000 8104 	beq.w	8012ebc <readCanToStructs+0x189c>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8012cb4:	f001 b830 	b.w	8013d18 <readCanToStructs+0x26f8>
 8012cb8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012cbc:	2b09      	cmp	r3, #9
 8012cbe:	f201 802b 	bhi.w	8013d18 <readCanToStructs+0x26f8>
 8012cc2:	a201      	add	r2, pc, #4	; (adr r2, 8012cc8 <readCanToStructs+0x16a8>)
 8012cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cc8:	08013089 	.word	0x08013089
 8012ccc:	0801323f 	.word	0x0801323f
 8012cd0:	08013d19 	.word	0x08013d19
 8012cd4:	08013d19 	.word	0x08013d19
 8012cd8:	080137df 	.word	0x080137df
 8012cdc:	08013d19 	.word	0x08013d19
 8012ce0:	0801341f 	.word	0x0801341f
 8012ce4:	080135eb 	.word	0x080135eb
 8012ce8:	080139b1 	.word	0x080139b1
 8012cec:	08013b53 	.word	0x08013b53
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012cf0:	4b2f      	ldr	r3, [pc, #188]	; (8012db0 <readCanToStructs+0x1790>)
 8012cf2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012cf4:	4b28      	ldr	r3, [pc, #160]	; (8012d98 <readCanToStructs+0x1778>)
 8012cf6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012cfa:	885b      	ldrh	r3, [r3, #2]
 8012cfc:	4a26      	ldr	r2, [pc, #152]	; (8012d98 <readCanToStructs+0x1778>)
 8012cfe:	011b      	lsls	r3, r3, #4
 8012d00:	4413      	add	r3, r2
 8012d02:	3304      	adds	r3, #4
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012d0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d110      	bne.n	8012d34 <readCanToStructs+0x1714>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012d12:	2206      	movs	r2, #6
 8012d14:	2100      	movs	r1, #0
 8012d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d18:	f013 fad6 	bl	80262c8 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d20:	4a1e      	ldr	r2, [pc, #120]	; (8012d9c <readCanToStructs+0x177c>)
 8012d22:	f240 4116 	movw	r1, #1046	; 0x416
 8012d26:	fb01 f303 	mul.w	r3, r1, r3
 8012d2a:	4413      	add	r3, r2
 8012d2c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012d30:	2200      	movs	r2, #0
 8012d32:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8012d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d38:	4a18      	ldr	r2, [pc, #96]	; (8012d9c <readCanToStructs+0x177c>)
 8012d3a:	f240 4116 	movw	r1, #1046	; 0x416
 8012d3e:	fb01 f303 	mul.w	r3, r1, r3
 8012d42:	4413      	add	r3, r2
 8012d44:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d015      	beq.n	8012d7e <readCanToStructs+0x175e>
					printf("GPS Packet Seq no MisMatch\n");
 8012d52:	4818      	ldr	r0, [pc, #96]	; (8012db4 <readCanToStructs+0x1794>)
 8012d54:	f013 fc3c 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012d58:	2206      	movs	r2, #6
 8012d5a:	2100      	movs	r1, #0
 8012d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d5e:	f013 fab3 	bl	80262c8 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d66:	4a0d      	ldr	r2, [pc, #52]	; (8012d9c <readCanToStructs+0x177c>)
 8012d68:	f240 4116 	movw	r1, #1046	; 0x416
 8012d6c:	fb01 f303 	mul.w	r3, r1, r3
 8012d70:	4413      	add	r3, r2
 8012d72:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012d76:	2200      	movs	r2, #0
 8012d78:	701a      	strb	r2, [r3, #0]
					break;
 8012d7a:	f000 bfd2 	b.w	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012d7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d82:	4613      	mov	r3, r2
 8012d84:	00db      	lsls	r3, r3, #3
 8012d86:	1a9b      	subs	r3, r3, r2
 8012d88:	461a      	mov	r2, r3
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	4413      	add	r3, r2
 8012d8e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012d90:	2301      	movs	r3, #1
 8012d92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d96:	e026      	b.n	8012de6 <readCanToStructs+0x17c6>
 8012d98:	200071b4 	.word	0x200071b4
 8012d9c:	20006988 	.word	0x20006988
 8012da0:	20000bbb 	.word	0x20000bbb
 8012da4:	20000bb8 	.word	0x20000bb8
 8012da8:	0802b07c 	.word	0x0802b07c
 8012dac:	2000030b 	.word	0x2000030b
 8012db0:	20003f30 	.word	0x20003f30
 8012db4:	0802ae40 	.word	0x0802ae40
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012db8:	4bab      	ldr	r3, [pc, #684]	; (8013068 <readCanToStructs+0x1a48>)
 8012dba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012dbe:	885b      	ldrh	r3, [r3, #2]
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dc6:	49a8      	ldr	r1, [pc, #672]	; (8013068 <readCanToStructs+0x1a48>)
 8012dc8:	0112      	lsls	r2, r2, #4
 8012dca:	440a      	add	r2, r1
 8012dcc:	4413      	add	r3, r2
 8012dce:	3304      	adds	r3, #4
 8012dd0:	781a      	ldrb	r2, [r3, #0]
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd8:	3301      	adds	r3, #1
 8012dda:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012de0:	3301      	adds	r3, #1
 8012de2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012de6:	4ba0      	ldr	r3, [pc, #640]	; (8013068 <readCanToStructs+0x1a48>)
 8012de8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012dec:	885b      	ldrh	r3, [r3, #2]
 8012dee:	4a9e      	ldr	r2, [pc, #632]	; (8013068 <readCanToStructs+0x1a48>)
 8012df0:	011b      	lsls	r3, r3, #4
 8012df2:	4413      	add	r3, r2
 8012df4:	330c      	adds	r3, #12
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d3db      	bcc.n	8012db8 <readCanToStructs+0x1798>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e04:	4a99      	ldr	r2, [pc, #612]	; (801306c <readCanToStructs+0x1a4c>)
 8012e06:	f240 4116 	movw	r1, #1046	; 0x416
 8012e0a:	fb01 f303 	mul.w	r3, r1, r3
 8012e0e:	4413      	add	r3, r2
 8012e10:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	461a      	mov	r2, r3
 8012e18:	4613      	mov	r3, r2
 8012e1a:	00db      	lsls	r3, r3, #3
 8012e1c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012e1e:	4b92      	ldr	r3, [pc, #584]	; (8013068 <readCanToStructs+0x1a48>)
 8012e20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e24:	885b      	ldrh	r3, [r3, #2]
 8012e26:	4990      	ldr	r1, [pc, #576]	; (8013068 <readCanToStructs+0x1a48>)
 8012e28:	011b      	lsls	r3, r3, #4
 8012e2a:	440b      	add	r3, r1
 8012e2c:	330c      	adds	r3, #12
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	3b01      	subs	r3, #1
 8012e32:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012e34:	2b05      	cmp	r3, #5
 8012e36:	d91c      	bls.n	8012e72 <readCanToStructs+0x1852>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012e38:	4b8d      	ldr	r3, [pc, #564]	; (8013070 <readCanToStructs+0x1a50>)
 8012e3a:	4a8e      	ldr	r2, [pc, #568]	; (8013074 <readCanToStructs+0x1a54>)
 8012e3c:	6811      	ldr	r1, [r2, #0]
 8012e3e:	6019      	str	r1, [r3, #0]
 8012e40:	8892      	ldrh	r2, [r2, #4]
 8012e42:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012e44:	4b8c      	ldr	r3, [pc, #560]	; (8013078 <readCanToStructs+0x1a58>)
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d102      	bne.n	8012e52 <readCanToStructs+0x1832>
						printf("GPS_PACKET_RECEIVED\n");
 8012e4c:	488b      	ldr	r0, [pc, #556]	; (801307c <readCanToStructs+0x1a5c>)
 8012e4e:	f013 fbbf 	bl	80265d0 <puts>
					Write_RTC();
 8012e52:	f7f9 fba3 	bl	800c59c <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e5a:	4a84      	ldr	r2, [pc, #528]	; (801306c <readCanToStructs+0x1a4c>)
 8012e5c:	f240 4116 	movw	r1, #1046	; 0x416
 8012e60:	fb01 f303 	mul.w	r3, r1, r3
 8012e64:	4413      	add	r3, r2
 8012e66:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	701a      	strb	r2, [r3, #0]
				break;
 8012e6e:	f000 bf58 	b.w	8013d22 <readCanToStructs+0x2702>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8012e72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e76:	4a7d      	ldr	r2, [pc, #500]	; (801306c <readCanToStructs+0x1a4c>)
 8012e78:	f240 4116 	movw	r1, #1046	; 0x416
 8012e7c:	fb01 f303 	mul.w	r3, r1, r3
 8012e80:	4413      	add	r3, r2
 8012e82:	f203 2306 	addw	r3, r3, #518	; 0x206
 8012e86:	2201      	movs	r2, #1
 8012e88:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8012e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e8e:	4977      	ldr	r1, [pc, #476]	; (801306c <readCanToStructs+0x1a4c>)
 8012e90:	f240 4216 	movw	r2, #1046	; 0x416
 8012e94:	fb03 f202 	mul.w	r2, r3, r2
 8012e98:	440a      	add	r2, r1
 8012e9a:	f202 2207 	addw	r2, r2, #519	; 0x207
 8012e9e:	7812      	ldrb	r2, [r2, #0]
 8012ea0:	3201      	adds	r2, #1
 8012ea2:	b2d0      	uxtb	r0, r2
 8012ea4:	4a71      	ldr	r2, [pc, #452]	; (801306c <readCanToStructs+0x1a4c>)
 8012ea6:	f240 4116 	movw	r1, #1046	; 0x416
 8012eaa:	fb01 f303 	mul.w	r3, r1, r3
 8012eae:	4413      	add	r3, r2
 8012eb0:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	701a      	strb	r2, [r3, #0]
				break;
 8012eb8:	f000 bf33 	b.w	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012ebc:	4b6d      	ldr	r3, [pc, #436]	; (8013074 <readCanToStructs+0x1a54>)
 8012ebe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012ec0:	4b69      	ldr	r3, [pc, #420]	; (8013068 <readCanToStructs+0x1a48>)
 8012ec2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ec6:	885b      	ldrh	r3, [r3, #2]
 8012ec8:	4a67      	ldr	r2, [pc, #412]	; (8013068 <readCanToStructs+0x1a48>)
 8012eca:	011b      	lsls	r3, r3, #4
 8012ecc:	4413      	add	r3, r2
 8012ece:	3304      	adds	r3, #4
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012ed6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d110      	bne.n	8012f00 <readCanToStructs+0x18e0>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012ede:	2206      	movs	r2, #6
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ee4:	f013 f9f0 	bl	80262c8 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eec:	4a5f      	ldr	r2, [pc, #380]	; (801306c <readCanToStructs+0x1a4c>)
 8012eee:	f240 4116 	movw	r1, #1046	; 0x416
 8012ef2:	fb01 f303 	mul.w	r3, r1, r3
 8012ef6:	4413      	add	r3, r2
 8012ef8:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012efc:	2200      	movs	r2, #0
 8012efe:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8012f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f04:	4a59      	ldr	r2, [pc, #356]	; (801306c <readCanToStructs+0x1a4c>)
 8012f06:	f240 4116 	movw	r1, #1046	; 0x416
 8012f0a:	fb01 f303 	mul.w	r3, r1, r3
 8012f0e:	4413      	add	r3, r2
 8012f10:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012f14:	781b      	ldrb	r3, [r3, #0]
 8012f16:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d015      	beq.n	8012f4a <readCanToStructs+0x192a>
					printf("GPS2 Packet Seq no MisMatch\n");
 8012f1e:	4858      	ldr	r0, [pc, #352]	; (8013080 <readCanToStructs+0x1a60>)
 8012f20:	f013 fb56 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012f24:	2206      	movs	r2, #6
 8012f26:	2100      	movs	r1, #0
 8012f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f2a:	f013 f9cd 	bl	80262c8 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f32:	4a4e      	ldr	r2, [pc, #312]	; (801306c <readCanToStructs+0x1a4c>)
 8012f34:	f240 4116 	movw	r1, #1046	; 0x416
 8012f38:	fb01 f303 	mul.w	r3, r1, r3
 8012f3c:	4413      	add	r3, r2
 8012f3e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012f42:	2200      	movs	r2, #0
 8012f44:	701a      	strb	r2, [r3, #0]
					break;
 8012f46:	f000 beec 	b.w	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012f4a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012f4e:	4613      	mov	r3, r2
 8012f50:	00db      	lsls	r3, r3, #3
 8012f52:	1a9b      	subs	r3, r3, r2
 8012f54:	461a      	mov	r2, r3
 8012f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f58:	4413      	add	r3, r2
 8012f5a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f62:	e016      	b.n	8012f92 <readCanToStructs+0x1972>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012f64:	4b40      	ldr	r3, [pc, #256]	; (8013068 <readCanToStructs+0x1a48>)
 8012f66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f6a:	885b      	ldrh	r3, [r3, #2]
 8012f6c:	461a      	mov	r2, r3
 8012f6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f72:	493d      	ldr	r1, [pc, #244]	; (8013068 <readCanToStructs+0x1a48>)
 8012f74:	0112      	lsls	r2, r2, #4
 8012f76:	440a      	add	r2, r1
 8012f78:	4413      	add	r3, r2
 8012f7a:	3304      	adds	r3, #4
 8012f7c:	781a      	ldrb	r2, [r3, #0]
 8012f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f80:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f84:	3301      	adds	r3, #1
 8012f86:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012f88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f8c:	3301      	adds	r3, #1
 8012f8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f92:	4b35      	ldr	r3, [pc, #212]	; (8013068 <readCanToStructs+0x1a48>)
 8012f94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f98:	885b      	ldrh	r3, [r3, #2]
 8012f9a:	4a33      	ldr	r2, [pc, #204]	; (8013068 <readCanToStructs+0x1a48>)
 8012f9c:	011b      	lsls	r3, r3, #4
 8012f9e:	4413      	add	r3, r2
 8012fa0:	330c      	adds	r3, #12
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d3db      	bcc.n	8012f64 <readCanToStructs+0x1944>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012fac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fb0:	4a2e      	ldr	r2, [pc, #184]	; (801306c <readCanToStructs+0x1a4c>)
 8012fb2:	f240 4116 	movw	r1, #1046	; 0x416
 8012fb6:	fb01 f303 	mul.w	r3, r1, r3
 8012fba:	4413      	add	r3, r2
 8012fbc:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	00db      	lsls	r3, r3, #3
 8012fc8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012fca:	4b27      	ldr	r3, [pc, #156]	; (8013068 <readCanToStructs+0x1a48>)
 8012fcc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012fd0:	885b      	ldrh	r3, [r3, #2]
 8012fd2:	4925      	ldr	r1, [pc, #148]	; (8013068 <readCanToStructs+0x1a48>)
 8012fd4:	011b      	lsls	r3, r3, #4
 8012fd6:	440b      	add	r3, r1
 8012fd8:	330c      	adds	r3, #12
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	3b01      	subs	r3, #1
 8012fde:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012fe0:	2b05      	cmp	r3, #5
 8012fe2:	d91c      	bls.n	801301e <readCanToStructs+0x19fe>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012fe4:	4b22      	ldr	r3, [pc, #136]	; (8013070 <readCanToStructs+0x1a50>)
 8012fe6:	4a23      	ldr	r2, [pc, #140]	; (8013074 <readCanToStructs+0x1a54>)
 8012fe8:	6811      	ldr	r1, [r2, #0]
 8012fea:	6019      	str	r1, [r3, #0]
 8012fec:	8892      	ldrh	r2, [r2, #4]
 8012fee:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012ff0:	4b21      	ldr	r3, [pc, #132]	; (8013078 <readCanToStructs+0x1a58>)
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	2b01      	cmp	r3, #1
 8012ff6:	d102      	bne.n	8012ffe <readCanToStructs+0x19de>
						printf("GPS2_PACKET_RECEIVED\n");
 8012ff8:	4822      	ldr	r0, [pc, #136]	; (8013084 <readCanToStructs+0x1a64>)
 8012ffa:	f013 fae9 	bl	80265d0 <puts>
					Write_RTC();
 8012ffe:	f7f9 facd 	bl	800c59c <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8013002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013006:	4a19      	ldr	r2, [pc, #100]	; (801306c <readCanToStructs+0x1a4c>)
 8013008:	f240 4116 	movw	r1, #1046	; 0x416
 801300c:	fb01 f303 	mul.w	r3, r1, r3
 8013010:	4413      	add	r3, r2
 8013012:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013016:	2200      	movs	r2, #0
 8013018:	701a      	strb	r2, [r3, #0]
				break;
 801301a:	f000 be82 	b.w	8013d22 <readCanToStructs+0x2702>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 801301e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013022:	4a12      	ldr	r2, [pc, #72]	; (801306c <readCanToStructs+0x1a4c>)
 8013024:	f240 4116 	movw	r1, #1046	; 0x416
 8013028:	fb01 f303 	mul.w	r3, r1, r3
 801302c:	4413      	add	r3, r2
 801302e:	f203 2312 	addw	r3, r3, #530	; 0x212
 8013032:	2201      	movs	r2, #1
 8013034:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8013036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801303a:	490c      	ldr	r1, [pc, #48]	; (801306c <readCanToStructs+0x1a4c>)
 801303c:	f240 4216 	movw	r2, #1046	; 0x416
 8013040:	fb03 f202 	mul.w	r2, r3, r2
 8013044:	440a      	add	r2, r1
 8013046:	f202 2213 	addw	r2, r2, #531	; 0x213
 801304a:	7812      	ldrb	r2, [r2, #0]
 801304c:	3201      	adds	r2, #1
 801304e:	b2d0      	uxtb	r0, r2
 8013050:	4a06      	ldr	r2, [pc, #24]	; (801306c <readCanToStructs+0x1a4c>)
 8013052:	f240 4116 	movw	r1, #1046	; 0x416
 8013056:	fb01 f303 	mul.w	r3, r1, r3
 801305a:	4413      	add	r3, r2
 801305c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013060:	4602      	mov	r2, r0
 8013062:	701a      	strb	r2, [r3, #0]
				break;
 8013064:	f000 be5d 	b.w	8013d22 <readCanToStructs+0x2702>
 8013068:	200071b4 	.word	0x200071b4
 801306c:	20006988 	.word	0x20006988
 8013070:	20003f28 	.word	0x20003f28
 8013074:	20003f30 	.word	0x20003f30
 8013078:	20000bbb 	.word	0x20000bbb
 801307c:	0802ae5c 	.word	0x0802ae5c
 8013080:	0802ae70 	.word	0x0802ae70
 8013084:	0802ae8c 	.word	0x0802ae8c
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8013088:	4bc8      	ldr	r3, [pc, #800]	; (80133ac <readCanToStructs+0x1d8c>)
 801308a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801308c:	4bc8      	ldr	r3, [pc, #800]	; (80133b0 <readCanToStructs+0x1d90>)
 801308e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013092:	885b      	ldrh	r3, [r3, #2]
 8013094:	4ac6      	ldr	r2, [pc, #792]	; (80133b0 <readCanToStructs+0x1d90>)
 8013096:	011b      	lsls	r3, r3, #4
 8013098:	4413      	add	r3, r2
 801309a:	3304      	adds	r3, #4
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80130a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d110      	bne.n	80130cc <readCanToStructs+0x1aac>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80130aa:	2204      	movs	r2, #4
 80130ac:	2100      	movs	r1, #0
 80130ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130b0:	f013 f90a 	bl	80262c8 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80130b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130b8:	4abe      	ldr	r2, [pc, #760]	; (80133b4 <readCanToStructs+0x1d94>)
 80130ba:	f240 4116 	movw	r1, #1046	; 0x416
 80130be:	fb01 f303 	mul.w	r3, r1, r3
 80130c2:	4413      	add	r3, r2
 80130c4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80130c8:	2200      	movs	r2, #0
 80130ca:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80130cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130d0:	4ab8      	ldr	r2, [pc, #736]	; (80133b4 <readCanToStructs+0x1d94>)
 80130d2:	f240 4116 	movw	r1, #1046	; 0x416
 80130d6:	fb01 f303 	mul.w	r3, r1, r3
 80130da:	4413      	add	r3, r2
 80130dc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d015      	beq.n	8013116 <readCanToStructs+0x1af6>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 80130ea:	48b3      	ldr	r0, [pc, #716]	; (80133b8 <readCanToStructs+0x1d98>)
 80130ec:	f013 fa70 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80130f0:	2204      	movs	r2, #4
 80130f2:	2100      	movs	r1, #0
 80130f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130f6:	f013 f8e7 	bl	80262c8 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80130fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130fe:	4aad      	ldr	r2, [pc, #692]	; (80133b4 <readCanToStructs+0x1d94>)
 8013100:	f240 4116 	movw	r1, #1046	; 0x416
 8013104:	fb01 f303 	mul.w	r3, r1, r3
 8013108:	4413      	add	r3, r2
 801310a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801310e:	2200      	movs	r2, #0
 8013110:	701a      	strb	r2, [r3, #0]
					break;
 8013112:	f000 be06 	b.w	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013116:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801311a:	4613      	mov	r3, r2
 801311c:	00db      	lsls	r3, r3, #3
 801311e:	1a9b      	subs	r3, r3, r2
 8013120:	461a      	mov	r2, r3
 8013122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013124:	4413      	add	r3, r2
 8013126:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013128:	2301      	movs	r3, #1
 801312a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801312e:	e016      	b.n	801315e <readCanToStructs+0x1b3e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013130:	4b9f      	ldr	r3, [pc, #636]	; (80133b0 <readCanToStructs+0x1d90>)
 8013132:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013136:	885b      	ldrh	r3, [r3, #2]
 8013138:	461a      	mov	r2, r3
 801313a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801313e:	499c      	ldr	r1, [pc, #624]	; (80133b0 <readCanToStructs+0x1d90>)
 8013140:	0112      	lsls	r2, r2, #4
 8013142:	440a      	add	r2, r1
 8013144:	4413      	add	r3, r2
 8013146:	3304      	adds	r3, #4
 8013148:	781a      	ldrb	r2, [r3, #0]
 801314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013150:	3301      	adds	r3, #1
 8013152:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013154:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013158:	3301      	adds	r3, #1
 801315a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801315e:	4b94      	ldr	r3, [pc, #592]	; (80133b0 <readCanToStructs+0x1d90>)
 8013160:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013164:	885b      	ldrh	r3, [r3, #2]
 8013166:	4a92      	ldr	r2, [pc, #584]	; (80133b0 <readCanToStructs+0x1d90>)
 8013168:	011b      	lsls	r3, r3, #4
 801316a:	4413      	add	r3, r2
 801316c:	330c      	adds	r3, #12
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013174:	429a      	cmp	r2, r3
 8013176:	d3db      	bcc.n	8013130 <readCanToStructs+0x1b10>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8013178:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801317c:	4a8d      	ldr	r2, [pc, #564]	; (80133b4 <readCanToStructs+0x1d94>)
 801317e:	f240 4116 	movw	r1, #1046	; 0x416
 8013182:	fb01 f303 	mul.w	r3, r1, r3
 8013186:	4413      	add	r3, r2
 8013188:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	461a      	mov	r2, r3
 8013190:	4613      	mov	r3, r2
 8013192:	00db      	lsls	r3, r3, #3
 8013194:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8013196:	4b86      	ldr	r3, [pc, #536]	; (80133b0 <readCanToStructs+0x1d90>)
 8013198:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801319c:	885b      	ldrh	r3, [r3, #2]
 801319e:	4984      	ldr	r1, [pc, #528]	; (80133b0 <readCanToStructs+0x1d90>)
 80131a0:	011b      	lsls	r3, r3, #4
 80131a2:	440b      	add	r3, r1
 80131a4:	330c      	adds	r3, #12
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	3b01      	subs	r3, #1
 80131aa:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80131ac:	2b03      	cmp	r3, #3
 80131ae:	d921      	bls.n	80131f4 <readCanToStructs+0x1bd4>
 80131b0:	4b7e      	ldr	r3, [pc, #504]	; (80133ac <readCanToStructs+0x1d8c>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 80131b6:	4b81      	ldr	r3, [pc, #516]	; (80133bc <readCanToStructs+0x1d9c>)
 80131b8:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 80131ba:	4b81      	ldr	r3, [pc, #516]	; (80133c0 <readCanToStructs+0x1da0>)
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	2b01      	cmp	r3, #1
 80131c0:	d102      	bne.n	80131c8 <readCanToStructs+0x1ba8>
						printf("O_Info1_RCV\n");
 80131c2:	4880      	ldr	r0, [pc, #512]	; (80133c4 <readCanToStructs+0x1da4>)
 80131c4:	f013 fa04 	bl	80265d0 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80131c8:	4b7f      	ldr	r3, [pc, #508]	; (80133c8 <readCanToStructs+0x1da8>)
 80131ca:	2201      	movs	r2, #1
 80131cc:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80131ce:	f006 f959 	bl	8019484 <HAL_GetTick>
 80131d2:	4603      	mov	r3, r0
 80131d4:	4a7c      	ldr	r2, [pc, #496]	; (80133c8 <readCanToStructs+0x1da8>)
 80131d6:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80131d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131dc:	4a75      	ldr	r2, [pc, #468]	; (80133b4 <readCanToStructs+0x1d94>)
 80131de:	f240 4116 	movw	r1, #1046	; 0x416
 80131e2:	fb01 f303 	mul.w	r3, r1, r3
 80131e6:	4413      	add	r3, r2
 80131e8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80131ec:	2200      	movs	r2, #0
 80131ee:	701a      	strb	r2, [r3, #0]
				break;
 80131f0:	f000 bd97 	b.w	8013d22 <readCanToStructs+0x2702>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80131f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131f8:	4a6e      	ldr	r2, [pc, #440]	; (80133b4 <readCanToStructs+0x1d94>)
 80131fa:	f240 4116 	movw	r1, #1046	; 0x416
 80131fe:	fb01 f303 	mul.w	r3, r1, r3
 8013202:	4413      	add	r3, r2
 8013204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013208:	2201      	movs	r2, #1
 801320a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 801320c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013210:	4968      	ldr	r1, [pc, #416]	; (80133b4 <readCanToStructs+0x1d94>)
 8013212:	f240 4216 	movw	r2, #1046	; 0x416
 8013216:	fb03 f202 	mul.w	r2, r3, r2
 801321a:	440a      	add	r2, r1
 801321c:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8013220:	7812      	ldrb	r2, [r2, #0]
 8013222:	3201      	adds	r2, #1
 8013224:	b2d0      	uxtb	r0, r2
 8013226:	4a63      	ldr	r2, [pc, #396]	; (80133b4 <readCanToStructs+0x1d94>)
 8013228:	f240 4116 	movw	r1, #1046	; 0x416
 801322c:	fb01 f303 	mul.w	r3, r1, r3
 8013230:	4413      	add	r3, r2
 8013232:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013236:	4602      	mov	r2, r0
 8013238:	701a      	strb	r2, [r3, #0]
				break;
 801323a:	f000 bd72 	b.w	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 801323e:	4b5b      	ldr	r3, [pc, #364]	; (80133ac <readCanToStructs+0x1d8c>)
 8013240:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013242:	4b5b      	ldr	r3, [pc, #364]	; (80133b0 <readCanToStructs+0x1d90>)
 8013244:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013248:	885b      	ldrh	r3, [r3, #2]
 801324a:	4a59      	ldr	r2, [pc, #356]	; (80133b0 <readCanToStructs+0x1d90>)
 801324c:	011b      	lsls	r3, r3, #4
 801324e:	4413      	add	r3, r2
 8013250:	3304      	adds	r3, #4
 8013252:	781b      	ldrb	r3, [r3, #0]
 8013254:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013258:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801325c:	2b00      	cmp	r3, #0
 801325e:	d110      	bne.n	8013282 <readCanToStructs+0x1c62>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8013260:	2204      	movs	r2, #4
 8013262:	2100      	movs	r1, #0
 8013264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013266:	f013 f82f 	bl	80262c8 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801326a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801326e:	4a51      	ldr	r2, [pc, #324]	; (80133b4 <readCanToStructs+0x1d94>)
 8013270:	f240 4116 	movw	r1, #1046	; 0x416
 8013274:	fb01 f303 	mul.w	r3, r1, r3
 8013278:	4413      	add	r3, r2
 801327a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801327e:	2200      	movs	r2, #0
 8013280:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8013282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013286:	4a4b      	ldr	r2, [pc, #300]	; (80133b4 <readCanToStructs+0x1d94>)
 8013288:	f240 4116 	movw	r1, #1046	; 0x416
 801328c:	fb01 f303 	mul.w	r3, r1, r3
 8013290:	4413      	add	r3, r2
 8013292:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801329c:	429a      	cmp	r2, r3
 801329e:	d015      	beq.n	80132cc <readCanToStructs+0x1cac>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 80132a0:	484a      	ldr	r0, [pc, #296]	; (80133cc <readCanToStructs+0x1dac>)
 80132a2:	f013 f995 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80132a6:	2204      	movs	r2, #4
 80132a8:	2100      	movs	r1, #0
 80132aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132ac:	f013 f80c 	bl	80262c8 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80132b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132b4:	4a3f      	ldr	r2, [pc, #252]	; (80133b4 <readCanToStructs+0x1d94>)
 80132b6:	f240 4116 	movw	r1, #1046	; 0x416
 80132ba:	fb01 f303 	mul.w	r3, r1, r3
 80132be:	4413      	add	r3, r2
 80132c0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80132c4:	2200      	movs	r2, #0
 80132c6:	701a      	strb	r2, [r3, #0]
					break;
 80132c8:	f000 bd2b 	b.w	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80132cc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80132d0:	4613      	mov	r3, r2
 80132d2:	00db      	lsls	r3, r3, #3
 80132d4:	1a9b      	subs	r3, r3, r2
 80132d6:	461a      	mov	r2, r3
 80132d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132da:	4413      	add	r3, r2
 80132dc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80132de:	2301      	movs	r3, #1
 80132e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132e4:	e016      	b.n	8013314 <readCanToStructs+0x1cf4>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80132e6:	4b32      	ldr	r3, [pc, #200]	; (80133b0 <readCanToStructs+0x1d90>)
 80132e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132ec:	885b      	ldrh	r3, [r3, #2]
 80132ee:	461a      	mov	r2, r3
 80132f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132f4:	492e      	ldr	r1, [pc, #184]	; (80133b0 <readCanToStructs+0x1d90>)
 80132f6:	0112      	lsls	r2, r2, #4
 80132f8:	440a      	add	r2, r1
 80132fa:	4413      	add	r3, r2
 80132fc:	3304      	adds	r3, #4
 80132fe:	781a      	ldrb	r2, [r3, #0]
 8013300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013302:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013306:	3301      	adds	r3, #1
 8013308:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801330a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801330e:	3301      	adds	r3, #1
 8013310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013314:	4b26      	ldr	r3, [pc, #152]	; (80133b0 <readCanToStructs+0x1d90>)
 8013316:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801331a:	885b      	ldrh	r3, [r3, #2]
 801331c:	4a24      	ldr	r2, [pc, #144]	; (80133b0 <readCanToStructs+0x1d90>)
 801331e:	011b      	lsls	r3, r3, #4
 8013320:	4413      	add	r3, r2
 8013322:	330c      	adds	r3, #12
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801332a:	429a      	cmp	r2, r3
 801332c:	d3db      	bcc.n	80132e6 <readCanToStructs+0x1cc6>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801332e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013332:	4a20      	ldr	r2, [pc, #128]	; (80133b4 <readCanToStructs+0x1d94>)
 8013334:	f240 4116 	movw	r1, #1046	; 0x416
 8013338:	fb01 f303 	mul.w	r3, r1, r3
 801333c:	4413      	add	r3, r2
 801333e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	461a      	mov	r2, r3
 8013346:	4613      	mov	r3, r2
 8013348:	00db      	lsls	r3, r3, #3
 801334a:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 801334c:	4b18      	ldr	r3, [pc, #96]	; (80133b0 <readCanToStructs+0x1d90>)
 801334e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013352:	885b      	ldrh	r3, [r3, #2]
 8013354:	4916      	ldr	r1, [pc, #88]	; (80133b0 <readCanToStructs+0x1d90>)
 8013356:	011b      	lsls	r3, r3, #4
 8013358:	440b      	add	r3, r1
 801335a:	330c      	adds	r3, #12
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	3b01      	subs	r3, #1
 8013360:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8013362:	2b03      	cmp	r3, #3
 8013364:	d936      	bls.n	80133d4 <readCanToStructs+0x1db4>
 8013366:	4b11      	ldr	r3, [pc, #68]	; (80133ac <readCanToStructs+0x1d8c>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 801336c:	4b13      	ldr	r3, [pc, #76]	; (80133bc <readCanToStructs+0x1d9c>)
 801336e:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8013370:	4b13      	ldr	r3, [pc, #76]	; (80133c0 <readCanToStructs+0x1da0>)
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	2b01      	cmp	r3, #1
 8013376:	d102      	bne.n	801337e <readCanToStructs+0x1d5e>
						printf("O_Info2_RCV\n");
 8013378:	4815      	ldr	r0, [pc, #84]	; (80133d0 <readCanToStructs+0x1db0>)
 801337a:	f013 f929 	bl	80265d0 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801337e:	4b12      	ldr	r3, [pc, #72]	; (80133c8 <readCanToStructs+0x1da8>)
 8013380:	2201      	movs	r2, #1
 8013382:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013384:	f006 f87e 	bl	8019484 <HAL_GetTick>
 8013388:	4603      	mov	r3, r0
 801338a:	4a0f      	ldr	r2, [pc, #60]	; (80133c8 <readCanToStructs+0x1da8>)
 801338c:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801338e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013392:	4a08      	ldr	r2, [pc, #32]	; (80133b4 <readCanToStructs+0x1d94>)
 8013394:	f240 4116 	movw	r1, #1046	; 0x416
 8013398:	fb01 f303 	mul.w	r3, r1, r3
 801339c:	4413      	add	r3, r2
 801339e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80133a2:	2200      	movs	r2, #0
 80133a4:	701a      	strb	r2, [r3, #0]
				break;
 80133a6:	f000 bcbc 	b.w	8013d22 <readCanToStructs+0x2702>
 80133aa:	bf00      	nop
 80133ac:	20004bd8 	.word	0x20004bd8
 80133b0:	200071b4 	.word	0x200071b4
 80133b4:	20006988 	.word	0x20006988
 80133b8:	0802aea4 	.word	0x0802aea4
 80133bc:	20004bd4 	.word	0x20004bd4
 80133c0:	20000bbb 	.word	0x20000bbb
 80133c4:	0802b090 	.word	0x0802b090
 80133c8:	20004bdc 	.word	0x20004bdc
 80133cc:	0802aed8 	.word	0x0802aed8
 80133d0:	0802b09c 	.word	0x0802b09c
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80133d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133d8:	4a9f      	ldr	r2, [pc, #636]	; (8013658 <readCanToStructs+0x2038>)
 80133da:	f240 4116 	movw	r1, #1046	; 0x416
 80133de:	fb01 f303 	mul.w	r3, r1, r3
 80133e2:	4413      	add	r3, r2
 80133e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80133e8:	2201      	movs	r2, #1
 80133ea:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80133ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133f0:	4999      	ldr	r1, [pc, #612]	; (8013658 <readCanToStructs+0x2038>)
 80133f2:	f240 4216 	movw	r2, #1046	; 0x416
 80133f6:	fb03 f202 	mul.w	r2, r3, r2
 80133fa:	440a      	add	r2, r1
 80133fc:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8013400:	7812      	ldrb	r2, [r2, #0]
 8013402:	3201      	adds	r2, #1
 8013404:	b2d0      	uxtb	r0, r2
 8013406:	4a94      	ldr	r2, [pc, #592]	; (8013658 <readCanToStructs+0x2038>)
 8013408:	f240 4116 	movw	r1, #1046	; 0x416
 801340c:	fb01 f303 	mul.w	r3, r1, r3
 8013410:	4413      	add	r3, r2
 8013412:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013416:	4602      	mov	r2, r0
 8013418:	701a      	strb	r2, [r3, #0]
				break;
 801341a:	f000 bc82 	b.w	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 801341e:	4b8f      	ldr	r3, [pc, #572]	; (801365c <readCanToStructs+0x203c>)
 8013420:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013422:	4b8f      	ldr	r3, [pc, #572]	; (8013660 <readCanToStructs+0x2040>)
 8013424:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013428:	885b      	ldrh	r3, [r3, #2]
 801342a:	4a8d      	ldr	r2, [pc, #564]	; (8013660 <readCanToStructs+0x2040>)
 801342c:	011b      	lsls	r3, r3, #4
 801342e:	4413      	add	r3, r2
 8013430:	3304      	adds	r3, #4
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8013438:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801343c:	2b00      	cmp	r3, #0
 801343e:	d005      	beq.n	801344c <readCanToStructs+0x1e2c>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8013440:	4b88      	ldr	r3, [pc, #544]	; (8013664 <readCanToStructs+0x2044>)
 8013442:	881b      	ldrh	r3, [r3, #0]
 8013444:	461a      	mov	r2, r3
 8013446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013448:	4413      	add	r3, r2
 801344a:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 801344c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013450:	2b00      	cmp	r3, #0
 8013452:	d117      	bne.n	8013484 <readCanToStructs+0x1e64>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013454:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013458:	2100      	movs	r1, #0
 801345a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801345c:	f012 ff34 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013464:	4a7c      	ldr	r2, [pc, #496]	; (8013658 <readCanToStructs+0x2038>)
 8013466:	f240 4116 	movw	r1, #1046	; 0x416
 801346a:	fb01 f303 	mul.w	r3, r1, r3
 801346e:	4413      	add	r3, r2
 8013470:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013474:	2200      	movs	r2, #0
 8013476:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013478:	4b7a      	ldr	r3, [pc, #488]	; (8013664 <readCanToStructs+0x2044>)
 801347a:	2200      	movs	r2, #0
 801347c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801347e:	4b7a      	ldr	r3, [pc, #488]	; (8013668 <readCanToStructs+0x2048>)
 8013480:	2200      	movs	r2, #0
 8013482:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013484:	2301      	movs	r3, #1
 8013486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801348a:	e01c      	b.n	80134c6 <readCanToStructs+0x1ea6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801348c:	4b74      	ldr	r3, [pc, #464]	; (8013660 <readCanToStructs+0x2040>)
 801348e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013492:	885b      	ldrh	r3, [r3, #2]
 8013494:	461a      	mov	r2, r3
 8013496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801349a:	4971      	ldr	r1, [pc, #452]	; (8013660 <readCanToStructs+0x2040>)
 801349c:	0112      	lsls	r2, r2, #4
 801349e:	440a      	add	r2, r1
 80134a0:	4413      	add	r3, r2
 80134a2:	3304      	adds	r3, #4
 80134a4:	781a      	ldrb	r2, [r3, #0]
 80134a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80134aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ac:	3301      	adds	r3, #1
 80134ae:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 80134b0:	4b6c      	ldr	r3, [pc, #432]	; (8013664 <readCanToStructs+0x2044>)
 80134b2:	881b      	ldrh	r3, [r3, #0]
 80134b4:	3301      	adds	r3, #1
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	4b6a      	ldr	r3, [pc, #424]	; (8013664 <readCanToStructs+0x2044>)
 80134ba:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80134bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134c0:	3301      	adds	r3, #1
 80134c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80134c6:	4b66      	ldr	r3, [pc, #408]	; (8013660 <readCanToStructs+0x2040>)
 80134c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134cc:	885b      	ldrh	r3, [r3, #2]
 80134ce:	4a64      	ldr	r2, [pc, #400]	; (8013660 <readCanToStructs+0x2040>)
 80134d0:	011b      	lsls	r3, r3, #4
 80134d2:	4413      	add	r3, r2
 80134d4:	330c      	adds	r3, #12
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80134dc:	429a      	cmp	r2, r3
 80134de:	d3d5      	bcc.n	801348c <readCanToStructs+0x1e6c>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80134e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134e4:	4a5c      	ldr	r2, [pc, #368]	; (8013658 <readCanToStructs+0x2038>)
 80134e6:	f240 4116 	movw	r1, #1046	; 0x416
 80134ea:	fb01 f303 	mul.w	r3, r1, r3
 80134ee:	4413      	add	r3, r2
 80134f0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d026      	beq.n	801354c <readCanToStructs+0x1f2c>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 80134fe:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013506:	4a54      	ldr	r2, [pc, #336]	; (8013658 <readCanToStructs+0x2038>)
 8013508:	f240 4016 	movw	r0, #1046	; 0x416
 801350c:	fb00 f303 	mul.w	r3, r0, r3
 8013510:	4413      	add	r3, r2
 8013512:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	461a      	mov	r2, r3
 801351a:	4854      	ldr	r0, [pc, #336]	; (801366c <readCanToStructs+0x204c>)
 801351c:	f012 ffbc 	bl	8026498 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013520:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013524:	2100      	movs	r1, #0
 8013526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013528:	f012 fece 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801352c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013530:	4a49      	ldr	r2, [pc, #292]	; (8013658 <readCanToStructs+0x2038>)
 8013532:	f240 4116 	movw	r1, #1046	; 0x416
 8013536:	fb01 f303 	mul.w	r3, r1, r3
 801353a:	4413      	add	r3, r2
 801353c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013540:	2200      	movs	r2, #0
 8013542:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013544:	4b47      	ldr	r3, [pc, #284]	; (8013664 <readCanToStructs+0x2044>)
 8013546:	2200      	movs	r2, #0
 8013548:	801a      	strh	r2, [r3, #0]
					break;
 801354a:	e3ea      	b.n	8013d22 <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801354c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013550:	4941      	ldr	r1, [pc, #260]	; (8013658 <readCanToStructs+0x2038>)
 8013552:	f240 4216 	movw	r2, #1046	; 0x416
 8013556:	fb03 f202 	mul.w	r2, r3, r2
 801355a:	440a      	add	r2, r1
 801355c:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8013560:	7812      	ldrb	r2, [r2, #0]
 8013562:	3201      	adds	r2, #1
 8013564:	b2d0      	uxtb	r0, r2
 8013566:	4a3c      	ldr	r2, [pc, #240]	; (8013658 <readCanToStructs+0x2038>)
 8013568:	f240 4116 	movw	r1, #1046	; 0x416
 801356c:	fb01 f303 	mul.w	r3, r1, r3
 8013570:	4413      	add	r3, r2
 8013572:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013576:	4602      	mov	r2, r0
 8013578:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 801357a:	4b38      	ldr	r3, [pc, #224]	; (801365c <readCanToStructs+0x203c>)
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	3304      	adds	r3, #4
 8013580:	b29a      	uxth	r2, r3
 8013582:	4b39      	ldr	r3, [pc, #228]	; (8013668 <readCanToStructs+0x2048>)
 8013584:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8013586:	4b37      	ldr	r3, [pc, #220]	; (8013664 <readCanToStructs+0x2044>)
 8013588:	881a      	ldrh	r2, [r3, #0]
 801358a:	4b37      	ldr	r3, [pc, #220]	; (8013668 <readCanToStructs+0x2048>)
 801358c:	881b      	ldrh	r3, [r3, #0]
 801358e:	429a      	cmp	r2, r3
 8013590:	f0c0 83c4 	bcc.w	8013d1c <readCanToStructs+0x26fc>
					if(Debug_flag == 1)
 8013594:	4b36      	ldr	r3, [pc, #216]	; (8013670 <readCanToStructs+0x2050>)
 8013596:	781b      	ldrb	r3, [r3, #0]
 8013598:	2b01      	cmp	r3, #1
 801359a:	d102      	bne.n	80135a2 <readCanToStructs+0x1f82>
						printf("EI1 Relay Info Received\n");
 801359c:	4835      	ldr	r0, [pc, #212]	; (8013674 <readCanToStructs+0x2054>)
 801359e:	f013 f817 	bl	80265d0 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 80135a2:	4a35      	ldr	r2, [pc, #212]	; (8013678 <readCanToStructs+0x2058>)
 80135a4:	4b2d      	ldr	r3, [pc, #180]	; (801365c <readCanToStructs+0x203c>)
 80135a6:	4610      	mov	r0, r2
 80135a8:	4619      	mov	r1, r3
 80135aa:	f44f 7301 	mov.w	r3, #516	; 0x204
 80135ae:	461a      	mov	r2, r3
 80135b0:	f012 fe62 	bl	8026278 <memcpy>
					DataTraverser = 0;
 80135b4:	4b2b      	ldr	r3, [pc, #172]	; (8013664 <readCanToStructs+0x2044>)
 80135b6:	2200      	movs	r2, #0
 80135b8:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 80135ba:	4b2b      	ldr	r3, [pc, #172]	; (8013668 <readCanToStructs+0x2048>)
 80135bc:	2200      	movs	r2, #0
 80135be:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80135c0:	4b2e      	ldr	r3, [pc, #184]	; (801367c <readCanToStructs+0x205c>)
 80135c2:	2201      	movs	r2, #1
 80135c4:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80135c6:	f005 ff5d 	bl	8019484 <HAL_GetTick>
 80135ca:	4603      	mov	r3, r0
 80135cc:	4a2b      	ldr	r2, [pc, #172]	; (801367c <readCanToStructs+0x205c>)
 80135ce:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80135d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135d4:	4a20      	ldr	r2, [pc, #128]	; (8013658 <readCanToStructs+0x2038>)
 80135d6:	f240 4116 	movw	r1, #1046	; 0x416
 80135da:	fb01 f303 	mul.w	r3, r1, r3
 80135de:	4413      	add	r3, r2
 80135e0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80135e4:	2200      	movs	r2, #0
 80135e6:	701a      	strb	r2, [r3, #0]
				break;
 80135e8:	e398      	b.n	8013d1c <readCanToStructs+0x26fc>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 80135ea:	4b1c      	ldr	r3, [pc, #112]	; (801365c <readCanToStructs+0x203c>)
 80135ec:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80135ee:	4b1c      	ldr	r3, [pc, #112]	; (8013660 <readCanToStructs+0x2040>)
 80135f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135f4:	885b      	ldrh	r3, [r3, #2]
 80135f6:	4a1a      	ldr	r2, [pc, #104]	; (8013660 <readCanToStructs+0x2040>)
 80135f8:	011b      	lsls	r3, r3, #4
 80135fa:	4413      	add	r3, r2
 80135fc:	3304      	adds	r3, #4
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8013604:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013608:	2b00      	cmp	r3, #0
 801360a:	d005      	beq.n	8013618 <readCanToStructs+0x1ff8>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 801360c:	4b15      	ldr	r3, [pc, #84]	; (8013664 <readCanToStructs+0x2044>)
 801360e:	881b      	ldrh	r3, [r3, #0]
 8013610:	461a      	mov	r2, r3
 8013612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013614:	4413      	add	r3, r2
 8013616:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8013618:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801361c:	2b00      	cmp	r3, #0
 801361e:	d117      	bne.n	8013650 <readCanToStructs+0x2030>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013620:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013624:	2100      	movs	r1, #0
 8013626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013628:	f012 fe4e 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801362c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013630:	4a09      	ldr	r2, [pc, #36]	; (8013658 <readCanToStructs+0x2038>)
 8013632:	f240 4116 	movw	r1, #1046	; 0x416
 8013636:	fb01 f303 	mul.w	r3, r1, r3
 801363a:	4413      	add	r3, r2
 801363c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013640:	2200      	movs	r2, #0
 8013642:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013644:	4b07      	ldr	r3, [pc, #28]	; (8013664 <readCanToStructs+0x2044>)
 8013646:	2200      	movs	r2, #0
 8013648:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801364a:	4b07      	ldr	r3, [pc, #28]	; (8013668 <readCanToStructs+0x2048>)
 801364c:	2200      	movs	r2, #0
 801364e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013650:	2301      	movs	r3, #1
 8013652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013656:	e030      	b.n	80136ba <readCanToStructs+0x209a>
 8013658:	20006988 	.word	0x20006988
 801365c:	20005204 	.word	0x20005204
 8013660:	200071b4 	.word	0x200071b4
 8013664:	2000b30c 	.word	0x2000b30c
 8013668:	2000b30e 	.word	0x2000b30e
 801366c:	0802b0a8 	.word	0x0802b0a8
 8013670:	20000bbb 	.word	0x20000bbb
 8013674:	0802b0d4 	.word	0x0802b0d4
 8013678:	20005000 	.word	0x20005000
 801367c:	20004bdc 	.word	0x20004bdc
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013680:	4bbe      	ldr	r3, [pc, #760]	; (801397c <readCanToStructs+0x235c>)
 8013682:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013686:	885b      	ldrh	r3, [r3, #2]
 8013688:	461a      	mov	r2, r3
 801368a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801368e:	49bb      	ldr	r1, [pc, #748]	; (801397c <readCanToStructs+0x235c>)
 8013690:	0112      	lsls	r2, r2, #4
 8013692:	440a      	add	r2, r1
 8013694:	4413      	add	r3, r2
 8013696:	3304      	adds	r3, #4
 8013698:	781a      	ldrb	r2, [r3, #0]
 801369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a0:	3301      	adds	r3, #1
 80136a2:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 80136a4:	4bb6      	ldr	r3, [pc, #728]	; (8013980 <readCanToStructs+0x2360>)
 80136a6:	881b      	ldrh	r3, [r3, #0]
 80136a8:	3301      	adds	r3, #1
 80136aa:	b29a      	uxth	r2, r3
 80136ac:	4bb4      	ldr	r3, [pc, #720]	; (8013980 <readCanToStructs+0x2360>)
 80136ae:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80136b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80136b4:	3301      	adds	r3, #1
 80136b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80136ba:	4bb0      	ldr	r3, [pc, #704]	; (801397c <readCanToStructs+0x235c>)
 80136bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80136c0:	885b      	ldrh	r3, [r3, #2]
 80136c2:	4aae      	ldr	r2, [pc, #696]	; (801397c <readCanToStructs+0x235c>)
 80136c4:	011b      	lsls	r3, r3, #4
 80136c6:	4413      	add	r3, r2
 80136c8:	330c      	adds	r3, #12
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d3d5      	bcc.n	8013680 <readCanToStructs+0x2060>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80136d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136d8:	4aaa      	ldr	r2, [pc, #680]	; (8013984 <readCanToStructs+0x2364>)
 80136da:	f240 4116 	movw	r1, #1046	; 0x416
 80136de:	fb01 f303 	mul.w	r3, r1, r3
 80136e2:	4413      	add	r3, r2
 80136e4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d026      	beq.n	8013740 <readCanToStructs+0x2120>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 80136f2:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80136f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136fa:	4aa2      	ldr	r2, [pc, #648]	; (8013984 <readCanToStructs+0x2364>)
 80136fc:	f240 4016 	movw	r0, #1046	; 0x416
 8013700:	fb00 f303 	mul.w	r3, r0, r3
 8013704:	4413      	add	r3, r2
 8013706:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	461a      	mov	r2, r3
 801370e:	489e      	ldr	r0, [pc, #632]	; (8013988 <readCanToStructs+0x2368>)
 8013710:	f012 fec2 	bl	8026498 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013714:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013718:	2100      	movs	r1, #0
 801371a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801371c:	f012 fdd4 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013724:	4a97      	ldr	r2, [pc, #604]	; (8013984 <readCanToStructs+0x2364>)
 8013726:	f240 4116 	movw	r1, #1046	; 0x416
 801372a:	fb01 f303 	mul.w	r3, r1, r3
 801372e:	4413      	add	r3, r2
 8013730:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013734:	2200      	movs	r2, #0
 8013736:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013738:	4b91      	ldr	r3, [pc, #580]	; (8013980 <readCanToStructs+0x2360>)
 801373a:	2200      	movs	r2, #0
 801373c:	801a      	strh	r2, [r3, #0]
					break;
 801373e:	e2f0      	b.n	8013d22 <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8013740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013744:	498f      	ldr	r1, [pc, #572]	; (8013984 <readCanToStructs+0x2364>)
 8013746:	f240 4216 	movw	r2, #1046	; 0x416
 801374a:	fb03 f202 	mul.w	r2, r3, r2
 801374e:	440a      	add	r2, r1
 8013750:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8013754:	7812      	ldrb	r2, [r2, #0]
 8013756:	3201      	adds	r2, #1
 8013758:	b2d0      	uxtb	r0, r2
 801375a:	4a8a      	ldr	r2, [pc, #552]	; (8013984 <readCanToStructs+0x2364>)
 801375c:	f240 4116 	movw	r1, #1046	; 0x416
 8013760:	fb01 f303 	mul.w	r3, r1, r3
 8013764:	4413      	add	r3, r2
 8013766:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801376a:	4602      	mov	r2, r0
 801376c:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 801376e:	4b87      	ldr	r3, [pc, #540]	; (801398c <readCanToStructs+0x236c>)
 8013770:	881b      	ldrh	r3, [r3, #0]
 8013772:	3304      	adds	r3, #4
 8013774:	b29a      	uxth	r2, r3
 8013776:	4b86      	ldr	r3, [pc, #536]	; (8013990 <readCanToStructs+0x2370>)
 8013778:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 801377a:	4b81      	ldr	r3, [pc, #516]	; (8013980 <readCanToStructs+0x2360>)
 801377c:	881a      	ldrh	r2, [r3, #0]
 801377e:	4b84      	ldr	r3, [pc, #528]	; (8013990 <readCanToStructs+0x2370>)
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	429a      	cmp	r2, r3
 8013784:	f0c0 82cc 	bcc.w	8013d20 <readCanToStructs+0x2700>
					if(Debug_flag == 1)
 8013788:	4b82      	ldr	r3, [pc, #520]	; (8013994 <readCanToStructs+0x2374>)
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	2b01      	cmp	r3, #1
 801378e:	d102      	bne.n	8013796 <readCanToStructs+0x2176>
						printf("EI2 Relay Info Received\n");
 8013790:	4881      	ldr	r0, [pc, #516]	; (8013998 <readCanToStructs+0x2378>)
 8013792:	f012 ff1d 	bl	80265d0 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8013796:	4a81      	ldr	r2, [pc, #516]	; (801399c <readCanToStructs+0x237c>)
 8013798:	4b7c      	ldr	r3, [pc, #496]	; (801398c <readCanToStructs+0x236c>)
 801379a:	4610      	mov	r0, r2
 801379c:	4619      	mov	r1, r3
 801379e:	f44f 7301 	mov.w	r3, #516	; 0x204
 80137a2:	461a      	mov	r2, r3
 80137a4:	f012 fd68 	bl	8026278 <memcpy>
					DataTraverser = 0;
 80137a8:	4b75      	ldr	r3, [pc, #468]	; (8013980 <readCanToStructs+0x2360>)
 80137aa:	2200      	movs	r2, #0
 80137ac:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 80137ae:	4b78      	ldr	r3, [pc, #480]	; (8013990 <readCanToStructs+0x2370>)
 80137b0:	2200      	movs	r2, #0
 80137b2:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80137b4:	4b7a      	ldr	r3, [pc, #488]	; (80139a0 <readCanToStructs+0x2380>)
 80137b6:	2201      	movs	r2, #1
 80137b8:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80137ba:	f005 fe63 	bl	8019484 <HAL_GetTick>
 80137be:	4603      	mov	r3, r0
 80137c0:	4a77      	ldr	r2, [pc, #476]	; (80139a0 <readCanToStructs+0x2380>)
 80137c2:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80137c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137c8:	4a6e      	ldr	r2, [pc, #440]	; (8013984 <readCanToStructs+0x2364>)
 80137ca:	f240 4116 	movw	r1, #1046	; 0x416
 80137ce:	fb01 f303 	mul.w	r3, r1, r3
 80137d2:	4413      	add	r3, r2
 80137d4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80137d8:	2200      	movs	r2, #0
 80137da:	701a      	strb	r2, [r3, #0]
				break;
 80137dc:	e2a0      	b.n	8013d20 <readCanToStructs+0x2700>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 80137de:	4b71      	ldr	r3, [pc, #452]	; (80139a4 <readCanToStructs+0x2384>)
 80137e0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80137e2:	4b66      	ldr	r3, [pc, #408]	; (801397c <readCanToStructs+0x235c>)
 80137e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80137e8:	885b      	ldrh	r3, [r3, #2]
 80137ea:	4a64      	ldr	r2, [pc, #400]	; (801397c <readCanToStructs+0x235c>)
 80137ec:	011b      	lsls	r3, r3, #4
 80137ee:	4413      	add	r3, r2
 80137f0:	3304      	adds	r3, #4
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80137f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d110      	bne.n	8013822 <readCanToStructs+0x2202>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8013800:	2208      	movs	r2, #8
 8013802:	2100      	movs	r1, #0
 8013804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013806:	f012 fd5f 	bl	80262c8 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801380a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801380e:	4a5d      	ldr	r2, [pc, #372]	; (8013984 <readCanToStructs+0x2364>)
 8013810:	f240 4116 	movw	r1, #1046	; 0x416
 8013814:	fb01 f303 	mul.w	r3, r1, r3
 8013818:	4413      	add	r3, r2
 801381a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801381e:	2200      	movs	r2, #0
 8013820:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8013822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013826:	4a57      	ldr	r2, [pc, #348]	; (8013984 <readCanToStructs+0x2364>)
 8013828:	f240 4116 	movw	r1, #1046	; 0x416
 801382c:	fb01 f303 	mul.w	r3, r1, r3
 8013830:	4413      	add	r3, r2
 8013832:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801383c:	429a      	cmp	r2, r3
 801383e:	d014      	beq.n	801386a <readCanToStructs+0x224a>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8013840:	4859      	ldr	r0, [pc, #356]	; (80139a8 <readCanToStructs+0x2388>)
 8013842:	f012 fec5 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8013846:	2208      	movs	r2, #8
 8013848:	2100      	movs	r1, #0
 801384a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801384c:	f012 fd3c 	bl	80262c8 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013854:	4a4b      	ldr	r2, [pc, #300]	; (8013984 <readCanToStructs+0x2364>)
 8013856:	f240 4116 	movw	r1, #1046	; 0x416
 801385a:	fb01 f303 	mul.w	r3, r1, r3
 801385e:	4413      	add	r3, r2
 8013860:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013864:	2200      	movs	r2, #0
 8013866:	701a      	strb	r2, [r3, #0]
					break;
 8013868:	e25b      	b.n	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 801386a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801386e:	4613      	mov	r3, r2
 8013870:	00db      	lsls	r3, r3, #3
 8013872:	1a9b      	subs	r3, r3, r2
 8013874:	461a      	mov	r2, r3
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	4413      	add	r3, r2
 801387a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801387c:	2301      	movs	r3, #1
 801387e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013882:	e016      	b.n	80138b2 <readCanToStructs+0x2292>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013884:	4b3d      	ldr	r3, [pc, #244]	; (801397c <readCanToStructs+0x235c>)
 8013886:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801388a:	885b      	ldrh	r3, [r3, #2]
 801388c:	461a      	mov	r2, r3
 801388e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013892:	493a      	ldr	r1, [pc, #232]	; (801397c <readCanToStructs+0x235c>)
 8013894:	0112      	lsls	r2, r2, #4
 8013896:	440a      	add	r2, r1
 8013898:	4413      	add	r3, r2
 801389a:	3304      	adds	r3, #4
 801389c:	781a      	ldrb	r2, [r3, #0]
 801389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80138a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a4:	3301      	adds	r3, #1
 80138a6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80138a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80138ac:	3301      	adds	r3, #1
 80138ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80138b2:	4b32      	ldr	r3, [pc, #200]	; (801397c <readCanToStructs+0x235c>)
 80138b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80138b8:	885b      	ldrh	r3, [r3, #2]
 80138ba:	4a30      	ldr	r2, [pc, #192]	; (801397c <readCanToStructs+0x235c>)
 80138bc:	011b      	lsls	r3, r3, #4
 80138be:	4413      	add	r3, r2
 80138c0:	330c      	adds	r3, #12
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d3db      	bcc.n	8013884 <readCanToStructs+0x2264>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 80138cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138d0:	4a2c      	ldr	r2, [pc, #176]	; (8013984 <readCanToStructs+0x2364>)
 80138d2:	f240 4116 	movw	r1, #1046	; 0x416
 80138d6:	fb01 f303 	mul.w	r3, r1, r3
 80138da:	4413      	add	r3, r2
 80138dc:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	461a      	mov	r2, r3
 80138e4:	4613      	mov	r3, r2
 80138e6:	00db      	lsls	r3, r3, #3
 80138e8:	1a9a      	subs	r2, r3, r2
 80138ea:	4b24      	ldr	r3, [pc, #144]	; (801397c <readCanToStructs+0x235c>)
 80138ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80138f0:	885b      	ldrh	r3, [r3, #2]
 80138f2:	4922      	ldr	r1, [pc, #136]	; (801397c <readCanToStructs+0x235c>)
 80138f4:	011b      	lsls	r3, r3, #4
 80138f6:	440b      	add	r3, r1
 80138f8:	330c      	adds	r3, #12
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	3b01      	subs	r3, #1
 80138fe:	4413      	add	r3, r2
 8013900:	2b07      	cmp	r3, #7
 8013902:	d917      	bls.n	8013934 <readCanToStructs+0x2314>
					printf("Received Fault Injection Data\n");
 8013904:	4829      	ldr	r0, [pc, #164]	; (80139ac <readCanToStructs+0x238c>)
 8013906:	f012 fe63 	bl	80265d0 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801390a:	4b25      	ldr	r3, [pc, #148]	; (80139a0 <readCanToStructs+0x2380>)
 801390c:	2201      	movs	r2, #1
 801390e:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013910:	f005 fdb8 	bl	8019484 <HAL_GetTick>
 8013914:	4603      	mov	r3, r0
 8013916:	4a22      	ldr	r2, [pc, #136]	; (80139a0 <readCanToStructs+0x2380>)
 8013918:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801391a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801391e:	4a19      	ldr	r2, [pc, #100]	; (8013984 <readCanToStructs+0x2364>)
 8013920:	f240 4116 	movw	r1, #1046	; 0x416
 8013924:	fb01 f303 	mul.w	r3, r1, r3
 8013928:	4413      	add	r3, r2
 801392a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801392e:	2200      	movs	r2, #0
 8013930:	701a      	strb	r2, [r3, #0]
				break;
 8013932:	e1f6      	b.n	8013d22 <readCanToStructs+0x2702>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8013934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013938:	4a12      	ldr	r2, [pc, #72]	; (8013984 <readCanToStructs+0x2364>)
 801393a:	f240 4116 	movw	r1, #1046	; 0x416
 801393e:	fb01 f303 	mul.w	r3, r1, r3
 8013942:	4413      	add	r3, r2
 8013944:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8013948:	2201      	movs	r2, #1
 801394a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 801394c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013950:	490c      	ldr	r1, [pc, #48]	; (8013984 <readCanToStructs+0x2364>)
 8013952:	f240 4216 	movw	r2, #1046	; 0x416
 8013956:	fb03 f202 	mul.w	r2, r3, r2
 801395a:	440a      	add	r2, r1
 801395c:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8013960:	7812      	ldrb	r2, [r2, #0]
 8013962:	3201      	adds	r2, #1
 8013964:	b2d0      	uxtb	r0, r2
 8013966:	4a07      	ldr	r2, [pc, #28]	; (8013984 <readCanToStructs+0x2364>)
 8013968:	f240 4116 	movw	r1, #1046	; 0x416
 801396c:	fb01 f303 	mul.w	r3, r1, r3
 8013970:	4413      	add	r3, r2
 8013972:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013976:	4602      	mov	r2, r0
 8013978:	701a      	strb	r2, [r3, #0]
				break;
 801397a:	e1d2      	b.n	8013d22 <readCanToStructs+0x2702>
 801397c:	200071b4 	.word	0x200071b4
 8013980:	2000b30c 	.word	0x2000b30c
 8013984:	20006988 	.word	0x20006988
 8013988:	0802b0ec 	.word	0x0802b0ec
 801398c:	20005204 	.word	0x20005204
 8013990:	2000b30e 	.word	0x2000b30e
 8013994:	20000bbb 	.word	0x20000bbb
 8013998:	0802b118 	.word	0x0802b118
 801399c:	20005000 	.word	0x20005000
 80139a0:	20004bdc 	.word	0x20004bdc
 80139a4:	20004bc8 	.word	0x20004bc8
 80139a8:	0802af74 	.word	0x0802af74
 80139ac:	0802af94 	.word	0x0802af94
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80139b0:	4bbe      	ldr	r3, [pc, #760]	; (8013cac <readCanToStructs+0x268c>)
 80139b2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80139b4:	4bbe      	ldr	r3, [pc, #760]	; (8013cb0 <readCanToStructs+0x2690>)
 80139b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139ba:	885b      	ldrh	r3, [r3, #2]
 80139bc:	4abc      	ldr	r2, [pc, #752]	; (8013cb0 <readCanToStructs+0x2690>)
 80139be:	011b      	lsls	r3, r3, #4
 80139c0:	4413      	add	r3, r2
 80139c2:	3304      	adds	r3, #4
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80139ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d110      	bne.n	80139f4 <readCanToStructs+0x23d4>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80139d2:	2202      	movs	r2, #2
 80139d4:	2100      	movs	r1, #0
 80139d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139d8:	f012 fc76 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80139dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139e0:	4ab4      	ldr	r2, [pc, #720]	; (8013cb4 <readCanToStructs+0x2694>)
 80139e2:	f240 4116 	movw	r1, #1046	; 0x416
 80139e6:	fb01 f303 	mul.w	r3, r1, r3
 80139ea:	4413      	add	r3, r2
 80139ec:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80139f0:	2200      	movs	r2, #0
 80139f2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 80139f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139f8:	4aae      	ldr	r2, [pc, #696]	; (8013cb4 <readCanToStructs+0x2694>)
 80139fa:	f240 4116 	movw	r1, #1046	; 0x416
 80139fe:	fb01 f303 	mul.w	r3, r1, r3
 8013a02:	4413      	add	r3, r2
 8013a04:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d014      	beq.n	8013a3c <readCanToStructs+0x241c>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8013a12:	48a9      	ldr	r0, [pc, #676]	; (8013cb8 <readCanToStructs+0x2698>)
 8013a14:	f012 fddc 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8013a18:	2202      	movs	r2, #2
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a1e:	f012 fc53 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a26:	4aa3      	ldr	r2, [pc, #652]	; (8013cb4 <readCanToStructs+0x2694>)
 8013a28:	f240 4116 	movw	r1, #1046	; 0x416
 8013a2c:	fb01 f303 	mul.w	r3, r1, r3
 8013a30:	4413      	add	r3, r2
 8013a32:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013a36:	2200      	movs	r2, #0
 8013a38:	701a      	strb	r2, [r3, #0]
					break;
 8013a3a:	e172      	b.n	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013a3c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013a40:	4613      	mov	r3, r2
 8013a42:	00db      	lsls	r3, r3, #3
 8013a44:	1a9b      	subs	r3, r3, r2
 8013a46:	461a      	mov	r2, r3
 8013a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4a:	4413      	add	r3, r2
 8013a4c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013a4e:	2301      	movs	r3, #1
 8013a50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013a54:	e016      	b.n	8013a84 <readCanToStructs+0x2464>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013a56:	4b96      	ldr	r3, [pc, #600]	; (8013cb0 <readCanToStructs+0x2690>)
 8013a58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a5c:	885b      	ldrh	r3, [r3, #2]
 8013a5e:	461a      	mov	r2, r3
 8013a60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a64:	4992      	ldr	r1, [pc, #584]	; (8013cb0 <readCanToStructs+0x2690>)
 8013a66:	0112      	lsls	r2, r2, #4
 8013a68:	440a      	add	r2, r1
 8013a6a:	4413      	add	r3, r2
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	781a      	ldrb	r2, [r3, #0]
 8013a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a72:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a76:	3301      	adds	r3, #1
 8013a78:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013a7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a7e:	3301      	adds	r3, #1
 8013a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013a84:	4b8a      	ldr	r3, [pc, #552]	; (8013cb0 <readCanToStructs+0x2690>)
 8013a86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a8a:	885b      	ldrh	r3, [r3, #2]
 8013a8c:	4a88      	ldr	r2, [pc, #544]	; (8013cb0 <readCanToStructs+0x2690>)
 8013a8e:	011b      	lsls	r3, r3, #4
 8013a90:	4413      	add	r3, r2
 8013a92:	330c      	adds	r3, #12
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d3db      	bcc.n	8013a56 <readCanToStructs+0x2436>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8013a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013aa2:	4a84      	ldr	r2, [pc, #528]	; (8013cb4 <readCanToStructs+0x2694>)
 8013aa4:	f240 4116 	movw	r1, #1046	; 0x416
 8013aa8:	fb01 f303 	mul.w	r3, r1, r3
 8013aac:	4413      	add	r3, r2
 8013aae:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013ab2:	781b      	ldrb	r3, [r3, #0]
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	4613      	mov	r3, r2
 8013ab8:	00db      	lsls	r3, r3, #3
 8013aba:	1a9a      	subs	r2, r3, r2
 8013abc:	4b7c      	ldr	r3, [pc, #496]	; (8013cb0 <readCanToStructs+0x2690>)
 8013abe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013ac2:	885b      	ldrh	r3, [r3, #2]
 8013ac4:	497a      	ldr	r1, [pc, #488]	; (8013cb0 <readCanToStructs+0x2690>)
 8013ac6:	011b      	lsls	r3, r3, #4
 8013ac8:	440b      	add	r3, r1
 8013aca:	330c      	adds	r3, #12
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	3b01      	subs	r3, #1
 8013ad0:	4413      	add	r3, r2
 8013ad2:	2b01      	cmp	r3, #1
 8013ad4:	d919      	bls.n	8013b0a <readCanToStructs+0x24ea>
					if(Debug_flag == 1)
 8013ad6:	4b79      	ldr	r3, [pc, #484]	; (8013cbc <readCanToStructs+0x269c>)
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d105      	bne.n	8013aea <readCanToStructs+0x24ca>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8013ade:	4b73      	ldr	r3, [pc, #460]	; (8013cac <readCanToStructs+0x268c>)
 8013ae0:	881b      	ldrh	r3, [r3, #0]
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	4876      	ldr	r0, [pc, #472]	; (8013cc0 <readCanToStructs+0x26a0>)
 8013ae6:	f012 fcd7 	bl	8026498 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8013aea:	4b76      	ldr	r3, [pc, #472]	; (8013cc4 <readCanToStructs+0x26a4>)
 8013aec:	2201      	movs	r2, #1
 8013aee:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013af4:	4a6f      	ldr	r2, [pc, #444]	; (8013cb4 <readCanToStructs+0x2694>)
 8013af6:	f240 4116 	movw	r1, #1046	; 0x416
 8013afa:	fb01 f303 	mul.w	r3, r1, r3
 8013afe:	4413      	add	r3, r2
 8013b00:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013b04:	2200      	movs	r2, #0
 8013b06:	701a      	strb	r2, [r3, #0]
				break;
 8013b08:	e10b      	b.n	8013d22 <readCanToStructs+0x2702>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8013b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b0e:	4a69      	ldr	r2, [pc, #420]	; (8013cb4 <readCanToStructs+0x2694>)
 8013b10:	f240 4116 	movw	r1, #1046	; 0x416
 8013b14:	fb01 f303 	mul.w	r3, r1, r3
 8013b18:	4413      	add	r3, r2
 8013b1a:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8013b1e:	2201      	movs	r2, #1
 8013b20:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8013b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b26:	4963      	ldr	r1, [pc, #396]	; (8013cb4 <readCanToStructs+0x2694>)
 8013b28:	f240 4216 	movw	r2, #1046	; 0x416
 8013b2c:	fb03 f202 	mul.w	r2, r3, r2
 8013b30:	440a      	add	r2, r1
 8013b32:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8013b36:	7812      	ldrb	r2, [r2, #0]
 8013b38:	3201      	adds	r2, #1
 8013b3a:	b2d0      	uxtb	r0, r2
 8013b3c:	4a5d      	ldr	r2, [pc, #372]	; (8013cb4 <readCanToStructs+0x2694>)
 8013b3e:	f240 4116 	movw	r1, #1046	; 0x416
 8013b42:	fb01 f303 	mul.w	r3, r1, r3
 8013b46:	4413      	add	r3, r2
 8013b48:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	701a      	strb	r2, [r3, #0]
				break;
 8013b50:	e0e7      	b.n	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8013b52:	4b56      	ldr	r3, [pc, #344]	; (8013cac <readCanToStructs+0x268c>)
 8013b54:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013b56:	4b56      	ldr	r3, [pc, #344]	; (8013cb0 <readCanToStructs+0x2690>)
 8013b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b5c:	885b      	ldrh	r3, [r3, #2]
 8013b5e:	4a54      	ldr	r2, [pc, #336]	; (8013cb0 <readCanToStructs+0x2690>)
 8013b60:	011b      	lsls	r3, r3, #4
 8013b62:	4413      	add	r3, r2
 8013b64:	3304      	adds	r3, #4
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013b6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d110      	bne.n	8013b96 <readCanToStructs+0x2576>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8013b74:	2202      	movs	r2, #2
 8013b76:	2100      	movs	r1, #0
 8013b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b7a:	f012 fba5 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8013b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b82:	4a4c      	ldr	r2, [pc, #304]	; (8013cb4 <readCanToStructs+0x2694>)
 8013b84:	f240 4116 	movw	r1, #1046	; 0x416
 8013b88:	fb01 f303 	mul.w	r3, r1, r3
 8013b8c:	4413      	add	r3, r2
 8013b8e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013b92:	2200      	movs	r2, #0
 8013b94:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8013b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b9a:	4a46      	ldr	r2, [pc, #280]	; (8013cb4 <readCanToStructs+0x2694>)
 8013b9c:	f240 4116 	movw	r1, #1046	; 0x416
 8013ba0:	fb01 f303 	mul.w	r3, r1, r3
 8013ba4:	4413      	add	r3, r2
 8013ba6:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	d014      	beq.n	8013bde <readCanToStructs+0x25be>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8013bb4:	4844      	ldr	r0, [pc, #272]	; (8013cc8 <readCanToStructs+0x26a8>)
 8013bb6:	f012 fd0b 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8013bba:	2202      	movs	r2, #2
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bc0:	f012 fb82 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8013bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bc8:	4a3a      	ldr	r2, [pc, #232]	; (8013cb4 <readCanToStructs+0x2694>)
 8013bca:	f240 4116 	movw	r1, #1046	; 0x416
 8013bce:	fb01 f303 	mul.w	r3, r1, r3
 8013bd2:	4413      	add	r3, r2
 8013bd4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013bd8:	2200      	movs	r2, #0
 8013bda:	701a      	strb	r2, [r3, #0]
					break;
 8013bdc:	e0a1      	b.n	8013d22 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013bde:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013be2:	4613      	mov	r3, r2
 8013be4:	00db      	lsls	r3, r3, #3
 8013be6:	1a9b      	subs	r3, r3, r2
 8013be8:	461a      	mov	r2, r3
 8013bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bec:	4413      	add	r3, r2
 8013bee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013bf6:	e016      	b.n	8013c26 <readCanToStructs+0x2606>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013bf8:	4b2d      	ldr	r3, [pc, #180]	; (8013cb0 <readCanToStructs+0x2690>)
 8013bfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013bfe:	885b      	ldrh	r3, [r3, #2]
 8013c00:	461a      	mov	r2, r3
 8013c02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c06:	492a      	ldr	r1, [pc, #168]	; (8013cb0 <readCanToStructs+0x2690>)
 8013c08:	0112      	lsls	r2, r2, #4
 8013c0a:	440a      	add	r2, r1
 8013c0c:	4413      	add	r3, r2
 8013c0e:	3304      	adds	r3, #4
 8013c10:	781a      	ldrb	r2, [r3, #0]
 8013c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c14:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c18:	3301      	adds	r3, #1
 8013c1a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013c1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c20:	3301      	adds	r3, #1
 8013c22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013c26:	4b22      	ldr	r3, [pc, #136]	; (8013cb0 <readCanToStructs+0x2690>)
 8013c28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c2c:	885b      	ldrh	r3, [r3, #2]
 8013c2e:	4a20      	ldr	r2, [pc, #128]	; (8013cb0 <readCanToStructs+0x2690>)
 8013c30:	011b      	lsls	r3, r3, #4
 8013c32:	4413      	add	r3, r2
 8013c34:	330c      	adds	r3, #12
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d3db      	bcc.n	8013bf8 <readCanToStructs+0x25d8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8013c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c44:	4a1b      	ldr	r2, [pc, #108]	; (8013cb4 <readCanToStructs+0x2694>)
 8013c46:	f240 4116 	movw	r1, #1046	; 0x416
 8013c4a:	fb01 f303 	mul.w	r3, r1, r3
 8013c4e:	4413      	add	r3, r2
 8013c50:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013c54:	781b      	ldrb	r3, [r3, #0]
 8013c56:	461a      	mov	r2, r3
 8013c58:	4613      	mov	r3, r2
 8013c5a:	00db      	lsls	r3, r3, #3
 8013c5c:	1a9a      	subs	r2, r3, r2
 8013c5e:	4b14      	ldr	r3, [pc, #80]	; (8013cb0 <readCanToStructs+0x2690>)
 8013c60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c64:	885b      	ldrh	r3, [r3, #2]
 8013c66:	4912      	ldr	r1, [pc, #72]	; (8013cb0 <readCanToStructs+0x2690>)
 8013c68:	011b      	lsls	r3, r3, #4
 8013c6a:	440b      	add	r3, r1
 8013c6c:	330c      	adds	r3, #12
 8013c6e:	781b      	ldrb	r3, [r3, #0]
 8013c70:	3b01      	subs	r3, #1
 8013c72:	4413      	add	r3, r2
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d92b      	bls.n	8013cd0 <readCanToStructs+0x26b0>
					if(Debug_flag == 1)
 8013c78:	4b10      	ldr	r3, [pc, #64]	; (8013cbc <readCanToStructs+0x269c>)
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d105      	bne.n	8013c8c <readCanToStructs+0x266c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8013c80:	4b0a      	ldr	r3, [pc, #40]	; (8013cac <readCanToStructs+0x268c>)
 8013c82:	881b      	ldrh	r3, [r3, #0]
 8013c84:	4619      	mov	r1, r3
 8013c86:	4811      	ldr	r0, [pc, #68]	; (8013ccc <readCanToStructs+0x26ac>)
 8013c88:	f012 fc06 	bl	8026498 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8013c8c:	4b0d      	ldr	r3, [pc, #52]	; (8013cc4 <readCanToStructs+0x26a4>)
 8013c8e:	2201      	movs	r2, #1
 8013c90:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8013c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c96:	4a07      	ldr	r2, [pc, #28]	; (8013cb4 <readCanToStructs+0x2694>)
 8013c98:	f240 4116 	movw	r1, #1046	; 0x416
 8013c9c:	fb01 f303 	mul.w	r3, r1, r3
 8013ca0:	4413      	add	r3, r2
 8013ca2:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	701a      	strb	r2, [r3, #0]
				break;
 8013caa:	e03a      	b.n	8013d22 <readCanToStructs+0x2702>
 8013cac:	20000bb8 	.word	0x20000bb8
 8013cb0:	200071b4 	.word	0x200071b4
 8013cb4:	20006988 	.word	0x20006988
 8013cb8:	0802b018 	.word	0x0802b018
 8013cbc:	20000bbb 	.word	0x20000bbb
 8013cc0:	0802b040 	.word	0x0802b040
 8013cc4:	2000030b 	.word	0x2000030b
 8013cc8:	0802b054 	.word	0x0802b054
 8013ccc:	0802b07c 	.word	0x0802b07c
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8013cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cd4:	4ab4      	ldr	r2, [pc, #720]	; (8013fa8 <readCanToStructs+0x2988>)
 8013cd6:	f240 4116 	movw	r1, #1046	; 0x416
 8013cda:	fb01 f303 	mul.w	r3, r1, r3
 8013cde:	4413      	add	r3, r2
 8013ce0:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8013ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cec:	49ae      	ldr	r1, [pc, #696]	; (8013fa8 <readCanToStructs+0x2988>)
 8013cee:	f240 4216 	movw	r2, #1046	; 0x416
 8013cf2:	fb03 f202 	mul.w	r2, r3, r2
 8013cf6:	440a      	add	r2, r1
 8013cf8:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8013cfc:	7812      	ldrb	r2, [r2, #0]
 8013cfe:	3201      	adds	r2, #1
 8013d00:	b2d0      	uxtb	r0, r2
 8013d02:	4aa9      	ldr	r2, [pc, #676]	; (8013fa8 <readCanToStructs+0x2988>)
 8013d04:	f240 4116 	movw	r1, #1046	; 0x416
 8013d08:	fb01 f303 	mul.w	r3, r1, r3
 8013d0c:	4413      	add	r3, r2
 8013d0e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013d12:	4602      	mov	r2, r0
 8013d14:	701a      	strb	r2, [r3, #0]
				break;
 8013d16:	e004      	b.n	8013d22 <readCanToStructs+0x2702>
				break;
 8013d18:	bf00      	nop
 8013d1a:	e002      	b.n	8013d22 <readCanToStructs+0x2702>
				break;
 8013d1c:	bf00      	nop
 8013d1e:	e000      	b.n	8013d22 <readCanToStructs+0x2702>
				break;
 8013d20:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8013d22:	4ba2      	ldr	r3, [pc, #648]	; (8013fac <readCanToStructs+0x298c>)
 8013d24:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d28:	885b      	ldrh	r3, [r3, #2]
 8013d2a:	011b      	lsls	r3, r3, #4
 8013d2c:	4a9f      	ldr	r2, [pc, #636]	; (8013fac <readCanToStructs+0x298c>)
 8013d2e:	4413      	add	r3, r2
 8013d30:	2210      	movs	r2, #16
 8013d32:	2100      	movs	r1, #0
 8013d34:	4618      	mov	r0, r3
 8013d36:	f012 fac7 	bl	80262c8 <memset>
			canRead.Out++;
 8013d3a:	4b9c      	ldr	r3, [pc, #624]	; (8013fac <readCanToStructs+0x298c>)
 8013d3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d40:	885b      	ldrh	r3, [r3, #2]
 8013d42:	3301      	adds	r3, #1
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	4b99      	ldr	r3, [pc, #612]	; (8013fac <readCanToStructs+0x298c>)
 8013d48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d4c:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8013d4e:	4b97      	ldr	r3, [pc, #604]	; (8013fac <readCanToStructs+0x298c>)
 8013d50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d54:	885b      	ldrh	r3, [r3, #2]
 8013d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d5a:	d104      	bne.n	8013d66 <readCanToStructs+0x2746>
			{
				canRead.Out = 0;
 8013d5c:	4b93      	ldr	r3, [pc, #588]	; (8013fac <readCanToStructs+0x298c>)
 8013d5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d62:	2200      	movs	r2, #0
 8013d64:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8013d66:	f7fd fc05 	bl	8011574 <canDataReady>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	f47e af7c 	bne.w	8012c6a <readCanToStructs+0x164a>
			}

		}
		/* __________ SIEMENS _________ */
	}
	break;
 8013d72:	f001 bd43 	b.w	80157fc <readCanToStructs+0x41dc>
	case MEDHA:
	{
		/* __________ MEDHA _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8013d76:	4b8d      	ldr	r3, [pc, #564]	; (8013fac <readCanToStructs+0x298c>)
 8013d78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d7c:	885b      	ldrh	r3, [r3, #2]
 8013d7e:	4a8b      	ldr	r2, [pc, #556]	; (8013fac <readCanToStructs+0x298c>)
 8013d80:	011b      	lsls	r3, r3, #4
 8013d82:	4413      	add	r3, r2
 8013d84:	330f      	adds	r3, #15
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	3b01      	subs	r3, #1
 8013d8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8013d8e:	4b87      	ldr	r3, [pc, #540]	; (8013fac <readCanToStructs+0x298c>)
 8013d90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d94:	885b      	ldrh	r3, [r3, #2]
 8013d96:	4a85      	ldr	r2, [pc, #532]	; (8013fac <readCanToStructs+0x298c>)
 8013d98:	011b      	lsls	r3, r3, #4
 8013d9a:	4413      	add	r3, r2
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f240 220a 	movw	r2, #522	; 0x20a
 8013da2:	4293      	cmp	r3, r2
 8013da4:	f201 8023 	bhi.w	8014dee <readCanToStructs+0x37ce>
 8013da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013dac:	d80a      	bhi.n	8013dc4 <readCanToStructs+0x27a4>
 8013dae:	f240 1203 	movw	r2, #259	; 0x103
 8013db2:	4293      	cmp	r3, r2
 8013db4:	d022      	beq.n	8013dfc <readCanToStructs+0x27dc>
 8013db6:	f240 1209 	movw	r2, #265	; 0x109
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	f000 8102 	beq.w	8013fc4 <readCanToStructs+0x29a4>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8013dc0:	f001 b815 	b.w	8014dee <readCanToStructs+0x37ce>
 8013dc4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8013dc8:	2b09      	cmp	r3, #9
 8013dca:	f201 8010 	bhi.w	8014dee <readCanToStructs+0x37ce>
 8013dce:	a201      	add	r2, pc, #4	; (adr r2, 8013dd4 <readCanToStructs+0x27b4>)
 8013dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dd4:	08014171 	.word	0x08014171
 8013dd8:	08014375 	.word	0x08014375
 8013ddc:	08014def 	.word	0x08014def
 8013de0:	08014def 	.word	0x08014def
 8013de4:	0801457d 	.word	0x0801457d
 8013de8:	08014def 	.word	0x08014def
 8013dec:	0801470f 	.word	0x0801470f
 8013df0:	080148dd 	.word	0x080148dd
 8013df4:	08014a83 	.word	0x08014a83
 8013df8:	08014c4d 	.word	0x08014c4d
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8013dfc:	4b6c      	ldr	r3, [pc, #432]	; (8013fb0 <readCanToStructs+0x2990>)
 8013dfe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013e00:	4b6a      	ldr	r3, [pc, #424]	; (8013fac <readCanToStructs+0x298c>)
 8013e02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013e06:	885b      	ldrh	r3, [r3, #2]
 8013e08:	4a68      	ldr	r2, [pc, #416]	; (8013fac <readCanToStructs+0x298c>)
 8013e0a:	011b      	lsls	r3, r3, #4
 8013e0c:	4413      	add	r3, r2
 8013e0e:	3304      	adds	r3, #4
 8013e10:	781b      	ldrb	r3, [r3, #0]
 8013e12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013e16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d110      	bne.n	8013e40 <readCanToStructs+0x2820>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013e1e:	2206      	movs	r2, #6
 8013e20:	2100      	movs	r1, #0
 8013e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e24:	f012 fa50 	bl	80262c8 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e2c:	4a5e      	ldr	r2, [pc, #376]	; (8013fa8 <readCanToStructs+0x2988>)
 8013e2e:	f240 4116 	movw	r1, #1046	; 0x416
 8013e32:	fb01 f303 	mul.w	r3, r1, r3
 8013e36:	4413      	add	r3, r2
 8013e38:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8013e40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e44:	4a58      	ldr	r2, [pc, #352]	; (8013fa8 <readCanToStructs+0x2988>)
 8013e46:	f240 4116 	movw	r1, #1046	; 0x416
 8013e4a:	fb01 f303 	mul.w	r3, r1, r3
 8013e4e:	4413      	add	r3, r2
 8013e50:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d015      	beq.n	8013e8a <readCanToStructs+0x286a>
					printf("GPS Packet Seq no MisMatch\n");
 8013e5e:	4855      	ldr	r0, [pc, #340]	; (8013fb4 <readCanToStructs+0x2994>)
 8013e60:	f012 fbb6 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013e64:	2206      	movs	r2, #6
 8013e66:	2100      	movs	r1, #0
 8013e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e6a:	f012 fa2d 	bl	80262c8 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e72:	4a4d      	ldr	r2, [pc, #308]	; (8013fa8 <readCanToStructs+0x2988>)
 8013e74:	f240 4116 	movw	r1, #1046	; 0x416
 8013e78:	fb01 f303 	mul.w	r3, r1, r3
 8013e7c:	4413      	add	r3, r2
 8013e7e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013e82:	2200      	movs	r2, #0
 8013e84:	701a      	strb	r2, [r3, #0]
					break;
 8013e86:	f000 bfb3 	b.w	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013e8a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013e8e:	4613      	mov	r3, r2
 8013e90:	00db      	lsls	r3, r3, #3
 8013e92:	1a9b      	subs	r3, r3, r2
 8013e94:	461a      	mov	r2, r3
 8013e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e98:	4413      	add	r3, r2
 8013e9a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013ea2:	e016      	b.n	8013ed2 <readCanToStructs+0x28b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013ea4:	4b41      	ldr	r3, [pc, #260]	; (8013fac <readCanToStructs+0x298c>)
 8013ea6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013eaa:	885b      	ldrh	r3, [r3, #2]
 8013eac:	461a      	mov	r2, r3
 8013eae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013eb2:	493e      	ldr	r1, [pc, #248]	; (8013fac <readCanToStructs+0x298c>)
 8013eb4:	0112      	lsls	r2, r2, #4
 8013eb6:	440a      	add	r2, r1
 8013eb8:	4413      	add	r3, r2
 8013eba:	3304      	adds	r3, #4
 8013ebc:	781a      	ldrb	r2, [r3, #0]
 8013ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ec4:	3301      	adds	r3, #1
 8013ec6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013ec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ecc:	3301      	adds	r3, #1
 8013ece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013ed2:	4b36      	ldr	r3, [pc, #216]	; (8013fac <readCanToStructs+0x298c>)
 8013ed4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013ed8:	885b      	ldrh	r3, [r3, #2]
 8013eda:	4a34      	ldr	r2, [pc, #208]	; (8013fac <readCanToStructs+0x298c>)
 8013edc:	011b      	lsls	r3, r3, #4
 8013ede:	4413      	add	r3, r2
 8013ee0:	330c      	adds	r3, #12
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d3db      	bcc.n	8013ea4 <readCanToStructs+0x2884>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8013eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ef0:	4a2d      	ldr	r2, [pc, #180]	; (8013fa8 <readCanToStructs+0x2988>)
 8013ef2:	f240 4116 	movw	r1, #1046	; 0x416
 8013ef6:	fb01 f303 	mul.w	r3, r1, r3
 8013efa:	4413      	add	r3, r2
 8013efc:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013f00:	781b      	ldrb	r3, [r3, #0]
 8013f02:	461a      	mov	r2, r3
 8013f04:	4613      	mov	r3, r2
 8013f06:	00db      	lsls	r3, r3, #3
 8013f08:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8013f0a:	4b28      	ldr	r3, [pc, #160]	; (8013fac <readCanToStructs+0x298c>)
 8013f0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f10:	885b      	ldrh	r3, [r3, #2]
 8013f12:	4926      	ldr	r1, [pc, #152]	; (8013fac <readCanToStructs+0x298c>)
 8013f14:	011b      	lsls	r3, r3, #4
 8013f16:	440b      	add	r3, r1
 8013f18:	330c      	adds	r3, #12
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	3b01      	subs	r3, #1
 8013f1e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8013f20:	2b05      	cmp	r3, #5
 8013f22:	d91c      	bls.n	8013f5e <readCanToStructs+0x293e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8013f24:	4b24      	ldr	r3, [pc, #144]	; (8013fb8 <readCanToStructs+0x2998>)
 8013f26:	4a22      	ldr	r2, [pc, #136]	; (8013fb0 <readCanToStructs+0x2990>)
 8013f28:	6811      	ldr	r1, [r2, #0]
 8013f2a:	6019      	str	r1, [r3, #0]
 8013f2c:	8892      	ldrh	r2, [r2, #4]
 8013f2e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8013f30:	4b22      	ldr	r3, [pc, #136]	; (8013fbc <readCanToStructs+0x299c>)
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	2b01      	cmp	r3, #1
 8013f36:	d102      	bne.n	8013f3e <readCanToStructs+0x291e>
						printf("GPS_PACKET_RECEIVED\n");
 8013f38:	4821      	ldr	r0, [pc, #132]	; (8013fc0 <readCanToStructs+0x29a0>)
 8013f3a:	f012 fb49 	bl	80265d0 <puts>
					Write_RTC();
 8013f3e:	f7f8 fb2d 	bl	800c59c <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f46:	4a18      	ldr	r2, [pc, #96]	; (8013fa8 <readCanToStructs+0x2988>)
 8013f48:	f240 4116 	movw	r1, #1046	; 0x416
 8013f4c:	fb01 f303 	mul.w	r3, r1, r3
 8013f50:	4413      	add	r3, r2
 8013f52:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013f56:	2200      	movs	r2, #0
 8013f58:	701a      	strb	r2, [r3, #0]
				break;
 8013f5a:	f000 bf49 	b.w	8014df0 <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8013f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f62:	4a11      	ldr	r2, [pc, #68]	; (8013fa8 <readCanToStructs+0x2988>)
 8013f64:	f240 4116 	movw	r1, #1046	; 0x416
 8013f68:	fb01 f303 	mul.w	r3, r1, r3
 8013f6c:	4413      	add	r3, r2
 8013f6e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8013f72:	2201      	movs	r2, #1
 8013f74:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8013f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f7a:	490b      	ldr	r1, [pc, #44]	; (8013fa8 <readCanToStructs+0x2988>)
 8013f7c:	f240 4216 	movw	r2, #1046	; 0x416
 8013f80:	fb03 f202 	mul.w	r2, r3, r2
 8013f84:	440a      	add	r2, r1
 8013f86:	f202 2207 	addw	r2, r2, #519	; 0x207
 8013f8a:	7812      	ldrb	r2, [r2, #0]
 8013f8c:	3201      	adds	r2, #1
 8013f8e:	b2d0      	uxtb	r0, r2
 8013f90:	4a05      	ldr	r2, [pc, #20]	; (8013fa8 <readCanToStructs+0x2988>)
 8013f92:	f240 4116 	movw	r1, #1046	; 0x416
 8013f96:	fb01 f303 	mul.w	r3, r1, r3
 8013f9a:	4413      	add	r3, r2
 8013f9c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013fa0:	4602      	mov	r2, r0
 8013fa2:	701a      	strb	r2, [r3, #0]
				break;
 8013fa4:	f000 bf24 	b.w	8014df0 <readCanToStructs+0x37d0>
 8013fa8:	20006988 	.word	0x20006988
 8013fac:	200071b4 	.word	0x200071b4
 8013fb0:	20003f30 	.word	0x20003f30
 8013fb4:	0802ae40 	.word	0x0802ae40
 8013fb8:	20003f28 	.word	0x20003f28
 8013fbc:	20000bbb 	.word	0x20000bbb
 8013fc0:	0802ae5c 	.word	0x0802ae5c
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8013fc4:	4b9d      	ldr	r3, [pc, #628]	; (801423c <readCanToStructs+0x2c1c>)
 8013fc6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013fc8:	4b9d      	ldr	r3, [pc, #628]	; (8014240 <readCanToStructs+0x2c20>)
 8013fca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013fce:	885b      	ldrh	r3, [r3, #2]
 8013fd0:	4a9b      	ldr	r2, [pc, #620]	; (8014240 <readCanToStructs+0x2c20>)
 8013fd2:	011b      	lsls	r3, r3, #4
 8013fd4:	4413      	add	r3, r2
 8013fd6:	3304      	adds	r3, #4
 8013fd8:	781b      	ldrb	r3, [r3, #0]
 8013fda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013fde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d110      	bne.n	8014008 <readCanToStructs+0x29e8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013fe6:	2206      	movs	r2, #6
 8013fe8:	2100      	movs	r1, #0
 8013fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fec:	f012 f96c 	bl	80262c8 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8013ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ff4:	4a93      	ldr	r2, [pc, #588]	; (8014244 <readCanToStructs+0x2c24>)
 8013ff6:	f240 4116 	movw	r1, #1046	; 0x416
 8013ffa:	fb01 f303 	mul.w	r3, r1, r3
 8013ffe:	4413      	add	r3, r2
 8014000:	f203 2313 	addw	r3, r3, #531	; 0x213
 8014004:	2200      	movs	r2, #0
 8014006:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8014008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801400c:	4a8d      	ldr	r2, [pc, #564]	; (8014244 <readCanToStructs+0x2c24>)
 801400e:	f240 4116 	movw	r1, #1046	; 0x416
 8014012:	fb01 f303 	mul.w	r3, r1, r3
 8014016:	4413      	add	r3, r2
 8014018:	f203 2313 	addw	r3, r3, #531	; 0x213
 801401c:	781b      	ldrb	r3, [r3, #0]
 801401e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014022:	429a      	cmp	r2, r3
 8014024:	d015      	beq.n	8014052 <readCanToStructs+0x2a32>
					printf("GPS2 Packet Seq no MisMatch\n");
 8014026:	4888      	ldr	r0, [pc, #544]	; (8014248 <readCanToStructs+0x2c28>)
 8014028:	f012 fad2 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801402c:	2206      	movs	r2, #6
 801402e:	2100      	movs	r1, #0
 8014030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014032:	f012 f949 	bl	80262c8 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8014036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801403a:	4a82      	ldr	r2, [pc, #520]	; (8014244 <readCanToStructs+0x2c24>)
 801403c:	f240 4116 	movw	r1, #1046	; 0x416
 8014040:	fb01 f303 	mul.w	r3, r1, r3
 8014044:	4413      	add	r3, r2
 8014046:	f203 2313 	addw	r3, r3, #531	; 0x213
 801404a:	2200      	movs	r2, #0
 801404c:	701a      	strb	r2, [r3, #0]
					break;
 801404e:	f000 becf 	b.w	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014052:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014056:	4613      	mov	r3, r2
 8014058:	00db      	lsls	r3, r3, #3
 801405a:	1a9b      	subs	r3, r3, r2
 801405c:	461a      	mov	r2, r3
 801405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014060:	4413      	add	r3, r2
 8014062:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014064:	2301      	movs	r3, #1
 8014066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801406a:	e016      	b.n	801409a <readCanToStructs+0x2a7a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801406c:	4b74      	ldr	r3, [pc, #464]	; (8014240 <readCanToStructs+0x2c20>)
 801406e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014072:	885b      	ldrh	r3, [r3, #2]
 8014074:	461a      	mov	r2, r3
 8014076:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801407a:	4971      	ldr	r1, [pc, #452]	; (8014240 <readCanToStructs+0x2c20>)
 801407c:	0112      	lsls	r2, r2, #4
 801407e:	440a      	add	r2, r1
 8014080:	4413      	add	r3, r2
 8014082:	3304      	adds	r3, #4
 8014084:	781a      	ldrb	r2, [r3, #0]
 8014086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014088:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408c:	3301      	adds	r3, #1
 801408e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014094:	3301      	adds	r3, #1
 8014096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801409a:	4b69      	ldr	r3, [pc, #420]	; (8014240 <readCanToStructs+0x2c20>)
 801409c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80140a0:	885b      	ldrh	r3, [r3, #2]
 80140a2:	4a67      	ldr	r2, [pc, #412]	; (8014240 <readCanToStructs+0x2c20>)
 80140a4:	011b      	lsls	r3, r3, #4
 80140a6:	4413      	add	r3, r2
 80140a8:	330c      	adds	r3, #12
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d3db      	bcc.n	801406c <readCanToStructs+0x2a4c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80140b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140b8:	4a62      	ldr	r2, [pc, #392]	; (8014244 <readCanToStructs+0x2c24>)
 80140ba:	f240 4116 	movw	r1, #1046	; 0x416
 80140be:	fb01 f303 	mul.w	r3, r1, r3
 80140c2:	4413      	add	r3, r2
 80140c4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80140c8:	781b      	ldrb	r3, [r3, #0]
 80140ca:	461a      	mov	r2, r3
 80140cc:	4613      	mov	r3, r2
 80140ce:	00db      	lsls	r3, r3, #3
 80140d0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80140d2:	4b5b      	ldr	r3, [pc, #364]	; (8014240 <readCanToStructs+0x2c20>)
 80140d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80140d8:	885b      	ldrh	r3, [r3, #2]
 80140da:	4959      	ldr	r1, [pc, #356]	; (8014240 <readCanToStructs+0x2c20>)
 80140dc:	011b      	lsls	r3, r3, #4
 80140de:	440b      	add	r3, r1
 80140e0:	330c      	adds	r3, #12
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	3b01      	subs	r3, #1
 80140e6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80140e8:	2b05      	cmp	r3, #5
 80140ea:	d91c      	bls.n	8014126 <readCanToStructs+0x2b06>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80140ec:	4b57      	ldr	r3, [pc, #348]	; (801424c <readCanToStructs+0x2c2c>)
 80140ee:	4a53      	ldr	r2, [pc, #332]	; (801423c <readCanToStructs+0x2c1c>)
 80140f0:	6811      	ldr	r1, [r2, #0]
 80140f2:	6019      	str	r1, [r3, #0]
 80140f4:	8892      	ldrh	r2, [r2, #4]
 80140f6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80140f8:	4b55      	ldr	r3, [pc, #340]	; (8014250 <readCanToStructs+0x2c30>)
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d102      	bne.n	8014106 <readCanToStructs+0x2ae6>
						printf("GPS2_PACKET_RECEIVED\n");
 8014100:	4854      	ldr	r0, [pc, #336]	; (8014254 <readCanToStructs+0x2c34>)
 8014102:	f012 fa65 	bl	80265d0 <puts>
					Write_RTC();
 8014106:	f7f8 fa49 	bl	800c59c <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801410a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801410e:	4a4d      	ldr	r2, [pc, #308]	; (8014244 <readCanToStructs+0x2c24>)
 8014110:	f240 4116 	movw	r1, #1046	; 0x416
 8014114:	fb01 f303 	mul.w	r3, r1, r3
 8014118:	4413      	add	r3, r2
 801411a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801411e:	2200      	movs	r2, #0
 8014120:	701a      	strb	r2, [r3, #0]
				break;
 8014122:	f000 be65 	b.w	8014df0 <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8014126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801412a:	4a46      	ldr	r2, [pc, #280]	; (8014244 <readCanToStructs+0x2c24>)
 801412c:	f240 4116 	movw	r1, #1046	; 0x416
 8014130:	fb01 f303 	mul.w	r3, r1, r3
 8014134:	4413      	add	r3, r2
 8014136:	f203 2312 	addw	r3, r3, #530	; 0x212
 801413a:	2201      	movs	r2, #1
 801413c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801413e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014142:	4940      	ldr	r1, [pc, #256]	; (8014244 <readCanToStructs+0x2c24>)
 8014144:	f240 4216 	movw	r2, #1046	; 0x416
 8014148:	fb03 f202 	mul.w	r2, r3, r2
 801414c:	440a      	add	r2, r1
 801414e:	f202 2213 	addw	r2, r2, #531	; 0x213
 8014152:	7812      	ldrb	r2, [r2, #0]
 8014154:	3201      	adds	r2, #1
 8014156:	b2d0      	uxtb	r0, r2
 8014158:	4a3a      	ldr	r2, [pc, #232]	; (8014244 <readCanToStructs+0x2c24>)
 801415a:	f240 4116 	movw	r1, #1046	; 0x416
 801415e:	fb01 f303 	mul.w	r3, r1, r3
 8014162:	4413      	add	r3, r2
 8014164:	f203 2313 	addw	r3, r3, #531	; 0x213
 8014168:	4602      	mov	r2, r0
 801416a:	701a      	strb	r2, [r3, #0]
				break;
 801416c:	f000 be40 	b.w	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8014170:	4b39      	ldr	r3, [pc, #228]	; (8014258 <readCanToStructs+0x2c38>)
 8014172:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014174:	4b32      	ldr	r3, [pc, #200]	; (8014240 <readCanToStructs+0x2c20>)
 8014176:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801417a:	885b      	ldrh	r3, [r3, #2]
 801417c:	4a30      	ldr	r2, [pc, #192]	; (8014240 <readCanToStructs+0x2c20>)
 801417e:	011b      	lsls	r3, r3, #4
 8014180:	4413      	add	r3, r2
 8014182:	3304      	adds	r3, #4
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801418a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801418e:	2b00      	cmp	r3, #0
 8014190:	d110      	bne.n	80141b4 <readCanToStructs+0x2b94>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014192:	2208      	movs	r2, #8
 8014194:	2100      	movs	r1, #0
 8014196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014198:	f012 f896 	bl	80262c8 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801419c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141a0:	4a28      	ldr	r2, [pc, #160]	; (8014244 <readCanToStructs+0x2c24>)
 80141a2:	f240 4116 	movw	r1, #1046	; 0x416
 80141a6:	fb01 f303 	mul.w	r3, r1, r3
 80141aa:	4413      	add	r3, r2
 80141ac:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80141b0:	2200      	movs	r2, #0
 80141b2:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80141b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141b8:	4a22      	ldr	r2, [pc, #136]	; (8014244 <readCanToStructs+0x2c24>)
 80141ba:	f240 4116 	movw	r1, #1046	; 0x416
 80141be:	fb01 f303 	mul.w	r3, r1, r3
 80141c2:	4413      	add	r3, r2
 80141c4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d026      	beq.n	8014220 <readCanToStructs+0x2c00>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 80141d2:	4822      	ldr	r0, [pc, #136]	; (801425c <readCanToStructs+0x2c3c>)
 80141d4:	f012 f9fc 	bl	80265d0 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 80141d8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80141dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141e0:	4a18      	ldr	r2, [pc, #96]	; (8014244 <readCanToStructs+0x2c24>)
 80141e2:	f240 4016 	movw	r0, #1046	; 0x416
 80141e6:	fb00 f303 	mul.w	r3, r0, r3
 80141ea:	4413      	add	r3, r2
 80141ec:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	461a      	mov	r2, r3
 80141f4:	481a      	ldr	r0, [pc, #104]	; (8014260 <readCanToStructs+0x2c40>)
 80141f6:	f012 f94f 	bl	8026498 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80141fa:	2208      	movs	r2, #8
 80141fc:	2100      	movs	r1, #0
 80141fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014200:	f012 f862 	bl	80262c8 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8014204:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014208:	4a0e      	ldr	r2, [pc, #56]	; (8014244 <readCanToStructs+0x2c24>)
 801420a:	f240 4116 	movw	r1, #1046	; 0x416
 801420e:	fb01 f303 	mul.w	r3, r1, r3
 8014212:	4413      	add	r3, r2
 8014214:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8014218:	2200      	movs	r2, #0
 801421a:	701a      	strb	r2, [r3, #0]
					break;
 801421c:	f000 bde8 	b.w	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014220:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014224:	4613      	mov	r3, r2
 8014226:	00db      	lsls	r3, r3, #3
 8014228:	1a9b      	subs	r3, r3, r2
 801422a:	461a      	mov	r2, r3
 801422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801422e:	4413      	add	r3, r2
 8014230:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014232:	2301      	movs	r3, #1
 8014234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014238:	e02b      	b.n	8014292 <readCanToStructs+0x2c72>
 801423a:	bf00      	nop
 801423c:	20003f30 	.word	0x20003f30
 8014240:	200071b4 	.word	0x200071b4
 8014244:	20006988 	.word	0x20006988
 8014248:	0802ae70 	.word	0x0802ae70
 801424c:	20003f28 	.word	0x20003f28
 8014250:	20000bbb 	.word	0x20000bbb
 8014254:	0802ae8c 	.word	0x0802ae8c
 8014258:	20003d70 	.word	0x20003d70
 801425c:	0802b130 	.word	0x0802b130
 8014260:	0802b158 	.word	0x0802b158
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014264:	4bba      	ldr	r3, [pc, #744]	; (8014550 <readCanToStructs+0x2f30>)
 8014266:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801426a:	885b      	ldrh	r3, [r3, #2]
 801426c:	461a      	mov	r2, r3
 801426e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014272:	49b7      	ldr	r1, [pc, #732]	; (8014550 <readCanToStructs+0x2f30>)
 8014274:	0112      	lsls	r2, r2, #4
 8014276:	440a      	add	r2, r1
 8014278:	4413      	add	r3, r2
 801427a:	3304      	adds	r3, #4
 801427c:	781a      	ldrb	r2, [r3, #0]
 801427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014280:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014284:	3301      	adds	r3, #1
 8014286:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801428c:	3301      	adds	r3, #1
 801428e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014292:	4baf      	ldr	r3, [pc, #700]	; (8014550 <readCanToStructs+0x2f30>)
 8014294:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014298:	885b      	ldrh	r3, [r3, #2]
 801429a:	4aad      	ldr	r2, [pc, #692]	; (8014550 <readCanToStructs+0x2f30>)
 801429c:	011b      	lsls	r3, r3, #4
 801429e:	4413      	add	r3, r2
 80142a0:	330c      	adds	r3, #12
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d3db      	bcc.n	8014264 <readCanToStructs+0x2c44>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 80142ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142b0:	4aa8      	ldr	r2, [pc, #672]	; (8014554 <readCanToStructs+0x2f34>)
 80142b2:	f240 4116 	movw	r1, #1046	; 0x416
 80142b6:	fb01 f303 	mul.w	r3, r1, r3
 80142ba:	4413      	add	r3, r2
 80142bc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	461a      	mov	r2, r3
 80142c4:	4613      	mov	r3, r2
 80142c6:	00db      	lsls	r3, r3, #3
 80142c8:	1a9a      	subs	r2, r3, r2
 80142ca:	4ba1      	ldr	r3, [pc, #644]	; (8014550 <readCanToStructs+0x2f30>)
 80142cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80142d0:	885b      	ldrh	r3, [r3, #2]
 80142d2:	499f      	ldr	r1, [pc, #636]	; (8014550 <readCanToStructs+0x2f30>)
 80142d4:	011b      	lsls	r3, r3, #4
 80142d6:	440b      	add	r3, r1
 80142d8:	330c      	adds	r3, #12
 80142da:	781b      	ldrb	r3, [r3, #0]
 80142dc:	3b01      	subs	r3, #1
 80142de:	4413      	add	r3, r2
 80142e0:	2b07      	cmp	r3, #7
 80142e2:	d922      	bls.n	801432a <readCanToStructs+0x2d0a>
					if(Debug_flag == 1)
 80142e4:	4b9c      	ldr	r3, [pc, #624]	; (8014558 <readCanToStructs+0x2f38>)
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	2b01      	cmp	r3, #1
 80142ea:	d102      	bne.n	80142f2 <readCanToStructs+0x2cd2>
						printf("\nRCV OTH_INFO1\n");
 80142ec:	489b      	ldr	r0, [pc, #620]	; (801455c <readCanToStructs+0x2f3c>)
 80142ee:	f012 f96f 	bl	80265d0 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 80142f2:	4b9b      	ldr	r3, [pc, #620]	; (8014560 <readCanToStructs+0x2f40>)
 80142f4:	4a9b      	ldr	r2, [pc, #620]	; (8014564 <readCanToStructs+0x2f44>)
 80142f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142fa:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 80142fe:	4b9a      	ldr	r3, [pc, #616]	; (8014568 <readCanToStructs+0x2f48>)
 8014300:	2201      	movs	r2, #1
 8014302:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014304:	f005 f8be 	bl	8019484 <HAL_GetTick>
 8014308:	4603      	mov	r3, r0
 801430a:	4a98      	ldr	r2, [pc, #608]	; (801456c <readCanToStructs+0x2f4c>)
 801430c:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801430e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014312:	4a90      	ldr	r2, [pc, #576]	; (8014554 <readCanToStructs+0x2f34>)
 8014314:	f240 4116 	movw	r1, #1046	; 0x416
 8014318:	fb01 f303 	mul.w	r3, r1, r3
 801431c:	4413      	add	r3, r2
 801431e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8014322:	2200      	movs	r2, #0
 8014324:	701a      	strb	r2, [r3, #0]
				break;
 8014326:	f000 bd63 	b.w	8014df0 <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801432a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801432e:	4a89      	ldr	r2, [pc, #548]	; (8014554 <readCanToStructs+0x2f34>)
 8014330:	f240 4116 	movw	r1, #1046	; 0x416
 8014334:	fb01 f303 	mul.w	r3, r1, r3
 8014338:	4413      	add	r3, r2
 801433a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801433e:	2201      	movs	r2, #1
 8014340:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8014342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014346:	4983      	ldr	r1, [pc, #524]	; (8014554 <readCanToStructs+0x2f34>)
 8014348:	f240 4216 	movw	r2, #1046	; 0x416
 801434c:	fb03 f202 	mul.w	r2, r3, r2
 8014350:	440a      	add	r2, r1
 8014352:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8014356:	7812      	ldrb	r2, [r2, #0]
 8014358:	3201      	adds	r2, #1
 801435a:	b2d0      	uxtb	r0, r2
 801435c:	4a7d      	ldr	r2, [pc, #500]	; (8014554 <readCanToStructs+0x2f34>)
 801435e:	f240 4116 	movw	r1, #1046	; 0x416
 8014362:	fb01 f303 	mul.w	r3, r1, r3
 8014366:	4413      	add	r3, r2
 8014368:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801436c:	4602      	mov	r2, r0
 801436e:	701a      	strb	r2, [r3, #0]
				break;
 8014370:	f000 bd3e 	b.w	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8014374:	4b7b      	ldr	r3, [pc, #492]	; (8014564 <readCanToStructs+0x2f44>)
 8014376:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014378:	4b75      	ldr	r3, [pc, #468]	; (8014550 <readCanToStructs+0x2f30>)
 801437a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801437e:	885b      	ldrh	r3, [r3, #2]
 8014380:	4a73      	ldr	r2, [pc, #460]	; (8014550 <readCanToStructs+0x2f30>)
 8014382:	011b      	lsls	r3, r3, #4
 8014384:	4413      	add	r3, r2
 8014386:	3304      	adds	r3, #4
 8014388:	781b      	ldrb	r3, [r3, #0]
 801438a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801438e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014392:	2b00      	cmp	r3, #0
 8014394:	d110      	bne.n	80143b8 <readCanToStructs+0x2d98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014396:	2208      	movs	r2, #8
 8014398:	2100      	movs	r1, #0
 801439a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801439c:	f011 ff94 	bl	80262c8 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80143a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143a4:	4a6b      	ldr	r2, [pc, #428]	; (8014554 <readCanToStructs+0x2f34>)
 80143a6:	f240 4116 	movw	r1, #1046	; 0x416
 80143aa:	fb01 f303 	mul.w	r3, r1, r3
 80143ae:	4413      	add	r3, r2
 80143b0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80143b4:	2200      	movs	r2, #0
 80143b6:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 80143b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143bc:	4a65      	ldr	r2, [pc, #404]	; (8014554 <readCanToStructs+0x2f34>)
 80143be:	f240 4116 	movw	r1, #1046	; 0x416
 80143c2:	fb01 f303 	mul.w	r3, r1, r3
 80143c6:	4413      	add	r3, r2
 80143c8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80143cc:	781b      	ldrb	r3, [r3, #0]
 80143ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d026      	beq.n	8014424 <readCanToStructs+0x2e04>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 80143d6:	4866      	ldr	r0, [pc, #408]	; (8014570 <readCanToStructs+0x2f50>)
 80143d8:	f012 f8fa 	bl	80265d0 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 80143dc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80143e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143e4:	4a5b      	ldr	r2, [pc, #364]	; (8014554 <readCanToStructs+0x2f34>)
 80143e6:	f240 4016 	movw	r0, #1046	; 0x416
 80143ea:	fb00 f303 	mul.w	r3, r0, r3
 80143ee:	4413      	add	r3, r2
 80143f0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	461a      	mov	r2, r3
 80143f8:	485e      	ldr	r0, [pc, #376]	; (8014574 <readCanToStructs+0x2f54>)
 80143fa:	f012 f84d 	bl	8026498 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80143fe:	2208      	movs	r2, #8
 8014400:	2100      	movs	r1, #0
 8014402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014404:	f011 ff60 	bl	80262c8 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8014408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801440c:	4a51      	ldr	r2, [pc, #324]	; (8014554 <readCanToStructs+0x2f34>)
 801440e:	f240 4116 	movw	r1, #1046	; 0x416
 8014412:	fb01 f303 	mul.w	r3, r1, r3
 8014416:	4413      	add	r3, r2
 8014418:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801441c:	2200      	movs	r2, #0
 801441e:	701a      	strb	r2, [r3, #0]
					break;
 8014420:	f000 bce6 	b.w	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014424:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014428:	4613      	mov	r3, r2
 801442a:	00db      	lsls	r3, r3, #3
 801442c:	1a9b      	subs	r3, r3, r2
 801442e:	461a      	mov	r2, r3
 8014430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014432:	4413      	add	r3, r2
 8014434:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014436:	2301      	movs	r3, #1
 8014438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801443c:	e016      	b.n	801446c <readCanToStructs+0x2e4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801443e:	4b44      	ldr	r3, [pc, #272]	; (8014550 <readCanToStructs+0x2f30>)
 8014440:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014444:	885b      	ldrh	r3, [r3, #2]
 8014446:	461a      	mov	r2, r3
 8014448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801444c:	4940      	ldr	r1, [pc, #256]	; (8014550 <readCanToStructs+0x2f30>)
 801444e:	0112      	lsls	r2, r2, #4
 8014450:	440a      	add	r2, r1
 8014452:	4413      	add	r3, r2
 8014454:	3304      	adds	r3, #4
 8014456:	781a      	ldrb	r2, [r3, #0]
 8014458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445a:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445e:	3301      	adds	r3, #1
 8014460:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014462:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014466:	3301      	adds	r3, #1
 8014468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801446c:	4b38      	ldr	r3, [pc, #224]	; (8014550 <readCanToStructs+0x2f30>)
 801446e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014472:	885b      	ldrh	r3, [r3, #2]
 8014474:	4a36      	ldr	r2, [pc, #216]	; (8014550 <readCanToStructs+0x2f30>)
 8014476:	011b      	lsls	r3, r3, #4
 8014478:	4413      	add	r3, r2
 801447a:	330c      	adds	r3, #12
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014482:	429a      	cmp	r2, r3
 8014484:	d3db      	bcc.n	801443e <readCanToStructs+0x2e1e>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8014486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801448a:	4a32      	ldr	r2, [pc, #200]	; (8014554 <readCanToStructs+0x2f34>)
 801448c:	f240 4116 	movw	r1, #1046	; 0x416
 8014490:	fb01 f303 	mul.w	r3, r1, r3
 8014494:	4413      	add	r3, r2
 8014496:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	461a      	mov	r2, r3
 801449e:	4613      	mov	r3, r2
 80144a0:	00db      	lsls	r3, r3, #3
 80144a2:	1a9a      	subs	r2, r3, r2
 80144a4:	4b2a      	ldr	r3, [pc, #168]	; (8014550 <readCanToStructs+0x2f30>)
 80144a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80144aa:	885b      	ldrh	r3, [r3, #2]
 80144ac:	4928      	ldr	r1, [pc, #160]	; (8014550 <readCanToStructs+0x2f30>)
 80144ae:	011b      	lsls	r3, r3, #4
 80144b0:	440b      	add	r3, r1
 80144b2:	330c      	adds	r3, #12
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	3b01      	subs	r3, #1
 80144b8:	4413      	add	r3, r2
 80144ba:	2b07      	cmp	r3, #7
 80144bc:	d922      	bls.n	8014504 <readCanToStructs+0x2ee4>
					if(Debug_flag == 1)
 80144be:	4b26      	ldr	r3, [pc, #152]	; (8014558 <readCanToStructs+0x2f38>)
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	d102      	bne.n	80144cc <readCanToStructs+0x2eac>
						printf("\nRCV OTH_INFO2\n");
 80144c6:	482c      	ldr	r0, [pc, #176]	; (8014578 <readCanToStructs+0x2f58>)
 80144c8:	f012 f882 	bl	80265d0 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 80144cc:	4b24      	ldr	r3, [pc, #144]	; (8014560 <readCanToStructs+0x2f40>)
 80144ce:	4a25      	ldr	r2, [pc, #148]	; (8014564 <readCanToStructs+0x2f44>)
 80144d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80144d4:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 80144d8:	4b23      	ldr	r3, [pc, #140]	; (8014568 <readCanToStructs+0x2f48>)
 80144da:	2201      	movs	r2, #1
 80144dc:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80144de:	f004 ffd1 	bl	8019484 <HAL_GetTick>
 80144e2:	4603      	mov	r3, r0
 80144e4:	4a21      	ldr	r2, [pc, #132]	; (801456c <readCanToStructs+0x2f4c>)
 80144e6:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80144e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144ec:	4a19      	ldr	r2, [pc, #100]	; (8014554 <readCanToStructs+0x2f34>)
 80144ee:	f240 4116 	movw	r1, #1046	; 0x416
 80144f2:	fb01 f303 	mul.w	r3, r1, r3
 80144f6:	4413      	add	r3, r2
 80144f8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80144fc:	2200      	movs	r2, #0
 80144fe:	701a      	strb	r2, [r3, #0]
				break;
 8014500:	f000 bc76 	b.w	8014df0 <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8014504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014508:	4a12      	ldr	r2, [pc, #72]	; (8014554 <readCanToStructs+0x2f34>)
 801450a:	f240 4116 	movw	r1, #1046	; 0x416
 801450e:	fb01 f303 	mul.w	r3, r1, r3
 8014512:	4413      	add	r3, r2
 8014514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014518:	2201      	movs	r2, #1
 801451a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 801451c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014520:	490c      	ldr	r1, [pc, #48]	; (8014554 <readCanToStructs+0x2f34>)
 8014522:	f240 4216 	movw	r2, #1046	; 0x416
 8014526:	fb03 f202 	mul.w	r2, r3, r2
 801452a:	440a      	add	r2, r1
 801452c:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8014530:	7812      	ldrb	r2, [r2, #0]
 8014532:	3201      	adds	r2, #1
 8014534:	b2d0      	uxtb	r0, r2
 8014536:	4a07      	ldr	r2, [pc, #28]	; (8014554 <readCanToStructs+0x2f34>)
 8014538:	f240 4116 	movw	r1, #1046	; 0x416
 801453c:	fb01 f303 	mul.w	r3, r1, r3
 8014540:	4413      	add	r3, r2
 8014542:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014546:	4602      	mov	r2, r0
 8014548:	701a      	strb	r2, [r3, #0]
				break;
 801454a:	f000 bc51 	b.w	8014df0 <readCanToStructs+0x37d0>
 801454e:	bf00      	nop
 8014550:	200071b4 	.word	0x200071b4
 8014554:	20006988 	.word	0x20006988
 8014558:	20000bbb 	.word	0x20000bbb
 801455c:	0802b168 	.word	0x0802b168
 8014560:	20003d68 	.word	0x20003d68
 8014564:	20003d70 	.word	0x20003d70
 8014568:	20003804 	.word	0x20003804
 801456c:	20003808 	.word	0x20003808
 8014570:	0802b178 	.word	0x0802b178
 8014574:	0802b158 	.word	0x0802b158
 8014578:	0802b1a0 	.word	0x0802b1a0
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 801457c:	4bbb      	ldr	r3, [pc, #748]	; (801486c <readCanToStructs+0x324c>)
 801457e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014580:	4bbb      	ldr	r3, [pc, #748]	; (8014870 <readCanToStructs+0x3250>)
 8014582:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014586:	885b      	ldrh	r3, [r3, #2]
 8014588:	4ab9      	ldr	r2, [pc, #740]	; (8014870 <readCanToStructs+0x3250>)
 801458a:	011b      	lsls	r3, r3, #4
 801458c:	4413      	add	r3, r2
 801458e:	3304      	adds	r3, #4
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014596:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801459a:	2b00      	cmp	r3, #0
 801459c:	d110      	bne.n	80145c0 <readCanToStructs+0x2fa0>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 801459e:	2204      	movs	r2, #4
 80145a0:	2100      	movs	r1, #0
 80145a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80145a4:	f011 fe90 	bl	80262c8 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80145a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145ac:	4ab1      	ldr	r2, [pc, #708]	; (8014874 <readCanToStructs+0x3254>)
 80145ae:	f240 4116 	movw	r1, #1046	; 0x416
 80145b2:	fb01 f303 	mul.w	r3, r1, r3
 80145b6:	4413      	add	r3, r2
 80145b8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80145bc:	2200      	movs	r2, #0
 80145be:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80145c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145c4:	4aab      	ldr	r2, [pc, #684]	; (8014874 <readCanToStructs+0x3254>)
 80145c6:	f240 4116 	movw	r1, #1046	; 0x416
 80145ca:	fb01 f303 	mul.w	r3, r1, r3
 80145ce:	4413      	add	r3, r2
 80145d0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80145da:	429a      	cmp	r2, r3
 80145dc:	d011      	beq.n	8014602 <readCanToStructs+0x2fe2>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 80145de:	2204      	movs	r2, #4
 80145e0:	2100      	movs	r1, #0
 80145e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80145e4:	f011 fe70 	bl	80262c8 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80145e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145ec:	4aa1      	ldr	r2, [pc, #644]	; (8014874 <readCanToStructs+0x3254>)
 80145ee:	f240 4116 	movw	r1, #1046	; 0x416
 80145f2:	fb01 f303 	mul.w	r3, r1, r3
 80145f6:	4413      	add	r3, r2
 80145f8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80145fc:	2200      	movs	r2, #0
 80145fe:	701a      	strb	r2, [r3, #0]
					break;
 8014600:	e3f6      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014602:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014606:	4613      	mov	r3, r2
 8014608:	00db      	lsls	r3, r3, #3
 801460a:	1a9b      	subs	r3, r3, r2
 801460c:	461a      	mov	r2, r3
 801460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014610:	4413      	add	r3, r2
 8014612:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014614:	2301      	movs	r3, #1
 8014616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801461a:	e016      	b.n	801464a <readCanToStructs+0x302a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801461c:	4b94      	ldr	r3, [pc, #592]	; (8014870 <readCanToStructs+0x3250>)
 801461e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014622:	885b      	ldrh	r3, [r3, #2]
 8014624:	461a      	mov	r2, r3
 8014626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801462a:	4991      	ldr	r1, [pc, #580]	; (8014870 <readCanToStructs+0x3250>)
 801462c:	0112      	lsls	r2, r2, #4
 801462e:	440a      	add	r2, r1
 8014630:	4413      	add	r3, r2
 8014632:	3304      	adds	r3, #4
 8014634:	781a      	ldrb	r2, [r3, #0]
 8014636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014638:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801463c:	3301      	adds	r3, #1
 801463e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014644:	3301      	adds	r3, #1
 8014646:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801464a:	4b89      	ldr	r3, [pc, #548]	; (8014870 <readCanToStructs+0x3250>)
 801464c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014650:	885b      	ldrh	r3, [r3, #2]
 8014652:	4a87      	ldr	r2, [pc, #540]	; (8014870 <readCanToStructs+0x3250>)
 8014654:	011b      	lsls	r3, r3, #4
 8014656:	4413      	add	r3, r2
 8014658:	330c      	adds	r3, #12
 801465a:	781b      	ldrb	r3, [r3, #0]
 801465c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014660:	429a      	cmp	r2, r3
 8014662:	d3db      	bcc.n	801461c <readCanToStructs+0x2ffc>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 8014664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014668:	4a82      	ldr	r2, [pc, #520]	; (8014874 <readCanToStructs+0x3254>)
 801466a:	f240 4116 	movw	r1, #1046	; 0x416
 801466e:	fb01 f303 	mul.w	r3, r1, r3
 8014672:	4413      	add	r3, r2
 8014674:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	461a      	mov	r2, r3
 801467c:	4613      	mov	r3, r2
 801467e:	00db      	lsls	r3, r3, #3
 8014680:	1a9a      	subs	r2, r3, r2
 8014682:	4b7b      	ldr	r3, [pc, #492]	; (8014870 <readCanToStructs+0x3250>)
 8014684:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014688:	885b      	ldrh	r3, [r3, #2]
 801468a:	4979      	ldr	r1, [pc, #484]	; (8014870 <readCanToStructs+0x3250>)
 801468c:	011b      	lsls	r3, r3, #4
 801468e:	440b      	add	r3, r1
 8014690:	330c      	adds	r3, #12
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	3b01      	subs	r3, #1
 8014696:	4413      	add	r3, r2
 8014698:	2b03      	cmp	r3, #3
 801469a:	d914      	bls.n	80146c6 <readCanToStructs+0x30a6>
					printf("Received CAN_FAULT_INJECTION\n");
 801469c:	4876      	ldr	r0, [pc, #472]	; (8014878 <readCanToStructs+0x3258>)
 801469e:	f011 ff97 	bl	80265d0 <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80146a2:	f004 feef 	bl	8019484 <HAL_GetTick>
 80146a6:	4603      	mov	r3, r0
 80146a8:	4a74      	ldr	r2, [pc, #464]	; (801487c <readCanToStructs+0x325c>)
 80146aa:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80146ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146b0:	4a70      	ldr	r2, [pc, #448]	; (8014874 <readCanToStructs+0x3254>)
 80146b2:	f240 4116 	movw	r1, #1046	; 0x416
 80146b6:	fb01 f303 	mul.w	r3, r1, r3
 80146ba:	4413      	add	r3, r2
 80146bc:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80146c0:	2200      	movs	r2, #0
 80146c2:	701a      	strb	r2, [r3, #0]
				break;
 80146c4:	e394      	b.n	8014df0 <readCanToStructs+0x37d0>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80146c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146ca:	4a6a      	ldr	r2, [pc, #424]	; (8014874 <readCanToStructs+0x3254>)
 80146cc:	f240 4116 	movw	r1, #1046	; 0x416
 80146d0:	fb01 f303 	mul.w	r3, r1, r3
 80146d4:	4413      	add	r3, r2
 80146d6:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80146da:	2201      	movs	r2, #1
 80146dc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80146de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146e2:	4964      	ldr	r1, [pc, #400]	; (8014874 <readCanToStructs+0x3254>)
 80146e4:	f240 4216 	movw	r2, #1046	; 0x416
 80146e8:	fb03 f202 	mul.w	r2, r3, r2
 80146ec:	440a      	add	r2, r1
 80146ee:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80146f2:	7812      	ldrb	r2, [r2, #0]
 80146f4:	3201      	adds	r2, #1
 80146f6:	b2d0      	uxtb	r0, r2
 80146f8:	4a5e      	ldr	r2, [pc, #376]	; (8014874 <readCanToStructs+0x3254>)
 80146fa:	f240 4116 	movw	r1, #1046	; 0x416
 80146fe:	fb01 f303 	mul.w	r3, r1, r3
 8014702:	4413      	add	r3, r2
 8014704:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014708:	4602      	mov	r2, r0
 801470a:	701a      	strb	r2, [r3, #0]
				break;
 801470c:	e370      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 801470e:	4b5c      	ldr	r3, [pc, #368]	; (8014880 <readCanToStructs+0x3260>)
 8014710:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014712:	4b57      	ldr	r3, [pc, #348]	; (8014870 <readCanToStructs+0x3250>)
 8014714:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014718:	885b      	ldrh	r3, [r3, #2]
 801471a:	4a55      	ldr	r2, [pc, #340]	; (8014870 <readCanToStructs+0x3250>)
 801471c:	011b      	lsls	r3, r3, #4
 801471e:	4413      	add	r3, r2
 8014720:	3304      	adds	r3, #4
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014728:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801472c:	2b00      	cmp	r3, #0
 801472e:	d110      	bne.n	8014752 <readCanToStructs+0x3132>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014730:	2284      	movs	r2, #132	; 0x84
 8014732:	2100      	movs	r1, #0
 8014734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014736:	f011 fdc7 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801473a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801473e:	4a4d      	ldr	r2, [pc, #308]	; (8014874 <readCanToStructs+0x3254>)
 8014740:	f240 4116 	movw	r1, #1046	; 0x416
 8014744:	fb01 f303 	mul.w	r3, r1, r3
 8014748:	4413      	add	r3, r2
 801474a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801474e:	2200      	movs	r2, #0
 8014750:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8014752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014756:	4a47      	ldr	r2, [pc, #284]	; (8014874 <readCanToStructs+0x3254>)
 8014758:	f240 4116 	movw	r1, #1046	; 0x416
 801475c:	fb01 f303 	mul.w	r3, r1, r3
 8014760:	4413      	add	r3, r2
 8014762:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801476c:	429a      	cmp	r2, r3
 801476e:	d011      	beq.n	8014794 <readCanToStructs+0x3174>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014770:	2284      	movs	r2, #132	; 0x84
 8014772:	2100      	movs	r1, #0
 8014774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014776:	f011 fda7 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801477a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801477e:	4a3d      	ldr	r2, [pc, #244]	; (8014874 <readCanToStructs+0x3254>)
 8014780:	f240 4116 	movw	r1, #1046	; 0x416
 8014784:	fb01 f303 	mul.w	r3, r1, r3
 8014788:	4413      	add	r3, r2
 801478a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801478e:	2200      	movs	r2, #0
 8014790:	701a      	strb	r2, [r3, #0]
					break;
 8014792:	e32d      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014794:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014798:	4613      	mov	r3, r2
 801479a:	00db      	lsls	r3, r3, #3
 801479c:	1a9b      	subs	r3, r3, r2
 801479e:	461a      	mov	r2, r3
 80147a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a2:	4413      	add	r3, r2
 80147a4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80147a6:	2301      	movs	r3, #1
 80147a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80147ac:	e016      	b.n	80147dc <readCanToStructs+0x31bc>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80147ae:	4b30      	ldr	r3, [pc, #192]	; (8014870 <readCanToStructs+0x3250>)
 80147b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80147b4:	885b      	ldrh	r3, [r3, #2]
 80147b6:	461a      	mov	r2, r3
 80147b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147bc:	492c      	ldr	r1, [pc, #176]	; (8014870 <readCanToStructs+0x3250>)
 80147be:	0112      	lsls	r2, r2, #4
 80147c0:	440a      	add	r2, r1
 80147c2:	4413      	add	r3, r2
 80147c4:	3304      	adds	r3, #4
 80147c6:	781a      	ldrb	r2, [r3, #0]
 80147c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ca:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80147cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ce:	3301      	adds	r3, #1
 80147d0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80147d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147d6:	3301      	adds	r3, #1
 80147d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80147dc:	4b24      	ldr	r3, [pc, #144]	; (8014870 <readCanToStructs+0x3250>)
 80147de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80147e2:	885b      	ldrh	r3, [r3, #2]
 80147e4:	4a22      	ldr	r2, [pc, #136]	; (8014870 <readCanToStructs+0x3250>)
 80147e6:	011b      	lsls	r3, r3, #4
 80147e8:	4413      	add	r3, r2
 80147ea:	330c      	adds	r3, #12
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d3db      	bcc.n	80147ae <readCanToStructs+0x318e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 80147f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147fa:	4a1e      	ldr	r2, [pc, #120]	; (8014874 <readCanToStructs+0x3254>)
 80147fc:	f240 4116 	movw	r1, #1046	; 0x416
 8014800:	fb01 f303 	mul.w	r3, r1, r3
 8014804:	4413      	add	r3, r2
 8014806:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801480a:	781b      	ldrb	r3, [r3, #0]
 801480c:	461a      	mov	r2, r3
 801480e:	4613      	mov	r3, r2
 8014810:	00db      	lsls	r3, r3, #3
 8014812:	1a9a      	subs	r2, r3, r2
 8014814:	4b16      	ldr	r3, [pc, #88]	; (8014870 <readCanToStructs+0x3250>)
 8014816:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801481a:	885b      	ldrh	r3, [r3, #2]
 801481c:	4914      	ldr	r1, [pc, #80]	; (8014870 <readCanToStructs+0x3250>)
 801481e:	011b      	lsls	r3, r3, #4
 8014820:	440b      	add	r3, r1
 8014822:	330c      	adds	r3, #12
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	3b01      	subs	r3, #1
 8014828:	4413      	add	r3, r2
 801482a:	2b83      	cmp	r3, #131	; 0x83
 801482c:	d932      	bls.n	8014894 <readCanToStructs+0x3274>
					if(Debug_flag == 1)
 801482e:	4b15      	ldr	r3, [pc, #84]	; (8014884 <readCanToStructs+0x3264>)
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d102      	bne.n	801483c <readCanToStructs+0x321c>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8014836:	4814      	ldr	r0, [pc, #80]	; (8014888 <readCanToStructs+0x3268>)
 8014838:	f011 feca 	bl	80265d0 <puts>
					Received_CAN_Relay_Status = YES;
 801483c:	4b13      	ldr	r3, [pc, #76]	; (801488c <readCanToStructs+0x326c>)
 801483e:	2201      	movs	r2, #1
 8014840:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 8014842:	4b13      	ldr	r3, [pc, #76]	; (8014890 <readCanToStructs+0x3270>)
 8014844:	2201      	movs	r2, #1
 8014846:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014848:	f004 fe1c 	bl	8019484 <HAL_GetTick>
 801484c:	4603      	mov	r3, r0
 801484e:	4a0b      	ldr	r2, [pc, #44]	; (801487c <readCanToStructs+0x325c>)
 8014850:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014856:	4a07      	ldr	r2, [pc, #28]	; (8014874 <readCanToStructs+0x3254>)
 8014858:	f240 4116 	movw	r1, #1046	; 0x416
 801485c:	fb01 f303 	mul.w	r3, r1, r3
 8014860:	4413      	add	r3, r2
 8014862:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014866:	2200      	movs	r2, #0
 8014868:	701a      	strb	r2, [r3, #0]
				break;
 801486a:	e2c1      	b.n	8014df0 <readCanToStructs+0x37d0>
 801486c:	20003d5c 	.word	0x20003d5c
 8014870:	200071b4 	.word	0x200071b4
 8014874:	20006988 	.word	0x20006988
 8014878:	0802b1b0 	.word	0x0802b1b0
 801487c:	20003808 	.word	0x20003808
 8014880:	20003dfc 	.word	0x20003dfc
 8014884:	20000bbb 	.word	0x20000bbb
 8014888:	0802b1d0 	.word	0x0802b1d0
 801488c:	20003805 	.word	0x20003805
 8014890:	20003804 	.word	0x20003804
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8014894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014898:	4aa3      	ldr	r2, [pc, #652]	; (8014b28 <readCanToStructs+0x3508>)
 801489a:	f240 4116 	movw	r1, #1046	; 0x416
 801489e:	fb01 f303 	mul.w	r3, r1, r3
 80148a2:	4413      	add	r3, r2
 80148a4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80148a8:	2201      	movs	r2, #1
 80148aa:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 80148ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148b0:	499d      	ldr	r1, [pc, #628]	; (8014b28 <readCanToStructs+0x3508>)
 80148b2:	f240 4216 	movw	r2, #1046	; 0x416
 80148b6:	fb03 f202 	mul.w	r2, r3, r2
 80148ba:	440a      	add	r2, r1
 80148bc:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 80148c0:	7812      	ldrb	r2, [r2, #0]
 80148c2:	3201      	adds	r2, #1
 80148c4:	b2d0      	uxtb	r0, r2
 80148c6:	4a98      	ldr	r2, [pc, #608]	; (8014b28 <readCanToStructs+0x3508>)
 80148c8:	f240 4116 	movw	r1, #1046	; 0x416
 80148cc:	fb01 f303 	mul.w	r3, r1, r3
 80148d0:	4413      	add	r3, r2
 80148d2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80148d6:	4602      	mov	r2, r0
 80148d8:	701a      	strb	r2, [r3, #0]
				break;
 80148da:	e289      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 80148dc:	4b93      	ldr	r3, [pc, #588]	; (8014b2c <readCanToStructs+0x350c>)
 80148de:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80148e0:	4b93      	ldr	r3, [pc, #588]	; (8014b30 <readCanToStructs+0x3510>)
 80148e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80148e6:	885b      	ldrh	r3, [r3, #2]
 80148e8:	4a91      	ldr	r2, [pc, #580]	; (8014b30 <readCanToStructs+0x3510>)
 80148ea:	011b      	lsls	r3, r3, #4
 80148ec:	4413      	add	r3, r2
 80148ee:	3304      	adds	r3, #4
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80148f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d110      	bne.n	8014920 <readCanToStructs+0x3300>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80148fe:	2284      	movs	r2, #132	; 0x84
 8014900:	2100      	movs	r1, #0
 8014902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014904:	f011 fce0 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801490c:	4a86      	ldr	r2, [pc, #536]	; (8014b28 <readCanToStructs+0x3508>)
 801490e:	f240 4116 	movw	r1, #1046	; 0x416
 8014912:	fb01 f303 	mul.w	r3, r1, r3
 8014916:	4413      	add	r3, r2
 8014918:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801491c:	2200      	movs	r2, #0
 801491e:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8014920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014924:	4a80      	ldr	r2, [pc, #512]	; (8014b28 <readCanToStructs+0x3508>)
 8014926:	f240 4116 	movw	r1, #1046	; 0x416
 801492a:	fb01 f303 	mul.w	r3, r1, r3
 801492e:	4413      	add	r3, r2
 8014930:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014934:	781b      	ldrb	r3, [r3, #0]
 8014936:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801493a:	429a      	cmp	r2, r3
 801493c:	d011      	beq.n	8014962 <readCanToStructs+0x3342>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 801493e:	2284      	movs	r2, #132	; 0x84
 8014940:	2100      	movs	r1, #0
 8014942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014944:	f011 fcc0 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801494c:	4a76      	ldr	r2, [pc, #472]	; (8014b28 <readCanToStructs+0x3508>)
 801494e:	f240 4116 	movw	r1, #1046	; 0x416
 8014952:	fb01 f303 	mul.w	r3, r1, r3
 8014956:	4413      	add	r3, r2
 8014958:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801495c:	2200      	movs	r2, #0
 801495e:	701a      	strb	r2, [r3, #0]
					break;
 8014960:	e246      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014962:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014966:	4613      	mov	r3, r2
 8014968:	00db      	lsls	r3, r3, #3
 801496a:	1a9b      	subs	r3, r3, r2
 801496c:	461a      	mov	r2, r3
 801496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014970:	4413      	add	r3, r2
 8014972:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014974:	2301      	movs	r3, #1
 8014976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801497a:	e016      	b.n	80149aa <readCanToStructs+0x338a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801497c:	4b6c      	ldr	r3, [pc, #432]	; (8014b30 <readCanToStructs+0x3510>)
 801497e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014982:	885b      	ldrh	r3, [r3, #2]
 8014984:	461a      	mov	r2, r3
 8014986:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801498a:	4969      	ldr	r1, [pc, #420]	; (8014b30 <readCanToStructs+0x3510>)
 801498c:	0112      	lsls	r2, r2, #4
 801498e:	440a      	add	r2, r1
 8014990:	4413      	add	r3, r2
 8014992:	3304      	adds	r3, #4
 8014994:	781a      	ldrb	r2, [r3, #0]
 8014996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014998:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499c:	3301      	adds	r3, #1
 801499e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80149a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80149a4:	3301      	adds	r3, #1
 80149a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80149aa:	4b61      	ldr	r3, [pc, #388]	; (8014b30 <readCanToStructs+0x3510>)
 80149ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80149b0:	885b      	ldrh	r3, [r3, #2]
 80149b2:	4a5f      	ldr	r2, [pc, #380]	; (8014b30 <readCanToStructs+0x3510>)
 80149b4:	011b      	lsls	r3, r3, #4
 80149b6:	4413      	add	r3, r2
 80149b8:	330c      	adds	r3, #12
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80149c0:	429a      	cmp	r2, r3
 80149c2:	d3db      	bcc.n	801497c <readCanToStructs+0x335c>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 80149c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149c8:	4a57      	ldr	r2, [pc, #348]	; (8014b28 <readCanToStructs+0x3508>)
 80149ca:	f240 4116 	movw	r1, #1046	; 0x416
 80149ce:	fb01 f303 	mul.w	r3, r1, r3
 80149d2:	4413      	add	r3, r2
 80149d4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	461a      	mov	r2, r3
 80149dc:	4613      	mov	r3, r2
 80149de:	00db      	lsls	r3, r3, #3
 80149e0:	1a9a      	subs	r2, r3, r2
 80149e2:	4b53      	ldr	r3, [pc, #332]	; (8014b30 <readCanToStructs+0x3510>)
 80149e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80149e8:	885b      	ldrh	r3, [r3, #2]
 80149ea:	4951      	ldr	r1, [pc, #324]	; (8014b30 <readCanToStructs+0x3510>)
 80149ec:	011b      	lsls	r3, r3, #4
 80149ee:	440b      	add	r3, r1
 80149f0:	330c      	adds	r3, #12
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	3b01      	subs	r3, #1
 80149f6:	4413      	add	r3, r2
 80149f8:	2b83      	cmp	r3, #131	; 0x83
 80149fa:	d91e      	bls.n	8014a3a <readCanToStructs+0x341a>
					if(Debug_flag == 1)
 80149fc:	4b4d      	ldr	r3, [pc, #308]	; (8014b34 <readCanToStructs+0x3514>)
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	2b01      	cmp	r3, #1
 8014a02:	d102      	bne.n	8014a0a <readCanToStructs+0x33ea>
						printf("\nRCV RELAY_DATA_EI2\n");
 8014a04:	484c      	ldr	r0, [pc, #304]	; (8014b38 <readCanToStructs+0x3518>)
 8014a06:	f011 fde3 	bl	80265d0 <puts>
					Medha_CAN_Xchanging_Happening = SET;
 8014a0a:	4b4c      	ldr	r3, [pc, #304]	; (8014b3c <readCanToStructs+0x351c>)
 8014a0c:	2201      	movs	r2, #1
 8014a0e:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014a10:	f004 fd38 	bl	8019484 <HAL_GetTick>
 8014a14:	4603      	mov	r3, r0
 8014a16:	4a4a      	ldr	r2, [pc, #296]	; (8014b40 <readCanToStructs+0x3520>)
 8014a18:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 8014a1a:	4b4a      	ldr	r3, [pc, #296]	; (8014b44 <readCanToStructs+0x3524>)
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a24:	4a40      	ldr	r2, [pc, #256]	; (8014b28 <readCanToStructs+0x3508>)
 8014a26:	f240 4116 	movw	r1, #1046	; 0x416
 8014a2a:	fb01 f303 	mul.w	r3, r1, r3
 8014a2e:	4413      	add	r3, r2
 8014a30:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014a34:	2200      	movs	r2, #0
 8014a36:	701a      	strb	r2, [r3, #0]
				break;
 8014a38:	e1da      	b.n	8014df0 <readCanToStructs+0x37d0>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8014a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a3e:	4a3a      	ldr	r2, [pc, #232]	; (8014b28 <readCanToStructs+0x3508>)
 8014a40:	f240 4116 	movw	r1, #1046	; 0x416
 8014a44:	fb01 f303 	mul.w	r3, r1, r3
 8014a48:	4413      	add	r3, r2
 8014a4a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8014a4e:	2201      	movs	r2, #1
 8014a50:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8014a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a56:	4934      	ldr	r1, [pc, #208]	; (8014b28 <readCanToStructs+0x3508>)
 8014a58:	f240 4216 	movw	r2, #1046	; 0x416
 8014a5c:	fb03 f202 	mul.w	r2, r3, r2
 8014a60:	440a      	add	r2, r1
 8014a62:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8014a66:	7812      	ldrb	r2, [r2, #0]
 8014a68:	3201      	adds	r2, #1
 8014a6a:	b2d0      	uxtb	r0, r2
 8014a6c:	4a2e      	ldr	r2, [pc, #184]	; (8014b28 <readCanToStructs+0x3508>)
 8014a6e:	f240 4116 	movw	r1, #1046	; 0x416
 8014a72:	fb01 f303 	mul.w	r3, r1, r3
 8014a76:	4413      	add	r3, r2
 8014a78:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014a7c:	4602      	mov	r2, r0
 8014a7e:	701a      	strb	r2, [r3, #0]
				break;
 8014a80:	e1b6      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8014a82:	4b31      	ldr	r3, [pc, #196]	; (8014b48 <readCanToStructs+0x3528>)
 8014a84:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014a86:	4b2a      	ldr	r3, [pc, #168]	; (8014b30 <readCanToStructs+0x3510>)
 8014a88:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a8c:	885b      	ldrh	r3, [r3, #2]
 8014a8e:	4a28      	ldr	r2, [pc, #160]	; (8014b30 <readCanToStructs+0x3510>)
 8014a90:	011b      	lsls	r3, r3, #4
 8014a92:	4413      	add	r3, r2
 8014a94:	3304      	adds	r3, #4
 8014a96:	781b      	ldrb	r3, [r3, #0]
 8014a98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014a9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d110      	bne.n	8014ac6 <readCanToStructs+0x34a6>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014aa4:	2202      	movs	r2, #2
 8014aa6:	2100      	movs	r1, #0
 8014aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014aaa:	f011 fc0d 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ab2:	4a1d      	ldr	r2, [pc, #116]	; (8014b28 <readCanToStructs+0x3508>)
 8014ab4:	f240 4116 	movw	r1, #1046	; 0x416
 8014ab8:	fb01 f303 	mul.w	r3, r1, r3
 8014abc:	4413      	add	r3, r2
 8014abe:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8014ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014aca:	4a17      	ldr	r2, [pc, #92]	; (8014b28 <readCanToStructs+0x3508>)
 8014acc:	f240 4116 	movw	r1, #1046	; 0x416
 8014ad0:	fb01 f303 	mul.w	r3, r1, r3
 8014ad4:	4413      	add	r3, r2
 8014ad6:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d014      	beq.n	8014b0e <readCanToStructs+0x34ee>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014ae4:	4819      	ldr	r0, [pc, #100]	; (8014b4c <readCanToStructs+0x352c>)
 8014ae6:	f011 fd73 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014aea:	2202      	movs	r2, #2
 8014aec:	2100      	movs	r1, #0
 8014aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014af0:	f011 fbea 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014af8:	4a0b      	ldr	r2, [pc, #44]	; (8014b28 <readCanToStructs+0x3508>)
 8014afa:	f240 4116 	movw	r1, #1046	; 0x416
 8014afe:	fb01 f303 	mul.w	r3, r1, r3
 8014b02:	4413      	add	r3, r2
 8014b04:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014b08:	2200      	movs	r2, #0
 8014b0a:	701a      	strb	r2, [r3, #0]
					break;
 8014b0c:	e170      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014b0e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014b12:	4613      	mov	r3, r2
 8014b14:	00db      	lsls	r3, r3, #3
 8014b16:	1a9b      	subs	r3, r3, r2
 8014b18:	461a      	mov	r2, r3
 8014b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b1c:	4413      	add	r3, r2
 8014b1e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014b20:	2301      	movs	r3, #1
 8014b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b26:	e02a      	b.n	8014b7e <readCanToStructs+0x355e>
 8014b28:	20006988 	.word	0x20006988
 8014b2c:	20003dfc 	.word	0x20003dfc
 8014b30:	200071b4 	.word	0x200071b4
 8014b34:	20000bbb 	.word	0x20000bbb
 8014b38:	0802b1ec 	.word	0x0802b1ec
 8014b3c:	20003804 	.word	0x20003804
 8014b40:	20003808 	.word	0x20003808
 8014b44:	20003805 	.word	0x20003805
 8014b48:	20000bb8 	.word	0x20000bb8
 8014b4c:	0802b018 	.word	0x0802b018
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014b50:	4bbc      	ldr	r3, [pc, #752]	; (8014e44 <readCanToStructs+0x3824>)
 8014b52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b56:	885b      	ldrh	r3, [r3, #2]
 8014b58:	461a      	mov	r2, r3
 8014b5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b5e:	49b9      	ldr	r1, [pc, #740]	; (8014e44 <readCanToStructs+0x3824>)
 8014b60:	0112      	lsls	r2, r2, #4
 8014b62:	440a      	add	r2, r1
 8014b64:	4413      	add	r3, r2
 8014b66:	3304      	adds	r3, #4
 8014b68:	781a      	ldrb	r2, [r3, #0]
 8014b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b70:	3301      	adds	r3, #1
 8014b72:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014b74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b78:	3301      	adds	r3, #1
 8014b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b7e:	4bb1      	ldr	r3, [pc, #708]	; (8014e44 <readCanToStructs+0x3824>)
 8014b80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b84:	885b      	ldrh	r3, [r3, #2]
 8014b86:	4aaf      	ldr	r2, [pc, #700]	; (8014e44 <readCanToStructs+0x3824>)
 8014b88:	011b      	lsls	r3, r3, #4
 8014b8a:	4413      	add	r3, r2
 8014b8c:	330c      	adds	r3, #12
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d3db      	bcc.n	8014b50 <readCanToStructs+0x3530>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8014b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b9c:	4aaa      	ldr	r2, [pc, #680]	; (8014e48 <readCanToStructs+0x3828>)
 8014b9e:	f240 4116 	movw	r1, #1046	; 0x416
 8014ba2:	fb01 f303 	mul.w	r3, r1, r3
 8014ba6:	4413      	add	r3, r2
 8014ba8:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	461a      	mov	r2, r3
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	00db      	lsls	r3, r3, #3
 8014bb4:	1a9a      	subs	r2, r3, r2
 8014bb6:	4ba3      	ldr	r3, [pc, #652]	; (8014e44 <readCanToStructs+0x3824>)
 8014bb8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014bbc:	885b      	ldrh	r3, [r3, #2]
 8014bbe:	49a1      	ldr	r1, [pc, #644]	; (8014e44 <readCanToStructs+0x3824>)
 8014bc0:	011b      	lsls	r3, r3, #4
 8014bc2:	440b      	add	r3, r1
 8014bc4:	330c      	adds	r3, #12
 8014bc6:	781b      	ldrb	r3, [r3, #0]
 8014bc8:	3b01      	subs	r3, #1
 8014bca:	4413      	add	r3, r2
 8014bcc:	2b01      	cmp	r3, #1
 8014bce:	d919      	bls.n	8014c04 <readCanToStructs+0x35e4>
					if(Debug_flag == 1)
 8014bd0:	4b9e      	ldr	r3, [pc, #632]	; (8014e4c <readCanToStructs+0x382c>)
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d105      	bne.n	8014be4 <readCanToStructs+0x35c4>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014bd8:	4b9d      	ldr	r3, [pc, #628]	; (8014e50 <readCanToStructs+0x3830>)
 8014bda:	881b      	ldrh	r3, [r3, #0]
 8014bdc:	4619      	mov	r1, r3
 8014bde:	489d      	ldr	r0, [pc, #628]	; (8014e54 <readCanToStructs+0x3834>)
 8014be0:	f011 fc5a 	bl	8026498 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8014be4:	4b9c      	ldr	r3, [pc, #624]	; (8014e58 <readCanToStructs+0x3838>)
 8014be6:	2201      	movs	r2, #1
 8014be8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014bee:	4a96      	ldr	r2, [pc, #600]	; (8014e48 <readCanToStructs+0x3828>)
 8014bf0:	f240 4116 	movw	r1, #1046	; 0x416
 8014bf4:	fb01 f303 	mul.w	r3, r1, r3
 8014bf8:	4413      	add	r3, r2
 8014bfa:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014bfe:	2200      	movs	r2, #0
 8014c00:	701a      	strb	r2, [r3, #0]
				break;
 8014c02:	e0f5      	b.n	8014df0 <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8014c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c08:	4a8f      	ldr	r2, [pc, #572]	; (8014e48 <readCanToStructs+0x3828>)
 8014c0a:	f240 4116 	movw	r1, #1046	; 0x416
 8014c0e:	fb01 f303 	mul.w	r3, r1, r3
 8014c12:	4413      	add	r3, r2
 8014c14:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8014c18:	2201      	movs	r2, #1
 8014c1a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8014c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c20:	4989      	ldr	r1, [pc, #548]	; (8014e48 <readCanToStructs+0x3828>)
 8014c22:	f240 4216 	movw	r2, #1046	; 0x416
 8014c26:	fb03 f202 	mul.w	r2, r3, r2
 8014c2a:	440a      	add	r2, r1
 8014c2c:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8014c30:	7812      	ldrb	r2, [r2, #0]
 8014c32:	3201      	adds	r2, #1
 8014c34:	b2d0      	uxtb	r0, r2
 8014c36:	4a84      	ldr	r2, [pc, #528]	; (8014e48 <readCanToStructs+0x3828>)
 8014c38:	f240 4116 	movw	r1, #1046	; 0x416
 8014c3c:	fb01 f303 	mul.w	r3, r1, r3
 8014c40:	4413      	add	r3, r2
 8014c42:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014c46:	4602      	mov	r2, r0
 8014c48:	701a      	strb	r2, [r3, #0]
				break;
 8014c4a:	e0d1      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8014c4c:	4b80      	ldr	r3, [pc, #512]	; (8014e50 <readCanToStructs+0x3830>)
 8014c4e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014c50:	4b7c      	ldr	r3, [pc, #496]	; (8014e44 <readCanToStructs+0x3824>)
 8014c52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014c56:	885b      	ldrh	r3, [r3, #2]
 8014c58:	4a7a      	ldr	r2, [pc, #488]	; (8014e44 <readCanToStructs+0x3824>)
 8014c5a:	011b      	lsls	r3, r3, #4
 8014c5c:	4413      	add	r3, r2
 8014c5e:	3304      	adds	r3, #4
 8014c60:	781b      	ldrb	r3, [r3, #0]
 8014c62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014c66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d110      	bne.n	8014c90 <readCanToStructs+0x3670>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014c6e:	2202      	movs	r2, #2
 8014c70:	2100      	movs	r1, #0
 8014c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c74:	f011 fb28 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c7c:	4a72      	ldr	r2, [pc, #456]	; (8014e48 <readCanToStructs+0x3828>)
 8014c7e:	f240 4116 	movw	r1, #1046	; 0x416
 8014c82:	fb01 f303 	mul.w	r3, r1, r3
 8014c86:	4413      	add	r3, r2
 8014c88:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014c8c:	2200      	movs	r2, #0
 8014c8e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8014c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c94:	4a6c      	ldr	r2, [pc, #432]	; (8014e48 <readCanToStructs+0x3828>)
 8014c96:	f240 4116 	movw	r1, #1046	; 0x416
 8014c9a:	fb01 f303 	mul.w	r3, r1, r3
 8014c9e:	4413      	add	r3, r2
 8014ca0:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d014      	beq.n	8014cd8 <readCanToStructs+0x36b8>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014cae:	486b      	ldr	r0, [pc, #428]	; (8014e5c <readCanToStructs+0x383c>)
 8014cb0:	f011 fc8e 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014cb4:	2202      	movs	r2, #2
 8014cb6:	2100      	movs	r1, #0
 8014cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cba:	f011 fb05 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cc2:	4a61      	ldr	r2, [pc, #388]	; (8014e48 <readCanToStructs+0x3828>)
 8014cc4:	f240 4116 	movw	r1, #1046	; 0x416
 8014cc8:	fb01 f303 	mul.w	r3, r1, r3
 8014ccc:	4413      	add	r3, r2
 8014cce:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	701a      	strb	r2, [r3, #0]
					break;
 8014cd6:	e08b      	b.n	8014df0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014cd8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014cdc:	4613      	mov	r3, r2
 8014cde:	00db      	lsls	r3, r3, #3
 8014ce0:	1a9b      	subs	r3, r3, r2
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce6:	4413      	add	r3, r2
 8014ce8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014cea:	2301      	movs	r3, #1
 8014cec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014cf0:	e016      	b.n	8014d20 <readCanToStructs+0x3700>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014cf2:	4b54      	ldr	r3, [pc, #336]	; (8014e44 <readCanToStructs+0x3824>)
 8014cf4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014cf8:	885b      	ldrh	r3, [r3, #2]
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d00:	4950      	ldr	r1, [pc, #320]	; (8014e44 <readCanToStructs+0x3824>)
 8014d02:	0112      	lsls	r2, r2, #4
 8014d04:	440a      	add	r2, r1
 8014d06:	4413      	add	r3, r2
 8014d08:	3304      	adds	r3, #4
 8014d0a:	781a      	ldrb	r2, [r3, #0]
 8014d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d0e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d12:	3301      	adds	r3, #1
 8014d14:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014d16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014d20:	4b48      	ldr	r3, [pc, #288]	; (8014e44 <readCanToStructs+0x3824>)
 8014d22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014d26:	885b      	ldrh	r3, [r3, #2]
 8014d28:	4a46      	ldr	r2, [pc, #280]	; (8014e44 <readCanToStructs+0x3824>)
 8014d2a:	011b      	lsls	r3, r3, #4
 8014d2c:	4413      	add	r3, r2
 8014d2e:	330c      	adds	r3, #12
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d3db      	bcc.n	8014cf2 <readCanToStructs+0x36d2>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8014d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d3e:	4a42      	ldr	r2, [pc, #264]	; (8014e48 <readCanToStructs+0x3828>)
 8014d40:	f240 4116 	movw	r1, #1046	; 0x416
 8014d44:	fb01 f303 	mul.w	r3, r1, r3
 8014d48:	4413      	add	r3, r2
 8014d4a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	461a      	mov	r2, r3
 8014d52:	4613      	mov	r3, r2
 8014d54:	00db      	lsls	r3, r3, #3
 8014d56:	1a9a      	subs	r2, r3, r2
 8014d58:	4b3a      	ldr	r3, [pc, #232]	; (8014e44 <readCanToStructs+0x3824>)
 8014d5a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014d5e:	885b      	ldrh	r3, [r3, #2]
 8014d60:	4938      	ldr	r1, [pc, #224]	; (8014e44 <readCanToStructs+0x3824>)
 8014d62:	011b      	lsls	r3, r3, #4
 8014d64:	440b      	add	r3, r1
 8014d66:	330c      	adds	r3, #12
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	3b01      	subs	r3, #1
 8014d6c:	4413      	add	r3, r2
 8014d6e:	2b01      	cmp	r3, #1
 8014d70:	d919      	bls.n	8014da6 <readCanToStructs+0x3786>
					if(Debug_flag == 1)
 8014d72:	4b36      	ldr	r3, [pc, #216]	; (8014e4c <readCanToStructs+0x382c>)
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	d105      	bne.n	8014d86 <readCanToStructs+0x3766>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014d7a:	4b35      	ldr	r3, [pc, #212]	; (8014e50 <readCanToStructs+0x3830>)
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	4619      	mov	r1, r3
 8014d80:	4837      	ldr	r0, [pc, #220]	; (8014e60 <readCanToStructs+0x3840>)
 8014d82:	f011 fb89 	bl	8026498 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8014d86:	4b34      	ldr	r3, [pc, #208]	; (8014e58 <readCanToStructs+0x3838>)
 8014d88:	2201      	movs	r2, #1
 8014d8a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d90:	4a2d      	ldr	r2, [pc, #180]	; (8014e48 <readCanToStructs+0x3828>)
 8014d92:	f240 4116 	movw	r1, #1046	; 0x416
 8014d96:	fb01 f303 	mul.w	r3, r1, r3
 8014d9a:	4413      	add	r3, r2
 8014d9c:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014da0:	2200      	movs	r2, #0
 8014da2:	701a      	strb	r2, [r3, #0]
				break;
 8014da4:	e024      	b.n	8014df0 <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8014da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014daa:	4a27      	ldr	r2, [pc, #156]	; (8014e48 <readCanToStructs+0x3828>)
 8014dac:	f240 4116 	movw	r1, #1046	; 0x416
 8014db0:	fb01 f303 	mul.w	r3, r1, r3
 8014db4:	4413      	add	r3, r2
 8014db6:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8014dba:	2201      	movs	r2, #1
 8014dbc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8014dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dc2:	4921      	ldr	r1, [pc, #132]	; (8014e48 <readCanToStructs+0x3828>)
 8014dc4:	f240 4216 	movw	r2, #1046	; 0x416
 8014dc8:	fb03 f202 	mul.w	r2, r3, r2
 8014dcc:	440a      	add	r2, r1
 8014dce:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8014dd2:	7812      	ldrb	r2, [r2, #0]
 8014dd4:	3201      	adds	r2, #1
 8014dd6:	b2d0      	uxtb	r0, r2
 8014dd8:	4a1b      	ldr	r2, [pc, #108]	; (8014e48 <readCanToStructs+0x3828>)
 8014dda:	f240 4116 	movw	r1, #1046	; 0x416
 8014dde:	fb01 f303 	mul.w	r3, r1, r3
 8014de2:	4413      	add	r3, r2
 8014de4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014de8:	4602      	mov	r2, r0
 8014dea:	701a      	strb	r2, [r3, #0]
				break;
 8014dec:	e000      	b.n	8014df0 <readCanToStructs+0x37d0>
				break;
 8014dee:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8014df0:	4b14      	ldr	r3, [pc, #80]	; (8014e44 <readCanToStructs+0x3824>)
 8014df2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014df6:	885b      	ldrh	r3, [r3, #2]
 8014df8:	011b      	lsls	r3, r3, #4
 8014dfa:	4a12      	ldr	r2, [pc, #72]	; (8014e44 <readCanToStructs+0x3824>)
 8014dfc:	4413      	add	r3, r2
 8014dfe:	2210      	movs	r2, #16
 8014e00:	2100      	movs	r1, #0
 8014e02:	4618      	mov	r0, r3
 8014e04:	f011 fa60 	bl	80262c8 <memset>
			canRead.Out++;
 8014e08:	4b0e      	ldr	r3, [pc, #56]	; (8014e44 <readCanToStructs+0x3824>)
 8014e0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e0e:	885b      	ldrh	r3, [r3, #2]
 8014e10:	3301      	adds	r3, #1
 8014e12:	b29a      	uxth	r2, r3
 8014e14:	4b0b      	ldr	r3, [pc, #44]	; (8014e44 <readCanToStructs+0x3824>)
 8014e16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e1a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8014e1c:	4b09      	ldr	r3, [pc, #36]	; (8014e44 <readCanToStructs+0x3824>)
 8014e1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e22:	885b      	ldrh	r3, [r3, #2]
 8014e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e28:	d104      	bne.n	8014e34 <readCanToStructs+0x3814>
				canRead.Out = 0;
 8014e2a:	4b06      	ldr	r3, [pc, #24]	; (8014e44 <readCanToStructs+0x3824>)
 8014e2c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e30:	2200      	movs	r2, #0
 8014e32:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8014e34:	f7fc fb9e 	bl	8011574 <canDataReady>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	f47e af9b 	bne.w	8013d76 <readCanToStructs+0x2756>
		}
		/* __________ MEDHA _________ */
	}
	break;
 8014e40:	f000 bcdc 	b.w	80157fc <readCanToStructs+0x41dc>
 8014e44:	200071b4 	.word	0x200071b4
 8014e48:	20006988 	.word	0x20006988
 8014e4c:	20000bbb 	.word	0x20000bbb
 8014e50:	20000bb8 	.word	0x20000bb8
 8014e54:	0802b040 	.word	0x0802b040
 8014e58:	2000030b 	.word	0x2000030b
 8014e5c:	0802b054 	.word	0x0802b054
 8014e60:	0802b07c 	.word	0x0802b07c
	case KYOSAN:
	{
		/* __________ KYOSAN _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8014e64:	4bb3      	ldr	r3, [pc, #716]	; (8015134 <readCanToStructs+0x3b14>)
 8014e66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e6a:	885b      	ldrh	r3, [r3, #2]
 8014e6c:	4ab1      	ldr	r2, [pc, #708]	; (8015134 <readCanToStructs+0x3b14>)
 8014e6e:	011b      	lsls	r3, r3, #4
 8014e70:	4413      	add	r3, r2
 8014e72:	330f      	adds	r3, #15
 8014e74:	781b      	ldrb	r3, [r3, #0]
 8014e76:	3b01      	subs	r3, #1
 8014e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8014e7c:	4bad      	ldr	r3, [pc, #692]	; (8015134 <readCanToStructs+0x3b14>)
 8014e7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e82:	885b      	ldrh	r3, [r3, #2]
 8014e84:	4aab      	ldr	r2, [pc, #684]	; (8015134 <readCanToStructs+0x3b14>)
 8014e86:	011b      	lsls	r3, r3, #4
 8014e88:	4413      	add	r3, r2
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8014e90:	2b05      	cmp	r3, #5
 8014e92:	f200 8487 	bhi.w	80157a4 <readCanToStructs+0x4184>
 8014e96:	a201      	add	r2, pc, #4	; (adr r2, 8014e9c <readCanToStructs+0x387c>)
 8014e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e9c:	0801528d 	.word	0x0801528d
 8014ea0:	080157a5 	.word	0x080157a5
 8014ea4:	08014eb5 	.word	0x08014eb5
 8014ea8:	0801508d 	.word	0x0801508d
 8014eac:	0801543d 	.word	0x0801543d
 8014eb0:	080155df 	.word	0x080155df
			{

			case EIPC1_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 8014eb4:	4ba0      	ldr	r3, [pc, #640]	; (8015138 <readCanToStructs+0x3b18>)
 8014eb6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014eb8:	4b9e      	ldr	r3, [pc, #632]	; (8015134 <readCanToStructs+0x3b14>)
 8014eba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014ebe:	885b      	ldrh	r3, [r3, #2]
 8014ec0:	4a9c      	ldr	r2, [pc, #624]	; (8015134 <readCanToStructs+0x3b14>)
 8014ec2:	011b      	lsls	r3, r3, #4
 8014ec4:	4413      	add	r3, r2
 8014ec6:	3304      	adds	r3, #4
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014ece:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d110      	bne.n	8014ef8 <readCanToStructs+0x38d8>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8014ed6:	2240      	movs	r2, #64	; 0x40
 8014ed8:	2100      	movs	r1, #0
 8014eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014edc:	f011 f9f4 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ee4:	4a95      	ldr	r2, [pc, #596]	; (801513c <readCanToStructs+0x3b1c>)
 8014ee6:	f240 4116 	movw	r1, #1046	; 0x416
 8014eea:	fb01 f303 	mul.w	r3, r1, r3
 8014eee:	4413      	add	r3, r2
 8014ef0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8014ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014efc:	4a8f      	ldr	r2, [pc, #572]	; (801513c <readCanToStructs+0x3b1c>)
 8014efe:	f240 4116 	movw	r1, #1046	; 0x416
 8014f02:	fb01 f303 	mul.w	r3, r1, r3
 8014f06:	4413      	add	r3, r2
 8014f08:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014f0c:	781b      	ldrb	r3, [r3, #0]
 8014f0e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d015      	beq.n	8014f42 <readCanToStructs+0x3922>
				{
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8014f16:	488a      	ldr	r0, [pc, #552]	; (8015140 <readCanToStructs+0x3b20>)
 8014f18:	f011 fb5a 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8014f1c:	2240      	movs	r2, #64	; 0x40
 8014f1e:	2100      	movs	r1, #0
 8014f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f22:	f011 f9d1 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f2a:	4a84      	ldr	r2, [pc, #528]	; (801513c <readCanToStructs+0x3b1c>)
 8014f2c:	f240 4116 	movw	r1, #1046	; 0x416
 8014f30:	fb01 f303 	mul.w	r3, r1, r3
 8014f34:	4413      	add	r3, r2
 8014f36:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	701a      	strb	r2, [r3, #0]
					break;
 8014f3e:	f000 bc32 	b.w	80157a6 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014f42:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014f46:	4613      	mov	r3, r2
 8014f48:	00db      	lsls	r3, r3, #3
 8014f4a:	1a9b      	subs	r3, r3, r2
 8014f4c:	461a      	mov	r2, r3
 8014f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f50:	4413      	add	r3, r2
 8014f52:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014f54:	2301      	movs	r3, #1
 8014f56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014f5a:	e016      	b.n	8014f8a <readCanToStructs+0x396a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014f5c:	4b75      	ldr	r3, [pc, #468]	; (8015134 <readCanToStructs+0x3b14>)
 8014f5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f62:	885b      	ldrh	r3, [r3, #2]
 8014f64:	461a      	mov	r2, r3
 8014f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f6a:	4972      	ldr	r1, [pc, #456]	; (8015134 <readCanToStructs+0x3b14>)
 8014f6c:	0112      	lsls	r2, r2, #4
 8014f6e:	440a      	add	r2, r1
 8014f70:	4413      	add	r3, r2
 8014f72:	3304      	adds	r3, #4
 8014f74:	781a      	ldrb	r2, [r3, #0]
 8014f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f78:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f7c:	3301      	adds	r3, #1
 8014f7e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f84:	3301      	adds	r3, #1
 8014f86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014f8a:	4b6a      	ldr	r3, [pc, #424]	; (8015134 <readCanToStructs+0x3b14>)
 8014f8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f90:	885b      	ldrh	r3, [r3, #2]
 8014f92:	4a68      	ldr	r2, [pc, #416]	; (8015134 <readCanToStructs+0x3b14>)
 8014f94:	011b      	lsls	r3, r3, #4
 8014f96:	4413      	add	r3, r2
 8014f98:	330c      	adds	r3, #12
 8014f9a:	781b      	ldrb	r3, [r3, #0]
 8014f9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d3db      	bcc.n	8014f5c <readCanToStructs+0x393c>
				}
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8014fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fa8:	4a64      	ldr	r2, [pc, #400]	; (801513c <readCanToStructs+0x3b1c>)
 8014faa:	f240 4116 	movw	r1, #1046	; 0x416
 8014fae:	fb01 f303 	mul.w	r3, r1, r3
 8014fb2:	4413      	add	r3, r2
 8014fb4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014fb8:	781b      	ldrb	r3, [r3, #0]
 8014fba:	461a      	mov	r2, r3
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	00db      	lsls	r3, r3, #3
 8014fc0:	1a9a      	subs	r2, r3, r2
 8014fc2:	4b5c      	ldr	r3, [pc, #368]	; (8015134 <readCanToStructs+0x3b14>)
 8014fc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014fc8:	885b      	ldrh	r3, [r3, #2]
 8014fca:	495a      	ldr	r1, [pc, #360]	; (8015134 <readCanToStructs+0x3b14>)
 8014fcc:	011b      	lsls	r3, r3, #4
 8014fce:	440b      	add	r3, r1
 8014fd0:	330c      	adds	r3, #12
 8014fd2:	781b      	ldrb	r3, [r3, #0]
 8014fd4:	3b01      	subs	r3, #1
 8014fd6:	4413      	add	r3, r2
 8014fd8:	2b3f      	cmp	r3, #63	; 0x3f
 8014fda:	d933      	bls.n	8015044 <readCanToStructs+0x3a24>
				{
					if(Debug_flag == 1)
 8014fdc:	4b59      	ldr	r3, [pc, #356]	; (8015144 <readCanToStructs+0x3b24>)
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d105      	bne.n	8014ff0 <readCanToStructs+0x39d0>
					{
						printf("Rcv Relays1-O:%u\n",Kyosan_CANRelays.Index);
 8014fe4:	4b54      	ldr	r3, [pc, #336]	; (8015138 <readCanToStructs+0x3b18>)
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	4619      	mov	r1, r3
 8014fea:	4857      	ldr	r0, [pc, #348]	; (8015148 <readCanToStructs+0x3b28>)
 8014fec:	f011 fa54 	bl	8026498 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 8014ff0:	4a56      	ldr	r2, [pc, #344]	; (801514c <readCanToStructs+0x3b2c>)
 8014ff2:	4b51      	ldr	r3, [pc, #324]	; (8015138 <readCanToStructs+0x3b18>)
 8014ff4:	4610      	mov	r0, r2
 8014ff6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014ffa:	4602      	mov	r2, r0
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	f8d1 c000 	ldr.w	ip, [r1]
 8015002:	684e      	ldr	r6, [r1, #4]
 8015004:	688d      	ldr	r5, [r1, #8]
 8015006:	68c9      	ldr	r1, [r1, #12]
 8015008:	f8c2 c000 	str.w	ip, [r2]
 801500c:	6056      	str	r6, [r2, #4]
 801500e:	6095      	str	r5, [r2, #8]
 8015010:	60d1      	str	r1, [r2, #12]
 8015012:	3310      	adds	r3, #16
 8015014:	3010      	adds	r0, #16
 8015016:	42a3      	cmp	r3, r4
 8015018:	d1ef      	bne.n	8014ffa <readCanToStructs+0x39da>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 801501a:	f004 fa33 	bl	8019484 <HAL_GetTick>
 801501e:	4603      	mov	r3, r0
 8015020:	4a4b      	ldr	r2, [pc, #300]	; (8015150 <readCanToStructs+0x3b30>)
 8015022:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 8015024:	4b4b      	ldr	r3, [pc, #300]	; (8015154 <readCanToStructs+0x3b34>)
 8015026:	2201      	movs	r2, #1
 8015028:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801502a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801502e:	4a43      	ldr	r2, [pc, #268]	; (801513c <readCanToStructs+0x3b1c>)
 8015030:	f240 4116 	movw	r1, #1046	; 0x416
 8015034:	fb01 f303 	mul.w	r3, r1, r3
 8015038:	4413      	add	r3, r2
 801503a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801503e:	2200      	movs	r2, #0
 8015040:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 8015042:	e3b0      	b.n	80157a6 <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8015044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015048:	4a3c      	ldr	r2, [pc, #240]	; (801513c <readCanToStructs+0x3b1c>)
 801504a:	f240 4116 	movw	r1, #1046	; 0x416
 801504e:	fb01 f303 	mul.w	r3, r1, r3
 8015052:	4413      	add	r3, r2
 8015054:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8015058:	2201      	movs	r2, #1
 801505a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801505c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015060:	4936      	ldr	r1, [pc, #216]	; (801513c <readCanToStructs+0x3b1c>)
 8015062:	f240 4216 	movw	r2, #1046	; 0x416
 8015066:	fb03 f202 	mul.w	r2, r3, r2
 801506a:	440a      	add	r2, r1
 801506c:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8015070:	7812      	ldrb	r2, [r2, #0]
 8015072:	3201      	adds	r2, #1
 8015074:	b2d0      	uxtb	r0, r2
 8015076:	4a31      	ldr	r2, [pc, #196]	; (801513c <readCanToStructs+0x3b1c>)
 8015078:	f240 4116 	movw	r1, #1046	; 0x416
 801507c:	fb01 f303 	mul.w	r3, r1, r3
 8015080:	4413      	add	r3, r2
 8015082:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8015086:	4602      	mov	r2, r0
 8015088:	701a      	strb	r2, [r3, #0]
				break;
 801508a:	e38c      	b.n	80157a6 <readCanToStructs+0x4186>

			case EIPC2_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 801508c:	4b2a      	ldr	r3, [pc, #168]	; (8015138 <readCanToStructs+0x3b18>)
 801508e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015090:	4b28      	ldr	r3, [pc, #160]	; (8015134 <readCanToStructs+0x3b14>)
 8015092:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015096:	885b      	ldrh	r3, [r3, #2]
 8015098:	4a26      	ldr	r2, [pc, #152]	; (8015134 <readCanToStructs+0x3b14>)
 801509a:	011b      	lsls	r3, r3, #4
 801509c:	4413      	add	r3, r2
 801509e:	3304      	adds	r3, #4
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80150a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d110      	bne.n	80150d0 <readCanToStructs+0x3ab0>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80150ae:	2240      	movs	r2, #64	; 0x40
 80150b0:	2100      	movs	r1, #0
 80150b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150b4:	f011 f908 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80150b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150bc:	4a1f      	ldr	r2, [pc, #124]	; (801513c <readCanToStructs+0x3b1c>)
 80150be:	f240 4116 	movw	r1, #1046	; 0x416
 80150c2:	fb01 f303 	mul.w	r3, r1, r3
 80150c6:	4413      	add	r3, r2
 80150c8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80150cc:	2200      	movs	r2, #0
 80150ce:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80150d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150d4:	4a19      	ldr	r2, [pc, #100]	; (801513c <readCanToStructs+0x3b1c>)
 80150d6:	f240 4116 	movw	r1, #1046	; 0x416
 80150da:	fb01 f303 	mul.w	r3, r1, r3
 80150de:	4413      	add	r3, r2
 80150e0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d014      	beq.n	8015118 <readCanToStructs+0x3af8>
				{
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 80150ee:	481a      	ldr	r0, [pc, #104]	; (8015158 <readCanToStructs+0x3b38>)
 80150f0:	f011 fa6e 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80150f4:	2240      	movs	r2, #64	; 0x40
 80150f6:	2100      	movs	r1, #0
 80150f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150fa:	f011 f8e5 	bl	80262c8 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80150fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015102:	4a0e      	ldr	r2, [pc, #56]	; (801513c <readCanToStructs+0x3b1c>)
 8015104:	f240 4116 	movw	r1, #1046	; 0x416
 8015108:	fb01 f303 	mul.w	r3, r1, r3
 801510c:	4413      	add	r3, r2
 801510e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8015112:	2200      	movs	r2, #0
 8015114:	701a      	strb	r2, [r3, #0]
					break;
 8015116:	e346      	b.n	80157a6 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8015118:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801511c:	4613      	mov	r3, r2
 801511e:	00db      	lsls	r3, r3, #3
 8015120:	1a9b      	subs	r3, r3, r2
 8015122:	461a      	mov	r2, r3
 8015124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015126:	4413      	add	r3, r2
 8015128:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801512a:	2301      	movs	r3, #1
 801512c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015130:	e02b      	b.n	801518a <readCanToStructs+0x3b6a>
 8015132:	bf00      	nop
 8015134:	200071b4 	.word	0x200071b4
 8015138:	2000b474 	.word	0x2000b474
 801513c:	20006988 	.word	0x20006988
 8015140:	0802afb4 	.word	0x0802afb4
 8015144:	20000bbb 	.word	0x20000bbb
 8015148:	0802b200 	.word	0x0802b200
 801514c:	2000b434 	.word	0x2000b434
 8015150:	2000b538 	.word	0x2000b538
 8015154:	2000030b 	.word	0x2000030b
 8015158:	0802afe4 	.word	0x0802afe4
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801515c:	4bad      	ldr	r3, [pc, #692]	; (8015414 <readCanToStructs+0x3df4>)
 801515e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015162:	885b      	ldrh	r3, [r3, #2]
 8015164:	461a      	mov	r2, r3
 8015166:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801516a:	49aa      	ldr	r1, [pc, #680]	; (8015414 <readCanToStructs+0x3df4>)
 801516c:	0112      	lsls	r2, r2, #4
 801516e:	440a      	add	r2, r1
 8015170:	4413      	add	r3, r2
 8015172:	3304      	adds	r3, #4
 8015174:	781a      	ldrb	r2, [r3, #0]
 8015176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015178:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801517c:	3301      	adds	r3, #1
 801517e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015180:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015184:	3301      	adds	r3, #1
 8015186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801518a:	4ba2      	ldr	r3, [pc, #648]	; (8015414 <readCanToStructs+0x3df4>)
 801518c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015190:	885b      	ldrh	r3, [r3, #2]
 8015192:	4aa0      	ldr	r2, [pc, #640]	; (8015414 <readCanToStructs+0x3df4>)
 8015194:	011b      	lsls	r3, r3, #4
 8015196:	4413      	add	r3, r2
 8015198:	330c      	adds	r3, #12
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d3db      	bcc.n	801515c <readCanToStructs+0x3b3c>
				}
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 80151a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151a8:	4a9b      	ldr	r2, [pc, #620]	; (8015418 <readCanToStructs+0x3df8>)
 80151aa:	f240 4116 	movw	r1, #1046	; 0x416
 80151ae:	fb01 f303 	mul.w	r3, r1, r3
 80151b2:	4413      	add	r3, r2
 80151b4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	461a      	mov	r2, r3
 80151bc:	4613      	mov	r3, r2
 80151be:	00db      	lsls	r3, r3, #3
 80151c0:	1a9a      	subs	r2, r3, r2
 80151c2:	4b94      	ldr	r3, [pc, #592]	; (8015414 <readCanToStructs+0x3df4>)
 80151c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80151c8:	885b      	ldrh	r3, [r3, #2]
 80151ca:	4992      	ldr	r1, [pc, #584]	; (8015414 <readCanToStructs+0x3df4>)
 80151cc:	011b      	lsls	r3, r3, #4
 80151ce:	440b      	add	r3, r1
 80151d0:	330c      	adds	r3, #12
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	3b01      	subs	r3, #1
 80151d6:	4413      	add	r3, r2
 80151d8:	2b3f      	cmp	r3, #63	; 0x3f
 80151da:	d933      	bls.n	8015244 <readCanToStructs+0x3c24>
				{
					if(Debug_flag == 1)
 80151dc:	4b8f      	ldr	r3, [pc, #572]	; (801541c <readCanToStructs+0x3dfc>)
 80151de:	781b      	ldrb	r3, [r3, #0]
 80151e0:	2b01      	cmp	r3, #1
 80151e2:	d105      	bne.n	80151f0 <readCanToStructs+0x3bd0>
					{
						printf("Rcv Relays2-O:%u\n",Kyosan_CANRelays.Index);
 80151e4:	4b8e      	ldr	r3, [pc, #568]	; (8015420 <readCanToStructs+0x3e00>)
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	4619      	mov	r1, r3
 80151ea:	488e      	ldr	r0, [pc, #568]	; (8015424 <readCanToStructs+0x3e04>)
 80151ec:	f011 f954 	bl	8026498 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 80151f0:	4a8d      	ldr	r2, [pc, #564]	; (8015428 <readCanToStructs+0x3e08>)
 80151f2:	4b8b      	ldr	r3, [pc, #556]	; (8015420 <readCanToStructs+0x3e00>)
 80151f4:	4610      	mov	r0, r2
 80151f6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80151fa:	4602      	mov	r2, r0
 80151fc:	4619      	mov	r1, r3
 80151fe:	f8d1 c000 	ldr.w	ip, [r1]
 8015202:	684e      	ldr	r6, [r1, #4]
 8015204:	688d      	ldr	r5, [r1, #8]
 8015206:	68c9      	ldr	r1, [r1, #12]
 8015208:	f8c2 c000 	str.w	ip, [r2]
 801520c:	6056      	str	r6, [r2, #4]
 801520e:	6095      	str	r5, [r2, #8]
 8015210:	60d1      	str	r1, [r2, #12]
 8015212:	3310      	adds	r3, #16
 8015214:	3010      	adds	r0, #16
 8015216:	42a3      	cmp	r3, r4
 8015218:	d1ef      	bne.n	80151fa <readCanToStructs+0x3bda>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 801521a:	f004 f933 	bl	8019484 <HAL_GetTick>
 801521e:	4603      	mov	r3, r0
 8015220:	4a82      	ldr	r2, [pc, #520]	; (801542c <readCanToStructs+0x3e0c>)
 8015222:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 8015224:	4b82      	ldr	r3, [pc, #520]	; (8015430 <readCanToStructs+0x3e10>)
 8015226:	2201      	movs	r2, #1
 8015228:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801522a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801522e:	4a7a      	ldr	r2, [pc, #488]	; (8015418 <readCanToStructs+0x3df8>)
 8015230:	f240 4116 	movw	r1, #1046	; 0x416
 8015234:	fb01 f303 	mul.w	r3, r1, r3
 8015238:	4413      	add	r3, r2
 801523a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801523e:	2200      	movs	r2, #0
 8015240:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 8015242:	e2b0      	b.n	80157a6 <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8015244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015248:	4a73      	ldr	r2, [pc, #460]	; (8015418 <readCanToStructs+0x3df8>)
 801524a:	f240 4116 	movw	r1, #1046	; 0x416
 801524e:	fb01 f303 	mul.w	r3, r1, r3
 8015252:	4413      	add	r3, r2
 8015254:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8015258:	2201      	movs	r2, #1
 801525a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 801525c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015260:	496d      	ldr	r1, [pc, #436]	; (8015418 <readCanToStructs+0x3df8>)
 8015262:	f240 4216 	movw	r2, #1046	; 0x416
 8015266:	fb03 f202 	mul.w	r2, r3, r2
 801526a:	440a      	add	r2, r1
 801526c:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8015270:	7812      	ldrb	r2, [r2, #0]
 8015272:	3201      	adds	r2, #1
 8015274:	b2d0      	uxtb	r0, r2
 8015276:	4a68      	ldr	r2, [pc, #416]	; (8015418 <readCanToStructs+0x3df8>)
 8015278:	f240 4116 	movw	r1, #1046	; 0x416
 801527c:	fb01 f303 	mul.w	r3, r1, r3
 8015280:	4413      	add	r3, r2
 8015282:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8015286:	4602      	mov	r2, r0
 8015288:	701a      	strb	r2, [r3, #0]
				break;
 801528a:	e28c      	b.n	80157a6 <readCanToStructs+0x4186>

			case CAN_FAULT_INJECTION:

				uc_pp_charPtr = (uint8_t *)&KyosanFaultInjection_st;
 801528c:	4b69      	ldr	r3, [pc, #420]	; (8015434 <readCanToStructs+0x3e14>)
 801528e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015290:	4b60      	ldr	r3, [pc, #384]	; (8015414 <readCanToStructs+0x3df4>)
 8015292:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015296:	885b      	ldrh	r3, [r3, #2]
 8015298:	4a5e      	ldr	r2, [pc, #376]	; (8015414 <readCanToStructs+0x3df4>)
 801529a:	011b      	lsls	r3, r3, #4
 801529c:	4413      	add	r3, r2
 801529e:	3304      	adds	r3, #4
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80152a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d110      	bne.n	80152d0 <readCanToStructs+0x3cb0>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 80152ae:	2208      	movs	r2, #8
 80152b0:	2100      	movs	r1, #0
 80152b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152b4:	f011 f808 	bl	80262c8 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80152b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152bc:	4a56      	ldr	r2, [pc, #344]	; (8015418 <readCanToStructs+0x3df8>)
 80152be:	f240 4116 	movw	r1, #1046	; 0x416
 80152c2:	fb01 f303 	mul.w	r3, r1, r3
 80152c6:	4413      	add	r3, r2
 80152c8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80152cc:	2200      	movs	r2, #0
 80152ce:	701a      	strb	r2, [r3, #0]
				}
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80152d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152d4:	4a50      	ldr	r2, [pc, #320]	; (8015418 <readCanToStructs+0x3df8>)
 80152d6:	f240 4116 	movw	r1, #1046	; 0x416
 80152da:	fb01 f303 	mul.w	r3, r1, r3
 80152de:	4413      	add	r3, r2
 80152e0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80152e4:	781b      	ldrb	r3, [r3, #0]
 80152e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d011      	beq.n	8015312 <readCanToStructs+0x3cf2>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 80152ee:	2208      	movs	r2, #8
 80152f0:	2100      	movs	r1, #0
 80152f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152f4:	f010 ffe8 	bl	80262c8 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80152f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152fc:	4a46      	ldr	r2, [pc, #280]	; (8015418 <readCanToStructs+0x3df8>)
 80152fe:	f240 4116 	movw	r1, #1046	; 0x416
 8015302:	fb01 f303 	mul.w	r3, r1, r3
 8015306:	4413      	add	r3, r2
 8015308:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801530c:	2200      	movs	r2, #0
 801530e:	701a      	strb	r2, [r3, #0]
					break;
 8015310:	e249      	b.n	80157a6 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8015312:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015316:	4613      	mov	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	1a9b      	subs	r3, r3, r2
 801531c:	461a      	mov	r2, r3
 801531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015320:	4413      	add	r3, r2
 8015322:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015324:	2301      	movs	r3, #1
 8015326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801532a:	e016      	b.n	801535a <readCanToStructs+0x3d3a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801532c:	4b39      	ldr	r3, [pc, #228]	; (8015414 <readCanToStructs+0x3df4>)
 801532e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015332:	885b      	ldrh	r3, [r3, #2]
 8015334:	461a      	mov	r2, r3
 8015336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801533a:	4936      	ldr	r1, [pc, #216]	; (8015414 <readCanToStructs+0x3df4>)
 801533c:	0112      	lsls	r2, r2, #4
 801533e:	440a      	add	r2, r1
 8015340:	4413      	add	r3, r2
 8015342:	3304      	adds	r3, #4
 8015344:	781a      	ldrb	r2, [r3, #0]
 8015346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015348:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801534c:	3301      	adds	r3, #1
 801534e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015350:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015354:	3301      	adds	r3, #1
 8015356:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801535a:	4b2e      	ldr	r3, [pc, #184]	; (8015414 <readCanToStructs+0x3df4>)
 801535c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015360:	885b      	ldrh	r3, [r3, #2]
 8015362:	4a2c      	ldr	r2, [pc, #176]	; (8015414 <readCanToStructs+0x3df4>)
 8015364:	011b      	lsls	r3, r3, #4
 8015366:	4413      	add	r3, r2
 8015368:	330c      	adds	r3, #12
 801536a:	781b      	ldrb	r3, [r3, #0]
 801536c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015370:	429a      	cmp	r2, r3
 8015372:	d3db      	bcc.n	801532c <readCanToStructs+0x3d0c>
				}
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_FAULT_INJECTION_t))
 8015374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015378:	4a27      	ldr	r2, [pc, #156]	; (8015418 <readCanToStructs+0x3df8>)
 801537a:	f240 4116 	movw	r1, #1046	; 0x416
 801537e:	fb01 f303 	mul.w	r3, r1, r3
 8015382:	4413      	add	r3, r2
 8015384:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8015388:	781b      	ldrb	r3, [r3, #0]
 801538a:	461a      	mov	r2, r3
 801538c:	4613      	mov	r3, r2
 801538e:	00db      	lsls	r3, r3, #3
 8015390:	1a9a      	subs	r2, r3, r2
 8015392:	4b20      	ldr	r3, [pc, #128]	; (8015414 <readCanToStructs+0x3df4>)
 8015394:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015398:	885b      	ldrh	r3, [r3, #2]
 801539a:	491e      	ldr	r1, [pc, #120]	; (8015414 <readCanToStructs+0x3df4>)
 801539c:	011b      	lsls	r3, r3, #4
 801539e:	440b      	add	r3, r1
 80153a0:	330c      	adds	r3, #12
 80153a2:	781b      	ldrb	r3, [r3, #0]
 80153a4:	3b01      	subs	r3, #1
 80153a6:	4413      	add	r3, r2
 80153a8:	2b07      	cmp	r3, #7
 80153aa:	d90f      	bls.n	80153cc <readCanToStructs+0x3dac>
				{
					printf("Received CAN_FAULT_INJECTION\n");
 80153ac:	4822      	ldr	r0, [pc, #136]	; (8015438 <readCanToStructs+0x3e18>)
 80153ae:	f011 f90f 	bl	80265d0 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80153b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153b6:	4a18      	ldr	r2, [pc, #96]	; (8015418 <readCanToStructs+0x3df8>)
 80153b8:	f240 4116 	movw	r1, #1046	; 0x416
 80153bc:	fb01 f303 	mul.w	r3, r1, r3
 80153c0:	4413      	add	r3, r2
 80153c2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80153c6:	2200      	movs	r2, #0
 80153c8:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;
 80153ca:	e1ec      	b.n	80157a6 <readCanToStructs+0x4186>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80153cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153d0:	4a11      	ldr	r2, [pc, #68]	; (8015418 <readCanToStructs+0x3df8>)
 80153d2:	f240 4116 	movw	r1, #1046	; 0x416
 80153d6:	fb01 f303 	mul.w	r3, r1, r3
 80153da:	4413      	add	r3, r2
 80153dc:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80153e0:	2201      	movs	r2, #1
 80153e2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80153e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153e8:	490b      	ldr	r1, [pc, #44]	; (8015418 <readCanToStructs+0x3df8>)
 80153ea:	f240 4216 	movw	r2, #1046	; 0x416
 80153ee:	fb03 f202 	mul.w	r2, r3, r2
 80153f2:	440a      	add	r2, r1
 80153f4:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80153f8:	7812      	ldrb	r2, [r2, #0]
 80153fa:	3201      	adds	r2, #1
 80153fc:	b2d0      	uxtb	r0, r2
 80153fe:	4a06      	ldr	r2, [pc, #24]	; (8015418 <readCanToStructs+0x3df8>)
 8015400:	f240 4116 	movw	r1, #1046	; 0x416
 8015404:	fb01 f303 	mul.w	r3, r1, r3
 8015408:	4413      	add	r3, r2
 801540a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801540e:	4602      	mov	r2, r0
 8015410:	701a      	strb	r2, [r3, #0]
				break;
 8015412:	e1c8      	b.n	80157a6 <readCanToStructs+0x4186>
 8015414:	200071b4 	.word	0x200071b4
 8015418:	20006988 	.word	0x20006988
 801541c:	20000bbb 	.word	0x20000bbb
 8015420:	2000b474 	.word	0x2000b474
 8015424:	0802b214 	.word	0x0802b214
 8015428:	2000b434 	.word	0x2000b434
 801542c:	2000b538 	.word	0x2000b538
 8015430:	2000030b 	.word	0x2000030b
 8015434:	2000b3d8 	.word	0x2000b3d8
 8015438:	0802b1b0 	.word	0x0802b1b0

			case DAT_CRC_EXCHANGE_1:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 801543c:	4bbe      	ldr	r3, [pc, #760]	; (8015738 <readCanToStructs+0x4118>)
 801543e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015440:	4bbe      	ldr	r3, [pc, #760]	; (801573c <readCanToStructs+0x411c>)
 8015442:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015446:	885b      	ldrh	r3, [r3, #2]
 8015448:	4abc      	ldr	r2, [pc, #752]	; (801573c <readCanToStructs+0x411c>)
 801544a:	011b      	lsls	r3, r3, #4
 801544c:	4413      	add	r3, r2
 801544e:	3304      	adds	r3, #4
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015456:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801545a:	2b00      	cmp	r3, #0
 801545c:	d110      	bne.n	8015480 <readCanToStructs+0x3e60>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801545e:	2202      	movs	r2, #2
 8015460:	2100      	movs	r1, #0
 8015462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015464:	f010 ff30 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801546c:	4ab4      	ldr	r2, [pc, #720]	; (8015740 <readCanToStructs+0x4120>)
 801546e:	f240 4116 	movw	r1, #1046	; 0x416
 8015472:	fb01 f303 	mul.w	r3, r1, r3
 8015476:	4413      	add	r3, r2
 8015478:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801547c:	2200      	movs	r2, #0
 801547e:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8015480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015484:	4aae      	ldr	r2, [pc, #696]	; (8015740 <readCanToStructs+0x4120>)
 8015486:	f240 4116 	movw	r1, #1046	; 0x416
 801548a:	fb01 f303 	mul.w	r3, r1, r3
 801548e:	4413      	add	r3, r2
 8015490:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015494:	781b      	ldrb	r3, [r3, #0]
 8015496:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801549a:	429a      	cmp	r2, r3
 801549c:	d014      	beq.n	80154c8 <readCanToStructs+0x3ea8>
				{
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 801549e:	48a9      	ldr	r0, [pc, #676]	; (8015744 <readCanToStructs+0x4124>)
 80154a0:	f011 f896 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80154a4:	2202      	movs	r2, #2
 80154a6:	2100      	movs	r1, #0
 80154a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154aa:	f010 ff0d 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80154ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80154b2:	4aa3      	ldr	r2, [pc, #652]	; (8015740 <readCanToStructs+0x4120>)
 80154b4:	f240 4116 	movw	r1, #1046	; 0x416
 80154b8:	fb01 f303 	mul.w	r3, r1, r3
 80154bc:	4413      	add	r3, r2
 80154be:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80154c2:	2200      	movs	r2, #0
 80154c4:	701a      	strb	r2, [r3, #0]
					break;
 80154c6:	e16e      	b.n	80157a6 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80154c8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80154cc:	4613      	mov	r3, r2
 80154ce:	00db      	lsls	r3, r3, #3
 80154d0:	1a9b      	subs	r3, r3, r2
 80154d2:	461a      	mov	r2, r3
 80154d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d6:	4413      	add	r3, r2
 80154d8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80154da:	2301      	movs	r3, #1
 80154dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80154e0:	e016      	b.n	8015510 <readCanToStructs+0x3ef0>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80154e2:	4b96      	ldr	r3, [pc, #600]	; (801573c <readCanToStructs+0x411c>)
 80154e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80154e8:	885b      	ldrh	r3, [r3, #2]
 80154ea:	461a      	mov	r2, r3
 80154ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80154f0:	4992      	ldr	r1, [pc, #584]	; (801573c <readCanToStructs+0x411c>)
 80154f2:	0112      	lsls	r2, r2, #4
 80154f4:	440a      	add	r2, r1
 80154f6:	4413      	add	r3, r2
 80154f8:	3304      	adds	r3, #4
 80154fa:	781a      	ldrb	r2, [r3, #0]
 80154fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154fe:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8015500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015502:	3301      	adds	r3, #1
 8015504:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015506:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801550a:	3301      	adds	r3, #1
 801550c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015510:	4b8a      	ldr	r3, [pc, #552]	; (801573c <readCanToStructs+0x411c>)
 8015512:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015516:	885b      	ldrh	r3, [r3, #2]
 8015518:	4a88      	ldr	r2, [pc, #544]	; (801573c <readCanToStructs+0x411c>)
 801551a:	011b      	lsls	r3, r3, #4
 801551c:	4413      	add	r3, r2
 801551e:	330c      	adds	r3, #12
 8015520:	781b      	ldrb	r3, [r3, #0]
 8015522:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015526:	429a      	cmp	r2, r3
 8015528:	d3db      	bcc.n	80154e2 <readCanToStructs+0x3ec2>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 801552a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801552e:	4a84      	ldr	r2, [pc, #528]	; (8015740 <readCanToStructs+0x4120>)
 8015530:	f240 4116 	movw	r1, #1046	; 0x416
 8015534:	fb01 f303 	mul.w	r3, r1, r3
 8015538:	4413      	add	r3, r2
 801553a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	461a      	mov	r2, r3
 8015542:	4613      	mov	r3, r2
 8015544:	00db      	lsls	r3, r3, #3
 8015546:	1a9a      	subs	r2, r3, r2
 8015548:	4b7c      	ldr	r3, [pc, #496]	; (801573c <readCanToStructs+0x411c>)
 801554a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801554e:	885b      	ldrh	r3, [r3, #2]
 8015550:	497a      	ldr	r1, [pc, #488]	; (801573c <readCanToStructs+0x411c>)
 8015552:	011b      	lsls	r3, r3, #4
 8015554:	440b      	add	r3, r1
 8015556:	330c      	adds	r3, #12
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	3b01      	subs	r3, #1
 801555c:	4413      	add	r3, r2
 801555e:	2b01      	cmp	r3, #1
 8015560:	d919      	bls.n	8015596 <readCanToStructs+0x3f76>
				{
					if(Debug_flag == 1)
 8015562:	4b79      	ldr	r3, [pc, #484]	; (8015748 <readCanToStructs+0x4128>)
 8015564:	781b      	ldrb	r3, [r3, #0]
 8015566:	2b01      	cmp	r3, #1
 8015568:	d105      	bne.n	8015576 <readCanToStructs+0x3f56>
					{
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801556a:	4b73      	ldr	r3, [pc, #460]	; (8015738 <readCanToStructs+0x4118>)
 801556c:	881b      	ldrh	r3, [r3, #0]
 801556e:	4619      	mov	r1, r3
 8015570:	4876      	ldr	r0, [pc, #472]	; (801574c <readCanToStructs+0x412c>)
 8015572:	f010 ff91 	bl	8026498 <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 8015576:	4b76      	ldr	r3, [pc, #472]	; (8015750 <readCanToStructs+0x4130>)
 8015578:	2201      	movs	r2, #1
 801557a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 801557c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015580:	4a6f      	ldr	r2, [pc, #444]	; (8015740 <readCanToStructs+0x4120>)
 8015582:	f240 4116 	movw	r1, #1046	; 0x416
 8015586:	fb01 f303 	mul.w	r3, r1, r3
 801558a:	4413      	add	r3, r2
 801558c:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015590:	2200      	movs	r2, #0
 8015592:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
				}
				break;
 8015594:	e107      	b.n	80157a6 <readCanToStructs+0x4186>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8015596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801559a:	4a69      	ldr	r2, [pc, #420]	; (8015740 <readCanToStructs+0x4120>)
 801559c:	f240 4116 	movw	r1, #1046	; 0x416
 80155a0:	fb01 f303 	mul.w	r3, r1, r3
 80155a4:	4413      	add	r3, r2
 80155a6:	f203 4312 	addw	r3, r3, #1042	; 0x412
 80155aa:	2201      	movs	r2, #1
 80155ac:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 80155ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80155b2:	4963      	ldr	r1, [pc, #396]	; (8015740 <readCanToStructs+0x4120>)
 80155b4:	f240 4216 	movw	r2, #1046	; 0x416
 80155b8:	fb03 f202 	mul.w	r2, r3, r2
 80155bc:	440a      	add	r2, r1
 80155be:	f202 4213 	addw	r2, r2, #1043	; 0x413
 80155c2:	7812      	ldrb	r2, [r2, #0]
 80155c4:	3201      	adds	r2, #1
 80155c6:	b2d0      	uxtb	r0, r2
 80155c8:	4a5d      	ldr	r2, [pc, #372]	; (8015740 <readCanToStructs+0x4120>)
 80155ca:	f240 4116 	movw	r1, #1046	; 0x416
 80155ce:	fb01 f303 	mul.w	r3, r1, r3
 80155d2:	4413      	add	r3, r2
 80155d4:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80155d8:	4602      	mov	r2, r0
 80155da:	701a      	strb	r2, [r3, #0]
				break;
 80155dc:	e0e3      	b.n	80157a6 <readCanToStructs+0x4186>

			case DAT_CRC_EXCHANGE_2:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80155de:	4b56      	ldr	r3, [pc, #344]	; (8015738 <readCanToStructs+0x4118>)
 80155e0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80155e2:	4b56      	ldr	r3, [pc, #344]	; (801573c <readCanToStructs+0x411c>)
 80155e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80155e8:	885b      	ldrh	r3, [r3, #2]
 80155ea:	4a54      	ldr	r2, [pc, #336]	; (801573c <readCanToStructs+0x411c>)
 80155ec:	011b      	lsls	r3, r3, #4
 80155ee:	4413      	add	r3, r2
 80155f0:	3304      	adds	r3, #4
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80155f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d110      	bne.n	8015622 <readCanToStructs+0x4002>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015600:	2202      	movs	r2, #2
 8015602:	2100      	movs	r1, #0
 8015604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015606:	f010 fe5f 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801560a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801560e:	4a4c      	ldr	r2, [pc, #304]	; (8015740 <readCanToStructs+0x4120>)
 8015610:	f240 4116 	movw	r1, #1046	; 0x416
 8015614:	fb01 f303 	mul.w	r3, r1, r3
 8015618:	4413      	add	r3, r2
 801561a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801561e:	2200      	movs	r2, #0
 8015620:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8015622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015626:	4a46      	ldr	r2, [pc, #280]	; (8015740 <readCanToStructs+0x4120>)
 8015628:	f240 4116 	movw	r1, #1046	; 0x416
 801562c:	fb01 f303 	mul.w	r3, r1, r3
 8015630:	4413      	add	r3, r2
 8015632:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015636:	781b      	ldrb	r3, [r3, #0]
 8015638:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801563c:	429a      	cmp	r2, r3
 801563e:	d014      	beq.n	801566a <readCanToStructs+0x404a>
				{
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8015640:	4844      	ldr	r0, [pc, #272]	; (8015754 <readCanToStructs+0x4134>)
 8015642:	f010 ffc5 	bl	80265d0 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015646:	2202      	movs	r2, #2
 8015648:	2100      	movs	r1, #0
 801564a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801564c:	f010 fe3c 	bl	80262c8 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015650:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015654:	4a3a      	ldr	r2, [pc, #232]	; (8015740 <readCanToStructs+0x4120>)
 8015656:	f240 4116 	movw	r1, #1046	; 0x416
 801565a:	fb01 f303 	mul.w	r3, r1, r3
 801565e:	4413      	add	r3, r2
 8015660:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015664:	2200      	movs	r2, #0
 8015666:	701a      	strb	r2, [r3, #0]
					break;
 8015668:	e09d      	b.n	80157a6 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 801566a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801566e:	4613      	mov	r3, r2
 8015670:	00db      	lsls	r3, r3, #3
 8015672:	1a9b      	subs	r3, r3, r2
 8015674:	461a      	mov	r2, r3
 8015676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015678:	4413      	add	r3, r2
 801567a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801567c:	2301      	movs	r3, #1
 801567e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015682:	e016      	b.n	80156b2 <readCanToStructs+0x4092>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8015684:	4b2d      	ldr	r3, [pc, #180]	; (801573c <readCanToStructs+0x411c>)
 8015686:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801568a:	885b      	ldrh	r3, [r3, #2]
 801568c:	461a      	mov	r2, r3
 801568e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015692:	492a      	ldr	r1, [pc, #168]	; (801573c <readCanToStructs+0x411c>)
 8015694:	0112      	lsls	r2, r2, #4
 8015696:	440a      	add	r2, r1
 8015698:	4413      	add	r3, r2
 801569a:	3304      	adds	r3, #4
 801569c:	781a      	ldrb	r2, [r3, #0]
 801569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80156a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a4:	3301      	adds	r3, #1
 80156a6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80156a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80156ac:	3301      	adds	r3, #1
 80156ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80156b2:	4b22      	ldr	r3, [pc, #136]	; (801573c <readCanToStructs+0x411c>)
 80156b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80156b8:	885b      	ldrh	r3, [r3, #2]
 80156ba:	4a20      	ldr	r2, [pc, #128]	; (801573c <readCanToStructs+0x411c>)
 80156bc:	011b      	lsls	r3, r3, #4
 80156be:	4413      	add	r3, r2
 80156c0:	330c      	adds	r3, #12
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d3db      	bcc.n	8015684 <readCanToStructs+0x4064>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80156cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80156d0:	4a1b      	ldr	r2, [pc, #108]	; (8015740 <readCanToStructs+0x4120>)
 80156d2:	f240 4116 	movw	r1, #1046	; 0x416
 80156d6:	fb01 f303 	mul.w	r3, r1, r3
 80156da:	4413      	add	r3, r2
 80156dc:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	461a      	mov	r2, r3
 80156e4:	4613      	mov	r3, r2
 80156e6:	00db      	lsls	r3, r3, #3
 80156e8:	1a9a      	subs	r2, r3, r2
 80156ea:	4b14      	ldr	r3, [pc, #80]	; (801573c <readCanToStructs+0x411c>)
 80156ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80156f0:	885b      	ldrh	r3, [r3, #2]
 80156f2:	4912      	ldr	r1, [pc, #72]	; (801573c <readCanToStructs+0x411c>)
 80156f4:	011b      	lsls	r3, r3, #4
 80156f6:	440b      	add	r3, r1
 80156f8:	330c      	adds	r3, #12
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	3b01      	subs	r3, #1
 80156fe:	4413      	add	r3, r2
 8015700:	2b01      	cmp	r3, #1
 8015702:	d92b      	bls.n	801575c <readCanToStructs+0x413c>
				{
					if(Debug_flag == 1)
 8015704:	4b10      	ldr	r3, [pc, #64]	; (8015748 <readCanToStructs+0x4128>)
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	2b01      	cmp	r3, #1
 801570a:	d105      	bne.n	8015718 <readCanToStructs+0x40f8>
					{
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801570c:	4b0a      	ldr	r3, [pc, #40]	; (8015738 <readCanToStructs+0x4118>)
 801570e:	881b      	ldrh	r3, [r3, #0]
 8015710:	4619      	mov	r1, r3
 8015712:	4811      	ldr	r0, [pc, #68]	; (8015758 <readCanToStructs+0x4138>)
 8015714:	f010 fec0 	bl	8026498 <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 8015718:	4b0d      	ldr	r3, [pc, #52]	; (8015750 <readCanToStructs+0x4130>)
 801571a:	2201      	movs	r2, #1
 801571c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801571e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015722:	4a07      	ldr	r2, [pc, #28]	; (8015740 <readCanToStructs+0x4120>)
 8015724:	f240 4116 	movw	r1, #1046	; 0x416
 8015728:	fb01 f303 	mul.w	r3, r1, r3
 801572c:	4413      	add	r3, r2
 801572e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015732:	2200      	movs	r2, #0
 8015734:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;
 8015736:	e036      	b.n	80157a6 <readCanToStructs+0x4186>
 8015738:	20000bb8 	.word	0x20000bb8
 801573c:	200071b4 	.word	0x200071b4
 8015740:	20006988 	.word	0x20006988
 8015744:	0802b018 	.word	0x0802b018
 8015748:	20000bbb 	.word	0x20000bbb
 801574c:	0802b040 	.word	0x0802b040
 8015750:	2000030b 	.word	0x2000030b
 8015754:	0802b054 	.word	0x0802b054
 8015758:	0802b07c 	.word	0x0802b07c
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 801575c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015760:	4a28      	ldr	r2, [pc, #160]	; (8015804 <readCanToStructs+0x41e4>)
 8015762:	f240 4116 	movw	r1, #1046	; 0x416
 8015766:	fb01 f303 	mul.w	r3, r1, r3
 801576a:	4413      	add	r3, r2
 801576c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8015770:	2201      	movs	r2, #1
 8015772:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8015774:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015778:	4922      	ldr	r1, [pc, #136]	; (8015804 <readCanToStructs+0x41e4>)
 801577a:	f240 4216 	movw	r2, #1046	; 0x416
 801577e:	fb03 f202 	mul.w	r2, r3, r2
 8015782:	440a      	add	r2, r1
 8015784:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8015788:	7812      	ldrb	r2, [r2, #0]
 801578a:	3201      	adds	r2, #1
 801578c:	b2d0      	uxtb	r0, r2
 801578e:	4a1d      	ldr	r2, [pc, #116]	; (8015804 <readCanToStructs+0x41e4>)
 8015790:	f240 4116 	movw	r1, #1046	; 0x416
 8015794:	fb01 f303 	mul.w	r3, r1, r3
 8015798:	4413      	add	r3, r2
 801579a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801579e:	4602      	mov	r2, r0
 80157a0:	701a      	strb	r2, [r3, #0]
				break;
 80157a2:	e000      	b.n	80157a6 <readCanToStructs+0x4186>

			default:
				break;
 80157a4:	bf00      	nop
			}

			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80157a6:	4b18      	ldr	r3, [pc, #96]	; (8015808 <readCanToStructs+0x41e8>)
 80157a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80157ac:	885b      	ldrh	r3, [r3, #2]
 80157ae:	011b      	lsls	r3, r3, #4
 80157b0:	4a15      	ldr	r2, [pc, #84]	; (8015808 <readCanToStructs+0x41e8>)
 80157b2:	4413      	add	r3, r2
 80157b4:	2210      	movs	r2, #16
 80157b6:	2100      	movs	r1, #0
 80157b8:	4618      	mov	r0, r3
 80157ba:	f010 fd85 	bl	80262c8 <memset>
			canRead.Out++;
 80157be:	4b12      	ldr	r3, [pc, #72]	; (8015808 <readCanToStructs+0x41e8>)
 80157c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80157c4:	885b      	ldrh	r3, [r3, #2]
 80157c6:	3301      	adds	r3, #1
 80157c8:	b29a      	uxth	r2, r3
 80157ca:	4b0f      	ldr	r3, [pc, #60]	; (8015808 <readCanToStructs+0x41e8>)
 80157cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80157d0:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80157d2:	4b0d      	ldr	r3, [pc, #52]	; (8015808 <readCanToStructs+0x41e8>)
 80157d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80157d8:	885b      	ldrh	r3, [r3, #2]
 80157da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80157de:	d104      	bne.n	80157ea <readCanToStructs+0x41ca>
				canRead.Out = 0;
 80157e0:	4b09      	ldr	r3, [pc, #36]	; (8015808 <readCanToStructs+0x41e8>)
 80157e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80157e6:	2200      	movs	r2, #0
 80157e8:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80157ea:	f7fb fec3 	bl	8011574 <canDataReady>
 80157ee:	4603      	mov	r3, r0
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	f47f ab37 	bne.w	8014e64 <readCanToStructs+0x3844>
			/* Protocol Type */
		}
	}
	default:
		break;
 80157f6:	bf00      	nop
 80157f8:	e000      	b.n	80157fc <readCanToStructs+0x41dc>
			return;
 80157fa:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 80157fc:	373c      	adds	r7, #60	; 0x3c
 80157fe:	46bd      	mov	sp, r7
 8015800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015802:	bf00      	nop
 8015804:	20006988 	.word	0x20006988
 8015808:	200071b4 	.word	0x200071b4

0801580c <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
 8015814:	460b      	mov	r3, r1
 8015816:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8015818:	2300      	movs	r3, #0
 801581a:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 801581c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015820:	461a      	mov	r2, r3
 8015822:	6879      	ldr	r1, [r7, #4]
 8015824:	2000      	movs	r0, #0
 8015826:	f000 f845 	bl	80158b4 <GetCRC16>
 801582a:	4603      	mov	r3, r0
 801582c:	461a      	mov	r2, r3
 801582e:	4b1d      	ldr	r3, [pc, #116]	; (80158a4 <CheckCRC+0x98>)
 8015830:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8015832:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015836:	687a      	ldr	r2, [r7, #4]
 8015838:	4413      	add	r3, r2
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	b29a      	uxth	r2, r3
 801583e:	4b1a      	ldr	r3, [pc, #104]	; (80158a8 <CheckCRC+0x9c>)
 8015840:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8015842:	4b19      	ldr	r3, [pc, #100]	; (80158a8 <CheckCRC+0x9c>)
 8015844:	881b      	ldrh	r3, [r3, #0]
 8015846:	021b      	lsls	r3, r3, #8
 8015848:	b29a      	uxth	r2, r3
 801584a:	4b17      	ldr	r3, [pc, #92]	; (80158a8 <CheckCRC+0x9c>)
 801584c:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 801584e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015852:	3301      	adds	r3, #1
 8015854:	687a      	ldr	r2, [r7, #4]
 8015856:	4413      	add	r3, r2
 8015858:	781b      	ldrb	r3, [r3, #0]
 801585a:	b29a      	uxth	r2, r3
 801585c:	4b12      	ldr	r3, [pc, #72]	; (80158a8 <CheckCRC+0x9c>)
 801585e:	881b      	ldrh	r3, [r3, #0]
 8015860:	4313      	orrs	r3, r2
 8015862:	b29a      	uxth	r2, r3
 8015864:	4b10      	ldr	r3, [pc, #64]	; (80158a8 <CheckCRC+0x9c>)
 8015866:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8015868:	4b0f      	ldr	r3, [pc, #60]	; (80158a8 <CheckCRC+0x9c>)
 801586a:	881a      	ldrh	r2, [r3, #0]
 801586c:	4b0d      	ldr	r3, [pc, #52]	; (80158a4 <CheckCRC+0x98>)
 801586e:	881b      	ldrh	r3, [r3, #0]
 8015870:	429a      	cmp	r2, r3
 8015872:	d105      	bne.n	8015880 <CheckCRC+0x74>
	{
		retVal = 1;
 8015874:	2301      	movs	r3, #1
 8015876:	81fb      	strh	r3, [r7, #14]
		return k;
 8015878:	4b0b      	ldr	r3, [pc, #44]	; (80158a8 <CheckCRC+0x9c>)
 801587a:	881b      	ldrh	r3, [r3, #0]
 801587c:	b21b      	sxth	r3, r3
 801587e:	e00d      	b.n	801589c <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8015880:	4b08      	ldr	r3, [pc, #32]	; (80158a4 <CheckCRC+0x98>)
 8015882:	881b      	ldrh	r3, [r3, #0]
 8015884:	4619      	mov	r1, r3
 8015886:	4809      	ldr	r0, [pc, #36]	; (80158ac <CheckCRC+0xa0>)
 8015888:	f010 fe06 	bl	8026498 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 801588c:	4b06      	ldr	r3, [pc, #24]	; (80158a8 <CheckCRC+0x9c>)
 801588e:	881b      	ldrh	r3, [r3, #0]
 8015890:	4619      	mov	r1, r3
 8015892:	4807      	ldr	r0, [pc, #28]	; (80158b0 <CheckCRC+0xa4>)
 8015894:	f010 fe00 	bl	8026498 <iprintf>
	return retVal;
 8015898:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801589c:	4618      	mov	r0, r3
 801589e:	3710      	adds	r7, #16
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}
 80158a4:	2000b310 	.word	0x2000b310
 80158a8:	2000b312 	.word	0x2000b312
 80158ac:	0802b228 	.word	0x0802b228
 80158b0:	0802b240 	.word	0x0802b240

080158b4 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 80158b4:	b480      	push	{r7}
 80158b6:	b085      	sub	sp, #20
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	4603      	mov	r3, r0
 80158bc:	6039      	str	r1, [r7, #0]
 80158be:	80fb      	strh	r3, [r7, #6]
 80158c0:	4613      	mov	r3, r2
 80158c2:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 80158c4:	88fb      	ldrh	r3, [r7, #6]
 80158c6:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 80158c8:	e038      	b.n	801593c <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 80158ca:	89fb      	ldrh	r3, [r7, #14]
 80158cc:	f003 030f 	and.w	r3, r3, #15
 80158d0:	4a22      	ldr	r2, [pc, #136]	; (801595c <GetCRC16+0xa8>)
 80158d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80158d6:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 80158d8:	89fb      	ldrh	r3, [r7, #14]
 80158da:	091b      	lsrs	r3, r3, #4
 80158dc:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 80158de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80158e2:	89bb      	ldrh	r3, [r7, #12]
 80158e4:	4053      	eors	r3, r2
 80158e6:	b21a      	sxth	r2, r3
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	f003 030f 	and.w	r3, r3, #15
 80158f0:	491a      	ldr	r1, [pc, #104]	; (801595c <GetCRC16+0xa8>)
 80158f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80158f6:	b21b      	sxth	r3, r3
 80158f8:	4053      	eors	r3, r2
 80158fa:	b21b      	sxth	r3, r3
 80158fc:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 80158fe:	89fb      	ldrh	r3, [r7, #14]
 8015900:	f003 030f 	and.w	r3, r3, #15
 8015904:	4a15      	ldr	r2, [pc, #84]	; (801595c <GetCRC16+0xa8>)
 8015906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801590a:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 801590c:	89fb      	ldrh	r3, [r7, #14]
 801590e:	091b      	lsrs	r3, r3, #4
 8015910:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8015912:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015916:	89bb      	ldrh	r3, [r7, #12]
 8015918:	4053      	eors	r3, r2
 801591a:	b21a      	sxth	r2, r3
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	091b      	lsrs	r3, r3, #4
 8015922:	b2db      	uxtb	r3, r3
 8015924:	f003 030f 	and.w	r3, r3, #15
 8015928:	490c      	ldr	r1, [pc, #48]	; (801595c <GetCRC16+0xa8>)
 801592a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801592e:	b21b      	sxth	r3, r3
 8015930:	4053      	eors	r3, r2
 8015932:	b21b      	sxth	r3, r3
 8015934:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	3301      	adds	r3, #1
 801593a:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 801593c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015940:	b29a      	uxth	r2, r3
 8015942:	3a01      	subs	r2, #1
 8015944:	b292      	uxth	r2, r2
 8015946:	80ba      	strh	r2, [r7, #4]
 8015948:	2b00      	cmp	r3, #0
 801594a:	dcbe      	bgt.n	80158ca <GetCRC16+0x16>
	}
	return(uiCrc);
 801594c:	89fb      	ldrh	r3, [r7, #14]
}
 801594e:	4618      	mov	r0, r3
 8015950:	3714      	adds	r7, #20
 8015952:	46bd      	mov	sp, r7
 8015954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015958:	4770      	bx	lr
 801595a:	bf00      	nop
 801595c:	0802d9e8 	.word	0x0802d9e8

08015960 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	460b      	mov	r3, r1
 801596a:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 801596c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015970:	461a      	mov	r2, r3
 8015972:	6879      	ldr	r1, [r7, #4]
 8015974:	2000      	movs	r0, #0
 8015976:	f7ff ff9d 	bl	80158b4 <GetCRC16>
 801597a:	4603      	mov	r3, r0
 801597c:	461a      	mov	r2, r3
 801597e:	4b11      	ldr	r3, [pc, #68]	; (80159c4 <ComputeCRC+0x64>)
 8015980:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8015982:	4b10      	ldr	r3, [pc, #64]	; (80159c4 <ComputeCRC+0x64>)
 8015984:	881a      	ldrh	r2, [r3, #0]
 8015986:	4b10      	ldr	r3, [pc, #64]	; (80159c8 <ComputeCRC+0x68>)
 8015988:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 801598a:	4b0e      	ldr	r3, [pc, #56]	; (80159c4 <ComputeCRC+0x64>)
 801598c:	8819      	ldrh	r1, [r3, #0]
 801598e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015992:	3301      	adds	r3, #1
 8015994:	687a      	ldr	r2, [r7, #4]
 8015996:	4413      	add	r3, r2
 8015998:	b2ca      	uxtb	r2, r1
 801599a:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 801599c:	4b09      	ldr	r3, [pc, #36]	; (80159c4 <ComputeCRC+0x64>)
 801599e:	881b      	ldrh	r3, [r3, #0]
 80159a0:	0a1b      	lsrs	r3, r3, #8
 80159a2:	b29a      	uxth	r2, r3
 80159a4:	4b07      	ldr	r3, [pc, #28]	; (80159c4 <ComputeCRC+0x64>)
 80159a6:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 80159a8:	4b06      	ldr	r3, [pc, #24]	; (80159c4 <ComputeCRC+0x64>)
 80159aa:	8819      	ldrh	r1, [r3, #0]
 80159ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	4413      	add	r3, r2
 80159b4:	b2ca      	uxtb	r2, r1
 80159b6:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 80159b8:	4b03      	ldr	r3, [pc, #12]	; (80159c8 <ComputeCRC+0x68>)
 80159ba:	881b      	ldrh	r3, [r3, #0]
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3708      	adds	r7, #8
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	2000b314 	.word	0x2000b314
 80159c8:	2000b316 	.word	0x2000b316

080159cc <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b087      	sub	sp, #28
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 80159d4:	2300      	movs	r3, #0
 80159d6:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 80159d8:	2300      	movs	r3, #0
 80159da:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 80159dc:	2300      	movs	r3, #0
 80159de:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	005b      	lsls	r3, r3, #1
 80159e4:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 80159e6:	2300      	movs	r3, #0
 80159e8:	60fb      	str	r3, [r7, #12]
 80159ea:	e012      	b.n	8015a12 <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 80159ec:	693b      	ldr	r3, [r7, #16]
 80159ee:	f003 0301 	and.w	r3, r3, #1
 80159f2:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	f1c3 031f 	rsb	r3, r3, #31
 80159fa:	68ba      	ldr	r2, [r7, #8]
 80159fc:	fa02 f303 	lsl.w	r3, r2, r3
 8015a00:	697a      	ldr	r2, [r7, #20]
 8015a02:	4313      	orrs	r3, r2
 8015a04:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	085b      	lsrs	r3, r3, #1
 8015a0a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	3301      	adds	r3, #1
 8015a10:	60fb      	str	r3, [r7, #12]
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	2b1f      	cmp	r3, #31
 8015a16:	dde9      	ble.n	80159ec <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8015a18:	697b      	ldr	r3, [r7, #20]
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	371c      	adds	r7, #28
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a24:	4770      	bx	lr
	...

08015a28 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b088      	sub	sp, #32
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
 8015a30:	460b      	mov	r3, r1
 8015a32:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8015a34:	2300      	movs	r3, #0
 8015a36:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	613b      	str	r3, [r7, #16]
	int i=0;
 8015a40:	2300      	movs	r3, #0
 8015a42:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8015a44:	4b26      	ldr	r3, [pc, #152]	; (8015ae0 <CalculateDirectReverseCrc+0xb8>)
 8015a46:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 8015a48:	68f8      	ldr	r0, [r7, #12]
 8015a4a:	f7ff ffbf 	bl	80159cc <ReverseCRCPolynomial>
 8015a4e:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8015a50:	2300      	movs	r3, #0
 8015a52:	61bb      	str	r3, [r7, #24]
 8015a54:	e00d      	b.n	8015a72 <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8015a56:	69f8      	ldr	r0, [r7, #28]
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	781b      	ldrb	r3, [r3, #0]
 8015a60:	697a      	ldr	r2, [r7, #20]
 8015a62:	4619      	mov	r1, r3
 8015a64:	f000 f844 	bl	8015af0 <AnsoldoCrc>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8015a6c:	69bb      	ldr	r3, [r7, #24]
 8015a6e:	3301      	adds	r3, #1
 8015a70:	61bb      	str	r3, [r7, #24]
 8015a72:	887b      	ldrh	r3, [r7, #2]
 8015a74:	69ba      	ldr	r2, [r7, #24]
 8015a76:	429a      	cmp	r2, r3
 8015a78:	dbed      	blt.n	8015a56 <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8015a7a:	69fb      	ldr	r3, [r7, #28]
 8015a7c:	061b      	lsls	r3, r3, #24
 8015a7e:	693a      	ldr	r2, [r7, #16]
 8015a80:	4313      	orrs	r3, r2
 8015a82:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8015a84:	69fb      	ldr	r3, [r7, #28]
 8015a86:	021b      	lsls	r3, r3, #8
 8015a88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015a8c:	693a      	ldr	r2, [r7, #16]
 8015a8e:	4313      	orrs	r3, r2
 8015a90:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8015a92:	69fb      	ldr	r3, [r7, #28]
 8015a94:	121b      	asrs	r3, r3, #8
 8015a96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015a9a:	693a      	ldr	r2, [r7, #16]
 8015a9c:	4313      	orrs	r3, r2
 8015a9e:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8015aa0:	69fb      	ldr	r3, [r7, #28]
 8015aa2:	0e1a      	lsrs	r2, r3, #24
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	4313      	orrs	r3, r2
 8015aa8:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8015aaa:	4b0e      	ldr	r3, [pc, #56]	; (8015ae4 <CalculateDirectReverseCrc+0xbc>)
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	2b01      	cmp	r3, #1
 8015ab0:	d110      	bne.n	8015ad4 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8015ab2:	480d      	ldr	r0, [pc, #52]	; (8015ae8 <CalculateDirectReverseCrc+0xc0>)
 8015ab4:	f008 f998 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8015ab8:	4601      	mov	r1, r0
 8015aba:	4b0c      	ldr	r3, [pc, #48]	; (8015aec <CalculateDirectReverseCrc+0xc4>)
 8015abc:	fba3 2301 	umull	r2, r3, r3, r1
 8015ac0:	08da      	lsrs	r2, r3, #3
 8015ac2:	4613      	mov	r3, r2
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	4413      	add	r3, r2
 8015ac8:	005b      	lsls	r3, r3, #1
 8015aca:	1aca      	subs	r2, r1, r3
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	4413      	add	r3, r2
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	e000      	b.n	8015ad6 <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8015ad4:	693b      	ldr	r3, [r7, #16]
}
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	3720      	adds	r7, #32
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}
 8015ade:	bf00      	nop
 8015ae0:	d20d8a81 	.word	0xd20d8a81
 8015ae4:	200024af 	.word	0x200024af
 8015ae8:	2000bc44 	.word	0x2000bc44
 8015aec:	cccccccd 	.word	0xcccccccd

08015af0 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8015af0:	b480      	push	{r7}
 8015af2:	b08b      	sub	sp, #44	; 0x2c
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	60f8      	str	r0, [r7, #12]
 8015af8:	460b      	mov	r3, r1
 8015afa:	607a      	str	r2, [r7, #4]
 8015afc:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8015afe:	7afb      	ldrb	r3, [r7, #11]
 8015b00:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8015b02:	2301      	movs	r3, #1
 8015b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b08:	e01d      	b.n	8015b46 <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	f003 0301 	and.w	r3, r3, #1
 8015b10:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8015b12:	6a3b      	ldr	r3, [r7, #32]
 8015b14:	f003 0301 	and.w	r3, r3, #1
 8015b18:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	085b      	lsrs	r3, r3, #1
 8015b1e:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8015b20:	69fa      	ldr	r2, [r7, #28]
 8015b22:	69bb      	ldr	r3, [r7, #24]
 8015b24:	4053      	eors	r3, r2
 8015b26:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8015b28:	697b      	ldr	r3, [r7, #20]
 8015b2a:	2b01      	cmp	r3, #1
 8015b2c:	d103      	bne.n	8015b36 <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8015b2e:	68fa      	ldr	r2, [r7, #12]
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	4053      	eors	r3, r2
 8015b34:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8015b36:	6a3b      	ldr	r3, [r7, #32]
 8015b38:	085b      	lsrs	r3, r3, #1
 8015b3a:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8015b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b40:	3301      	adds	r3, #1
 8015b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b4a:	2b08      	cmp	r3, #8
 8015b4c:	d9dd      	bls.n	8015b0a <AnsoldoCrc+0x1a>
	}
	return (Crc);
 8015b4e:	68fb      	ldr	r3, [r7, #12]
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	372c      	adds	r7, #44	; 0x2c
 8015b54:	46bd      	mov	sp, r7
 8015b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b5a:	4770      	bx	lr

08015b5c <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b090      	sub	sp, #64	; 0x40
 8015b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015b66:	2200      	movs	r2, #0
 8015b68:	601a      	str	r2, [r3, #0]
 8015b6a:	605a      	str	r2, [r3, #4]
 8015b6c:	609a      	str	r2, [r3, #8]
 8015b6e:	60da      	str	r2, [r3, #12]
 8015b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8015b72:	4bb2      	ldr	r3, [pc, #712]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b76:	4ab1      	ldr	r2, [pc, #708]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8015b7e:	4baf      	ldr	r3, [pc, #700]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8015b8a:	4bac      	ldr	r3, [pc, #688]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b8e:	4aab      	ldr	r2, [pc, #684]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015b90:	f043 0320 	orr.w	r3, r3, #32
 8015b94:	6313      	str	r3, [r2, #48]	; 0x30
 8015b96:	4ba9      	ldr	r3, [pc, #676]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b9a:	f003 0320 	and.w	r3, r3, #32
 8015b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8015ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8015ba2:	4ba6      	ldr	r3, [pc, #664]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ba6:	4aa5      	ldr	r2, [pc, #660]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bac:	6313      	str	r3, [r2, #48]	; 0x30
 8015bae:	4ba3      	ldr	r3, [pc, #652]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015bb6:	623b      	str	r3, [r7, #32]
 8015bb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015bba:	4ba0      	ldr	r3, [pc, #640]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bbe:	4a9f      	ldr	r2, [pc, #636]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bc0:	f043 0304 	orr.w	r3, r3, #4
 8015bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8015bc6:	4b9d      	ldr	r3, [pc, #628]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bca:	f003 0304 	and.w	r3, r3, #4
 8015bce:	61fb      	str	r3, [r7, #28]
 8015bd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015bd2:	4b9a      	ldr	r3, [pc, #616]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bd6:	4a99      	ldr	r2, [pc, #612]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bd8:	f043 0301 	orr.w	r3, r3, #1
 8015bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8015bde:	4b97      	ldr	r3, [pc, #604]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015be2:	f003 0301 	and.w	r3, r3, #1
 8015be6:	61bb      	str	r3, [r7, #24]
 8015be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8015bea:	4b94      	ldr	r3, [pc, #592]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bee:	4a93      	ldr	r2, [pc, #588]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8015bf6:	4b91      	ldr	r3, [pc, #580]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015bfe:	617b      	str	r3, [r7, #20]
 8015c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8015c02:	4b8e      	ldr	r3, [pc, #568]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c06:	4a8d      	ldr	r2, [pc, #564]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c08:	f043 0310 	orr.w	r3, r3, #16
 8015c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8015c0e:	4b8b      	ldr	r3, [pc, #556]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c12:	f003 0310 	and.w	r3, r3, #16
 8015c16:	613b      	str	r3, [r7, #16]
 8015c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8015c1a:	4b88      	ldr	r3, [pc, #544]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c1e:	4a87      	ldr	r2, [pc, #540]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c20:	f043 0302 	orr.w	r3, r3, #2
 8015c24:	6313      	str	r3, [r2, #48]	; 0x30
 8015c26:	4b85      	ldr	r3, [pc, #532]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c2a:	f003 0302 	and.w	r3, r3, #2
 8015c2e:	60fb      	str	r3, [r7, #12]
 8015c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8015c32:	4b82      	ldr	r3, [pc, #520]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c36:	4a81      	ldr	r2, [pc, #516]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c38:	f043 0308 	orr.w	r3, r3, #8
 8015c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8015c3e:	4b7f      	ldr	r3, [pc, #508]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c42:	f003 0308 	and.w	r3, r3, #8
 8015c46:	60bb      	str	r3, [r7, #8]
 8015c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8015c4a:	4b7c      	ldr	r3, [pc, #496]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c4e:	4a7b      	ldr	r2, [pc, #492]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015c54:	6313      	str	r3, [r2, #48]	; 0x30
 8015c56:	4b79      	ldr	r3, [pc, #484]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015c5e:	607b      	str	r3, [r7, #4]
 8015c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8015c62:	4b76      	ldr	r3, [pc, #472]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c66:	4a75      	ldr	r2, [pc, #468]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8015c6e:	4b73      	ldr	r3, [pc, #460]	; (8015e3c <MX_GPIO_Init+0x2e0>)
 8015c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015c76:	603b      	str	r3, [r7, #0]
 8015c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8015c80:	486f      	ldr	r0, [pc, #444]	; (8015e40 <MX_GPIO_Init+0x2e4>)
 8015c82:	f006 f8cf 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8015c86:	2200      	movs	r2, #0
 8015c88:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8015c8c:	486d      	ldr	r0, [pc, #436]	; (8015e44 <MX_GPIO_Init+0x2e8>)
 8015c8e:	f006 f8c9 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 8015c92:	2200      	movs	r2, #0
 8015c94:	f240 7104 	movw	r1, #1796	; 0x704
 8015c98:	486b      	ldr	r0, [pc, #428]	; (8015e48 <MX_GPIO_Init+0x2ec>)
 8015c9a:	f006 f8c3 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8015c9e:	2201      	movs	r2, #1
 8015ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015ca4:	4869      	ldr	r0, [pc, #420]	; (8015e4c <MX_GPIO_Init+0x2f0>)
 8015ca6:	f006 f8bd 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8015caa:	2200      	movs	r2, #0
 8015cac:	f241 0104 	movw	r1, #4100	; 0x1004
 8015cb0:	4867      	ldr	r0, [pc, #412]	; (8015e50 <MX_GPIO_Init+0x2f4>)
 8015cb2:	f006 f8b7 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8015cb6:	2201      	movs	r2, #1
 8015cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015cbc:	4865      	ldr	r0, [pc, #404]	; (8015e54 <MX_GPIO_Init+0x2f8>)
 8015cbe:	f006 f8b1 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	2108      	movs	r1, #8
 8015cc6:	4864      	ldr	r0, [pc, #400]	; (8015e58 <MX_GPIO_Init+0x2fc>)
 8015cc8:	f006 f8ac 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8015ccc:	2201      	movs	r2, #1
 8015cce:	2160      	movs	r1, #96	; 0x60
 8015cd0:	4861      	ldr	r0, [pc, #388]	; (8015e58 <MX_GPIO_Init+0x2fc>)
 8015cd2:	f006 f8a7 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8015cdc:	485f      	ldr	r0, [pc, #380]	; (8015e5c <MX_GPIO_Init+0x300>)
 8015cde:	f006 f8a1 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 8015ce2:	2201      	movs	r2, #1
 8015ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015ce8:	485c      	ldr	r0, [pc, #368]	; (8015e5c <MX_GPIO_Init+0x300>)
 8015cea:	f006 f89b 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8015cee:	2201      	movs	r2, #1
 8015cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015cf4:	4856      	ldr	r0, [pc, #344]	; (8015e50 <MX_GPIO_Init+0x2f4>)
 8015cf6:	f006 f895 	bl	801be24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 8015cfa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8015cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015d00:	2301      	movs	r3, #1
 8015d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d04:	2300      	movs	r3, #0
 8015d06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d08:	2303      	movs	r3, #3
 8015d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015d10:	4619      	mov	r1, r3
 8015d12:	484b      	ldr	r0, [pc, #300]	; (8015e40 <MX_GPIO_Init+0x2e4>)
 8015d14:	f005 fec2 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8015d18:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d22:	2300      	movs	r3, #0
 8015d24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015d2a:	4619      	mov	r1, r3
 8015d2c:	4844      	ldr	r0, [pc, #272]	; (8015e40 <MX_GPIO_Init+0x2e4>)
 8015d2e:	f005 feb5 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8015d32:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8015d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015d38:	2301      	movs	r3, #1
 8015d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d40:	2303      	movs	r3, #3
 8015d42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015d48:	4619      	mov	r1, r3
 8015d4a:	483e      	ldr	r0, [pc, #248]	; (8015e44 <MX_GPIO_Init+0x2e8>)
 8015d4c:	f005 fea6 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8015d50:	2304      	movs	r3, #4
 8015d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015d54:	2300      	movs	r3, #0
 8015d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 8015d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015d60:	4619      	mov	r1, r3
 8015d62:	483c      	ldr	r0, [pc, #240]	; (8015e54 <MX_GPIO_Init+0x2f8>)
 8015d64:	f005 fe9a 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8015d68:	f240 7304 	movw	r3, #1796	; 0x704
 8015d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015d6e:	2301      	movs	r3, #1
 8015d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d72:	2300      	movs	r3, #0
 8015d74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d76:	2303      	movs	r3, #3
 8015d78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015d7e:	4619      	mov	r1, r3
 8015d80:	4831      	ldr	r0, [pc, #196]	; (8015e48 <MX_GPIO_Init+0x2ec>)
 8015d82:	f005 fe8b 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8015d86:	2303      	movs	r3, #3
 8015d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8015d8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8015d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d90:	2300      	movs	r3, #0
 8015d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015d98:	4619      	mov	r1, r3
 8015d9a:	482d      	ldr	r0, [pc, #180]	; (8015e50 <MX_GPIO_Init+0x2f4>)
 8015d9c:	f005 fe7e 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8015da0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015da6:	2300      	movs	r3, #0
 8015da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015daa:	2300      	movs	r3, #0
 8015dac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8015dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015db2:	4619      	mov	r1, r3
 8015db4:	4825      	ldr	r0, [pc, #148]	; (8015e4c <MX_GPIO_Init+0x2f0>)
 8015db6:	f005 fe71 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8015dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015dc8:	2303      	movs	r3, #3
 8015dca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8015dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015dd0:	4619      	mov	r1, r3
 8015dd2:	481e      	ldr	r0, [pc, #120]	; (8015e4c <MX_GPIO_Init+0x2f0>)
 8015dd4:	f005 fe62 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8015dd8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8015ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015dde:	2300      	movs	r3, #0
 8015de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015de2:	2300      	movs	r3, #0
 8015de4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015dea:	4619      	mov	r1, r3
 8015dec:	481a      	ldr	r0, [pc, #104]	; (8015e58 <MX_GPIO_Init+0x2fc>)
 8015dee:	f005 fe55 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 8015df2:	f241 4304 	movw	r3, #5124	; 0x1404
 8015df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015df8:	2301      	movs	r3, #1
 8015dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e00:	2303      	movs	r3, #3
 8015e02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015e08:	4619      	mov	r1, r3
 8015e0a:	4811      	ldr	r0, [pc, #68]	; (8015e50 <MX_GPIO_Init+0x2f4>)
 8015e0c:	f005 fe46 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8015e10:	2308      	movs	r3, #8
 8015e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015e14:	2300      	movs	r3, #0
 8015e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8015e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015e20:	4619      	mov	r1, r3
 8015e22:	480b      	ldr	r0, [pc, #44]	; (8015e50 <MX_GPIO_Init+0x2f4>)
 8015e24:	f005 fe3a 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8015e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015e2e:	2301      	movs	r3, #1
 8015e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e32:	2300      	movs	r3, #0
 8015e34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015e36:	2300      	movs	r3, #0
 8015e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8015e3a:	e011      	b.n	8015e60 <MX_GPIO_Init+0x304>
 8015e3c:	40023800 	.word	0x40023800
 8015e40:	40022000 	.word	0x40022000
 8015e44:	40021400 	.word	0x40021400
 8015e48:	40021c00 	.word	0x40021c00
 8015e4c:	40021000 	.word	0x40021000
 8015e50:	40021800 	.word	0x40021800
 8015e54:	40020800 	.word	0x40020800
 8015e58:	40020c00 	.word	0x40020c00
 8015e5c:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8015e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015e64:	4619      	mov	r1, r3
 8015e66:	4836      	ldr	r0, [pc, #216]	; (8015f40 <MX_GPIO_Init+0x3e4>)
 8015e68:	f005 fe18 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8015e6c:	2303      	movs	r3, #3
 8015e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e70:	2302      	movs	r3, #2
 8015e72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e74:	2300      	movs	r3, #0
 8015e76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e78:	2303      	movs	r3, #3
 8015e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8015e7c:	2309      	movs	r3, #9
 8015e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015e84:	4619      	mov	r1, r3
 8015e86:	482f      	ldr	r0, [pc, #188]	; (8015f44 <MX_GPIO_Init+0x3e8>)
 8015e88:	f005 fe08 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8015e8c:	2368      	movs	r3, #104	; 0x68
 8015e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015e90:	2301      	movs	r3, #1
 8015e92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e94:	2300      	movs	r3, #0
 8015e96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e98:	2303      	movs	r3, #3
 8015e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	4828      	ldr	r0, [pc, #160]	; (8015f44 <MX_GPIO_Init+0x3e8>)
 8015ea4:	f005 fdfa 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8015ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 8015eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015eba:	4619      	mov	r1, r3
 8015ebc:	4822      	ldr	r0, [pc, #136]	; (8015f48 <MX_GPIO_Init+0x3ec>)
 8015ebe:	f005 fded 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 8015ec2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015ec8:	2301      	movs	r3, #1
 8015eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8015ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ed8:	4619      	mov	r1, r3
 8015eda:	481b      	ldr	r0, [pc, #108]	; (8015f48 <MX_GPIO_Init+0x3ec>)
 8015edc:	f005 fdde 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8015ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015eea:	2300      	movs	r3, #0
 8015eec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015eee:	2303      	movs	r3, #3
 8015ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 8015ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	4813      	ldr	r0, [pc, #76]	; (8015f48 <MX_GPIO_Init+0x3ec>)
 8015efa:	f005 fdcf 	bl	801ba9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8015efe:	2318      	movs	r3, #24
 8015f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015f02:	2300      	movs	r3, #0
 8015f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f06:	2300      	movs	r3, #0
 8015f08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8015f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015f0e:	4619      	mov	r1, r3
 8015f10:	480e      	ldr	r0, [pc, #56]	; (8015f4c <MX_GPIO_Init+0x3f0>)
 8015f12:	f005 fdc3 	bl	801ba9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8015f16:	2200      	movs	r2, #0
 8015f18:	2101      	movs	r1, #1
 8015f1a:	2006      	movs	r0, #6
 8015f1c:	f004 fa93 	bl	801a446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8015f20:	2006      	movs	r0, #6
 8015f22:	f004 faac 	bl	801a47e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8015f26:	2201      	movs	r2, #1
 8015f28:	2101      	movs	r1, #1
 8015f2a:	2007      	movs	r0, #7
 8015f2c:	f004 fa8b 	bl	801a446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8015f30:	2007      	movs	r0, #7
 8015f32:	f004 faa4 	bl	801a47e <HAL_NVIC_EnableIRQ>

}
 8015f36:	bf00      	nop
 8015f38:	3740      	adds	r7, #64	; 0x40
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	bf00      	nop
 8015f40:	40020800 	.word	0x40020800
 8015f44:	40020c00 	.word	0x40020c00
 8015f48:	40022400 	.word	0x40022400
 8015f4c:	40022800 	.word	0x40022800

08015f50 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8015f54:	4b0a      	ldr	r3, [pc, #40]	; (8015f80 <Feed_wdt+0x30>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7fa f80d 	bl	800ff78 <HAL_Elaps_Ticks>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015f64:	d309      	bcc.n	8015f7a <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8015f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015f6a:	4806      	ldr	r0, [pc, #24]	; (8015f84 <Feed_wdt+0x34>)
 8015f6c:	f005 ff73 	bl	801be56 <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8015f70:	f003 fa88 	bl	8019484 <HAL_GetTick>
 8015f74:	4603      	mov	r3, r0
 8015f76:	4a02      	ldr	r2, [pc, #8]	; (8015f80 <Feed_wdt+0x30>)
 8015f78:	6013      	str	r3, [r2, #0]
	}

}
 8015f7a:	bf00      	nop
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop
 8015f80:	2000b318 	.word	0x2000b318
 8015f84:	40022400 	.word	0x40022400

08015f88 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8015f8c:	4b09      	ldr	r3, [pc, #36]	; (8015fb4 <Blink_S2+0x2c>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7f9 fff1 	bl	800ff78 <HAL_Elaps_Ticks>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b64      	cmp	r3, #100	; 0x64
 8015f9a:	d909      	bls.n	8015fb0 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8015f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015fa0:	4805      	ldr	r0, [pc, #20]	; (8015fb8 <Blink_S2+0x30>)
 8015fa2:	f005 ff58 	bl	801be56 <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 8015fa6:	f003 fa6d 	bl	8019484 <HAL_GetTick>
 8015faa:	4603      	mov	r3, r0
 8015fac:	4a01      	ldr	r2, [pc, #4]	; (8015fb4 <Blink_S2+0x2c>)
 8015fae:	6013      	str	r3, [r2, #0]
	}
}
 8015fb0:	bf00      	nop
 8015fb2:	bd80      	pop	{r7, pc}
 8015fb4:	2000b31c 	.word	0x2000b31c
 8015fb8:	40021c00 	.word	0x40021c00

08015fbc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8015fc0:	4b1b      	ldr	r3, [pc, #108]	; (8016030 <MX_I2C1_Init+0x74>)
 8015fc2:	4a1c      	ldr	r2, [pc, #112]	; (8016034 <MX_I2C1_Init+0x78>)
 8015fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8015fc6:	4b1a      	ldr	r3, [pc, #104]	; (8016030 <MX_I2C1_Init+0x74>)
 8015fc8:	4a1b      	ldr	r2, [pc, #108]	; (8016038 <MX_I2C1_Init+0x7c>)
 8015fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8015fcc:	4b18      	ldr	r3, [pc, #96]	; (8016030 <MX_I2C1_Init+0x74>)
 8015fce:	2200      	movs	r2, #0
 8015fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015fd2:	4b17      	ldr	r3, [pc, #92]	; (8016030 <MX_I2C1_Init+0x74>)
 8015fd4:	2201      	movs	r2, #1
 8015fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015fd8:	4b15      	ldr	r3, [pc, #84]	; (8016030 <MX_I2C1_Init+0x74>)
 8015fda:	2200      	movs	r2, #0
 8015fdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8015fde:	4b14      	ldr	r3, [pc, #80]	; (8016030 <MX_I2C1_Init+0x74>)
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015fe4:	4b12      	ldr	r3, [pc, #72]	; (8016030 <MX_I2C1_Init+0x74>)
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015fea:	4b11      	ldr	r3, [pc, #68]	; (8016030 <MX_I2C1_Init+0x74>)
 8015fec:	2200      	movs	r2, #0
 8015fee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8015ff0:	4b0f      	ldr	r3, [pc, #60]	; (8016030 <MX_I2C1_Init+0x74>)
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015ff6:	480e      	ldr	r0, [pc, #56]	; (8016030 <MX_I2C1_Init+0x74>)
 8015ff8:	f005 ff6c 	bl	801bed4 <HAL_I2C_Init>
 8015ffc:	4603      	mov	r3, r0
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d001      	beq.n	8016006 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8016002:	f001 fc45 	bl	8017890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8016006:	2100      	movs	r1, #0
 8016008:	4809      	ldr	r0, [pc, #36]	; (8016030 <MX_I2C1_Init+0x74>)
 801600a:	f006 fcbb 	bl	801c984 <HAL_I2CEx_ConfigAnalogFilter>
 801600e:	4603      	mov	r3, r0
 8016010:	2b00      	cmp	r3, #0
 8016012:	d001      	beq.n	8016018 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8016014:	f001 fc3c 	bl	8017890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8016018:	2100      	movs	r1, #0
 801601a:	4805      	ldr	r0, [pc, #20]	; (8016030 <MX_I2C1_Init+0x74>)
 801601c:	f006 fcfd 	bl	801ca1a <HAL_I2CEx_ConfigDigitalFilter>
 8016020:	4603      	mov	r3, r0
 8016022:	2b00      	cmp	r3, #0
 8016024:	d001      	beq.n	801602a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8016026:	f001 fc33 	bl	8017890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801602a:	bf00      	nop
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	2000b320 	.word	0x2000b320
 8016034:	40005400 	.word	0x40005400
 8016038:	c0000e12 	.word	0xc0000e12

0801603c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8016040:	4b1b      	ldr	r3, [pc, #108]	; (80160b0 <MX_I2C2_Init+0x74>)
 8016042:	4a1c      	ldr	r2, [pc, #112]	; (80160b4 <MX_I2C2_Init+0x78>)
 8016044:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8016046:	4b1a      	ldr	r3, [pc, #104]	; (80160b0 <MX_I2C2_Init+0x74>)
 8016048:	4a1b      	ldr	r2, [pc, #108]	; (80160b8 <MX_I2C2_Init+0x7c>)
 801604a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 801604c:	4b18      	ldr	r3, [pc, #96]	; (80160b0 <MX_I2C2_Init+0x74>)
 801604e:	2200      	movs	r2, #0
 8016050:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8016052:	4b17      	ldr	r3, [pc, #92]	; (80160b0 <MX_I2C2_Init+0x74>)
 8016054:	2201      	movs	r2, #1
 8016056:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8016058:	4b15      	ldr	r3, [pc, #84]	; (80160b0 <MX_I2C2_Init+0x74>)
 801605a:	2200      	movs	r2, #0
 801605c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 801605e:	4b14      	ldr	r3, [pc, #80]	; (80160b0 <MX_I2C2_Init+0x74>)
 8016060:	2200      	movs	r2, #0
 8016062:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8016064:	4b12      	ldr	r3, [pc, #72]	; (80160b0 <MX_I2C2_Init+0x74>)
 8016066:	2200      	movs	r2, #0
 8016068:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801606a:	4b11      	ldr	r3, [pc, #68]	; (80160b0 <MX_I2C2_Init+0x74>)
 801606c:	2200      	movs	r2, #0
 801606e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016070:	4b0f      	ldr	r3, [pc, #60]	; (80160b0 <MX_I2C2_Init+0x74>)
 8016072:	2200      	movs	r2, #0
 8016074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8016076:	480e      	ldr	r0, [pc, #56]	; (80160b0 <MX_I2C2_Init+0x74>)
 8016078:	f005 ff2c 	bl	801bed4 <HAL_I2C_Init>
 801607c:	4603      	mov	r3, r0
 801607e:	2b00      	cmp	r3, #0
 8016080:	d001      	beq.n	8016086 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8016082:	f001 fc05 	bl	8017890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8016086:	2100      	movs	r1, #0
 8016088:	4809      	ldr	r0, [pc, #36]	; (80160b0 <MX_I2C2_Init+0x74>)
 801608a:	f006 fc7b 	bl	801c984 <HAL_I2CEx_ConfigAnalogFilter>
 801608e:	4603      	mov	r3, r0
 8016090:	2b00      	cmp	r3, #0
 8016092:	d001      	beq.n	8016098 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8016094:	f001 fbfc 	bl	8017890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8016098:	2100      	movs	r1, #0
 801609a:	4805      	ldr	r0, [pc, #20]	; (80160b0 <MX_I2C2_Init+0x74>)
 801609c:	f006 fcbd 	bl	801ca1a <HAL_I2CEx_ConfigDigitalFilter>
 80160a0:	4603      	mov	r3, r0
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d001      	beq.n	80160aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80160a6:	f001 fbf3 	bl	8017890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80160aa:	bf00      	nop
 80160ac:	bd80      	pop	{r7, pc}
 80160ae:	bf00      	nop
 80160b0:	2000b374 	.word	0x2000b374
 80160b4:	40005800 	.word	0x40005800
 80160b8:	c0000e12 	.word	0xc0000e12

080160bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b0b0      	sub	sp, #192	; 0xc0
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80160c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80160c8:	2200      	movs	r2, #0
 80160ca:	601a      	str	r2, [r3, #0]
 80160cc:	605a      	str	r2, [r3, #4]
 80160ce:	609a      	str	r2, [r3, #8]
 80160d0:	60da      	str	r2, [r3, #12]
 80160d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80160d4:	f107 031c 	add.w	r3, r7, #28
 80160d8:	2290      	movs	r2, #144	; 0x90
 80160da:	2100      	movs	r1, #0
 80160dc:	4618      	mov	r0, r3
 80160de:	f010 f8f3 	bl	80262c8 <memset>
  if(i2cHandle->Instance==I2C1)
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	4a44      	ldr	r2, [pc, #272]	; (80161f8 <HAL_I2C_MspInit+0x13c>)
 80160e8:	4293      	cmp	r3, r2
 80160ea:	d13e      	bne.n	801616a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80160ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80160f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80160f2:	2300      	movs	r3, #0
 80160f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80160f8:	f107 031c 	add.w	r3, r7, #28
 80160fc:	4618      	mov	r0, r3
 80160fe:	f007 f9cb 	bl	801d498 <HAL_RCCEx_PeriphCLKConfig>
 8016102:	4603      	mov	r3, r0
 8016104:	2b00      	cmp	r3, #0
 8016106:	d001      	beq.n	801610c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8016108:	f001 fbc2 	bl	8017890 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801610c:	4b3b      	ldr	r3, [pc, #236]	; (80161fc <HAL_I2C_MspInit+0x140>)
 801610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016110:	4a3a      	ldr	r2, [pc, #232]	; (80161fc <HAL_I2C_MspInit+0x140>)
 8016112:	f043 0302 	orr.w	r3, r3, #2
 8016116:	6313      	str	r3, [r2, #48]	; 0x30
 8016118:	4b38      	ldr	r3, [pc, #224]	; (80161fc <HAL_I2C_MspInit+0x140>)
 801611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801611c:	f003 0302 	and.w	r3, r3, #2
 8016120:	61bb      	str	r3, [r7, #24]
 8016122:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8016124:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8016128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801612c:	2312      	movs	r3, #18
 801612e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016132:	2300      	movs	r3, #0
 8016134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016138:	2303      	movs	r3, #3
 801613a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801613e:	2304      	movs	r3, #4
 8016140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016144:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016148:	4619      	mov	r1, r3
 801614a:	482d      	ldr	r0, [pc, #180]	; (8016200 <HAL_I2C_MspInit+0x144>)
 801614c:	f005 fca6 	bl	801ba9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8016150:	4b2a      	ldr	r3, [pc, #168]	; (80161fc <HAL_I2C_MspInit+0x140>)
 8016152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016154:	4a29      	ldr	r2, [pc, #164]	; (80161fc <HAL_I2C_MspInit+0x140>)
 8016156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801615a:	6413      	str	r3, [r2, #64]	; 0x40
 801615c:	4b27      	ldr	r3, [pc, #156]	; (80161fc <HAL_I2C_MspInit+0x140>)
 801615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016164:	617b      	str	r3, [r7, #20]
 8016166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8016168:	e041      	b.n	80161ee <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	4a25      	ldr	r2, [pc, #148]	; (8016204 <HAL_I2C_MspInit+0x148>)
 8016170:	4293      	cmp	r3, r2
 8016172:	d13c      	bne.n	80161ee <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8016174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016178:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801617a:	2300      	movs	r3, #0
 801617c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016180:	f107 031c 	add.w	r3, r7, #28
 8016184:	4618      	mov	r0, r3
 8016186:	f007 f987 	bl	801d498 <HAL_RCCEx_PeriphCLKConfig>
 801618a:	4603      	mov	r3, r0
 801618c:	2b00      	cmp	r3, #0
 801618e:	d001      	beq.n	8016194 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8016190:	f001 fb7e 	bl	8017890 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8016194:	4b19      	ldr	r3, [pc, #100]	; (80161fc <HAL_I2C_MspInit+0x140>)
 8016196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016198:	4a18      	ldr	r2, [pc, #96]	; (80161fc <HAL_I2C_MspInit+0x140>)
 801619a:	f043 0320 	orr.w	r3, r3, #32
 801619e:	6313      	str	r3, [r2, #48]	; 0x30
 80161a0:	4b16      	ldr	r3, [pc, #88]	; (80161fc <HAL_I2C_MspInit+0x140>)
 80161a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161a4:	f003 0320 	and.w	r3, r3, #32
 80161a8:	613b      	str	r3, [r7, #16]
 80161aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 80161ac:	2303      	movs	r3, #3
 80161ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80161b2:	2312      	movs	r3, #18
 80161b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161b8:	2300      	movs	r3, #0
 80161ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80161be:	2303      	movs	r3, #3
 80161c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80161c4:	2304      	movs	r3, #4
 80161c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80161ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80161ce:	4619      	mov	r1, r3
 80161d0:	480d      	ldr	r0, [pc, #52]	; (8016208 <HAL_I2C_MspInit+0x14c>)
 80161d2:	f005 fc63 	bl	801ba9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80161d6:	4b09      	ldr	r3, [pc, #36]	; (80161fc <HAL_I2C_MspInit+0x140>)
 80161d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161da:	4a08      	ldr	r2, [pc, #32]	; (80161fc <HAL_I2C_MspInit+0x140>)
 80161dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80161e0:	6413      	str	r3, [r2, #64]	; 0x40
 80161e2:	4b06      	ldr	r3, [pc, #24]	; (80161fc <HAL_I2C_MspInit+0x140>)
 80161e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80161ea:	60fb      	str	r3, [r7, #12]
 80161ec:	68fb      	ldr	r3, [r7, #12]
}
 80161ee:	bf00      	nop
 80161f0:	37c0      	adds	r7, #192	; 0xc0
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	40005400 	.word	0x40005400
 80161fc:	40023800 	.word	0x40023800
 8016200:	40020400 	.word	0x40020400
 8016204:	40005800 	.word	0x40005800
 8016208:	40021400 	.word	0x40021400

0801620c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8016210:	4b0b      	ldr	r3, [pc, #44]	; (8016240 <MX_IWDG_Init+0x34>)
 8016212:	4a0c      	ldr	r2, [pc, #48]	; (8016244 <MX_IWDG_Init+0x38>)
 8016214:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8016216:	4b0a      	ldr	r3, [pc, #40]	; (8016240 <MX_IWDG_Init+0x34>)
 8016218:	2203      	movs	r2, #3
 801621a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 801621c:	4b08      	ldr	r3, [pc, #32]	; (8016240 <MX_IWDG_Init+0x34>)
 801621e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016222:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 8016224:	4b06      	ldr	r3, [pc, #24]	; (8016240 <MX_IWDG_Init+0x34>)
 8016226:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801622a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 801622c:	4804      	ldr	r0, [pc, #16]	; (8016240 <MX_IWDG_Init+0x34>)
 801622e:	f006 fc40 	bl	801cab2 <HAL_IWDG_Init>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d001      	beq.n	801623c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8016238:	f001 fb2a 	bl	8017890 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 801623c:	bf00      	nop
 801623e:	bd80      	pop	{r7, pc}
 8016240:	2000b3c8 	.word	0x2000b3c8
 8016244:	40003000 	.word	0x40003000

08016248 <Process_Kyosan_EI>:
#ifdef EI_1
uint8_t SendThisCardRelays = 0;
#endif

void Process_Kyosan_EI(void)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	af00      	add	r7, sp, #0

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 801624c:	4811      	ldr	r0, [pc, #68]	; (8016294 <Process_Kyosan_EI+0x4c>)
 801624e:	f006 fc7f 	bl	801cb50 <HAL_IWDG_Refresh>

		Feed_wdt();
 8016252:	f7ff fe7d 	bl	8015f50 <Feed_wdt>

		Get_Kyosan_EI_Message(KYOSAN_PORT);
 8016256:	2003      	movs	r0, #3
 8016258:	f000 f9ae 	bl	80165b8 <Get_Kyosan_EI_Message>

		Process_Send_Signals_2_MIE_Kyosan();
 801625c:	f000 f912 	bl	8016484 <Process_Send_Signals_2_MIE_Kyosan>

		DetectCanXchangeFailure();
 8016260:	f000 f8ce 	bl	8016400 <DetectCanXchangeFailure>

		Process_ComFailTimeout();
 8016264:	f000 f81c 	bl	80162a0 <Process_ComFailTimeout>

		readCanToStructs();
 8016268:	f7fb f9da 	bl	8011620 <readCanToStructs>

		Check_forKyosanCMD();
 801626c:	f000 fe14 	bl	8016e98 <Check_forKyosanCMD>

		SendKyosanRelays2Other();
 8016270:	f000 f8ac 	bl	80163cc <SendKyosanRelays2Other>

		CheckEIPC_DAT_CRC();
 8016274:	f7ea fe6a 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8016278:	4b07      	ldr	r3, [pc, #28]	; (8016298 <Process_Kyosan_EI+0x50>)
 801627a:	781b      	ldrb	r3, [r3, #0]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d0e5      	beq.n	801624c <Process_Kyosan_EI+0x4>
		{
			gucFlagUpdate = 3;
 8016280:	4b06      	ldr	r3, [pc, #24]	; (801629c <Process_Kyosan_EI+0x54>)
 8016282:	2203      	movs	r2, #3
 8016284:	701a      	strb	r2, [r3, #0]
		}
	}

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8016286:	4803      	ldr	r0, [pc, #12]	; (8016294 <Process_Kyosan_EI+0x4c>)
 8016288:	f006 fc62 	bl	801cb50 <HAL_IWDG_Refresh>
		Data_Processing();
 801628c:	f001 ff7e 	bl	801818c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8016290:	e7f9      	b.n	8016286 <Process_Kyosan_EI+0x3e>
 8016292:	bf00      	nop
 8016294:	2000b3c8 	.word	0x2000b3c8
 8016298:	20000bba 	.word	0x20000bba
 801629c:	20000fbd 	.word	0x20000fbd

080162a0 <Process_ComFailTimeout>:
	}
}

void Process_ComFailTimeout(void)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	af00      	add	r7, sp, #0
	if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) > EI_data.Kyosan_st.Comm_Fail_Time)
 80162a4:	4b43      	ldr	r3, [pc, #268]	; (80163b4 <Process_ComFailTimeout+0x114>)
 80162a6:	685b      	ldr	r3, [r3, #4]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7f9 fe65 	bl	800ff78 <HAL_Elaps_Ticks>
 80162ae:	4602      	mov	r2, r0
 80162b0:	4b41      	ldr	r3, [pc, #260]	; (80163b8 <Process_ComFailTimeout+0x118>)
 80162b2:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d82b      	bhi.n	8016312 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 80162ba:	4b3e      	ldr	r3, [pc, #248]	; (80163b4 <Process_ComFailTimeout+0x114>)
 80162bc:	689b      	ldr	r3, [r3, #8]
 80162be:	4618      	mov	r0, r3
 80162c0:	f7f9 fe5a 	bl	800ff78 <HAL_Elaps_Ticks>
 80162c4:	4602      	mov	r2, r0
 80162c6:	4b3c      	ldr	r3, [pc, #240]	; (80163b8 <Process_ComFailTimeout+0x118>)
 80162c8:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80162cc:	429a      	cmp	r2, r3
 80162ce:	d820      	bhi.n	8016312 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 80162d0:	4b38      	ldr	r3, [pc, #224]	; (80163b4 <Process_ComFailTimeout+0x114>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7f9 fe4f 	bl	800ff78 <HAL_Elaps_Ticks>
 80162da:	4602      	mov	r2, r0
 80162dc:	4b36      	ldr	r3, [pc, #216]	; (80163b8 <Process_ComFailTimeout+0x118>)
 80162de:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d815      	bhi.n	8016312 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 80162e6:	4b33      	ldr	r3, [pc, #204]	; (80163b4 <Process_ComFailTimeout+0x114>)
 80162e8:	68db      	ldr	r3, [r3, #12]
 80162ea:	4618      	mov	r0, r3
 80162ec:	f7f9 fe44 	bl	800ff78 <HAL_Elaps_Ticks>
 80162f0:	4602      	mov	r2, r0
 80162f2:	4b31      	ldr	r3, [pc, #196]	; (80163b8 <Process_ComFailTimeout+0x118>)
 80162f4:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d80a      	bhi.n	8016312 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time))
 80162fc:	4b2d      	ldr	r3, [pc, #180]	; (80163b4 <Process_ComFailTimeout+0x114>)
 80162fe:	691b      	ldr	r3, [r3, #16]
 8016300:	4618      	mov	r0, r3
 8016302:	f7f9 fe39 	bl	800ff78 <HAL_Elaps_Ticks>
 8016306:	4602      	mov	r2, r0
 8016308:	4b2b      	ldr	r3, [pc, #172]	; (80163b8 <Process_ComFailTimeout+0x118>)
 801630a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801630e:	429a      	cmp	r2, r3
 8016310:	d913      	bls.n	801633a <Process_ComFailTimeout+0x9a>
	{

		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8016312:	492a      	ldr	r1, [pc, #168]	; (80163bc <Process_ComFailTimeout+0x11c>)
 8016314:	482a      	ldr	r0, [pc, #168]	; (80163c0 <Process_ComFailTimeout+0x120>)
 8016316:	f7e9 ff93 	bl	8000240 <strcmp>
 801631a:	4603      	mov	r3, r0
 801631c:	2b00      	cmp	r3, #0
 801631e:	d047      	beq.n	80163b0 <Process_ComFailTimeout+0x110>
			return;
		}



		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8016320:	4b28      	ldr	r3, [pc, #160]	; (80163c4 <Process_ComFailTimeout+0x124>)
 8016322:	785b      	ldrb	r3, [r3, #1]
 8016324:	2b01      	cmp	r3, #1
 8016326:	d144      	bne.n	80163b2 <Process_ComFailTimeout+0x112>
		{
			printf("Time out for Message Packets Reached\n");
 8016328:	4827      	ldr	r0, [pc, #156]	; (80163c8 <Process_ComFailTimeout+0x128>)
 801632a:	f010 f951 	bl	80265d0 <puts>
			memset(&Kyosan_SelfRelays,0,sizeof(KYOSAN_RELAYS_t));
 801632e:	2240      	movs	r2, #64	; 0x40
 8016330:	2100      	movs	r1, #0
 8016332:	4824      	ldr	r0, [pc, #144]	; (80163c4 <Process_ComFailTimeout+0x124>)
 8016334:	f00f ffc8 	bl	80262c8 <memset>
		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8016338:	e03b      	b.n	80163b2 <Process_ComFailTimeout+0x112>
		}
	}
	else if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) < EI_data.Kyosan_st.Comm_Fail_Time)
 801633a:	4b1e      	ldr	r3, [pc, #120]	; (80163b4 <Process_ComFailTimeout+0x114>)
 801633c:	685b      	ldr	r3, [r3, #4]
 801633e:	4618      	mov	r0, r3
 8016340:	f7f9 fe1a 	bl	800ff78 <HAL_Elaps_Ticks>
 8016344:	4602      	mov	r2, r0
 8016346:	4b1c      	ldr	r3, [pc, #112]	; (80163b8 <Process_ComFailTimeout+0x118>)
 8016348:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801634c:	429a      	cmp	r2, r3
 801634e:	d230      	bcs.n	80163b2 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8016350:	4b18      	ldr	r3, [pc, #96]	; (80163b4 <Process_ComFailTimeout+0x114>)
 8016352:	689b      	ldr	r3, [r3, #8]
 8016354:	4618      	mov	r0, r3
 8016356:	f7f9 fe0f 	bl	800ff78 <HAL_Elaps_Ticks>
 801635a:	4602      	mov	r2, r0
 801635c:	4b16      	ldr	r3, [pc, #88]	; (80163b8 <Process_ComFailTimeout+0x118>)
 801635e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016362:	429a      	cmp	r2, r3
 8016364:	d225      	bcs.n	80163b2 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8016366:	4b13      	ldr	r3, [pc, #76]	; (80163b4 <Process_ComFailTimeout+0x114>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4618      	mov	r0, r3
 801636c:	f7f9 fe04 	bl	800ff78 <HAL_Elaps_Ticks>
 8016370:	4602      	mov	r2, r0
 8016372:	4b11      	ldr	r3, [pc, #68]	; (80163b8 <Process_ComFailTimeout+0x118>)
 8016374:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016378:	429a      	cmp	r2, r3
 801637a:	d21a      	bcs.n	80163b2 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 801637c:	4b0d      	ldr	r3, [pc, #52]	; (80163b4 <Process_ComFailTimeout+0x114>)
 801637e:	68db      	ldr	r3, [r3, #12]
 8016380:	4618      	mov	r0, r3
 8016382:	f7f9 fdf9 	bl	800ff78 <HAL_Elaps_Ticks>
 8016386:	4602      	mov	r2, r0
 8016388:	4b0b      	ldr	r3, [pc, #44]	; (80163b8 <Process_ComFailTimeout+0x118>)
 801638a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801638e:	429a      	cmp	r2, r3
 8016390:	d20f      	bcs.n	80163b2 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time))
 8016392:	4b08      	ldr	r3, [pc, #32]	; (80163b4 <Process_ComFailTimeout+0x114>)
 8016394:	691b      	ldr	r3, [r3, #16]
 8016396:	4618      	mov	r0, r3
 8016398:	f7f9 fdee 	bl	800ff78 <HAL_Elaps_Ticks>
 801639c:	4602      	mov	r2, r0
 801639e:	4b06      	ldr	r3, [pc, #24]	; (80163b8 <Process_ComFailTimeout+0x118>)
 80163a0:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d204      	bcs.n	80163b2 <Process_ComFailTimeout+0x112>

	{
		Kyosan_SelfRelays.Message_Receiving = SET;
 80163a8:	4b06      	ldr	r3, [pc, #24]	; (80163c4 <Process_ComFailTimeout+0x124>)
 80163aa:	2201      	movs	r2, #1
 80163ac:	705a      	strb	r2, [r3, #1]
 80163ae:	e000      	b.n	80163b2 <Process_ComFailTimeout+0x112>
			return;
 80163b0:	bf00      	nop
	}
}
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	2000b3e0 	.word	0x2000b3e0
 80163b8:	20000504 	.word	0x20000504
 80163bc:	0802b258 	.word	0x0802b258
 80163c0:	20000505 	.word	0x20000505
 80163c4:	2000b3f4 	.word	0x2000b3f4
 80163c8:	0802b264 	.word	0x0802b264

080163cc <SendKyosanRelays2Other>:
		RelayMisMatchCnt = RESET;
	}
}

void SendKyosanRelays2Other(void)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	af00      	add	r7, sp, #0
	static uint32_t RelaySendingClk = 0;
	if(HAL_Elaps_Ticks(RelaySendingClk) > 3000)
 80163d0:	4b0a      	ldr	r3, [pc, #40]	; (80163fc <SendKyosanRelays2Other+0x30>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7f9 fdcf 	bl	800ff78 <HAL_Elaps_Ticks>
 80163da:	4603      	mov	r3, r0
 80163dc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80163e0:	4293      	cmp	r3, r2
 80163e2:	d908      	bls.n	80163f6 <SendKyosanRelays2Other+0x2a>
	{
#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 80163e4:	f44f 7002 	mov.w	r0, #520	; 0x208
 80163e8:	f7fa fb42 	bl	8010a70 <TransmitCanPkt>
#endif
		RelaySendingClk = HAL_GetTick();
 80163ec:	f003 f84a 	bl	8019484 <HAL_GetTick>
 80163f0:	4603      	mov	r3, r0
 80163f2:	4a02      	ldr	r2, [pc, #8]	; (80163fc <SendKyosanRelays2Other+0x30>)
 80163f4:	6013      	str	r3, [r2, #0]
	}
}
 80163f6:	bf00      	nop
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	2000b928 	.word	0x2000b928

08016400 <DetectCanXchangeFailure>:

void DetectCanXchangeFailure(void)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	af00      	add	r7, sp, #0
	static uint32_t S2_BlinkClk = 0;

	if( (HAL_Elaps_Ticks(LastCANReceived_Clk_Kyosan) > EI_data.Kyosan_st.CAN_Fail_Clk) && (Is_CAN_Exchange_happening != RESET ))
 8016404:	4b18      	ldr	r3, [pc, #96]	; (8016468 <DetectCanXchangeFailure+0x68>)
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	4618      	mov	r0, r3
 801640a:	f7f9 fdb5 	bl	800ff78 <HAL_Elaps_Ticks>
 801640e:	4602      	mov	r2, r0
 8016410:	4b16      	ldr	r3, [pc, #88]	; (801646c <DetectCanXchangeFailure+0x6c>)
 8016412:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8016416:	429a      	cmp	r2, r3
 8016418:	d912      	bls.n	8016440 <DetectCanXchangeFailure+0x40>
 801641a:	4b15      	ldr	r3, [pc, #84]	; (8016470 <DetectCanXchangeFailure+0x70>)
 801641c:	781b      	ldrb	r3, [r3, #0]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d00e      	beq.n	8016440 <DetectCanXchangeFailure+0x40>
	{
		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8016422:	4914      	ldr	r1, [pc, #80]	; (8016474 <DetectCanXchangeFailure+0x74>)
 8016424:	4814      	ldr	r0, [pc, #80]	; (8016478 <DetectCanXchangeFailure+0x78>)
 8016426:	f7e9 ff0b 	bl	8000240 <strcmp>
 801642a:	4603      	mov	r3, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	d103      	bne.n	8016438 <DetectCanXchangeFailure+0x38>
		{
			Is_CAN_Exchange_happening = SET;
 8016430:	4b0f      	ldr	r3, [pc, #60]	; (8016470 <DetectCanXchangeFailure+0x70>)
 8016432:	2201      	movs	r2, #1
 8016434:	701a      	strb	r2, [r3, #0]
			return;
 8016436:	e016      	b.n	8016466 <DetectCanXchangeFailure+0x66>
		}

		Is_CAN_Exchange_happening = RESET;
 8016438:	4b0d      	ldr	r3, [pc, #52]	; (8016470 <DetectCanXchangeFailure+0x70>)
 801643a:	2200      	movs	r2, #0
 801643c:	701a      	strb	r2, [r3, #0]
 801643e:	e012      	b.n	8016466 <DetectCanXchangeFailure+0x66>
	}
	else
	{
		if(HAL_Elaps_Ticks(S2_BlinkClk) > 300)
 8016440:	4b0e      	ldr	r3, [pc, #56]	; (801647c <DetectCanXchangeFailure+0x7c>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	4618      	mov	r0, r3
 8016446:	f7f9 fd97 	bl	800ff78 <HAL_Elaps_Ticks>
 801644a:	4603      	mov	r3, r0
 801644c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016450:	d909      	bls.n	8016466 <DetectCanXchangeFailure+0x66>
		{
			S2_BlinkClk = HAL_GetTick();
 8016452:	f003 f817 	bl	8019484 <HAL_GetTick>
 8016456:	4603      	mov	r3, r0
 8016458:	4a08      	ldr	r2, [pc, #32]	; (801647c <DetectCanXchangeFailure+0x7c>)
 801645a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 801645c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016460:	4807      	ldr	r0, [pc, #28]	; (8016480 <DetectCanXchangeFailure+0x80>)
 8016462:	f005 fcf8 	bl	801be56 <HAL_GPIO_TogglePin>
		}

	}
}
 8016466:	bd80      	pop	{r7, pc}
 8016468:	2000b538 	.word	0x2000b538
 801646c:	20000504 	.word	0x20000504
 8016470:	2000030b 	.word	0x2000030b
 8016474:	0802b258 	.word	0x0802b258
 8016478:	20000505 	.word	0x20000505
 801647c:	2000b92c 	.word	0x2000b92c
 8016480:	40021c00 	.word	0x40021c00

08016484 <Process_Send_Signals_2_MIE_Kyosan>:

void Process_Send_Signals_2_MIE_Kyosan(void)
{
 8016484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016486:	b083      	sub	sp, #12
 8016488:	af00      	add	r7, sp, #0
	uint8_t Choice =0;
 801648a:	2300      	movs	r3, #0
 801648c:	71fb      	strb	r3, [r7, #7]

	if(HAL_Elaps_Ticks(MIE_SignalsSending_Clk_Kyosan) > EI_data.Kyosan_st.MIE_SEND_CLK)
 801648e:	4b44      	ldr	r3, [pc, #272]	; (80165a0 <Process_Send_Signals_2_MIE_Kyosan+0x11c>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	4618      	mov	r0, r3
 8016494:	f7f9 fd70 	bl	800ff78 <HAL_Elaps_Ticks>
 8016498:	4602      	mov	r2, r0
 801649a:	4b42      	ldr	r3, [pc, #264]	; (80165a4 <Process_Send_Signals_2_MIE_Kyosan+0x120>)
 801649c:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d978      	bls.n	8016596 <Process_Send_Signals_2_MIE_Kyosan+0x112>
		}
#endif

#ifdef EI_2

		if(Is_CAN_Exchange_happening == SET)
 80164a4:	4b40      	ldr	r3, [pc, #256]	; (80165a8 <Process_Send_Signals_2_MIE_Kyosan+0x124>)
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	2b01      	cmp	r3, #1
 80164aa:	d166      	bne.n	801657a <Process_Send_Signals_2_MIE_Kyosan+0xf6>
		{
			Choice = 0;
 80164ac:	2300      	movs	r3, #0
 80164ae:	71fb      	strb	r3, [r7, #7]
			(Kyosan_OtherRelays.Message_Receiving == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 80164b0:	4b3e      	ldr	r3, [pc, #248]	; (80165ac <Process_Send_Signals_2_MIE_Kyosan+0x128>)
 80164b2:	785b      	ldrb	r3, [r3, #1]
 80164b4:	2b01      	cmp	r3, #1
 80164b6:	d104      	bne.n	80164c2 <Process_Send_Signals_2_MIE_Kyosan+0x3e>
 80164b8:	79fb      	ldrb	r3, [r7, #7]
 80164ba:	f043 0301 	orr.w	r3, r3, #1
 80164be:	71fb      	strb	r3, [r7, #7]
 80164c0:	e003      	b.n	80164ca <Process_Send_Signals_2_MIE_Kyosan+0x46>
 80164c2:	79fb      	ldrb	r3, [r7, #7]
 80164c4:	f023 0301 	bic.w	r3, r3, #1
 80164c8:	71fb      	strb	r3, [r7, #7]
			(Kyosan_SelfRelays.Message_Receiving == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 80164ca:	4b39      	ldr	r3, [pc, #228]	; (80165b0 <Process_Send_Signals_2_MIE_Kyosan+0x12c>)
 80164cc:	785b      	ldrb	r3, [r3, #1]
 80164ce:	2b01      	cmp	r3, #1
 80164d0:	d104      	bne.n	80164dc <Process_Send_Signals_2_MIE_Kyosan+0x58>
 80164d2:	79fb      	ldrb	r3, [r7, #7]
 80164d4:	f043 0302 	orr.w	r3, r3, #2
 80164d8:	71fb      	strb	r3, [r7, #7]
 80164da:	e003      	b.n	80164e4 <Process_Send_Signals_2_MIE_Kyosan+0x60>
 80164dc:	79fb      	ldrb	r3, [r7, #7]
 80164de:	f023 0302 	bic.w	r3, r3, #2
 80164e2:	71fb      	strb	r3, [r7, #7]

			switch(Choice)
 80164e4:	79fb      	ldrb	r3, [r7, #7]
 80164e6:	2b01      	cmp	r3, #1
 80164e8:	d005      	beq.n	80164f6 <Process_Send_Signals_2_MIE_Kyosan+0x72>
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	dd3f      	ble.n	801656e <Process_Send_Signals_2_MIE_Kyosan+0xea>
 80164ee:	3b02      	subs	r3, #2
 80164f0:	2b01      	cmp	r3, #1
 80164f2:	d83c      	bhi.n	801656e <Process_Send_Signals_2_MIE_Kyosan+0xea>
 80164f4:	e01d      	b.n	8016532 <Process_Send_Signals_2_MIE_Kyosan+0xae>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_OtherRelays.Relays,MAX_KYOSAN_RELAYS);
 80164f6:	4a2f      	ldr	r2, [pc, #188]	; (80165b4 <Process_Send_Signals_2_MIE_Kyosan+0x130>)
 80164f8:	4b2c      	ldr	r3, [pc, #176]	; (80165ac <Process_Send_Signals_2_MIE_Kyosan+0x128>)
 80164fa:	3302      	adds	r3, #2
 80164fc:	1c90      	adds	r0, r2, #2
 80164fe:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016502:	4602      	mov	r2, r0
 8016504:	4619      	mov	r1, r3
 8016506:	f8d1 c000 	ldr.w	ip, [r1]
 801650a:	684e      	ldr	r6, [r1, #4]
 801650c:	688d      	ldr	r5, [r1, #8]
 801650e:	68c9      	ldr	r1, [r1, #12]
 8016510:	f8c2 c000 	str.w	ip, [r2]
 8016514:	6056      	str	r6, [r2, #4]
 8016516:	6095      	str	r5, [r2, #8]
 8016518:	60d1      	str	r1, [r2, #12]
 801651a:	3310      	adds	r3, #16
 801651c:	3010      	adds	r0, #16
 801651e:	42a3      	cmp	r3, r4
 8016520:	d1ef      	bne.n	8016502 <Process_Send_Signals_2_MIE_Kyosan+0x7e>
 8016522:	4602      	mov	r2, r0
 8016524:	6818      	ldr	r0, [r3, #0]
 8016526:	6859      	ldr	r1, [r3, #4]
 8016528:	689b      	ldr	r3, [r3, #8]
 801652a:	6010      	str	r0, [r2, #0]
 801652c:	6051      	str	r1, [r2, #4]
 801652e:	6093      	str	r3, [r2, #8]
				break;
 8016530:	e02c      	b.n	801658c <Process_Send_Signals_2_MIE_Kyosan+0x108>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_SelfRelays.Relays,MAX_KYOSAN_RELAYS);
 8016532:	4a20      	ldr	r2, [pc, #128]	; (80165b4 <Process_Send_Signals_2_MIE_Kyosan+0x130>)
 8016534:	4b1e      	ldr	r3, [pc, #120]	; (80165b0 <Process_Send_Signals_2_MIE_Kyosan+0x12c>)
 8016536:	3302      	adds	r3, #2
 8016538:	1c90      	adds	r0, r2, #2
 801653a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801653e:	4602      	mov	r2, r0
 8016540:	4619      	mov	r1, r3
 8016542:	f8d1 c000 	ldr.w	ip, [r1]
 8016546:	684e      	ldr	r6, [r1, #4]
 8016548:	688d      	ldr	r5, [r1, #8]
 801654a:	68c9      	ldr	r1, [r1, #12]
 801654c:	f8c2 c000 	str.w	ip, [r2]
 8016550:	6056      	str	r6, [r2, #4]
 8016552:	6095      	str	r5, [r2, #8]
 8016554:	60d1      	str	r1, [r2, #12]
 8016556:	3310      	adds	r3, #16
 8016558:	3010      	adds	r0, #16
 801655a:	42a3      	cmp	r3, r4
 801655c:	d1ef      	bne.n	801653e <Process_Send_Signals_2_MIE_Kyosan+0xba>
 801655e:	4602      	mov	r2, r0
 8016560:	6818      	ldr	r0, [r3, #0]
 8016562:	6859      	ldr	r1, [r3, #4]
 8016564:	689b      	ldr	r3, [r3, #8]
 8016566:	6010      	str	r0, [r2, #0]
 8016568:	6051      	str	r1, [r2, #4]
 801656a:	6093      	str	r3, [r2, #8]
				break;
 801656c:	e00e      	b.n	801658c <Process_Send_Signals_2_MIE_Kyosan+0x108>

			default:
				memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 801656e:	2240      	movs	r2, #64	; 0x40
 8016570:	2100      	movs	r1, #0
 8016572:	4810      	ldr	r0, [pc, #64]	; (80165b4 <Process_Send_Signals_2_MIE_Kyosan+0x130>)
 8016574:	f00f fea8 	bl	80262c8 <memset>
 8016578:	e008      	b.n	801658c <Process_Send_Signals_2_MIE_Kyosan+0x108>
			}
		}
		else
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 801657a:	2240      	movs	r2, #64	; 0x40
 801657c:	2100      	movs	r1, #0
 801657e:	480d      	ldr	r0, [pc, #52]	; (80165b4 <Process_Send_Signals_2_MIE_Kyosan+0x130>)
 8016580:	f00f fea2 	bl	80262c8 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8016584:	f240 1019 	movw	r0, #281	; 0x119
 8016588:	f7fa fa72 	bl	8010a70 <TransmitCanPkt>
		}
#endif
		MIE_SignalsSending_Clk_Kyosan = HAL_GetTick();
 801658c:	f002 ff7a 	bl	8019484 <HAL_GetTick>
 8016590:	4603      	mov	r3, r0
 8016592:	4a03      	ldr	r2, [pc, #12]	; (80165a0 <Process_Send_Signals_2_MIE_Kyosan+0x11c>)
 8016594:	6013      	str	r3, [r2, #0]
	}
}
 8016596:	bf00      	nop
 8016598:	370c      	adds	r7, #12
 801659a:	46bd      	mov	sp, r7
 801659c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801659e:	bf00      	nop
 80165a0:	2000b534 	.word	0x2000b534
 80165a4:	20000504 	.word	0x20000504
 80165a8:	2000030b 	.word	0x2000030b
 80165ac:	2000b434 	.word	0x2000b434
 80165b0:	2000b3f4 	.word	0x2000b3f4
 80165b4:	2000b4b4 	.word	0x2000b4b4

080165b8 <Get_Kyosan_EI_Message>:

void Get_Kyosan_EI_Message(uint8_t ComPort)
{
 80165b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165ba:	b089      	sub	sp, #36	; 0x24
 80165bc:	af00      	add	r7, sp, #0
 80165be:	4603      	mov	r3, r0
 80165c0:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 80165c2:	2300      	movs	r3, #0
 80165c4:	737b      	strb	r3, [r7, #13]
	static uint16_t Cur_Receive_Length = 0;
	static uint8_t Buffer[256] = {0,};
	static uint8_t Curnt_ProcessingDataType = 0;
	static uint8_t Control_DataReceived = RESET;
	static uint32_t Last_ValidControlInfoClk = 0;
	uint16_t C_CRC = 0;
 80165c6:	2300      	movs	r3, #0
 80165c8:	817b      	strh	r3, [r7, #10]
	uint16_t R_CRC = 0;
 80165ca:	2300      	movs	r3, #0
 80165cc:	83fb      	strh	r3, [r7, #30]
#ifdef EI_1
	static uint16_t PrevRelayCRC = 0;
#endif
	static uint8_t ControlData_Positive[256] = {0,};
	static uint8_t ControlData_Negative[256] = {0,};
	uint8_t Pos_NegDataMisMatch = RESET;
 80165ce:	2300      	movs	r3, #0
 80165d0:	777b      	strb	r3, [r7, #29]
	static uint8_t Pos_NegDataMisMatch_Count = RESET;
	uint8_t TypeofDataMisMatch = RESET;
 80165d2:	2300      	movs	r3, #0
 80165d4:	773b      	strb	r3, [r7, #28]
	uint8_t ControlID = 0;
 80165d6:	2300      	movs	r3, #0
 80165d8:	727b      	strb	r3, [r7, #9]



	if((HAL_Elaps_Ticks(Last_ValidControlInfoClk) >= EI_data.Kyosan_st.Comm_Fail_Time) && (Control_DataReceived == SET))
 80165da:	4b33      	ldr	r3, [pc, #204]	; (80166a8 <Get_Kyosan_EI_Message+0xf0>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	4618      	mov	r0, r3
 80165e0:	f7f9 fcca 	bl	800ff78 <HAL_Elaps_Ticks>
 80165e4:	4602      	mov	r2, r0
 80165e6:	4b31      	ldr	r3, [pc, #196]	; (80166ac <Get_Kyosan_EI_Message+0xf4>)
 80165e8:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80165ec:	429a      	cmp	r2, r3
 80165ee:	f0c0 83ef 	bcc.w	8016dd0 <Get_Kyosan_EI_Message+0x818>
 80165f2:	4b2f      	ldr	r3, [pc, #188]	; (80166b0 <Get_Kyosan_EI_Message+0xf8>)
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	2b01      	cmp	r3, #1
 80165f8:	f040 83ea 	bne.w	8016dd0 <Get_Kyosan_EI_Message+0x818>
	{
		Control_DataReceived = RESET;
 80165fc:	4b2c      	ldr	r3, [pc, #176]	; (80166b0 <Get_Kyosan_EI_Message+0xf8>)
 80165fe:	2200      	movs	r2, #0
 8016600:	701a      	strb	r2, [r3, #0]
	}

	while(Com_DataReady(ComPort))
 8016602:	e3e5      	b.n	8016dd0 <Get_Kyosan_EI_Message+0x818>
	{
		Data = Com_Get_Byte(ComPort);
 8016604:	79fb      	ldrb	r3, [r7, #7]
 8016606:	4618      	mov	r0, r3
 8016608:	f002 fc14 	bl	8018e34 <Com_Get_Byte>
 801660c:	4603      	mov	r3, r0
 801660e:	737b      	strb	r3, [r7, #13]
		//		printf("%02X ",Data);

		if((Cur_Receive_Length == Max_Receive_Length) || (Cur_Receive_Length == RESET))
 8016610:	4b28      	ldr	r3, [pc, #160]	; (80166b4 <Get_Kyosan_EI_Message+0xfc>)
 8016612:	881a      	ldrh	r2, [r3, #0]
 8016614:	4b28      	ldr	r3, [pc, #160]	; (80166b8 <Get_Kyosan_EI_Message+0x100>)
 8016616:	881b      	ldrh	r3, [r3, #0]
 8016618:	429a      	cmp	r2, r3
 801661a:	d003      	beq.n	8016624 <Get_Kyosan_EI_Message+0x6c>
 801661c:	4b25      	ldr	r3, [pc, #148]	; (80166b4 <Get_Kyosan_EI_Message+0xfc>)
 801661e:	881b      	ldrh	r3, [r3, #0]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d139      	bne.n	8016698 <Get_Kyosan_EI_Message+0xe0>
		{
			memset(Buffer,0,sizeof(Buffer));
 8016624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016628:	2100      	movs	r1, #0
 801662a:	4824      	ldr	r0, [pc, #144]	; (80166bc <Get_Kyosan_EI_Message+0x104>)
 801662c:	f00f fe4c 	bl	80262c8 <memset>
			Cur_Receive_Length = RESET;
 8016630:	4b20      	ldr	r3, [pc, #128]	; (80166b4 <Get_Kyosan_EI_Message+0xfc>)
 8016632:	2200      	movs	r2, #0
 8016634:	801a      	strh	r2, [r3, #0]

			switch(Data)
 8016636:	7b7b      	ldrb	r3, [r7, #13]
 8016638:	2b01      	cmp	r3, #1
 801663a:	d001      	beq.n	8016640 <Get_Kyosan_EI_Message+0x88>
 801663c:	2bfe      	cmp	r3, #254	; 0xfe
 801663e:	d113      	bne.n	8016668 <Get_Kyosan_EI_Message+0xb0>
			{
			case ACTUAL_CONTROL_DATA:
			case COMPLIMENT_CONTROL_DATA:
				Max_Receive_Length = (	EI_data.Kyosan_st.No_ofFrames * 64);
 8016640:	4b1a      	ldr	r3, [pc, #104]	; (80166ac <Get_Kyosan_EI_Message+0xf4>)
 8016642:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8016646:	b29b      	uxth	r3, r3
 8016648:	019b      	lsls	r3, r3, #6
 801664a:	b29a      	uxth	r2, r3
 801664c:	4b1a      	ldr	r3, [pc, #104]	; (80166b8 <Get_Kyosan_EI_Message+0x100>)
 801664e:	801a      	strh	r2, [r3, #0]
				if(EI_data.Kyosan_st.No_ofFrames == 4)
 8016650:	4b16      	ldr	r3, [pc, #88]	; (80166ac <Get_Kyosan_EI_Message+0xf4>)
 8016652:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8016656:	2b04      	cmp	r3, #4
 8016658:	d102      	bne.n	8016660 <Get_Kyosan_EI_Message+0xa8>
				{
					Max_Receive_Length = 192;
 801665a:	4b17      	ldr	r3, [pc, #92]	; (80166b8 <Get_Kyosan_EI_Message+0x100>)
 801665c:	22c0      	movs	r2, #192	; 0xc0
 801665e:	801a      	strh	r2, [r3, #0]
				}
				Curnt_ProcessingDataType = CONTROL_DATA;
 8016660:	4b17      	ldr	r3, [pc, #92]	; (80166c0 <Get_Kyosan_EI_Message+0x108>)
 8016662:	2201      	movs	r2, #1
 8016664:	701a      	strb	r2, [r3, #0]
				//				printf("Received Ctrl Data|");
				break;
 8016666:	e017      	b.n	8016698 <Get_Kyosan_EI_Message+0xe0>

			default:

				/* Polling Data Range (0x11-0x7f for Positive data) (0x80-0xEE for Negative data)*/
				/* Control_DataReceived checking is added to Avoid Control information data to be processed as Polling Information */
				if( (Control_DataReceived == SET) && (((Data >= 0X11 ) && (Data <= 0X7F)) || ((Data >= 0X80 ) && (Data <= 0XEE))) )
 8016668:	4b11      	ldr	r3, [pc, #68]	; (80166b0 <Get_Kyosan_EI_Message+0xf8>)
 801666a:	781b      	ldrb	r3, [r3, #0]
 801666c:	2b01      	cmp	r3, #1
 801666e:	d113      	bne.n	8016698 <Get_Kyosan_EI_Message+0xe0>
 8016670:	7b7b      	ldrb	r3, [r7, #13]
 8016672:	2b10      	cmp	r3, #16
 8016674:	d903      	bls.n	801667e <Get_Kyosan_EI_Message+0xc6>
 8016676:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801667a:	2b00      	cmp	r3, #0
 801667c:	da06      	bge.n	801668c <Get_Kyosan_EI_Message+0xd4>
 801667e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016682:	2b00      	cmp	r3, #0
 8016684:	da08      	bge.n	8016698 <Get_Kyosan_EI_Message+0xe0>
 8016686:	7b7b      	ldrb	r3, [r7, #13]
 8016688:	2bee      	cmp	r3, #238	; 0xee
 801668a:	d805      	bhi.n	8016698 <Get_Kyosan_EI_Message+0xe0>
				{
					/* Consider the data as Polling Data */
					//					printf("Received Polling Data:%u|%02X\n",Control_DataReceived,Data);
					Curnt_ProcessingDataType = POLLING_DATA;
 801668c:	4b0c      	ldr	r3, [pc, #48]	; (80166c0 <Get_Kyosan_EI_Message+0x108>)
 801668e:	2202      	movs	r2, #2
 8016690:	701a      	strb	r2, [r3, #0]
					Max_Receive_Length = 3;
 8016692:	4b09      	ldr	r3, [pc, #36]	; (80166b8 <Get_Kyosan_EI_Message+0x100>)
 8016694:	2203      	movs	r2, #3
 8016696:	801a      	strh	r2, [r3, #0]
				}
			}
		}

		switch(Curnt_ProcessingDataType)
 8016698:	4b09      	ldr	r3, [pc, #36]	; (80166c0 <Get_Kyosan_EI_Message+0x108>)
 801669a:	781b      	ldrb	r3, [r3, #0]
 801669c:	2b01      	cmp	r3, #1
 801669e:	d011      	beq.n	80166c4 <Get_Kyosan_EI_Message+0x10c>
 80166a0:	2b02      	cmp	r3, #2
 80166a2:	f000 82c1 	beq.w	8016c28 <Get_Kyosan_EI_Message+0x670>
 80166a6:	e390      	b.n	8016dca <Get_Kyosan_EI_Message+0x812>
 80166a8:	2000b930 	.word	0x2000b930
 80166ac:	20000504 	.word	0x20000504
 80166b0:	2000b934 	.word	0x2000b934
 80166b4:	2000b936 	.word	0x2000b936
 80166b8:	2000b938 	.word	0x2000b938
 80166bc:	2000b93c 	.word	0x2000b93c
 80166c0:	2000ba3c 	.word	0x2000ba3c
		{
		case CONTROL_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 80166c4:	4ba4      	ldr	r3, [pc, #656]	; (8016958 <Get_Kyosan_EI_Message+0x3a0>)
 80166c6:	881b      	ldrh	r3, [r3, #0]
 80166c8:	1c5a      	adds	r2, r3, #1
 80166ca:	b291      	uxth	r1, r2
 80166cc:	4aa2      	ldr	r2, [pc, #648]	; (8016958 <Get_Kyosan_EI_Message+0x3a0>)
 80166ce:	8011      	strh	r1, [r2, #0]
 80166d0:	4619      	mov	r1, r3
 80166d2:	4aa2      	ldr	r2, [pc, #648]	; (801695c <Get_Kyosan_EI_Message+0x3a4>)
 80166d4:	7b7b      	ldrb	r3, [r7, #13]
 80166d6:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 80166d8:	4b9f      	ldr	r3, [pc, #636]	; (8016958 <Get_Kyosan_EI_Message+0x3a0>)
 80166da:	881a      	ldrh	r2, [r3, #0]
 80166dc:	4ba0      	ldr	r3, [pc, #640]	; (8016960 <Get_Kyosan_EI_Message+0x3a8>)
 80166de:	881b      	ldrh	r3, [r3, #0]
 80166e0:	429a      	cmp	r2, r3
 80166e2:	f040 8375 	bne.w	8016dd0 <Get_Kyosan_EI_Message+0x818>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 80166e6:	4b9c      	ldr	r3, [pc, #624]	; (8016958 <Get_Kyosan_EI_Message+0x3a0>)
 80166e8:	881b      	ldrh	r3, [r3, #0]
 80166ea:	3b02      	subs	r3, #2
 80166ec:	4619      	mov	r1, r3
 80166ee:	489b      	ldr	r0, [pc, #620]	; (801695c <Get_Kyosan_EI_Message+0x3a4>)
 80166f0:	f000 fb96 	bl	8016e20 <Calc_Kysoan_CRC>
 80166f4:	4603      	mov	r3, r0
 80166f6:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 80166f8:	4b97      	ldr	r3, [pc, #604]	; (8016958 <Get_Kyosan_EI_Message+0x3a0>)
 80166fa:	881b      	ldrh	r3, [r3, #0]
 80166fc:	3b02      	subs	r3, #2
 80166fe:	4a97      	ldr	r2, [pc, #604]	; (801695c <Get_Kyosan_EI_Message+0x3a4>)
 8016700:	4413      	add	r3, r2
 8016702:	461a      	mov	r2, r3
 8016704:	2110      	movs	r1, #16
 8016706:	2000      	movs	r0, #0
 8016708:	f7e9 ff84 	bl	8000614 <ExtractBits>
 801670c:	4603      	mov	r3, r0
 801670e:	83fb      	strh	r3, [r7, #30]


				if( (  (CHECKFLAG(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8016710:	4b94      	ldr	r3, [pc, #592]	; (8016964 <Get_Kyosan_EI_Message+0x3ac>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	f003 0301 	and.w	r3, r3, #1
 8016718:	2b00      	cmp	r3, #0
 801671a:	d02d      	beq.n	8016778 <Get_Kyosan_EI_Message+0x1c0>
 801671c:	4b8f      	ldr	r3, [pc, #572]	; (801695c <Get_Kyosan_EI_Message+0x3a4>)
 801671e:	781b      	ldrb	r3, [r3, #0]
 8016720:	b25b      	sxtb	r3, r3
 8016722:	11db      	asrs	r3, r3, #7
 8016724:	b25b      	sxtb	r3, r3
 8016726:	f003 0301 	and.w	r3, r3, #1
 801672a:	2b00      	cmp	r3, #0
 801672c:	d124      	bne.n	8016778 <Get_Kyosan_EI_Message+0x1c0>
				{
					printf("\nInjecting Positive Control Data CRC Failure\n");
 801672e:	488e      	ldr	r0, [pc, #568]	; (8016968 <Get_Kyosan_EI_Message+0x3b0>)
 8016730:	f00f ff4e 	bl	80265d0 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016734:	488d      	ldr	r0, [pc, #564]	; (801696c <Get_Kyosan_EI_Message+0x3b4>)
 8016736:	f007 fb57 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 801673a:	4601      	mov	r1, r0
 801673c:	4b8c      	ldr	r3, [pc, #560]	; (8016970 <Get_Kyosan_EI_Message+0x3b8>)
 801673e:	fba3 2301 	umull	r2, r3, r3, r1
 8016742:	0bda      	lsrs	r2, r3, #15
 8016744:	4613      	mov	r3, r2
 8016746:	041b      	lsls	r3, r3, #16
 8016748:	1a9b      	subs	r3, r3, r2
 801674a:	1aca      	subs	r2, r1, r3
 801674c:	4613      	mov	r3, r2
 801674e:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016750:	8bfa      	ldrh	r2, [r7, #30]
 8016752:	897b      	ldrh	r3, [r7, #10]
 8016754:	429a      	cmp	r2, r3
 8016756:	d10f      	bne.n	8016778 <Get_Kyosan_EI_Message+0x1c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016758:	4884      	ldr	r0, [pc, #528]	; (801696c <Get_Kyosan_EI_Message+0x3b4>)
 801675a:	f007 fb45 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 801675e:	4601      	mov	r1, r0
 8016760:	4b84      	ldr	r3, [pc, #528]	; (8016974 <Get_Kyosan_EI_Message+0x3bc>)
 8016762:	fba3 2301 	umull	r2, r3, r3, r1
 8016766:	09da      	lsrs	r2, r3, #7
 8016768:	4613      	mov	r3, r2
 801676a:	021b      	lsls	r3, r3, #8
 801676c:	1a9b      	subs	r3, r3, r2
 801676e:	1aca      	subs	r2, r1, r3
 8016770:	b293      	uxth	r3, r2
 8016772:	8bfa      	ldrh	r2, [r7, #30]
 8016774:	1ad3      	subs	r3, r2, r3
 8016776:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016778:	4b7a      	ldr	r3, [pc, #488]	; (8016964 <Get_Kyosan_EI_Message+0x3ac>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	085b      	lsrs	r3, r3, #1
 801677e:	f003 0301 	and.w	r3, r3, #1
 8016782:	2b00      	cmp	r3, #0
 8016784:	d02d      	beq.n	80167e2 <Get_Kyosan_EI_Message+0x22a>
 8016786:	4b75      	ldr	r3, [pc, #468]	; (801695c <Get_Kyosan_EI_Message+0x3a4>)
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	b25b      	sxtb	r3, r3
 801678c:	11db      	asrs	r3, r3, #7
 801678e:	b25b      	sxtb	r3, r3
 8016790:	f003 0301 	and.w	r3, r3, #1
 8016794:	2b00      	cmp	r3, #0
 8016796:	d024      	beq.n	80167e2 <Get_Kyosan_EI_Message+0x22a>
				{
					printf("\nInjecting Negative Control Data CRC Failure\n");
 8016798:	4877      	ldr	r0, [pc, #476]	; (8016978 <Get_Kyosan_EI_Message+0x3c0>)
 801679a:	f00f ff19 	bl	80265d0 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 801679e:	4873      	ldr	r0, [pc, #460]	; (801696c <Get_Kyosan_EI_Message+0x3b4>)
 80167a0:	f007 fb22 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 80167a4:	4601      	mov	r1, r0
 80167a6:	4b72      	ldr	r3, [pc, #456]	; (8016970 <Get_Kyosan_EI_Message+0x3b8>)
 80167a8:	fba3 2301 	umull	r2, r3, r3, r1
 80167ac:	0bda      	lsrs	r2, r3, #15
 80167ae:	4613      	mov	r3, r2
 80167b0:	041b      	lsls	r3, r3, #16
 80167b2:	1a9b      	subs	r3, r3, r2
 80167b4:	1aca      	subs	r2, r1, r3
 80167b6:	4613      	mov	r3, r2
 80167b8:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 80167ba:	8bfa      	ldrh	r2, [r7, #30]
 80167bc:	897b      	ldrh	r3, [r7, #10]
 80167be:	429a      	cmp	r2, r3
 80167c0:	d10f      	bne.n	80167e2 <Get_Kyosan_EI_Message+0x22a>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 80167c2:	486a      	ldr	r0, [pc, #424]	; (801696c <Get_Kyosan_EI_Message+0x3b4>)
 80167c4:	f007 fb10 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 80167c8:	4601      	mov	r1, r0
 80167ca:	4b6a      	ldr	r3, [pc, #424]	; (8016974 <Get_Kyosan_EI_Message+0x3bc>)
 80167cc:	fba3 2301 	umull	r2, r3, r3, r1
 80167d0:	09da      	lsrs	r2, r3, #7
 80167d2:	4613      	mov	r3, r2
 80167d4:	021b      	lsls	r3, r3, #8
 80167d6:	1a9b      	subs	r3, r3, r2
 80167d8:	1aca      	subs	r2, r1, r3
 80167da:	b293      	uxth	r3, r2
 80167dc:	8bfa      	ldrh	r2, [r7, #30]
 80167de:	1ad3      	subs	r3, r2, r3
 80167e0:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(R_CRC == C_CRC)
 80167e2:	8bfa      	ldrh	r2, [r7, #30]
 80167e4:	897b      	ldrh	r3, [r7, #10]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	f040 81db 	bne.w	8016ba2 <Get_Kyosan_EI_Message+0x5ea>
				{

					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80167ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80167f0:	4862      	ldr	r0, [pc, #392]	; (801697c <Get_Kyosan_EI_Message+0x3c4>)
 80167f2:	f005 fb30 	bl	801be56 <HAL_GPIO_TogglePin>


					Last_ValidControlInfoClk = HAL_GetTick();
 80167f6:	f002 fe45 	bl	8019484 <HAL_GetTick>
 80167fa:	4603      	mov	r3, r0
 80167fc:	4a60      	ldr	r2, [pc, #384]	; (8016980 <Get_Kyosan_EI_Message+0x3c8>)
 80167fe:	6013      	str	r3, [r2, #0]
					Control_DataReceived = SET;
 8016800:	4b60      	ldr	r3, [pc, #384]	; (8016984 <Get_Kyosan_EI_Message+0x3cc>)
 8016802:	2201      	movs	r2, #1
 8016804:	701a      	strb	r2, [r3, #0]
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 8016806:	f002 fe3d 	bl	8019484 <HAL_GetTick>
 801680a:	4603      	mov	r3, r0
 801680c:	4a5e      	ldr	r2, [pc, #376]	; (8016988 <Get_Kyosan_EI_Message+0x3d0>)
 801680e:	6013      	str	r3, [r2, #0]

					//					printf("CTRL-Data CRC OK\n");
					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016810:	4b52      	ldr	r3, [pc, #328]	; (801695c <Get_Kyosan_EI_Message+0x3a4>)
 8016812:	781b      	ldrb	r3, [r3, #0]
 8016814:	b25b      	sxtb	r3, r3
 8016816:	11db      	asrs	r3, r3, #7
 8016818:	b25b      	sxtb	r3, r3
 801681a:	f003 0301 	and.w	r3, r3, #1
 801681e:	2b00      	cmp	r3, #0
 8016820:	f040 80c6 	bne.w	80169b0 <Get_Kyosan_EI_Message+0x3f8>
					{
						printf("+ Ctrl Data|");
 8016824:	4859      	ldr	r0, [pc, #356]	; (801698c <Get_Kyosan_EI_Message+0x3d4>)
 8016826:	f00f fe37 	bl	8026498 <iprintf>
						memcpy(&ControlData_Positive,&Buffer,Cur_Receive_Length);
 801682a:	4b4b      	ldr	r3, [pc, #300]	; (8016958 <Get_Kyosan_EI_Message+0x3a0>)
 801682c:	881b      	ldrh	r3, [r3, #0]
 801682e:	461a      	mov	r2, r3
 8016830:	494a      	ldr	r1, [pc, #296]	; (801695c <Get_Kyosan_EI_Message+0x3a4>)
 8016832:	4857      	ldr	r0, [pc, #348]	; (8016990 <Get_Kyosan_EI_Message+0x3d8>)
 8016834:	f00f fd20 	bl	8026278 <memcpy>

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016838:	4b4a      	ldr	r3, [pc, #296]	; (8016964 <Get_Kyosan_EI_Message+0x3ac>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	091b      	lsrs	r3, r3, #4
 801683e:	f003 0301 	and.w	r3, r3, #1
 8016842:	2b00      	cmp	r3, #0
 8016844:	d027      	beq.n	8016896 <Get_Kyosan_EI_Message+0x2de>
 8016846:	4b45      	ldr	r3, [pc, #276]	; (801695c <Get_Kyosan_EI_Message+0x3a4>)
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	b25b      	sxtb	r3, r3
 801684c:	11db      	asrs	r3, r3, #7
 801684e:	b25b      	sxtb	r3, r3
 8016850:	f003 0301 	and.w	r3, r3, #1
 8016854:	2b00      	cmp	r3, #0
 8016856:	d01e      	beq.n	8016896 <Get_Kyosan_EI_Message+0x2de>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8016858:	484e      	ldr	r0, [pc, #312]	; (8016994 <Get_Kyosan_EI_Message+0x3dc>)
 801685a:	f00f feb9 	bl	80265d0 <puts>
							ControlData_Positive[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 801685e:	4843      	ldr	r0, [pc, #268]	; (801696c <Get_Kyosan_EI_Message+0x3b4>)
 8016860:	f007 fac2 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8016864:	4602      	mov	r2, r0
 8016866:	4b43      	ldr	r3, [pc, #268]	; (8016974 <Get_Kyosan_EI_Message+0x3bc>)
 8016868:	fba3 1302 	umull	r1, r3, r3, r2
 801686c:	09dc      	lsrs	r4, r3, #7
 801686e:	4623      	mov	r3, r4
 8016870:	021b      	lsls	r3, r3, #8
 8016872:	1b1b      	subs	r3, r3, r4
 8016874:	1ad4      	subs	r4, r2, r3
 8016876:	483d      	ldr	r0, [pc, #244]	; (801696c <Get_Kyosan_EI_Message+0x3b4>)
 8016878:	f007 fab6 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 801687c:	4601      	mov	r1, r0
 801687e:	4b46      	ldr	r3, [pc, #280]	; (8016998 <Get_Kyosan_EI_Message+0x3e0>)
 8016880:	fba3 2301 	umull	r2, r3, r3, r1
 8016884:	08da      	lsrs	r2, r3, #3
 8016886:	4613      	mov	r3, r2
 8016888:	011b      	lsls	r3, r3, #4
 801688a:	1a9b      	subs	r3, r3, r2
 801688c:	1aca      	subs	r2, r1, r3
 801688e:	1c53      	adds	r3, r2, #1
 8016890:	b2e1      	uxtb	r1, r4
 8016892:	4a3f      	ldr	r2, [pc, #252]	; (8016990 <Get_Kyosan_EI_Message+0x3d8>)
 8016894:	54d1      	strb	r1, [r2, r3]
						}

						ControlID = (uint8_t)((uint8_t)ControlData_Positive[0]&(uint8_t)0x0f);
 8016896:	4b3e      	ldr	r3, [pc, #248]	; (8016990 <Get_Kyosan_EI_Message+0x3d8>)
 8016898:	781b      	ldrb	r3, [r3, #0]
 801689a:	f003 030f 	and.w	r3, r3, #15
 801689e:	727b      	strb	r3, [r7, #9]
						//						printf("%u|",ControlID);
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 80168a0:	2300      	movs	r3, #0
 80168a2:	837b      	strh	r3, [r7, #26]
 80168a4:	e011      	b.n	80168ca <Get_Kyosan_EI_Message+0x312>
						{
							if(ControlData_Negative[i] != (uint8_t)(~ControlData_Positive[i]))
 80168a6:	8b7b      	ldrh	r3, [r7, #26]
 80168a8:	4a3c      	ldr	r2, [pc, #240]	; (801699c <Get_Kyosan_EI_Message+0x3e4>)
 80168aa:	5cd2      	ldrb	r2, [r2, r3]
 80168ac:	8b7b      	ldrh	r3, [r7, #26]
 80168ae:	4938      	ldr	r1, [pc, #224]	; (8016990 <Get_Kyosan_EI_Message+0x3d8>)
 80168b0:	5ccb      	ldrb	r3, [r1, r3]
 80168b2:	43db      	mvns	r3, r3
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d004      	beq.n	80168c4 <Get_Kyosan_EI_Message+0x30c>
							{
								Pos_NegDataMisMatch = SET;
 80168ba:	2301      	movs	r3, #1
 80168bc:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = POS_DATA_MISMATCH;
 80168be:	2301      	movs	r3, #1
 80168c0:	773b      	strb	r3, [r7, #28]
								//								printf("Positive & Negative data not Matching\n");
								//								printf("P:%X-N:%X -> %X\n",ControlData_Positive[i],ControlData_Negative[i],(uint8_t)(~ControlData_Positive[i]));
								break;
 80168c2:	e008      	b.n	80168d6 <Get_Kyosan_EI_Message+0x31e>
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 80168c4:	8b7b      	ldrh	r3, [r7, #26]
 80168c6:	3301      	adds	r3, #1
 80168c8:	837b      	strh	r3, [r7, #26]
 80168ca:	8b7a      	ldrh	r2, [r7, #26]
 80168cc:	4b22      	ldr	r3, [pc, #136]	; (8016958 <Get_Kyosan_EI_Message+0x3a0>)
 80168ce:	881b      	ldrh	r3, [r3, #0]
 80168d0:	3b02      	subs	r3, #2
 80168d2:	429a      	cmp	r2, r3
 80168d4:	dbe7      	blt.n	80168a6 <Get_Kyosan_EI_Message+0x2ee>
							}
						}

						if(Pos_NegDataMisMatch == RESET)
 80168d6:	7f7b      	ldrb	r3, [r7, #29]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f040 80c1 	bne.w	8016a60 <Get_Kyosan_EI_Message+0x4a8>
						{
							printf("\nR:");
 80168de:	4830      	ldr	r0, [pc, #192]	; (80169a0 <Get_Kyosan_EI_Message+0x3e8>)
 80168e0:	f00f fdda 	bl	8026498 <iprintf>
							for(uint8_t i=1;i<61;++i)
 80168e4:	2301      	movs	r3, #1
 80168e6:	767b      	strb	r3, [r7, #25]
 80168e8:	e009      	b.n	80168fe <Get_Kyosan_EI_Message+0x346>
							{
								printf("%02X ",ControlData_Positive[i]);
 80168ea:	7e7b      	ldrb	r3, [r7, #25]
 80168ec:	4a28      	ldr	r2, [pc, #160]	; (8016990 <Get_Kyosan_EI_Message+0x3d8>)
 80168ee:	5cd3      	ldrb	r3, [r2, r3]
 80168f0:	4619      	mov	r1, r3
 80168f2:	482c      	ldr	r0, [pc, #176]	; (80169a4 <Get_Kyosan_EI_Message+0x3ec>)
 80168f4:	f00f fdd0 	bl	8026498 <iprintf>
							for(uint8_t i=1;i<61;++i)
 80168f8:	7e7b      	ldrb	r3, [r7, #25]
 80168fa:	3301      	adds	r3, #1
 80168fc:	767b      	strb	r3, [r7, #25]
 80168fe:	7e7b      	ldrb	r3, [r7, #25]
 8016900:	2b3c      	cmp	r3, #60	; 0x3c
 8016902:	d9f2      	bls.n	80168ea <Get_Kyosan_EI_Message+0x332>
							}
							printf("\n");
 8016904:	200a      	movs	r0, #10
 8016906:	f00f fddf 	bl	80264c8 <putchar>

							memcpy(Kyosan_SelfRelays.Relays,&ControlData_Positive[1],60);
 801690a:	4a27      	ldr	r2, [pc, #156]	; (80169a8 <Get_Kyosan_EI_Message+0x3f0>)
 801690c:	4b20      	ldr	r3, [pc, #128]	; (8016990 <Get_Kyosan_EI_Message+0x3d8>)
 801690e:	3301      	adds	r3, #1
 8016910:	1c90      	adds	r0, r2, #2
 8016912:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016916:	4602      	mov	r2, r0
 8016918:	4619      	mov	r1, r3
 801691a:	f8d1 c000 	ldr.w	ip, [r1]
 801691e:	684e      	ldr	r6, [r1, #4]
 8016920:	688d      	ldr	r5, [r1, #8]
 8016922:	68c9      	ldr	r1, [r1, #12]
 8016924:	f8c2 c000 	str.w	ip, [r2]
 8016928:	6056      	str	r6, [r2, #4]
 801692a:	6095      	str	r5, [r2, #8]
 801692c:	60d1      	str	r1, [r2, #12]
 801692e:	3310      	adds	r3, #16
 8016930:	3010      	adds	r0, #16
 8016932:	42a3      	cmp	r3, r4
 8016934:	d1ef      	bne.n	8016916 <Get_Kyosan_EI_Message+0x35e>
 8016936:	4602      	mov	r2, r0
 8016938:	6818      	ldr	r0, [r3, #0]
 801693a:	6859      	ldr	r1, [r3, #4]
 801693c:	689b      	ldr	r3, [r3, #8]
 801693e:	6010      	str	r0, [r2, #0]
 8016940:	6051      	str	r1, [r2, #4]
 8016942:	6093      	str	r3, [r2, #8]
							Kyosan_SelfRelays.Relay_CRC = Calc_Kysoan_CRC(Kyosan_SelfRelays.Relays, 60);
 8016944:	213c      	movs	r1, #60	; 0x3c
 8016946:	4819      	ldr	r0, [pc, #100]	; (80169ac <Get_Kyosan_EI_Message+0x3f4>)
 8016948:	f000 fa6a 	bl	8016e20 <Calc_Kysoan_CRC>
 801694c:	4603      	mov	r3, r0
 801694e:	461a      	mov	r2, r3
 8016950:	4b15      	ldr	r3, [pc, #84]	; (80169a8 <Get_Kyosan_EI_Message+0x3f0>)
 8016952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016954:	e084      	b.n	8016a60 <Get_Kyosan_EI_Message+0x4a8>
 8016956:	bf00      	nop
 8016958:	2000b936 	.word	0x2000b936
 801695c:	2000b93c 	.word	0x2000b93c
 8016960:	2000b938 	.word	0x2000b938
 8016964:	2000b3d8 	.word	0x2000b3d8
 8016968:	0802b28c 	.word	0x0802b28c
 801696c:	2000bc44 	.word	0x2000bc44
 8016970:	80008001 	.word	0x80008001
 8016974:	80808081 	.word	0x80808081
 8016978:	0802b2bc 	.word	0x0802b2bc
 801697c:	40021c00 	.word	0x40021c00
 8016980:	2000b930 	.word	0x2000b930
 8016984:	2000b934 	.word	0x2000b934
 8016988:	2000b3e0 	.word	0x2000b3e0
 801698c:	0802b2ec 	.word	0x0802b2ec
 8016990:	2000ba40 	.word	0x2000ba40
 8016994:	0802b2fc 	.word	0x0802b2fc
 8016998:	88888889 	.word	0x88888889
 801699c:	2000bb40 	.word	0x2000bb40
 80169a0:	0802b33c 	.word	0x0802b33c
 80169a4:	0802b340 	.word	0x0802b340
 80169a8:	2000b3f4 	.word	0x2000b3f4
 80169ac:	2000b3f6 	.word	0x2000b3f6
						}

					}
					else
					{
						printf("- Ctrl Data|");
 80169b0:	4888      	ldr	r0, [pc, #544]	; (8016bd4 <Get_Kyosan_EI_Message+0x61c>)
 80169b2:	f00f fd71 	bl	8026498 <iprintf>
						memcpy(&ControlData_Negative,&Buffer,Cur_Receive_Length);
 80169b6:	4b88      	ldr	r3, [pc, #544]	; (8016bd8 <Get_Kyosan_EI_Message+0x620>)
 80169b8:	881b      	ldrh	r3, [r3, #0]
 80169ba:	461a      	mov	r2, r3
 80169bc:	4987      	ldr	r1, [pc, #540]	; (8016bdc <Get_Kyosan_EI_Message+0x624>)
 80169be:	4888      	ldr	r0, [pc, #544]	; (8016be0 <Get_Kyosan_EI_Message+0x628>)
 80169c0:	f00f fc5a 	bl	8026278 <memcpy>
						ControlID = (uint8_t)(~ControlData_Negative[0]);
 80169c4:	4b86      	ldr	r3, [pc, #536]	; (8016be0 <Get_Kyosan_EI_Message+0x628>)
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	43db      	mvns	r3, r3
 80169ca:	727b      	strb	r3, [r7, #9]

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 80169cc:	4b85      	ldr	r3, [pc, #532]	; (8016be4 <Get_Kyosan_EI_Message+0x62c>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	091b      	lsrs	r3, r3, #4
 80169d2:	f003 0301 	and.w	r3, r3, #1
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d027      	beq.n	8016a2a <Get_Kyosan_EI_Message+0x472>
 80169da:	4b80      	ldr	r3, [pc, #512]	; (8016bdc <Get_Kyosan_EI_Message+0x624>)
 80169dc:	781b      	ldrb	r3, [r3, #0]
 80169de:	b25b      	sxtb	r3, r3
 80169e0:	11db      	asrs	r3, r3, #7
 80169e2:	b25b      	sxtb	r3, r3
 80169e4:	f003 0301 	and.w	r3, r3, #1
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d01e      	beq.n	8016a2a <Get_Kyosan_EI_Message+0x472>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 80169ec:	487e      	ldr	r0, [pc, #504]	; (8016be8 <Get_Kyosan_EI_Message+0x630>)
 80169ee:	f00f fdef 	bl	80265d0 <puts>
							ControlData_Negative[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 80169f2:	487e      	ldr	r0, [pc, #504]	; (8016bec <Get_Kyosan_EI_Message+0x634>)
 80169f4:	f007 f9f8 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 80169f8:	4602      	mov	r2, r0
 80169fa:	4b7d      	ldr	r3, [pc, #500]	; (8016bf0 <Get_Kyosan_EI_Message+0x638>)
 80169fc:	fba3 1302 	umull	r1, r3, r3, r2
 8016a00:	09dc      	lsrs	r4, r3, #7
 8016a02:	4623      	mov	r3, r4
 8016a04:	021b      	lsls	r3, r3, #8
 8016a06:	1b1b      	subs	r3, r3, r4
 8016a08:	1ad4      	subs	r4, r2, r3
 8016a0a:	4878      	ldr	r0, [pc, #480]	; (8016bec <Get_Kyosan_EI_Message+0x634>)
 8016a0c:	f007 f9ec 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8016a10:	4601      	mov	r1, r0
 8016a12:	4b78      	ldr	r3, [pc, #480]	; (8016bf4 <Get_Kyosan_EI_Message+0x63c>)
 8016a14:	fba3 2301 	umull	r2, r3, r3, r1
 8016a18:	08da      	lsrs	r2, r3, #3
 8016a1a:	4613      	mov	r3, r2
 8016a1c:	011b      	lsls	r3, r3, #4
 8016a1e:	1a9b      	subs	r3, r3, r2
 8016a20:	1aca      	subs	r2, r1, r3
 8016a22:	1c53      	adds	r3, r2, #1
 8016a24:	b2e1      	uxtb	r1, r4
 8016a26:	4a6e      	ldr	r2, [pc, #440]	; (8016be0 <Get_Kyosan_EI_Message+0x628>)
 8016a28:	54d1      	strb	r1, [r2, r3]
						}


						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	82fb      	strh	r3, [r7, #22]
 8016a2e:	e011      	b.n	8016a54 <Get_Kyosan_EI_Message+0x49c>
						{
							if(ControlData_Positive[i] != (uint8_t)(~ControlData_Negative[i]))
 8016a30:	8afb      	ldrh	r3, [r7, #22]
 8016a32:	4a71      	ldr	r2, [pc, #452]	; (8016bf8 <Get_Kyosan_EI_Message+0x640>)
 8016a34:	5cd2      	ldrb	r2, [r2, r3]
 8016a36:	8afb      	ldrh	r3, [r7, #22]
 8016a38:	4969      	ldr	r1, [pc, #420]	; (8016be0 <Get_Kyosan_EI_Message+0x628>)
 8016a3a:	5ccb      	ldrb	r3, [r1, r3]
 8016a3c:	43db      	mvns	r3, r3
 8016a3e:	b2db      	uxtb	r3, r3
 8016a40:	429a      	cmp	r2, r3
 8016a42:	d004      	beq.n	8016a4e <Get_Kyosan_EI_Message+0x496>
							{
								Pos_NegDataMisMatch = SET;
 8016a44:	2301      	movs	r3, #1
 8016a46:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = NEG_DATA_MISMATCH;
 8016a48:	2302      	movs	r3, #2
 8016a4a:	773b      	strb	r3, [r7, #28]
								//								printf("Negative & Positive data not Matching\n");
								//								printf("N:%02X-P:%02X -> %X\n",ControlData_Negative[i],ControlData_Positive[i],(uint8_t)(~ControlData_Negative[i]));
								break;
 8016a4c:	e008      	b.n	8016a60 <Get_Kyosan_EI_Message+0x4a8>
						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016a4e:	8afb      	ldrh	r3, [r7, #22]
 8016a50:	3301      	adds	r3, #1
 8016a52:	82fb      	strh	r3, [r7, #22]
 8016a54:	8afa      	ldrh	r2, [r7, #22]
 8016a56:	4b60      	ldr	r3, [pc, #384]	; (8016bd8 <Get_Kyosan_EI_Message+0x620>)
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	3b02      	subs	r3, #2
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	dbe7      	blt.n	8016a30 <Get_Kyosan_EI_Message+0x478>
							//							}
							//							printf("\n");
						}
					}

					if(Pos_NegDataMisMatch == RESET)
 8016a60:	7f7b      	ldrb	r3, [r7, #29]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d11b      	bne.n	8016a9e <Get_Kyosan_EI_Message+0x4e6>
					{
						//						printf("+ & -:DATA:OK\n");
						if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016a66:	4b5d      	ldr	r3, [pc, #372]	; (8016bdc <Get_Kyosan_EI_Message+0x624>)
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	b25b      	sxtb	r3, r3
 8016a6c:	11db      	asrs	r3, r3, #7
 8016a6e:	b25b      	sxtb	r3, r3
 8016a70:	f003 0301 	and.w	r3, r3, #1
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d105      	bne.n	8016a84 <Get_Kyosan_EI_Message+0x4cc>
						{
							KyosanClocks.ControlDataPosRecvCLK = HAL_GetTick();
 8016a78:	f002 fd04 	bl	8019484 <HAL_GetTick>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	4a5f      	ldr	r2, [pc, #380]	; (8016bfc <Get_Kyosan_EI_Message+0x644>)
 8016a80:	6053      	str	r3, [r2, #4]
 8016a82:	e004      	b.n	8016a8e <Get_Kyosan_EI_Message+0x4d6>
						}
						else
						{
							KyosanClocks.ControlDataNegRecvCLK = HAL_GetTick();
 8016a84:	f002 fcfe 	bl	8019484 <HAL_GetTick>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	4a5c      	ldr	r2, [pc, #368]	; (8016bfc <Get_Kyosan_EI_Message+0x644>)
 8016a8c:	6093      	str	r3, [r2, #8]
						}
						Pos_NegDataMisMatch_Count = RESET;
 8016a8e:	4b5c      	ldr	r3, [pc, #368]	; (8016c00 <Get_Kyosan_EI_Message+0x648>)
 8016a90:	2200      	movs	r2, #0
 8016a92:	701a      	strb	r2, [r3, #0]
						TypeofDataMisMatch = RESET;
 8016a94:	2300      	movs	r3, #0
 8016a96:	773b      	strb	r3, [r7, #28]
						Pos_NegDataMisMatch = RESET;
 8016a98:	2300      	movs	r3, #0
 8016a9a:	777b      	strb	r3, [r7, #29]
 8016a9c:	e092      	b.n	8016bc4 <Get_Kyosan_EI_Message+0x60c>
					}
					else
					{
						++Pos_NegDataMisMatch_Count;
 8016a9e:	4b58      	ldr	r3, [pc, #352]	; (8016c00 <Get_Kyosan_EI_Message+0x648>)
 8016aa0:	781b      	ldrb	r3, [r3, #0]
 8016aa2:	3301      	adds	r3, #1
 8016aa4:	b2da      	uxtb	r2, r3
 8016aa6:	4b56      	ldr	r3, [pc, #344]	; (8016c00 <Get_Kyosan_EI_Message+0x648>)
 8016aa8:	701a      	strb	r2, [r3, #0]

						if(Pos_NegDataMisMatch_Count == 2)
 8016aaa:	4b55      	ldr	r3, [pc, #340]	; (8016c00 <Get_Kyosan_EI_Message+0x648>)
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	2b02      	cmp	r3, #2
 8016ab0:	d161      	bne.n	8016b76 <Get_Kyosan_EI_Message+0x5be>
						{
							switch(TypeofDataMisMatch)
 8016ab2:	7f3b      	ldrb	r3, [r7, #28]
 8016ab4:	2b01      	cmp	r3, #1
 8016ab6:	d002      	beq.n	8016abe <Get_Kyosan_EI_Message+0x506>
 8016ab8:	2b02      	cmp	r3, #2
 8016aba:	d02e      	beq.n	8016b1a <Get_Kyosan_EI_Message+0x562>
 8016abc:	e05c      	b.n	8016b78 <Get_Kyosan_EI_Message+0x5c0>
							{
							case POS_DATA_MISMATCH:
								printf("P:");
 8016abe:	4851      	ldr	r0, [pc, #324]	; (8016c04 <Get_Kyosan_EI_Message+0x64c>)
 8016ac0:	f00f fcea 	bl	8026498 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	82bb      	strh	r3, [r7, #20]
 8016ac8:	e009      	b.n	8016ade <Get_Kyosan_EI_Message+0x526>
								{
									printf("%02X ",ControlData_Positive[i]);
 8016aca:	8abb      	ldrh	r3, [r7, #20]
 8016acc:	4a4a      	ldr	r2, [pc, #296]	; (8016bf8 <Get_Kyosan_EI_Message+0x640>)
 8016ace:	5cd3      	ldrb	r3, [r2, r3]
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	484d      	ldr	r0, [pc, #308]	; (8016c08 <Get_Kyosan_EI_Message+0x650>)
 8016ad4:	f00f fce0 	bl	8026498 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016ad8:	8abb      	ldrh	r3, [r7, #20]
 8016ada:	3301      	adds	r3, #1
 8016adc:	82bb      	strh	r3, [r7, #20]
 8016ade:	4b3e      	ldr	r3, [pc, #248]	; (8016bd8 <Get_Kyosan_EI_Message+0x620>)
 8016ae0:	881b      	ldrh	r3, [r3, #0]
 8016ae2:	8aba      	ldrh	r2, [r7, #20]
 8016ae4:	429a      	cmp	r2, r3
 8016ae6:	d3f0      	bcc.n	8016aca <Get_Kyosan_EI_Message+0x512>
								}
								printf("\nN:");
 8016ae8:	4848      	ldr	r0, [pc, #288]	; (8016c0c <Get_Kyosan_EI_Message+0x654>)
 8016aea:	f00f fcd5 	bl	8026498 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016aee:	2300      	movs	r3, #0
 8016af0:	827b      	strh	r3, [r7, #18]
 8016af2:	e009      	b.n	8016b08 <Get_Kyosan_EI_Message+0x550>
								{
									printf("%02X ",ControlData_Negative[i]);
 8016af4:	8a7b      	ldrh	r3, [r7, #18]
 8016af6:	4a3a      	ldr	r2, [pc, #232]	; (8016be0 <Get_Kyosan_EI_Message+0x628>)
 8016af8:	5cd3      	ldrb	r3, [r2, r3]
 8016afa:	4619      	mov	r1, r3
 8016afc:	4842      	ldr	r0, [pc, #264]	; (8016c08 <Get_Kyosan_EI_Message+0x650>)
 8016afe:	f00f fccb 	bl	8026498 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016b02:	8a7b      	ldrh	r3, [r7, #18]
 8016b04:	3301      	adds	r3, #1
 8016b06:	827b      	strh	r3, [r7, #18]
 8016b08:	4b33      	ldr	r3, [pc, #204]	; (8016bd8 <Get_Kyosan_EI_Message+0x620>)
 8016b0a:	881b      	ldrh	r3, [r3, #0]
 8016b0c:	8a7a      	ldrh	r2, [r7, #18]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d3f0      	bcc.n	8016af4 <Get_Kyosan_EI_Message+0x53c>
								}
								printf("\n");
 8016b12:	200a      	movs	r0, #10
 8016b14:	f00f fcd8 	bl	80264c8 <putchar>
								break;
 8016b18:	e02e      	b.n	8016b78 <Get_Kyosan_EI_Message+0x5c0>
							case NEG_DATA_MISMATCH:
								printf("N:");
 8016b1a:	483d      	ldr	r0, [pc, #244]	; (8016c10 <Get_Kyosan_EI_Message+0x658>)
 8016b1c:	f00f fcbc 	bl	8026498 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016b20:	2300      	movs	r3, #0
 8016b22:	823b      	strh	r3, [r7, #16]
 8016b24:	e009      	b.n	8016b3a <Get_Kyosan_EI_Message+0x582>
								{
									printf("%02X ",ControlData_Negative[i]);
 8016b26:	8a3b      	ldrh	r3, [r7, #16]
 8016b28:	4a2d      	ldr	r2, [pc, #180]	; (8016be0 <Get_Kyosan_EI_Message+0x628>)
 8016b2a:	5cd3      	ldrb	r3, [r2, r3]
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	4836      	ldr	r0, [pc, #216]	; (8016c08 <Get_Kyosan_EI_Message+0x650>)
 8016b30:	f00f fcb2 	bl	8026498 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016b34:	8a3b      	ldrh	r3, [r7, #16]
 8016b36:	3301      	adds	r3, #1
 8016b38:	823b      	strh	r3, [r7, #16]
 8016b3a:	4b27      	ldr	r3, [pc, #156]	; (8016bd8 <Get_Kyosan_EI_Message+0x620>)
 8016b3c:	881b      	ldrh	r3, [r3, #0]
 8016b3e:	8a3a      	ldrh	r2, [r7, #16]
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d3f0      	bcc.n	8016b26 <Get_Kyosan_EI_Message+0x56e>
								}
								printf("\nP:");
 8016b44:	4833      	ldr	r0, [pc, #204]	; (8016c14 <Get_Kyosan_EI_Message+0x65c>)
 8016b46:	f00f fca7 	bl	8026498 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	81fb      	strh	r3, [r7, #14]
 8016b4e:	e009      	b.n	8016b64 <Get_Kyosan_EI_Message+0x5ac>
								{
									printf("%02X ",ControlData_Positive[i]);
 8016b50:	89fb      	ldrh	r3, [r7, #14]
 8016b52:	4a29      	ldr	r2, [pc, #164]	; (8016bf8 <Get_Kyosan_EI_Message+0x640>)
 8016b54:	5cd3      	ldrb	r3, [r2, r3]
 8016b56:	4619      	mov	r1, r3
 8016b58:	482b      	ldr	r0, [pc, #172]	; (8016c08 <Get_Kyosan_EI_Message+0x650>)
 8016b5a:	f00f fc9d 	bl	8026498 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016b5e:	89fb      	ldrh	r3, [r7, #14]
 8016b60:	3301      	adds	r3, #1
 8016b62:	81fb      	strh	r3, [r7, #14]
 8016b64:	4b1c      	ldr	r3, [pc, #112]	; (8016bd8 <Get_Kyosan_EI_Message+0x620>)
 8016b66:	881b      	ldrh	r3, [r3, #0]
 8016b68:	89fa      	ldrh	r2, [r7, #14]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d3f0      	bcc.n	8016b50 <Get_Kyosan_EI_Message+0x598>
								}
								printf("\n");
 8016b6e:	200a      	movs	r0, #10
 8016b70:	f00f fcaa 	bl	80264c8 <putchar>
								break;
 8016b74:	e000      	b.n	8016b78 <Get_Kyosan_EI_Message+0x5c0>
							default:
 8016b76:	bf00      	nop
								;

							}
						}

						if(Pos_NegDataMisMatch_Count >= EI_data.Kyosan_st.MaxMisMatchCnt)
 8016b78:	4b21      	ldr	r3, [pc, #132]	; (8016c00 <Get_Kyosan_EI_Message+0x648>)
 8016b7a:	781b      	ldrb	r3, [r3, #0]
 8016b7c:	b29a      	uxth	r2, r3
 8016b7e:	4b26      	ldr	r3, [pc, #152]	; (8016c18 <Get_Kyosan_EI_Message+0x660>)
 8016b80:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d31d      	bcc.n	8016bc4 <Get_Kyosan_EI_Message+0x60c>
						{
							printf("\n+ & - Data Mismatch count Reached:%u\n",Pos_NegDataMisMatch_Count);
 8016b88:	4b1d      	ldr	r3, [pc, #116]	; (8016c00 <Get_Kyosan_EI_Message+0x648>)
 8016b8a:	781b      	ldrb	r3, [r3, #0]
 8016b8c:	4619      	mov	r1, r3
 8016b8e:	4823      	ldr	r0, [pc, #140]	; (8016c1c <Get_Kyosan_EI_Message+0x664>)
 8016b90:	f00f fc82 	bl	8026498 <iprintf>
							Pos_NegDataMisMatch_Count = EI_data.Kyosan_st.MaxMisMatchCnt; /* To avoid Overflow */
 8016b94:	4b20      	ldr	r3, [pc, #128]	; (8016c18 <Get_Kyosan_EI_Message+0x660>)
 8016b96:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8016b9a:	b2da      	uxtb	r2, r3
 8016b9c:	4b18      	ldr	r3, [pc, #96]	; (8016c00 <Get_Kyosan_EI_Message+0x648>)
 8016b9e:	701a      	strb	r2, [r3, #0]
 8016ba0:	e010      	b.n	8016bc4 <Get_Kyosan_EI_Message+0x60c>
						}
					}
				}
				else
				{
					printf("\n%c Control Data Packet CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 8016ba2:	4b0e      	ldr	r3, [pc, #56]	; (8016bdc <Get_Kyosan_EI_Message+0x624>)
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	b25b      	sxtb	r3, r3
 8016ba8:	11db      	asrs	r3, r3, #7
 8016baa:	b25b      	sxtb	r3, r3
 8016bac:	f003 0301 	and.w	r3, r3, #1
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d101      	bne.n	8016bb8 <Get_Kyosan_EI_Message+0x600>
 8016bb4:	212b      	movs	r1, #43	; 0x2b
 8016bb6:	e000      	b.n	8016bba <Get_Kyosan_EI_Message+0x602>
 8016bb8:	212d      	movs	r1, #45	; 0x2d
 8016bba:	897a      	ldrh	r2, [r7, #10]
 8016bbc:	8bfb      	ldrh	r3, [r7, #30]
 8016bbe:	4818      	ldr	r0, [pc, #96]	; (8016c20 <Get_Kyosan_EI_Message+0x668>)
 8016bc0:	f00f fc6a 	bl	8026498 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8016bc4:	4b04      	ldr	r3, [pc, #16]	; (8016bd8 <Get_Kyosan_EI_Message+0x620>)
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8016bca:	4b16      	ldr	r3, [pc, #88]	; (8016c24 <Get_Kyosan_EI_Message+0x66c>)
 8016bcc:	2200      	movs	r2, #0
 8016bce:	801a      	strh	r2, [r3, #0]
			}
			break;
 8016bd0:	e0fe      	b.n	8016dd0 <Get_Kyosan_EI_Message+0x818>
 8016bd2:	bf00      	nop
 8016bd4:	0802b348 	.word	0x0802b348
 8016bd8:	2000b936 	.word	0x2000b936
 8016bdc:	2000b93c 	.word	0x2000b93c
 8016be0:	2000bb40 	.word	0x2000bb40
 8016be4:	2000b3d8 	.word	0x2000b3d8
 8016be8:	0802b2fc 	.word	0x0802b2fc
 8016bec:	2000bc44 	.word	0x2000bc44
 8016bf0:	80808081 	.word	0x80808081
 8016bf4:	88888889 	.word	0x88888889
 8016bf8:	2000ba40 	.word	0x2000ba40
 8016bfc:	2000b3e0 	.word	0x2000b3e0
 8016c00:	2000bc40 	.word	0x2000bc40
 8016c04:	0802b358 	.word	0x0802b358
 8016c08:	0802b340 	.word	0x0802b340
 8016c0c:	0802b35c 	.word	0x0802b35c
 8016c10:	0802b360 	.word	0x0802b360
 8016c14:	0802b364 	.word	0x0802b364
 8016c18:	20000504 	.word	0x20000504
 8016c1c:	0802b368 	.word	0x0802b368
 8016c20:	0802b390 	.word	0x0802b390
 8016c24:	2000b938 	.word	0x2000b938
		case POLLING_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 8016c28:	4b70      	ldr	r3, [pc, #448]	; (8016dec <Get_Kyosan_EI_Message+0x834>)
 8016c2a:	881b      	ldrh	r3, [r3, #0]
 8016c2c:	1c5a      	adds	r2, r3, #1
 8016c2e:	b291      	uxth	r1, r2
 8016c30:	4a6e      	ldr	r2, [pc, #440]	; (8016dec <Get_Kyosan_EI_Message+0x834>)
 8016c32:	8011      	strh	r1, [r2, #0]
 8016c34:	4619      	mov	r1, r3
 8016c36:	4a6e      	ldr	r2, [pc, #440]	; (8016df0 <Get_Kyosan_EI_Message+0x838>)
 8016c38:	7b7b      	ldrb	r3, [r7, #13]
 8016c3a:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 8016c3c:	4b6b      	ldr	r3, [pc, #428]	; (8016dec <Get_Kyosan_EI_Message+0x834>)
 8016c3e:	881a      	ldrh	r2, [r3, #0]
 8016c40:	4b6c      	ldr	r3, [pc, #432]	; (8016df4 <Get_Kyosan_EI_Message+0x83c>)
 8016c42:	881b      	ldrh	r3, [r3, #0]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	f040 80c3 	bne.w	8016dd0 <Get_Kyosan_EI_Message+0x818>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 8016c4a:	4b68      	ldr	r3, [pc, #416]	; (8016dec <Get_Kyosan_EI_Message+0x834>)
 8016c4c:	881b      	ldrh	r3, [r3, #0]
 8016c4e:	3b02      	subs	r3, #2
 8016c50:	4619      	mov	r1, r3
 8016c52:	4867      	ldr	r0, [pc, #412]	; (8016df0 <Get_Kyosan_EI_Message+0x838>)
 8016c54:	f000 f8e4 	bl	8016e20 <Calc_Kysoan_CRC>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8016c5c:	4b63      	ldr	r3, [pc, #396]	; (8016dec <Get_Kyosan_EI_Message+0x834>)
 8016c5e:	881b      	ldrh	r3, [r3, #0]
 8016c60:	3b02      	subs	r3, #2
 8016c62:	4a63      	ldr	r2, [pc, #396]	; (8016df0 <Get_Kyosan_EI_Message+0x838>)
 8016c64:	4413      	add	r3, r2
 8016c66:	461a      	mov	r2, r3
 8016c68:	2110      	movs	r1, #16
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	f7e9 fcd2 	bl	8000614 <ExtractBits>
 8016c70:	4603      	mov	r3, r0
 8016c72:	83fb      	strh	r3, [r7, #30]

				if( (  (CHECKFLAG(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8016c74:	4b60      	ldr	r3, [pc, #384]	; (8016df8 <Get_Kyosan_EI_Message+0x840>)
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	089b      	lsrs	r3, r3, #2
 8016c7a:	f003 0301 	and.w	r3, r3, #1
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d02d      	beq.n	8016cde <Get_Kyosan_EI_Message+0x726>
 8016c82:	4b5b      	ldr	r3, [pc, #364]	; (8016df0 <Get_Kyosan_EI_Message+0x838>)
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	b25b      	sxtb	r3, r3
 8016c88:	11db      	asrs	r3, r3, #7
 8016c8a:	b25b      	sxtb	r3, r3
 8016c8c:	f003 0301 	and.w	r3, r3, #1
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d124      	bne.n	8016cde <Get_Kyosan_EI_Message+0x726>
				{
					printf("\nInjecting Positive Polling Data CRC Failure\n");
 8016c94:	4859      	ldr	r0, [pc, #356]	; (8016dfc <Get_Kyosan_EI_Message+0x844>)
 8016c96:	f00f fc9b 	bl	80265d0 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016c9a:	4859      	ldr	r0, [pc, #356]	; (8016e00 <Get_Kyosan_EI_Message+0x848>)
 8016c9c:	f007 f8a4 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8016ca0:	4601      	mov	r1, r0
 8016ca2:	4b58      	ldr	r3, [pc, #352]	; (8016e04 <Get_Kyosan_EI_Message+0x84c>)
 8016ca4:	fba3 2301 	umull	r2, r3, r3, r1
 8016ca8:	0bda      	lsrs	r2, r3, #15
 8016caa:	4613      	mov	r3, r2
 8016cac:	041b      	lsls	r3, r3, #16
 8016cae:	1a9b      	subs	r3, r3, r2
 8016cb0:	1aca      	subs	r2, r1, r3
 8016cb2:	4613      	mov	r3, r2
 8016cb4:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016cb6:	8bfa      	ldrh	r2, [r7, #30]
 8016cb8:	897b      	ldrh	r3, [r7, #10]
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d10f      	bne.n	8016cde <Get_Kyosan_EI_Message+0x726>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016cbe:	4850      	ldr	r0, [pc, #320]	; (8016e00 <Get_Kyosan_EI_Message+0x848>)
 8016cc0:	f007 f892 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8016cc4:	4601      	mov	r1, r0
 8016cc6:	4b50      	ldr	r3, [pc, #320]	; (8016e08 <Get_Kyosan_EI_Message+0x850>)
 8016cc8:	fba3 2301 	umull	r2, r3, r3, r1
 8016ccc:	09da      	lsrs	r2, r3, #7
 8016cce:	4613      	mov	r3, r2
 8016cd0:	021b      	lsls	r3, r3, #8
 8016cd2:	1a9b      	subs	r3, r3, r2
 8016cd4:	1aca      	subs	r2, r1, r3
 8016cd6:	b293      	uxth	r3, r2
 8016cd8:	8bfa      	ldrh	r2, [r7, #30]
 8016cda:	1ad3      	subs	r3, r2, r3
 8016cdc:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016cde:	4b46      	ldr	r3, [pc, #280]	; (8016df8 <Get_Kyosan_EI_Message+0x840>)
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	08db      	lsrs	r3, r3, #3
 8016ce4:	f003 0301 	and.w	r3, r3, #1
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d02d      	beq.n	8016d48 <Get_Kyosan_EI_Message+0x790>
 8016cec:	4b40      	ldr	r3, [pc, #256]	; (8016df0 <Get_Kyosan_EI_Message+0x838>)
 8016cee:	781b      	ldrb	r3, [r3, #0]
 8016cf0:	b25b      	sxtb	r3, r3
 8016cf2:	11db      	asrs	r3, r3, #7
 8016cf4:	b25b      	sxtb	r3, r3
 8016cf6:	f003 0301 	and.w	r3, r3, #1
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d024      	beq.n	8016d48 <Get_Kyosan_EI_Message+0x790>
				{
					printf("\nInjecting Negative Polling Data CRC Failure\n");
 8016cfe:	4843      	ldr	r0, [pc, #268]	; (8016e0c <Get_Kyosan_EI_Message+0x854>)
 8016d00:	f00f fc66 	bl	80265d0 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016d04:	483e      	ldr	r0, [pc, #248]	; (8016e00 <Get_Kyosan_EI_Message+0x848>)
 8016d06:	f007 f86f 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8016d0a:	4601      	mov	r1, r0
 8016d0c:	4b3d      	ldr	r3, [pc, #244]	; (8016e04 <Get_Kyosan_EI_Message+0x84c>)
 8016d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8016d12:	0bda      	lsrs	r2, r3, #15
 8016d14:	4613      	mov	r3, r2
 8016d16:	041b      	lsls	r3, r3, #16
 8016d18:	1a9b      	subs	r3, r3, r2
 8016d1a:	1aca      	subs	r2, r1, r3
 8016d1c:	4613      	mov	r3, r2
 8016d1e:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016d20:	8bfa      	ldrh	r2, [r7, #30]
 8016d22:	897b      	ldrh	r3, [r7, #10]
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d10f      	bne.n	8016d48 <Get_Kyosan_EI_Message+0x790>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016d28:	4835      	ldr	r0, [pc, #212]	; (8016e00 <Get_Kyosan_EI_Message+0x848>)
 8016d2a:	f007 f85d 	bl	801dde8 <HAL_RNG_GetRandomNumber>
 8016d2e:	4601      	mov	r1, r0
 8016d30:	4b35      	ldr	r3, [pc, #212]	; (8016e08 <Get_Kyosan_EI_Message+0x850>)
 8016d32:	fba3 2301 	umull	r2, r3, r3, r1
 8016d36:	09da      	lsrs	r2, r3, #7
 8016d38:	4613      	mov	r3, r2
 8016d3a:	021b      	lsls	r3, r3, #8
 8016d3c:	1a9b      	subs	r3, r3, r2
 8016d3e:	1aca      	subs	r2, r1, r3
 8016d40:	b293      	uxth	r3, r2
 8016d42:	8bfa      	ldrh	r2, [r7, #30]
 8016d44:	1ad3      	subs	r3, r2, r3
 8016d46:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(C_CRC == R_CRC)
 8016d48:	897a      	ldrh	r2, [r7, #10]
 8016d4a:	8bfb      	ldrh	r3, [r7, #30]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d11e      	bne.n	8016d8e <Get_Kyosan_EI_Message+0x7d6>
				{
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 8016d50:	f002 fb98 	bl	8019484 <HAL_GetTick>
 8016d54:	4603      	mov	r3, r0
 8016d56:	4a2e      	ldr	r2, [pc, #184]	; (8016e10 <Get_Kyosan_EI_Message+0x858>)
 8016d58:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8016d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016d5e:	482d      	ldr	r0, [pc, #180]	; (8016e14 <Get_Kyosan_EI_Message+0x85c>)
 8016d60:	f005 f879 	bl	801be56 <HAL_GPIO_TogglePin>

					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016d64:	4b22      	ldr	r3, [pc, #136]	; (8016df0 <Get_Kyosan_EI_Message+0x838>)
 8016d66:	781b      	ldrb	r3, [r3, #0]
 8016d68:	b25b      	sxtb	r3, r3
 8016d6a:	11db      	asrs	r3, r3, #7
 8016d6c:	b25b      	sxtb	r3, r3
 8016d6e:	f003 0301 	and.w	r3, r3, #1
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d105      	bne.n	8016d82 <Get_Kyosan_EI_Message+0x7ca>
					{
						KyosanClocks.PollingDataPosRecvCLK = HAL_GetTick();
 8016d76:	f002 fb85 	bl	8019484 <HAL_GetTick>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	4a24      	ldr	r2, [pc, #144]	; (8016e10 <Get_Kyosan_EI_Message+0x858>)
 8016d7e:	60d3      	str	r3, [r2, #12]
 8016d80:	e01c      	b.n	8016dbc <Get_Kyosan_EI_Message+0x804>
					}
					else
					{
						KyosanClocks.PollingDataNegRecvCLK = HAL_GetTick();
 8016d82:	f002 fb7f 	bl	8019484 <HAL_GetTick>
 8016d86:	4603      	mov	r3, r0
 8016d88:	4a21      	ldr	r2, [pc, #132]	; (8016e10 <Get_Kyosan_EI_Message+0x858>)
 8016d8a:	6113      	str	r3, [r2, #16]
 8016d8c:	e016      	b.n	8016dbc <Get_Kyosan_EI_Message+0x804>
					}
					//CRC_FailCnt = RESET;
				}
				else
				{
					printf("Polling Data CRC Failed\nC:%04x-R:%04x\n",C_CRC,R_CRC);
 8016d8e:	897b      	ldrh	r3, [r7, #10]
 8016d90:	8bfa      	ldrh	r2, [r7, #30]
 8016d92:	4619      	mov	r1, r3
 8016d94:	4820      	ldr	r0, [pc, #128]	; (8016e18 <Get_Kyosan_EI_Message+0x860>)
 8016d96:	f00f fb7f 	bl	8026498 <iprintf>
					printf("\n%c Polling Data CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 8016d9a:	4b15      	ldr	r3, [pc, #84]	; (8016df0 <Get_Kyosan_EI_Message+0x838>)
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	b25b      	sxtb	r3, r3
 8016da0:	11db      	asrs	r3, r3, #7
 8016da2:	b25b      	sxtb	r3, r3
 8016da4:	f003 0301 	and.w	r3, r3, #1
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d101      	bne.n	8016db0 <Get_Kyosan_EI_Message+0x7f8>
 8016dac:	212b      	movs	r1, #43	; 0x2b
 8016dae:	e000      	b.n	8016db2 <Get_Kyosan_EI_Message+0x7fa>
 8016db0:	212d      	movs	r1, #45	; 0x2d
 8016db2:	897a      	ldrh	r2, [r7, #10]
 8016db4:	8bfb      	ldrh	r3, [r7, #30]
 8016db6:	4819      	ldr	r0, [pc, #100]	; (8016e1c <Get_Kyosan_EI_Message+0x864>)
 8016db8:	f00f fb6e 	bl	8026498 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8016dbc:	4b0b      	ldr	r3, [pc, #44]	; (8016dec <Get_Kyosan_EI_Message+0x834>)
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8016dc2:	4b0c      	ldr	r3, [pc, #48]	; (8016df4 <Get_Kyosan_EI_Message+0x83c>)
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	801a      	strh	r2, [r3, #0]
			}
			break;
 8016dc8:	e002      	b.n	8016dd0 <Get_Kyosan_EI_Message+0x818>
		default:
			Cur_Receive_Length = RESET;
 8016dca:	4b08      	ldr	r3, [pc, #32]	; (8016dec <Get_Kyosan_EI_Message+0x834>)
 8016dcc:	2200      	movs	r2, #0
 8016dce:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(ComPort))
 8016dd0:	79fb      	ldrb	r3, [r7, #7]
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f001 ffee 	bl	8018db4 <Com_DataReady>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	f47f ac12 	bne.w	8016604 <Get_Kyosan_EI_Message+0x4c>

		}
	}
	UNUSED(ControlID);
}
 8016de0:	bf00      	nop
 8016de2:	bf00      	nop
 8016de4:	3724      	adds	r7, #36	; 0x24
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dea:	bf00      	nop
 8016dec:	2000b936 	.word	0x2000b936
 8016df0:	2000b93c 	.word	0x2000b93c
 8016df4:	2000b938 	.word	0x2000b938
 8016df8:	2000b3d8 	.word	0x2000b3d8
 8016dfc:	0802b3c4 	.word	0x0802b3c4
 8016e00:	2000bc44 	.word	0x2000bc44
 8016e04:	80008001 	.word	0x80008001
 8016e08:	80808081 	.word	0x80808081
 8016e0c:	0802b3f4 	.word	0x0802b3f4
 8016e10:	2000b3e0 	.word	0x2000b3e0
 8016e14:	40021c00 	.word	0x40021c00
 8016e18:	0802b424 	.word	0x0802b424
 8016e1c:	0802b44c 	.word	0x0802b44c

08016e20 <Calc_Kysoan_CRC>:


uint16_t Calc_Kysoan_CRC(uint8_t *data, size_t length)
{
 8016e20:	b480      	push	{r7}
 8016e22:	b087      	sub	sp, #28
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
	uint16_t crc = KYOSAN_CRC_INIT_VAL;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	82fb      	strh	r3, [r7, #22]

	for (size_t i = 0; i < length; i++)
 8016e2e:	2300      	movs	r3, #0
 8016e30:	613b      	str	r3, [r7, #16]
 8016e32:	e026      	b.n	8016e82 <Calc_Kysoan_CRC+0x62>
	{
		crc ^= (uint16_t)data[i] << 8; // XOR with next byte shifted to left
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	4413      	add	r3, r2
 8016e3a:	781b      	ldrb	r3, [r3, #0]
 8016e3c:	021b      	lsls	r3, r3, #8
 8016e3e:	b21a      	sxth	r2, r3
 8016e40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016e44:	4053      	eors	r3, r2
 8016e46:	b21b      	sxth	r3, r3
 8016e48:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	60fb      	str	r3, [r7, #12]
 8016e4e:	e012      	b.n	8016e76 <Calc_Kysoan_CRC+0x56>
		{
			if (crc & 0x8000)
 8016e50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	da08      	bge.n	8016e6a <Calc_Kysoan_CRC+0x4a>
			{
				crc = (crc << 1) ^ KYOSAN_CRC_POLYNOMIAL;
 8016e58:	8afb      	ldrh	r3, [r7, #22]
 8016e5a:	005b      	lsls	r3, r3, #1
 8016e5c:	b21a      	sxth	r2, r3
 8016e5e:	f241 0321 	movw	r3, #4129	; 0x1021
 8016e62:	4053      	eors	r3, r2
 8016e64:	b21b      	sxth	r3, r3
 8016e66:	82fb      	strh	r3, [r7, #22]
 8016e68:	e002      	b.n	8016e70 <Calc_Kysoan_CRC+0x50>
			}
			else
			{
				crc <<= 1;
 8016e6a:	8afb      	ldrh	r3, [r7, #22]
 8016e6c:	005b      	lsls	r3, r3, #1
 8016e6e:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	3301      	adds	r3, #1
 8016e74:	60fb      	str	r3, [r7, #12]
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	2b07      	cmp	r3, #7
 8016e7a:	dde9      	ble.n	8016e50 <Calc_Kysoan_CRC+0x30>
	for (size_t i = 0; i < length; i++)
 8016e7c:	693b      	ldr	r3, [r7, #16]
 8016e7e:	3301      	adds	r3, #1
 8016e80:	613b      	str	r3, [r7, #16]
 8016e82:	693a      	ldr	r2, [r7, #16]
 8016e84:	683b      	ldr	r3, [r7, #0]
 8016e86:	429a      	cmp	r2, r3
 8016e88:	d3d4      	bcc.n	8016e34 <Calc_Kysoan_CRC+0x14>
			}
		}
	}
	return crc;
 8016e8a:	8afb      	ldrh	r3, [r7, #22]
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	371c      	adds	r7, #28
 8016e90:	46bd      	mov	sp, r7
 8016e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e96:	4770      	bx	lr

08016e98 <Check_forKyosanCMD>:
	}
}


void Check_forKyosanCMD(void)
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b09a      	sub	sp, #104	; 0x68
 8016e9c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t Buffer[100] = {0,};
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	603b      	str	r3, [r7, #0]
 8016eb4:	1d3b      	adds	r3, r7, #4
 8016eb6:	2260      	movs	r2, #96	; 0x60
 8016eb8:	2100      	movs	r1, #0
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f00f fa04 	bl	80262c8 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8016ec0:	4b90      	ldr	r3, [pc, #576]	; (8017104 <Check_forKyosanCMD+0x26c>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7f9 f857 	bl	800ff78 <HAL_Elaps_Ticks>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	2b09      	cmp	r3, #9
 8016ece:	f240 8114 	bls.w	80170fa <Check_forKyosanCMD+0x262>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8016ed2:	e010      	b.n	8016ef6 <Check_forKyosanCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8016ed4:	2000      	movs	r0, #0
 8016ed6:	f001 ffad 	bl	8018e34 <Com_Get_Byte>
 8016eda:	4603      	mov	r3, r0
 8016edc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			Buffer[Index++] = Byte;
 8016ee0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016ee4:	1c5a      	adds	r2, r3, #1
 8016ee6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8016eea:	3368      	adds	r3, #104	; 0x68
 8016eec:	443b      	add	r3, r7
 8016eee:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8016ef2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8016ef6:	2000      	movs	r0, #0
 8016ef8:	f001 ff5c 	bl	8018db4 <Com_DataReady>
 8016efc:	4603      	mov	r3, r0
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d1e8      	bne.n	8016ed4 <Check_forKyosanCMD+0x3c>
		}
		if(Index>0)
 8016f02:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	f000 80ee 	beq.w	80170e8 <Check_forKyosanCMD+0x250>
		{
			Buffer[Index] = 0;
 8016f0c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016f10:	3368      	adds	r3, #104	; 0x68
 8016f12:	443b      	add	r3, r7
 8016f14:	2200      	movs	r2, #0
 8016f16:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8016f1a:	463b      	mov	r3, r7
 8016f1c:	4619      	mov	r1, r3
 8016f1e:	487a      	ldr	r0, [pc, #488]	; (8017108 <Check_forKyosanCMD+0x270>)
 8016f20:	f00f faba 	bl	8026498 <iprintf>
			switch(Is_KyosanCommand_Valid(Buffer,Index))
 8016f24:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8016f28:	463b      	mov	r3, r7
 8016f2a:	4611      	mov	r1, r2
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f000 fa25 	bl	801737c <Is_KyosanCommand_Valid>
 8016f32:	4603      	mov	r3, r0
 8016f34:	2b07      	cmp	r3, #7
 8016f36:	f200 80bb 	bhi.w	80170b0 <Check_forKyosanCMD+0x218>
 8016f3a:	a201      	add	r2, pc, #4	; (adr r2, 8016f40 <Check_forKyosanCMD+0xa8>)
 8016f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f40:	08016f61 	.word	0x08016f61
 8016f44:	08016f6f 	.word	0x08016f6f
 8016f48:	08016fd3 	.word	0x08016fd3
 8016f4c:	08016ff5 	.word	0x08016ff5
 8016f50:	0801701d 	.word	0x0801701d
 8016f54:	08017045 	.word	0x08017045
 8016f58:	0801706d 	.word	0x0801706d
 8016f5c:	08017095 	.word	0x08017095
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8016f60:	4b6a      	ldr	r3, [pc, #424]	; (801710c <Check_forKyosanCMD+0x274>)
 8016f62:	2201      	movs	r2, #1
 8016f64:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8016f66:	486a      	ldr	r0, [pc, #424]	; (8017110 <Check_forKyosanCMD+0x278>)
 8016f68:	f00f fb32 	bl	80265d0 <puts>
				break;
 8016f6c:	e0bc      	b.n	80170e8 <Check_forKyosanCMD+0x250>
			case ONE:
				printf("Received \"%s\":%u\n",KyosanCommands_List[ONE],(Buffer[Index-1])-'0');
 8016f6e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016f72:	3b01      	subs	r3, #1
 8016f74:	3368      	adds	r3, #104	; 0x68
 8016f76:	443b      	add	r3, r7
 8016f78:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016f7c:	3b30      	subs	r3, #48	; 0x30
 8016f7e:	461a      	mov	r2, r3
 8016f80:	4964      	ldr	r1, [pc, #400]	; (8017114 <Check_forKyosanCMD+0x27c>)
 8016f82:	4865      	ldr	r0, [pc, #404]	; (8017118 <Check_forKyosanCMD+0x280>)
 8016f84:	f00f fa88 	bl	8026498 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8016f88:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016f8c:	3b01      	subs	r3, #1
 8016f8e:	3368      	adds	r3, #104	; 0x68
 8016f90:	443b      	add	r3, r7
 8016f92:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016f96:	2b2f      	cmp	r3, #47	; 0x2f
 8016f98:	d914      	bls.n	8016fc4 <Check_forKyosanCMD+0x12c>
 8016f9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016f9e:	3b01      	subs	r3, #1
 8016fa0:	3368      	adds	r3, #104	; 0x68
 8016fa2:	443b      	add	r3, r7
 8016fa4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016fa8:	2b31      	cmp	r3, #49	; 0x31
 8016faa:	d80b      	bhi.n	8016fc4 <Check_forKyosanCMD+0x12c>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8016fac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016fb0:	3b01      	subs	r3, #1
 8016fb2:	3368      	adds	r3, #104	; 0x68
 8016fb4:	443b      	add	r3, r7
 8016fb6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016fba:	3b30      	subs	r3, #48	; 0x30
 8016fbc:	b2da      	uxtb	r2, r3
 8016fbe:	4b57      	ldr	r3, [pc, #348]	; (801711c <Check_forKyosanCMD+0x284>)
 8016fc0:	701a      	strb	r2, [r3, #0]
 8016fc2:	e002      	b.n	8016fca <Check_forKyosanCMD+0x132>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8016fc4:	4856      	ldr	r0, [pc, #344]	; (8017120 <Check_forKyosanCMD+0x288>)
 8016fc6:	f00f fb03 	bl	80265d0 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8016fca:	2301      	movs	r3, #1
 8016fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016fd0:	e08a      	b.n	80170e8 <Check_forKyosanCMD+0x250>

			case TWO:
				printf("Received %s\n",KyosanCommands_List[TWO]);
 8016fd2:	4954      	ldr	r1, [pc, #336]	; (8017124 <Check_forKyosanCMD+0x28c>)
 8016fd4:	4854      	ldr	r0, [pc, #336]	; (8017128 <Check_forKyosanCMD+0x290>)
 8016fd6:	f00f fa5f 	bl	8026498 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_POS\n");
 8016fda:	4854      	ldr	r0, [pc, #336]	; (801712c <Check_forKyosanCMD+0x294>)
 8016fdc:	f00f faf8 	bl	80265d0 <puts>
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8016fe0:	4b53      	ldr	r3, [pc, #332]	; (8017130 <Check_forKyosanCMD+0x298>)
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	f043 0301 	orr.w	r3, r3, #1
 8016fe8:	4a51      	ldr	r2, [pc, #324]	; (8017130 <Check_forKyosanCMD+0x298>)
 8016fea:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016fec:	2301      	movs	r3, #1
 8016fee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016ff2:	e079      	b.n	80170e8 <Check_forKyosanCMD+0x250>

			case THREE:
				printf("Received %s\n",KyosanCommands_List[THREE]);
 8016ff4:	494f      	ldr	r1, [pc, #316]	; (8017134 <Check_forKyosanCMD+0x29c>)
 8016ff6:	484c      	ldr	r0, [pc, #304]	; (8017128 <Check_forKyosanCMD+0x290>)
 8016ff8:	f00f fa4e 	bl	8026498 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_NEG\n");
 8016ffc:	484e      	ldr	r0, [pc, #312]	; (8017138 <Check_forKyosanCMD+0x2a0>)
 8016ffe:	f00f fae7 	bl	80265d0 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8017002:	4b4b      	ldr	r3, [pc, #300]	; (8017130 <Check_forKyosanCMD+0x298>)
 8017004:	2200      	movs	r2, #0
 8017006:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8017008:	4b49      	ldr	r3, [pc, #292]	; (8017130 <Check_forKyosanCMD+0x298>)
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	f043 0302 	orr.w	r3, r3, #2
 8017010:	4a47      	ldr	r2, [pc, #284]	; (8017130 <Check_forKyosanCMD+0x298>)
 8017012:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8017014:	2301      	movs	r3, #1
 8017016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801701a:	e065      	b.n	80170e8 <Check_forKyosanCMD+0x250>

			case FOUR:
				printf("Received %s\n",KyosanCommands_List[FOUR]);
 801701c:	4947      	ldr	r1, [pc, #284]	; (801713c <Check_forKyosanCMD+0x2a4>)
 801701e:	4842      	ldr	r0, [pc, #264]	; (8017128 <Check_forKyosanCMD+0x290>)
 8017020:	f00f fa3a 	bl	8026498 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_POS\n");
 8017024:	4846      	ldr	r0, [pc, #280]	; (8017140 <Check_forKyosanCMD+0x2a8>)
 8017026:	f00f fad3 	bl	80265d0 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 801702a:	4b41      	ldr	r3, [pc, #260]	; (8017130 <Check_forKyosanCMD+0x298>)
 801702c:	2200      	movs	r2, #0
 801702e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8017030:	4b3f      	ldr	r3, [pc, #252]	; (8017130 <Check_forKyosanCMD+0x298>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	f043 0304 	orr.w	r3, r3, #4
 8017038:	4a3d      	ldr	r2, [pc, #244]	; (8017130 <Check_forKyosanCMD+0x298>)
 801703a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 801703c:	2301      	movs	r3, #1
 801703e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8017042:	e051      	b.n	80170e8 <Check_forKyosanCMD+0x250>

			case FIVE:
				printf("Received %s\n",KyosanCommands_List[FIVE]);
 8017044:	493f      	ldr	r1, [pc, #252]	; (8017144 <Check_forKyosanCMD+0x2ac>)
 8017046:	4838      	ldr	r0, [pc, #224]	; (8017128 <Check_forKyosanCMD+0x290>)
 8017048:	f00f fa26 	bl	8026498 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_NEG\n");
 801704c:	483e      	ldr	r0, [pc, #248]	; (8017148 <Check_forKyosanCMD+0x2b0>)
 801704e:	f00f fabf 	bl	80265d0 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8017052:	4b37      	ldr	r3, [pc, #220]	; (8017130 <Check_forKyosanCMD+0x298>)
 8017054:	2200      	movs	r2, #0
 8017056:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8017058:	4b35      	ldr	r3, [pc, #212]	; (8017130 <Check_forKyosanCMD+0x298>)
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	f043 0308 	orr.w	r3, r3, #8
 8017060:	4a33      	ldr	r2, [pc, #204]	; (8017130 <Check_forKyosanCMD+0x298>)
 8017062:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8017064:	2301      	movs	r3, #1
 8017066:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801706a:	e03d      	b.n	80170e8 <Check_forKyosanCMD+0x250>

			case SIX:
				printf("Received %s\n",KyosanCommands_List[SIX]);
 801706c:	4937      	ldr	r1, [pc, #220]	; (801714c <Check_forKyosanCMD+0x2b4>)
 801706e:	482e      	ldr	r0, [pc, #184]	; (8017128 <Check_forKyosanCMD+0x290>)
 8017070:	f00f fa12 	bl	8026498 <iprintf>
				printf("COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA\n");
 8017074:	4836      	ldr	r0, [pc, #216]	; (8017150 <Check_forKyosanCMD+0x2b8>)
 8017076:	f00f faab 	bl	80265d0 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 801707a:	4b2d      	ldr	r3, [pc, #180]	; (8017130 <Check_forKyosanCMD+0x298>)
 801707c:	2200      	movs	r2, #0
 801707e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8017080:	4b2b      	ldr	r3, [pc, #172]	; (8017130 <Check_forKyosanCMD+0x298>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	f043 0310 	orr.w	r3, r3, #16
 8017088:	4a29      	ldr	r2, [pc, #164]	; (8017130 <Check_forKyosanCMD+0x298>)
 801708a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 801708c:	2301      	movs	r3, #1
 801708e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8017092:	e029      	b.n	80170e8 <Check_forKyosanCMD+0x250>
			case SEVEN:
				printf("Received %s\n",KyosanCommands_List[SEVEN]);
 8017094:	492f      	ldr	r1, [pc, #188]	; (8017154 <Check_forKyosanCMD+0x2bc>)
 8017096:	4824      	ldr	r0, [pc, #144]	; (8017128 <Check_forKyosanCMD+0x290>)
 8017098:	f00f f9fe 	bl	8026498 <iprintf>
				printf("CLEAR ALL\n");
 801709c:	482e      	ldr	r0, [pc, #184]	; (8017158 <Check_forKyosanCMD+0x2c0>)
 801709e:	f00f fa97 	bl	80265d0 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80170a2:	4b23      	ldr	r3, [pc, #140]	; (8017130 <Check_forKyosanCMD+0x298>)
 80170a4:	2200      	movs	r2, #0
 80170a6:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 80170a8:	2301      	movs	r3, #1
 80170aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80170ae:	e01b      	b.n	80170e8 <Check_forKyosanCMD+0x250>
			default:
				printf("Please Send Valid Command\n");
 80170b0:	481b      	ldr	r0, [pc, #108]	; (8017120 <Check_forKyosanCMD+0x288>)
 80170b2:	f00f fa8d 	bl	80265d0 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 80170b6:	2300      	movs	r3, #0
 80170b8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80170bc:	e00e      	b.n	80170dc <Check_forKyosanCMD+0x244>
				{
					printf("%s\n",KyosanCommands_List[i]);
 80170be:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80170c2:	2232      	movs	r2, #50	; 0x32
 80170c4:	fb02 f303 	mul.w	r3, r2, r3
 80170c8:	4a24      	ldr	r2, [pc, #144]	; (801715c <Check_forKyosanCMD+0x2c4>)
 80170ca:	4413      	add	r3, r2
 80170cc:	4618      	mov	r0, r3
 80170ce:	f00f fa7f 	bl	80265d0 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 80170d2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80170d6:	3301      	adds	r3, #1
 80170d8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80170dc:	4b20      	ldr	r3, [pc, #128]	; (8017160 <Check_forKyosanCMD+0x2c8>)
 80170de:	781b      	ldrb	r3, [r3, #0]
 80170e0:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80170e4:	429a      	cmp	r2, r3
 80170e6:	d3ea      	bcc.n	80170be <Check_forKyosanCMD+0x226>
				}
			}
		}

		if(IS_COMMAND_RECEIVED == YES)
 80170e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80170ec:	2b01      	cmp	r3, #1
 80170ee:	d105      	bne.n	80170fc <Check_forKyosanCMD+0x264>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 80170f0:	f240 2005 	movw	r0, #517	; 0x205
 80170f4:	f7f9 fcbc 	bl	8010a70 <TransmitCanPkt>
 80170f8:	e000      	b.n	80170fc <Check_forKyosanCMD+0x264>
		return;
 80170fa:	bf00      	nop
		}
	}
}
 80170fc:	3768      	adds	r7, #104	; 0x68
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}
 8017102:	bf00      	nop
 8017104:	2000bfcc 	.word	0x2000bfcc
 8017108:	0802b6e4 	.word	0x0802b6e4
 801710c:	20000bba 	.word	0x20000bba
 8017110:	0802b6fc 	.word	0x0802b6fc
 8017114:	2000b56e 	.word	0x2000b56e
 8017118:	0802b73c 	.word	0x0802b73c
 801711c:	20000bbb 	.word	0x20000bbb
 8017120:	0802b750 	.word	0x0802b750
 8017124:	2000b5a0 	.word	0x2000b5a0
 8017128:	0802b76c 	.word	0x0802b76c
 801712c:	0802b77c 	.word	0x0802b77c
 8017130:	2000b3d8 	.word	0x2000b3d8
 8017134:	2000b5d2 	.word	0x2000b5d2
 8017138:	0802b798 	.word	0x0802b798
 801713c:	2000b604 	.word	0x2000b604
 8017140:	0802b7b4 	.word	0x0802b7b4
 8017144:	2000b636 	.word	0x2000b636
 8017148:	0802b7d0 	.word	0x0802b7d0
 801714c:	2000b668 	.word	0x2000b668
 8017150:	0802b7ec 	.word	0x0802b7ec
 8017154:	2000b69a 	.word	0x2000b69a
 8017158:	0802b818 	.word	0x0802b818
 801715c:	2000b53c 	.word	0x2000b53c
 8017160:	2000b924 	.word	0x2000b924

08017164 <Update_KyosanCommands>:


void Update_KyosanCommands(void)
{
 8017164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017166:	b083      	sub	sp, #12
 8017168:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 801716a:	2300      	movs	r3, #0
 801716c:	71fb      	strb	r3, [r7, #7]

	KyosanCommands_List[CmdCnt][0] = 0X24;
 801716e:	79fb      	ldrb	r3, [r7, #7]
 8017170:	4a78      	ldr	r2, [pc, #480]	; (8017354 <Update_KyosanCommands+0x1f0>)
 8017172:	2132      	movs	r1, #50	; 0x32
 8017174:	fb01 f303 	mul.w	r3, r1, r3
 8017178:	4413      	add	r3, r2
 801717a:	2224      	movs	r2, #36	; 0x24
 801717c:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][1] = 0X01;
 801717e:	79fb      	ldrb	r3, [r7, #7]
 8017180:	4a74      	ldr	r2, [pc, #464]	; (8017354 <Update_KyosanCommands+0x1f0>)
 8017182:	2132      	movs	r1, #50	; 0x32
 8017184:	fb01 f303 	mul.w	r3, r1, r3
 8017188:	4413      	add	r3, r2
 801718a:	3301      	adds	r3, #1
 801718c:	2201      	movs	r2, #1
 801718e:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][2] = 0X30;
 8017190:	79fb      	ldrb	r3, [r7, #7]
 8017192:	4a70      	ldr	r2, [pc, #448]	; (8017354 <Update_KyosanCommands+0x1f0>)
 8017194:	2132      	movs	r1, #50	; 0x32
 8017196:	fb01 f303 	mul.w	r3, r1, r3
 801719a:	4413      	add	r3, r2
 801719c:	3302      	adds	r3, #2
 801719e:	2230      	movs	r2, #48	; 0x30
 80171a0:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][3] = 0X40;
 80171a2:	79fb      	ldrb	r3, [r7, #7]
 80171a4:	4a6b      	ldr	r2, [pc, #428]	; (8017354 <Update_KyosanCommands+0x1f0>)
 80171a6:	2132      	movs	r1, #50	; 0x32
 80171a8:	fb01 f303 	mul.w	r3, r1, r3
 80171ac:	4413      	add	r3, r2
 80171ae:	3303      	adds	r3, #3
 80171b0:	2240      	movs	r2, #64	; 0x40
 80171b2:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][4] = 0XC0;
 80171b4:	79fb      	ldrb	r3, [r7, #7]
 80171b6:	4a67      	ldr	r2, [pc, #412]	; (8017354 <Update_KyosanCommands+0x1f0>)
 80171b8:	2132      	movs	r1, #50	; 0x32
 80171ba:	fb01 f303 	mul.w	r3, r1, r3
 80171be:	4413      	add	r3, r2
 80171c0:	3304      	adds	r3, #4
 80171c2:	22c0      	movs	r2, #192	; 0xc0
 80171c4:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][5] = 0X4E;
 80171c6:	79fb      	ldrb	r3, [r7, #7]
 80171c8:	4a62      	ldr	r2, [pc, #392]	; (8017354 <Update_KyosanCommands+0x1f0>)
 80171ca:	2132      	movs	r1, #50	; 0x32
 80171cc:	fb01 f303 	mul.w	r3, r1, r3
 80171d0:	4413      	add	r3, r2
 80171d2:	3305      	adds	r3, #5
 80171d4:	224e      	movs	r2, #78	; 0x4e
 80171d6:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][6] = 0X26;
 80171d8:	79fb      	ldrb	r3, [r7, #7]
 80171da:	4a5e      	ldr	r2, [pc, #376]	; (8017354 <Update_KyosanCommands+0x1f0>)
 80171dc:	2132      	movs	r1, #50	; 0x32
 80171de:	fb01 f303 	mul.w	r3, r1, r3
 80171e2:	4413      	add	r3, r2
 80171e4:	3306      	adds	r3, #6
 80171e6:	2226      	movs	r2, #38	; 0x26
 80171e8:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 80171ea:	79fb      	ldrb	r3, [r7, #7]
 80171ec:	3301      	adds	r3, #1
 80171ee:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 80171f0:	79fb      	ldrb	r3, [r7, #7]
 80171f2:	1c5a      	adds	r2, r3, #1
 80171f4:	71fa      	strb	r2, [r7, #7]
 80171f6:	461a      	mov	r2, r3
 80171f8:	2332      	movs	r3, #50	; 0x32
 80171fa:	fb02 f303 	mul.w	r3, r2, r3
 80171fe:	4a55      	ldr	r2, [pc, #340]	; (8017354 <Update_KyosanCommands+0x1f0>)
 8017200:	4413      	add	r3, r2
 8017202:	4955      	ldr	r1, [pc, #340]	; (8017358 <Update_KyosanCommands+0x1f4>)
 8017204:	461a      	mov	r2, r3
 8017206:	460b      	mov	r3, r1
 8017208:	cb03      	ldmia	r3!, {r0, r1}
 801720a:	6010      	str	r0, [r2, #0]
 801720c:	6051      	str	r1, [r2, #4]
 801720e:	8819      	ldrh	r1, [r3, #0]
 8017210:	789b      	ldrb	r3, [r3, #2]
 8017212:	8111      	strh	r1, [r2, #8]
 8017214:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_POS");
 8017216:	79fb      	ldrb	r3, [r7, #7]
 8017218:	1c5a      	adds	r2, r3, #1
 801721a:	71fa      	strb	r2, [r7, #7]
 801721c:	461a      	mov	r2, r3
 801721e:	2332      	movs	r3, #50	; 0x32
 8017220:	fb02 f303 	mul.w	r3, r2, r3
 8017224:	4a4b      	ldr	r2, [pc, #300]	; (8017354 <Update_KyosanCommands+0x1f0>)
 8017226:	4413      	add	r3, r2
 8017228:	4a4c      	ldr	r2, [pc, #304]	; (801735c <Update_KyosanCommands+0x1f8>)
 801722a:	461d      	mov	r5, r3
 801722c:	4614      	mov	r4, r2
 801722e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017230:	6028      	str	r0, [r5, #0]
 8017232:	6069      	str	r1, [r5, #4]
 8017234:	60aa      	str	r2, [r5, #8]
 8017236:	60eb      	str	r3, [r5, #12]
 8017238:	cc03      	ldmia	r4!, {r0, r1}
 801723a:	6128      	str	r0, [r5, #16]
 801723c:	6169      	str	r1, [r5, #20]
 801723e:	8823      	ldrh	r3, [r4, #0]
 8017240:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_NEG");
 8017242:	79fb      	ldrb	r3, [r7, #7]
 8017244:	1c5a      	adds	r2, r3, #1
 8017246:	71fa      	strb	r2, [r7, #7]
 8017248:	461a      	mov	r2, r3
 801724a:	2332      	movs	r3, #50	; 0x32
 801724c:	fb02 f303 	mul.w	r3, r2, r3
 8017250:	4a40      	ldr	r2, [pc, #256]	; (8017354 <Update_KyosanCommands+0x1f0>)
 8017252:	4413      	add	r3, r2
 8017254:	4a42      	ldr	r2, [pc, #264]	; (8017360 <Update_KyosanCommands+0x1fc>)
 8017256:	461d      	mov	r5, r3
 8017258:	4614      	mov	r4, r2
 801725a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801725c:	6028      	str	r0, [r5, #0]
 801725e:	6069      	str	r1, [r5, #4]
 8017260:	60aa      	str	r2, [r5, #8]
 8017262:	60eb      	str	r3, [r5, #12]
 8017264:	cc03      	ldmia	r4!, {r0, r1}
 8017266:	6128      	str	r0, [r5, #16]
 8017268:	6169      	str	r1, [r5, #20]
 801726a:	8823      	ldrh	r3, [r4, #0]
 801726c:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_POS");
 801726e:	79fb      	ldrb	r3, [r7, #7]
 8017270:	1c5a      	adds	r2, r3, #1
 8017272:	71fa      	strb	r2, [r7, #7]
 8017274:	461a      	mov	r2, r3
 8017276:	2332      	movs	r3, #50	; 0x32
 8017278:	fb02 f303 	mul.w	r3, r2, r3
 801727c:	4a35      	ldr	r2, [pc, #212]	; (8017354 <Update_KyosanCommands+0x1f0>)
 801727e:	4413      	add	r3, r2
 8017280:	4a38      	ldr	r2, [pc, #224]	; (8017364 <Update_KyosanCommands+0x200>)
 8017282:	461d      	mov	r5, r3
 8017284:	4614      	mov	r4, r2
 8017286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017288:	6028      	str	r0, [r5, #0]
 801728a:	6069      	str	r1, [r5, #4]
 801728c:	60aa      	str	r2, [r5, #8]
 801728e:	60eb      	str	r3, [r5, #12]
 8017290:	cc03      	ldmia	r4!, {r0, r1}
 8017292:	6128      	str	r0, [r5, #16]
 8017294:	6169      	str	r1, [r5, #20]
 8017296:	8823      	ldrh	r3, [r4, #0]
 8017298:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_NEG");
 801729a:	79fb      	ldrb	r3, [r7, #7]
 801729c:	1c5a      	adds	r2, r3, #1
 801729e:	71fa      	strb	r2, [r7, #7]
 80172a0:	461a      	mov	r2, r3
 80172a2:	2332      	movs	r3, #50	; 0x32
 80172a4:	fb02 f303 	mul.w	r3, r2, r3
 80172a8:	4a2a      	ldr	r2, [pc, #168]	; (8017354 <Update_KyosanCommands+0x1f0>)
 80172aa:	4413      	add	r3, r2
 80172ac:	4a2e      	ldr	r2, [pc, #184]	; (8017368 <Update_KyosanCommands+0x204>)
 80172ae:	461d      	mov	r5, r3
 80172b0:	4614      	mov	r4, r2
 80172b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80172b4:	6028      	str	r0, [r5, #0]
 80172b6:	6069      	str	r1, [r5, #4]
 80172b8:	60aa      	str	r2, [r5, #8]
 80172ba:	60eb      	str	r3, [r5, #12]
 80172bc:	cc03      	ldmia	r4!, {r0, r1}
 80172be:	6128      	str	r0, [r5, #16]
 80172c0:	6169      	str	r1, [r5, #20]
 80172c2:	8823      	ldrh	r3, [r4, #0]
 80172c4:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA");
 80172c6:	79fb      	ldrb	r3, [r7, #7]
 80172c8:	1c5a      	adds	r2, r3, #1
 80172ca:	71fa      	strb	r2, [r7, #7]
 80172cc:	461a      	mov	r2, r3
 80172ce:	2332      	movs	r3, #50	; 0x32
 80172d0:	fb02 f303 	mul.w	r3, r2, r3
 80172d4:	4a1f      	ldr	r2, [pc, #124]	; (8017354 <Update_KyosanCommands+0x1f0>)
 80172d6:	4413      	add	r3, r2
 80172d8:	4a24      	ldr	r2, [pc, #144]	; (801736c <Update_KyosanCommands+0x208>)
 80172da:	4614      	mov	r4, r2
 80172dc:	469c      	mov	ip, r3
 80172de:	f104 0e20 	add.w	lr, r4, #32
 80172e2:	4665      	mov	r5, ip
 80172e4:	4626      	mov	r6, r4
 80172e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80172e8:	6028      	str	r0, [r5, #0]
 80172ea:	6069      	str	r1, [r5, #4]
 80172ec:	60aa      	str	r2, [r5, #8]
 80172ee:	60eb      	str	r3, [r5, #12]
 80172f0:	3410      	adds	r4, #16
 80172f2:	f10c 0c10 	add.w	ip, ip, #16
 80172f6:	4574      	cmp	r4, lr
 80172f8:	d1f3      	bne.n	80172e2 <Update_KyosanCommands+0x17e>
 80172fa:	4662      	mov	r2, ip
 80172fc:	4623      	mov	r3, r4
 80172fe:	cb03      	ldmia	r3!, {r0, r1}
 8017300:	6010      	str	r0, [r2, #0]
 8017302:	6051      	str	r1, [r2, #4]
 8017304:	881b      	ldrh	r3, [r3, #0]
 8017306:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8017308:	79fb      	ldrb	r3, [r7, #7]
 801730a:	1c5a      	adds	r2, r3, #1
 801730c:	71fa      	strb	r2, [r7, #7]
 801730e:	461a      	mov	r2, r3
 8017310:	2332      	movs	r3, #50	; 0x32
 8017312:	fb02 f303 	mul.w	r3, r2, r3
 8017316:	4a0f      	ldr	r2, [pc, #60]	; (8017354 <Update_KyosanCommands+0x1f0>)
 8017318:	4413      	add	r3, r2
 801731a:	4915      	ldr	r1, [pc, #84]	; (8017370 <Update_KyosanCommands+0x20c>)
 801731c:	461a      	mov	r2, r3
 801731e:	460b      	mov	r3, r1
 8017320:	cb03      	ldmia	r3!, {r0, r1}
 8017322:	6010      	str	r0, [r2, #0]
 8017324:	6051      	str	r1, [r2, #4]
 8017326:	881b      	ldrh	r3, [r3, #0]
 8017328:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"HELP");
 801732a:	79fb      	ldrb	r3, [r7, #7]
 801732c:	1c5a      	adds	r2, r3, #1
 801732e:	71fa      	strb	r2, [r7, #7]
 8017330:	461a      	mov	r2, r3
 8017332:	2332      	movs	r3, #50	; 0x32
 8017334:	fb02 f303 	mul.w	r3, r2, r3
 8017338:	4a06      	ldr	r2, [pc, #24]	; (8017354 <Update_KyosanCommands+0x1f0>)
 801733a:	4413      	add	r3, r2
 801733c:	4a0d      	ldr	r2, [pc, #52]	; (8017374 <Update_KyosanCommands+0x210>)
 801733e:	6810      	ldr	r0, [r2, #0]
 8017340:	6018      	str	r0, [r3, #0]
 8017342:	7912      	ldrb	r2, [r2, #4]
 8017344:	711a      	strb	r2, [r3, #4]
	KyosanCommands_Count =  CmdCnt;
 8017346:	4a0c      	ldr	r2, [pc, #48]	; (8017378 <Update_KyosanCommands+0x214>)
 8017348:	79fb      	ldrb	r3, [r7, #7]
 801734a:	7013      	strb	r3, [r2, #0]
}
 801734c:	bf00      	nop
 801734e:	370c      	adds	r7, #12
 8017350:	46bd      	mov	sp, r7
 8017352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017354:	2000b53c 	.word	0x2000b53c
 8017358:	0802b824 	.word	0x0802b824
 801735c:	0802b77c 	.word	0x0802b77c
 8017360:	0802b798 	.word	0x0802b798
 8017364:	0802b7b4 	.word	0x0802b7b4
 8017368:	0802b7d0 	.word	0x0802b7d0
 801736c:	0802b7ec 	.word	0x0802b7ec
 8017370:	0802b830 	.word	0x0802b830
 8017374:	0802b83c 	.word	0x0802b83c
 8017378:	2000b924 	.word	0x2000b924

0801737c <Is_KyosanCommand_Valid>:

uint8_t Is_KyosanCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 801737c:	b590      	push	{r4, r7, lr}
 801737e:	b085      	sub	sp, #20
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
 8017384:	460b      	mov	r3, r1
 8017386:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8017388:	2300      	movs	r3, #0
 801738a:	73fb      	strb	r3, [r7, #15]
 801738c:	e01c      	b.n	80173c8 <Is_KyosanCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)KyosanCommands_List[Traverser]) != NULL)
		if(memcmp(Buffer,KyosanCommands_List[Traverser],strlen((char *)KyosanCommands_List[Traverser])) == 0)
 801738e:	7bfb      	ldrb	r3, [r7, #15]
 8017390:	2232      	movs	r2, #50	; 0x32
 8017392:	fb02 f303 	mul.w	r3, r2, r3
 8017396:	4a11      	ldr	r2, [pc, #68]	; (80173dc <Is_KyosanCommand_Valid+0x60>)
 8017398:	189c      	adds	r4, r3, r2
 801739a:	7bfb      	ldrb	r3, [r7, #15]
 801739c:	2232      	movs	r2, #50	; 0x32
 801739e:	fb02 f303 	mul.w	r3, r2, r3
 80173a2:	4a0e      	ldr	r2, [pc, #56]	; (80173dc <Is_KyosanCommand_Valid+0x60>)
 80173a4:	4413      	add	r3, r2
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7e8 ff54 	bl	8000254 <strlen>
 80173ac:	4603      	mov	r3, r0
 80173ae:	461a      	mov	r2, r3
 80173b0:	4621      	mov	r1, r4
 80173b2:	6878      	ldr	r0, [r7, #4]
 80173b4:	f00e ff50 	bl	8026258 <memcmp>
 80173b8:	4603      	mov	r3, r0
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d101      	bne.n	80173c2 <Is_KyosanCommand_Valid+0x46>
		{
			return Traverser;
 80173be:	7bfb      	ldrb	r3, [r7, #15]
 80173c0:	e008      	b.n	80173d4 <Is_KyosanCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 80173c2:	7bfb      	ldrb	r3, [r7, #15]
 80173c4:	3301      	adds	r3, #1
 80173c6:	73fb      	strb	r3, [r7, #15]
 80173c8:	4b05      	ldr	r3, [pc, #20]	; (80173e0 <Is_KyosanCommand_Valid+0x64>)
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	7bfa      	ldrb	r2, [r7, #15]
 80173ce:	429a      	cmp	r2, r3
 80173d0:	d3dd      	bcc.n	801738e <Is_KyosanCommand_Valid+0x12>
		}
	}
	return 255;
 80173d2:	23ff      	movs	r3, #255	; 0xff
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	3714      	adds	r7, #20
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd90      	pop	{r4, r7, pc}
 80173dc:	2000b53c 	.word	0x2000b53c
 80173e0:	2000b924 	.word	0x2000b924

080173e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80173e4:	b480      	push	{r7}
 80173e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80173e8:	f3bf 8f4f 	dsb	sy
}
 80173ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80173ee:	f3bf 8f6f 	isb	sy
}
 80173f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80173f4:	4b0d      	ldr	r3, [pc, #52]	; (801742c <SCB_EnableICache+0x48>)
 80173f6:	2200      	movs	r2, #0
 80173f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80173fc:	f3bf 8f4f 	dsb	sy
}
 8017400:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017402:	f3bf 8f6f 	isb	sy
}
 8017406:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8017408:	4b08      	ldr	r3, [pc, #32]	; (801742c <SCB_EnableICache+0x48>)
 801740a:	695b      	ldr	r3, [r3, #20]
 801740c:	4a07      	ldr	r2, [pc, #28]	; (801742c <SCB_EnableICache+0x48>)
 801740e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017412:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8017414:	f3bf 8f4f 	dsb	sy
}
 8017418:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801741a:	f3bf 8f6f 	isb	sy
}
 801741e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8017420:	bf00      	nop
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr
 801742a:	bf00      	nop
 801742c:	e000ed00 	.word	0xe000ed00

08017430 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8017430:	b480      	push	{r7}
 8017432:	b085      	sub	sp, #20
 8017434:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8017436:	4b1f      	ldr	r3, [pc, #124]	; (80174b4 <SCB_EnableDCache+0x84>)
 8017438:	2200      	movs	r2, #0
 801743a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801743e:	f3bf 8f4f 	dsb	sy
}
 8017442:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8017444:	4b1b      	ldr	r3, [pc, #108]	; (80174b4 <SCB_EnableDCache+0x84>)
 8017446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801744a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	0b5b      	lsrs	r3, r3, #13
 8017450:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017454:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	08db      	lsrs	r3, r3, #3
 801745a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801745e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	015a      	lsls	r2, r3, #5
 8017464:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8017468:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 801746a:	68ba      	ldr	r2, [r7, #8]
 801746c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801746e:	4911      	ldr	r1, [pc, #68]	; (80174b4 <SCB_EnableDCache+0x84>)
 8017470:	4313      	orrs	r3, r2
 8017472:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	1e5a      	subs	r2, r3, #1
 801747a:	60ba      	str	r2, [r7, #8]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d1ef      	bne.n	8017460 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	1e5a      	subs	r2, r3, #1
 8017484:	60fa      	str	r2, [r7, #12]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d1e5      	bne.n	8017456 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 801748a:	f3bf 8f4f 	dsb	sy
}
 801748e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8017490:	4b08      	ldr	r3, [pc, #32]	; (80174b4 <SCB_EnableDCache+0x84>)
 8017492:	695b      	ldr	r3, [r3, #20]
 8017494:	4a07      	ldr	r2, [pc, #28]	; (80174b4 <SCB_EnableDCache+0x84>)
 8017496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801749a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801749c:	f3bf 8f4f 	dsb	sy
}
 80174a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80174a2:	f3bf 8f6f 	isb	sy
}
 80174a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80174a8:	bf00      	nop
 80174aa:	3714      	adds	r7, #20
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr
 80174b4:	e000ed00 	.word	0xe000ed00

080174b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 80174be:	2300      	movs	r3, #0
 80174c0:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80174c2:	f000 f9b9 	bl	8017838 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80174c6:	f7ff ff8d 	bl	80173e4 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80174ca:	f7ff ffb1 	bl	8017430 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80174ce:	f001 ff79 	bl	80193c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80174d2:	f000 f8eb 	bl	80176ac <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 80174d6:	f7f2 ff6b 	bl	800a3b0 <reset_cause_get>
 80174da:	4603      	mov	r3, r0
 80174dc:	4618      	mov	r0, r3
 80174de:	f7f2 ffb9 	bl	800a454 <reset_cause_get_name>
 80174e2:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 80174e4:	f7fe fb3a 	bl	8015b5c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80174e8:	f001 f980 	bl	80187ec <MX_USART1_UART_Init>
	Get_Slot();
 80174ec:	f7e9 faee 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 80174f0:	f7f9 f934 	bl	801075c <MX_CAN2_Init>
	MX_CAN3_Init();
 80174f4:	f7f9 f9aa 	bl	801084c <MX_CAN3_Init>
	MX_I2C1_Init();
 80174f8:	f7fe fd60 	bl	8015fbc <MX_I2C1_Init>
	MX_I2C2_Init();
 80174fc:	f7fe fd9e 	bl	801603c <MX_I2C2_Init>
	MX_SPI1_Init();
 8017500:	f000 fa2a 	bl	8017958 <MX_SPI1_Init>
	printf("\r\r\r\r");
 8017504:	485b      	ldr	r0, [pc, #364]	; (8017674 <main+0x1bc>)
 8017506:	f00e ffc7 	bl	8026498 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 801750a:	485b      	ldr	r0, [pc, #364]	; (8017678 <main+0x1c0>)
 801750c:	f00f f860 	bl	80265d0 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8017510:	6879      	ldr	r1, [r7, #4]
 8017512:	485a      	ldr	r0, [pc, #360]	; (801767c <main+0x1c4>)
 8017514:	f00e ffc0 	bl	8026498 <iprintf>
	Get_Build_Details();
 8017518:	f000 f932 	bl	8017780 <Get_Build_Details>
	Get_Config();
 801751c:	f000 fd88 	bl	8018030 <Get_Config>
	MX_RNG_Init();
 8017520:	f000 f9bc 	bl	801789c <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8017524:	2208      	movs	r2, #8
 8017526:	2100      	movs	r1, #0
 8017528:	4855      	ldr	r0, [pc, #340]	; (8017680 <main+0x1c8>)
 801752a:	f00e fecd 	bl	80262c8 <memset>
	HAL_Delay(250);
 801752e:	20fa      	movs	r0, #250	; 0xfa
 8017530:	f001 ffb4 	bl	801949c <HAL_Delay>


	switch(EI_data.ProtocolType)
 8017534:	4b53      	ldr	r3, [pc, #332]	; (8017684 <main+0x1cc>)
 8017536:	781b      	ldrb	r3, [r3, #0]
 8017538:	3b01      	subs	r3, #1
 801753a:	2b03      	cmp	r3, #3
 801753c:	d86d      	bhi.n	801761a <main+0x162>
 801753e:	a201      	add	r2, pc, #4	; (adr r2, 8017544 <main+0x8c>)
 8017540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017544:	08017555 	.word	0x08017555
 8017548:	080175af 	.word	0x080175af
 801754c:	080175d7 	.word	0x080175d7
 8017550:	08017607 	.word	0x08017607
	{
	case HITACHI:
		print_self_Details_Hitachi();
 8017554:	f7f1 fd48 	bl	8008fe8 <print_self_Details_Hitachi>
		ReAssignData();
 8017558:	f7f2 fad4 	bl	8009b04 <ReAssignData>
		Update_HitachiCommands();
 801755c:	f7e9 f9a2 	bl	80008a4 <Update_HitachiCommands>
		printf("Protocol Selected is HITACHI\n");
 8017560:	4849      	ldr	r0, [pc, #292]	; (8017688 <main+0x1d0>)
 8017562:	f00f f835 	bl	80265d0 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8017566:	4849      	ldr	r0, [pc, #292]	; (801768c <main+0x1d4>)
 8017568:	f00f f832 	bl	80265d0 <puts>
		MX_LWIP_Init();
 801756c:	f009 f8b4 	bl	80206d8 <MX_LWIP_Init>
		udpServer_init();
 8017570:	f7f8 fd12 	bl	800ff98 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8017574:	4846      	ldr	r0, [pc, #280]	; (8017690 <main+0x1d8>)
 8017576:	f00f f82b 	bl	80265d0 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort > 0) && (EI_data.Hitachi_st.BaudRate > 0) )
 801757a:	4b42      	ldr	r3, [pc, #264]	; (8017684 <main+0x1cc>)
 801757c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017580:	2b00      	cmp	r3, #0
 8017582:	d04e      	beq.n	8017622 <main+0x16a>
 8017584:	4b3f      	ldr	r3, [pc, #252]	; (8017684 <main+0x1cc>)
 8017586:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801758a:	2b00      	cmp	r3, #0
 801758c:	d049      	beq.n	8017622 <main+0x16a>
		{
			MX_UART5_Init();
 801758e:	f001 f8f7 	bl	8018780 <MX_UART5_Init>
			printf("Initializing UART with BaudRate:%lu\n",EI_data.Hitachi_st.BaudRate);
 8017592:	4b3c      	ldr	r3, [pc, #240]	; (8017684 <main+0x1cc>)
 8017594:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017598:	4619      	mov	r1, r3
 801759a:	483e      	ldr	r0, [pc, #248]	; (8017694 <main+0x1dc>)
 801759c:	f00e ff7c 	bl	8026498 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 80175a0:	4b38      	ldr	r3, [pc, #224]	; (8017684 <main+0x1cc>)
 80175a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80175a6:	4618      	mov	r0, r3
 80175a8:	f001 face 	bl	8018b48 <UART4_Init>
		}

#if ENABLE_SIGNAL_PRINT
		UpdateSIGNALSNamesHitachi();
#endif
		break;
 80175ac:	e039      	b.n	8017622 <main+0x16a>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 80175ae:	483a      	ldr	r0, [pc, #232]	; (8017698 <main+0x1e0>)
 80175b0:	f00f f80e 	bl	80265d0 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 80175b4:	4835      	ldr	r0, [pc, #212]	; (801768c <main+0x1d4>)
 80175b6:	f00f f80b 	bl	80265d0 <puts>
		MX_LWIP_Init();
 80175ba:	f009 f88d 	bl	80206d8 <MX_LWIP_Init>
		udpServer_init();
 80175be:	f7f8 fceb 	bl	800ff98 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 80175c2:	4833      	ldr	r0, [pc, #204]	; (8017690 <main+0x1d8>)
 80175c4:	f00f f804 	bl	80265d0 <puts>
		print_self_DetailsSiemens();
 80175c8:	f7f8 fbc2 	bl	800fd50 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 80175cc:	f7f7 f8cc 	bl	800e768 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 80175d0:	f7f7 fee0 	bl	800f394 <UpdateSIGNALSNames>
		break;
 80175d4:	e026      	b.n	8017624 <main+0x16c>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 80175d6:	4831      	ldr	r0, [pc, #196]	; (801769c <main+0x1e4>)
 80175d8:	f00e fffa 	bl	80265d0 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 80175dc:	4b29      	ldr	r3, [pc, #164]	; (8017684 <main+0x1cc>)
 80175de:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d006      	beq.n	80175f4 <main+0x13c>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 80175e6:	4b27      	ldr	r3, [pc, #156]	; (8017684 <main+0x1cc>)
 80175e8:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80175ec:	4618      	mov	r0, r3
 80175ee:	f001 faab 	bl	8018b48 <UART4_Init>
 80175f2:	e003      	b.n	80175fc <main+0x144>
		}
		else
		{
			UART4_Init(115200);
 80175f4:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80175f8:	f001 faa6 	bl	8018b48 <UART4_Init>
		}
		Update_MedhaCommands();
 80175fc:	f7f4 fbc4 	bl	800bd88 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8017600:	f7f4 f982 	bl	800b908 <Print_Medha_Self_Details>
		break;
 8017604:	e00e      	b.n	8017624 <main+0x16c>

	case KYOSAN:
		printf("Protocol Selected is KYOSAN\n");
 8017606:	4826      	ldr	r0, [pc, #152]	; (80176a0 <main+0x1e8>)
 8017608:	f00e ffe2 	bl	80265d0 <puts>
		UART4_Init(31200);
 801760c:	f647 10e0 	movw	r0, #31200	; 0x79e0
 8017610:	f001 fa9a 	bl	8018b48 <UART4_Init>
//		Update_KyosanStructure();
//		UpdateSIGNALSNamesKyosan();
		Update_KyosanCommands();
 8017614:	f7ff fda6 	bl	8017164 <Update_KyosanCommands>
		break;
 8017618:	e004      	b.n	8017624 <main+0x16c>

	default:
		printf("Please Select Protocol Type\n");
 801761a:	4822      	ldr	r0, [pc, #136]	; (80176a4 <main+0x1ec>)
 801761c:	f00e ffd8 	bl	80265d0 <puts>
		while(1);
 8017620:	e7fe      	b.n	8017620 <main+0x168>
		break;
 8017622:	bf00      	nop
	}


	printf("Initialization Success\n");
 8017624:	4820      	ldr	r0, [pc, #128]	; (80176a8 <main+0x1f0>)
 8017626:	f00e ffd3 	bl	80265d0 <puts>
	MX_IWDG_Init();
 801762a:	f7fe fdef 	bl	801620c <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 801762e:	4b15      	ldr	r3, [pc, #84]	; (8017684 <main+0x1cc>)
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	3b01      	subs	r3, #1
 8017634:	2b03      	cmp	r3, #3
 8017636:	d817      	bhi.n	8017668 <main+0x1b0>
 8017638:	a201      	add	r2, pc, #4	; (adr r2, 8017640 <main+0x188>)
 801763a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801763e:	bf00      	nop
 8017640:	08017651 	.word	0x08017651
 8017644:	08017657 	.word	0x08017657
 8017648:	0801765d 	.word	0x0801765d
 801764c:	08017663 	.word	0x08017663
		{
		case HITACHI:
			Process_HitachiEI();
 8017650:	f7f2 fa12 	bl	8009a78 <Process_HitachiEI>
			break;
 8017654:	e00c      	b.n	8017670 <main+0x1b8>

		case SIEMENS:
			Process_SiemensEI();
 8017656:	f7f5 f8bd 	bl	800c7d4 <Process_SiemensEI>
			break;
 801765a:	e009      	b.n	8017670 <main+0x1b8>

		case MEDHA:
			Process_Medha_EI();
 801765c:	f7f2 ff4a 	bl	800a4f4 <Process_Medha_EI>
			break;
 8017660:	e006      	b.n	8017670 <main+0x1b8>

		case KYOSAN:
			Process_Kyosan_EI();
 8017662:	f7fe fdf1 	bl	8016248 <Process_Kyosan_EI>
			break;
 8017666:	e003      	b.n	8017670 <main+0x1b8>

		default:
			printf("Please Select Protocol Type\n");
 8017668:	480e      	ldr	r0, [pc, #56]	; (80176a4 <main+0x1ec>)
 801766a:	f00e ffb1 	bl	80265d0 <puts>
			while(1);
 801766e:	e7fe      	b.n	801766e <main+0x1b6>
		switch(EI_data.ProtocolType)
 8017670:	e7dd      	b.n	801762e <main+0x176>
 8017672:	bf00      	nop
 8017674:	0802b844 	.word	0x0802b844
 8017678:	0802b84c 	.word	0x0802b84c
 801767c:	0802b89c 	.word	0x0802b89c
 8017680:	2000308c 	.word	0x2000308c
 8017684:	20000504 	.word	0x20000504
 8017688:	0802b8b8 	.word	0x0802b8b8
 801768c:	0802b8d8 	.word	0x0802b8d8
 8017690:	0802b900 	.word	0x0802b900
 8017694:	0802b91c 	.word	0x0802b91c
 8017698:	0802b944 	.word	0x0802b944
 801769c:	0802b964 	.word	0x0802b964
 80176a0:	0802b980 	.word	0x0802b980
 80176a4:	0802b99c 	.word	0x0802b99c
 80176a8:	0802b9b8 	.word	0x0802b9b8

080176ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b094      	sub	sp, #80	; 0x50
 80176b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80176b2:	f107 031c 	add.w	r3, r7, #28
 80176b6:	2234      	movs	r2, #52	; 0x34
 80176b8:	2100      	movs	r1, #0
 80176ba:	4618      	mov	r0, r3
 80176bc:	f00e fe04 	bl	80262c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80176c0:	f107 0308 	add.w	r3, r7, #8
 80176c4:	2200      	movs	r2, #0
 80176c6:	601a      	str	r2, [r3, #0]
 80176c8:	605a      	str	r2, [r3, #4]
 80176ca:	609a      	str	r2, [r3, #8]
 80176cc:	60da      	str	r2, [r3, #12]
 80176ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80176d0:	4b29      	ldr	r3, [pc, #164]	; (8017778 <SystemClock_Config+0xcc>)
 80176d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176d4:	4a28      	ldr	r2, [pc, #160]	; (8017778 <SystemClock_Config+0xcc>)
 80176d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80176da:	6413      	str	r3, [r2, #64]	; 0x40
 80176dc:	4b26      	ldr	r3, [pc, #152]	; (8017778 <SystemClock_Config+0xcc>)
 80176de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80176e4:	607b      	str	r3, [r7, #4]
 80176e6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80176e8:	4b24      	ldr	r3, [pc, #144]	; (801777c <SystemClock_Config+0xd0>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	4a23      	ldr	r2, [pc, #140]	; (801777c <SystemClock_Config+0xd0>)
 80176ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80176f2:	6013      	str	r3, [r2, #0]
 80176f4:	4b21      	ldr	r3, [pc, #132]	; (801777c <SystemClock_Config+0xd0>)
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80176fc:	603b      	str	r3, [r7, #0]
 80176fe:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8017700:	2309      	movs	r3, #9
 8017702:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017708:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801770a:	2301      	movs	r3, #1
 801770c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801770e:	2302      	movs	r3, #2
 8017710:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017716:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8017718:	2306      	movs	r3, #6
 801771a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 801771c:	23b4      	movs	r3, #180	; 0xb4
 801771e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017720:	2302      	movs	r3, #2
 8017722:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8017724:	2308      	movs	r3, #8
 8017726:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8017728:	2302      	movs	r3, #2
 801772a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801772c:	f107 031c 	add.w	r3, r7, #28
 8017730:	4618      	mov	r0, r3
 8017732:	f005 fa1d 	bl	801cb70 <HAL_RCC_OscConfig>
 8017736:	4603      	mov	r3, r0
 8017738:	2b00      	cmp	r3, #0
 801773a:	d001      	beq.n	8017740 <SystemClock_Config+0x94>
	{
		Error_Handler();
 801773c:	f000 f8a8 	bl	8017890 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017740:	230f      	movs	r3, #15
 8017742:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017744:	2302      	movs	r3, #2
 8017746:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017748:	2300      	movs	r3, #0
 801774a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801774c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017750:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017756:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017758:	f107 0308 	add.w	r3, r7, #8
 801775c:	2105      	movs	r1, #5
 801775e:	4618      	mov	r0, r3
 8017760:	f005 fcb4 	bl	801d0cc <HAL_RCC_ClockConfig>
 8017764:	4603      	mov	r3, r0
 8017766:	2b00      	cmp	r3, #0
 8017768:	d001      	beq.n	801776e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 801776a:	f000 f891 	bl	8017890 <Error_Handler>
	}
}
 801776e:	bf00      	nop
 8017770:	3750      	adds	r7, #80	; 0x50
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}
 8017776:	bf00      	nop
 8017778:	40023800 	.word	0x40023800
 801777c:	40007000 	.word	0x40007000

08017780 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b08e      	sub	sp, #56	; 0x38
 8017784:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8017786:	2300      	movs	r3, #0
 8017788:	607b      	str	r3, [r7, #4]
 801778a:	f107 0308 	add.w	r3, r7, #8
 801778e:	222e      	movs	r2, #46	; 0x2e
 8017790:	2100      	movs	r1, #0
 8017792:	4618      	mov	r0, r3
 8017794:	f00e fd98 	bl	80262c8 <memset>
	printf("\n_____________________________________________\n");
 8017798:	481d      	ldr	r0, [pc, #116]	; (8017810 <Get_Build_Details+0x90>)
 801779a:	f00e ff19 	bl	80265d0 <puts>
	printf("Build Date:%s\n",__DATE__);
 801779e:	491d      	ldr	r1, [pc, #116]	; (8017814 <Get_Build_Details+0x94>)
 80177a0:	481d      	ldr	r0, [pc, #116]	; (8017818 <Get_Build_Details+0x98>)
 80177a2:	f00e fe79 	bl	8026498 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 80177a6:	491d      	ldr	r1, [pc, #116]	; (801781c <Get_Build_Details+0x9c>)
 80177a8:	481d      	ldr	r0, [pc, #116]	; (8017820 <Get_Build_Details+0xa0>)
 80177aa:	f00e fe75 	bl	8026498 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 80177ae:	1d3b      	adds	r3, r7, #4
 80177b0:	4a18      	ldr	r2, [pc, #96]	; (8017814 <Get_Build_Details+0x94>)
 80177b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80177b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 80177b8:	1d3b      	adds	r3, r7, #4
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7e8 fd4a 	bl	8000254 <strlen>
 80177c0:	4603      	mov	r3, r0
 80177c2:	461a      	mov	r2, r3
 80177c4:	1d3b      	adds	r3, r7, #4
 80177c6:	4413      	add	r3, r2
 80177c8:	4914      	ldr	r1, [pc, #80]	; (801781c <Get_Build_Details+0x9c>)
 80177ca:	461a      	mov	r2, r3
 80177cc:	460b      	mov	r3, r1
 80177ce:	cb03      	ldmia	r3!, {r0, r1}
 80177d0:	6010      	str	r0, [r2, #0]
 80177d2:	6051      	str	r1, [r2, #4]
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 80177d8:	1d3b      	adds	r3, r7, #4
 80177da:	4618      	mov	r0, r3
 80177dc:	f7e8 fd3a 	bl	8000254 <strlen>
 80177e0:	4603      	mov	r3, r0
 80177e2:	b21a      	sxth	r2, r3
 80177e4:	1d3b      	adds	r3, r7, #4
 80177e6:	4619      	mov	r1, r3
 80177e8:	2000      	movs	r0, #0
 80177ea:	f7fe f863 	bl	80158b4 <GetCRC16>
 80177ee:	4603      	mov	r3, r0
 80177f0:	461a      	mov	r2, r3
 80177f2:	4b0c      	ldr	r3, [pc, #48]	; (8017824 <Get_Build_Details+0xa4>)
 80177f4:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 80177f6:	4a0c      	ldr	r2, [pc, #48]	; (8017828 <Get_Build_Details+0xa8>)
 80177f8:	490c      	ldr	r1, [pc, #48]	; (801782c <Get_Build_Details+0xac>)
 80177fa:	480d      	ldr	r0, [pc, #52]	; (8017830 <Get_Build_Details+0xb0>)
 80177fc:	f00e fe4c 	bl	8026498 <iprintf>
	printf("_____________________________________________\n");
 8017800:	480c      	ldr	r0, [pc, #48]	; (8017834 <Get_Build_Details+0xb4>)
 8017802:	f00e fee5 	bl	80265d0 <puts>

}
 8017806:	bf00      	nop
 8017808:	3738      	adds	r7, #56	; 0x38
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}
 801780e:	bf00      	nop
 8017810:	0802b9d0 	.word	0x0802b9d0
 8017814:	0802ba00 	.word	0x0802ba00
 8017818:	0802ba0c 	.word	0x0802ba0c
 801781c:	0802ba1c 	.word	0x0802ba1c
 8017820:	0802ba28 	.word	0x0802ba28
 8017824:	2000bc68 	.word	0x2000bc68
 8017828:	0802ba38 	.word	0x0802ba38
 801782c:	0802ba3c 	.word	0x0802ba3c
 8017830:	0802ba54 	.word	0x0802ba54
 8017834:	0802ba70 	.word	0x0802ba70

08017838 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b084      	sub	sp, #16
 801783c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801783e:	463b      	mov	r3, r7
 8017840:	2200      	movs	r2, #0
 8017842:	601a      	str	r2, [r3, #0]
 8017844:	605a      	str	r2, [r3, #4]
 8017846:	609a      	str	r2, [r3, #8]
 8017848:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 801784a:	f002 fe33 	bl	801a4b4 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801784e:	2301      	movs	r3, #1
 8017850:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8017852:	2300      	movs	r3, #0
 8017854:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8017856:	2300      	movs	r3, #0
 8017858:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 801785a:	231f      	movs	r3, #31
 801785c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 801785e:	2387      	movs	r3, #135	; 0x87
 8017860:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8017862:	2300      	movs	r3, #0
 8017864:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8017866:	2300      	movs	r3, #0
 8017868:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 801786a:	2301      	movs	r3, #1
 801786c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801786e:	2301      	movs	r3, #1
 8017870:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8017872:	2300      	movs	r3, #0
 8017874:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8017876:	2300      	movs	r3, #0
 8017878:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801787a:	463b      	mov	r3, r7
 801787c:	4618      	mov	r0, r3
 801787e:	f002 fe51 	bl	801a524 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8017882:	2004      	movs	r0, #4
 8017884:	f002 fe2e 	bl	801a4e4 <HAL_MPU_Enable>

}
 8017888:	bf00      	nop
 801788a:	3710      	adds	r7, #16
 801788c:	46bd      	mov	sp, r7
 801788e:	bd80      	pop	{r7, pc}

08017890 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8017890:	b480      	push	{r7}
 8017892:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8017894:	b672      	cpsid	i
}
 8017896:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8017898:	e7fe      	b.n	8017898 <Error_Handler+0x8>
	...

0801789c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80178a0:	4b06      	ldr	r3, [pc, #24]	; (80178bc <MX_RNG_Init+0x20>)
 80178a2:	4a07      	ldr	r2, [pc, #28]	; (80178c0 <MX_RNG_Init+0x24>)
 80178a4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80178a6:	4805      	ldr	r0, [pc, #20]	; (80178bc <MX_RNG_Init+0x20>)
 80178a8:	f006 fa1e 	bl	801dce8 <HAL_RNG_Init>
 80178ac:	4603      	mov	r3, r0
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d001      	beq.n	80178b6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80178b2:	f7ff ffed 	bl	8017890 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80178b6:	bf00      	nop
 80178b8:	bd80      	pop	{r7, pc}
 80178ba:	bf00      	nop
 80178bc:	2000bc44 	.word	0x2000bc44
 80178c0:	50060800 	.word	0x50060800

080178c4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b0a8      	sub	sp, #160	; 0xa0
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80178cc:	f107 0310 	add.w	r3, r7, #16
 80178d0:	2290      	movs	r2, #144	; 0x90
 80178d2:	2100      	movs	r1, #0
 80178d4:	4618      	mov	r0, r3
 80178d6:	f00e fcf7 	bl	80262c8 <memset>
  if(rngHandle->Instance==RNG)
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	4a11      	ldr	r2, [pc, #68]	; (8017924 <HAL_RNG_MspInit+0x60>)
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d11b      	bne.n	801791c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80178e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80178e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80178ea:	2300      	movs	r3, #0
 80178ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80178f0:	f107 0310 	add.w	r3, r7, #16
 80178f4:	4618      	mov	r0, r3
 80178f6:	f005 fdcf 	bl	801d498 <HAL_RCCEx_PeriphCLKConfig>
 80178fa:	4603      	mov	r3, r0
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d001      	beq.n	8017904 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8017900:	f7ff ffc6 	bl	8017890 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8017904:	4b08      	ldr	r3, [pc, #32]	; (8017928 <HAL_RNG_MspInit+0x64>)
 8017906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017908:	4a07      	ldr	r2, [pc, #28]	; (8017928 <HAL_RNG_MspInit+0x64>)
 801790a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801790e:	6353      	str	r3, [r2, #52]	; 0x34
 8017910:	4b05      	ldr	r3, [pc, #20]	; (8017928 <HAL_RNG_MspInit+0x64>)
 8017912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017918:	60fb      	str	r3, [r7, #12]
 801791a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 801791c:	bf00      	nop
 801791e:	37a0      	adds	r7, #160	; 0xa0
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}
 8017924:	50060800 	.word	0x50060800
 8017928:	40023800 	.word	0x40023800

0801792c <__NVIC_SystemReset>:
{
 801792c:	b480      	push	{r7}
 801792e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8017930:	f3bf 8f4f 	dsb	sy
}
 8017934:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017936:	4b06      	ldr	r3, [pc, #24]	; (8017950 <__NVIC_SystemReset+0x24>)
 8017938:	68db      	ldr	r3, [r3, #12]
 801793a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801793e:	4904      	ldr	r1, [pc, #16]	; (8017950 <__NVIC_SystemReset+0x24>)
 8017940:	4b04      	ldr	r3, [pc, #16]	; (8017954 <__NVIC_SystemReset+0x28>)
 8017942:	4313      	orrs	r3, r2
 8017944:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8017946:	f3bf 8f4f 	dsb	sy
}
 801794a:	bf00      	nop
    __NOP();
 801794c:	bf00      	nop
 801794e:	e7fd      	b.n	801794c <__NVIC_SystemReset+0x20>
 8017950:	e000ed00 	.word	0xe000ed00
 8017954:	05fa0004 	.word	0x05fa0004

08017958 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801795c:	4b1b      	ldr	r3, [pc, #108]	; (80179cc <MX_SPI1_Init+0x74>)
 801795e:	4a1c      	ldr	r2, [pc, #112]	; (80179d0 <MX_SPI1_Init+0x78>)
 8017960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017962:	4b1a      	ldr	r3, [pc, #104]	; (80179cc <MX_SPI1_Init+0x74>)
 8017964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801796a:	4b18      	ldr	r3, [pc, #96]	; (80179cc <MX_SPI1_Init+0x74>)
 801796c:	2200      	movs	r2, #0
 801796e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017970:	4b16      	ldr	r3, [pc, #88]	; (80179cc <MX_SPI1_Init+0x74>)
 8017972:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017976:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017978:	4b14      	ldr	r3, [pc, #80]	; (80179cc <MX_SPI1_Init+0x74>)
 801797a:	2200      	movs	r2, #0
 801797c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801797e:	4b13      	ldr	r3, [pc, #76]	; (80179cc <MX_SPI1_Init+0x74>)
 8017980:	2200      	movs	r2, #0
 8017982:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017984:	4b11      	ldr	r3, [pc, #68]	; (80179cc <MX_SPI1_Init+0x74>)
 8017986:	f44f 7200 	mov.w	r2, #512	; 0x200
 801798a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801798c:	4b0f      	ldr	r3, [pc, #60]	; (80179cc <MX_SPI1_Init+0x74>)
 801798e:	2208      	movs	r2, #8
 8017990:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017992:	4b0e      	ldr	r3, [pc, #56]	; (80179cc <MX_SPI1_Init+0x74>)
 8017994:	2200      	movs	r2, #0
 8017996:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8017998:	4b0c      	ldr	r3, [pc, #48]	; (80179cc <MX_SPI1_Init+0x74>)
 801799a:	2200      	movs	r2, #0
 801799c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801799e:	4b0b      	ldr	r3, [pc, #44]	; (80179cc <MX_SPI1_Init+0x74>)
 80179a0:	2200      	movs	r2, #0
 80179a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80179a4:	4b09      	ldr	r3, [pc, #36]	; (80179cc <MX_SPI1_Init+0x74>)
 80179a6:	2207      	movs	r2, #7
 80179a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80179aa:	4b08      	ldr	r3, [pc, #32]	; (80179cc <MX_SPI1_Init+0x74>)
 80179ac:	2200      	movs	r2, #0
 80179ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80179b0:	4b06      	ldr	r3, [pc, #24]	; (80179cc <MX_SPI1_Init+0x74>)
 80179b2:	2208      	movs	r2, #8
 80179b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80179b6:	4805      	ldr	r0, [pc, #20]	; (80179cc <MX_SPI1_Init+0x74>)
 80179b8:	f006 fa2b 	bl	801de12 <HAL_SPI_Init>
 80179bc:	4603      	mov	r3, r0
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d001      	beq.n	80179c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80179c2:	f7ff ff65 	bl	8017890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80179c6:	bf00      	nop
 80179c8:	bd80      	pop	{r7, pc}
 80179ca:	bf00      	nop
 80179cc:	2000bc6c 	.word	0x2000bc6c
 80179d0:	40013000 	.word	0x40013000

080179d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b08c      	sub	sp, #48	; 0x30
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80179dc:	f107 031c 	add.w	r3, r7, #28
 80179e0:	2200      	movs	r2, #0
 80179e2:	601a      	str	r2, [r3, #0]
 80179e4:	605a      	str	r2, [r3, #4]
 80179e6:	609a      	str	r2, [r3, #8]
 80179e8:	60da      	str	r2, [r3, #12]
 80179ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	4a33      	ldr	r2, [pc, #204]	; (8017ac0 <HAL_SPI_MspInit+0xec>)
 80179f2:	4293      	cmp	r3, r2
 80179f4:	d160      	bne.n	8017ab8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80179f6:	4b33      	ldr	r3, [pc, #204]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 80179f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179fa:	4a32      	ldr	r2, [pc, #200]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 80179fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017a00:	6453      	str	r3, [r2, #68]	; 0x44
 8017a02:	4b30      	ldr	r3, [pc, #192]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017a0a:	61bb      	str	r3, [r7, #24]
 8017a0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017a0e:	4b2d      	ldr	r3, [pc, #180]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a12:	4a2c      	ldr	r2, [pc, #176]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a14:	f043 0301 	orr.w	r3, r3, #1
 8017a18:	6313      	str	r3, [r2, #48]	; 0x30
 8017a1a:	4b2a      	ldr	r3, [pc, #168]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a1e:	f003 0301 	and.w	r3, r3, #1
 8017a22:	617b      	str	r3, [r7, #20]
 8017a24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017a26:	4b27      	ldr	r3, [pc, #156]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a2a:	4a26      	ldr	r2, [pc, #152]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a2c:	f043 0308 	orr.w	r3, r3, #8
 8017a30:	6313      	str	r3, [r2, #48]	; 0x30
 8017a32:	4b24      	ldr	r3, [pc, #144]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a36:	f003 0308 	and.w	r3, r3, #8
 8017a3a:	613b      	str	r3, [r7, #16]
 8017a3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017a3e:	4b21      	ldr	r3, [pc, #132]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a42:	4a20      	ldr	r2, [pc, #128]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a48:	6313      	str	r3, [r2, #48]	; 0x30
 8017a4a:	4b1e      	ldr	r3, [pc, #120]	; (8017ac4 <HAL_SPI_MspInit+0xf0>)
 8017a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a52:	60fb      	str	r3, [r7, #12]
 8017a54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8017a56:	2320      	movs	r3, #32
 8017a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a5a:	2302      	movs	r3, #2
 8017a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a5e:	2300      	movs	r3, #0
 8017a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a62:	2303      	movs	r3, #3
 8017a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017a66:	2305      	movs	r3, #5
 8017a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8017a6a:	f107 031c 	add.w	r3, r7, #28
 8017a6e:	4619      	mov	r1, r3
 8017a70:	4815      	ldr	r0, [pc, #84]	; (8017ac8 <HAL_SPI_MspInit+0xf4>)
 8017a72:	f004 f813 	bl	801ba9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8017a76:	2380      	movs	r3, #128	; 0x80
 8017a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a7a:	2302      	movs	r3, #2
 8017a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a82:	2303      	movs	r3, #3
 8017a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017a86:	2305      	movs	r3, #5
 8017a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8017a8a:	f107 031c 	add.w	r3, r7, #28
 8017a8e:	4619      	mov	r1, r3
 8017a90:	480e      	ldr	r0, [pc, #56]	; (8017acc <HAL_SPI_MspInit+0xf8>)
 8017a92:	f004 f803 	bl	801ba9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8017a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a9c:	2302      	movs	r3, #2
 8017a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017aa4:	2303      	movs	r3, #3
 8017aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017aa8:	2305      	movs	r3, #5
 8017aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8017aac:	f107 031c 	add.w	r3, r7, #28
 8017ab0:	4619      	mov	r1, r3
 8017ab2:	4807      	ldr	r0, [pc, #28]	; (8017ad0 <HAL_SPI_MspInit+0xfc>)
 8017ab4:	f003 fff2 	bl	801ba9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8017ab8:	bf00      	nop
 8017aba:	3730      	adds	r7, #48	; 0x30
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}
 8017ac0:	40013000 	.word	0x40013000
 8017ac4:	40023800 	.word	0x40023800
 8017ac8:	40020000 	.word	0x40020000
 8017acc:	40020c00 	.word	0x40020c00
 8017ad0:	40021800 	.word	0x40021800

08017ad4 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b086      	sub	sp, #24
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	60b9      	str	r1, [r7, #8]
 8017adc:	607b      	str	r3, [r7, #4]
 8017ade:	4603      	mov	r3, r0
 8017ae0:	73fb      	strb	r3, [r7, #15]
 8017ae2:	4613      	mov	r3, r2
 8017ae4:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8017aea:	7bfb      	ldrb	r3, [r7, #15]
 8017aec:	3b01      	subs	r3, #1
 8017aee:	2b03      	cmp	r3, #3
 8017af0:	d828      	bhi.n	8017b44 <SPI_WriteInFlash+0x70>
 8017af2:	a201      	add	r2, pc, #4	; (adr r2, 8017af8 <SPI_WriteInFlash+0x24>)
 8017af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017af8:	08017b09 	.word	0x08017b09
 8017afc:	08017b19 	.word	0x08017b19
 8017b00:	08017b27 	.word	0x08017b27
 8017b04:	08017b35 	.word	0x08017b35
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8017b08:	4b75      	ldr	r3, [pc, #468]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017b0a:	4a76      	ldr	r2, [pc, #472]	; (8017ce4 <SPI_WriteInFlash+0x210>)
 8017b0c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8017b0e:	4b76      	ldr	r3, [pc, #472]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017b14:	601a      	str	r2, [r3, #0]
		break;
 8017b16:	e018      	b.n	8017b4a <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8017b18:	4b71      	ldr	r3, [pc, #452]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017b1a:	4a74      	ldr	r2, [pc, #464]	; (8017cec <SPI_WriteInFlash+0x218>)
 8017b1c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8017b1e:	4b72      	ldr	r3, [pc, #456]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017b20:	2220      	movs	r2, #32
 8017b22:	601a      	str	r2, [r3, #0]
		break;
 8017b24:	e011      	b.n	8017b4a <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8017b26:	4b6e      	ldr	r3, [pc, #440]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017b28:	4a70      	ldr	r2, [pc, #448]	; (8017cec <SPI_WriteInFlash+0x218>)
 8017b2a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8017b2c:	4b6e      	ldr	r3, [pc, #440]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017b2e:	2240      	movs	r2, #64	; 0x40
 8017b30:	601a      	str	r2, [r3, #0]
		break;
 8017b32:	e00a      	b.n	8017b4a <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8017b34:	4b6a      	ldr	r3, [pc, #424]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017b36:	4a6e      	ldr	r2, [pc, #440]	; (8017cf0 <SPI_WriteInFlash+0x21c>)
 8017b38:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8017b3a:	4b6b      	ldr	r3, [pc, #428]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017b3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017b40:	601a      	str	r2, [r3, #0]
		break;
 8017b42:	e002      	b.n	8017b4a <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8017b44:	486b      	ldr	r0, [pc, #428]	; (8017cf4 <SPI_WriteInFlash+0x220>)
 8017b46:	f00e fd43 	bl	80265d0 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017b4a:	4b65      	ldr	r3, [pc, #404]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	4a66      	ldr	r2, [pc, #408]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017b50:	6812      	ldr	r2, [r2, #0]
 8017b52:	b291      	uxth	r1, r2
 8017b54:	2201      	movs	r2, #1
 8017b56:	4618      	mov	r0, r3
 8017b58:	f004 f964 	bl	801be24 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017b5c:	4b60      	ldr	r3, [pc, #384]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	4a61      	ldr	r2, [pc, #388]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017b62:	6812      	ldr	r2, [r2, #0]
 8017b64:	b291      	uxth	r1, r2
 8017b66:	2200      	movs	r2, #0
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f004 f95b 	bl	801be24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 8017b6e:	2364      	movs	r3, #100	; 0x64
 8017b70:	2201      	movs	r2, #1
 8017b72:	4961      	ldr	r1, [pc, #388]	; (8017cf8 <SPI_WriteInFlash+0x224>)
 8017b74:	4861      	ldr	r0, [pc, #388]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017b76:	f006 f9f7 	bl	801df68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017b7a:	4b59      	ldr	r3, [pc, #356]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	4a5a      	ldr	r2, [pc, #360]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017b80:	6812      	ldr	r2, [r2, #0]
 8017b82:	b291      	uxth	r1, r2
 8017b84:	2201      	movs	r2, #1
 8017b86:	4618      	mov	r0, r3
 8017b88:	f004 f94c 	bl	801be24 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017b8c:	4b54      	ldr	r3, [pc, #336]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	4a55      	ldr	r2, [pc, #340]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017b92:	6812      	ldr	r2, [r2, #0]
 8017b94:	b291      	uxth	r1, r2
 8017b96:	2200      	movs	r2, #0
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f004 f943 	bl	801be24 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 8017b9e:	2364      	movs	r3, #100	; 0x64
 8017ba0:	2201      	movs	r2, #1
 8017ba2:	4957      	ldr	r1, [pc, #348]	; (8017d00 <SPI_WriteInFlash+0x22c>)
 8017ba4:	4855      	ldr	r0, [pc, #340]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017ba6:	f006 f9df 	bl	801df68 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017baa:	2364      	movs	r3, #100	; 0x64
 8017bac:	2201      	movs	r2, #1
 8017bae:	4955      	ldr	r1, [pc, #340]	; (8017d04 <SPI_WriteInFlash+0x230>)
 8017bb0:	4852      	ldr	r0, [pc, #328]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017bb2:	f006 fb47 	bl	801e244 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017bb6:	4b4a      	ldr	r3, [pc, #296]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	4a4b      	ldr	r2, [pc, #300]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017bbc:	6812      	ldr	r2, [r2, #0]
 8017bbe:	b291      	uxth	r1, r2
 8017bc0:	2201      	movs	r2, #1
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f004 f92e 	bl	801be24 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8017bc8:	4b4e      	ldr	r3, [pc, #312]	; (8017d04 <SPI_WriteInFlash+0x230>)
 8017bca:	781b      	ldrb	r3, [r3, #0]
 8017bcc:	f003 0302 	and.w	r3, r3, #2
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d103      	bne.n	8017bdc <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8017bd4:	484c      	ldr	r0, [pc, #304]	; (8017d08 <SPI_WriteInFlash+0x234>)
 8017bd6:	f00e fc5f 	bl	8026498 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017bda:	e7d7      	b.n	8017b8c <SPI_WriteInFlash+0xb8>
			break;
 8017bdc:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017bde:	4b40      	ldr	r3, [pc, #256]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	4a41      	ldr	r2, [pc, #260]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017be4:	6812      	ldr	r2, [r2, #0]
 8017be6:	b291      	uxth	r1, r2
 8017be8:	2200      	movs	r2, #0
 8017bea:	4618      	mov	r0, r3
 8017bec:	f004 f91a 	bl	801be24 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8017bf0:	2202      	movs	r2, #2
 8017bf2:	4b46      	ldr	r3, [pc, #280]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017bf4:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8017bf6:	68bb      	ldr	r3, [r7, #8]
 8017bf8:	0c1b      	lsrs	r3, r3, #16
 8017bfa:	b2da      	uxtb	r2, r3
 8017bfc:	4b43      	ldr	r3, [pc, #268]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017bfe:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	0a1b      	lsrs	r3, r3, #8
 8017c04:	b2da      	uxtb	r2, r3
 8017c06:	4b41      	ldr	r3, [pc, #260]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017c08:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8017c0a:	68bb      	ldr	r3, [r7, #8]
 8017c0c:	b2da      	uxtb	r2, r3
 8017c0e:	4b3f      	ldr	r3, [pc, #252]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017c10:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8017c12:	2364      	movs	r3, #100	; 0x64
 8017c14:	2204      	movs	r2, #4
 8017c16:	493d      	ldr	r1, [pc, #244]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017c18:	4838      	ldr	r0, [pc, #224]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017c1a:	f006 f9a5 	bl	801df68 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8017c1e:	89ba      	ldrh	r2, [r7, #12]
 8017c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017c24:	6879      	ldr	r1, [r7, #4]
 8017c26:	4835      	ldr	r0, [pc, #212]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017c28:	f006 f99e 	bl	801df68 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017c2c:	4b2c      	ldr	r3, [pc, #176]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	4a2d      	ldr	r2, [pc, #180]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017c32:	6812      	ldr	r2, [r2, #0]
 8017c34:	b291      	uxth	r1, r2
 8017c36:	2201      	movs	r2, #1
 8017c38:	4618      	mov	r0, r3
 8017c3a:	f004 f8f3 	bl	801be24 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017c3e:	4b28      	ldr	r3, [pc, #160]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	4a29      	ldr	r2, [pc, #164]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017c44:	6812      	ldr	r2, [r2, #0]
 8017c46:	b291      	uxth	r1, r2
 8017c48:	2200      	movs	r2, #0
 8017c4a:	4618      	mov	r0, r3
 8017c4c:	f004 f8ea 	bl	801be24 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8017c50:	2205      	movs	r2, #5
 8017c52:	4b2e      	ldr	r3, [pc, #184]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017c54:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017c56:	2364      	movs	r3, #100	; 0x64
 8017c58:	2201      	movs	r2, #1
 8017c5a:	492c      	ldr	r1, [pc, #176]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017c5c:	4827      	ldr	r0, [pc, #156]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017c5e:	f006 f983 	bl	801df68 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017c62:	2364      	movs	r3, #100	; 0x64
 8017c64:	2201      	movs	r2, #1
 8017c66:	4927      	ldr	r1, [pc, #156]	; (8017d04 <SPI_WriteInFlash+0x230>)
 8017c68:	4824      	ldr	r0, [pc, #144]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017c6a:	f006 faeb 	bl	801e244 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017c6e:	4b1c      	ldr	r3, [pc, #112]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	4a1d      	ldr	r2, [pc, #116]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017c74:	6812      	ldr	r2, [r2, #0]
 8017c76:	b291      	uxth	r1, r2
 8017c78:	2201      	movs	r2, #1
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f004 f8d2 	bl	801be24 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8017c80:	4b20      	ldr	r3, [pc, #128]	; (8017d04 <SPI_WriteInFlash+0x230>)
 8017c82:	781b      	ldrb	r3, [r3, #0]
 8017c84:	f003 0301 	and.w	r3, r3, #1
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d1d8      	bne.n	8017c3e <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8017c8c:	2301      	movs	r3, #1
 8017c8e:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 8017c90:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017c92:	4b13      	ldr	r3, [pc, #76]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	4a14      	ldr	r2, [pc, #80]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017c98:	6812      	ldr	r2, [r2, #0]
 8017c9a:	b291      	uxth	r1, r2
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f004 f8c0 	bl	801be24 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8017ca4:	2204      	movs	r2, #4
 8017ca6:	4b19      	ldr	r3, [pc, #100]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017ca8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017caa:	2364      	movs	r3, #100	; 0x64
 8017cac:	2201      	movs	r2, #1
 8017cae:	4917      	ldr	r1, [pc, #92]	; (8017d0c <SPI_WriteInFlash+0x238>)
 8017cb0:	4812      	ldr	r0, [pc, #72]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017cb2:	f006 f959 	bl	801df68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017cb6:	2364      	movs	r3, #100	; 0x64
 8017cb8:	2201      	movs	r2, #1
 8017cba:	4912      	ldr	r1, [pc, #72]	; (8017d04 <SPI_WriteInFlash+0x230>)
 8017cbc:	480f      	ldr	r0, [pc, #60]	; (8017cfc <SPI_WriteInFlash+0x228>)
 8017cbe:	f006 fac1 	bl	801e244 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017cc2:	4b07      	ldr	r3, [pc, #28]	; (8017ce0 <SPI_WriteInFlash+0x20c>)
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	4a08      	ldr	r2, [pc, #32]	; (8017ce8 <SPI_WriteInFlash+0x214>)
 8017cc8:	6812      	ldr	r2, [r2, #0]
 8017cca:	b291      	uxth	r1, r2
 8017ccc:	2201      	movs	r2, #1
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f004 f8a8 	bl	801be24 <HAL_GPIO_WritePin>

	return Return_Value;
 8017cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3718      	adds	r7, #24
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	2000bc60 	.word	0x2000bc60
 8017ce4:	40021800 	.word	0x40021800
 8017ce8:	2000bc64 	.word	0x2000bc64
 8017cec:	40020c00 	.word	0x40020c00
 8017cf0:	40021000 	.word	0x40021000
 8017cf4:	0802baa0 	.word	0x0802baa0
 8017cf8:	0802da08 	.word	0x0802da08
 8017cfc:	2000bc6c 	.word	0x2000bc6c
 8017d00:	0802da09 	.word	0x0802da09
 8017d04:	2000bc5c 	.word	0x2000bc5c
 8017d08:	0802bab8 	.word	0x0802bab8
 8017d0c:	2000bc58 	.word	0x2000bc58

08017d10 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b084      	sub	sp, #16
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	4603      	mov	r3, r0
 8017d18:	6039      	str	r1, [r7, #0]
 8017d1a:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8017d20:	79fb      	ldrb	r3, [r7, #7]
 8017d22:	3b01      	subs	r3, #1
 8017d24:	2b03      	cmp	r3, #3
 8017d26:	d829      	bhi.n	8017d7c <SPI_MemoryEraseBySector+0x6c>
 8017d28:	a201      	add	r2, pc, #4	; (adr r2, 8017d30 <SPI_MemoryEraseBySector+0x20>)
 8017d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d2e:	bf00      	nop
 8017d30:	08017d41 	.word	0x08017d41
 8017d34:	08017d51 	.word	0x08017d51
 8017d38:	08017d5f 	.word	0x08017d5f
 8017d3c:	08017d6d 	.word	0x08017d6d
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8017d40:	4b6d      	ldr	r3, [pc, #436]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017d42:	4a6e      	ldr	r2, [pc, #440]	; (8017efc <SPI_MemoryEraseBySector+0x1ec>)
 8017d44:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8017d46:	4b6e      	ldr	r3, [pc, #440]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017d4c:	601a      	str	r2, [r3, #0]
		break;
 8017d4e:	e018      	b.n	8017d82 <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8017d50:	4b69      	ldr	r3, [pc, #420]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017d52:	4a6c      	ldr	r2, [pc, #432]	; (8017f04 <SPI_MemoryEraseBySector+0x1f4>)
 8017d54:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8017d56:	4b6a      	ldr	r3, [pc, #424]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017d58:	2220      	movs	r2, #32
 8017d5a:	601a      	str	r2, [r3, #0]
		break;
 8017d5c:	e011      	b.n	8017d82 <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8017d5e:	4b66      	ldr	r3, [pc, #408]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017d60:	4a68      	ldr	r2, [pc, #416]	; (8017f04 <SPI_MemoryEraseBySector+0x1f4>)
 8017d62:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8017d64:	4b66      	ldr	r3, [pc, #408]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017d66:	2240      	movs	r2, #64	; 0x40
 8017d68:	601a      	str	r2, [r3, #0]
		break;
 8017d6a:	e00a      	b.n	8017d82 <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8017d6c:	4b62      	ldr	r3, [pc, #392]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017d6e:	4a66      	ldr	r2, [pc, #408]	; (8017f08 <SPI_MemoryEraseBySector+0x1f8>)
 8017d70:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8017d72:	4b63      	ldr	r3, [pc, #396]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017d74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017d78:	601a      	str	r2, [r3, #0]
		break;
 8017d7a:	e002      	b.n	8017d82 <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8017d7c:	4863      	ldr	r0, [pc, #396]	; (8017f0c <SPI_MemoryEraseBySector+0x1fc>)
 8017d7e:	f00e fc27 	bl	80265d0 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017d82:	4b5d      	ldr	r3, [pc, #372]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	4a5e      	ldr	r2, [pc, #376]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017d88:	6812      	ldr	r2, [r2, #0]
 8017d8a:	b291      	uxth	r1, r2
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f004 f848 	bl	801be24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8017d94:	2364      	movs	r3, #100	; 0x64
 8017d96:	2201      	movs	r2, #1
 8017d98:	495d      	ldr	r1, [pc, #372]	; (8017f10 <SPI_MemoryEraseBySector+0x200>)
 8017d9a:	485e      	ldr	r0, [pc, #376]	; (8017f14 <SPI_MemoryEraseBySector+0x204>)
 8017d9c:	f006 f8e4 	bl	801df68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017da0:	4b55      	ldr	r3, [pc, #340]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	4a56      	ldr	r2, [pc, #344]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017da6:	6812      	ldr	r2, [r2, #0]
 8017da8:	b291      	uxth	r1, r2
 8017daa:	2201      	movs	r2, #1
 8017dac:	4618      	mov	r0, r3
 8017dae:	f004 f839 	bl	801be24 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017db2:	4b51      	ldr	r3, [pc, #324]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	4a52      	ldr	r2, [pc, #328]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017db8:	6812      	ldr	r2, [r2, #0]
 8017dba:	b291      	uxth	r1, r2
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	f004 f830 	bl	801be24 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8017dc4:	2364      	movs	r3, #100	; 0x64
 8017dc6:	2201      	movs	r2, #1
 8017dc8:	4953      	ldr	r1, [pc, #332]	; (8017f18 <SPI_MemoryEraseBySector+0x208>)
 8017dca:	4852      	ldr	r0, [pc, #328]	; (8017f14 <SPI_MemoryEraseBySector+0x204>)
 8017dcc:	f006 f8cc 	bl	801df68 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017dd0:	2364      	movs	r3, #100	; 0x64
 8017dd2:	2201      	movs	r2, #1
 8017dd4:	4951      	ldr	r1, [pc, #324]	; (8017f1c <SPI_MemoryEraseBySector+0x20c>)
 8017dd6:	484f      	ldr	r0, [pc, #316]	; (8017f14 <SPI_MemoryEraseBySector+0x204>)
 8017dd8:	f006 fa34 	bl	801e244 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017ddc:	4b46      	ldr	r3, [pc, #280]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	4a47      	ldr	r2, [pc, #284]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017de2:	6812      	ldr	r2, [r2, #0]
 8017de4:	b291      	uxth	r1, r2
 8017de6:	2201      	movs	r2, #1
 8017de8:	4618      	mov	r0, r3
 8017dea:	f004 f81b 	bl	801be24 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8017dee:	4b4b      	ldr	r3, [pc, #300]	; (8017f1c <SPI_MemoryEraseBySector+0x20c>)
 8017df0:	781b      	ldrb	r3, [r3, #0]
 8017df2:	f003 0302 	and.w	r3, r3, #2
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d103      	bne.n	8017e02 <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8017dfa:	4849      	ldr	r0, [pc, #292]	; (8017f20 <SPI_MemoryEraseBySector+0x210>)
 8017dfc:	f00e fb4c 	bl	8026498 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017e00:	e7d7      	b.n	8017db2 <SPI_MemoryEraseBySector+0xa2>
			break;
 8017e02:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017e04:	4b3c      	ldr	r3, [pc, #240]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	4a3d      	ldr	r2, [pc, #244]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017e0a:	6812      	ldr	r2, [r2, #0]
 8017e0c:	b291      	uxth	r1, r2
 8017e0e:	2200      	movs	r2, #0
 8017e10:	4618      	mov	r0, r3
 8017e12:	f004 f807 	bl	801be24 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8017e16:	4b43      	ldr	r3, [pc, #268]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017e18:	2220      	movs	r2, #32
 8017e1a:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	0c1b      	lsrs	r3, r3, #16
 8017e20:	b2da      	uxtb	r2, r3
 8017e22:	4b40      	ldr	r3, [pc, #256]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017e24:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	0a1b      	lsrs	r3, r3, #8
 8017e2a:	b2da      	uxtb	r2, r3
 8017e2c:	4b3d      	ldr	r3, [pc, #244]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017e2e:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8017e30:	683b      	ldr	r3, [r7, #0]
 8017e32:	b2da      	uxtb	r2, r3
 8017e34:	4b3b      	ldr	r3, [pc, #236]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017e36:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8017e38:	2364      	movs	r3, #100	; 0x64
 8017e3a:	2204      	movs	r2, #4
 8017e3c:	4939      	ldr	r1, [pc, #228]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017e3e:	4835      	ldr	r0, [pc, #212]	; (8017f14 <SPI_MemoryEraseBySector+0x204>)
 8017e40:	f006 f892 	bl	801df68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017e44:	4b2c      	ldr	r3, [pc, #176]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	4a2d      	ldr	r2, [pc, #180]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017e4a:	6812      	ldr	r2, [r2, #0]
 8017e4c:	b291      	uxth	r1, r2
 8017e4e:	2201      	movs	r2, #1
 8017e50:	4618      	mov	r0, r3
 8017e52:	f003 ffe7 	bl	801be24 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017e56:	4b28      	ldr	r3, [pc, #160]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	4a29      	ldr	r2, [pc, #164]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017e5c:	6812      	ldr	r2, [r2, #0]
 8017e5e:	b291      	uxth	r1, r2
 8017e60:	2200      	movs	r2, #0
 8017e62:	4618      	mov	r0, r3
 8017e64:	f003 ffde 	bl	801be24 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8017e68:	2205      	movs	r2, #5
 8017e6a:	4b2e      	ldr	r3, [pc, #184]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017e6c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017e6e:	2364      	movs	r3, #100	; 0x64
 8017e70:	2201      	movs	r2, #1
 8017e72:	492c      	ldr	r1, [pc, #176]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017e74:	4827      	ldr	r0, [pc, #156]	; (8017f14 <SPI_MemoryEraseBySector+0x204>)
 8017e76:	f006 f877 	bl	801df68 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017e7a:	2364      	movs	r3, #100	; 0x64
 8017e7c:	2201      	movs	r2, #1
 8017e7e:	4927      	ldr	r1, [pc, #156]	; (8017f1c <SPI_MemoryEraseBySector+0x20c>)
 8017e80:	4824      	ldr	r0, [pc, #144]	; (8017f14 <SPI_MemoryEraseBySector+0x204>)
 8017e82:	f006 f9df 	bl	801e244 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017e86:	4b1c      	ldr	r3, [pc, #112]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4a1d      	ldr	r2, [pc, #116]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017e8c:	6812      	ldr	r2, [r2, #0]
 8017e8e:	b291      	uxth	r1, r2
 8017e90:	2201      	movs	r2, #1
 8017e92:	4618      	mov	r0, r3
 8017e94:	f003 ffc6 	bl	801be24 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8017e98:	4b20      	ldr	r3, [pc, #128]	; (8017f1c <SPI_MemoryEraseBySector+0x20c>)
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	f003 0301 	and.w	r3, r3, #1
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d1d8      	bne.n	8017e56 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8017ea8:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017eaa:	4b13      	ldr	r3, [pc, #76]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	4a14      	ldr	r2, [pc, #80]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017eb0:	6812      	ldr	r2, [r2, #0]
 8017eb2:	b291      	uxth	r1, r2
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f003 ffb4 	bl	801be24 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8017ebc:	2204      	movs	r2, #4
 8017ebe:	4b19      	ldr	r3, [pc, #100]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017ec0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017ec2:	2364      	movs	r3, #100	; 0x64
 8017ec4:	2201      	movs	r2, #1
 8017ec6:	4917      	ldr	r1, [pc, #92]	; (8017f24 <SPI_MemoryEraseBySector+0x214>)
 8017ec8:	4812      	ldr	r0, [pc, #72]	; (8017f14 <SPI_MemoryEraseBySector+0x204>)
 8017eca:	f006 f84d 	bl	801df68 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017ece:	2364      	movs	r3, #100	; 0x64
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	4912      	ldr	r1, [pc, #72]	; (8017f1c <SPI_MemoryEraseBySector+0x20c>)
 8017ed4:	480f      	ldr	r0, [pc, #60]	; (8017f14 <SPI_MemoryEraseBySector+0x204>)
 8017ed6:	f006 f9b5 	bl	801e244 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017eda:	4b07      	ldr	r3, [pc, #28]	; (8017ef8 <SPI_MemoryEraseBySector+0x1e8>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	4a08      	ldr	r2, [pc, #32]	; (8017f00 <SPI_MemoryEraseBySector+0x1f0>)
 8017ee0:	6812      	ldr	r2, [r2, #0]
 8017ee2:	b291      	uxth	r1, r2
 8017ee4:	2201      	movs	r2, #1
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f003 ff9c 	bl	801be24 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8017eec:	68fb      	ldr	r3, [r7, #12]

}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	3710      	adds	r7, #16
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd80      	pop	{r7, pc}
 8017ef6:	bf00      	nop
 8017ef8:	2000bc60 	.word	0x2000bc60
 8017efc:	40021800 	.word	0x40021800
 8017f00:	2000bc64 	.word	0x2000bc64
 8017f04:	40020c00 	.word	0x40020c00
 8017f08:	40021000 	.word	0x40021000
 8017f0c:	0802baa0 	.word	0x0802baa0
 8017f10:	0802da08 	.word	0x0802da08
 8017f14:	2000bc6c 	.word	0x2000bc6c
 8017f18:	0802da09 	.word	0x0802da09
 8017f1c:	2000bc5c 	.word	0x2000bc5c
 8017f20:	0802badc 	.word	0x0802badc
 8017f24:	2000bc58 	.word	0x2000bc58

08017f28 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	b084      	sub	sp, #16
 8017f2c:	af00      	add	r7, sp, #0
 8017f2e:	60b9      	str	r1, [r7, #8]
 8017f30:	607b      	str	r3, [r7, #4]
 8017f32:	4603      	mov	r3, r0
 8017f34:	73fb      	strb	r3, [r7, #15]
 8017f36:	4613      	mov	r3, r2
 8017f38:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 8017f3a:	7bfb      	ldrb	r3, [r7, #15]
 8017f3c:	3b01      	subs	r3, #1
 8017f3e:	2b03      	cmp	r3, #3
 8017f40:	d828      	bhi.n	8017f94 <SPI_ReadFromFlash+0x6c>
 8017f42:	a201      	add	r2, pc, #4	; (adr r2, 8017f48 <SPI_ReadFromFlash+0x20>)
 8017f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f48:	08017f59 	.word	0x08017f59
 8017f4c:	08017f69 	.word	0x08017f69
 8017f50:	08017f77 	.word	0x08017f77
 8017f54:	08017f85 	.word	0x08017f85
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8017f58:	4b2d      	ldr	r3, [pc, #180]	; (8018010 <SPI_ReadFromFlash+0xe8>)
 8017f5a:	4a2e      	ldr	r2, [pc, #184]	; (8018014 <SPI_ReadFromFlash+0xec>)
 8017f5c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8017f5e:	4b2e      	ldr	r3, [pc, #184]	; (8018018 <SPI_ReadFromFlash+0xf0>)
 8017f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017f64:	601a      	str	r2, [r3, #0]
		break;
 8017f66:	e018      	b.n	8017f9a <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8017f68:	4b29      	ldr	r3, [pc, #164]	; (8018010 <SPI_ReadFromFlash+0xe8>)
 8017f6a:	4a2c      	ldr	r2, [pc, #176]	; (801801c <SPI_ReadFromFlash+0xf4>)
 8017f6c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8017f6e:	4b2a      	ldr	r3, [pc, #168]	; (8018018 <SPI_ReadFromFlash+0xf0>)
 8017f70:	2220      	movs	r2, #32
 8017f72:	601a      	str	r2, [r3, #0]
		break;
 8017f74:	e011      	b.n	8017f9a <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8017f76:	4b26      	ldr	r3, [pc, #152]	; (8018010 <SPI_ReadFromFlash+0xe8>)
 8017f78:	4a28      	ldr	r2, [pc, #160]	; (801801c <SPI_ReadFromFlash+0xf4>)
 8017f7a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8017f7c:	4b26      	ldr	r3, [pc, #152]	; (8018018 <SPI_ReadFromFlash+0xf0>)
 8017f7e:	2240      	movs	r2, #64	; 0x40
 8017f80:	601a      	str	r2, [r3, #0]
		break;
 8017f82:	e00a      	b.n	8017f9a <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8017f84:	4b22      	ldr	r3, [pc, #136]	; (8018010 <SPI_ReadFromFlash+0xe8>)
 8017f86:	4a26      	ldr	r2, [pc, #152]	; (8018020 <SPI_ReadFromFlash+0xf8>)
 8017f88:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8017f8a:	4b23      	ldr	r3, [pc, #140]	; (8018018 <SPI_ReadFromFlash+0xf0>)
 8017f8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017f90:	601a      	str	r2, [r3, #0]
		break;
 8017f92:	e002      	b.n	8017f9a <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8017f94:	4823      	ldr	r0, [pc, #140]	; (8018024 <SPI_ReadFromFlash+0xfc>)
 8017f96:	f00e fb1b 	bl	80265d0 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8017f9a:	89bb      	ldrh	r3, [r7, #12]
 8017f9c:	461a      	mov	r2, r3
 8017f9e:	2100      	movs	r1, #0
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f00e f991 	bl	80262c8 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017fa6:	4b1a      	ldr	r3, [pc, #104]	; (8018010 <SPI_ReadFromFlash+0xe8>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	4a1b      	ldr	r2, [pc, #108]	; (8018018 <SPI_ReadFromFlash+0xf0>)
 8017fac:	6812      	ldr	r2, [r2, #0]
 8017fae:	b291      	uxth	r1, r2
 8017fb0:	2200      	movs	r2, #0
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f003 ff36 	bl	801be24 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8017fb8:	2203      	movs	r2, #3
 8017fba:	4b1b      	ldr	r3, [pc, #108]	; (8018028 <SPI_ReadFromFlash+0x100>)
 8017fbc:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8017fbe:	68bb      	ldr	r3, [r7, #8]
 8017fc0:	0c1b      	lsrs	r3, r3, #16
 8017fc2:	b2da      	uxtb	r2, r3
 8017fc4:	4b18      	ldr	r3, [pc, #96]	; (8018028 <SPI_ReadFromFlash+0x100>)
 8017fc6:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8017fc8:	68bb      	ldr	r3, [r7, #8]
 8017fca:	0a1b      	lsrs	r3, r3, #8
 8017fcc:	b2da      	uxtb	r2, r3
 8017fce:	4b16      	ldr	r3, [pc, #88]	; (8018028 <SPI_ReadFromFlash+0x100>)
 8017fd0:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	b2da      	uxtb	r2, r3
 8017fd6:	4b14      	ldr	r3, [pc, #80]	; (8018028 <SPI_ReadFromFlash+0x100>)
 8017fd8:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8017fda:	2364      	movs	r3, #100	; 0x64
 8017fdc:	2204      	movs	r2, #4
 8017fde:	4912      	ldr	r1, [pc, #72]	; (8018028 <SPI_ReadFromFlash+0x100>)
 8017fe0:	4812      	ldr	r0, [pc, #72]	; (801802c <SPI_ReadFromFlash+0x104>)
 8017fe2:	f005 ffc1 	bl	801df68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8017fe6:	89ba      	ldrh	r2, [r7, #12]
 8017fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017fec:	6879      	ldr	r1, [r7, #4]
 8017fee:	480f      	ldr	r0, [pc, #60]	; (801802c <SPI_ReadFromFlash+0x104>)
 8017ff0:	f006 f928 	bl	801e244 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017ff4:	4b06      	ldr	r3, [pc, #24]	; (8018010 <SPI_ReadFromFlash+0xe8>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	4a07      	ldr	r2, [pc, #28]	; (8018018 <SPI_ReadFromFlash+0xf0>)
 8017ffa:	6812      	ldr	r2, [r2, #0]
 8017ffc:	b291      	uxth	r1, r2
 8017ffe:	2201      	movs	r2, #1
 8018000:	4618      	mov	r0, r3
 8018002:	f003 ff0f 	bl	801be24 <HAL_GPIO_WritePin>

}
 8018006:	bf00      	nop
 8018008:	3710      	adds	r7, #16
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	2000bc60 	.word	0x2000bc60
 8018014:	40021800 	.word	0x40021800
 8018018:	2000bc64 	.word	0x2000bc64
 801801c:	40020c00 	.word	0x40020c00
 8018020:	40021000 	.word	0x40021000
 8018024:	0802baa0 	.word	0x0802baa0
 8018028:	2000bc58 	.word	0x2000bc58
 801802c:	2000bc6c 	.word	0x2000bc6c

08018030 <Get_Config>:




void Get_Config(void)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b084      	sub	sp, #16
 8018034:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 8018036:	2300      	movs	r3, #0
 8018038:	60fb      	str	r3, [r7, #12]

	size_t SIZE = (sizeof(EI_t))+6;
 801803a:	f240 335e 	movw	r3, #862	; 0x35e
 801803e:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	60bb      	str	r3, [r7, #8]

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8018044:	2300      	movs	r3, #0
 8018046:	60fb      	str	r3, [r7, #12]
 8018048:	e01d      	b.n	8018086 <Get_Config+0x56>
	{
		HAL_Delay(20);
 801804a:	2014      	movs	r0, #20
 801804c:	f001 fa26 	bl	801949c <HAL_Delay>
		if(SIZE_VAR <32)
 8018050:	68bb      	ldr	r3, [r7, #8]
 8018052:	2b1f      	cmp	r3, #31
 8018054:	d809      	bhi.n	801806a <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8018056:	68bb      	ldr	r3, [r7, #8]
 8018058:	b29a      	uxth	r2, r3
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	4938      	ldr	r1, [pc, #224]	; (8018140 <Get_Config+0x110>)
 801805e:	440b      	add	r3, r1
 8018060:	68f9      	ldr	r1, [r7, #12]
 8018062:	2001      	movs	r0, #1
 8018064:	f7ff ff60 	bl	8017f28 <SPI_ReadFromFlash>
 8018068:	e00a      	b.n	8018080 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	4a34      	ldr	r2, [pc, #208]	; (8018140 <Get_Config+0x110>)
 801806e:	4413      	add	r3, r2
 8018070:	2220      	movs	r2, #32
 8018072:	68f9      	ldr	r1, [r7, #12]
 8018074:	2001      	movs	r0, #1
 8018076:	f7ff ff57 	bl	8017f28 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	3b20      	subs	r3, #32
 801807e:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	3320      	adds	r3, #32
 8018084:	60fb      	str	r3, [r7, #12]
 8018086:	68fa      	ldr	r2, [r7, #12]
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	429a      	cmp	r2, r3
 801808c:	d3dd      	bcc.n	801804a <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 801808e:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8018092:	482b      	ldr	r0, [pc, #172]	; (8018140 <Get_Config+0x110>)
 8018094:	f7fd fbba 	bl	801580c <CheckCRC>
 8018098:	4603      	mov	r3, r0
 801809a:	2b00      	cmp	r3, #0
 801809c:	d02a      	beq.n	80180f4 <Get_Config+0xc4>
	{
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 801809e:	f44f 7256 	mov.w	r2, #856	; 0x358
 80180a2:	4928      	ldr	r1, [pc, #160]	; (8018144 <Get_Config+0x114>)
 80180a4:	4828      	ldr	r0, [pc, #160]	; (8018148 <Get_Config+0x118>)
 80180a6:	f00e f8e7 	bl	8026278 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 80180aa:	4a28      	ldr	r2, [pc, #160]	; (801814c <Get_Config+0x11c>)
 80180ac:	2110      	movs	r1, #16
 80180ae:	2000      	movs	r0, #0
 80180b0:	f7e8 fab0 	bl	8000614 <ExtractBits>
 80180b4:	4603      	mov	r3, r0
 80180b6:	b29a      	uxth	r2, r3
 80180b8:	4b25      	ldr	r3, [pc, #148]	; (8018150 <Get_Config+0x120>)
 80180ba:	801a      	strh	r2, [r3, #0]
		DatCrcXchangeSelf_st.App_CRC = EI_Dat_CRC;
 80180bc:	4b24      	ldr	r3, [pc, #144]	; (8018150 <Get_Config+0x120>)
 80180be:	881a      	ldrh	r2, [r3, #0]
 80180c0:	4b24      	ldr	r3, [pc, #144]	; (8018154 <Get_Config+0x124>)
 80180c2:	801a      	strh	r2, [r3, #0]

		printf("\n___________________BUILD DETAILS___________________\n");
 80180c4:	4824      	ldr	r0, [pc, #144]	; (8018158 <Get_Config+0x128>)
 80180c6:	f00e fa83 	bl	80265d0 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 80180ca:	4924      	ldr	r1, [pc, #144]	; (801815c <Get_Config+0x12c>)
 80180cc:	4824      	ldr	r0, [pc, #144]	; (8018160 <Get_Config+0x130>)
 80180ce:	f00e f9e3 	bl	8026498 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 80180d2:	4b1f      	ldr	r3, [pc, #124]	; (8018150 <Get_Config+0x120>)
 80180d4:	881b      	ldrh	r3, [r3, #0]
 80180d6:	4619      	mov	r1, r3
 80180d8:	4822      	ldr	r0, [pc, #136]	; (8018164 <Get_Config+0x134>)
 80180da:	f00e f9dd 	bl	8026498 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 80180de:	4b22      	ldr	r3, [pc, #136]	; (8018168 <Get_Config+0x138>)
 80180e0:	881b      	ldrh	r3, [r3, #0]
 80180e2:	4619      	mov	r1, r3
 80180e4:	4821      	ldr	r0, [pc, #132]	; (801816c <Get_Config+0x13c>)
 80180e6:	f00e f9d7 	bl	8026498 <iprintf>
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 80180ea:	4b21      	ldr	r3, [pc, #132]	; (8018170 <Get_Config+0x140>)
 80180ec:	781b      	ldrb	r3, [r3, #0]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d121      	bne.n	8018136 <Get_Config+0x106>
 80180f2:	e01e      	b.n	8018132 <Get_Config+0x102>
		printf("\n EI Configuration Structure Size:%u\n",(sizeof(EI_t)));
 80180f4:	f44f 7156 	mov.w	r1, #856	; 0x358
 80180f8:	481e      	ldr	r0, [pc, #120]	; (8018174 <Get_Config+0x144>)
 80180fa:	f00e f9cd 	bl	8026498 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 80180fe:	4b1e      	ldr	r3, [pc, #120]	; (8018178 <Get_Config+0x148>)
 8018100:	4a10      	ldr	r2, [pc, #64]	; (8018144 <Get_Config+0x114>)
 8018102:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 8018104:	4b0e      	ldr	r3, [pc, #56]	; (8018140 <Get_Config+0x110>)
 8018106:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 801810a:	4619      	mov	r1, r3
 801810c:	4b0c      	ldr	r3, [pc, #48]	; (8018140 <Get_Config+0x110>)
 801810e:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8018112:	461a      	mov	r2, r3
 8018114:	4819      	ldr	r0, [pc, #100]	; (801817c <Get_Config+0x14c>)
 8018116:	f00e f9bf 	bl	8026498 <iprintf>
		printf("\nCheck for CRC:");
 801811a:	4819      	ldr	r0, [pc, #100]	; (8018180 <Get_Config+0x150>)
 801811c:	f00e f9bc 	bl	8026498 <iprintf>
		gucFlagUpdate =3;
 8018120:	4b18      	ldr	r3, [pc, #96]	; (8018184 <Get_Config+0x154>)
 8018122:	2203      	movs	r2, #3
 8018124:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8018126:	4818      	ldr	r0, [pc, #96]	; (8018188 <Get_Config+0x158>)
 8018128:	f00e fa52 	bl	80265d0 <puts>
			Data_Processing();
 801812c:	f000 f82e 	bl	801818c <Data_Processing>
 8018130:	e7fc      	b.n	801812c <Get_Config+0xfc>
	{
		readCanToStructs();
 8018132:	f7f9 fa75 	bl	8011620 <readCanToStructs>
	}
}
 8018136:	bf00      	nop
 8018138:	3710      	adds	r7, #16
 801813a:	46bd      	mov	sp, r7
 801813c:	bd80      	pop	{r7, pc}
 801813e:	bf00      	nop
 8018140:	20000bbc 	.word	0x20000bbc
 8018144:	20000bc0 	.word	0x20000bc0
 8018148:	20000504 	.word	0x20000504
 801814c:	20000f18 	.word	0x20000f18
 8018150:	2000bc6a 	.word	0x2000bc6a
 8018154:	20000bb4 	.word	0x20000bb4
 8018158:	0802bb0c 	.word	0x0802bb0c
 801815c:	20000505 	.word	0x20000505
 8018160:	0802bb44 	.word	0x0802bb44
 8018164:	0802bb58 	.word	0x0802bb58
 8018168:	2000bc68 	.word	0x2000bc68
 801816c:	0802bb68 	.word	0x0802bb68
 8018170:	20000fbf 	.word	0x20000fbf
 8018174:	0802bb7c 	.word	0x0802bb7c
 8018178:	20000500 	.word	0x20000500
 801817c:	0802bba4 	.word	0x0802bba4
 8018180:	0802bbb8 	.word	0x0802bbb8
 8018184:	20000fbd 	.word	0x20000fbd
 8018188:	0802bbc8 	.word	0x0802bbc8

0801818c <Data_Processing>:


void Data_Processing(void)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 8018190:	4b0b      	ldr	r3, [pc, #44]	; (80181c0 <Data_Processing+0x34>)
 8018192:	781b      	ldrb	r3, [r3, #0]
 8018194:	2b03      	cmp	r3, #3
 8018196:	d10e      	bne.n	80181b6 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 8018198:	2000      	movs	r0, #0
 801819a:	f7f3 ff19 	bl	800bfd0 <CheckForRqst>
 801819e:	4603      	mov	r3, r0
 80181a0:	461a      	mov	r2, r3
 80181a2:	4b08      	ldr	r3, [pc, #32]	; (80181c4 <Data_Processing+0x38>)
 80181a4:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 80181a6:	4b07      	ldr	r3, [pc, #28]	; (80181c4 <Data_Processing+0x38>)
 80181a8:	781b      	ldrb	r3, [r3, #0]
 80181aa:	2b01      	cmp	r3, #1
 80181ac:	d105      	bne.n	80181ba <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 80181ae:	2000      	movs	r0, #0
 80181b0:	f000 f80a 	bl	80181c8 <AutoLoadDat>
		}
		break;
 80181b4:	e001      	b.n	80181ba <Data_Processing+0x2e>
	default:
		break;
 80181b6:	bf00      	nop
 80181b8:	e000      	b.n	80181bc <Data_Processing+0x30>
		break;
 80181ba:	bf00      	nop
	}
}
 80181bc:	bf00      	nop
 80181be:	bd80      	pop	{r7, pc}
 80181c0:	20000fbd 	.word	0x20000fbd
 80181c4:	20000fbe 	.word	0x20000fbe

080181c8 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b084      	sub	sp, #16
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	4603      	mov	r3, r0
 80181d0:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 80181d2:	2300      	movs	r3, #0
 80181d4:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 80181d6:	79fb      	ldrb	r3, [r7, #7]
 80181d8:	b29b      	uxth	r3, r3
 80181da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80181de:	4934      	ldr	r1, [pc, #208]	; (80182b0 <AutoLoadDat+0xe8>)
 80181e0:	4618      	mov	r0, r3
 80181e2:	f7f4 f89d 	bl	800c320 <ReadAndFormConfig>
 80181e6:	4603      	mov	r3, r0
 80181e8:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 80181ea:	4832      	ldr	r0, [pc, #200]	; (80182b4 <AutoLoadDat+0xec>)
 80181ec:	f004 fcb0 	bl	801cb50 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 80181f0:	7bbb      	ldrb	r3, [r7, #14]
 80181f2:	2b01      	cmp	r3, #1
 80181f4:	d921      	bls.n	801823a <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 80181f6:	4b30      	ldr	r3, [pc, #192]	; (80182b8 <AutoLoadDat+0xf0>)
 80181f8:	2200      	movs	r2, #0
 80181fa:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 80181fc:	4b2c      	ldr	r3, [pc, #176]	; (80182b0 <AutoLoadDat+0xe8>)
 80181fe:	785b      	ldrb	r3, [r3, #1]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d107      	bne.n	8018214 <AutoLoadDat+0x4c>
 8018204:	4b2a      	ldr	r3, [pc, #168]	; (80182b0 <AutoLoadDat+0xe8>)
 8018206:	789b      	ldrb	r3, [r3, #2]
 8018208:	2b01      	cmp	r3, #1
 801820a:	d103      	bne.n	8018214 <AutoLoadDat+0x4c>
 801820c:	4b28      	ldr	r3, [pc, #160]	; (80182b0 <AutoLoadDat+0xe8>)
 801820e:	78db      	ldrb	r3, [r3, #3]
 8018210:	2b04      	cmp	r3, #4
 8018212:	d003      	beq.n	801821c <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8018214:	4829      	ldr	r0, [pc, #164]	; (80182bc <AutoLoadDat+0xf4>)
 8018216:	f00e f9db 	bl	80265d0 <puts>
				return;
 801821a:	e046      	b.n	80182aa <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 801821c:	4b28      	ldr	r3, [pc, #160]	; (80182c0 <AutoLoadDat+0xf8>)
 801821e:	4a29      	ldr	r2, [pc, #164]	; (80182c4 <AutoLoadDat+0xfc>)
 8018220:	601a      	str	r2, [r3, #0]
			saveConfig();
 8018222:	f000 f85b 	bl	80182dc <saveConfig>
			gucFlagCheck =1;
 8018226:	4b28      	ldr	r3, [pc, #160]	; (80182c8 <AutoLoadDat+0x100>)
 8018228:	2201      	movs	r2, #1
 801822a:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 801822c:	4b27      	ldr	r3, [pc, #156]	; (80182cc <AutoLoadDat+0x104>)
 801822e:	2201      	movs	r2, #1
 8018230:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 8018232:	4827      	ldr	r0, [pc, #156]	; (80182d0 <AutoLoadDat+0x108>)
 8018234:	f00e f9cc 	bl	80265d0 <puts>
			break;
 8018238:	e037      	b.n	80182aa <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 801823a:	7bbb      	ldrb	r3, [r7, #14]
 801823c:	2b01      	cmp	r3, #1
 801823e:	d11b      	bne.n	8018278 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 8018240:	7bfb      	ldrb	r3, [r7, #15]
 8018242:	2b03      	cmp	r3, #3
 8018244:	d109      	bne.n	801825a <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 8018246:	4b1c      	ldr	r3, [pc, #112]	; (80182b8 <AutoLoadDat+0xf0>)
 8018248:	2200      	movs	r2, #0
 801824a:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 801824c:	79fb      	ldrb	r3, [r7, #7]
 801824e:	2203      	movs	r2, #3
 8018250:	2101      	movs	r1, #1
 8018252:	4618      	mov	r0, r3
 8018254:	f7f4 f818 	bl	800c288 <SendAck>
				break;
 8018258:	e027      	b.n	80182aa <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 801825a:	79fb      	ldrb	r3, [r7, #7]
 801825c:	2202      	movs	r2, #2
 801825e:	2101      	movs	r1, #1
 8018260:	4618      	mov	r0, r3
 8018262:	f7f4 f811 	bl	800c288 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 8018266:	f001 f90d 	bl	8019484 <HAL_GetTick>
 801826a:	4603      	mov	r3, r0
 801826c:	4a19      	ldr	r2, [pc, #100]	; (80182d4 <AutoLoadDat+0x10c>)
 801826e:	6013      	str	r3, [r2, #0]
			AckCount++;
 8018270:	7bfb      	ldrb	r3, [r7, #15]
 8018272:	3301      	adds	r3, #1
 8018274:	73fb      	strb	r3, [r7, #15]
 8018276:	e7ae      	b.n	80181d6 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 8018278:	f001 f904 	bl	8019484 <HAL_GetTick>
 801827c:	4602      	mov	r2, r0
 801827e:	4b15      	ldr	r3, [pc, #84]	; (80182d4 <AutoLoadDat+0x10c>)
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	1ad3      	subs	r3, r2, r3
 8018284:	2b00      	cmp	r3, #0
 8018286:	bfb8      	it	lt
 8018288:	425b      	neglt	r3, r3
 801828a:	f247 5230 	movw	r2, #30000	; 0x7530
 801828e:	4293      	cmp	r3, r2
 8018290:	dda1      	ble.n	80181d6 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 8018292:	4b09      	ldr	r3, [pc, #36]	; (80182b8 <AutoLoadDat+0xf0>)
 8018294:	2200      	movs	r2, #0
 8018296:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 8018298:	480f      	ldr	r0, [pc, #60]	; (80182d8 <AutoLoadDat+0x110>)
 801829a:	f00e f999 	bl	80265d0 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 801829e:	79fb      	ldrb	r3, [r7, #7]
 80182a0:	2205      	movs	r2, #5
 80182a2:	2101      	movs	r1, #1
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7f3 ffef 	bl	800c288 <SendAck>
				break;
			}
		}
	}
}
 80182aa:	3710      	adds	r7, #16
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}
 80182b0:	20000bbc 	.word	0x20000bbc
 80182b4:	2000b3c8 	.word	0x2000b3c8
 80182b8:	20000fbe 	.word	0x20000fbe
 80182bc:	0802bc08 	.word	0x0802bc08
 80182c0:	20000500 	.word	0x20000500
 80182c4:	20000bc0 	.word	0x20000bc0
 80182c8:	2000bc54 	.word	0x2000bc54
 80182cc:	2000bc55 	.word	0x2000bc55
 80182d0:	0802bc20 	.word	0x0802bc20
 80182d4:	20000fc0 	.word	0x20000fc0
 80182d8:	0802bc30 	.word	0x0802bc30

080182dc <saveConfig>:

unsigned char saveConfig(void)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b084      	sub	sp, #16
 80182e0:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 80182e2:	2300      	movs	r3, #0
 80182e4:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 80182e6:	4825      	ldr	r0, [pc, #148]	; (801837c <saveConfig+0xa0>)
 80182e8:	f00e f972 	bl	80265d0 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 80182ec:	2300      	movs	r3, #0
 80182ee:	60fb      	str	r3, [r7, #12]
 80182f0:	e011      	b.n	8018316 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	031b      	lsls	r3, r3, #12
 80182f6:	4619      	mov	r1, r3
 80182f8:	2001      	movs	r0, #1
 80182fa:	f7ff fd09 	bl	8017d10 <SPI_MemoryEraseBySector>
 80182fe:	4603      	mov	r3, r0
 8018300:	2b00      	cmp	r3, #0
 8018302:	d005      	beq.n	8018310 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8018304:	481e      	ldr	r0, [pc, #120]	; (8018380 <saveConfig+0xa4>)
 8018306:	f004 fc23 	bl	801cb50 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 801830a:	481e      	ldr	r0, [pc, #120]	; (8018384 <saveConfig+0xa8>)
 801830c:	f00e f960 	bl	80265d0 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	3301      	adds	r3, #1
 8018314:	60fb      	str	r3, [r7, #12]
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	2b05      	cmp	r3, #5
 801831a:	d9ea      	bls.n	80182f2 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 801831c:	f240 335f 	movw	r3, #863	; 0x35f
 8018320:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8018326:	2300      	movs	r3, #0
 8018328:	60fb      	str	r3, [r7, #12]
 801832a:	e01d      	b.n	8018368 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 801832c:	4814      	ldr	r0, [pc, #80]	; (8018380 <saveConfig+0xa4>)
 801832e:	f004 fc0f 	bl	801cb50 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 8018332:	68bb      	ldr	r3, [r7, #8]
 8018334:	2b1f      	cmp	r3, #31
 8018336:	d809      	bhi.n	801834c <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	b29a      	uxth	r2, r3
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	4912      	ldr	r1, [pc, #72]	; (8018388 <saveConfig+0xac>)
 8018340:	440b      	add	r3, r1
 8018342:	68f9      	ldr	r1, [r7, #12]
 8018344:	2001      	movs	r0, #1
 8018346:	f7ff fbc5 	bl	8017ad4 <SPI_WriteInFlash>
 801834a:	e00a      	b.n	8018362 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	4a0e      	ldr	r2, [pc, #56]	; (8018388 <saveConfig+0xac>)
 8018350:	4413      	add	r3, r2
 8018352:	2220      	movs	r2, #32
 8018354:	68f9      	ldr	r1, [r7, #12]
 8018356:	2001      	movs	r0, #1
 8018358:	f7ff fbbc 	bl	8017ad4 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	3b20      	subs	r3, #32
 8018360:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	3320      	adds	r3, #32
 8018366:	60fb      	str	r3, [r7, #12]
 8018368:	68fa      	ldr	r2, [r7, #12]
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	429a      	cmp	r2, r3
 801836e:	d3dd      	bcc.n	801832c <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 8018370:	4806      	ldr	r0, [pc, #24]	; (801838c <saveConfig+0xb0>)
 8018372:	f00e f891 	bl	8026498 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 8018376:	f7ff fad9 	bl	801792c <__NVIC_SystemReset>
 801837a:	bf00      	nop
 801837c:	0802bc4c 	.word	0x0802bc4c
 8018380:	2000b3c8 	.word	0x2000b3c8
 8018384:	0802bc58 	.word	0x0802bc58
 8018388:	20000bbc 	.word	0x20000bbc
 801838c:	0802bc6c 	.word	0x0802bc6c

08018390 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8018394:	4b14      	ldr	r3, [pc, #80]	; (80183e8 <Print_BuildDat_Details+0x58>)
 8018396:	781b      	ldrb	r3, [r3, #0]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d022      	beq.n	80183e2 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 801839c:	4b13      	ldr	r3, [pc, #76]	; (80183ec <Print_BuildDat_Details+0x5c>)
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7f7 fde9 	bl	800ff78 <HAL_Elaps_Ticks>
 80183a6:	4603      	mov	r3, r0
 80183a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80183ac:	4293      	cmp	r3, r2
 80183ae:	d919      	bls.n	80183e4 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 80183b0:	480f      	ldr	r0, [pc, #60]	; (80183f0 <Print_BuildDat_Details+0x60>)
 80183b2:	f00e f90d 	bl	80265d0 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 80183b6:	490f      	ldr	r1, [pc, #60]	; (80183f4 <Print_BuildDat_Details+0x64>)
 80183b8:	480f      	ldr	r0, [pc, #60]	; (80183f8 <Print_BuildDat_Details+0x68>)
 80183ba:	f00e f86d 	bl	8026498 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 80183be:	4b0f      	ldr	r3, [pc, #60]	; (80183fc <Print_BuildDat_Details+0x6c>)
 80183c0:	881b      	ldrh	r3, [r3, #0]
 80183c2:	4619      	mov	r1, r3
 80183c4:	480e      	ldr	r0, [pc, #56]	; (8018400 <Print_BuildDat_Details+0x70>)
 80183c6:	f00e f867 	bl	8026498 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 80183ca:	4b0e      	ldr	r3, [pc, #56]	; (8018404 <Print_BuildDat_Details+0x74>)
 80183cc:	881b      	ldrh	r3, [r3, #0]
 80183ce:	4619      	mov	r1, r3
 80183d0:	480d      	ldr	r0, [pc, #52]	; (8018408 <Print_BuildDat_Details+0x78>)
 80183d2:	f00e f861 	bl	8026498 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 80183d6:	f001 f855 	bl	8019484 <HAL_GetTick>
 80183da:	4603      	mov	r3, r0
 80183dc:	4a03      	ldr	r2, [pc, #12]	; (80183ec <Print_BuildDat_Details+0x5c>)
 80183de:	6013      	str	r3, [r2, #0]
 80183e0:	e000      	b.n	80183e4 <Print_BuildDat_Details+0x54>
		return;
 80183e2:	bf00      	nop
	}
}
 80183e4:	bd80      	pop	{r7, pc}
 80183e6:	bf00      	nop
 80183e8:	20000bbb 	.word	0x20000bbb
 80183ec:	2000bcd0 	.word	0x2000bcd0
 80183f0:	0802bc88 	.word	0x0802bc88
 80183f4:	20000505 	.word	0x20000505
 80183f8:	0802bb44 	.word	0x0802bb44
 80183fc:	2000bc6a 	.word	0x2000bc6a
 8018400:	0802bb58 	.word	0x0802bb58
 8018404:	2000bc68 	.word	0x2000bc68
 8018408:	0802bb68 	.word	0x0802bb68

0801840c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b082      	sub	sp, #8
 8018410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8018412:	4b0f      	ldr	r3, [pc, #60]	; (8018450 <HAL_MspInit+0x44>)
 8018414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018416:	4a0e      	ldr	r2, [pc, #56]	; (8018450 <HAL_MspInit+0x44>)
 8018418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801841c:	6413      	str	r3, [r2, #64]	; 0x40
 801841e:	4b0c      	ldr	r3, [pc, #48]	; (8018450 <HAL_MspInit+0x44>)
 8018420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018426:	607b      	str	r3, [r7, #4]
 8018428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801842a:	4b09      	ldr	r3, [pc, #36]	; (8018450 <HAL_MspInit+0x44>)
 801842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801842e:	4a08      	ldr	r2, [pc, #32]	; (8018450 <HAL_MspInit+0x44>)
 8018430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018434:	6453      	str	r3, [r2, #68]	; 0x44
 8018436:	4b06      	ldr	r3, [pc, #24]	; (8018450 <HAL_MspInit+0x44>)
 8018438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801843a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801843e:	603b      	str	r3, [r7, #0]
 8018440:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8018442:	2004      	movs	r0, #4
 8018444:	f001 fff4 	bl	801a430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8018448:	bf00      	nop
 801844a:	3708      	adds	r7, #8
 801844c:	46bd      	mov	sp, r7
 801844e:	bd80      	pop	{r7, pc}
 8018450:	40023800 	.word	0x40023800

08018454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018454:	b480      	push	{r7}
 8018456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8018458:	e7fe      	b.n	8018458 <NMI_Handler+0x4>

0801845a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801845a:	b480      	push	{r7}
 801845c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801845e:	e7fe      	b.n	801845e <HardFault_Handler+0x4>

08018460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018460:	b480      	push	{r7}
 8018462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018464:	e7fe      	b.n	8018464 <MemManage_Handler+0x4>

08018466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018466:	b480      	push	{r7}
 8018468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801846a:	e7fe      	b.n	801846a <BusFault_Handler+0x4>

0801846c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801846c:	b480      	push	{r7}
 801846e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018470:	e7fe      	b.n	8018470 <UsageFault_Handler+0x4>

08018472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018472:	b480      	push	{r7}
 8018474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8018476:	bf00      	nop
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr

08018480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018480:	b480      	push	{r7}
 8018482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018484:	bf00      	nop
 8018486:	46bd      	mov	sp, r7
 8018488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848c:	4770      	bx	lr

0801848e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801848e:	b480      	push	{r7}
 8018490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8018492:	bf00      	nop
 8018494:	46bd      	mov	sp, r7
 8018496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801849a:	4770      	bx	lr

0801849c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80184a0:	f000 ffdc 	bl	801945c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80184a4:	bf00      	nop
 80184a6:	bd80      	pop	{r7, pc}

080184a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 80184ac:	2001      	movs	r0, #1
 80184ae:	f003 fced 	bl	801be8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80184b2:	bf00      	nop
 80184b4:	bd80      	pop	{r7, pc}

080184b6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80184b6:	b580      	push	{r7, lr}
 80184b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 80184ba:	2002      	movs	r0, #2
 80184bc:	f003 fce6 	bl	801be8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80184c0:	bf00      	nop
 80184c2:	bd80      	pop	{r7, pc}

080184c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80184c8:	4802      	ldr	r0, [pc, #8]	; (80184d4 <TIM4_IRQHandler+0x10>)
 80184ca:	f006 fc03 	bl	801ecd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80184ce:	bf00      	nop
 80184d0:	bd80      	pop	{r7, pc}
 80184d2:	bf00      	nop
 80184d4:	2000bcd8 	.word	0x2000bcd8

080184d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80184dc:	4802      	ldr	r0, [pc, #8]	; (80184e8 <USART1_IRQHandler+0x10>)
 80184de:	f006 fe1d 	bl	801f11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80184e2:	bf00      	nop
 80184e4:	bd80      	pop	{r7, pc}
 80184e6:	bf00      	nop
 80184e8:	2000dc10 	.word	0x2000dc10

080184ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80184f0:	4802      	ldr	r0, [pc, #8]	; (80184fc <TIM5_IRQHandler+0x10>)
 80184f2:	f006 fbef 	bl	801ecd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80184f6:	bf00      	nop
 80184f8:	bd80      	pop	{r7, pc}
 80184fa:	bf00      	nop
 80184fc:	2000bd94 	.word	0x2000bd94

08018500 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8018504:	4802      	ldr	r0, [pc, #8]	; (8018510 <UART4_IRQHandler+0x10>)
 8018506:	f006 fe09 	bl	801f11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 801850a:	bf00      	nop
 801850c:	bd80      	pop	{r7, pc}
 801850e:	bf00      	nop
 8018510:	2000d9e8 	.word	0x2000d9e8

08018514 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8018518:	4802      	ldr	r0, [pc, #8]	; (8018524 <UART5_IRQHandler+0x10>)
 801851a:	f006 fdff 	bl	801f11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 801851e:	bf00      	nop
 8018520:	bd80      	pop	{r7, pc}
 8018522:	bf00      	nop
 8018524:	2000daa0 	.word	0x2000daa0

08018528 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8018528:	b580      	push	{r7, lr}
 801852a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801852c:	4802      	ldr	r0, [pc, #8]	; (8018538 <TIM6_DAC_IRQHandler+0x10>)
 801852e:	f006 fbd1 	bl	801ecd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8018532:	bf00      	nop
 8018534:	bd80      	pop	{r7, pc}
 8018536:	bf00      	nop
 8018538:	2000be50 	.word	0x2000be50

0801853c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8018540:	4802      	ldr	r0, [pc, #8]	; (801854c <TIM7_IRQHandler+0x10>)
 8018542:	f006 fbc7 	bl	801ecd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8018546:	bf00      	nop
 8018548:	bd80      	pop	{r7, pc}
 801854a:	bf00      	nop
 801854c:	2000bf0c 	.word	0x2000bf0c

08018550 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8018554:	4802      	ldr	r0, [pc, #8]	; (8018560 <ETH_IRQHandler+0x10>)
 8018556:	f002 fbbb 	bl	801acd0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801855a:	bf00      	nop
 801855c:	bd80      	pop	{r7, pc}
 801855e:	bf00      	nop
 8018560:	20012624 	.word	0x20012624

08018564 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8018568:	4802      	ldr	r0, [pc, #8]	; (8018574 <CAN2_RX0_IRQHandler+0x10>)
 801856a:	f001 fc5d 	bl	8019e28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 801856e:	bf00      	nop
 8018570:	bd80      	pop	{r7, pc}
 8018572:	bf00      	nop
 8018574:	2000b244 	.word	0x2000b244

08018578 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8018578:	b580      	push	{r7, lr}
 801857a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 801857c:	4802      	ldr	r0, [pc, #8]	; (8018588 <CAN2_RX1_IRQHandler+0x10>)
 801857e:	f001 fc53 	bl	8019e28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8018582:	bf00      	nop
 8018584:	bd80      	pop	{r7, pc}
 8018586:	bf00      	nop
 8018588:	2000b244 	.word	0x2000b244

0801858c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8018590:	4802      	ldr	r0, [pc, #8]	; (801859c <UART7_IRQHandler+0x10>)
 8018592:	f006 fdc3 	bl	801f11c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8018596:	bf00      	nop
 8018598:	bd80      	pop	{r7, pc}
 801859a:	bf00      	nop
 801859c:	2000db58 	.word	0x2000db58

080185a0 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80185a4:	4802      	ldr	r0, [pc, #8]	; (80185b0 <CAN3_RX0_IRQHandler+0x10>)
 80185a6:	f001 fc3f 	bl	8019e28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80185aa:	bf00      	nop
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	2000b2a8 	.word	0x2000b2a8

080185b4 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80185b8:	4802      	ldr	r0, [pc, #8]	; (80185c4 <CAN3_RX1_IRQHandler+0x10>)
 80185ba:	f001 fc35 	bl	8019e28 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80185be:	bf00      	nop
 80185c0:	bd80      	pop	{r7, pc}
 80185c2:	bf00      	nop
 80185c4:	2000b2a8 	.word	0x2000b2a8

080185c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80185c8:	b480      	push	{r7}
 80185ca:	af00      	add	r7, sp, #0
	return 1;
 80185cc:	2301      	movs	r3, #1
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	46bd      	mov	sp, r7
 80185d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d6:	4770      	bx	lr

080185d8 <_kill>:

int _kill(int pid, int sig)
{
 80185d8:	b480      	push	{r7}
 80185da:	b083      	sub	sp, #12
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80185e2:	4b05      	ldr	r3, [pc, #20]	; (80185f8 <_kill+0x20>)
 80185e4:	2216      	movs	r2, #22
 80185e6:	601a      	str	r2, [r3, #0]
	return -1;
 80185e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185ec:	4618      	mov	r0, r3
 80185ee:	370c      	adds	r7, #12
 80185f0:	46bd      	mov	sp, r7
 80185f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f6:	4770      	bx	lr
 80185f8:	20016268 	.word	0x20016268

080185fc <_exit>:

void _exit (int status)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8018604:	f04f 31ff 	mov.w	r1, #4294967295
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f7ff ffe5 	bl	80185d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 801860e:	e7fe      	b.n	801860e <_exit+0x12>

08018610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b086      	sub	sp, #24
 8018614:	af00      	add	r7, sp, #0
 8018616:	60f8      	str	r0, [r7, #12]
 8018618:	60b9      	str	r1, [r7, #8]
 801861a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801861c:	2300      	movs	r3, #0
 801861e:	617b      	str	r3, [r7, #20]
 8018620:	e00a      	b.n	8018638 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8018622:	f3af 8000 	nop.w
 8018626:	4601      	mov	r1, r0
 8018628:	68bb      	ldr	r3, [r7, #8]
 801862a:	1c5a      	adds	r2, r3, #1
 801862c:	60ba      	str	r2, [r7, #8]
 801862e:	b2ca      	uxtb	r2, r1
 8018630:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	3301      	adds	r3, #1
 8018636:	617b      	str	r3, [r7, #20]
 8018638:	697a      	ldr	r2, [r7, #20]
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	429a      	cmp	r2, r3
 801863e:	dbf0      	blt.n	8018622 <_read+0x12>
	}

return len;
 8018640:	687b      	ldr	r3, [r7, #4]
}
 8018642:	4618      	mov	r0, r3
 8018644:	3718      	adds	r7, #24
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}

0801864a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801864a:	b580      	push	{r7, lr}
 801864c:	b086      	sub	sp, #24
 801864e:	af00      	add	r7, sp, #0
 8018650:	60f8      	str	r0, [r7, #12]
 8018652:	60b9      	str	r1, [r7, #8]
 8018654:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018656:	2300      	movs	r3, #0
 8018658:	617b      	str	r3, [r7, #20]
 801865a:	e009      	b.n	8018670 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801865c:	68bb      	ldr	r3, [r7, #8]
 801865e:	1c5a      	adds	r2, r3, #1
 8018660:	60ba      	str	r2, [r7, #8]
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	4618      	mov	r0, r3
 8018666:	f7e8 fa15 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801866a:	697b      	ldr	r3, [r7, #20]
 801866c:	3301      	adds	r3, #1
 801866e:	617b      	str	r3, [r7, #20]
 8018670:	697a      	ldr	r2, [r7, #20]
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	429a      	cmp	r2, r3
 8018676:	dbf1      	blt.n	801865c <_write+0x12>
	}
	return len;
 8018678:	687b      	ldr	r3, [r7, #4]
}
 801867a:	4618      	mov	r0, r3
 801867c:	3718      	adds	r7, #24
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}

08018682 <_close>:

int _close(int file)
{
 8018682:	b480      	push	{r7}
 8018684:	b083      	sub	sp, #12
 8018686:	af00      	add	r7, sp, #0
 8018688:	6078      	str	r0, [r7, #4]
	return -1;
 801868a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801868e:	4618      	mov	r0, r3
 8018690:	370c      	adds	r7, #12
 8018692:	46bd      	mov	sp, r7
 8018694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018698:	4770      	bx	lr

0801869a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801869a:	b480      	push	{r7}
 801869c:	b083      	sub	sp, #12
 801869e:	af00      	add	r7, sp, #0
 80186a0:	6078      	str	r0, [r7, #4]
 80186a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80186a4:	683b      	ldr	r3, [r7, #0]
 80186a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80186aa:	605a      	str	r2, [r3, #4]
	return 0;
 80186ac:	2300      	movs	r3, #0
}
 80186ae:	4618      	mov	r0, r3
 80186b0:	370c      	adds	r7, #12
 80186b2:	46bd      	mov	sp, r7
 80186b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b8:	4770      	bx	lr

080186ba <_isatty>:

int _isatty(int file)
{
 80186ba:	b480      	push	{r7}
 80186bc:	b083      	sub	sp, #12
 80186be:	af00      	add	r7, sp, #0
 80186c0:	6078      	str	r0, [r7, #4]
	return 1;
 80186c2:	2301      	movs	r3, #1
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	370c      	adds	r7, #12
 80186c8:	46bd      	mov	sp, r7
 80186ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ce:	4770      	bx	lr

080186d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80186d0:	b480      	push	{r7}
 80186d2:	b085      	sub	sp, #20
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	60f8      	str	r0, [r7, #12]
 80186d8:	60b9      	str	r1, [r7, #8]
 80186da:	607a      	str	r2, [r7, #4]
	return 0;
 80186dc:	2300      	movs	r3, #0
}
 80186de:	4618      	mov	r0, r3
 80186e0:	3714      	adds	r7, #20
 80186e2:	46bd      	mov	sp, r7
 80186e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e8:	4770      	bx	lr
	...

080186ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80186ec:	b480      	push	{r7}
 80186ee:	b087      	sub	sp, #28
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80186f4:	4a14      	ldr	r2, [pc, #80]	; (8018748 <_sbrk+0x5c>)
 80186f6:	4b15      	ldr	r3, [pc, #84]	; (801874c <_sbrk+0x60>)
 80186f8:	1ad3      	subs	r3, r2, r3
 80186fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8018700:	4b13      	ldr	r3, [pc, #76]	; (8018750 <_sbrk+0x64>)
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d102      	bne.n	801870e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018708:	4b11      	ldr	r3, [pc, #68]	; (8018750 <_sbrk+0x64>)
 801870a:	4a12      	ldr	r2, [pc, #72]	; (8018754 <_sbrk+0x68>)
 801870c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801870e:	4b10      	ldr	r3, [pc, #64]	; (8018750 <_sbrk+0x64>)
 8018710:	681a      	ldr	r2, [r3, #0]
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	4413      	add	r3, r2
 8018716:	693a      	ldr	r2, [r7, #16]
 8018718:	429a      	cmp	r2, r3
 801871a:	d205      	bcs.n	8018728 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 801871c:	4b0e      	ldr	r3, [pc, #56]	; (8018758 <_sbrk+0x6c>)
 801871e:	220c      	movs	r2, #12
 8018720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8018722:	f04f 33ff 	mov.w	r3, #4294967295
 8018726:	e009      	b.n	801873c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8018728:	4b09      	ldr	r3, [pc, #36]	; (8018750 <_sbrk+0x64>)
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801872e:	4b08      	ldr	r3, [pc, #32]	; (8018750 <_sbrk+0x64>)
 8018730:	681a      	ldr	r2, [r3, #0]
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	4413      	add	r3, r2
 8018736:	4a06      	ldr	r2, [pc, #24]	; (8018750 <_sbrk+0x64>)
 8018738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801873a:	68fb      	ldr	r3, [r7, #12]
}
 801873c:	4618      	mov	r0, r3
 801873e:	371c      	adds	r7, #28
 8018740:	46bd      	mov	sp, r7
 8018742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018746:	4770      	bx	lr
 8018748:	20080000 	.word	0x20080000
 801874c:	00000400 	.word	0x00000400
 8018750:	2000bcd4 	.word	0x2000bcd4
 8018754:	20016270 	.word	0x20016270
 8018758:	20016268 	.word	0x20016268

0801875c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801875c:	b480      	push	{r7}
 801875e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018760:	4b06      	ldr	r3, [pc, #24]	; (801877c <SystemInit+0x20>)
 8018762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018766:	4a05      	ldr	r2, [pc, #20]	; (801877c <SystemInit+0x20>)
 8018768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801876c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018770:	bf00      	nop
 8018772:	46bd      	mov	sp, r7
 8018774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018778:	4770      	bx	lr
 801877a:	bf00      	nop
 801877c:	e000ed00 	.word	0xe000ed00

08018780 <MX_UART5_Init>:
  /* USER CODE END UART4_Init 2 */

}
/* UART5 init function */
void MX_UART5_Init(void)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8018784:	4b16      	ldr	r3, [pc, #88]	; (80187e0 <MX_UART5_Init+0x60>)
 8018786:	4a17      	ldr	r2, [pc, #92]	; (80187e4 <MX_UART5_Init+0x64>)
 8018788:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 801878a:	4b15      	ldr	r3, [pc, #84]	; (80187e0 <MX_UART5_Init+0x60>)
 801878c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8018790:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8018792:	4b13      	ldr	r3, [pc, #76]	; (80187e0 <MX_UART5_Init+0x60>)
 8018794:	2200      	movs	r2, #0
 8018796:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8018798:	4b11      	ldr	r3, [pc, #68]	; (80187e0 <MX_UART5_Init+0x60>)
 801879a:	2200      	movs	r2, #0
 801879c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 801879e:	4b10      	ldr	r3, [pc, #64]	; (80187e0 <MX_UART5_Init+0x60>)
 80187a0:	2200      	movs	r2, #0
 80187a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80187a4:	4b0e      	ldr	r3, [pc, #56]	; (80187e0 <MX_UART5_Init+0x60>)
 80187a6:	220c      	movs	r2, #12
 80187a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80187aa:	4b0d      	ldr	r3, [pc, #52]	; (80187e0 <MX_UART5_Init+0x60>)
 80187ac:	2200      	movs	r2, #0
 80187ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80187b0:	4b0b      	ldr	r3, [pc, #44]	; (80187e0 <MX_UART5_Init+0x60>)
 80187b2:	2200      	movs	r2, #0
 80187b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80187b6:	4b0a      	ldr	r3, [pc, #40]	; (80187e0 <MX_UART5_Init+0x60>)
 80187b8:	2200      	movs	r2, #0
 80187ba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80187bc:	4b08      	ldr	r3, [pc, #32]	; (80187e0 <MX_UART5_Init+0x60>)
 80187be:	2200      	movs	r2, #0
 80187c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80187c2:	4807      	ldr	r0, [pc, #28]	; (80187e0 <MX_UART5_Init+0x60>)
 80187c4:	f006 fbc8 	bl	801ef58 <HAL_UART_Init>
 80187c8:	4603      	mov	r3, r0
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d001      	beq.n	80187d2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80187ce:	f7ff f85f 	bl	8017890 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80187d2:	2280      	movs	r2, #128	; 0x80
 80187d4:	4904      	ldr	r1, [pc, #16]	; (80187e8 <MX_UART5_Init+0x68>)
 80187d6:	4802      	ldr	r0, [pc, #8]	; (80187e0 <MX_UART5_Init+0x60>)
 80187d8:	f007 ff2a 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END UART5_Init 2 */

}
 80187dc:	bf00      	nop
 80187de:	bd80      	pop	{r7, pc}
 80187e0:	2000daa0 	.word	0x2000daa0
 80187e4:	40005000 	.word	0x40005000
 80187e8:	2000d868 	.word	0x2000d868

080187ec <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80187f0:	4b16      	ldr	r3, [pc, #88]	; (801884c <MX_USART1_UART_Init+0x60>)
 80187f2:	4a17      	ldr	r2, [pc, #92]	; (8018850 <MX_USART1_UART_Init+0x64>)
 80187f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80187f6:	4b15      	ldr	r3, [pc, #84]	; (801884c <MX_USART1_UART_Init+0x60>)
 80187f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80187fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80187fe:	4b13      	ldr	r3, [pc, #76]	; (801884c <MX_USART1_UART_Init+0x60>)
 8018800:	2200      	movs	r2, #0
 8018802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018804:	4b11      	ldr	r3, [pc, #68]	; (801884c <MX_USART1_UART_Init+0x60>)
 8018806:	2200      	movs	r2, #0
 8018808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801880a:	4b10      	ldr	r3, [pc, #64]	; (801884c <MX_USART1_UART_Init+0x60>)
 801880c:	2200      	movs	r2, #0
 801880e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018810:	4b0e      	ldr	r3, [pc, #56]	; (801884c <MX_USART1_UART_Init+0x60>)
 8018812:	220c      	movs	r2, #12
 8018814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018816:	4b0d      	ldr	r3, [pc, #52]	; (801884c <MX_USART1_UART_Init+0x60>)
 8018818:	2200      	movs	r2, #0
 801881a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801881c:	4b0b      	ldr	r3, [pc, #44]	; (801884c <MX_USART1_UART_Init+0x60>)
 801881e:	2200      	movs	r2, #0
 8018820:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018822:	4b0a      	ldr	r3, [pc, #40]	; (801884c <MX_USART1_UART_Init+0x60>)
 8018824:	2200      	movs	r2, #0
 8018826:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018828:	4b08      	ldr	r3, [pc, #32]	; (801884c <MX_USART1_UART_Init+0x60>)
 801882a:	2200      	movs	r2, #0
 801882c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801882e:	4807      	ldr	r0, [pc, #28]	; (801884c <MX_USART1_UART_Init+0x60>)
 8018830:	f006 fb92 	bl	801ef58 <HAL_UART_Init>
 8018834:	4603      	mov	r3, r0
 8018836:	2b00      	cmp	r3, #0
 8018838:	d001      	beq.n	801883e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801883a:	f7ff f829 	bl	8017890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801883e:	2280      	movs	r2, #128	; 0x80
 8018840:	4904      	ldr	r1, [pc, #16]	; (8018854 <MX_USART1_UART_Init+0x68>)
 8018842:	4802      	ldr	r0, [pc, #8]	; (801884c <MX_USART1_UART_Init+0x60>)
 8018844:	f007 fef4 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8018848:	bf00      	nop
 801884a:	bd80      	pop	{r7, pc}
 801884c:	2000dc10 	.word	0x2000dc10
 8018850:	40011000 	.word	0x40011000
 8018854:	2000d7e8 	.word	0x2000d7e8

08018858 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b0b4      	sub	sp, #208	; 0xd0
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018860:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018864:	2200      	movs	r2, #0
 8018866:	601a      	str	r2, [r3, #0]
 8018868:	605a      	str	r2, [r3, #4]
 801886a:	609a      	str	r2, [r3, #8]
 801886c:	60da      	str	r2, [r3, #12]
 801886e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018874:	2290      	movs	r2, #144	; 0x90
 8018876:	2100      	movs	r1, #0
 8018878:	4618      	mov	r0, r3
 801887a:	f00d fd25 	bl	80262c8 <memset>
  if(uartHandle->Instance==UART4)
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	4aa7      	ldr	r2, [pc, #668]	; (8018b20 <HAL_UART_MspInit+0x2c8>)
 8018884:	4293      	cmp	r3, r2
 8018886:	d145      	bne.n	8018914 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8018888:	f44f 7300 	mov.w	r3, #512	; 0x200
 801888c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 801888e:	2300      	movs	r3, #0
 8018890:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018896:	4618      	mov	r0, r3
 8018898:	f004 fdfe 	bl	801d498 <HAL_RCCEx_PeriphCLKConfig>
 801889c:	4603      	mov	r3, r0
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d001      	beq.n	80188a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80188a2:	f7fe fff5 	bl	8017890 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80188a6:	4b9f      	ldr	r3, [pc, #636]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 80188a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188aa:	4a9e      	ldr	r2, [pc, #632]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 80188ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80188b0:	6413      	str	r3, [r2, #64]	; 0x40
 80188b2:	4b9c      	ldr	r3, [pc, #624]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 80188b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80188ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80188bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80188be:	4b99      	ldr	r3, [pc, #612]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 80188c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188c2:	4a98      	ldr	r2, [pc, #608]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 80188c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188c8:	6313      	str	r3, [r2, #48]	; 0x30
 80188ca:	4b96      	ldr	r3, [pc, #600]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 80188cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80188d2:	627b      	str	r3, [r7, #36]	; 0x24
 80188d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 80188d6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80188da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80188de:	2302      	movs	r3, #2
 80188e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80188e4:	2300      	movs	r3, #0
 80188e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80188ea:	2303      	movs	r3, #3
 80188ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80188f0:	2308      	movs	r3, #8
 80188f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80188f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80188fa:	4619      	mov	r1, r3
 80188fc:	488a      	ldr	r0, [pc, #552]	; (8018b28 <HAL_UART_MspInit+0x2d0>)
 80188fe:	f003 f8cd 	bl	801ba9c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8018902:	2200      	movs	r2, #0
 8018904:	2105      	movs	r1, #5
 8018906:	2034      	movs	r0, #52	; 0x34
 8018908:	f001 fd9d 	bl	801a446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 801890c:	2034      	movs	r0, #52	; 0x34
 801890e:	f001 fdb6 	bl	801a47e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018912:	e100      	b.n	8018b16 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	4a84      	ldr	r2, [pc, #528]	; (8018b2c <HAL_UART_MspInit+0x2d4>)
 801891a:	4293      	cmp	r3, r2
 801891c:	d167      	bne.n	80189ee <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 801891e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018922:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8018924:	2300      	movs	r3, #0
 8018926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801892a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801892e:	4618      	mov	r0, r3
 8018930:	f004 fdb2 	bl	801d498 <HAL_RCCEx_PeriphCLKConfig>
 8018934:	4603      	mov	r3, r0
 8018936:	2b00      	cmp	r3, #0
 8018938:	d001      	beq.n	801893e <HAL_UART_MspInit+0xe6>
      Error_Handler();
 801893a:	f7fe ffa9 	bl	8017890 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 801893e:	4b79      	ldr	r3, [pc, #484]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018942:	4a78      	ldr	r2, [pc, #480]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018948:	6413      	str	r3, [r2, #64]	; 0x40
 801894a:	4b76      	ldr	r3, [pc, #472]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 801894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801894e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018952:	623b      	str	r3, [r7, #32]
 8018954:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018956:	4b73      	ldr	r3, [pc, #460]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801895a:	4a72      	ldr	r2, [pc, #456]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 801895c:	f043 0308 	orr.w	r3, r3, #8
 8018960:	6313      	str	r3, [r2, #48]	; 0x30
 8018962:	4b70      	ldr	r3, [pc, #448]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018966:	f003 0308 	and.w	r3, r3, #8
 801896a:	61fb      	str	r3, [r7, #28]
 801896c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801896e:	4b6d      	ldr	r3, [pc, #436]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018972:	4a6c      	ldr	r2, [pc, #432]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018974:	f043 0302 	orr.w	r3, r3, #2
 8018978:	6313      	str	r3, [r2, #48]	; 0x30
 801897a:	4b6a      	ldr	r3, [pc, #424]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 801897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801897e:	f003 0302 	and.w	r3, r3, #2
 8018982:	61bb      	str	r3, [r7, #24]
 8018984:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8018986:	2304      	movs	r3, #4
 8018988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801898c:	2302      	movs	r3, #2
 801898e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018992:	2300      	movs	r3, #0
 8018994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018998:	2303      	movs	r3, #3
 801899a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801899e:	2308      	movs	r3, #8
 80189a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80189a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80189a8:	4619      	mov	r1, r3
 80189aa:	4861      	ldr	r0, [pc, #388]	; (8018b30 <HAL_UART_MspInit+0x2d8>)
 80189ac:	f003 f876 	bl	801ba9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 80189b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80189b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80189b8:	2302      	movs	r3, #2
 80189ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80189be:	2300      	movs	r3, #0
 80189c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80189c4:	2303      	movs	r3, #3
 80189c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 80189ca:	2307      	movs	r3, #7
 80189cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80189d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80189d4:	4619      	mov	r1, r3
 80189d6:	4857      	ldr	r0, [pc, #348]	; (8018b34 <HAL_UART_MspInit+0x2dc>)
 80189d8:	f003 f860 	bl	801ba9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80189dc:	2200      	movs	r2, #0
 80189de:	2105      	movs	r1, #5
 80189e0:	2035      	movs	r0, #53	; 0x35
 80189e2:	f001 fd30 	bl	801a446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80189e6:	2035      	movs	r0, #53	; 0x35
 80189e8:	f001 fd49 	bl	801a47e <HAL_NVIC_EnableIRQ>
}
 80189ec:	e093      	b.n	8018b16 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	4a51      	ldr	r2, [pc, #324]	; (8018b38 <HAL_UART_MspInit+0x2e0>)
 80189f4:	4293      	cmp	r3, r2
 80189f6:	d145      	bne.n	8018a84 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80189f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80189fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80189fe:	2300      	movs	r3, #0
 8018a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f004 fd45 	bl	801d498 <HAL_RCCEx_PeriphCLKConfig>
 8018a0e:	4603      	mov	r3, r0
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d001      	beq.n	8018a18 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8018a14:	f7fe ff3c 	bl	8017890 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8018a18:	4b42      	ldr	r3, [pc, #264]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a1c:	4a41      	ldr	r2, [pc, #260]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018a1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018a22:	6413      	str	r3, [r2, #64]	; 0x40
 8018a24:	4b3f      	ldr	r3, [pc, #252]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8018a2c:	617b      	str	r3, [r7, #20]
 8018a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8018a30:	4b3c      	ldr	r3, [pc, #240]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a34:	4a3b      	ldr	r2, [pc, #236]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018a36:	f043 0320 	orr.w	r3, r3, #32
 8018a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8018a3c:	4b39      	ldr	r3, [pc, #228]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a40:	f003 0320 	and.w	r3, r3, #32
 8018a44:	613b      	str	r3, [r7, #16]
 8018a46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8018a48:	23c0      	movs	r3, #192	; 0xc0
 8018a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a4e:	2302      	movs	r3, #2
 8018a50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a54:	2300      	movs	r3, #0
 8018a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018a5a:	2303      	movs	r3, #3
 8018a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8018a60:	2308      	movs	r3, #8
 8018a62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018a66:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018a6a:	4619      	mov	r1, r3
 8018a6c:	4833      	ldr	r0, [pc, #204]	; (8018b3c <HAL_UART_MspInit+0x2e4>)
 8018a6e:	f003 f815 	bl	801ba9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8018a72:	2200      	movs	r2, #0
 8018a74:	2105      	movs	r1, #5
 8018a76:	2052      	movs	r0, #82	; 0x52
 8018a78:	f001 fce5 	bl	801a446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8018a7c:	2052      	movs	r0, #82	; 0x52
 8018a7e:	f001 fcfe 	bl	801a47e <HAL_NVIC_EnableIRQ>
}
 8018a82:	e048      	b.n	8018b16 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	4a2d      	ldr	r2, [pc, #180]	; (8018b40 <HAL_UART_MspInit+0x2e8>)
 8018a8a:	4293      	cmp	r3, r2
 8018a8c:	d143      	bne.n	8018b16 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8018a8e:	2340      	movs	r3, #64	; 0x40
 8018a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8018a92:	2300      	movs	r3, #0
 8018a94:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f004 fcfc 	bl	801d498 <HAL_RCCEx_PeriphCLKConfig>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d001      	beq.n	8018aaa <HAL_UART_MspInit+0x252>
      Error_Handler();
 8018aa6:	f7fe fef3 	bl	8017890 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8018aaa:	4b1e      	ldr	r3, [pc, #120]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018aae:	4a1d      	ldr	r2, [pc, #116]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018ab0:	f043 0310 	orr.w	r3, r3, #16
 8018ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8018ab6:	4b1b      	ldr	r3, [pc, #108]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018aba:	f003 0310 	and.w	r3, r3, #16
 8018abe:	60fb      	str	r3, [r7, #12]
 8018ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018ac2:	4b18      	ldr	r3, [pc, #96]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ac6:	4a17      	ldr	r2, [pc, #92]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018ac8:	f043 0301 	orr.w	r3, r3, #1
 8018acc:	6313      	str	r3, [r2, #48]	; 0x30
 8018ace:	4b15      	ldr	r3, [pc, #84]	; (8018b24 <HAL_UART_MspInit+0x2cc>)
 8018ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ad2:	f003 0301 	and.w	r3, r3, #1
 8018ad6:	60bb      	str	r3, [r7, #8]
 8018ad8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8018ada:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8018ade:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ae2:	2302      	movs	r3, #2
 8018ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ae8:	2300      	movs	r3, #0
 8018aea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018aee:	2303      	movs	r3, #3
 8018af0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018af4:	2307      	movs	r3, #7
 8018af6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018afa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018afe:	4619      	mov	r1, r3
 8018b00:	4810      	ldr	r0, [pc, #64]	; (8018b44 <HAL_UART_MspInit+0x2ec>)
 8018b02:	f002 ffcb 	bl	801ba9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8018b06:	2200      	movs	r2, #0
 8018b08:	2107      	movs	r1, #7
 8018b0a:	2025      	movs	r0, #37	; 0x25
 8018b0c:	f001 fc9b 	bl	801a446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8018b10:	2025      	movs	r0, #37	; 0x25
 8018b12:	f001 fcb4 	bl	801a47e <HAL_NVIC_EnableIRQ>
}
 8018b16:	bf00      	nop
 8018b18:	37d0      	adds	r7, #208	; 0xd0
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd80      	pop	{r7, pc}
 8018b1e:	bf00      	nop
 8018b20:	40004c00 	.word	0x40004c00
 8018b24:	40023800 	.word	0x40023800
 8018b28:	40021c00 	.word	0x40021c00
 8018b2c:	40005000 	.word	0x40005000
 8018b30:	40020c00 	.word	0x40020c00
 8018b34:	40020400 	.word	0x40020400
 8018b38:	40007800 	.word	0x40007800
 8018b3c:	40021400 	.word	0x40021400
 8018b40:	40011000 	.word	0x40011000
 8018b44:	40020000 	.word	0x40020000

08018b48 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b082      	sub	sp, #8
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8018b50:	4b17      	ldr	r3, [pc, #92]	; (8018bb0 <UART4_Init+0x68>)
 8018b52:	4a18      	ldr	r2, [pc, #96]	; (8018bb4 <UART4_Init+0x6c>)
 8018b54:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8018b56:	4a16      	ldr	r2, [pc, #88]	; (8018bb0 <UART4_Init+0x68>)
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8018b5c:	4b14      	ldr	r3, [pc, #80]	; (8018bb0 <UART4_Init+0x68>)
 8018b5e:	2200      	movs	r2, #0
 8018b60:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8018b62:	4b13      	ldr	r3, [pc, #76]	; (8018bb0 <UART4_Init+0x68>)
 8018b64:	2200      	movs	r2, #0
 8018b66:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8018b68:	4b11      	ldr	r3, [pc, #68]	; (8018bb0 <UART4_Init+0x68>)
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8018b6e:	4b10      	ldr	r3, [pc, #64]	; (8018bb0 <UART4_Init+0x68>)
 8018b70:	220c      	movs	r2, #12
 8018b72:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018b74:	4b0e      	ldr	r3, [pc, #56]	; (8018bb0 <UART4_Init+0x68>)
 8018b76:	2200      	movs	r2, #0
 8018b78:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8018b7a:	4b0d      	ldr	r3, [pc, #52]	; (8018bb0 <UART4_Init+0x68>)
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018b80:	4b0b      	ldr	r3, [pc, #44]	; (8018bb0 <UART4_Init+0x68>)
 8018b82:	2200      	movs	r2, #0
 8018b84:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018b86:	4b0a      	ldr	r3, [pc, #40]	; (8018bb0 <UART4_Init+0x68>)
 8018b88:	2200      	movs	r2, #0
 8018b8a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8018b8c:	4808      	ldr	r0, [pc, #32]	; (8018bb0 <UART4_Init+0x68>)
 8018b8e:	f006 f9e3 	bl	801ef58 <HAL_UART_Init>
 8018b92:	4603      	mov	r3, r0
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d001      	beq.n	8018b9c <UART4_Init+0x54>
	{
		Error_Handler();
 8018b98:	f7fe fe7a 	bl	8017890 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018b9c:	2280      	movs	r2, #128	; 0x80
 8018b9e:	4906      	ldr	r1, [pc, #24]	; (8018bb8 <UART4_Init+0x70>)
 8018ba0:	4803      	ldr	r0, [pc, #12]	; (8018bb0 <UART4_Init+0x68>)
 8018ba2:	f007 fd45 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8018ba6:	bf00      	nop
 8018ba8:	3708      	adds	r7, #8
 8018baa:	46bd      	mov	sp, r7
 8018bac:	bd80      	pop	{r7, pc}
 8018bae:	bf00      	nop
 8018bb0:	2000d9e8 	.word	0x2000d9e8
 8018bb4:	40004c00 	.word	0x40004c00
 8018bb8:	2000d968 	.word	0x2000d968

08018bbc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b084      	sub	sp, #16
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
 8018bc4:	460b      	mov	r3, r1
 8018bc6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	4a68      	ldr	r2, [pc, #416]	; (8018d70 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8018bce:	4293      	cmp	r3, r2
 8018bd0:	d129      	bne.n	8018c26 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018bd2:	2280      	movs	r2, #128	; 0x80
 8018bd4:	4967      	ldr	r1, [pc, #412]	; (8018d74 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8018bd6:	4868      	ldr	r0, [pc, #416]	; (8018d78 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8018bd8:	f007 fd2a 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8018bdc:	2300      	movs	r3, #0
 8018bde:	81fb      	strh	r3, [r7, #14]
 8018be0:	e017      	b.n	8018c12 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 8018be2:	89fa      	ldrh	r2, [r7, #14]
 8018be4:	4b65      	ldr	r3, [pc, #404]	; (8018d7c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8018be6:	881b      	ldrh	r3, [r3, #0]
 8018be8:	1c59      	adds	r1, r3, #1
 8018bea:	b288      	uxth	r0, r1
 8018bec:	4963      	ldr	r1, [pc, #396]	; (8018d7c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8018bee:	8008      	strh	r0, [r1, #0]
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	4b60      	ldr	r3, [pc, #384]	; (8018d74 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8018bf4:	5c9a      	ldrb	r2, [r3, r2]
 8018bf6:	4b61      	ldr	r3, [pc, #388]	; (8018d7c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8018bf8:	440b      	add	r3, r1
 8018bfa:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8018bfc:	4b5f      	ldr	r3, [pc, #380]	; (8018d7c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8018bfe:	881b      	ldrh	r3, [r3, #0]
 8018c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018c04:	d302      	bcc.n	8018c0c <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 8018c06:	4b5d      	ldr	r3, [pc, #372]	; (8018d7c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8018c08:	2200      	movs	r2, #0
 8018c0a:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8018c0c:	89fb      	ldrh	r3, [r7, #14]
 8018c0e:	3301      	adds	r3, #1
 8018c10:	81fb      	strh	r3, [r7, #14]
 8018c12:	89fa      	ldrh	r2, [r7, #14]
 8018c14:	887b      	ldrh	r3, [r7, #2]
 8018c16:	429a      	cmp	r2, r3
 8018c18:	d3e3      	bcc.n	8018be2 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 8018c1a:	f000 fc33 	bl	8019484 <HAL_GetTick>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	4a57      	ldr	r2, [pc, #348]	; (8018d80 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8018c22:	6013      	str	r3, [r2, #0]
		{
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8018c24:	e0a0      	b.n	8018d68 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART5)
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	4a56      	ldr	r2, [pc, #344]	; (8018d84 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8018c2c:	4293      	cmp	r3, r2
 8018c2e:	d129      	bne.n	8018c84 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018c30:	2280      	movs	r2, #128	; 0x80
 8018c32:	4955      	ldr	r1, [pc, #340]	; (8018d88 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8018c34:	4855      	ldr	r0, [pc, #340]	; (8018d8c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8018c36:	f007 fcfb 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	81bb      	strh	r3, [r7, #12]
 8018c3e:	e01c      	b.n	8018c7a <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8018c40:	89ba      	ldrh	r2, [r7, #12]
 8018c42:	4b53      	ldr	r3, [pc, #332]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018c44:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8018c48:	1c59      	adds	r1, r3, #1
 8018c4a:	b288      	uxth	r0, r1
 8018c4c:	4950      	ldr	r1, [pc, #320]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018c4e:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8018c52:	4619      	mov	r1, r3
 8018c54:	4b4c      	ldr	r3, [pc, #304]	; (8018d88 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8018c56:	5c9a      	ldrb	r2, [r3, r2]
 8018c58:	4b4d      	ldr	r3, [pc, #308]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018c5a:	440b      	add	r3, r1
 8018c5c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8018c60:	4b4b      	ldr	r3, [pc, #300]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018c62:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8018c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018c6a:	d303      	bcc.n	8018c74 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8018c6c:	4b48      	ldr	r3, [pc, #288]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018c6e:	2200      	movs	r2, #0
 8018c70:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8018c74:	89bb      	ldrh	r3, [r7, #12]
 8018c76:	3301      	adds	r3, #1
 8018c78:	81bb      	strh	r3, [r7, #12]
 8018c7a:	89ba      	ldrh	r2, [r7, #12]
 8018c7c:	887b      	ldrh	r3, [r7, #2]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d3de      	bcc.n	8018c40 <HAL_UARTEx_RxEventCallback+0x84>
}
 8018c82:	e071      	b.n	8018d68 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART7)
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4a42      	ldr	r2, [pc, #264]	; (8018d94 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8018c8a:	4293      	cmp	r3, r2
 8018c8c:	d129      	bne.n	8018ce2 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018c8e:	2280      	movs	r2, #128	; 0x80
 8018c90:	4941      	ldr	r1, [pc, #260]	; (8018d98 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8018c92:	4842      	ldr	r0, [pc, #264]	; (8018d9c <HAL_UARTEx_RxEventCallback+0x1e0>)
 8018c94:	f007 fccc 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8018c98:	2300      	movs	r3, #0
 8018c9a:	817b      	strh	r3, [r7, #10]
 8018c9c:	e01c      	b.n	8018cd8 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8018c9e:	897a      	ldrh	r2, [r7, #10]
 8018ca0:	4b3b      	ldr	r3, [pc, #236]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018ca2:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8018ca6:	1c59      	adds	r1, r3, #1
 8018ca8:	b288      	uxth	r0, r1
 8018caa:	4939      	ldr	r1, [pc, #228]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018cac:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	4b39      	ldr	r3, [pc, #228]	; (8018d98 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8018cb4:	5c9a      	ldrb	r2, [r3, r2]
 8018cb6:	4b36      	ldr	r3, [pc, #216]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018cb8:	440b      	add	r3, r1
 8018cba:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8018cbe:	4b34      	ldr	r3, [pc, #208]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018cc0:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8018cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018cc8:	d303      	bcc.n	8018cd2 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8018cca:	4b31      	ldr	r3, [pc, #196]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018ccc:	2200      	movs	r2, #0
 8018cce:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8018cd2:	897b      	ldrh	r3, [r7, #10]
 8018cd4:	3301      	adds	r3, #1
 8018cd6:	817b      	strh	r3, [r7, #10]
 8018cd8:	897a      	ldrh	r2, [r7, #10]
 8018cda:	887b      	ldrh	r3, [r7, #2]
 8018cdc:	429a      	cmp	r2, r3
 8018cde:	d3de      	bcc.n	8018c9e <HAL_UARTEx_RxEventCallback+0xe2>
}
 8018ce0:	e042      	b.n	8018d68 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART4)
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4a2e      	ldr	r2, [pc, #184]	; (8018da0 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8018ce8:	4293      	cmp	r3, r2
 8018cea:	d13d      	bne.n	8018d68 <HAL_UARTEx_RxEventCallback+0x1ac>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018cec:	2280      	movs	r2, #128	; 0x80
 8018cee:	492d      	ldr	r1, [pc, #180]	; (8018da4 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8018cf0:	482d      	ldr	r0, [pc, #180]	; (8018da8 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8018cf2:	f007 fc9d 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	813b      	strh	r3, [r7, #8]
 8018cfa:	e01c      	b.n	8018d36 <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8018cfc:	893a      	ldrh	r2, [r7, #8]
 8018cfe:	4b24      	ldr	r3, [pc, #144]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018d00:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8018d04:	1c59      	adds	r1, r3, #1
 8018d06:	b288      	uxth	r0, r1
 8018d08:	4921      	ldr	r1, [pc, #132]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018d0a:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8018d0e:	4619      	mov	r1, r3
 8018d10:	4b24      	ldr	r3, [pc, #144]	; (8018da4 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8018d12:	5c9a      	ldrb	r2, [r3, r2]
 8018d14:	4b1e      	ldr	r3, [pc, #120]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018d16:	440b      	add	r3, r1
 8018d18:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8018d1c:	4b1c      	ldr	r3, [pc, #112]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018d1e:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8018d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018d26:	d303      	bcc.n	8018d30 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 8018d28:	4b19      	ldr	r3, [pc, #100]	; (8018d90 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8018d30:	893b      	ldrh	r3, [r7, #8]
 8018d32:	3301      	adds	r3, #1
 8018d34:	813b      	strh	r3, [r7, #8]
 8018d36:	893a      	ldrh	r2, [r7, #8]
 8018d38:	887b      	ldrh	r3, [r7, #2]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d3de      	bcc.n	8018cfc <HAL_UARTEx_RxEventCallback+0x140>
		if(HAL_Elaps_Ticks(UART4_Intr_Clk) > 50)
 8018d3e:	4b1b      	ldr	r3, [pc, #108]	; (8018dac <HAL_UARTEx_RxEventCallback+0x1f0>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	4618      	mov	r0, r3
 8018d44:	f7f7 f918 	bl	800ff78 <HAL_Elaps_Ticks>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	2b32      	cmp	r3, #50	; 0x32
 8018d4c:	d907      	bls.n	8018d5e <HAL_UARTEx_RxEventCallback+0x1a2>
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
 8018d4e:	4b17      	ldr	r3, [pc, #92]	; (8018dac <HAL_UARTEx_RxEventCallback+0x1f0>)
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	4618      	mov	r0, r3
 8018d54:	f7f7 f910 	bl	800ff78 <HAL_Elaps_Ticks>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	4a15      	ldr	r2, [pc, #84]	; (8018db0 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8018d5c:	6013      	str	r3, [r2, #0]
		UART4_Intr_Clk = HAL_GetTick();
 8018d5e:	f000 fb91 	bl	8019484 <HAL_GetTick>
 8018d62:	4603      	mov	r3, r0
 8018d64:	4a11      	ldr	r2, [pc, #68]	; (8018dac <HAL_UARTEx_RxEventCallback+0x1f0>)
 8018d66:	6013      	str	r3, [r2, #0]
}
 8018d68:	bf00      	nop
 8018d6a:	3710      	adds	r7, #16
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	bd80      	pop	{r7, pc}
 8018d70:	40011000 	.word	0x40011000
 8018d74:	2000d7e8 	.word	0x2000d7e8
 8018d78:	2000dc10 	.word	0x2000dc10
 8018d7c:	2000cfe4 	.word	0x2000cfe4
 8018d80:	2000bfcc 	.word	0x2000bfcc
 8018d84:	40005000 	.word	0x40005000
 8018d88:	2000d868 	.word	0x2000d868
 8018d8c:	2000daa0 	.word	0x2000daa0
 8018d90:	2000bfd4 	.word	0x2000bfd4
 8018d94:	40007800 	.word	0x40007800
 8018d98:	2000d8e8 	.word	0x2000d8e8
 8018d9c:	2000db58 	.word	0x2000db58
 8018da0:	40004c00 	.word	0x40004c00
 8018da4:	2000d968 	.word	0x2000d968
 8018da8:	2000d9e8 	.word	0x2000d9e8
 8018dac:	2000bfc8 	.word	0x2000bfc8
 8018db0:	2000bfd0 	.word	0x2000bfd0

08018db4 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8018db4:	b480      	push	{r7}
 8018db6:	b085      	sub	sp, #20
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	4603      	mov	r3, r0
 8018dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8018dc2:	79fb      	ldrb	r3, [r7, #7]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d115      	bne.n	8018df4 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8018dc8:	79fa      	ldrb	r2, [r7, #7]
 8018dca:	4918      	ldr	r1, [pc, #96]	; (8018e2c <Com_DataReady+0x78>)
 8018dcc:	4613      	mov	r3, r2
 8018dce:	025b      	lsls	r3, r3, #9
 8018dd0:	4413      	add	r3, r2
 8018dd2:	009b      	lsls	r3, r3, #2
 8018dd4:	440b      	add	r3, r1
 8018dd6:	8819      	ldrh	r1, [r3, #0]
 8018dd8:	79fa      	ldrb	r2, [r7, #7]
 8018dda:	4814      	ldr	r0, [pc, #80]	; (8018e2c <Com_DataReady+0x78>)
 8018ddc:	4613      	mov	r3, r2
 8018dde:	025b      	lsls	r3, r3, #9
 8018de0:	4413      	add	r3, r2
 8018de2:	009b      	lsls	r3, r3, #2
 8018de4:	4403      	add	r3, r0
 8018de6:	3302      	adds	r3, #2
 8018de8:	881b      	ldrh	r3, [r3, #0]
 8018dea:	4299      	cmp	r1, r3
 8018dec:	d017      	beq.n	8018e1e <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8018dee:	2301      	movs	r3, #1
 8018df0:	73fb      	strb	r3, [r7, #15]
 8018df2:	e014      	b.n	8018e1e <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8018df4:	79fa      	ldrb	r2, [r7, #7]
 8018df6:	490e      	ldr	r1, [pc, #56]	; (8018e30 <Com_DataReady+0x7c>)
 8018df8:	4613      	mov	r3, r2
 8018dfa:	021b      	lsls	r3, r3, #8
 8018dfc:	4413      	add	r3, r2
 8018dfe:	009b      	lsls	r3, r3, #2
 8018e00:	440b      	add	r3, r1
 8018e02:	8819      	ldrh	r1, [r3, #0]
 8018e04:	79fa      	ldrb	r2, [r7, #7]
 8018e06:	480a      	ldr	r0, [pc, #40]	; (8018e30 <Com_DataReady+0x7c>)
 8018e08:	4613      	mov	r3, r2
 8018e0a:	021b      	lsls	r3, r3, #8
 8018e0c:	4413      	add	r3, r2
 8018e0e:	009b      	lsls	r3, r3, #2
 8018e10:	4403      	add	r3, r0
 8018e12:	3302      	adds	r3, #2
 8018e14:	881b      	ldrh	r3, [r3, #0]
 8018e16:	4299      	cmp	r1, r3
 8018e18:	d001      	beq.n	8018e1e <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8018e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e20:	4618      	mov	r0, r3
 8018e22:	3714      	adds	r7, #20
 8018e24:	46bd      	mov	sp, r7
 8018e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2a:	4770      	bx	lr
 8018e2c:	2000cfe4 	.word	0x2000cfe4
 8018e30:	2000bfd4 	.word	0x2000bfd4

08018e34 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8018e34:	b4b0      	push	{r4, r5, r7}
 8018e36:	b085      	sub	sp, #20
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8018e42:	79fb      	ldrb	r3, [r7, #7]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d135      	bne.n	8018eb4 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8018e48:	79f9      	ldrb	r1, [r7, #7]
 8018e4a:	79fa      	ldrb	r2, [r7, #7]
 8018e4c:	4837      	ldr	r0, [pc, #220]	; (8018f2c <Com_Get_Byte+0xf8>)
 8018e4e:	4613      	mov	r3, r2
 8018e50:	025b      	lsls	r3, r3, #9
 8018e52:	4413      	add	r3, r2
 8018e54:	009b      	lsls	r3, r3, #2
 8018e56:	4403      	add	r3, r0
 8018e58:	3302      	adds	r3, #2
 8018e5a:	8818      	ldrh	r0, [r3, #0]
 8018e5c:	1c43      	adds	r3, r0, #1
 8018e5e:	b29d      	uxth	r5, r3
 8018e60:	4c32      	ldr	r4, [pc, #200]	; (8018f2c <Com_Get_Byte+0xf8>)
 8018e62:	4613      	mov	r3, r2
 8018e64:	025b      	lsls	r3, r3, #9
 8018e66:	4413      	add	r3, r2
 8018e68:	009b      	lsls	r3, r3, #2
 8018e6a:	4423      	add	r3, r4
 8018e6c:	3302      	adds	r3, #2
 8018e6e:	462a      	mov	r2, r5
 8018e70:	801a      	strh	r2, [r3, #0]
 8018e72:	4a2e      	ldr	r2, [pc, #184]	; (8018f2c <Com_Get_Byte+0xf8>)
 8018e74:	460b      	mov	r3, r1
 8018e76:	025b      	lsls	r3, r3, #9
 8018e78:	440b      	add	r3, r1
 8018e7a:	009b      	lsls	r3, r3, #2
 8018e7c:	4413      	add	r3, r2
 8018e7e:	4403      	add	r3, r0
 8018e80:	3304      	adds	r3, #4
 8018e82:	781b      	ldrb	r3, [r3, #0]
 8018e84:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8018e86:	79fa      	ldrb	r2, [r7, #7]
 8018e88:	4928      	ldr	r1, [pc, #160]	; (8018f2c <Com_Get_Byte+0xf8>)
 8018e8a:	4613      	mov	r3, r2
 8018e8c:	025b      	lsls	r3, r3, #9
 8018e8e:	4413      	add	r3, r2
 8018e90:	009b      	lsls	r3, r3, #2
 8018e92:	440b      	add	r3, r1
 8018e94:	3302      	adds	r3, #2
 8018e96:	881b      	ldrh	r3, [r3, #0]
 8018e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e9c:	d33f      	bcc.n	8018f1e <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8018e9e:	79fa      	ldrb	r2, [r7, #7]
 8018ea0:	4922      	ldr	r1, [pc, #136]	; (8018f2c <Com_Get_Byte+0xf8>)
 8018ea2:	4613      	mov	r3, r2
 8018ea4:	025b      	lsls	r3, r3, #9
 8018ea6:	4413      	add	r3, r2
 8018ea8:	009b      	lsls	r3, r3, #2
 8018eaa:	440b      	add	r3, r1
 8018eac:	3302      	adds	r3, #2
 8018eae:	2200      	movs	r2, #0
 8018eb0:	801a      	strh	r2, [r3, #0]
 8018eb2:	e034      	b.n	8018f1e <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8018eb4:	79f9      	ldrb	r1, [r7, #7]
 8018eb6:	79fa      	ldrb	r2, [r7, #7]
 8018eb8:	481d      	ldr	r0, [pc, #116]	; (8018f30 <Com_Get_Byte+0xfc>)
 8018eba:	4613      	mov	r3, r2
 8018ebc:	021b      	lsls	r3, r3, #8
 8018ebe:	4413      	add	r3, r2
 8018ec0:	009b      	lsls	r3, r3, #2
 8018ec2:	4403      	add	r3, r0
 8018ec4:	3302      	adds	r3, #2
 8018ec6:	8818      	ldrh	r0, [r3, #0]
 8018ec8:	1c43      	adds	r3, r0, #1
 8018eca:	b29d      	uxth	r5, r3
 8018ecc:	4c18      	ldr	r4, [pc, #96]	; (8018f30 <Com_Get_Byte+0xfc>)
 8018ece:	4613      	mov	r3, r2
 8018ed0:	021b      	lsls	r3, r3, #8
 8018ed2:	4413      	add	r3, r2
 8018ed4:	009b      	lsls	r3, r3, #2
 8018ed6:	4423      	add	r3, r4
 8018ed8:	3302      	adds	r3, #2
 8018eda:	462a      	mov	r2, r5
 8018edc:	801a      	strh	r2, [r3, #0]
 8018ede:	4a14      	ldr	r2, [pc, #80]	; (8018f30 <Com_Get_Byte+0xfc>)
 8018ee0:	460b      	mov	r3, r1
 8018ee2:	021b      	lsls	r3, r3, #8
 8018ee4:	440b      	add	r3, r1
 8018ee6:	009b      	lsls	r3, r3, #2
 8018ee8:	4413      	add	r3, r2
 8018eea:	4403      	add	r3, r0
 8018eec:	3304      	adds	r3, #4
 8018eee:	781b      	ldrb	r3, [r3, #0]
 8018ef0:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8018ef2:	79fa      	ldrb	r2, [r7, #7]
 8018ef4:	490e      	ldr	r1, [pc, #56]	; (8018f30 <Com_Get_Byte+0xfc>)
 8018ef6:	4613      	mov	r3, r2
 8018ef8:	021b      	lsls	r3, r3, #8
 8018efa:	4413      	add	r3, r2
 8018efc:	009b      	lsls	r3, r3, #2
 8018efe:	440b      	add	r3, r1
 8018f00:	3302      	adds	r3, #2
 8018f02:	881b      	ldrh	r3, [r3, #0]
 8018f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018f08:	d309      	bcc.n	8018f1e <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 8018f0a:	79fa      	ldrb	r2, [r7, #7]
 8018f0c:	4908      	ldr	r1, [pc, #32]	; (8018f30 <Com_Get_Byte+0xfc>)
 8018f0e:	4613      	mov	r3, r2
 8018f10:	021b      	lsls	r3, r3, #8
 8018f12:	4413      	add	r3, r2
 8018f14:	009b      	lsls	r3, r3, #2
 8018f16:	440b      	add	r3, r1
 8018f18:	3302      	adds	r3, #2
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8018f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f20:	4618      	mov	r0, r3
 8018f22:	3714      	adds	r7, #20
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bcb0      	pop	{r4, r5, r7}
 8018f28:	4770      	bx	lr
 8018f2a:	bf00      	nop
 8018f2c:	2000cfe4 	.word	0x2000cfe4
 8018f30:	2000bfd4 	.word	0x2000bfd4

08018f34 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b084      	sub	sp, #16
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	6039      	str	r1, [r7, #0]
 8018f3e:	71fb      	strb	r3, [r7, #7]
 8018f40:	4613      	mov	r3, r2
 8018f42:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8018f44:	2300      	movs	r3, #0
 8018f46:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8018f48:	2300      	movs	r3, #0
 8018f4a:	81fb      	strh	r3, [r7, #14]
 8018f4c:	e03a      	b.n	8018fc4 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 8018f4e:	89fb      	ldrh	r3, [r7, #14]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d00a      	beq.n	8018f6a <CommTransmitMessage+0x36>
 8018f54:	89fb      	ldrh	r3, [r7, #14]
 8018f56:	683a      	ldr	r2, [r7, #0]
 8018f58:	4413      	add	r3, r2
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	2b24      	cmp	r3, #36	; 0x24
 8018f5e:	d104      	bne.n	8018f6a <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8018f60:	79fb      	ldrb	r3, [r7, #7]
 8018f62:	2105      	movs	r1, #5
 8018f64:	4618      	mov	r0, r3
 8018f66:	f000 f835 	bl	8018fd4 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8018f6a:	89fb      	ldrh	r3, [r7, #14]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d00e      	beq.n	8018f8e <CommTransmitMessage+0x5a>
 8018f70:	89fa      	ldrh	r2, [r7, #14]
 8018f72:	88bb      	ldrh	r3, [r7, #4]
 8018f74:	429a      	cmp	r2, r3
 8018f76:	d20a      	bcs.n	8018f8e <CommTransmitMessage+0x5a>
 8018f78:	89fb      	ldrh	r3, [r7, #14]
 8018f7a:	683a      	ldr	r2, [r7, #0]
 8018f7c:	4413      	add	r3, r2
 8018f7e:	781b      	ldrb	r3, [r3, #0]
 8018f80:	2b05      	cmp	r3, #5
 8018f82:	d104      	bne.n	8018f8e <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8018f84:	79fb      	ldrb	r3, [r7, #7]
 8018f86:	2105      	movs	r1, #5
 8018f88:	4618      	mov	r0, r3
 8018f8a:	f000 f823 	bl	8018fd4 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 8018f8e:	89fb      	ldrh	r3, [r7, #14]
 8018f90:	683a      	ldr	r2, [r7, #0]
 8018f92:	4413      	add	r3, r2
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	2b26      	cmp	r3, #38	; 0x26
 8018f98:	d108      	bne.n	8018fac <CommTransmitMessage+0x78>
 8018f9a:	89fa      	ldrh	r2, [r7, #14]
 8018f9c:	88bb      	ldrh	r3, [r7, #4]
 8018f9e:	429a      	cmp	r2, r3
 8018fa0:	d004      	beq.n	8018fac <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8018fa2:	79fb      	ldrb	r3, [r7, #7]
 8018fa4:	2105      	movs	r1, #5
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f000 f814 	bl	8018fd4 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8018fac:	89fb      	ldrh	r3, [r7, #14]
 8018fae:	683a      	ldr	r2, [r7, #0]
 8018fb0:	4413      	add	r3, r2
 8018fb2:	781a      	ldrb	r2, [r3, #0]
 8018fb4:	79fb      	ldrb	r3, [r7, #7]
 8018fb6:	4611      	mov	r1, r2
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f000 f80b 	bl	8018fd4 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8018fbe:	89fb      	ldrh	r3, [r7, #14]
 8018fc0:	3301      	adds	r3, #1
 8018fc2:	81fb      	strh	r3, [r7, #14]
 8018fc4:	89fa      	ldrh	r2, [r7, #14]
 8018fc6:	88bb      	ldrh	r3, [r7, #4]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d9c0      	bls.n	8018f4e <CommTransmitMessage+0x1a>
	}

	return;
 8018fcc:	bf00      	nop
}
 8018fce:	3710      	adds	r7, #16
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}

08018fd4 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b084      	sub	sp, #16
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	4603      	mov	r3, r0
 8018fdc:	460a      	mov	r2, r1
 8018fde:	71fb      	strb	r3, [r7, #7]
 8018fe0:	4613      	mov	r3, r2
 8018fe2:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8018fe4:	1dbb      	adds	r3, r7, #6
 8018fe6:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8018fe8:	79fb      	ldrb	r3, [r7, #7]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d107      	bne.n	8018ffe <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 8018fee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ff2:	2201      	movs	r2, #1
 8018ff4:	68f9      	ldr	r1, [r7, #12]
 8018ff6:	4816      	ldr	r0, [pc, #88]	; (8019050 <Com_SendByte+0x7c>)
 8018ff8:	f006 f80c 	bl	801f014 <HAL_UART_Transmit>
 8018ffc:	e01f      	b.n	801903e <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 8018ffe:	79fb      	ldrb	r3, [r7, #7]
 8019000:	2b01      	cmp	r3, #1
 8019002:	d107      	bne.n	8019014 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8019004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019008:	2201      	movs	r2, #1
 801900a:	68f9      	ldr	r1, [r7, #12]
 801900c:	4811      	ldr	r0, [pc, #68]	; (8019054 <Com_SendByte+0x80>)
 801900e:	f006 f801 	bl	801f014 <HAL_UART_Transmit>
 8019012:	e014      	b.n	801903e <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8019014:	79fb      	ldrb	r3, [r7, #7]
 8019016:	2b02      	cmp	r3, #2
 8019018:	d107      	bne.n	801902a <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 801901a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801901e:	2201      	movs	r2, #1
 8019020:	68f9      	ldr	r1, [r7, #12]
 8019022:	480d      	ldr	r0, [pc, #52]	; (8019058 <Com_SendByte+0x84>)
 8019024:	f005 fff6 	bl	801f014 <HAL_UART_Transmit>
 8019028:	e009      	b.n	801903e <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 801902a:	79fb      	ldrb	r3, [r7, #7]
 801902c:	2b03      	cmp	r3, #3
 801902e:	d106      	bne.n	801903e <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8019030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019034:	2201      	movs	r2, #1
 8019036:	68f9      	ldr	r1, [r7, #12]
 8019038:	4808      	ldr	r0, [pc, #32]	; (801905c <Com_SendByte+0x88>)
 801903a:	f005 ffeb 	bl	801f014 <HAL_UART_Transmit>
	}

	ptr=NULL;
 801903e:	2300      	movs	r3, #0
 8019040:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8019042:	68f8      	ldr	r0, [r7, #12]
 8019044:	f00d f900 	bl	8026248 <free>
}
 8019048:	bf00      	nop
 801904a:	3710      	adds	r7, #16
 801904c:	46bd      	mov	sp, r7
 801904e:	bd80      	pop	{r7, pc}
 8019050:	2000dc10 	.word	0x2000dc10
 8019054:	2000daa0 	.word	0x2000daa0
 8019058:	2000db58 	.word	0x2000db58
 801905c:	2000d9e8 	.word	0x2000d9e8

08019060 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 8019060:	b580      	push	{r7, lr}
 8019062:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019064:	2280      	movs	r2, #128	; 0x80
 8019066:	490a      	ldr	r1, [pc, #40]	; (8019090 <Enable_UART_Interrupts+0x30>)
 8019068:	480a      	ldr	r0, [pc, #40]	; (8019094 <Enable_UART_Interrupts+0x34>)
 801906a:	f007 fae1 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801906e:	2280      	movs	r2, #128	; 0x80
 8019070:	4909      	ldr	r1, [pc, #36]	; (8019098 <Enable_UART_Interrupts+0x38>)
 8019072:	480a      	ldr	r0, [pc, #40]	; (801909c <Enable_UART_Interrupts+0x3c>)
 8019074:	f007 fadc 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019078:	2280      	movs	r2, #128	; 0x80
 801907a:	4909      	ldr	r1, [pc, #36]	; (80190a0 <Enable_UART_Interrupts+0x40>)
 801907c:	4809      	ldr	r0, [pc, #36]	; (80190a4 <Enable_UART_Interrupts+0x44>)
 801907e:	f007 fad7 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019082:	2280      	movs	r2, #128	; 0x80
 8019084:	4908      	ldr	r1, [pc, #32]	; (80190a8 <Enable_UART_Interrupts+0x48>)
 8019086:	4809      	ldr	r0, [pc, #36]	; (80190ac <Enable_UART_Interrupts+0x4c>)
 8019088:	f007 fad2 	bl	8020630 <HAL_UARTEx_ReceiveToIdle_IT>
}
 801908c:	bf00      	nop
 801908e:	bd80      	pop	{r7, pc}
 8019090:	2000d7e8 	.word	0x2000d7e8
 8019094:	2000dc10 	.word	0x2000dc10
 8019098:	2000d868 	.word	0x2000d868
 801909c:	2000daa0 	.word	0x2000daa0
 80190a0:	2000d8e8 	.word	0x2000d8e8
 80190a4:	2000db58 	.word	0x2000db58
 80190a8:	2000d968 	.word	0x2000d968
 80190ac:	2000d9e8 	.word	0x2000d9e8

080190b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80190b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80190e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80190b4:	480d      	ldr	r0, [pc, #52]	; (80190ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80190b6:	490e      	ldr	r1, [pc, #56]	; (80190f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80190b8:	4a0e      	ldr	r2, [pc, #56]	; (80190f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80190ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80190bc:	e002      	b.n	80190c4 <LoopCopyDataInit>

080190be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80190be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80190c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80190c2:	3304      	adds	r3, #4

080190c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80190c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80190c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80190c8:	d3f9      	bcc.n	80190be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80190ca:	4a0b      	ldr	r2, [pc, #44]	; (80190f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80190cc:	4c0b      	ldr	r4, [pc, #44]	; (80190fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80190ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80190d0:	e001      	b.n	80190d6 <LoopFillZerobss>

080190d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80190d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80190d4:	3204      	adds	r2, #4

080190d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80190d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80190d8:	d3fb      	bcc.n	80190d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80190da:	f7ff fb3f 	bl	801875c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80190de:	f00d f887 	bl	80261f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80190e2:	f7fe f9e9 	bl	80174b8 <main>
  bx  lr    
 80190e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80190e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80190ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80190f0:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 80190f4:	0802dc0c 	.word	0x0802dc0c
  ldr r2, =_sbss
 80190f8:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 80190fc:	20016270 	.word	0x20016270

08019100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019100:	e7fe      	b.n	8019100 <ADC_IRQHandler>

08019102 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8019102:	b480      	push	{r7}
 8019104:	b083      	sub	sp, #12
 8019106:	af00      	add	r7, sp, #0
 8019108:	6078      	str	r0, [r7, #4]
 801910a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d00b      	beq.n	801912a <DP83848_RegisterBusIO+0x28>
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	68db      	ldr	r3, [r3, #12]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d007      	beq.n	801912a <DP83848_RegisterBusIO+0x28>
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	689b      	ldr	r3, [r3, #8]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d003      	beq.n	801912a <DP83848_RegisterBusIO+0x28>
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	691b      	ldr	r3, [r3, #16]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d102      	bne.n	8019130 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 801912a:	f04f 33ff 	mov.w	r3, #4294967295
 801912e:	e014      	b.n	801915a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8019130:	683b      	ldr	r3, [r7, #0]
 8019132:	681a      	ldr	r2, [r3, #0]
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	685a      	ldr	r2, [r3, #4]
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	68da      	ldr	r2, [r3, #12]
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8019148:	683b      	ldr	r3, [r7, #0]
 801914a:	689a      	ldr	r2, [r3, #8]
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	691a      	ldr	r2, [r3, #16]
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8019158:	2300      	movs	r3, #0
}
 801915a:	4618      	mov	r0, r3
 801915c:	370c      	adds	r7, #12
 801915e:	46bd      	mov	sp, r7
 8019160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019164:	4770      	bx	lr

08019166 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8019166:	b580      	push	{r7, lr}
 8019168:	b086      	sub	sp, #24
 801916a:	af00      	add	r7, sp, #0
 801916c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801916e:	2300      	movs	r3, #0
 8019170:	60fb      	str	r3, [r7, #12]
 8019172:	2300      	movs	r3, #0
 8019174:	60bb      	str	r3, [r7, #8]
 8019176:	2300      	movs	r3, #0
 8019178:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 801917a:	2300      	movs	r3, #0
 801917c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	685b      	ldr	r3, [r3, #4]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d17c      	bne.n	8019280 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	689b      	ldr	r3, [r3, #8]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d002      	beq.n	8019194 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	689b      	ldr	r3, [r3, #8]
 8019192:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2220      	movs	r2, #32
 8019198:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 801919a:	2300      	movs	r3, #0
 801919c:	617b      	str	r3, [r7, #20]
 801919e:	e01c      	b.n	80191da <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	695b      	ldr	r3, [r3, #20]
 80191a4:	f107 0208 	add.w	r2, r7, #8
 80191a8:	2119      	movs	r1, #25
 80191aa:	6978      	ldr	r0, [r7, #20]
 80191ac:	4798      	blx	r3
 80191ae:	4603      	mov	r3, r0
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	da03      	bge.n	80191bc <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80191b4:	f06f 0304 	mvn.w	r3, #4
 80191b8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80191ba:	e00b      	b.n	80191d4 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80191bc:	68bb      	ldr	r3, [r7, #8]
 80191be:	f003 031f 	and.w	r3, r3, #31
 80191c2:	697a      	ldr	r2, [r7, #20]
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d105      	bne.n	80191d4 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	697a      	ldr	r2, [r7, #20]
 80191cc:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80191ce:	2300      	movs	r3, #0
 80191d0:	613b      	str	r3, [r7, #16]
         break;
 80191d2:	e005      	b.n	80191e0 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80191d4:	697b      	ldr	r3, [r7, #20]
 80191d6:	3301      	adds	r3, #1
 80191d8:	617b      	str	r3, [r7, #20]
 80191da:	697b      	ldr	r3, [r7, #20]
 80191dc:	2b1f      	cmp	r3, #31
 80191de:	d9df      	bls.n	80191a0 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	2b1f      	cmp	r3, #31
 80191e6:	d902      	bls.n	80191ee <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80191e8:	f06f 0302 	mvn.w	r3, #2
 80191ec:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80191ee:	693b      	ldr	r3, [r7, #16]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d145      	bne.n	8019280 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	691b      	ldr	r3, [r3, #16]
 80191f8:	687a      	ldr	r2, [r7, #4]
 80191fa:	6810      	ldr	r0, [r2, #0]
 80191fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019200:	2100      	movs	r1, #0
 8019202:	4798      	blx	r3
 8019204:	4603      	mov	r3, r0
 8019206:	2b00      	cmp	r3, #0
 8019208:	db37      	blt.n	801927a <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	695b      	ldr	r3, [r3, #20]
 801920e:	687a      	ldr	r2, [r7, #4]
 8019210:	6810      	ldr	r0, [r2, #0]
 8019212:	f107 0208 	add.w	r2, r7, #8
 8019216:	2100      	movs	r1, #0
 8019218:	4798      	blx	r3
 801921a:	4603      	mov	r3, r0
 801921c:	2b00      	cmp	r3, #0
 801921e:	db28      	blt.n	8019272 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	699b      	ldr	r3, [r3, #24]
 8019224:	4798      	blx	r3
 8019226:	4603      	mov	r3, r0
 8019228:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 801922a:	e01c      	b.n	8019266 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	699b      	ldr	r3, [r3, #24]
 8019230:	4798      	blx	r3
 8019232:	4603      	mov	r3, r0
 8019234:	461a      	mov	r2, r3
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	1ad3      	subs	r3, r2, r3
 801923a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801923e:	d80e      	bhi.n	801925e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	695b      	ldr	r3, [r3, #20]
 8019244:	687a      	ldr	r2, [r7, #4]
 8019246:	6810      	ldr	r0, [r2, #0]
 8019248:	f107 0208 	add.w	r2, r7, #8
 801924c:	2100      	movs	r1, #0
 801924e:	4798      	blx	r3
 8019250:	4603      	mov	r3, r0
 8019252:	2b00      	cmp	r3, #0
 8019254:	da07      	bge.n	8019266 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8019256:	f06f 0304 	mvn.w	r3, #4
 801925a:	613b      	str	r3, [r7, #16]
                 break;
 801925c:	e010      	b.n	8019280 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 801925e:	f06f 0301 	mvn.w	r3, #1
 8019262:	613b      	str	r3, [r7, #16]
               break;
 8019264:	e00c      	b.n	8019280 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8019266:	68bb      	ldr	r3, [r7, #8]
 8019268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801926c:	2b00      	cmp	r3, #0
 801926e:	d1dd      	bne.n	801922c <DP83848_Init+0xc6>
 8019270:	e006      	b.n	8019280 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8019272:	f06f 0304 	mvn.w	r3, #4
 8019276:	613b      	str	r3, [r7, #16]
 8019278:	e002      	b.n	8019280 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 801927a:	f06f 0303 	mvn.w	r3, #3
 801927e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8019280:	693b      	ldr	r3, [r7, #16]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d112      	bne.n	80192ac <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	699b      	ldr	r3, [r3, #24]
 801928a:	4798      	blx	r3
 801928c:	4603      	mov	r3, r0
 801928e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8019290:	bf00      	nop
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	699b      	ldr	r3, [r3, #24]
 8019296:	4798      	blx	r3
 8019298:	4603      	mov	r3, r0
 801929a:	461a      	mov	r2, r3
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	1ad3      	subs	r3, r2, r3
 80192a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80192a4:	d9f5      	bls.n	8019292 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	2201      	movs	r2, #1
 80192aa:	605a      	str	r2, [r3, #4]
   }

   return status;
 80192ac:	693b      	ldr	r3, [r7, #16]
 }
 80192ae:	4618      	mov	r0, r3
 80192b0:	3718      	adds	r7, #24
 80192b2:	46bd      	mov	sp, r7
 80192b4:	bd80      	pop	{r7, pc}

080192b6 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80192b6:	b580      	push	{r7, lr}
 80192b8:	b084      	sub	sp, #16
 80192ba:	af00      	add	r7, sp, #0
 80192bc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80192be:	2300      	movs	r3, #0
 80192c0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	695b      	ldr	r3, [r3, #20]
 80192c6:	687a      	ldr	r2, [r7, #4]
 80192c8:	6810      	ldr	r0, [r2, #0]
 80192ca:	f107 020c 	add.w	r2, r7, #12
 80192ce:	2101      	movs	r1, #1
 80192d0:	4798      	blx	r3
 80192d2:	4603      	mov	r3, r0
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	da02      	bge.n	80192de <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80192d8:	f06f 0304 	mvn.w	r3, #4
 80192dc:	e06e      	b.n	80193bc <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	695b      	ldr	r3, [r3, #20]
 80192e2:	687a      	ldr	r2, [r7, #4]
 80192e4:	6810      	ldr	r0, [r2, #0]
 80192e6:	f107 020c 	add.w	r2, r7, #12
 80192ea:	2101      	movs	r1, #1
 80192ec:	4798      	blx	r3
 80192ee:	4603      	mov	r3, r0
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	da02      	bge.n	80192fa <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80192f4:	f06f 0304 	mvn.w	r3, #4
 80192f8:	e060      	b.n	80193bc <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	f003 0304 	and.w	r3, r3, #4
 8019300:	2b00      	cmp	r3, #0
 8019302:	d101      	bne.n	8019308 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8019304:	2301      	movs	r3, #1
 8019306:	e059      	b.n	80193bc <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	695b      	ldr	r3, [r3, #20]
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	6810      	ldr	r0, [r2, #0]
 8019310:	f107 020c 	add.w	r2, r7, #12
 8019314:	2100      	movs	r1, #0
 8019316:	4798      	blx	r3
 8019318:	4603      	mov	r3, r0
 801931a:	2b00      	cmp	r3, #0
 801931c:	da02      	bge.n	8019324 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 801931e:	f06f 0304 	mvn.w	r3, #4
 8019322:	e04b      	b.n	80193bc <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801932a:	2b00      	cmp	r3, #0
 801932c:	d11b      	bne.n	8019366 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019334:	2b00      	cmp	r3, #0
 8019336:	d006      	beq.n	8019346 <DP83848_GetLinkState+0x90>
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801933e:	2b00      	cmp	r3, #0
 8019340:	d001      	beq.n	8019346 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8019342:	2302      	movs	r3, #2
 8019344:	e03a      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801934c:	2b00      	cmp	r3, #0
 801934e:	d001      	beq.n	8019354 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8019350:	2303      	movs	r3, #3
 8019352:	e033      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801935a:	2b00      	cmp	r3, #0
 801935c:	d001      	beq.n	8019362 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801935e:	2304      	movs	r3, #4
 8019360:	e02c      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8019362:	2305      	movs	r3, #5
 8019364:	e02a      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	695b      	ldr	r3, [r3, #20]
 801936a:	687a      	ldr	r2, [r7, #4]
 801936c:	6810      	ldr	r0, [r2, #0]
 801936e:	f107 020c 	add.w	r2, r7, #12
 8019372:	2110      	movs	r1, #16
 8019374:	4798      	blx	r3
 8019376:	4603      	mov	r3, r0
 8019378:	2b00      	cmp	r3, #0
 801937a:	da02      	bge.n	8019382 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 801937c:	f06f 0304 	mvn.w	r3, #4
 8019380:	e01c      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019388:	2b00      	cmp	r3, #0
 801938a:	d101      	bne.n	8019390 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 801938c:	2306      	movs	r3, #6
 801938e:	e015      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	f003 0306 	and.w	r3, r3, #6
 8019396:	2b04      	cmp	r3, #4
 8019398:	d101      	bne.n	801939e <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 801939a:	2302      	movs	r3, #2
 801939c:	e00e      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	f003 0306 	and.w	r3, r3, #6
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d101      	bne.n	80193ac <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80193a8:	2303      	movs	r3, #3
 80193aa:	e007      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	f003 0306 	and.w	r3, r3, #6
 80193b2:	2b06      	cmp	r3, #6
 80193b4:	d101      	bne.n	80193ba <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80193b6:	2304      	movs	r3, #4
 80193b8:	e000      	b.n	80193bc <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80193ba:	2305      	movs	r3, #5
    }
  }
}
 80193bc:	4618      	mov	r0, r3
 80193be:	3710      	adds	r7, #16
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}

080193c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80193c8:	4b0b      	ldr	r3, [pc, #44]	; (80193f8 <HAL_Init+0x34>)
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	4a0a      	ldr	r2, [pc, #40]	; (80193f8 <HAL_Init+0x34>)
 80193ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80193d2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80193d4:	4b08      	ldr	r3, [pc, #32]	; (80193f8 <HAL_Init+0x34>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	4a07      	ldr	r2, [pc, #28]	; (80193f8 <HAL_Init+0x34>)
 80193da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80193de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80193e0:	2003      	movs	r0, #3
 80193e2:	f001 f825 	bl	801a430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80193e6:	2007      	movs	r0, #7
 80193e8:	f000 f808 	bl	80193fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80193ec:	f7ff f80e 	bl	801840c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80193f0:	2300      	movs	r3, #0
}
 80193f2:	4618      	mov	r0, r3
 80193f4:	bd80      	pop	{r7, pc}
 80193f6:	bf00      	nop
 80193f8:	40023c00 	.word	0x40023c00

080193fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b082      	sub	sp, #8
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8019404:	4b12      	ldr	r3, [pc, #72]	; (8019450 <HAL_InitTick+0x54>)
 8019406:	681a      	ldr	r2, [r3, #0]
 8019408:	4b12      	ldr	r3, [pc, #72]	; (8019454 <HAL_InitTick+0x58>)
 801940a:	781b      	ldrb	r3, [r3, #0]
 801940c:	4619      	mov	r1, r3
 801940e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019412:	fbb3 f3f1 	udiv	r3, r3, r1
 8019416:	fbb2 f3f3 	udiv	r3, r2, r3
 801941a:	4618      	mov	r0, r3
 801941c:	f001 f83d 	bl	801a49a <HAL_SYSTICK_Config>
 8019420:	4603      	mov	r3, r0
 8019422:	2b00      	cmp	r3, #0
 8019424:	d001      	beq.n	801942a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8019426:	2301      	movs	r3, #1
 8019428:	e00e      	b.n	8019448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	2b0f      	cmp	r3, #15
 801942e:	d80a      	bhi.n	8019446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019430:	2200      	movs	r2, #0
 8019432:	6879      	ldr	r1, [r7, #4]
 8019434:	f04f 30ff 	mov.w	r0, #4294967295
 8019438:	f001 f805 	bl	801a446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801943c:	4a06      	ldr	r2, [pc, #24]	; (8019458 <HAL_InitTick+0x5c>)
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019442:	2300      	movs	r3, #0
 8019444:	e000      	b.n	8019448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8019446:	2301      	movs	r3, #1
}
 8019448:	4618      	mov	r0, r3
 801944a:	3708      	adds	r7, #8
 801944c:	46bd      	mov	sp, r7
 801944e:	bd80      	pop	{r7, pc}
 8019450:	2000031c 	.word	0x2000031c
 8019454:	20000324 	.word	0x20000324
 8019458:	20000320 	.word	0x20000320

0801945c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801945c:	b480      	push	{r7}
 801945e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8019460:	4b06      	ldr	r3, [pc, #24]	; (801947c <HAL_IncTick+0x20>)
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	461a      	mov	r2, r3
 8019466:	4b06      	ldr	r3, [pc, #24]	; (8019480 <HAL_IncTick+0x24>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	4413      	add	r3, r2
 801946c:	4a04      	ldr	r2, [pc, #16]	; (8019480 <HAL_IncTick+0x24>)
 801946e:	6013      	str	r3, [r2, #0]
}
 8019470:	bf00      	nop
 8019472:	46bd      	mov	sp, r7
 8019474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019478:	4770      	bx	lr
 801947a:	bf00      	nop
 801947c:	20000324 	.word	0x20000324
 8019480:	2000dcc8 	.word	0x2000dcc8

08019484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019484:	b480      	push	{r7}
 8019486:	af00      	add	r7, sp, #0
  return uwTick;
 8019488:	4b03      	ldr	r3, [pc, #12]	; (8019498 <HAL_GetTick+0x14>)
 801948a:	681b      	ldr	r3, [r3, #0]
}
 801948c:	4618      	mov	r0, r3
 801948e:	46bd      	mov	sp, r7
 8019490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019494:	4770      	bx	lr
 8019496:	bf00      	nop
 8019498:	2000dcc8 	.word	0x2000dcc8

0801949c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b084      	sub	sp, #16
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80194a4:	f7ff ffee 	bl	8019484 <HAL_GetTick>
 80194a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194b4:	d005      	beq.n	80194c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80194b6:	4b0a      	ldr	r3, [pc, #40]	; (80194e0 <HAL_Delay+0x44>)
 80194b8:	781b      	ldrb	r3, [r3, #0]
 80194ba:	461a      	mov	r2, r3
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	4413      	add	r3, r2
 80194c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80194c2:	bf00      	nop
 80194c4:	f7ff ffde 	bl	8019484 <HAL_GetTick>
 80194c8:	4602      	mov	r2, r0
 80194ca:	68bb      	ldr	r3, [r7, #8]
 80194cc:	1ad3      	subs	r3, r2, r3
 80194ce:	68fa      	ldr	r2, [r7, #12]
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d8f7      	bhi.n	80194c4 <HAL_Delay+0x28>
  {
  }
}
 80194d4:	bf00      	nop
 80194d6:	bf00      	nop
 80194d8:	3710      	adds	r7, #16
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
 80194de:	bf00      	nop
 80194e0:	20000324 	.word	0x20000324

080194e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d101      	bne.n	80194f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80194f2:	2301      	movs	r3, #1
 80194f4:	e11c      	b.n	8019730 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80194fc:	b2db      	uxtb	r3, r3
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d131      	bne.n	8019566 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	4a8c      	ldr	r2, [pc, #560]	; (8019738 <HAL_CAN_Init+0x254>)
 8019506:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	4a8c      	ldr	r2, [pc, #560]	; (801973c <HAL_CAN_Init+0x258>)
 801950c:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	4a8b      	ldr	r2, [pc, #556]	; (8019740 <HAL_CAN_Init+0x25c>)
 8019512:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	4a8b      	ldr	r2, [pc, #556]	; (8019744 <HAL_CAN_Init+0x260>)
 8019518:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	4a8a      	ldr	r2, [pc, #552]	; (8019748 <HAL_CAN_Init+0x264>)
 801951e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	4a8a      	ldr	r2, [pc, #552]	; (801974c <HAL_CAN_Init+0x268>)
 8019524:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	4a89      	ldr	r2, [pc, #548]	; (8019750 <HAL_CAN_Init+0x26c>)
 801952a:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	4a89      	ldr	r2, [pc, #548]	; (8019754 <HAL_CAN_Init+0x270>)
 8019530:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	4a88      	ldr	r2, [pc, #544]	; (8019758 <HAL_CAN_Init+0x274>)
 8019536:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	4a88      	ldr	r2, [pc, #544]	; (801975c <HAL_CAN_Init+0x278>)
 801953c:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	4a87      	ldr	r2, [pc, #540]	; (8019760 <HAL_CAN_Init+0x27c>)
 8019542:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	4a87      	ldr	r2, [pc, #540]	; (8019764 <HAL_CAN_Init+0x280>)
 8019548:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	4a86      	ldr	r2, [pc, #536]	; (8019768 <HAL_CAN_Init+0x284>)
 801954e:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019554:	2b00      	cmp	r3, #0
 8019556:	d102      	bne.n	801955e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	4a84      	ldr	r2, [pc, #528]	; (801976c <HAL_CAN_Init+0x288>)
 801955c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019562:	6878      	ldr	r0, [r7, #4]
 8019564:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	681a      	ldr	r2, [r3, #0]
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	f042 0201 	orr.w	r2, r2, #1
 8019574:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019576:	f7ff ff85 	bl	8019484 <HAL_GetTick>
 801957a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801957c:	e012      	b.n	80195a4 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801957e:	f7ff ff81 	bl	8019484 <HAL_GetTick>
 8019582:	4602      	mov	r2, r0
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	1ad3      	subs	r3, r2, r3
 8019588:	2b0a      	cmp	r3, #10
 801958a:	d90b      	bls.n	80195a4 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019590:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	2205      	movs	r2, #5
 801959c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80195a0:	2301      	movs	r3, #1
 80195a2:	e0c5      	b.n	8019730 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	f003 0301 	and.w	r3, r3, #1
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d0e5      	beq.n	801957e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	681a      	ldr	r2, [r3, #0]
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	f022 0202 	bic.w	r2, r2, #2
 80195c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80195c2:	f7ff ff5f 	bl	8019484 <HAL_GetTick>
 80195c6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80195c8:	e012      	b.n	80195f0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80195ca:	f7ff ff5b 	bl	8019484 <HAL_GetTick>
 80195ce:	4602      	mov	r2, r0
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	1ad3      	subs	r3, r2, r3
 80195d4:	2b0a      	cmp	r3, #10
 80195d6:	d90b      	bls.n	80195f0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	2205      	movs	r2, #5
 80195e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80195ec:	2301      	movs	r3, #1
 80195ee:	e09f      	b.n	8019730 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	685b      	ldr	r3, [r3, #4]
 80195f6:	f003 0302 	and.w	r3, r3, #2
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d1e5      	bne.n	80195ca <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	7e1b      	ldrb	r3, [r3, #24]
 8019602:	2b01      	cmp	r3, #1
 8019604:	d108      	bne.n	8019618 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	681a      	ldr	r2, [r3, #0]
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019614:	601a      	str	r2, [r3, #0]
 8019616:	e007      	b.n	8019628 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	681a      	ldr	r2, [r3, #0]
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019626:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	7e5b      	ldrb	r3, [r3, #25]
 801962c:	2b01      	cmp	r3, #1
 801962e:	d108      	bne.n	8019642 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	681a      	ldr	r2, [r3, #0]
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801963e:	601a      	str	r2, [r3, #0]
 8019640:	e007      	b.n	8019652 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	681a      	ldr	r2, [r3, #0]
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019650:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	7e9b      	ldrb	r3, [r3, #26]
 8019656:	2b01      	cmp	r3, #1
 8019658:	d108      	bne.n	801966c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	681a      	ldr	r2, [r3, #0]
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	f042 0220 	orr.w	r2, r2, #32
 8019668:	601a      	str	r2, [r3, #0]
 801966a:	e007      	b.n	801967c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	681a      	ldr	r2, [r3, #0]
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	f022 0220 	bic.w	r2, r2, #32
 801967a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	7edb      	ldrb	r3, [r3, #27]
 8019680:	2b01      	cmp	r3, #1
 8019682:	d108      	bne.n	8019696 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	681a      	ldr	r2, [r3, #0]
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	f022 0210 	bic.w	r2, r2, #16
 8019692:	601a      	str	r2, [r3, #0]
 8019694:	e007      	b.n	80196a6 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	f042 0210 	orr.w	r2, r2, #16
 80196a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	7f1b      	ldrb	r3, [r3, #28]
 80196aa:	2b01      	cmp	r3, #1
 80196ac:	d108      	bne.n	80196c0 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	681a      	ldr	r2, [r3, #0]
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	f042 0208 	orr.w	r2, r2, #8
 80196bc:	601a      	str	r2, [r3, #0]
 80196be:	e007      	b.n	80196d0 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	681a      	ldr	r2, [r3, #0]
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	f022 0208 	bic.w	r2, r2, #8
 80196ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	7f5b      	ldrb	r3, [r3, #29]
 80196d4:	2b01      	cmp	r3, #1
 80196d6:	d108      	bne.n	80196ea <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	681a      	ldr	r2, [r3, #0]
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	f042 0204 	orr.w	r2, r2, #4
 80196e6:	601a      	str	r2, [r3, #0]
 80196e8:	e007      	b.n	80196fa <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	681a      	ldr	r2, [r3, #0]
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	f022 0204 	bic.w	r2, r2, #4
 80196f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	689a      	ldr	r2, [r3, #8]
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	68db      	ldr	r3, [r3, #12]
 8019702:	431a      	orrs	r2, r3
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	691b      	ldr	r3, [r3, #16]
 8019708:	431a      	orrs	r2, r3
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	695b      	ldr	r3, [r3, #20]
 801970e:	ea42 0103 	orr.w	r1, r2, r3
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	685b      	ldr	r3, [r3, #4]
 8019716:	1e5a      	subs	r2, r3, #1
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	430a      	orrs	r2, r1
 801971e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	2200      	movs	r2, #0
 8019724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	2201      	movs	r2, #1
 801972a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 801972e:	2300      	movs	r3, #0
}
 8019730:	4618      	mov	r0, r3
 8019732:	3710      	adds	r7, #16
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}
 8019738:	0801132d 	.word	0x0801132d
 801973c:	0801a22b 	.word	0x0801a22b
 8019740:	08011449 	.word	0x08011449
 8019744:	0801a23f 	.word	0x0801a23f
 8019748:	0801a1b3 	.word	0x0801a1b3
 801974c:	0801a1c7 	.word	0x0801a1c7
 8019750:	0801a1db 	.word	0x0801a1db
 8019754:	0801a1ef 	.word	0x0801a1ef
 8019758:	0801a203 	.word	0x0801a203
 801975c:	0801a217 	.word	0x0801a217
 8019760:	0801a253 	.word	0x0801a253
 8019764:	0801a267 	.word	0x0801a267
 8019768:	0801a27b 	.word	0x0801a27b
 801976c:	0801092d 	.word	0x0801092d

08019770 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8019770:	b480      	push	{r7}
 8019772:	b087      	sub	sp, #28
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
 8019778:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019786:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8019788:	7cfb      	ldrb	r3, [r7, #19]
 801978a:	2b01      	cmp	r3, #1
 801978c:	d003      	beq.n	8019796 <HAL_CAN_ConfigFilter+0x26>
 801978e:	7cfb      	ldrb	r3, [r7, #19]
 8019790:	2b02      	cmp	r3, #2
 8019792:	f040 80c7 	bne.w	8019924 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	4a69      	ldr	r2, [pc, #420]	; (8019940 <HAL_CAN_ConfigFilter+0x1d0>)
 801979c:	4293      	cmp	r3, r2
 801979e:	d001      	beq.n	80197a4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80197a0:	4b68      	ldr	r3, [pc, #416]	; (8019944 <HAL_CAN_ConfigFilter+0x1d4>)
 80197a2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80197a4:	697b      	ldr	r3, [r7, #20]
 80197a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80197aa:	f043 0201 	orr.w	r2, r3, #1
 80197ae:	697b      	ldr	r3, [r7, #20]
 80197b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80197b4:	697b      	ldr	r3, [r7, #20]
 80197b6:	4a63      	ldr	r2, [pc, #396]	; (8019944 <HAL_CAN_ConfigFilter+0x1d4>)
 80197b8:	4293      	cmp	r3, r2
 80197ba:	d111      	bne.n	80197e0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80197c2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80197c6:	697b      	ldr	r3, [r7, #20]
 80197c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80197cc:	697b      	ldr	r3, [r7, #20]
 80197ce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80197d2:	683b      	ldr	r3, [r7, #0]
 80197d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197d6:	021b      	lsls	r3, r3, #8
 80197d8:	431a      	orrs	r2, r3
 80197da:	697b      	ldr	r3, [r7, #20]
 80197dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	695b      	ldr	r3, [r3, #20]
 80197e4:	f003 031f 	and.w	r3, r3, #31
 80197e8:	2201      	movs	r2, #1
 80197ea:	fa02 f303 	lsl.w	r3, r2, r3
 80197ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80197f0:	697b      	ldr	r3, [r7, #20]
 80197f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	43db      	mvns	r3, r3
 80197fa:	401a      	ands	r2, r3
 80197fc:	697b      	ldr	r3, [r7, #20]
 80197fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	69db      	ldr	r3, [r3, #28]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d123      	bne.n	8019852 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801980a:	697b      	ldr	r3, [r7, #20]
 801980c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	43db      	mvns	r3, r3
 8019814:	401a      	ands	r2, r3
 8019816:	697b      	ldr	r3, [r7, #20]
 8019818:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	68db      	ldr	r3, [r3, #12]
 8019820:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	685b      	ldr	r3, [r3, #4]
 8019826:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019828:	683a      	ldr	r2, [r7, #0]
 801982a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801982c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801982e:	697b      	ldr	r3, [r7, #20]
 8019830:	3248      	adds	r2, #72	; 0x48
 8019832:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	689b      	ldr	r3, [r3, #8]
 801983a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019842:	683b      	ldr	r3, [r7, #0]
 8019844:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019846:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019848:	6979      	ldr	r1, [r7, #20]
 801984a:	3348      	adds	r3, #72	; 0x48
 801984c:	00db      	lsls	r3, r3, #3
 801984e:	440b      	add	r3, r1
 8019850:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8019852:	683b      	ldr	r3, [r7, #0]
 8019854:	69db      	ldr	r3, [r3, #28]
 8019856:	2b01      	cmp	r3, #1
 8019858:	d122      	bne.n	80198a0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 801985a:	697b      	ldr	r3, [r7, #20]
 801985c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	431a      	orrs	r2, r3
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801986a:	683b      	ldr	r3, [r7, #0]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8019870:	683b      	ldr	r3, [r7, #0]
 8019872:	685b      	ldr	r3, [r3, #4]
 8019874:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019876:	683a      	ldr	r2, [r7, #0]
 8019878:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801987a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	3248      	adds	r2, #72	; 0x48
 8019880:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019884:	683b      	ldr	r3, [r7, #0]
 8019886:	689b      	ldr	r3, [r3, #8]
 8019888:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	68db      	ldr	r3, [r3, #12]
 801988e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019894:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019896:	6979      	ldr	r1, [r7, #20]
 8019898:	3348      	adds	r3, #72	; 0x48
 801989a:	00db      	lsls	r3, r3, #3
 801989c:	440b      	add	r3, r1
 801989e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80198a0:	683b      	ldr	r3, [r7, #0]
 80198a2:	699b      	ldr	r3, [r3, #24]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d109      	bne.n	80198bc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80198a8:	697b      	ldr	r3, [r7, #20]
 80198aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	43db      	mvns	r3, r3
 80198b2:	401a      	ands	r2, r3
 80198b4:	697b      	ldr	r3, [r7, #20]
 80198b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80198ba:	e007      	b.n	80198cc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	431a      	orrs	r2, r3
 80198c6:	697b      	ldr	r3, [r7, #20]
 80198c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80198cc:	683b      	ldr	r3, [r7, #0]
 80198ce:	691b      	ldr	r3, [r3, #16]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d109      	bne.n	80198e8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80198d4:	697b      	ldr	r3, [r7, #20]
 80198d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	43db      	mvns	r3, r3
 80198de:	401a      	ands	r2, r3
 80198e0:	697b      	ldr	r3, [r7, #20]
 80198e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80198e6:	e007      	b.n	80198f8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80198e8:	697b      	ldr	r3, [r7, #20]
 80198ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	431a      	orrs	r2, r3
 80198f2:	697b      	ldr	r3, [r7, #20]
 80198f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80198f8:	683b      	ldr	r3, [r7, #0]
 80198fa:	6a1b      	ldr	r3, [r3, #32]
 80198fc:	2b01      	cmp	r3, #1
 80198fe:	d107      	bne.n	8019910 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8019900:	697b      	ldr	r3, [r7, #20]
 8019902:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	431a      	orrs	r2, r3
 801990a:	697b      	ldr	r3, [r7, #20]
 801990c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8019910:	697b      	ldr	r3, [r7, #20]
 8019912:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8019916:	f023 0201 	bic.w	r2, r3, #1
 801991a:	697b      	ldr	r3, [r7, #20]
 801991c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8019920:	2300      	movs	r3, #0
 8019922:	e006      	b.n	8019932 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019928:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019930:	2301      	movs	r3, #1
  }
}
 8019932:	4618      	mov	r0, r3
 8019934:	371c      	adds	r7, #28
 8019936:	46bd      	mov	sp, r7
 8019938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993c:	4770      	bx	lr
 801993e:	bf00      	nop
 8019940:	40003400 	.word	0x40003400
 8019944:	40006400 	.word	0x40006400

08019948 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b084      	sub	sp, #16
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019956:	b2db      	uxtb	r3, r3
 8019958:	2b01      	cmp	r3, #1
 801995a:	d12e      	bne.n	80199ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2202      	movs	r2, #2
 8019960:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	681a      	ldr	r2, [r3, #0]
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	f022 0201 	bic.w	r2, r2, #1
 8019972:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019974:	f7ff fd86 	bl	8019484 <HAL_GetTick>
 8019978:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801997a:	e012      	b.n	80199a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801997c:	f7ff fd82 	bl	8019484 <HAL_GetTick>
 8019980:	4602      	mov	r2, r0
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	1ad3      	subs	r3, r2, r3
 8019986:	2b0a      	cmp	r3, #10
 8019988:	d90b      	bls.n	80199a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801998e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	2205      	movs	r2, #5
 801999a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801999e:	2301      	movs	r3, #1
 80199a0:	e012      	b.n	80199c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	685b      	ldr	r3, [r3, #4]
 80199a8:	f003 0301 	and.w	r3, r3, #1
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d1e5      	bne.n	801997c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	2200      	movs	r2, #0
 80199b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80199b6:	2300      	movs	r3, #0
 80199b8:	e006      	b.n	80199c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80199c6:	2301      	movs	r3, #1
  }
}
 80199c8:	4618      	mov	r0, r3
 80199ca:	3710      	adds	r7, #16
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}

080199d0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80199d0:	b480      	push	{r7}
 80199d2:	b089      	sub	sp, #36	; 0x24
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	60f8      	str	r0, [r7, #12]
 80199d8:	60b9      	str	r1, [r7, #8]
 80199da:	607a      	str	r2, [r7, #4]
 80199dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80199e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	689b      	ldr	r3, [r3, #8]
 80199ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80199ee:	7ffb      	ldrb	r3, [r7, #31]
 80199f0:	2b01      	cmp	r3, #1
 80199f2:	d003      	beq.n	80199fc <HAL_CAN_AddTxMessage+0x2c>
 80199f4:	7ffb      	ldrb	r3, [r7, #31]
 80199f6:	2b02      	cmp	r3, #2
 80199f8:	f040 80ad 	bne.w	8019b56 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80199fc:	69bb      	ldr	r3, [r7, #24]
 80199fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d10a      	bne.n	8019a1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8019a06:	69bb      	ldr	r3, [r7, #24]
 8019a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d105      	bne.n	8019a1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8019a10:	69bb      	ldr	r3, [r7, #24]
 8019a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	f000 8095 	beq.w	8019b46 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8019a1c:	69bb      	ldr	r3, [r7, #24]
 8019a1e:	0e1b      	lsrs	r3, r3, #24
 8019a20:	f003 0303 	and.w	r3, r3, #3
 8019a24:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8019a26:	2201      	movs	r2, #1
 8019a28:	697b      	ldr	r3, [r7, #20]
 8019a2a:	409a      	lsls	r2, r3
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	689b      	ldr	r3, [r3, #8]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d10d      	bne.n	8019a54 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8019a38:	68bb      	ldr	r3, [r7, #8]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8019a3e:	68bb      	ldr	r3, [r7, #8]
 8019a40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8019a42:	68f9      	ldr	r1, [r7, #12]
 8019a44:	6809      	ldr	r1, [r1, #0]
 8019a46:	431a      	orrs	r2, r3
 8019a48:	697b      	ldr	r3, [r7, #20]
 8019a4a:	3318      	adds	r3, #24
 8019a4c:	011b      	lsls	r3, r3, #4
 8019a4e:	440b      	add	r3, r1
 8019a50:	601a      	str	r2, [r3, #0]
 8019a52:	e00f      	b.n	8019a74 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8019a54:	68bb      	ldr	r3, [r7, #8]
 8019a56:	685b      	ldr	r3, [r3, #4]
 8019a58:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8019a5a:	68bb      	ldr	r3, [r7, #8]
 8019a5c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8019a5e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8019a60:	68bb      	ldr	r3, [r7, #8]
 8019a62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8019a64:	68f9      	ldr	r1, [r7, #12]
 8019a66:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8019a68:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8019a6a:	697b      	ldr	r3, [r7, #20]
 8019a6c:	3318      	adds	r3, #24
 8019a6e:	011b      	lsls	r3, r3, #4
 8019a70:	440b      	add	r3, r1
 8019a72:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	6819      	ldr	r1, [r3, #0]
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	691a      	ldr	r2, [r3, #16]
 8019a7c:	697b      	ldr	r3, [r7, #20]
 8019a7e:	3318      	adds	r3, #24
 8019a80:	011b      	lsls	r3, r3, #4
 8019a82:	440b      	add	r3, r1
 8019a84:	3304      	adds	r3, #4
 8019a86:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	7d1b      	ldrb	r3, [r3, #20]
 8019a8c:	2b01      	cmp	r3, #1
 8019a8e:	d111      	bne.n	8019ab4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	681a      	ldr	r2, [r3, #0]
 8019a94:	697b      	ldr	r3, [r7, #20]
 8019a96:	3318      	adds	r3, #24
 8019a98:	011b      	lsls	r3, r3, #4
 8019a9a:	4413      	add	r3, r2
 8019a9c:	3304      	adds	r3, #4
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	68fa      	ldr	r2, [r7, #12]
 8019aa2:	6811      	ldr	r1, [r2, #0]
 8019aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019aa8:	697b      	ldr	r3, [r7, #20]
 8019aaa:	3318      	adds	r3, #24
 8019aac:	011b      	lsls	r3, r3, #4
 8019aae:	440b      	add	r3, r1
 8019ab0:	3304      	adds	r3, #4
 8019ab2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	3307      	adds	r3, #7
 8019ab8:	781b      	ldrb	r3, [r3, #0]
 8019aba:	061a      	lsls	r2, r3, #24
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	3306      	adds	r3, #6
 8019ac0:	781b      	ldrb	r3, [r3, #0]
 8019ac2:	041b      	lsls	r3, r3, #16
 8019ac4:	431a      	orrs	r2, r3
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	3305      	adds	r3, #5
 8019aca:	781b      	ldrb	r3, [r3, #0]
 8019acc:	021b      	lsls	r3, r3, #8
 8019ace:	4313      	orrs	r3, r2
 8019ad0:	687a      	ldr	r2, [r7, #4]
 8019ad2:	3204      	adds	r2, #4
 8019ad4:	7812      	ldrb	r2, [r2, #0]
 8019ad6:	4610      	mov	r0, r2
 8019ad8:	68fa      	ldr	r2, [r7, #12]
 8019ada:	6811      	ldr	r1, [r2, #0]
 8019adc:	ea43 0200 	orr.w	r2, r3, r0
 8019ae0:	697b      	ldr	r3, [r7, #20]
 8019ae2:	011b      	lsls	r3, r3, #4
 8019ae4:	440b      	add	r3, r1
 8019ae6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8019aea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	3303      	adds	r3, #3
 8019af0:	781b      	ldrb	r3, [r3, #0]
 8019af2:	061a      	lsls	r2, r3, #24
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	3302      	adds	r3, #2
 8019af8:	781b      	ldrb	r3, [r3, #0]
 8019afa:	041b      	lsls	r3, r3, #16
 8019afc:	431a      	orrs	r2, r3
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	3301      	adds	r3, #1
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	021b      	lsls	r3, r3, #8
 8019b06:	4313      	orrs	r3, r2
 8019b08:	687a      	ldr	r2, [r7, #4]
 8019b0a:	7812      	ldrb	r2, [r2, #0]
 8019b0c:	4610      	mov	r0, r2
 8019b0e:	68fa      	ldr	r2, [r7, #12]
 8019b10:	6811      	ldr	r1, [r2, #0]
 8019b12:	ea43 0200 	orr.w	r2, r3, r0
 8019b16:	697b      	ldr	r3, [r7, #20]
 8019b18:	011b      	lsls	r3, r3, #4
 8019b1a:	440b      	add	r3, r1
 8019b1c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8019b20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	681a      	ldr	r2, [r3, #0]
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	3318      	adds	r3, #24
 8019b2a:	011b      	lsls	r3, r3, #4
 8019b2c:	4413      	add	r3, r2
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	68fa      	ldr	r2, [r7, #12]
 8019b32:	6811      	ldr	r1, [r2, #0]
 8019b34:	f043 0201 	orr.w	r2, r3, #1
 8019b38:	697b      	ldr	r3, [r7, #20]
 8019b3a:	3318      	adds	r3, #24
 8019b3c:	011b      	lsls	r3, r3, #4
 8019b3e:	440b      	add	r3, r1
 8019b40:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8019b42:	2300      	movs	r3, #0
 8019b44:	e00e      	b.n	8019b64 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8019b52:	2301      	movs	r3, #1
 8019b54:	e006      	b.n	8019b64 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019b62:	2301      	movs	r3, #1
  }
}
 8019b64:	4618      	mov	r0, r3
 8019b66:	3724      	adds	r7, #36	; 0x24
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6e:	4770      	bx	lr

08019b70 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8019b70:	b480      	push	{r7}
 8019b72:	b085      	sub	sp, #20
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019b84:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8019b86:	7afb      	ldrb	r3, [r7, #11]
 8019b88:	2b01      	cmp	r3, #1
 8019b8a:	d002      	beq.n	8019b92 <HAL_CAN_IsTxMessagePending+0x22>
 8019b8c:	7afb      	ldrb	r3, [r7, #11]
 8019b8e:	2b02      	cmp	r3, #2
 8019b90:	d10b      	bne.n	8019baa <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	689a      	ldr	r2, [r3, #8]
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	069b      	lsls	r3, r3, #26
 8019b9c:	401a      	ands	r2, r3
 8019b9e:	683b      	ldr	r3, [r7, #0]
 8019ba0:	069b      	lsls	r3, r3, #26
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d001      	beq.n	8019baa <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8019ba6:	2301      	movs	r3, #1
 8019ba8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8019baa:	68fb      	ldr	r3, [r7, #12]
}
 8019bac:	4618      	mov	r0, r3
 8019bae:	3714      	adds	r7, #20
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb6:	4770      	bx	lr

08019bb8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8019bb8:	b480      	push	{r7}
 8019bba:	b087      	sub	sp, #28
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	60f8      	str	r0, [r7, #12]
 8019bc0:	60b9      	str	r1, [r7, #8]
 8019bc2:	607a      	str	r2, [r7, #4]
 8019bc4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019bcc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8019bce:	7dfb      	ldrb	r3, [r7, #23]
 8019bd0:	2b01      	cmp	r3, #1
 8019bd2:	d003      	beq.n	8019bdc <HAL_CAN_GetRxMessage+0x24>
 8019bd4:	7dfb      	ldrb	r3, [r7, #23]
 8019bd6:	2b02      	cmp	r3, #2
 8019bd8:	f040 80f3 	bne.w	8019dc2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d10e      	bne.n	8019c00 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	68db      	ldr	r3, [r3, #12]
 8019be8:	f003 0303 	and.w	r3, r3, #3
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d116      	bne.n	8019c1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	e0e7      	b.n	8019dd0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	691b      	ldr	r3, [r3, #16]
 8019c06:	f003 0303 	and.w	r3, r3, #3
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d107      	bne.n	8019c1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8019c1a:	2301      	movs	r3, #1
 8019c1c:	e0d8      	b.n	8019dd0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	681a      	ldr	r2, [r3, #0]
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	331b      	adds	r3, #27
 8019c26:	011b      	lsls	r3, r3, #4
 8019c28:	4413      	add	r3, r2
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	f003 0204 	and.w	r2, r3, #4
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	689b      	ldr	r3, [r3, #8]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d10c      	bne.n	8019c56 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	681a      	ldr	r2, [r3, #0]
 8019c40:	68bb      	ldr	r3, [r7, #8]
 8019c42:	331b      	adds	r3, #27
 8019c44:	011b      	lsls	r3, r3, #4
 8019c46:	4413      	add	r3, r2
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	0d5b      	lsrs	r3, r3, #21
 8019c4c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	601a      	str	r2, [r3, #0]
 8019c54:	e00b      	b.n	8019c6e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	681a      	ldr	r2, [r3, #0]
 8019c5a:	68bb      	ldr	r3, [r7, #8]
 8019c5c:	331b      	adds	r3, #27
 8019c5e:	011b      	lsls	r3, r3, #4
 8019c60:	4413      	add	r3, r2
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	08db      	lsrs	r3, r3, #3
 8019c66:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	681a      	ldr	r2, [r3, #0]
 8019c72:	68bb      	ldr	r3, [r7, #8]
 8019c74:	331b      	adds	r3, #27
 8019c76:	011b      	lsls	r3, r3, #4
 8019c78:	4413      	add	r3, r2
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	f003 0202 	and.w	r2, r3, #2
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	681a      	ldr	r2, [r3, #0]
 8019c88:	68bb      	ldr	r3, [r7, #8]
 8019c8a:	331b      	adds	r3, #27
 8019c8c:	011b      	lsls	r3, r3, #4
 8019c8e:	4413      	add	r3, r2
 8019c90:	3304      	adds	r3, #4
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	f003 020f 	and.w	r2, r3, #15
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	681a      	ldr	r2, [r3, #0]
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	331b      	adds	r3, #27
 8019ca4:	011b      	lsls	r3, r3, #4
 8019ca6:	4413      	add	r3, r2
 8019ca8:	3304      	adds	r3, #4
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	0a1b      	lsrs	r3, r3, #8
 8019cae:	b2da      	uxtb	r2, r3
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	681a      	ldr	r2, [r3, #0]
 8019cb8:	68bb      	ldr	r3, [r7, #8]
 8019cba:	331b      	adds	r3, #27
 8019cbc:	011b      	lsls	r3, r3, #4
 8019cbe:	4413      	add	r3, r2
 8019cc0:	3304      	adds	r3, #4
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	0c1b      	lsrs	r3, r3, #16
 8019cc6:	b29a      	uxth	r2, r3
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	681a      	ldr	r2, [r3, #0]
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	011b      	lsls	r3, r3, #4
 8019cd4:	4413      	add	r3, r2
 8019cd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	b2da      	uxtb	r2, r3
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	681a      	ldr	r2, [r3, #0]
 8019ce6:	68bb      	ldr	r3, [r7, #8]
 8019ce8:	011b      	lsls	r3, r3, #4
 8019cea:	4413      	add	r3, r2
 8019cec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	0a1a      	lsrs	r2, r3, #8
 8019cf4:	683b      	ldr	r3, [r7, #0]
 8019cf6:	3301      	adds	r3, #1
 8019cf8:	b2d2      	uxtb	r2, r2
 8019cfa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	681a      	ldr	r2, [r3, #0]
 8019d00:	68bb      	ldr	r3, [r7, #8]
 8019d02:	011b      	lsls	r3, r3, #4
 8019d04:	4413      	add	r3, r2
 8019d06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	0c1a      	lsrs	r2, r3, #16
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	3302      	adds	r3, #2
 8019d12:	b2d2      	uxtb	r2, r2
 8019d14:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	681a      	ldr	r2, [r3, #0]
 8019d1a:	68bb      	ldr	r3, [r7, #8]
 8019d1c:	011b      	lsls	r3, r3, #4
 8019d1e:	4413      	add	r3, r2
 8019d20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	0e1a      	lsrs	r2, r3, #24
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	3303      	adds	r3, #3
 8019d2c:	b2d2      	uxtb	r2, r2
 8019d2e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	681a      	ldr	r2, [r3, #0]
 8019d34:	68bb      	ldr	r3, [r7, #8]
 8019d36:	011b      	lsls	r3, r3, #4
 8019d38:	4413      	add	r3, r2
 8019d3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8019d3e:	681a      	ldr	r2, [r3, #0]
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	3304      	adds	r3, #4
 8019d44:	b2d2      	uxtb	r2, r2
 8019d46:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	681a      	ldr	r2, [r3, #0]
 8019d4c:	68bb      	ldr	r3, [r7, #8]
 8019d4e:	011b      	lsls	r3, r3, #4
 8019d50:	4413      	add	r3, r2
 8019d52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	0a1a      	lsrs	r2, r3, #8
 8019d5a:	683b      	ldr	r3, [r7, #0]
 8019d5c:	3305      	adds	r3, #5
 8019d5e:	b2d2      	uxtb	r2, r2
 8019d60:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	681a      	ldr	r2, [r3, #0]
 8019d66:	68bb      	ldr	r3, [r7, #8]
 8019d68:	011b      	lsls	r3, r3, #4
 8019d6a:	4413      	add	r3, r2
 8019d6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	0c1a      	lsrs	r2, r3, #16
 8019d74:	683b      	ldr	r3, [r7, #0]
 8019d76:	3306      	adds	r3, #6
 8019d78:	b2d2      	uxtb	r2, r2
 8019d7a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	681a      	ldr	r2, [r3, #0]
 8019d80:	68bb      	ldr	r3, [r7, #8]
 8019d82:	011b      	lsls	r3, r3, #4
 8019d84:	4413      	add	r3, r2
 8019d86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	0e1a      	lsrs	r2, r3, #24
 8019d8e:	683b      	ldr	r3, [r7, #0]
 8019d90:	3307      	adds	r3, #7
 8019d92:	b2d2      	uxtb	r2, r2
 8019d94:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8019d96:	68bb      	ldr	r3, [r7, #8]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d108      	bne.n	8019dae <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	68da      	ldr	r2, [r3, #12]
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	f042 0220 	orr.w	r2, r2, #32
 8019daa:	60da      	str	r2, [r3, #12]
 8019dac:	e007      	b.n	8019dbe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	691a      	ldr	r2, [r3, #16]
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f042 0220 	orr.w	r2, r2, #32
 8019dbc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	e006      	b.n	8019dd0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019dc2:	68fb      	ldr	r3, [r7, #12]
 8019dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019dce:	2301      	movs	r3, #1
  }
}
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	371c      	adds	r7, #28
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dda:	4770      	bx	lr

08019ddc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8019ddc:	b480      	push	{r7}
 8019dde:	b085      	sub	sp, #20
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
 8019de4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019dec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8019dee:	7bfb      	ldrb	r3, [r7, #15]
 8019df0:	2b01      	cmp	r3, #1
 8019df2:	d002      	beq.n	8019dfa <HAL_CAN_ActivateNotification+0x1e>
 8019df4:	7bfb      	ldrb	r3, [r7, #15]
 8019df6:	2b02      	cmp	r3, #2
 8019df8:	d109      	bne.n	8019e0e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	6959      	ldr	r1, [r3, #20]
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	683a      	ldr	r2, [r7, #0]
 8019e06:	430a      	orrs	r2, r1
 8019e08:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	e006      	b.n	8019e1c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019e1a:	2301      	movs	r3, #1
  }
}
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3714      	adds	r7, #20
 8019e20:	46bd      	mov	sp, r7
 8019e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e26:	4770      	bx	lr

08019e28 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b08a      	sub	sp, #40	; 0x28
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8019e30:	2300      	movs	r3, #0
 8019e32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	695b      	ldr	r3, [r3, #20]
 8019e3a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	685b      	ldr	r3, [r3, #4]
 8019e42:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	689b      	ldr	r3, [r3, #8]
 8019e4a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	68db      	ldr	r3, [r3, #12]
 8019e52:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	691b      	ldr	r3, [r3, #16]
 8019e5a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	699b      	ldr	r3, [r3, #24]
 8019e62:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8019e64:	6a3b      	ldr	r3, [r7, #32]
 8019e66:	f003 0301 	and.w	r3, r3, #1
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	f000 8083 	beq.w	8019f76 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8019e70:	69bb      	ldr	r3, [r7, #24]
 8019e72:	f003 0301 	and.w	r3, r3, #1
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d025      	beq.n	8019ec6 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	2201      	movs	r2, #1
 8019e80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8019e82:	69bb      	ldr	r3, [r7, #24]
 8019e84:	f003 0302 	and.w	r3, r3, #2
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d004      	beq.n	8019e96 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e90:	6878      	ldr	r0, [r7, #4]
 8019e92:	4798      	blx	r3
 8019e94:	e017      	b.n	8019ec6 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8019e96:	69bb      	ldr	r3, [r7, #24]
 8019e98:	f003 0304 	and.w	r3, r3, #4
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d004      	beq.n	8019eaa <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8019ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8019ea8:	e00d      	b.n	8019ec6 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8019eaa:	69bb      	ldr	r3, [r7, #24]
 8019eac:	f003 0308 	and.w	r3, r3, #8
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d004      	beq.n	8019ebe <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8019eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8019eba:	627b      	str	r3, [r7, #36]	; 0x24
 8019ebc:	e003      	b.n	8019ec6 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ec2:	6878      	ldr	r0, [r7, #4]
 8019ec4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8019ec6:	69bb      	ldr	r3, [r7, #24]
 8019ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d026      	beq.n	8019f1e <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019ed8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8019eda:	69bb      	ldr	r3, [r7, #24]
 8019edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d004      	beq.n	8019eee <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ee8:	6878      	ldr	r0, [r7, #4]
 8019eea:	4798      	blx	r3
 8019eec:	e017      	b.n	8019f1e <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8019eee:	69bb      	ldr	r3, [r7, #24]
 8019ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d004      	beq.n	8019f02 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8019ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019efe:	627b      	str	r3, [r7, #36]	; 0x24
 8019f00:	e00d      	b.n	8019f1e <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8019f02:	69bb      	ldr	r3, [r7, #24]
 8019f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d004      	beq.n	8019f16 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8019f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019f12:	627b      	str	r3, [r7, #36]	; 0x24
 8019f14:	e003      	b.n	8019f1e <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f1a:	6878      	ldr	r0, [r7, #4]
 8019f1c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8019f1e:	69bb      	ldr	r3, [r7, #24]
 8019f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d026      	beq.n	8019f76 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8019f30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8019f32:	69bb      	ldr	r3, [r7, #24]
 8019f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d004      	beq.n	8019f46 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f40:	6878      	ldr	r0, [r7, #4]
 8019f42:	4798      	blx	r3
 8019f44:	e017      	b.n	8019f76 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8019f46:	69bb      	ldr	r3, [r7, #24]
 8019f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d004      	beq.n	8019f5a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8019f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019f56:	627b      	str	r3, [r7, #36]	; 0x24
 8019f58:	e00d      	b.n	8019f76 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8019f5a:	69bb      	ldr	r3, [r7, #24]
 8019f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d004      	beq.n	8019f6e <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8019f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8019f6c:	e003      	b.n	8019f76 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f72:	6878      	ldr	r0, [r7, #4]
 8019f74:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8019f76:	6a3b      	ldr	r3, [r7, #32]
 8019f78:	f003 0308 	and.w	r3, r3, #8
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d00c      	beq.n	8019f9a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	f003 0310 	and.w	r3, r3, #16
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d007      	beq.n	8019f9a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8019f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019f90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	2210      	movs	r2, #16
 8019f98:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8019f9a:	6a3b      	ldr	r3, [r7, #32]
 8019f9c:	f003 0304 	and.w	r3, r3, #4
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d00c      	beq.n	8019fbe <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8019fa4:	697b      	ldr	r3, [r7, #20]
 8019fa6:	f003 0308 	and.w	r3, r3, #8
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d007      	beq.n	8019fbe <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	2208      	movs	r2, #8
 8019fb4:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019fba:	6878      	ldr	r0, [r7, #4]
 8019fbc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8019fbe:	6a3b      	ldr	r3, [r7, #32]
 8019fc0:	f003 0302 	and.w	r3, r3, #2
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d00a      	beq.n	8019fde <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	68db      	ldr	r3, [r3, #12]
 8019fce:	f003 0303 	and.w	r3, r3, #3
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d003      	beq.n	8019fde <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fda:	6878      	ldr	r0, [r7, #4]
 8019fdc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8019fde:	6a3b      	ldr	r3, [r7, #32]
 8019fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d00c      	beq.n	801a002 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8019fe8:	693b      	ldr	r3, [r7, #16]
 8019fea:	f003 0310 	and.w	r3, r3, #16
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d007      	beq.n	801a002 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8019ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019ff8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	2210      	movs	r2, #16
 801a000:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 801a002:	6a3b      	ldr	r3, [r7, #32]
 801a004:	f003 0320 	and.w	r3, r3, #32
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d00c      	beq.n	801a026 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 801a00c:	693b      	ldr	r3, [r7, #16]
 801a00e:	f003 0308 	and.w	r3, r3, #8
 801a012:	2b00      	cmp	r3, #0
 801a014:	d007      	beq.n	801a026 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	2208      	movs	r2, #8
 801a01c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a022:	6878      	ldr	r0, [r7, #4]
 801a024:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801a026:	6a3b      	ldr	r3, [r7, #32]
 801a028:	f003 0310 	and.w	r3, r3, #16
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d00a      	beq.n	801a046 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	691b      	ldr	r3, [r3, #16]
 801a036:	f003 0303 	and.w	r3, r3, #3
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d003      	beq.n	801a046 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a042:	6878      	ldr	r0, [r7, #4]
 801a044:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801a046:	6a3b      	ldr	r3, [r7, #32]
 801a048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d00c      	beq.n	801a06a <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 801a050:	69fb      	ldr	r3, [r7, #28]
 801a052:	f003 0310 	and.w	r3, r3, #16
 801a056:	2b00      	cmp	r3, #0
 801a058:	d007      	beq.n	801a06a <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	2210      	movs	r2, #16
 801a060:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a066:	6878      	ldr	r0, [r7, #4]
 801a068:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801a06a:	6a3b      	ldr	r3, [r7, #32]
 801a06c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a070:	2b00      	cmp	r3, #0
 801a072:	d00c      	beq.n	801a08e <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 801a074:	69fb      	ldr	r3, [r7, #28]
 801a076:	f003 0308 	and.w	r3, r3, #8
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d007      	beq.n	801a08e <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	2208      	movs	r2, #8
 801a084:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a08a:	6878      	ldr	r0, [r7, #4]
 801a08c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801a08e:	6a3b      	ldr	r3, [r7, #32]
 801a090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a094:	2b00      	cmp	r3, #0
 801a096:	d07b      	beq.n	801a190 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 801a098:	69fb      	ldr	r3, [r7, #28]
 801a09a:	f003 0304 	and.w	r3, r3, #4
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d072      	beq.n	801a188 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801a0a2:	6a3b      	ldr	r3, [r7, #32]
 801a0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d008      	beq.n	801a0be <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d003      	beq.n	801a0be <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 801a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b8:	f043 0301 	orr.w	r3, r3, #1
 801a0bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801a0be:	6a3b      	ldr	r3, [r7, #32]
 801a0c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d008      	beq.n	801a0da <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d003      	beq.n	801a0da <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 801a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0d4:	f043 0302 	orr.w	r3, r3, #2
 801a0d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801a0da:	6a3b      	ldr	r3, [r7, #32]
 801a0dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d008      	beq.n	801a0f6 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d003      	beq.n	801a0f6 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 801a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0f0:	f043 0304 	orr.w	r3, r3, #4
 801a0f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801a0f6:	6a3b      	ldr	r3, [r7, #32]
 801a0f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d043      	beq.n	801a188 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801a106:	2b00      	cmp	r3, #0
 801a108:	d03e      	beq.n	801a188 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801a110:	2b60      	cmp	r3, #96	; 0x60
 801a112:	d02b      	beq.n	801a16c <HAL_CAN_IRQHandler+0x344>
 801a114:	2b60      	cmp	r3, #96	; 0x60
 801a116:	d82e      	bhi.n	801a176 <HAL_CAN_IRQHandler+0x34e>
 801a118:	2b50      	cmp	r3, #80	; 0x50
 801a11a:	d022      	beq.n	801a162 <HAL_CAN_IRQHandler+0x33a>
 801a11c:	2b50      	cmp	r3, #80	; 0x50
 801a11e:	d82a      	bhi.n	801a176 <HAL_CAN_IRQHandler+0x34e>
 801a120:	2b40      	cmp	r3, #64	; 0x40
 801a122:	d019      	beq.n	801a158 <HAL_CAN_IRQHandler+0x330>
 801a124:	2b40      	cmp	r3, #64	; 0x40
 801a126:	d826      	bhi.n	801a176 <HAL_CAN_IRQHandler+0x34e>
 801a128:	2b30      	cmp	r3, #48	; 0x30
 801a12a:	d010      	beq.n	801a14e <HAL_CAN_IRQHandler+0x326>
 801a12c:	2b30      	cmp	r3, #48	; 0x30
 801a12e:	d822      	bhi.n	801a176 <HAL_CAN_IRQHandler+0x34e>
 801a130:	2b10      	cmp	r3, #16
 801a132:	d002      	beq.n	801a13a <HAL_CAN_IRQHandler+0x312>
 801a134:	2b20      	cmp	r3, #32
 801a136:	d005      	beq.n	801a144 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801a138:	e01d      	b.n	801a176 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 801a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a13c:	f043 0308 	orr.w	r3, r3, #8
 801a140:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a142:	e019      	b.n	801a178 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 801a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a146:	f043 0310 	orr.w	r3, r3, #16
 801a14a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a14c:	e014      	b.n	801a178 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 801a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a150:	f043 0320 	orr.w	r3, r3, #32
 801a154:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a156:	e00f      	b.n	801a178 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 801a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a15e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a160:	e00a      	b.n	801a178 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 801a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a168:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a16a:	e005      	b.n	801a178 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 801a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a16e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a172:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a174:	e000      	b.n	801a178 <HAL_CAN_IRQHandler+0x350>
            break;
 801a176:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	699a      	ldr	r2, [r3, #24]
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801a186:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	2204      	movs	r2, #4
 801a18e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a192:	2b00      	cmp	r3, #0
 801a194:	d009      	beq.n	801a1aa <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a19c:	431a      	orrs	r2, r3
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a1a6:	6878      	ldr	r0, [r7, #4]
 801a1a8:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801a1aa:	bf00      	nop
 801a1ac:	3728      	adds	r7, #40	; 0x28
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}

0801a1b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a1b2:	b480      	push	{r7}
 801a1b4:	b083      	sub	sp, #12
 801a1b6:	af00      	add	r7, sp, #0
 801a1b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801a1ba:	bf00      	nop
 801a1bc:	370c      	adds	r7, #12
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c4:	4770      	bx	lr

0801a1c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a1c6:	b480      	push	{r7}
 801a1c8:	b083      	sub	sp, #12
 801a1ca:	af00      	add	r7, sp, #0
 801a1cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801a1ce:	bf00      	nop
 801a1d0:	370c      	adds	r7, #12
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d8:	4770      	bx	lr

0801a1da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a1da:	b480      	push	{r7}
 801a1dc:	b083      	sub	sp, #12
 801a1de:	af00      	add	r7, sp, #0
 801a1e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 801a1e2:	bf00      	nop
 801a1e4:	370c      	adds	r7, #12
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ec:	4770      	bx	lr

0801a1ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a1ee:	b480      	push	{r7}
 801a1f0:	b083      	sub	sp, #12
 801a1f2:	af00      	add	r7, sp, #0
 801a1f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801a1f6:	bf00      	nop
 801a1f8:	370c      	adds	r7, #12
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a200:	4770      	bx	lr

0801a202 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a202:	b480      	push	{r7}
 801a204:	b083      	sub	sp, #12
 801a206:	af00      	add	r7, sp, #0
 801a208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801a20a:	bf00      	nop
 801a20c:	370c      	adds	r7, #12
 801a20e:	46bd      	mov	sp, r7
 801a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a214:	4770      	bx	lr

0801a216 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a216:	b480      	push	{r7}
 801a218:	b083      	sub	sp, #12
 801a21a:	af00      	add	r7, sp, #0
 801a21c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801a21e:	bf00      	nop
 801a220:	370c      	adds	r7, #12
 801a222:	46bd      	mov	sp, r7
 801a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a228:	4770      	bx	lr

0801a22a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801a22a:	b480      	push	{r7}
 801a22c:	b083      	sub	sp, #12
 801a22e:	af00      	add	r7, sp, #0
 801a230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 801a232:	bf00      	nop
 801a234:	370c      	adds	r7, #12
 801a236:	46bd      	mov	sp, r7
 801a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a23c:	4770      	bx	lr

0801a23e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801a23e:	b480      	push	{r7}
 801a240:	b083      	sub	sp, #12
 801a242:	af00      	add	r7, sp, #0
 801a244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801a246:	bf00      	nop
 801a248:	370c      	adds	r7, #12
 801a24a:	46bd      	mov	sp, r7
 801a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a250:	4770      	bx	lr

0801a252 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801a252:	b480      	push	{r7}
 801a254:	b083      	sub	sp, #12
 801a256:	af00      	add	r7, sp, #0
 801a258:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801a25a:	bf00      	nop
 801a25c:	370c      	adds	r7, #12
 801a25e:	46bd      	mov	sp, r7
 801a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a264:	4770      	bx	lr

0801a266 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801a266:	b480      	push	{r7}
 801a268:	b083      	sub	sp, #12
 801a26a:	af00      	add	r7, sp, #0
 801a26c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801a26e:	bf00      	nop
 801a270:	370c      	adds	r7, #12
 801a272:	46bd      	mov	sp, r7
 801a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a278:	4770      	bx	lr

0801a27a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801a27a:	b480      	push	{r7}
 801a27c:	b083      	sub	sp, #12
 801a27e:	af00      	add	r7, sp, #0
 801a280:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 801a282:	bf00      	nop
 801a284:	370c      	adds	r7, #12
 801a286:	46bd      	mov	sp, r7
 801a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a28c:	4770      	bx	lr
	...

0801a290 <__NVIC_SetPriorityGrouping>:
{
 801a290:	b480      	push	{r7}
 801a292:	b085      	sub	sp, #20
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	f003 0307 	and.w	r3, r3, #7
 801a29e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a2a0:	4b0b      	ldr	r3, [pc, #44]	; (801a2d0 <__NVIC_SetPriorityGrouping+0x40>)
 801a2a2:	68db      	ldr	r3, [r3, #12]
 801a2a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a2a6:	68ba      	ldr	r2, [r7, #8]
 801a2a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801a2ac:	4013      	ands	r3, r2
 801a2ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a2b4:	68bb      	ldr	r3, [r7, #8]
 801a2b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801a2b8:	4b06      	ldr	r3, [pc, #24]	; (801a2d4 <__NVIC_SetPriorityGrouping+0x44>)
 801a2ba:	4313      	orrs	r3, r2
 801a2bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a2be:	4a04      	ldr	r2, [pc, #16]	; (801a2d0 <__NVIC_SetPriorityGrouping+0x40>)
 801a2c0:	68bb      	ldr	r3, [r7, #8]
 801a2c2:	60d3      	str	r3, [r2, #12]
}
 801a2c4:	bf00      	nop
 801a2c6:	3714      	adds	r7, #20
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ce:	4770      	bx	lr
 801a2d0:	e000ed00 	.word	0xe000ed00
 801a2d4:	05fa0000 	.word	0x05fa0000

0801a2d8 <__NVIC_GetPriorityGrouping>:
{
 801a2d8:	b480      	push	{r7}
 801a2da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a2dc:	4b04      	ldr	r3, [pc, #16]	; (801a2f0 <__NVIC_GetPriorityGrouping+0x18>)
 801a2de:	68db      	ldr	r3, [r3, #12]
 801a2e0:	0a1b      	lsrs	r3, r3, #8
 801a2e2:	f003 0307 	and.w	r3, r3, #7
}
 801a2e6:	4618      	mov	r0, r3
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ee:	4770      	bx	lr
 801a2f0:	e000ed00 	.word	0xe000ed00

0801a2f4 <__NVIC_EnableIRQ>:
{
 801a2f4:	b480      	push	{r7}
 801a2f6:	b083      	sub	sp, #12
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a2fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a302:	2b00      	cmp	r3, #0
 801a304:	db0b      	blt.n	801a31e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a306:	79fb      	ldrb	r3, [r7, #7]
 801a308:	f003 021f 	and.w	r2, r3, #31
 801a30c:	4907      	ldr	r1, [pc, #28]	; (801a32c <__NVIC_EnableIRQ+0x38>)
 801a30e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a312:	095b      	lsrs	r3, r3, #5
 801a314:	2001      	movs	r0, #1
 801a316:	fa00 f202 	lsl.w	r2, r0, r2
 801a31a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a31e:	bf00      	nop
 801a320:	370c      	adds	r7, #12
 801a322:	46bd      	mov	sp, r7
 801a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a328:	4770      	bx	lr
 801a32a:	bf00      	nop
 801a32c:	e000e100 	.word	0xe000e100

0801a330 <__NVIC_SetPriority>:
{
 801a330:	b480      	push	{r7}
 801a332:	b083      	sub	sp, #12
 801a334:	af00      	add	r7, sp, #0
 801a336:	4603      	mov	r3, r0
 801a338:	6039      	str	r1, [r7, #0]
 801a33a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a33c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a340:	2b00      	cmp	r3, #0
 801a342:	db0a      	blt.n	801a35a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a344:	683b      	ldr	r3, [r7, #0]
 801a346:	b2da      	uxtb	r2, r3
 801a348:	490c      	ldr	r1, [pc, #48]	; (801a37c <__NVIC_SetPriority+0x4c>)
 801a34a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a34e:	0112      	lsls	r2, r2, #4
 801a350:	b2d2      	uxtb	r2, r2
 801a352:	440b      	add	r3, r1
 801a354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801a358:	e00a      	b.n	801a370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a35a:	683b      	ldr	r3, [r7, #0]
 801a35c:	b2da      	uxtb	r2, r3
 801a35e:	4908      	ldr	r1, [pc, #32]	; (801a380 <__NVIC_SetPriority+0x50>)
 801a360:	79fb      	ldrb	r3, [r7, #7]
 801a362:	f003 030f 	and.w	r3, r3, #15
 801a366:	3b04      	subs	r3, #4
 801a368:	0112      	lsls	r2, r2, #4
 801a36a:	b2d2      	uxtb	r2, r2
 801a36c:	440b      	add	r3, r1
 801a36e:	761a      	strb	r2, [r3, #24]
}
 801a370:	bf00      	nop
 801a372:	370c      	adds	r7, #12
 801a374:	46bd      	mov	sp, r7
 801a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a37a:	4770      	bx	lr
 801a37c:	e000e100 	.word	0xe000e100
 801a380:	e000ed00 	.word	0xe000ed00

0801a384 <NVIC_EncodePriority>:
{
 801a384:	b480      	push	{r7}
 801a386:	b089      	sub	sp, #36	; 0x24
 801a388:	af00      	add	r7, sp, #0
 801a38a:	60f8      	str	r0, [r7, #12]
 801a38c:	60b9      	str	r1, [r7, #8]
 801a38e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	f003 0307 	and.w	r3, r3, #7
 801a396:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a398:	69fb      	ldr	r3, [r7, #28]
 801a39a:	f1c3 0307 	rsb	r3, r3, #7
 801a39e:	2b04      	cmp	r3, #4
 801a3a0:	bf28      	it	cs
 801a3a2:	2304      	movcs	r3, #4
 801a3a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a3a6:	69fb      	ldr	r3, [r7, #28]
 801a3a8:	3304      	adds	r3, #4
 801a3aa:	2b06      	cmp	r3, #6
 801a3ac:	d902      	bls.n	801a3b4 <NVIC_EncodePriority+0x30>
 801a3ae:	69fb      	ldr	r3, [r7, #28]
 801a3b0:	3b03      	subs	r3, #3
 801a3b2:	e000      	b.n	801a3b6 <NVIC_EncodePriority+0x32>
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a3b8:	f04f 32ff 	mov.w	r2, #4294967295
 801a3bc:	69bb      	ldr	r3, [r7, #24]
 801a3be:	fa02 f303 	lsl.w	r3, r2, r3
 801a3c2:	43da      	mvns	r2, r3
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	401a      	ands	r2, r3
 801a3c8:	697b      	ldr	r3, [r7, #20]
 801a3ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a3cc:	f04f 31ff 	mov.w	r1, #4294967295
 801a3d0:	697b      	ldr	r3, [r7, #20]
 801a3d2:	fa01 f303 	lsl.w	r3, r1, r3
 801a3d6:	43d9      	mvns	r1, r3
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a3dc:	4313      	orrs	r3, r2
}
 801a3de:	4618      	mov	r0, r3
 801a3e0:	3724      	adds	r7, #36	; 0x24
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e8:	4770      	bx	lr
	...

0801a3ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b082      	sub	sp, #8
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	3b01      	subs	r3, #1
 801a3f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a3fc:	d301      	bcc.n	801a402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a3fe:	2301      	movs	r3, #1
 801a400:	e00f      	b.n	801a422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a402:	4a0a      	ldr	r2, [pc, #40]	; (801a42c <SysTick_Config+0x40>)
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	3b01      	subs	r3, #1
 801a408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a40a:	210f      	movs	r1, #15
 801a40c:	f04f 30ff 	mov.w	r0, #4294967295
 801a410:	f7ff ff8e 	bl	801a330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a414:	4b05      	ldr	r3, [pc, #20]	; (801a42c <SysTick_Config+0x40>)
 801a416:	2200      	movs	r2, #0
 801a418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a41a:	4b04      	ldr	r3, [pc, #16]	; (801a42c <SysTick_Config+0x40>)
 801a41c:	2207      	movs	r2, #7
 801a41e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a420:	2300      	movs	r3, #0
}
 801a422:	4618      	mov	r0, r3
 801a424:	3708      	adds	r7, #8
 801a426:	46bd      	mov	sp, r7
 801a428:	bd80      	pop	{r7, pc}
 801a42a:	bf00      	nop
 801a42c:	e000e010 	.word	0xe000e010

0801a430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a438:	6878      	ldr	r0, [r7, #4]
 801a43a:	f7ff ff29 	bl	801a290 <__NVIC_SetPriorityGrouping>
}
 801a43e:	bf00      	nop
 801a440:	3708      	adds	r7, #8
 801a442:	46bd      	mov	sp, r7
 801a444:	bd80      	pop	{r7, pc}

0801a446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801a446:	b580      	push	{r7, lr}
 801a448:	b086      	sub	sp, #24
 801a44a:	af00      	add	r7, sp, #0
 801a44c:	4603      	mov	r3, r0
 801a44e:	60b9      	str	r1, [r7, #8]
 801a450:	607a      	str	r2, [r7, #4]
 801a452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801a454:	2300      	movs	r3, #0
 801a456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801a458:	f7ff ff3e 	bl	801a2d8 <__NVIC_GetPriorityGrouping>
 801a45c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a45e:	687a      	ldr	r2, [r7, #4]
 801a460:	68b9      	ldr	r1, [r7, #8]
 801a462:	6978      	ldr	r0, [r7, #20]
 801a464:	f7ff ff8e 	bl	801a384 <NVIC_EncodePriority>
 801a468:	4602      	mov	r2, r0
 801a46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a46e:	4611      	mov	r1, r2
 801a470:	4618      	mov	r0, r3
 801a472:	f7ff ff5d 	bl	801a330 <__NVIC_SetPriority>
}
 801a476:	bf00      	nop
 801a478:	3718      	adds	r7, #24
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}

0801a47e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a47e:	b580      	push	{r7, lr}
 801a480:	b082      	sub	sp, #8
 801a482:	af00      	add	r7, sp, #0
 801a484:	4603      	mov	r3, r0
 801a486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a48c:	4618      	mov	r0, r3
 801a48e:	f7ff ff31 	bl	801a2f4 <__NVIC_EnableIRQ>
}
 801a492:	bf00      	nop
 801a494:	3708      	adds	r7, #8
 801a496:	46bd      	mov	sp, r7
 801a498:	bd80      	pop	{r7, pc}

0801a49a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a49a:	b580      	push	{r7, lr}
 801a49c:	b082      	sub	sp, #8
 801a49e:	af00      	add	r7, sp, #0
 801a4a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a4a2:	6878      	ldr	r0, [r7, #4]
 801a4a4:	f7ff ffa2 	bl	801a3ec <SysTick_Config>
 801a4a8:	4603      	mov	r3, r0
}
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	3708      	adds	r7, #8
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd80      	pop	{r7, pc}
	...

0801a4b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801a4b4:	b480      	push	{r7}
 801a4b6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801a4b8:	f3bf 8f5f 	dmb	sy
}
 801a4bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801a4be:	4b07      	ldr	r3, [pc, #28]	; (801a4dc <HAL_MPU_Disable+0x28>)
 801a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4c2:	4a06      	ldr	r2, [pc, #24]	; (801a4dc <HAL_MPU_Disable+0x28>)
 801a4c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a4c8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801a4ca:	4b05      	ldr	r3, [pc, #20]	; (801a4e0 <HAL_MPU_Disable+0x2c>)
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	605a      	str	r2, [r3, #4]
}
 801a4d0:	bf00      	nop
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d8:	4770      	bx	lr
 801a4da:	bf00      	nop
 801a4dc:	e000ed00 	.word	0xe000ed00
 801a4e0:	e000ed90 	.word	0xe000ed90

0801a4e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	b083      	sub	sp, #12
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801a4ec:	4a0b      	ldr	r2, [pc, #44]	; (801a51c <HAL_MPU_Enable+0x38>)
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	f043 0301 	orr.w	r3, r3, #1
 801a4f4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801a4f6:	4b0a      	ldr	r3, [pc, #40]	; (801a520 <HAL_MPU_Enable+0x3c>)
 801a4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4fa:	4a09      	ldr	r2, [pc, #36]	; (801a520 <HAL_MPU_Enable+0x3c>)
 801a4fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a500:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801a502:	f3bf 8f4f 	dsb	sy
}
 801a506:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801a508:	f3bf 8f6f 	isb	sy
}
 801a50c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801a50e:	bf00      	nop
 801a510:	370c      	adds	r7, #12
 801a512:	46bd      	mov	sp, r7
 801a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a518:	4770      	bx	lr
 801a51a:	bf00      	nop
 801a51c:	e000ed90 	.word	0xe000ed90
 801a520:	e000ed00 	.word	0xe000ed00

0801a524 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801a524:	b480      	push	{r7}
 801a526:	b083      	sub	sp, #12
 801a528:	af00      	add	r7, sp, #0
 801a52a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	785a      	ldrb	r2, [r3, #1]
 801a530:	4b1d      	ldr	r3, [pc, #116]	; (801a5a8 <HAL_MPU_ConfigRegion+0x84>)
 801a532:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	781b      	ldrb	r3, [r3, #0]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d029      	beq.n	801a590 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 801a53c:	4a1a      	ldr	r2, [pc, #104]	; (801a5a8 <HAL_MPU_ConfigRegion+0x84>)
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	685b      	ldr	r3, [r3, #4]
 801a542:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	7b1b      	ldrb	r3, [r3, #12]
 801a548:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	7adb      	ldrb	r3, [r3, #11]
 801a54e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a550:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	7a9b      	ldrb	r3, [r3, #10]
 801a556:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a558:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	7b5b      	ldrb	r3, [r3, #13]
 801a55e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a560:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	7b9b      	ldrb	r3, [r3, #14]
 801a566:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a568:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	7bdb      	ldrb	r3, [r3, #15]
 801a56e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a570:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	7a5b      	ldrb	r3, [r3, #9]
 801a576:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a578:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	7a1b      	ldrb	r3, [r3, #8]
 801a57e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a580:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801a582:	687a      	ldr	r2, [r7, #4]
 801a584:	7812      	ldrb	r2, [r2, #0]
 801a586:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a588:	4a07      	ldr	r2, [pc, #28]	; (801a5a8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a58a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a58c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801a58e:	e005      	b.n	801a59c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 801a590:	4b05      	ldr	r3, [pc, #20]	; (801a5a8 <HAL_MPU_ConfigRegion+0x84>)
 801a592:	2200      	movs	r2, #0
 801a594:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 801a596:	4b04      	ldr	r3, [pc, #16]	; (801a5a8 <HAL_MPU_ConfigRegion+0x84>)
 801a598:	2200      	movs	r2, #0
 801a59a:	611a      	str	r2, [r3, #16]
}
 801a59c:	bf00      	nop
 801a59e:	370c      	adds	r7, #12
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a6:	4770      	bx	lr
 801a5a8:	e000ed90 	.word	0xe000ed90

0801a5ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b084      	sub	sp, #16
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a5b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801a5ba:	f7fe ff63 	bl	8019484 <HAL_GetTick>
 801a5be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801a5c6:	b2db      	uxtb	r3, r3
 801a5c8:	2b02      	cmp	r3, #2
 801a5ca:	d008      	beq.n	801a5de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	2280      	movs	r2, #128	; 0x80
 801a5d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801a5da:	2301      	movs	r3, #1
 801a5dc:	e052      	b.n	801a684 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	681a      	ldr	r2, [r3, #0]
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	f022 0216 	bic.w	r2, r2, #22
 801a5ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	695a      	ldr	r2, [r3, #20]
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a5fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a602:	2b00      	cmp	r3, #0
 801a604:	d103      	bne.n	801a60e <HAL_DMA_Abort+0x62>
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d007      	beq.n	801a61e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	681a      	ldr	r2, [r3, #0]
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	f022 0208 	bic.w	r2, r2, #8
 801a61c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	681a      	ldr	r2, [r3, #0]
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	f022 0201 	bic.w	r2, r2, #1
 801a62c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801a62e:	e013      	b.n	801a658 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801a630:	f7fe ff28 	bl	8019484 <HAL_GetTick>
 801a634:	4602      	mov	r2, r0
 801a636:	68bb      	ldr	r3, [r7, #8]
 801a638:	1ad3      	subs	r3, r2, r3
 801a63a:	2b05      	cmp	r3, #5
 801a63c:	d90c      	bls.n	801a658 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	2220      	movs	r2, #32
 801a642:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	2203      	movs	r2, #3
 801a648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	2200      	movs	r2, #0
 801a650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 801a654:	2303      	movs	r3, #3
 801a656:	e015      	b.n	801a684 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	f003 0301 	and.w	r3, r3, #1
 801a662:	2b00      	cmp	r3, #0
 801a664:	d1e4      	bne.n	801a630 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a66a:	223f      	movs	r2, #63	; 0x3f
 801a66c:	409a      	lsls	r2, r3
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	2201      	movs	r2, #1
 801a676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	2200      	movs	r2, #0
 801a67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 801a682:	2300      	movs	r3, #0
}
 801a684:	4618      	mov	r0, r3
 801a686:	3710      	adds	r7, #16
 801a688:	46bd      	mov	sp, r7
 801a68a:	bd80      	pop	{r7, pc}

0801a68c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801a68c:	b480      	push	{r7}
 801a68e:	b083      	sub	sp, #12
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801a69a:	b2db      	uxtb	r3, r3
 801a69c:	2b02      	cmp	r3, #2
 801a69e:	d004      	beq.n	801a6aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	2280      	movs	r2, #128	; 0x80
 801a6a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801a6a6:	2301      	movs	r3, #1
 801a6a8:	e00c      	b.n	801a6c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	2205      	movs	r2, #5
 801a6ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	681a      	ldr	r2, [r3, #0]
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	f022 0201 	bic.w	r2, r2, #1
 801a6c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801a6c2:	2300      	movs	r3, #0
}
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	370c      	adds	r7, #12
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ce:	4770      	bx	lr

0801a6d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b084      	sub	sp, #16
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d101      	bne.n	801a6e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 801a6de:	2301      	movs	r3, #1
 801a6e0:	e06a      	b.n	801a7b8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d106      	bne.n	801a6fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	2223      	movs	r2, #35	; 0x23
 801a6f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 801a6f4:	6878      	ldr	r0, [r7, #4]
 801a6f6:	f006 fbaf 	bl	8020e58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a6fa:	4b31      	ldr	r3, [pc, #196]	; (801a7c0 <HAL_ETH_Init+0xf0>)
 801a6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6fe:	4a30      	ldr	r2, [pc, #192]	; (801a7c0 <HAL_ETH_Init+0xf0>)
 801a700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a704:	6453      	str	r3, [r2, #68]	; 0x44
 801a706:	4b2e      	ldr	r3, [pc, #184]	; (801a7c0 <HAL_ETH_Init+0xf0>)
 801a708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a70a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a70e:	60bb      	str	r3, [r7, #8]
 801a710:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 801a712:	4b2c      	ldr	r3, [pc, #176]	; (801a7c4 <HAL_ETH_Init+0xf4>)
 801a714:	685b      	ldr	r3, [r3, #4]
 801a716:	4a2b      	ldr	r2, [pc, #172]	; (801a7c4 <HAL_ETH_Init+0xf4>)
 801a718:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801a71c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 801a71e:	4b29      	ldr	r3, [pc, #164]	; (801a7c4 <HAL_ETH_Init+0xf4>)
 801a720:	685a      	ldr	r2, [r3, #4]
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	689b      	ldr	r3, [r3, #8]
 801a726:	4927      	ldr	r1, [pc, #156]	; (801a7c4 <HAL_ETH_Init+0xf4>)
 801a728:	4313      	orrs	r3, r2
 801a72a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 801a72c:	4b25      	ldr	r3, [pc, #148]	; (801a7c4 <HAL_ETH_Init+0xf4>)
 801a72e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	687a      	ldr	r2, [r7, #4]
 801a73c:	6812      	ldr	r2, [r2, #0]
 801a73e:	f043 0301 	orr.w	r3, r3, #1
 801a742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a746:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801a748:	f7fe fe9c 	bl	8019484 <HAL_GetTick>
 801a74c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801a74e:	e011      	b.n	801a774 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801a750:	f7fe fe98 	bl	8019484 <HAL_GetTick>
 801a754:	4602      	mov	r2, r0
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	1ad3      	subs	r3, r2, r3
 801a75a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801a75e:	d909      	bls.n	801a774 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	2204      	movs	r2, #4
 801a764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	22e0      	movs	r2, #224	; 0xe0
 801a76c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 801a770:	2301      	movs	r3, #1
 801a772:	e021      	b.n	801a7b8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	f003 0301 	and.w	r3, r3, #1
 801a782:	2b00      	cmp	r3, #0
 801a784:	d1e4      	bne.n	801a750 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801a786:	6878      	ldr	r0, [r7, #4]
 801a788:	f000 fee4 	bl	801b554 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 801a78c:	6878      	ldr	r0, [r7, #4]
 801a78e:	f000 ff8b 	bl	801b6a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f000 ffe1 	bl	801b75a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	685b      	ldr	r3, [r3, #4]
 801a79c:	461a      	mov	r2, r3
 801a79e:	2100      	movs	r1, #0
 801a7a0:	6878      	ldr	r0, [r7, #4]
 801a7a2:	f000 ff49 	bl	801b638 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	2210      	movs	r2, #16
 801a7b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a7b6:	2300      	movs	r3, #0
}
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	3710      	adds	r7, #16
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	40023800 	.word	0x40023800
 801a7c4:	40013800 	.word	0x40013800

0801a7c8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	b084      	sub	sp, #16
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a7d6:	2b10      	cmp	r3, #16
 801a7d8:	d150      	bne.n	801a87c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	2223      	movs	r2, #35	; 0x23
 801a7de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	2204      	movs	r2, #4
 801a7e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 801a7e8:	6878      	ldr	r0, [r7, #4]
 801a7ea:	f000 f9fd 	bl	801abe8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	681a      	ldr	r2, [r3, #0]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	f042 0208 	orr.w	r2, r2, #8
 801a7fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801a806:	2001      	movs	r0, #1
 801a808:	f7fe fe48 	bl	801949c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	68fa      	ldr	r2, [r7, #12]
 801a812:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	681a      	ldr	r2, [r3, #0]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	f042 0204 	orr.w	r2, r2, #4
 801a822:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801a82c:	2001      	movs	r0, #1
 801a82e:	f7fe fe35 	bl	801949c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	68fa      	ldr	r2, [r7, #12]
 801a838:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f000 fd2a 	bl	801b294 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a848:	699b      	ldr	r3, [r3, #24]
 801a84a:	687a      	ldr	r2, [r7, #4]
 801a84c:	6812      	ldr	r2, [r2, #0]
 801a84e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a856:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a860:	699b      	ldr	r3, [r3, #24]
 801a862:	687a      	ldr	r2, [r7, #4]
 801a864:	6812      	ldr	r2, [r2, #0]
 801a866:	f043 0302 	orr.w	r3, r3, #2
 801a86a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a86e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	2223      	movs	r2, #35	; 0x23
 801a874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801a878:	2300      	movs	r3, #0
 801a87a:	e000      	b.n	801a87e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 801a87c:	2301      	movs	r3, #1
  }
}
 801a87e:	4618      	mov	r0, r3
 801a880:	3710      	adds	r7, #16
 801a882:	46bd      	mov	sp, r7
 801a884:	bd80      	pop	{r7, pc}

0801a886 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 801a886:	b580      	push	{r7, lr}
 801a888:	b084      	sub	sp, #16
 801a88a:	af00      	add	r7, sp, #0
 801a88c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a894:	2b23      	cmp	r3, #35	; 0x23
 801a896:	d14a      	bne.n	801a92e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	2223      	movs	r2, #35	; 0x23
 801a89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a8a8:	699b      	ldr	r3, [r3, #24]
 801a8aa:	687a      	ldr	r2, [r7, #4]
 801a8ac:	6812      	ldr	r2, [r2, #0]
 801a8ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a8b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a8b6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a8c0:	699b      	ldr	r3, [r3, #24]
 801a8c2:	687a      	ldr	r2, [r7, #4]
 801a8c4:	6812      	ldr	r2, [r2, #0]
 801a8c6:	f023 0302 	bic.w	r3, r3, #2
 801a8ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a8ce:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	681a      	ldr	r2, [r3, #0]
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	f022 0204 	bic.w	r2, r2, #4
 801a8de:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801a8e8:	2001      	movs	r0, #1
 801a8ea:	f7fe fdd7 	bl	801949c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	68fa      	ldr	r2, [r7, #12]
 801a8f4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801a8f6:	6878      	ldr	r0, [r7, #4]
 801a8f8:	f000 fccc 	bl	801b294 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	681a      	ldr	r2, [r3, #0]
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	f022 0208 	bic.w	r2, r2, #8
 801a90a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801a914:	2001      	movs	r0, #1
 801a916:	f7fe fdc1 	bl	801949c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	68fa      	ldr	r2, [r7, #12]
 801a920:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	2210      	movs	r2, #16
 801a926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 801a92a:	2300      	movs	r3, #0
 801a92c:	e000      	b.n	801a930 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 801a92e:	2301      	movs	r3, #1
  }
}
 801a930:	4618      	mov	r0, r3
 801a932:	3710      	adds	r7, #16
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b086      	sub	sp, #24
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	60f8      	str	r0, [r7, #12]
 801a940:	60b9      	str	r1, [r7, #8]
 801a942:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d109      	bne.n	801a95e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a950:	f043 0201 	orr.w	r2, r3, #1
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801a95a:	2301      	movs	r3, #1
 801a95c:	e07c      	b.n	801aa58 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a964:	2b23      	cmp	r3, #35	; 0x23
 801a966:	d176      	bne.n	801aa56 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 801a968:	2200      	movs	r2, #0
 801a96a:	68b9      	ldr	r1, [r7, #8]
 801a96c:	68f8      	ldr	r0, [r7, #12]
 801a96e:	f000 ff61 	bl	801b834 <ETH_Prepare_Tx_Descriptors>
 801a972:	4603      	mov	r3, r0
 801a974:	2b00      	cmp	r3, #0
 801a976:	d009      	beq.n	801a98c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a97e:	f043 0202 	orr.w	r2, r3, #2
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 801a988:	2301      	movs	r3, #1
 801a98a:	e065      	b.n	801aa58 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 801a98c:	f3bf 8f4f 	dsb	sy
}
 801a990:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	3206      	adds	r2, #6
 801a99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a99e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9a4:	1c5a      	adds	r2, r3, #1
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	629a      	str	r2, [r3, #40]	; 0x28
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9ae:	2b03      	cmp	r3, #3
 801a9b0:	d904      	bls.n	801a9bc <HAL_ETH_Transmit+0x84>
 801a9b2:	68fb      	ldr	r3, [r7, #12]
 801a9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9b6:	1f1a      	subs	r2, r3, #4
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	681a      	ldr	r2, [r3, #0]
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	3106      	adds	r1, #6
 801a9c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a9cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a9d0:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 801a9d2:	f7fe fd57 	bl	8019484 <HAL_GetTick>
 801a9d6:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801a9d8:	e037      	b.n	801aa4a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a9e2:	695b      	ldr	r3, [r3, #20]
 801a9e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d011      	beq.n	801aa10 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a9f2:	f043 0208 	orr.w	r2, r3, #8
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa04:	695a      	ldr	r2, [r3, #20]
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 801aa0c:	2301      	movs	r3, #1
 801aa0e:	e023      	b.n	801aa58 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa16:	d018      	beq.n	801aa4a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801aa18:	f7fe fd34 	bl	8019484 <HAL_GetTick>
 801aa1c:	4602      	mov	r2, r0
 801aa1e:	693b      	ldr	r3, [r7, #16]
 801aa20:	1ad3      	subs	r3, r2, r3
 801aa22:	687a      	ldr	r2, [r7, #4]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d302      	bcc.n	801aa2e <HAL_ETH_Transmit+0xf6>
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d10d      	bne.n	801aa4a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aa34:	f043 0204 	orr.w	r2, r3, #4
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 801aa3e:	697b      	ldr	r3, [r7, #20]
 801aa40:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801aa44:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 801aa46:	2301      	movs	r3, #1
 801aa48:	e006      	b.n	801aa58 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801aa4a:	697b      	ldr	r3, [r7, #20]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	dbc3      	blt.n	801a9da <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 801aa52:	2300      	movs	r3, #0
 801aa54:	e000      	b.n	801aa58 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 801aa56:	2301      	movs	r3, #1
  }
}
 801aa58:	4618      	mov	r0, r3
 801aa5a:	3718      	adds	r7, #24
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	bd80      	pop	{r7, pc}

0801aa60 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 801aa60:	b580      	push	{r7, lr}
 801aa62:	b088      	sub	sp, #32
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
 801aa68:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 801aa6e:	2300      	movs	r3, #0
 801aa70:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 801aa72:	683b      	ldr	r3, [r7, #0]
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d109      	bne.n	801aa8c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aa7e:	f043 0201 	orr.w	r2, r3, #1
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801aa88:	2301      	movs	r3, #1
 801aa8a:	e0a8      	b.n	801abde <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aa92:	2b23      	cmp	r3, #35	; 0x23
 801aa94:	d001      	beq.n	801aa9a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 801aa96:	2301      	movs	r3, #1
 801aa98:	e0a1      	b.n	801abde <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa9e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	69fa      	ldr	r2, [r7, #28]
 801aaa4:	3212      	adds	r2, #18
 801aaa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aaaa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aab0:	f1c3 0304 	rsb	r3, r3, #4
 801aab4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801aab6:	e06a      	b.n	801ab8e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 801aab8:	69bb      	ldr	r3, [r7, #24]
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d007      	beq.n	801aad4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 801aac4:	69bb      	ldr	r3, [r7, #24]
 801aac6:	699a      	ldr	r2, [r3, #24]
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 801aacc:	69bb      	ldr	r3, [r7, #24]
 801aace:	69da      	ldr	r2, [r3, #28]
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 801aad4:	69bb      	ldr	r3, [r7, #24]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d103      	bne.n	801aae8 <HAL_ETH_ReadData+0x88>
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d040      	beq.n	801ab6a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 801aae8:	69bb      	ldr	r3, [r7, #24]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d005      	beq.n	801ab00 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	2200      	movs	r2, #0
 801aafe:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	695b      	ldr	r3, [r3, #20]
 801ab04:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 801ab06:	69bb      	ldr	r3, [r7, #24]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d00c      	beq.n	801ab2c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801ab12:	69bb      	ldr	r3, [r7, #24]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	0c1b      	lsrs	r3, r3, #16
 801ab18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ab1c:	3b04      	subs	r3, #4
 801ab1e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 801ab20:	69bb      	ldr	r3, [r7, #24]
 801ab22:	681a      	ldr	r2, [r3, #0]
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 801ab28:	2301      	movs	r3, #1
 801ab2a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 801ab2c:	69bb      	ldr	r3, [r7, #24]
 801ab2e:	689a      	ldr	r2, [r3, #8]
 801ab30:	69bb      	ldr	r3, [r7, #24]
 801ab32:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 801ab40:	69bb      	ldr	r3, [r7, #24]
 801ab42:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801ab44:	461a      	mov	r2, r3
 801ab46:	693b      	ldr	r3, [r7, #16]
 801ab48:	b29b      	uxth	r3, r3
 801ab4a:	f006 fb4f 	bl	80211ec <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ab52:	1c5a      	adds	r2, r3, #1
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801ab5c:	693b      	ldr	r3, [r7, #16]
 801ab5e:	441a      	add	r2, r3
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 801ab64:	69bb      	ldr	r3, [r7, #24]
 801ab66:	2200      	movs	r2, #0
 801ab68:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801ab6a:	69fb      	ldr	r3, [r7, #28]
 801ab6c:	3301      	adds	r3, #1
 801ab6e:	61fb      	str	r3, [r7, #28]
 801ab70:	69fb      	ldr	r3, [r7, #28]
 801ab72:	2b03      	cmp	r3, #3
 801ab74:	d902      	bls.n	801ab7c <HAL_ETH_ReadData+0x11c>
 801ab76:	69fb      	ldr	r3, [r7, #28]
 801ab78:	3b04      	subs	r3, #4
 801ab7a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	69fa      	ldr	r2, [r7, #28]
 801ab80:	3212      	adds	r2, #18
 801ab82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab86:	61bb      	str	r3, [r7, #24]
    desccnt++;
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	3301      	adds	r3, #1
 801ab8c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801ab8e:	69bb      	ldr	r3, [r7, #24]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	db06      	blt.n	801aba4 <HAL_ETH_ReadData+0x144>
 801ab96:	697a      	ldr	r2, [r7, #20]
 801ab98:	68bb      	ldr	r3, [r7, #8]
 801ab9a:	429a      	cmp	r2, r3
 801ab9c:	d202      	bcs.n	801aba4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 801ab9e:	7bfb      	ldrb	r3, [r7, #15]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d089      	beq.n	801aab8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801aba8:	697b      	ldr	r3, [r7, #20]
 801abaa:	441a      	add	r2, r3
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d002      	beq.n	801abbe <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 801abb8:	6878      	ldr	r0, [r7, #4]
 801abba:	f000 f815 	bl	801abe8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	69fa      	ldr	r2, [r7, #28]
 801abc2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 801abc4:	7bfb      	ldrb	r3, [r7, #15]
 801abc6:	2b01      	cmp	r3, #1
 801abc8:	d108      	bne.n	801abdc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	2200      	movs	r2, #0
 801abd6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801abd8:	2300      	movs	r3, #0
 801abda:	e000      	b.n	801abde <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 801abdc:	2301      	movs	r3, #1
}
 801abde:	4618      	mov	r0, r3
 801abe0:	3720      	adds	r7, #32
 801abe2:	46bd      	mov	sp, r7
 801abe4:	bd80      	pop	{r7, pc}
	...

0801abe8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 801abe8:	b580      	push	{r7, lr}
 801abea:	b088      	sub	sp, #32
 801abec:	af00      	add	r7, sp, #0
 801abee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 801abf0:	2300      	movs	r3, #0
 801abf2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 801abf4:	2301      	movs	r3, #1
 801abf6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801abfc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	69fa      	ldr	r2, [r7, #28]
 801ac02:	3212      	adds	r2, #18
 801ac04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac08:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac0e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 801ac10:	e040      	b.n	801ac94 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 801ac12:	697b      	ldr	r3, [r7, #20]
 801ac14:	6a1b      	ldr	r3, [r3, #32]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d112      	bne.n	801ac40 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 801ac1a:	f107 030c 	add.w	r3, r7, #12
 801ac1e:	4618      	mov	r0, r3
 801ac20:	f006 fab4 	bl	802118c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d102      	bne.n	801ac30 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	74fb      	strb	r3, [r7, #19]
 801ac2e:	e007      	b.n	801ac40 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	461a      	mov	r2, r3
 801ac34:	697b      	ldr	r3, [r7, #20]
 801ac36:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	461a      	mov	r2, r3
 801ac3c:	697b      	ldr	r3, [r7, #20]
 801ac3e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 801ac40:	7cfb      	ldrb	r3, [r7, #19]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d026      	beq.n	801ac94 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d103      	bne.n	801ac56 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801ac4e:	697b      	ldr	r3, [r7, #20]
 801ac50:	4a1e      	ldr	r2, [pc, #120]	; (801accc <ETH_UpdateDescriptor+0xe4>)
 801ac52:	605a      	str	r2, [r3, #4]
 801ac54:	e003      	b.n	801ac5e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801ac56:	697b      	ldr	r3, [r7, #20]
 801ac58:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801ac5c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 801ac5e:	f3bf 8f5f 	dmb	sy
}
 801ac62:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 801ac64:	697b      	ldr	r3, [r7, #20]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801ac6c:	697b      	ldr	r3, [r7, #20]
 801ac6e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 801ac70:	69fb      	ldr	r3, [r7, #28]
 801ac72:	3301      	adds	r3, #1
 801ac74:	61fb      	str	r3, [r7, #28]
 801ac76:	69fb      	ldr	r3, [r7, #28]
 801ac78:	2b03      	cmp	r3, #3
 801ac7a:	d902      	bls.n	801ac82 <ETH_UpdateDescriptor+0x9a>
 801ac7c:	69fb      	ldr	r3, [r7, #28]
 801ac7e:	3b04      	subs	r3, #4
 801ac80:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	69fa      	ldr	r2, [r7, #28]
 801ac86:	3212      	adds	r2, #18
 801ac88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac8c:	617b      	str	r3, [r7, #20]
      desccount--;
 801ac8e:	69bb      	ldr	r3, [r7, #24]
 801ac90:	3b01      	subs	r3, #1
 801ac92:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 801ac94:	69bb      	ldr	r3, [r7, #24]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d002      	beq.n	801aca0 <ETH_UpdateDescriptor+0xb8>
 801ac9a:	7cfb      	ldrb	r3, [r7, #19]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d1b8      	bne.n	801ac12 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aca4:	69ba      	ldr	r2, [r7, #24]
 801aca6:	429a      	cmp	r2, r3
 801aca8:	d00c      	beq.n	801acc4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801acb2:	461a      	mov	r2, r3
 801acb4:	2300      	movs	r3, #0
 801acb6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	69fa      	ldr	r2, [r7, #28]
 801acbc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	69ba      	ldr	r2, [r7, #24]
 801acc2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 801acc4:	bf00      	nop
 801acc6:	3720      	adds	r7, #32
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd80      	pop	{r7, pc}
 801accc:	800045f8 	.word	0x800045f8

0801acd0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b082      	sub	sp, #8
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ace0:	695b      	ldr	r3, [r3, #20]
 801ace2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ace6:	2b40      	cmp	r3, #64	; 0x40
 801ace8:	d112      	bne.n	801ad10 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801acf2:	69db      	ldr	r3, [r3, #28]
 801acf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801acf8:	2b40      	cmp	r3, #64	; 0x40
 801acfa:	d109      	bne.n	801ad10 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad04:	461a      	mov	r2, r3
 801ad06:	4b50      	ldr	r3, [pc, #320]	; (801ae48 <HAL_ETH_IRQHandler+0x178>)
 801ad08:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 801ad0a:	6878      	ldr	r0, [r7, #4]
 801ad0c:	f000 f8ac 	bl	801ae68 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad18:	695b      	ldr	r3, [r3, #20]
 801ad1a:	f003 0301 	and.w	r3, r3, #1
 801ad1e:	2b01      	cmp	r3, #1
 801ad20:	d113      	bne.n	801ad4a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad2a:	69db      	ldr	r3, [r3, #28]
 801ad2c:	f003 0301 	and.w	r3, r3, #1
 801ad30:	2b01      	cmp	r3, #1
 801ad32:	d10a      	bne.n	801ad4a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad3c:	461a      	mov	r2, r3
 801ad3e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 801ad42:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 801ad44:	6878      	ldr	r0, [r7, #4]
 801ad46:	f000 f885 	bl	801ae54 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad52:	695b      	ldr	r3, [r3, #20]
 801ad54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ad58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ad5c:	d14c      	bne.n	801adf8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad66:	69db      	ldr	r3, [r3, #28]
 801ad68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ad6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ad70:	d142      	bne.n	801adf8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ad78:	f043 0208 	orr.w	r2, r3, #8
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad8a:	695b      	ldr	r3, [r3, #20]
 801ad8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ad90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ad94:	d11a      	bne.n	801adcc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad9e:	695a      	ldr	r2, [r3, #20]
 801ada0:	4b2a      	ldr	r3, [pc, #168]	; (801ae4c <HAL_ETH_IRQHandler+0x17c>)
 801ada2:	4013      	ands	r3, r2
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801adb2:	69db      	ldr	r3, [r3, #28]
 801adb4:	687a      	ldr	r2, [r7, #4]
 801adb6:	6812      	ldr	r2, [r2, #0]
 801adb8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 801adbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801adc0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	22e0      	movs	r2, #224	; 0xe0
 801adc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801adca:	e012      	b.n	801adf2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801add4:	695a      	ldr	r2, [r3, #20]
 801add6:	f248 6380 	movw	r3, #34432	; 0x8680
 801adda:	4013      	ands	r3, r2
 801addc:	687a      	ldr	r2, [r7, #4]
 801adde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801adea:	461a      	mov	r2, r3
 801adec:	f248 6380 	movw	r3, #34432	; 0x8680
 801adf0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 801adf2:	6878      	ldr	r0, [r7, #4]
 801adf4:	f000 f842 	bl	801ae7c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801adfe:	f003 0308 	and.w	r3, r3, #8
 801ae02:	2b08      	cmp	r3, #8
 801ae04:	d10e      	bne.n	801ae24 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae0c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 801ae16:	6878      	ldr	r0, [r7, #4]
 801ae18:	f000 f83a 	bl	801ae90 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	2200      	movs	r2, #0
 801ae20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 801ae24:	4b0a      	ldr	r3, [pc, #40]	; (801ae50 <HAL_ETH_IRQHandler+0x180>)
 801ae26:	695b      	ldr	r3, [r3, #20]
 801ae28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	d006      	beq.n	801ae3e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 801ae30:	4b07      	ldr	r3, [pc, #28]	; (801ae50 <HAL_ETH_IRQHandler+0x180>)
 801ae32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801ae36:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 801ae38:	6878      	ldr	r0, [r7, #4]
 801ae3a:	f000 f833 	bl	801aea4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 801ae3e:	bf00      	nop
 801ae40:	3708      	adds	r7, #8
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bd80      	pop	{r7, pc}
 801ae46:	bf00      	nop
 801ae48:	00010040 	.word	0x00010040
 801ae4c:	007e2000 	.word	0x007e2000
 801ae50:	40013c00 	.word	0x40013c00

0801ae54 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 801ae54:	b480      	push	{r7}
 801ae56:	b083      	sub	sp, #12
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 801ae5c:	bf00      	nop
 801ae5e:	370c      	adds	r7, #12
 801ae60:	46bd      	mov	sp, r7
 801ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae66:	4770      	bx	lr

0801ae68 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 801ae68:	b480      	push	{r7}
 801ae6a:	b083      	sub	sp, #12
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 801ae70:	bf00      	nop
 801ae72:	370c      	adds	r7, #12
 801ae74:	46bd      	mov	sp, r7
 801ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae7a:	4770      	bx	lr

0801ae7c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801ae7c:	b480      	push	{r7}
 801ae7e:	b083      	sub	sp, #12
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 801ae84:	bf00      	nop
 801ae86:	370c      	adds	r7, #12
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8e:	4770      	bx	lr

0801ae90 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 801ae90:	b480      	push	{r7}
 801ae92:	b083      	sub	sp, #12
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 801ae98:	bf00      	nop
 801ae9a:	370c      	adds	r7, #12
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea2:	4770      	bx	lr

0801aea4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 801aea4:	b480      	push	{r7}
 801aea6:	b083      	sub	sp, #12
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 801aeac:	bf00      	nop
 801aeae:	370c      	adds	r7, #12
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb6:	4770      	bx	lr

0801aeb8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b086      	sub	sp, #24
 801aebc:	af00      	add	r7, sp, #0
 801aebe:	60f8      	str	r0, [r7, #12]
 801aec0:	60b9      	str	r1, [r7, #8]
 801aec2:	607a      	str	r2, [r7, #4]
 801aec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	691b      	ldr	r3, [r3, #16]
 801aecc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	f003 031c 	and.w	r3, r3, #28
 801aed4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 801aed6:	68bb      	ldr	r3, [r7, #8]
 801aed8:	02db      	lsls	r3, r3, #11
 801aeda:	b29b      	uxth	r3, r3
 801aedc:	697a      	ldr	r2, [r7, #20]
 801aede:	4313      	orrs	r3, r2
 801aee0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	019b      	lsls	r3, r3, #6
 801aee6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801aeea:	697a      	ldr	r2, [r7, #20]
 801aeec:	4313      	orrs	r3, r2
 801aeee:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	f023 0302 	bic.w	r3, r3, #2
 801aef6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 801aef8:	697b      	ldr	r3, [r7, #20]
 801aefa:	f043 0301 	orr.w	r3, r3, #1
 801aefe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	697a      	ldr	r2, [r7, #20]
 801af06:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 801af08:	f7fe fabc 	bl	8019484 <HAL_GetTick>
 801af0c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801af0e:	e00d      	b.n	801af2c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 801af10:	f7fe fab8 	bl	8019484 <HAL_GetTick>
 801af14:	4602      	mov	r2, r0
 801af16:	693b      	ldr	r3, [r7, #16]
 801af18:	1ad3      	subs	r3, r2, r3
 801af1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af1e:	d301      	bcc.n	801af24 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 801af20:	2301      	movs	r3, #1
 801af22:	e010      	b.n	801af46 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	691b      	ldr	r3, [r3, #16]
 801af2a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801af2c:	697b      	ldr	r3, [r7, #20]
 801af2e:	f003 0301 	and.w	r3, r3, #1
 801af32:	2b00      	cmp	r3, #0
 801af34:	d1ec      	bne.n	801af10 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	695b      	ldr	r3, [r3, #20]
 801af3c:	b29b      	uxth	r3, r3
 801af3e:	461a      	mov	r2, r3
 801af40:	683b      	ldr	r3, [r7, #0]
 801af42:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801af44:	2300      	movs	r3, #0
}
 801af46:	4618      	mov	r0, r3
 801af48:	3718      	adds	r7, #24
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}

0801af4e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801af4e:	b580      	push	{r7, lr}
 801af50:	b086      	sub	sp, #24
 801af52:	af00      	add	r7, sp, #0
 801af54:	60f8      	str	r0, [r7, #12]
 801af56:	60b9      	str	r1, [r7, #8]
 801af58:	607a      	str	r2, [r7, #4]
 801af5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	691b      	ldr	r3, [r3, #16]
 801af62:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801af64:	697b      	ldr	r3, [r7, #20]
 801af66:	f003 031c 	and.w	r3, r3, #28
 801af6a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 801af6c:	68bb      	ldr	r3, [r7, #8]
 801af6e:	02db      	lsls	r3, r3, #11
 801af70:	b29b      	uxth	r3, r3
 801af72:	697a      	ldr	r2, [r7, #20]
 801af74:	4313      	orrs	r3, r2
 801af76:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	019b      	lsls	r3, r3, #6
 801af7c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801af80:	697a      	ldr	r2, [r7, #20]
 801af82:	4313      	orrs	r3, r2
 801af84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 801af86:	697b      	ldr	r3, [r7, #20]
 801af88:	f043 0302 	orr.w	r3, r3, #2
 801af8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801af8e:	697b      	ldr	r3, [r7, #20]
 801af90:	f043 0301 	orr.w	r3, r3, #1
 801af94:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801af96:	683b      	ldr	r3, [r7, #0]
 801af98:	b29a      	uxth	r2, r3
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	697a      	ldr	r2, [r7, #20]
 801afa6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 801afa8:	f7fe fa6c 	bl	8019484 <HAL_GetTick>
 801afac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801afae:	e00d      	b.n	801afcc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 801afb0:	f7fe fa68 	bl	8019484 <HAL_GetTick>
 801afb4:	4602      	mov	r2, r0
 801afb6:	693b      	ldr	r3, [r7, #16]
 801afb8:	1ad3      	subs	r3, r2, r3
 801afba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801afbe:	d301      	bcc.n	801afc4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 801afc0:	2301      	movs	r3, #1
 801afc2:	e009      	b.n	801afd8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	691b      	ldr	r3, [r3, #16]
 801afca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801afcc:	697b      	ldr	r3, [r7, #20]
 801afce:	f003 0301 	and.w	r3, r3, #1
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d1ec      	bne.n	801afb0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 801afd6:	2300      	movs	r3, #0
}
 801afd8:	4618      	mov	r0, r3
 801afda:	3718      	adds	r7, #24
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd80      	pop	{r7, pc}

0801afe0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 801afe0:	b480      	push	{r7}
 801afe2:	b083      	sub	sp, #12
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	6078      	str	r0, [r7, #4]
 801afe8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d101      	bne.n	801aff4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 801aff0:	2301      	movs	r3, #1
 801aff2:	e0d9      	b.n	801b1a8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	f003 0310 	and.w	r3, r3, #16
 801affe:	2b00      	cmp	r3, #0
 801b000:	bf14      	ite	ne
 801b002:	2301      	movne	r3, #1
 801b004:	2300      	moveq	r3, #0
 801b006:	b2db      	uxtb	r3, r3
 801b008:	461a      	mov	r2, r3
 801b00a:	683b      	ldr	r3, [r7, #0]
 801b00c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801b01a:	683b      	ldr	r3, [r7, #0]
 801b01c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b028:	2b00      	cmp	r3, #0
 801b02a:	bf0c      	ite	eq
 801b02c:	2301      	moveq	r3, #1
 801b02e:	2300      	movne	r3, #0
 801b030:	b2db      	uxtb	r3, r3
 801b032:	461a      	mov	r2, r3
 801b034:	683b      	ldr	r3, [r7, #0]
 801b036:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 801b044:	2b00      	cmp	r3, #0
 801b046:	bf14      	ite	ne
 801b048:	2301      	movne	r3, #1
 801b04a:	2300      	moveq	r3, #0
 801b04c:	b2db      	uxtb	r3, r3
 801b04e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801b050:	683b      	ldr	r3, [r7, #0]
 801b052:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b05e:	2b00      	cmp	r3, #0
 801b060:	bf0c      	ite	eq
 801b062:	2301      	moveq	r3, #1
 801b064:	2300      	movne	r3, #0
 801b066:	b2db      	uxtb	r3, r3
 801b068:	461a      	mov	r2, r3
 801b06a:	683b      	ldr	r3, [r7, #0]
 801b06c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b078:	2b00      	cmp	r3, #0
 801b07a:	bf14      	ite	ne
 801b07c:	2301      	movne	r3, #1
 801b07e:	2300      	moveq	r3, #0
 801b080:	b2db      	uxtb	r3, r3
 801b082:	461a      	mov	r2, r3
 801b084:	683b      	ldr	r3, [r7, #0]
 801b086:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 801b092:	683b      	ldr	r3, [r7, #0]
 801b094:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 801b0a0:	683b      	ldr	r3, [r7, #0]
 801b0a2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	bf0c      	ite	eq
 801b0b2:	2301      	moveq	r3, #1
 801b0b4:	2300      	movne	r3, #0
 801b0b6:	b2db      	uxtb	r3, r3
 801b0b8:	461a      	mov	r2, r3
 801b0ba:	683b      	ldr	r3, [r7, #0]
 801b0bc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	bf0c      	ite	eq
 801b0cc:	2301      	moveq	r3, #1
 801b0ce:	2300      	movne	r3, #0
 801b0d0:	b2db      	uxtb	r3, r3
 801b0d2:	461a      	mov	r2, r3
 801b0d4:	683b      	ldr	r3, [r7, #0]
 801b0d6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	bf14      	ite	ne
 801b0e6:	2301      	movne	r3, #1
 801b0e8:	2300      	moveq	r3, #0
 801b0ea:	b2db      	uxtb	r3, r3
 801b0ec:	461a      	mov	r2, r3
 801b0ee:	683b      	ldr	r3, [r7, #0]
 801b0f0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	bf14      	ite	ne
 801b10e:	2301      	movne	r3, #1
 801b110:	2300      	moveq	r3, #0
 801b112:	b2db      	uxtb	r3, r3
 801b114:	461a      	mov	r2, r3
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	699b      	ldr	r3, [r3, #24]
 801b120:	f003 0302 	and.w	r3, r3, #2
 801b124:	2b00      	cmp	r3, #0
 801b126:	bf14      	ite	ne
 801b128:	2301      	movne	r3, #1
 801b12a:	2300      	moveq	r3, #0
 801b12c:	b2db      	uxtb	r3, r3
 801b12e:	461a      	mov	r2, r3
 801b130:	683b      	ldr	r3, [r7, #0]
 801b132:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	699b      	ldr	r3, [r3, #24]
 801b13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b140:	2b00      	cmp	r3, #0
 801b142:	bf0c      	ite	eq
 801b144:	2301      	moveq	r3, #1
 801b146:	2300      	movne	r3, #0
 801b148:	b2db      	uxtb	r3, r3
 801b14a:	461a      	mov	r2, r3
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	699b      	ldr	r3, [r3, #24]
 801b158:	f003 0230 	and.w	r2, r3, #48	; 0x30
 801b15c:	683b      	ldr	r3, [r7, #0]
 801b15e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	699b      	ldr	r3, [r3, #24]
 801b166:	0c1b      	lsrs	r3, r3, #16
 801b168:	b29a      	uxth	r2, r3
 801b16a:	683b      	ldr	r3, [r7, #0]
 801b16c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	699b      	ldr	r3, [r3, #24]
 801b174:	f003 0304 	and.w	r3, r3, #4
 801b178:	2b00      	cmp	r3, #0
 801b17a:	bf14      	ite	ne
 801b17c:	2301      	movne	r3, #1
 801b17e:	2300      	moveq	r3, #0
 801b180:	b2db      	uxtb	r3, r3
 801b182:	461a      	mov	r2, r3
 801b184:	683b      	ldr	r3, [r7, #0]
 801b186:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	699b      	ldr	r3, [r3, #24]
 801b190:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 801b194:	2b00      	cmp	r3, #0
 801b196:	bf14      	ite	ne
 801b198:	2301      	movne	r3, #1
 801b19a:	2300      	moveq	r3, #0
 801b19c:	b2db      	uxtb	r3, r3
 801b19e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801b1a0:	683b      	ldr	r3, [r7, #0]
 801b1a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 801b1a6:	2300      	movs	r3, #0
}
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	370c      	adds	r7, #12
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1b2:	4770      	bx	lr

0801b1b4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b082      	sub	sp, #8
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	6078      	str	r0, [r7, #4]
 801b1bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801b1be:	683b      	ldr	r3, [r7, #0]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d101      	bne.n	801b1c8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 801b1c4:	2301      	movs	r3, #1
 801b1c6:	e00b      	b.n	801b1e0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b1ce:	2b10      	cmp	r3, #16
 801b1d0:	d105      	bne.n	801b1de <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 801b1d2:	6839      	ldr	r1, [r7, #0]
 801b1d4:	6878      	ldr	r0, [r7, #4]
 801b1d6:	f000 f883 	bl	801b2e0 <ETH_SetMACConfig>

    return HAL_OK;
 801b1da:	2300      	movs	r3, #0
 801b1dc:	e000      	b.n	801b1e0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801b1de:	2301      	movs	r3, #1
  }
}
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	3708      	adds	r7, #8
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	bd80      	pop	{r7, pc}

0801b1e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	691b      	ldr	r3, [r3, #16]
 801b1f6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	f023 031c 	bic.w	r3, r3, #28
 801b1fe:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801b200:	f002 f916 	bl	801d430 <HAL_RCC_GetHCLKFreq>
 801b204:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 801b206:	68bb      	ldr	r3, [r7, #8]
 801b208:	4a1d      	ldr	r2, [pc, #116]	; (801b280 <HAL_ETH_SetMDIOClockRange+0x98>)
 801b20a:	4293      	cmp	r3, r2
 801b20c:	d908      	bls.n	801b220 <HAL_ETH_SetMDIOClockRange+0x38>
 801b20e:	68bb      	ldr	r3, [r7, #8]
 801b210:	4a1c      	ldr	r2, [pc, #112]	; (801b284 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801b212:	4293      	cmp	r3, r2
 801b214:	d804      	bhi.n	801b220 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801b216:	68fb      	ldr	r3, [r7, #12]
 801b218:	f043 0308 	orr.w	r3, r3, #8
 801b21c:	60fb      	str	r3, [r7, #12]
 801b21e:	e027      	b.n	801b270 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 801b220:	68bb      	ldr	r3, [r7, #8]
 801b222:	4a18      	ldr	r2, [pc, #96]	; (801b284 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801b224:	4293      	cmp	r3, r2
 801b226:	d908      	bls.n	801b23a <HAL_ETH_SetMDIOClockRange+0x52>
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	4a17      	ldr	r2, [pc, #92]	; (801b288 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801b22c:	4293      	cmp	r3, r2
 801b22e:	d204      	bcs.n	801b23a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	f043 030c 	orr.w	r3, r3, #12
 801b236:	60fb      	str	r3, [r7, #12]
 801b238:	e01a      	b.n	801b270 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	4a12      	ldr	r2, [pc, #72]	; (801b288 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801b23e:	4293      	cmp	r3, r2
 801b240:	d303      	bcc.n	801b24a <HAL_ETH_SetMDIOClockRange+0x62>
 801b242:	68bb      	ldr	r3, [r7, #8]
 801b244:	4a11      	ldr	r2, [pc, #68]	; (801b28c <HAL_ETH_SetMDIOClockRange+0xa4>)
 801b246:	4293      	cmp	r3, r2
 801b248:	d911      	bls.n	801b26e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801b24a:	68bb      	ldr	r3, [r7, #8]
 801b24c:	4a0f      	ldr	r2, [pc, #60]	; (801b28c <HAL_ETH_SetMDIOClockRange+0xa4>)
 801b24e:	4293      	cmp	r3, r2
 801b250:	d908      	bls.n	801b264 <HAL_ETH_SetMDIOClockRange+0x7c>
 801b252:	68bb      	ldr	r3, [r7, #8]
 801b254:	4a0e      	ldr	r2, [pc, #56]	; (801b290 <HAL_ETH_SetMDIOClockRange+0xa8>)
 801b256:	4293      	cmp	r3, r2
 801b258:	d804      	bhi.n	801b264 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	f043 0304 	orr.w	r3, r3, #4
 801b260:	60fb      	str	r3, [r7, #12]
 801b262:	e005      	b.n	801b270 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	f043 0310 	orr.w	r3, r3, #16
 801b26a:	60fb      	str	r3, [r7, #12]
 801b26c:	e000      	b.n	801b270 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801b26e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	68fa      	ldr	r2, [r7, #12]
 801b276:	611a      	str	r2, [r3, #16]
}
 801b278:	bf00      	nop
 801b27a:	3710      	adds	r7, #16
 801b27c:	46bd      	mov	sp, r7
 801b27e:	bd80      	pop	{r7, pc}
 801b280:	01312cff 	.word	0x01312cff
 801b284:	02160ebf 	.word	0x02160ebf
 801b288:	03938700 	.word	0x03938700
 801b28c:	05f5e0ff 	.word	0x05f5e0ff
 801b290:	08f0d17f 	.word	0x08f0d17f

0801b294 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 801b294:	b580      	push	{r7, lr}
 801b296:	b084      	sub	sp, #16
 801b298:	af00      	add	r7, sp, #0
 801b29a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801b29c:	2300      	movs	r3, #0
 801b29e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2a8:	699b      	ldr	r3, [r3, #24]
 801b2aa:	687a      	ldr	r2, [r7, #4]
 801b2ac:	6812      	ldr	r2, [r2, #0]
 801b2ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b2b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b2b6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2c0:	699b      	ldr	r3, [r3, #24]
 801b2c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b2c4:	2001      	movs	r0, #1
 801b2c6:	f7fe f8e9 	bl	801949c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	681a      	ldr	r2, [r3, #0]
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b2d4:	6193      	str	r3, [r2, #24]
}
 801b2d6:	bf00      	nop
 801b2d8:	3710      	adds	r7, #16
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}
	...

0801b2e0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801b2e0:	b580      	push	{r7, lr}
 801b2e2:	b084      	sub	sp, #16
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	6078      	str	r0, [r7, #4]
 801b2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801b2f2:	68fa      	ldr	r2, [r7, #12]
 801b2f4:	4b51      	ldr	r3, [pc, #324]	; (801b43c <ETH_SetMACConfig+0x15c>)
 801b2f6:	4013      	ands	r3, r2
 801b2f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801b2fa:	683b      	ldr	r3, [r7, #0]
 801b2fc:	7c1b      	ldrb	r3, [r3, #16]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d102      	bne.n	801b308 <ETH_SetMACConfig+0x28>
 801b302:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801b306:	e000      	b.n	801b30a <ETH_SetMACConfig+0x2a>
 801b308:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801b30a:	683b      	ldr	r3, [r7, #0]
 801b30c:	7c5b      	ldrb	r3, [r3, #17]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d102      	bne.n	801b318 <ETH_SetMACConfig+0x38>
 801b312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b316:	e000      	b.n	801b31a <ETH_SetMACConfig+0x3a>
 801b318:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801b31a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 801b31c:	683b      	ldr	r3, [r7, #0]
 801b31e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801b320:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801b322:	683b      	ldr	r3, [r7, #0]
 801b324:	7fdb      	ldrb	r3, [r3, #31]
 801b326:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801b328:	431a      	orrs	r2, r3
                        macconf->Speed |
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801b32e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801b330:	683a      	ldr	r2, [r7, #0]
 801b332:	7f92      	ldrb	r2, [r2, #30]
 801b334:	2a00      	cmp	r2, #0
 801b336:	d102      	bne.n	801b33e <ETH_SetMACConfig+0x5e>
 801b338:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801b33c:	e000      	b.n	801b340 <ETH_SetMACConfig+0x60>
 801b33e:	2200      	movs	r2, #0
                        macconf->Speed |
 801b340:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	7f1b      	ldrb	r3, [r3, #28]
 801b346:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801b348:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801b34a:	683b      	ldr	r3, [r7, #0]
 801b34c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801b34e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801b350:	683b      	ldr	r3, [r7, #0]
 801b352:	791b      	ldrb	r3, [r3, #4]
 801b354:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801b356:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801b358:	683a      	ldr	r2, [r7, #0]
 801b35a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801b35e:	2a00      	cmp	r2, #0
 801b360:	d102      	bne.n	801b368 <ETH_SetMACConfig+0x88>
 801b362:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b366:	e000      	b.n	801b36a <ETH_SetMACConfig+0x8a>
 801b368:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801b36a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801b36c:	683b      	ldr	r3, [r7, #0]
 801b36e:	7bdb      	ldrb	r3, [r3, #15]
 801b370:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801b372:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 801b374:	683b      	ldr	r3, [r7, #0]
 801b376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801b378:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801b37a:	683b      	ldr	r3, [r7, #0]
 801b37c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b380:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801b382:	4313      	orrs	r3, r2
 801b384:	68fa      	ldr	r2, [r7, #12]
 801b386:	4313      	orrs	r3, r2
 801b388:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	68fa      	ldr	r2, [r7, #12]
 801b390:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b39a:	2001      	movs	r0, #1
 801b39c:	f7fe f87e 	bl	801949c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	68fa      	ldr	r2, [r7, #12]
 801b3a6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	699b      	ldr	r3, [r3, #24]
 801b3ae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 801b3b0:	68fa      	ldr	r2, [r7, #12]
 801b3b2:	f64f 7341 	movw	r3, #65345	; 0xff41
 801b3b6:	4013      	ands	r3, r2
 801b3b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801b3ba:	683b      	ldr	r3, [r7, #0]
 801b3bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3be:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801b3c0:	683a      	ldr	r2, [r7, #0]
 801b3c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 801b3c6:	2a00      	cmp	r2, #0
 801b3c8:	d101      	bne.n	801b3ce <ETH_SetMACConfig+0xee>
 801b3ca:	2280      	movs	r2, #128	; 0x80
 801b3cc:	e000      	b.n	801b3d0 <ETH_SetMACConfig+0xf0>
 801b3ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801b3d0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 801b3d2:	683b      	ldr	r3, [r7, #0]
 801b3d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801b3d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801b3d8:	683a      	ldr	r2, [r7, #0]
 801b3da:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801b3de:	2a01      	cmp	r2, #1
 801b3e0:	d101      	bne.n	801b3e6 <ETH_SetMACConfig+0x106>
 801b3e2:	2208      	movs	r2, #8
 801b3e4:	e000      	b.n	801b3e8 <ETH_SetMACConfig+0x108>
 801b3e6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 801b3e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 801b3ea:	683a      	ldr	r2, [r7, #0]
 801b3ec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801b3f0:	2a01      	cmp	r2, #1
 801b3f2:	d101      	bne.n	801b3f8 <ETH_SetMACConfig+0x118>
 801b3f4:	2204      	movs	r2, #4
 801b3f6:	e000      	b.n	801b3fa <ETH_SetMACConfig+0x11a>
 801b3f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801b3fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 801b3fc:	683a      	ldr	r2, [r7, #0]
 801b3fe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801b402:	2a01      	cmp	r2, #1
 801b404:	d101      	bne.n	801b40a <ETH_SetMACConfig+0x12a>
 801b406:	2202      	movs	r2, #2
 801b408:	e000      	b.n	801b40c <ETH_SetMACConfig+0x12c>
 801b40a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801b40c:	4313      	orrs	r3, r2
 801b40e:	68fa      	ldr	r2, [r7, #12]
 801b410:	4313      	orrs	r3, r2
 801b412:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	68fa      	ldr	r2, [r7, #12]
 801b41a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	699b      	ldr	r3, [r3, #24]
 801b422:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b424:	2001      	movs	r0, #1
 801b426:	f7fe f839 	bl	801949c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	68fa      	ldr	r2, [r7, #12]
 801b430:	619a      	str	r2, [r3, #24]
}
 801b432:	bf00      	nop
 801b434:	3710      	adds	r7, #16
 801b436:	46bd      	mov	sp, r7
 801b438:	bd80      	pop	{r7, pc}
 801b43a:	bf00      	nop
 801b43c:	ff20810f 	.word	0xff20810f

0801b440 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 801b440:	b580      	push	{r7, lr}
 801b442:	b084      	sub	sp, #16
 801b444:	af00      	add	r7, sp, #0
 801b446:	6078      	str	r0, [r7, #4]
 801b448:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b452:	699b      	ldr	r3, [r3, #24]
 801b454:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801b456:	68fa      	ldr	r2, [r7, #12]
 801b458:	4b3d      	ldr	r3, [pc, #244]	; (801b550 <ETH_SetDMAConfig+0x110>)
 801b45a:	4013      	ands	r3, r2
 801b45c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801b45e:	683b      	ldr	r3, [r7, #0]
 801b460:	7b1b      	ldrb	r3, [r3, #12]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d102      	bne.n	801b46c <ETH_SetDMAConfig+0x2c>
 801b466:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801b46a:	e000      	b.n	801b46e <ETH_SetDMAConfig+0x2e>
 801b46c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801b46e:	683b      	ldr	r3, [r7, #0]
 801b470:	7b5b      	ldrb	r3, [r3, #13]
 801b472:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801b474:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801b476:	683a      	ldr	r2, [r7, #0]
 801b478:	7f52      	ldrb	r2, [r2, #29]
 801b47a:	2a00      	cmp	r2, #0
 801b47c:	d102      	bne.n	801b484 <ETH_SetDMAConfig+0x44>
 801b47e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801b482:	e000      	b.n	801b486 <ETH_SetDMAConfig+0x46>
 801b484:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801b486:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	7b9b      	ldrb	r3, [r3, #14]
 801b48c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801b48e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 801b490:	683b      	ldr	r3, [r7, #0]
 801b492:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801b494:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801b496:	683b      	ldr	r3, [r7, #0]
 801b498:	7f1b      	ldrb	r3, [r3, #28]
 801b49a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801b49c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801b49e:	683b      	ldr	r3, [r7, #0]
 801b4a0:	7f9b      	ldrb	r3, [r3, #30]
 801b4a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801b4a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801b4aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801b4ac:	683b      	ldr	r3, [r7, #0]
 801b4ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b4b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801b4b4:	4313      	orrs	r3, r2
 801b4b6:	68fa      	ldr	r2, [r7, #12]
 801b4b8:	4313      	orrs	r3, r2
 801b4ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b4c4:	461a      	mov	r2, r3
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b4d2:	699b      	ldr	r3, [r3, #24]
 801b4d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b4d6:	2001      	movs	r0, #1
 801b4d8:	f7fd ffe0 	bl	801949c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b4e4:	461a      	mov	r2, r3
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801b4ea:	683b      	ldr	r3, [r7, #0]
 801b4ec:	791b      	ldrb	r3, [r3, #4]
 801b4ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 801b4f0:	683b      	ldr	r3, [r7, #0]
 801b4f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801b4f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801b4fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 801b4fc:	683b      	ldr	r3, [r7, #0]
 801b4fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801b500:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801b502:	683b      	ldr	r3, [r7, #0]
 801b504:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b508:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 801b50a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801b50c:	683b      	ldr	r3, [r7, #0]
 801b50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b510:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801b512:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 801b514:	683b      	ldr	r3, [r7, #0]
 801b516:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801b518:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801b51a:	687a      	ldr	r2, [r7, #4]
 801b51c:	6812      	ldr	r2, [r2, #0]
 801b51e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801b522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b526:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b534:	2001      	movs	r0, #1
 801b536:	f7fd ffb1 	bl	801949c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b542:	461a      	mov	r2, r3
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	6013      	str	r3, [r2, #0]
}
 801b548:	bf00      	nop
 801b54a:	3710      	adds	r7, #16
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bd80      	pop	{r7, pc}
 801b550:	f8de3f23 	.word	0xf8de3f23

0801b554 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b0a6      	sub	sp, #152	; 0x98
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 801b55c:	2301      	movs	r3, #1
 801b55e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 801b562:	2301      	movs	r3, #1
 801b564:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 801b568:	2300      	movs	r3, #0
 801b56a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801b56c:	2300      	movs	r3, #0
 801b56e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 801b572:	2301      	movs	r3, #1
 801b574:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 801b578:	2300      	movs	r3, #0
 801b57a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801b57e:	2301      	movs	r3, #1
 801b580:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 801b584:	2300      	movs	r3, #0
 801b586:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801b58a:	2300      	movs	r3, #0
 801b58c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801b590:	2300      	movs	r3, #0
 801b592:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 801b594:	2300      	movs	r3, #0
 801b596:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 801b59a:	2300      	movs	r3, #0
 801b59c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 801b59e:	2300      	movs	r3, #0
 801b5a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 801b5b0:	2300      	movs	r3, #0
 801b5b2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 801b5b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801b5ba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801b5bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801b5c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b5cc:	4619      	mov	r1, r3
 801b5ce:	6878      	ldr	r0, [r7, #4]
 801b5d0:	f7ff fe86 	bl	801b2e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 801b5d4:	2301      	movs	r3, #1
 801b5d6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 801b5d8:	2301      	movs	r3, #1
 801b5da:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 801b5dc:	2301      	movs	r3, #1
 801b5de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 801b5e2:	2301      	movs	r3, #1
 801b5e4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801b5fa:	2301      	movs	r3, #1
 801b5fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801b600:	2301      	movs	r3, #1
 801b602:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801b604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801b608:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801b60a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b60e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801b610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801b614:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 801b616:	2301      	movs	r3, #1
 801b618:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 801b61c:	2300      	movs	r3, #0
 801b61e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 801b620:	2300      	movs	r3, #0
 801b622:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801b624:	f107 0308 	add.w	r3, r7, #8
 801b628:	4619      	mov	r1, r3
 801b62a:	6878      	ldr	r0, [r7, #4]
 801b62c:	f7ff ff08 	bl	801b440 <ETH_SetDMAConfig>
}
 801b630:	bf00      	nop
 801b632:	3798      	adds	r7, #152	; 0x98
 801b634:	46bd      	mov	sp, r7
 801b636:	bd80      	pop	{r7, pc}

0801b638 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 801b638:	b480      	push	{r7}
 801b63a:	b087      	sub	sp, #28
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	60f8      	str	r0, [r7, #12]
 801b640:	60b9      	str	r1, [r7, #8]
 801b642:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	3305      	adds	r3, #5
 801b648:	781b      	ldrb	r3, [r3, #0]
 801b64a:	021b      	lsls	r3, r3, #8
 801b64c:	687a      	ldr	r2, [r7, #4]
 801b64e:	3204      	adds	r2, #4
 801b650:	7812      	ldrb	r2, [r2, #0]
 801b652:	4313      	orrs	r3, r2
 801b654:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 801b656:	68ba      	ldr	r2, [r7, #8]
 801b658:	4b11      	ldr	r3, [pc, #68]	; (801b6a0 <ETH_MACAddressConfig+0x68>)
 801b65a:	4413      	add	r3, r2
 801b65c:	461a      	mov	r2, r3
 801b65e:	697b      	ldr	r3, [r7, #20]
 801b660:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	3303      	adds	r3, #3
 801b666:	781b      	ldrb	r3, [r3, #0]
 801b668:	061a      	lsls	r2, r3, #24
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	3302      	adds	r3, #2
 801b66e:	781b      	ldrb	r3, [r3, #0]
 801b670:	041b      	lsls	r3, r3, #16
 801b672:	431a      	orrs	r2, r3
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	3301      	adds	r3, #1
 801b678:	781b      	ldrb	r3, [r3, #0]
 801b67a:	021b      	lsls	r3, r3, #8
 801b67c:	4313      	orrs	r3, r2
 801b67e:	687a      	ldr	r2, [r7, #4]
 801b680:	7812      	ldrb	r2, [r2, #0]
 801b682:	4313      	orrs	r3, r2
 801b684:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 801b686:	68ba      	ldr	r2, [r7, #8]
 801b688:	4b06      	ldr	r3, [pc, #24]	; (801b6a4 <ETH_MACAddressConfig+0x6c>)
 801b68a:	4413      	add	r3, r2
 801b68c:	461a      	mov	r2, r3
 801b68e:	697b      	ldr	r3, [r7, #20]
 801b690:	6013      	str	r3, [r2, #0]
}
 801b692:	bf00      	nop
 801b694:	371c      	adds	r7, #28
 801b696:	46bd      	mov	sp, r7
 801b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b69c:	4770      	bx	lr
 801b69e:	bf00      	nop
 801b6a0:	40028040 	.word	0x40028040
 801b6a4:	40028044 	.word	0x40028044

0801b6a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801b6a8:	b480      	push	{r7}
 801b6aa:	b085      	sub	sp, #20
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	60fb      	str	r3, [r7, #12]
 801b6b4:	e03e      	b.n	801b734 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	68d9      	ldr	r1, [r3, #12]
 801b6ba:	68fa      	ldr	r2, [r7, #12]
 801b6bc:	4613      	mov	r3, r2
 801b6be:	009b      	lsls	r3, r3, #2
 801b6c0:	4413      	add	r3, r2
 801b6c2:	00db      	lsls	r3, r3, #3
 801b6c4:	440b      	add	r3, r1
 801b6c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801b6c8:	68bb      	ldr	r3, [r7, #8]
 801b6ca:	2200      	movs	r2, #0
 801b6cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 801b6ce:	68bb      	ldr	r3, [r7, #8]
 801b6d0:	2200      	movs	r2, #0
 801b6d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 801b6d4:	68bb      	ldr	r3, [r7, #8]
 801b6d6:	2200      	movs	r2, #0
 801b6d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801b6da:	68bb      	ldr	r3, [r7, #8]
 801b6dc:	2200      	movs	r2, #0
 801b6de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801b6e0:	68b9      	ldr	r1, [r7, #8]
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	68fa      	ldr	r2, [r7, #12]
 801b6e6:	3206      	adds	r2, #6
 801b6e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 801b6ec:	68bb      	ldr	r3, [r7, #8]
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801b6f4:	68bb      	ldr	r3, [r7, #8]
 801b6f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	2b02      	cmp	r3, #2
 801b6fc:	d80c      	bhi.n	801b718 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	68d9      	ldr	r1, [r3, #12]
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	1c5a      	adds	r2, r3, #1
 801b706:	4613      	mov	r3, r2
 801b708:	009b      	lsls	r3, r3, #2
 801b70a:	4413      	add	r3, r2
 801b70c:	00db      	lsls	r3, r3, #3
 801b70e:	440b      	add	r3, r1
 801b710:	461a      	mov	r2, r3
 801b712:	68bb      	ldr	r3, [r7, #8]
 801b714:	60da      	str	r2, [r3, #12]
 801b716:	e004      	b.n	801b722 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	68db      	ldr	r3, [r3, #12]
 801b71c:	461a      	mov	r2, r3
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801b72a:	68bb      	ldr	r3, [r7, #8]
 801b72c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	3301      	adds	r3, #1
 801b732:	60fb      	str	r3, [r7, #12]
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	2b03      	cmp	r3, #3
 801b738:	d9bd      	bls.n	801b6b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	2200      	movs	r2, #0
 801b73e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	68da      	ldr	r2, [r3, #12]
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b74c:	611a      	str	r2, [r3, #16]
}
 801b74e:	bf00      	nop
 801b750:	3714      	adds	r7, #20
 801b752:	46bd      	mov	sp, r7
 801b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b758:	4770      	bx	lr

0801b75a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801b75a:	b480      	push	{r7}
 801b75c:	b085      	sub	sp, #20
 801b75e:	af00      	add	r7, sp, #0
 801b760:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801b762:	2300      	movs	r3, #0
 801b764:	60fb      	str	r3, [r7, #12]
 801b766:	e046      	b.n	801b7f6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	6919      	ldr	r1, [r3, #16]
 801b76c:	68fa      	ldr	r2, [r7, #12]
 801b76e:	4613      	mov	r3, r2
 801b770:	009b      	lsls	r3, r3, #2
 801b772:	4413      	add	r3, r2
 801b774:	00db      	lsls	r3, r3, #3
 801b776:	440b      	add	r3, r1
 801b778:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 801b77a:	68bb      	ldr	r3, [r7, #8]
 801b77c:	2200      	movs	r2, #0
 801b77e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	2200      	movs	r2, #0
 801b784:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	2200      	movs	r2, #0
 801b78a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	2200      	movs	r2, #0
 801b790:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 801b792:	68bb      	ldr	r3, [r7, #8]
 801b794:	2200      	movs	r2, #0
 801b796:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 801b798:	68bb      	ldr	r3, [r7, #8]
 801b79a:	2200      	movs	r2, #0
 801b79c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 801b79e:	68bb      	ldr	r3, [r7, #8]
 801b7a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b7a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801b7a6:	68bb      	ldr	r3, [r7, #8]
 801b7a8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801b7ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 801b7ae:	68bb      	ldr	r3, [r7, #8]
 801b7b0:	685b      	ldr	r3, [r3, #4]
 801b7b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b7b6:	68bb      	ldr	r3, [r7, #8]
 801b7b8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801b7ba:	68b9      	ldr	r1, [r7, #8]
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	68fa      	ldr	r2, [r7, #12]
 801b7c0:	3212      	adds	r2, #18
 801b7c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	2b02      	cmp	r3, #2
 801b7ca:	d80c      	bhi.n	801b7e6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	6919      	ldr	r1, [r3, #16]
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	1c5a      	adds	r2, r3, #1
 801b7d4:	4613      	mov	r3, r2
 801b7d6:	009b      	lsls	r3, r3, #2
 801b7d8:	4413      	add	r3, r2
 801b7da:	00db      	lsls	r3, r3, #3
 801b7dc:	440b      	add	r3, r1
 801b7de:	461a      	mov	r2, r3
 801b7e0:	68bb      	ldr	r3, [r7, #8]
 801b7e2:	60da      	str	r2, [r3, #12]
 801b7e4:	e004      	b.n	801b7f0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	691b      	ldr	r3, [r3, #16]
 801b7ea:	461a      	mov	r2, r3
 801b7ec:	68bb      	ldr	r3, [r7, #8]
 801b7ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	3301      	adds	r3, #1
 801b7f4:	60fb      	str	r3, [r7, #12]
 801b7f6:	68fb      	ldr	r3, [r7, #12]
 801b7f8:	2b03      	cmp	r3, #3
 801b7fa:	d9b5      	bls.n	801b768 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2200      	movs	r2, #0
 801b800:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	2200      	movs	r2, #0
 801b806:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	2200      	movs	r2, #0
 801b80c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	2200      	movs	r2, #0
 801b812:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	2200      	movs	r2, #0
 801b818:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	691a      	ldr	r2, [r3, #16]
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b826:	60da      	str	r2, [r3, #12]
}
 801b828:	bf00      	nop
 801b82a:	3714      	adds	r7, #20
 801b82c:	46bd      	mov	sp, r7
 801b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b832:	4770      	bx	lr

0801b834 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 801b834:	b480      	push	{r7}
 801b836:	b08d      	sub	sp, #52	; 0x34
 801b838:	af00      	add	r7, sp, #0
 801b83a:	60f8      	str	r0, [r7, #12]
 801b83c:	60b9      	str	r1, [r7, #8]
 801b83e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	3318      	adds	r3, #24
 801b844:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 801b846:	697b      	ldr	r3, [r7, #20]
 801b848:	691b      	ldr	r3, [r3, #16]
 801b84a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801b84c:	697b      	ldr	r3, [r7, #20]
 801b84e:	691b      	ldr	r3, [r3, #16]
 801b850:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 801b852:	2300      	movs	r3, #0
 801b854:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801b856:	697b      	ldr	r3, [r7, #20]
 801b858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b85e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 801b860:	68bb      	ldr	r3, [r7, #8]
 801b862:	689b      	ldr	r3, [r3, #8]
 801b864:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 801b866:	2300      	movs	r3, #0
 801b868:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801b86a:	6a3b      	ldr	r3, [r7, #32]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b876:	d007      	beq.n	801b888 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801b878:	697a      	ldr	r2, [r7, #20]
 801b87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b87c:	3304      	adds	r3, #4
 801b87e:	009b      	lsls	r3, r3, #2
 801b880:	4413      	add	r3, r2
 801b882:	685b      	ldr	r3, [r3, #4]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d001      	beq.n	801b88c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 801b888:	2302      	movs	r3, #2
 801b88a:	e0ff      	b.n	801ba8c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 801b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b88e:	3301      	adds	r3, #1
 801b890:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801b892:	69fb      	ldr	r3, [r7, #28]
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	461a      	mov	r2, r3
 801b898:	6a3b      	ldr	r3, [r7, #32]
 801b89a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801b89c:	6a3b      	ldr	r3, [r7, #32]
 801b89e:	685a      	ldr	r2, [r3, #4]
 801b8a0:	4b7d      	ldr	r3, [pc, #500]	; (801ba98 <ETH_Prepare_Tx_Descriptors+0x264>)
 801b8a2:	4013      	ands	r3, r2
 801b8a4:	69fa      	ldr	r2, [r7, #28]
 801b8a6:	6852      	ldr	r2, [r2, #4]
 801b8a8:	431a      	orrs	r2, r3
 801b8aa:	6a3b      	ldr	r3, [r7, #32]
 801b8ac:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 801b8ae:	68bb      	ldr	r3, [r7, #8]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	f003 0301 	and.w	r3, r3, #1
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d008      	beq.n	801b8cc <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 801b8ba:	6a3b      	ldr	r3, [r7, #32]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	695b      	ldr	r3, [r3, #20]
 801b8c6:	431a      	orrs	r2, r3
 801b8c8:	6a3b      	ldr	r3, [r7, #32]
 801b8ca:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	f003 0320 	and.w	r3, r3, #32
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d008      	beq.n	801b8ea <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 801b8d8:	6a3b      	ldr	r3, [r7, #32]
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801b8e0:	68bb      	ldr	r3, [r7, #8]
 801b8e2:	691b      	ldr	r3, [r3, #16]
 801b8e4:	431a      	orrs	r2, r3
 801b8e6:	6a3b      	ldr	r3, [r7, #32]
 801b8e8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 801b8ea:	68bb      	ldr	r3, [r7, #8]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	f003 0304 	and.w	r3, r3, #4
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d005      	beq.n	801b902 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 801b8f6:	6a3b      	ldr	r3, [r7, #32]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801b8fe:	6a3b      	ldr	r3, [r7, #32]
 801b900:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801b902:	6a3b      	ldr	r3, [r7, #32]
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801b90a:	6a3b      	ldr	r3, [r7, #32]
 801b90c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801b90e:	f3bf 8f5f 	dmb	sy
}
 801b912:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801b914:	6a3b      	ldr	r3, [r7, #32]
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b91c:	6a3b      	ldr	r3, [r7, #32]
 801b91e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 801b920:	e082      	b.n	801ba28 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801b922:	6a3b      	ldr	r3, [r7, #32]
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b92a:	6a3b      	ldr	r3, [r7, #32]
 801b92c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d006      	beq.n	801b942 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801b934:	6a3b      	ldr	r3, [r7, #32]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801b93c:	6a3b      	ldr	r3, [r7, #32]
 801b93e:	601a      	str	r2, [r3, #0]
 801b940:	e005      	b.n	801b94e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801b942:	6a3b      	ldr	r3, [r7, #32]
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801b94a:	6a3b      	ldr	r3, [r7, #32]
 801b94c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 801b94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b950:	3301      	adds	r3, #1
 801b952:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b956:	2b03      	cmp	r3, #3
 801b958:	d902      	bls.n	801b960 <ETH_Prepare_Tx_Descriptors+0x12c>
 801b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b95c:	3b04      	subs	r3, #4
 801b95e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801b960:	697b      	ldr	r3, [r7, #20]
 801b962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b968:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801b96a:	6a3b      	ldr	r3, [r7, #32]
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b972:	6a3b      	ldr	r3, [r7, #32]
 801b974:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801b976:	6a3b      	ldr	r3, [r7, #32]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b97e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b982:	d007      	beq.n	801b994 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801b984:	697a      	ldr	r2, [r7, #20]
 801b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b988:	3304      	adds	r3, #4
 801b98a:	009b      	lsls	r3, r3, #2
 801b98c:	4413      	add	r3, r2
 801b98e:	685b      	ldr	r3, [r3, #4]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d029      	beq.n	801b9e8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 801b994:	693b      	ldr	r3, [r7, #16]
 801b996:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801b998:	697b      	ldr	r3, [r7, #20]
 801b99a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9a0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	62bb      	str	r3, [r7, #40]	; 0x28
 801b9a6:	e019      	b.n	801b9dc <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801b9a8:	f3bf 8f5f 	dmb	sy
}
 801b9ac:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801b9ae:	6a3b      	ldr	r3, [r7, #32]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b9b6:	6a3b      	ldr	r3, [r7, #32]
 801b9b8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9bc:	3301      	adds	r3, #1
 801b9be:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9c2:	2b03      	cmp	r3, #3
 801b9c4:	d902      	bls.n	801b9cc <ETH_Prepare_Tx_Descriptors+0x198>
 801b9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9c8:	3b04      	subs	r3, #4
 801b9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801b9cc:	697b      	ldr	r3, [r7, #20]
 801b9ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b9d4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9d8:	3301      	adds	r3, #1
 801b9da:	62bb      	str	r3, [r7, #40]	; 0x28
 801b9dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9e0:	429a      	cmp	r2, r3
 801b9e2:	d3e1      	bcc.n	801b9a8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 801b9e4:	2302      	movs	r3, #2
 801b9e6:	e051      	b.n	801ba8c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 801b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9ea:	3301      	adds	r3, #1
 801b9ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 801b9ee:	69fb      	ldr	r3, [r7, #28]
 801b9f0:	689b      	ldr	r3, [r3, #8]
 801b9f2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801b9f4:	69fb      	ldr	r3, [r7, #28]
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	461a      	mov	r2, r3
 801b9fa:	6a3b      	ldr	r3, [r7, #32]
 801b9fc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801b9fe:	6a3b      	ldr	r3, [r7, #32]
 801ba00:	685a      	ldr	r2, [r3, #4]
 801ba02:	4b25      	ldr	r3, [pc, #148]	; (801ba98 <ETH_Prepare_Tx_Descriptors+0x264>)
 801ba04:	4013      	ands	r3, r2
 801ba06:	69fa      	ldr	r2, [r7, #28]
 801ba08:	6852      	ldr	r2, [r2, #4]
 801ba0a:	431a      	orrs	r2, r3
 801ba0c:	6a3b      	ldr	r3, [r7, #32]
 801ba0e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 801ba10:	69bb      	ldr	r3, [r7, #24]
 801ba12:	3301      	adds	r3, #1
 801ba14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801ba16:	f3bf 8f5f 	dmb	sy
}
 801ba1a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801ba1c:	6a3b      	ldr	r3, [r7, #32]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801ba24:	6a3b      	ldr	r3, [r7, #32]
 801ba26:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801ba28:	69fb      	ldr	r3, [r7, #28]
 801ba2a:	689b      	ldr	r3, [r3, #8]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	f47f af78 	bne.w	801b922 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d006      	beq.n	801ba46 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801ba38:	6a3b      	ldr	r3, [r7, #32]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801ba40:	6a3b      	ldr	r3, [r7, #32]
 801ba42:	601a      	str	r2, [r3, #0]
 801ba44:	e005      	b.n	801ba52 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801ba46:	6a3b      	ldr	r3, [r7, #32]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801ba4e:	6a3b      	ldr	r3, [r7, #32]
 801ba50:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801ba52:	6a3b      	ldr	r3, [r7, #32]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801ba5a:	6a3b      	ldr	r3, [r7, #32]
 801ba5c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 801ba5e:	697b      	ldr	r3, [r7, #20]
 801ba60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba62:	6979      	ldr	r1, [r7, #20]
 801ba64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba66:	3304      	adds	r3, #4
 801ba68:	009b      	lsls	r3, r3, #2
 801ba6a:	440b      	add	r3, r1
 801ba6c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 801ba6e:	697b      	ldr	r3, [r7, #20]
 801ba70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ba72:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba74:	b672      	cpsid	i
}
 801ba76:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 801ba78:	697b      	ldr	r3, [r7, #20]
 801ba7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801ba7c:	69bb      	ldr	r3, [r7, #24]
 801ba7e:	4413      	add	r3, r2
 801ba80:	1c5a      	adds	r2, r3, #1
 801ba82:	697b      	ldr	r3, [r7, #20]
 801ba84:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 801ba86:	b662      	cpsie	i
}
 801ba88:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 801ba8a:	2300      	movs	r3, #0
}
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	3734      	adds	r7, #52	; 0x34
 801ba90:	46bd      	mov	sp, r7
 801ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba96:	4770      	bx	lr
 801ba98:	ffffe000 	.word	0xffffe000

0801ba9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801ba9c:	b480      	push	{r7}
 801ba9e:	b089      	sub	sp, #36	; 0x24
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	6078      	str	r0, [r7, #4]
 801baa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801baa6:	2300      	movs	r3, #0
 801baa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801baaa:	2300      	movs	r3, #0
 801baac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 801baae:	2300      	movs	r3, #0
 801bab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 801bab2:	2300      	movs	r3, #0
 801bab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801bab6:	2300      	movs	r3, #0
 801bab8:	61fb      	str	r3, [r7, #28]
 801baba:	e175      	b.n	801bda8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 801babc:	2201      	movs	r2, #1
 801babe:	69fb      	ldr	r3, [r7, #28]
 801bac0:	fa02 f303 	lsl.w	r3, r2, r3
 801bac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801bac6:	683b      	ldr	r3, [r7, #0]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	697a      	ldr	r2, [r7, #20]
 801bacc:	4013      	ands	r3, r2
 801bace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801bad0:	693a      	ldr	r2, [r7, #16]
 801bad2:	697b      	ldr	r3, [r7, #20]
 801bad4:	429a      	cmp	r2, r3
 801bad6:	f040 8164 	bne.w	801bda2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801bada:	683b      	ldr	r3, [r7, #0]
 801badc:	685b      	ldr	r3, [r3, #4]
 801bade:	f003 0303 	and.w	r3, r3, #3
 801bae2:	2b01      	cmp	r3, #1
 801bae4:	d005      	beq.n	801baf2 <HAL_GPIO_Init+0x56>
 801bae6:	683b      	ldr	r3, [r7, #0]
 801bae8:	685b      	ldr	r3, [r3, #4]
 801baea:	f003 0303 	and.w	r3, r3, #3
 801baee:	2b02      	cmp	r3, #2
 801baf0:	d130      	bne.n	801bb54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	689b      	ldr	r3, [r3, #8]
 801baf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801baf8:	69fb      	ldr	r3, [r7, #28]
 801bafa:	005b      	lsls	r3, r3, #1
 801bafc:	2203      	movs	r2, #3
 801bafe:	fa02 f303 	lsl.w	r3, r2, r3
 801bb02:	43db      	mvns	r3, r3
 801bb04:	69ba      	ldr	r2, [r7, #24]
 801bb06:	4013      	ands	r3, r2
 801bb08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801bb0a:	683b      	ldr	r3, [r7, #0]
 801bb0c:	68da      	ldr	r2, [r3, #12]
 801bb0e:	69fb      	ldr	r3, [r7, #28]
 801bb10:	005b      	lsls	r3, r3, #1
 801bb12:	fa02 f303 	lsl.w	r3, r2, r3
 801bb16:	69ba      	ldr	r2, [r7, #24]
 801bb18:	4313      	orrs	r3, r2
 801bb1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	69ba      	ldr	r2, [r7, #24]
 801bb20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	685b      	ldr	r3, [r3, #4]
 801bb26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801bb28:	2201      	movs	r2, #1
 801bb2a:	69fb      	ldr	r3, [r7, #28]
 801bb2c:	fa02 f303 	lsl.w	r3, r2, r3
 801bb30:	43db      	mvns	r3, r3
 801bb32:	69ba      	ldr	r2, [r7, #24]
 801bb34:	4013      	ands	r3, r2
 801bb36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bb38:	683b      	ldr	r3, [r7, #0]
 801bb3a:	685b      	ldr	r3, [r3, #4]
 801bb3c:	091b      	lsrs	r3, r3, #4
 801bb3e:	f003 0201 	and.w	r2, r3, #1
 801bb42:	69fb      	ldr	r3, [r7, #28]
 801bb44:	fa02 f303 	lsl.w	r3, r2, r3
 801bb48:	69ba      	ldr	r2, [r7, #24]
 801bb4a:	4313      	orrs	r3, r2
 801bb4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	69ba      	ldr	r2, [r7, #24]
 801bb52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bb54:	683b      	ldr	r3, [r7, #0]
 801bb56:	685b      	ldr	r3, [r3, #4]
 801bb58:	f003 0303 	and.w	r3, r3, #3
 801bb5c:	2b03      	cmp	r3, #3
 801bb5e:	d017      	beq.n	801bb90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	68db      	ldr	r3, [r3, #12]
 801bb64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801bb66:	69fb      	ldr	r3, [r7, #28]
 801bb68:	005b      	lsls	r3, r3, #1
 801bb6a:	2203      	movs	r2, #3
 801bb6c:	fa02 f303 	lsl.w	r3, r2, r3
 801bb70:	43db      	mvns	r3, r3
 801bb72:	69ba      	ldr	r2, [r7, #24]
 801bb74:	4013      	ands	r3, r2
 801bb76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801bb78:	683b      	ldr	r3, [r7, #0]
 801bb7a:	689a      	ldr	r2, [r3, #8]
 801bb7c:	69fb      	ldr	r3, [r7, #28]
 801bb7e:	005b      	lsls	r3, r3, #1
 801bb80:	fa02 f303 	lsl.w	r3, r2, r3
 801bb84:	69ba      	ldr	r2, [r7, #24]
 801bb86:	4313      	orrs	r3, r2
 801bb88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	69ba      	ldr	r2, [r7, #24]
 801bb8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bb90:	683b      	ldr	r3, [r7, #0]
 801bb92:	685b      	ldr	r3, [r3, #4]
 801bb94:	f003 0303 	and.w	r3, r3, #3
 801bb98:	2b02      	cmp	r3, #2
 801bb9a:	d123      	bne.n	801bbe4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801bb9c:	69fb      	ldr	r3, [r7, #28]
 801bb9e:	08da      	lsrs	r2, r3, #3
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	3208      	adds	r2, #8
 801bba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801bbaa:	69fb      	ldr	r3, [r7, #28]
 801bbac:	f003 0307 	and.w	r3, r3, #7
 801bbb0:	009b      	lsls	r3, r3, #2
 801bbb2:	220f      	movs	r2, #15
 801bbb4:	fa02 f303 	lsl.w	r3, r2, r3
 801bbb8:	43db      	mvns	r3, r3
 801bbba:	69ba      	ldr	r2, [r7, #24]
 801bbbc:	4013      	ands	r3, r2
 801bbbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801bbc0:	683b      	ldr	r3, [r7, #0]
 801bbc2:	691a      	ldr	r2, [r3, #16]
 801bbc4:	69fb      	ldr	r3, [r7, #28]
 801bbc6:	f003 0307 	and.w	r3, r3, #7
 801bbca:	009b      	lsls	r3, r3, #2
 801bbcc:	fa02 f303 	lsl.w	r3, r2, r3
 801bbd0:	69ba      	ldr	r2, [r7, #24]
 801bbd2:	4313      	orrs	r3, r2
 801bbd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801bbd6:	69fb      	ldr	r3, [r7, #28]
 801bbd8:	08da      	lsrs	r2, r3, #3
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	3208      	adds	r2, #8
 801bbde:	69b9      	ldr	r1, [r7, #24]
 801bbe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801bbea:	69fb      	ldr	r3, [r7, #28]
 801bbec:	005b      	lsls	r3, r3, #1
 801bbee:	2203      	movs	r2, #3
 801bbf0:	fa02 f303 	lsl.w	r3, r2, r3
 801bbf4:	43db      	mvns	r3, r3
 801bbf6:	69ba      	ldr	r2, [r7, #24]
 801bbf8:	4013      	ands	r3, r2
 801bbfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801bbfc:	683b      	ldr	r3, [r7, #0]
 801bbfe:	685b      	ldr	r3, [r3, #4]
 801bc00:	f003 0203 	and.w	r2, r3, #3
 801bc04:	69fb      	ldr	r3, [r7, #28]
 801bc06:	005b      	lsls	r3, r3, #1
 801bc08:	fa02 f303 	lsl.w	r3, r2, r3
 801bc0c:	69ba      	ldr	r2, [r7, #24]
 801bc0e:	4313      	orrs	r3, r2
 801bc10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	69ba      	ldr	r2, [r7, #24]
 801bc16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	685b      	ldr	r3, [r3, #4]
 801bc1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	f000 80be 	beq.w	801bda2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bc26:	4b66      	ldr	r3, [pc, #408]	; (801bdc0 <HAL_GPIO_Init+0x324>)
 801bc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc2a:	4a65      	ldr	r2, [pc, #404]	; (801bdc0 <HAL_GPIO_Init+0x324>)
 801bc2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bc30:	6453      	str	r3, [r2, #68]	; 0x44
 801bc32:	4b63      	ldr	r3, [pc, #396]	; (801bdc0 <HAL_GPIO_Init+0x324>)
 801bc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bc3a:	60fb      	str	r3, [r7, #12]
 801bc3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801bc3e:	4a61      	ldr	r2, [pc, #388]	; (801bdc4 <HAL_GPIO_Init+0x328>)
 801bc40:	69fb      	ldr	r3, [r7, #28]
 801bc42:	089b      	lsrs	r3, r3, #2
 801bc44:	3302      	adds	r3, #2
 801bc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bc4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801bc4c:	69fb      	ldr	r3, [r7, #28]
 801bc4e:	f003 0303 	and.w	r3, r3, #3
 801bc52:	009b      	lsls	r3, r3, #2
 801bc54:	220f      	movs	r2, #15
 801bc56:	fa02 f303 	lsl.w	r3, r2, r3
 801bc5a:	43db      	mvns	r3, r3
 801bc5c:	69ba      	ldr	r2, [r7, #24]
 801bc5e:	4013      	ands	r3, r2
 801bc60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	4a58      	ldr	r2, [pc, #352]	; (801bdc8 <HAL_GPIO_Init+0x32c>)
 801bc66:	4293      	cmp	r3, r2
 801bc68:	d037      	beq.n	801bcda <HAL_GPIO_Init+0x23e>
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	4a57      	ldr	r2, [pc, #348]	; (801bdcc <HAL_GPIO_Init+0x330>)
 801bc6e:	4293      	cmp	r3, r2
 801bc70:	d031      	beq.n	801bcd6 <HAL_GPIO_Init+0x23a>
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	4a56      	ldr	r2, [pc, #344]	; (801bdd0 <HAL_GPIO_Init+0x334>)
 801bc76:	4293      	cmp	r3, r2
 801bc78:	d02b      	beq.n	801bcd2 <HAL_GPIO_Init+0x236>
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	4a55      	ldr	r2, [pc, #340]	; (801bdd4 <HAL_GPIO_Init+0x338>)
 801bc7e:	4293      	cmp	r3, r2
 801bc80:	d025      	beq.n	801bcce <HAL_GPIO_Init+0x232>
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	4a54      	ldr	r2, [pc, #336]	; (801bdd8 <HAL_GPIO_Init+0x33c>)
 801bc86:	4293      	cmp	r3, r2
 801bc88:	d01f      	beq.n	801bcca <HAL_GPIO_Init+0x22e>
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	4a53      	ldr	r2, [pc, #332]	; (801bddc <HAL_GPIO_Init+0x340>)
 801bc8e:	4293      	cmp	r3, r2
 801bc90:	d019      	beq.n	801bcc6 <HAL_GPIO_Init+0x22a>
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	4a52      	ldr	r2, [pc, #328]	; (801bde0 <HAL_GPIO_Init+0x344>)
 801bc96:	4293      	cmp	r3, r2
 801bc98:	d013      	beq.n	801bcc2 <HAL_GPIO_Init+0x226>
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	4a51      	ldr	r2, [pc, #324]	; (801bde4 <HAL_GPIO_Init+0x348>)
 801bc9e:	4293      	cmp	r3, r2
 801bca0:	d00d      	beq.n	801bcbe <HAL_GPIO_Init+0x222>
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	4a50      	ldr	r2, [pc, #320]	; (801bde8 <HAL_GPIO_Init+0x34c>)
 801bca6:	4293      	cmp	r3, r2
 801bca8:	d007      	beq.n	801bcba <HAL_GPIO_Init+0x21e>
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	4a4f      	ldr	r2, [pc, #316]	; (801bdec <HAL_GPIO_Init+0x350>)
 801bcae:	4293      	cmp	r3, r2
 801bcb0:	d101      	bne.n	801bcb6 <HAL_GPIO_Init+0x21a>
 801bcb2:	2309      	movs	r3, #9
 801bcb4:	e012      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcb6:	230a      	movs	r3, #10
 801bcb8:	e010      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcba:	2308      	movs	r3, #8
 801bcbc:	e00e      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcbe:	2307      	movs	r3, #7
 801bcc0:	e00c      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcc2:	2306      	movs	r3, #6
 801bcc4:	e00a      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcc6:	2305      	movs	r3, #5
 801bcc8:	e008      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcca:	2304      	movs	r3, #4
 801bccc:	e006      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcce:	2303      	movs	r3, #3
 801bcd0:	e004      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcd2:	2302      	movs	r3, #2
 801bcd4:	e002      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcd6:	2301      	movs	r3, #1
 801bcd8:	e000      	b.n	801bcdc <HAL_GPIO_Init+0x240>
 801bcda:	2300      	movs	r3, #0
 801bcdc:	69fa      	ldr	r2, [r7, #28]
 801bcde:	f002 0203 	and.w	r2, r2, #3
 801bce2:	0092      	lsls	r2, r2, #2
 801bce4:	4093      	lsls	r3, r2
 801bce6:	69ba      	ldr	r2, [r7, #24]
 801bce8:	4313      	orrs	r3, r2
 801bcea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801bcec:	4935      	ldr	r1, [pc, #212]	; (801bdc4 <HAL_GPIO_Init+0x328>)
 801bcee:	69fb      	ldr	r3, [r7, #28]
 801bcf0:	089b      	lsrs	r3, r3, #2
 801bcf2:	3302      	adds	r3, #2
 801bcf4:	69ba      	ldr	r2, [r7, #24]
 801bcf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801bcfa:	4b3d      	ldr	r3, [pc, #244]	; (801bdf0 <HAL_GPIO_Init+0x354>)
 801bcfc:	689b      	ldr	r3, [r3, #8]
 801bcfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bd00:	693b      	ldr	r3, [r7, #16]
 801bd02:	43db      	mvns	r3, r3
 801bd04:	69ba      	ldr	r2, [r7, #24]
 801bd06:	4013      	ands	r3, r2
 801bd08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801bd0a:	683b      	ldr	r3, [r7, #0]
 801bd0c:	685b      	ldr	r3, [r3, #4]
 801bd0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d003      	beq.n	801bd1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801bd16:	69ba      	ldr	r2, [r7, #24]
 801bd18:	693b      	ldr	r3, [r7, #16]
 801bd1a:	4313      	orrs	r3, r2
 801bd1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801bd1e:	4a34      	ldr	r2, [pc, #208]	; (801bdf0 <HAL_GPIO_Init+0x354>)
 801bd20:	69bb      	ldr	r3, [r7, #24]
 801bd22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801bd24:	4b32      	ldr	r3, [pc, #200]	; (801bdf0 <HAL_GPIO_Init+0x354>)
 801bd26:	68db      	ldr	r3, [r3, #12]
 801bd28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bd2a:	693b      	ldr	r3, [r7, #16]
 801bd2c:	43db      	mvns	r3, r3
 801bd2e:	69ba      	ldr	r2, [r7, #24]
 801bd30:	4013      	ands	r3, r2
 801bd32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801bd34:	683b      	ldr	r3, [r7, #0]
 801bd36:	685b      	ldr	r3, [r3, #4]
 801bd38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d003      	beq.n	801bd48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801bd40:	69ba      	ldr	r2, [r7, #24]
 801bd42:	693b      	ldr	r3, [r7, #16]
 801bd44:	4313      	orrs	r3, r2
 801bd46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801bd48:	4a29      	ldr	r2, [pc, #164]	; (801bdf0 <HAL_GPIO_Init+0x354>)
 801bd4a:	69bb      	ldr	r3, [r7, #24]
 801bd4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801bd4e:	4b28      	ldr	r3, [pc, #160]	; (801bdf0 <HAL_GPIO_Init+0x354>)
 801bd50:	685b      	ldr	r3, [r3, #4]
 801bd52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bd54:	693b      	ldr	r3, [r7, #16]
 801bd56:	43db      	mvns	r3, r3
 801bd58:	69ba      	ldr	r2, [r7, #24]
 801bd5a:	4013      	ands	r3, r2
 801bd5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801bd5e:	683b      	ldr	r3, [r7, #0]
 801bd60:	685b      	ldr	r3, [r3, #4]
 801bd62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d003      	beq.n	801bd72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801bd6a:	69ba      	ldr	r2, [r7, #24]
 801bd6c:	693b      	ldr	r3, [r7, #16]
 801bd6e:	4313      	orrs	r3, r2
 801bd70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801bd72:	4a1f      	ldr	r2, [pc, #124]	; (801bdf0 <HAL_GPIO_Init+0x354>)
 801bd74:	69bb      	ldr	r3, [r7, #24]
 801bd76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801bd78:	4b1d      	ldr	r3, [pc, #116]	; (801bdf0 <HAL_GPIO_Init+0x354>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801bd7e:	693b      	ldr	r3, [r7, #16]
 801bd80:	43db      	mvns	r3, r3
 801bd82:	69ba      	ldr	r2, [r7, #24]
 801bd84:	4013      	ands	r3, r2
 801bd86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801bd88:	683b      	ldr	r3, [r7, #0]
 801bd8a:	685b      	ldr	r3, [r3, #4]
 801bd8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d003      	beq.n	801bd9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801bd94:	69ba      	ldr	r2, [r7, #24]
 801bd96:	693b      	ldr	r3, [r7, #16]
 801bd98:	4313      	orrs	r3, r2
 801bd9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801bd9c:	4a14      	ldr	r2, [pc, #80]	; (801bdf0 <HAL_GPIO_Init+0x354>)
 801bd9e:	69bb      	ldr	r3, [r7, #24]
 801bda0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801bda2:	69fb      	ldr	r3, [r7, #28]
 801bda4:	3301      	adds	r3, #1
 801bda6:	61fb      	str	r3, [r7, #28]
 801bda8:	69fb      	ldr	r3, [r7, #28]
 801bdaa:	2b0f      	cmp	r3, #15
 801bdac:	f67f ae86 	bls.w	801babc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801bdb0:	bf00      	nop
 801bdb2:	bf00      	nop
 801bdb4:	3724      	adds	r7, #36	; 0x24
 801bdb6:	46bd      	mov	sp, r7
 801bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdbc:	4770      	bx	lr
 801bdbe:	bf00      	nop
 801bdc0:	40023800 	.word	0x40023800
 801bdc4:	40013800 	.word	0x40013800
 801bdc8:	40020000 	.word	0x40020000
 801bdcc:	40020400 	.word	0x40020400
 801bdd0:	40020800 	.word	0x40020800
 801bdd4:	40020c00 	.word	0x40020c00
 801bdd8:	40021000 	.word	0x40021000
 801bddc:	40021400 	.word	0x40021400
 801bde0:	40021800 	.word	0x40021800
 801bde4:	40021c00 	.word	0x40021c00
 801bde8:	40022000 	.word	0x40022000
 801bdec:	40022400 	.word	0x40022400
 801bdf0:	40013c00 	.word	0x40013c00

0801bdf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801bdf4:	b480      	push	{r7}
 801bdf6:	b085      	sub	sp, #20
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	6078      	str	r0, [r7, #4]
 801bdfc:	460b      	mov	r3, r1
 801bdfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	691a      	ldr	r2, [r3, #16]
 801be04:	887b      	ldrh	r3, [r7, #2]
 801be06:	4013      	ands	r3, r2
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d002      	beq.n	801be12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801be0c:	2301      	movs	r3, #1
 801be0e:	73fb      	strb	r3, [r7, #15]
 801be10:	e001      	b.n	801be16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801be12:	2300      	movs	r3, #0
 801be14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801be16:	7bfb      	ldrb	r3, [r7, #15]
}
 801be18:	4618      	mov	r0, r3
 801be1a:	3714      	adds	r7, #20
 801be1c:	46bd      	mov	sp, r7
 801be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be22:	4770      	bx	lr

0801be24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801be24:	b480      	push	{r7}
 801be26:	b083      	sub	sp, #12
 801be28:	af00      	add	r7, sp, #0
 801be2a:	6078      	str	r0, [r7, #4]
 801be2c:	460b      	mov	r3, r1
 801be2e:	807b      	strh	r3, [r7, #2]
 801be30:	4613      	mov	r3, r2
 801be32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801be34:	787b      	ldrb	r3, [r7, #1]
 801be36:	2b00      	cmp	r3, #0
 801be38:	d003      	beq.n	801be42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801be3a:	887a      	ldrh	r2, [r7, #2]
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 801be40:	e003      	b.n	801be4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 801be42:	887b      	ldrh	r3, [r7, #2]
 801be44:	041a      	lsls	r2, r3, #16
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	619a      	str	r2, [r3, #24]
}
 801be4a:	bf00      	nop
 801be4c:	370c      	adds	r7, #12
 801be4e:	46bd      	mov	sp, r7
 801be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be54:	4770      	bx	lr

0801be56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801be56:	b480      	push	{r7}
 801be58:	b085      	sub	sp, #20
 801be5a:	af00      	add	r7, sp, #0
 801be5c:	6078      	str	r0, [r7, #4]
 801be5e:	460b      	mov	r3, r1
 801be60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	695b      	ldr	r3, [r3, #20]
 801be66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801be68:	887a      	ldrh	r2, [r7, #2]
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	4013      	ands	r3, r2
 801be6e:	041a      	lsls	r2, r3, #16
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	43d9      	mvns	r1, r3
 801be74:	887b      	ldrh	r3, [r7, #2]
 801be76:	400b      	ands	r3, r1
 801be78:	431a      	orrs	r2, r3
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	619a      	str	r2, [r3, #24]
}
 801be7e:	bf00      	nop
 801be80:	3714      	adds	r7, #20
 801be82:	46bd      	mov	sp, r7
 801be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be88:	4770      	bx	lr
	...

0801be8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801be8c:	b580      	push	{r7, lr}
 801be8e:	b082      	sub	sp, #8
 801be90:	af00      	add	r7, sp, #0
 801be92:	4603      	mov	r3, r0
 801be94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801be96:	4b08      	ldr	r3, [pc, #32]	; (801beb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801be98:	695a      	ldr	r2, [r3, #20]
 801be9a:	88fb      	ldrh	r3, [r7, #6]
 801be9c:	4013      	ands	r3, r2
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d006      	beq.n	801beb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801bea2:	4a05      	ldr	r2, [pc, #20]	; (801beb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801bea4:	88fb      	ldrh	r3, [r7, #6]
 801bea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801bea8:	88fb      	ldrh	r3, [r7, #6]
 801beaa:	4618      	mov	r0, r3
 801beac:	f000 f806 	bl	801bebc <HAL_GPIO_EXTI_Callback>
  }
}
 801beb0:	bf00      	nop
 801beb2:	3708      	adds	r7, #8
 801beb4:	46bd      	mov	sp, r7
 801beb6:	bd80      	pop	{r7, pc}
 801beb8:	40013c00 	.word	0x40013c00

0801bebc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801bebc:	b480      	push	{r7}
 801bebe:	b083      	sub	sp, #12
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	4603      	mov	r3, r0
 801bec4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801bec6:	bf00      	nop
 801bec8:	370c      	adds	r7, #12
 801beca:	46bd      	mov	sp, r7
 801becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed0:	4770      	bx	lr
	...

0801bed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b082      	sub	sp, #8
 801bed8:	af00      	add	r7, sp, #0
 801beda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d101      	bne.n	801bee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801bee2:	2301      	movs	r3, #1
 801bee4:	e07f      	b.n	801bfe6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801beec:	b2db      	uxtb	r3, r3
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d106      	bne.n	801bf00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	2200      	movs	r2, #0
 801bef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801befa:	6878      	ldr	r0, [r7, #4]
 801befc:	f7fa f8de 	bl	80160bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	2224      	movs	r2, #36	; 0x24
 801bf04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	681a      	ldr	r2, [r3, #0]
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	f022 0201 	bic.w	r2, r2, #1
 801bf16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	685a      	ldr	r2, [r3, #4]
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801bf24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	689a      	ldr	r2, [r3, #8]
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801bf34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	68db      	ldr	r3, [r3, #12]
 801bf3a:	2b01      	cmp	r3, #1
 801bf3c:	d107      	bne.n	801bf4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	689a      	ldr	r2, [r3, #8]
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801bf4a:	609a      	str	r2, [r3, #8]
 801bf4c:	e006      	b.n	801bf5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	689a      	ldr	r2, [r3, #8]
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801bf5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	68db      	ldr	r3, [r3, #12]
 801bf60:	2b02      	cmp	r3, #2
 801bf62:	d104      	bne.n	801bf6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bf6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	6859      	ldr	r1, [r3, #4]
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	681a      	ldr	r2, [r3, #0]
 801bf78:	4b1d      	ldr	r3, [pc, #116]	; (801bff0 <HAL_I2C_Init+0x11c>)
 801bf7a:	430b      	orrs	r3, r1
 801bf7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	68da      	ldr	r2, [r3, #12]
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801bf8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	691a      	ldr	r2, [r3, #16]
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	695b      	ldr	r3, [r3, #20]
 801bf96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	699b      	ldr	r3, [r3, #24]
 801bf9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	430a      	orrs	r2, r1
 801bfa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	69d9      	ldr	r1, [r3, #28]
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	6a1a      	ldr	r2, [r3, #32]
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	430a      	orrs	r2, r1
 801bfb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	681a      	ldr	r2, [r3, #0]
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	f042 0201 	orr.w	r2, r2, #1
 801bfc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	2200      	movs	r2, #0
 801bfcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	2220      	movs	r2, #32
 801bfd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	2200      	movs	r2, #0
 801bfda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	2200      	movs	r2, #0
 801bfe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801bfe4:	2300      	movs	r3, #0
}
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	3708      	adds	r7, #8
 801bfea:	46bd      	mov	sp, r7
 801bfec:	bd80      	pop	{r7, pc}
 801bfee:	bf00      	nop
 801bff0:	02008000 	.word	0x02008000

0801bff4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	b088      	sub	sp, #32
 801bff8:	af02      	add	r7, sp, #8
 801bffa:	60f8      	str	r0, [r7, #12]
 801bffc:	4608      	mov	r0, r1
 801bffe:	4611      	mov	r1, r2
 801c000:	461a      	mov	r2, r3
 801c002:	4603      	mov	r3, r0
 801c004:	817b      	strh	r3, [r7, #10]
 801c006:	460b      	mov	r3, r1
 801c008:	813b      	strh	r3, [r7, #8]
 801c00a:	4613      	mov	r3, r2
 801c00c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c014:	b2db      	uxtb	r3, r3
 801c016:	2b20      	cmp	r3, #32
 801c018:	f040 80f9 	bne.w	801c20e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801c01c:	6a3b      	ldr	r3, [r7, #32]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d002      	beq.n	801c028 <HAL_I2C_Mem_Write+0x34>
 801c022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c024:	2b00      	cmp	r3, #0
 801c026:	d105      	bne.n	801c034 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801c028:	68fb      	ldr	r3, [r7, #12]
 801c02a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c02e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801c030:	2301      	movs	r3, #1
 801c032:	e0ed      	b.n	801c210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c03a:	2b01      	cmp	r3, #1
 801c03c:	d101      	bne.n	801c042 <HAL_I2C_Mem_Write+0x4e>
 801c03e:	2302      	movs	r3, #2
 801c040:	e0e6      	b.n	801c210 <HAL_I2C_Mem_Write+0x21c>
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	2201      	movs	r2, #1
 801c046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801c04a:	f7fd fa1b 	bl	8019484 <HAL_GetTick>
 801c04e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801c050:	697b      	ldr	r3, [r7, #20]
 801c052:	9300      	str	r3, [sp, #0]
 801c054:	2319      	movs	r3, #25
 801c056:	2201      	movs	r2, #1
 801c058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c05c:	68f8      	ldr	r0, [r7, #12]
 801c05e:	f000 fac3 	bl	801c5e8 <I2C_WaitOnFlagUntilTimeout>
 801c062:	4603      	mov	r3, r0
 801c064:	2b00      	cmp	r3, #0
 801c066:	d001      	beq.n	801c06c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801c068:	2301      	movs	r3, #1
 801c06a:	e0d1      	b.n	801c210 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	2221      	movs	r2, #33	; 0x21
 801c070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c074:	68fb      	ldr	r3, [r7, #12]
 801c076:	2240      	movs	r2, #64	; 0x40
 801c078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	2200      	movs	r2, #0
 801c080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	6a3a      	ldr	r2, [r7, #32]
 801c086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801c088:	68fb      	ldr	r3, [r7, #12]
 801c08a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c08c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	2200      	movs	r2, #0
 801c092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801c094:	88f8      	ldrh	r0, [r7, #6]
 801c096:	893a      	ldrh	r2, [r7, #8]
 801c098:	8979      	ldrh	r1, [r7, #10]
 801c09a:	697b      	ldr	r3, [r7, #20]
 801c09c:	9301      	str	r3, [sp, #4]
 801c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0a0:	9300      	str	r3, [sp, #0]
 801c0a2:	4603      	mov	r3, r0
 801c0a4:	68f8      	ldr	r0, [r7, #12]
 801c0a6:	f000 f9d3 	bl	801c450 <I2C_RequestMemoryWrite>
 801c0aa:	4603      	mov	r3, r0
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d005      	beq.n	801c0bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801c0b8:	2301      	movs	r3, #1
 801c0ba:	e0a9      	b.n	801c210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c0c0:	b29b      	uxth	r3, r3
 801c0c2:	2bff      	cmp	r3, #255	; 0xff
 801c0c4:	d90e      	bls.n	801c0e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	22ff      	movs	r2, #255	; 0xff
 801c0ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c0d0:	b2da      	uxtb	r2, r3
 801c0d2:	8979      	ldrh	r1, [r7, #10]
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	9300      	str	r3, [sp, #0]
 801c0d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c0dc:	68f8      	ldr	r0, [r7, #12]
 801c0de:	f000 fc1f 	bl	801c920 <I2C_TransferConfig>
 801c0e2:	e00f      	b.n	801c104 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c0e8:	b29a      	uxth	r2, r3
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c0f2:	b2da      	uxtb	r2, r3
 801c0f4:	8979      	ldrh	r1, [r7, #10]
 801c0f6:	2300      	movs	r3, #0
 801c0f8:	9300      	str	r3, [sp, #0]
 801c0fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c0fe:	68f8      	ldr	r0, [r7, #12]
 801c100:	f000 fc0e 	bl	801c920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c104:	697a      	ldr	r2, [r7, #20]
 801c106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c108:	68f8      	ldr	r0, [r7, #12]
 801c10a:	f000 faad 	bl	801c668 <I2C_WaitOnTXISFlagUntilTimeout>
 801c10e:	4603      	mov	r3, r0
 801c110:	2b00      	cmp	r3, #0
 801c112:	d001      	beq.n	801c118 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801c114:	2301      	movs	r3, #1
 801c116:	e07b      	b.n	801c210 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c11c:	781a      	ldrb	r2, [r3, #0]
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801c124:	68fb      	ldr	r3, [r7, #12]
 801c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c128:	1c5a      	adds	r2, r3, #1
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c132:	b29b      	uxth	r3, r3
 801c134:	3b01      	subs	r3, #1
 801c136:	b29a      	uxth	r2, r3
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c140:	3b01      	subs	r3, #1
 801c142:	b29a      	uxth	r2, r3
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c14c:	b29b      	uxth	r3, r3
 801c14e:	2b00      	cmp	r3, #0
 801c150:	d034      	beq.n	801c1bc <HAL_I2C_Mem_Write+0x1c8>
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c156:	2b00      	cmp	r3, #0
 801c158:	d130      	bne.n	801c1bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801c15a:	697b      	ldr	r3, [r7, #20]
 801c15c:	9300      	str	r3, [sp, #0]
 801c15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c160:	2200      	movs	r2, #0
 801c162:	2180      	movs	r1, #128	; 0x80
 801c164:	68f8      	ldr	r0, [r7, #12]
 801c166:	f000 fa3f 	bl	801c5e8 <I2C_WaitOnFlagUntilTimeout>
 801c16a:	4603      	mov	r3, r0
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d001      	beq.n	801c174 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801c170:	2301      	movs	r3, #1
 801c172:	e04d      	b.n	801c210 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c178:	b29b      	uxth	r3, r3
 801c17a:	2bff      	cmp	r3, #255	; 0xff
 801c17c:	d90e      	bls.n	801c19c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	22ff      	movs	r2, #255	; 0xff
 801c182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801c184:	68fb      	ldr	r3, [r7, #12]
 801c186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c188:	b2da      	uxtb	r2, r3
 801c18a:	8979      	ldrh	r1, [r7, #10]
 801c18c:	2300      	movs	r3, #0
 801c18e:	9300      	str	r3, [sp, #0]
 801c190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c194:	68f8      	ldr	r0, [r7, #12]
 801c196:	f000 fbc3 	bl	801c920 <I2C_TransferConfig>
 801c19a:	e00f      	b.n	801c1bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c1a0:	b29a      	uxth	r2, r3
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c1aa:	b2da      	uxtb	r2, r3
 801c1ac:	8979      	ldrh	r1, [r7, #10]
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	9300      	str	r3, [sp, #0]
 801c1b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c1b6:	68f8      	ldr	r0, [r7, #12]
 801c1b8:	f000 fbb2 	bl	801c920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c1c0:	b29b      	uxth	r3, r3
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d19e      	bne.n	801c104 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c1c6:	697a      	ldr	r2, [r7, #20]
 801c1c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c1ca:	68f8      	ldr	r0, [r7, #12]
 801c1cc:	f000 fa8c 	bl	801c6e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 801c1d0:	4603      	mov	r3, r0
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d001      	beq.n	801c1da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801c1d6:	2301      	movs	r3, #1
 801c1d8:	e01a      	b.n	801c210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	2220      	movs	r2, #32
 801c1e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	6859      	ldr	r1, [r3, #4]
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	681a      	ldr	r2, [r3, #0]
 801c1ec:	4b0a      	ldr	r3, [pc, #40]	; (801c218 <HAL_I2C_Mem_Write+0x224>)
 801c1ee:	400b      	ands	r3, r1
 801c1f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	2220      	movs	r2, #32
 801c1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	2200      	movs	r2, #0
 801c206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c20a:	2300      	movs	r3, #0
 801c20c:	e000      	b.n	801c210 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801c20e:	2302      	movs	r3, #2
  }
}
 801c210:	4618      	mov	r0, r3
 801c212:	3718      	adds	r7, #24
 801c214:	46bd      	mov	sp, r7
 801c216:	bd80      	pop	{r7, pc}
 801c218:	fe00e800 	.word	0xfe00e800

0801c21c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c21c:	b580      	push	{r7, lr}
 801c21e:	b088      	sub	sp, #32
 801c220:	af02      	add	r7, sp, #8
 801c222:	60f8      	str	r0, [r7, #12]
 801c224:	4608      	mov	r0, r1
 801c226:	4611      	mov	r1, r2
 801c228:	461a      	mov	r2, r3
 801c22a:	4603      	mov	r3, r0
 801c22c:	817b      	strh	r3, [r7, #10]
 801c22e:	460b      	mov	r3, r1
 801c230:	813b      	strh	r3, [r7, #8]
 801c232:	4613      	mov	r3, r2
 801c234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c23c:	b2db      	uxtb	r3, r3
 801c23e:	2b20      	cmp	r3, #32
 801c240:	f040 80fd 	bne.w	801c43e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801c244:	6a3b      	ldr	r3, [r7, #32]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d002      	beq.n	801c250 <HAL_I2C_Mem_Read+0x34>
 801c24a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d105      	bne.n	801c25c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c256:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801c258:	2301      	movs	r3, #1
 801c25a:	e0f1      	b.n	801c440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c262:	2b01      	cmp	r3, #1
 801c264:	d101      	bne.n	801c26a <HAL_I2C_Mem_Read+0x4e>
 801c266:	2302      	movs	r3, #2
 801c268:	e0ea      	b.n	801c440 <HAL_I2C_Mem_Read+0x224>
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	2201      	movs	r2, #1
 801c26e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801c272:	f7fd f907 	bl	8019484 <HAL_GetTick>
 801c276:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801c278:	697b      	ldr	r3, [r7, #20]
 801c27a:	9300      	str	r3, [sp, #0]
 801c27c:	2319      	movs	r3, #25
 801c27e:	2201      	movs	r2, #1
 801c280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c284:	68f8      	ldr	r0, [r7, #12]
 801c286:	f000 f9af 	bl	801c5e8 <I2C_WaitOnFlagUntilTimeout>
 801c28a:	4603      	mov	r3, r0
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d001      	beq.n	801c294 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801c290:	2301      	movs	r3, #1
 801c292:	e0d5      	b.n	801c440 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	2222      	movs	r2, #34	; 0x22
 801c298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2240      	movs	r2, #64	; 0x40
 801c2a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	2200      	movs	r2, #0
 801c2a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	6a3a      	ldr	r2, [r7, #32]
 801c2ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c2b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	2200      	movs	r2, #0
 801c2ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801c2bc:	88f8      	ldrh	r0, [r7, #6]
 801c2be:	893a      	ldrh	r2, [r7, #8]
 801c2c0:	8979      	ldrh	r1, [r7, #10]
 801c2c2:	697b      	ldr	r3, [r7, #20]
 801c2c4:	9301      	str	r3, [sp, #4]
 801c2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2c8:	9300      	str	r3, [sp, #0]
 801c2ca:	4603      	mov	r3, r0
 801c2cc:	68f8      	ldr	r0, [r7, #12]
 801c2ce:	f000 f913 	bl	801c4f8 <I2C_RequestMemoryRead>
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d005      	beq.n	801c2e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	2200      	movs	r2, #0
 801c2dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801c2e0:	2301      	movs	r3, #1
 801c2e2:	e0ad      	b.n	801c440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c2e8:	b29b      	uxth	r3, r3
 801c2ea:	2bff      	cmp	r3, #255	; 0xff
 801c2ec:	d90e      	bls.n	801c30c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	22ff      	movs	r2, #255	; 0xff
 801c2f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c2f8:	b2da      	uxtb	r2, r3
 801c2fa:	8979      	ldrh	r1, [r7, #10]
 801c2fc:	4b52      	ldr	r3, [pc, #328]	; (801c448 <HAL_I2C_Mem_Read+0x22c>)
 801c2fe:	9300      	str	r3, [sp, #0]
 801c300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c304:	68f8      	ldr	r0, [r7, #12]
 801c306:	f000 fb0b 	bl	801c920 <I2C_TransferConfig>
 801c30a:	e00f      	b.n	801c32c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c310:	b29a      	uxth	r2, r3
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c31a:	b2da      	uxtb	r2, r3
 801c31c:	8979      	ldrh	r1, [r7, #10]
 801c31e:	4b4a      	ldr	r3, [pc, #296]	; (801c448 <HAL_I2C_Mem_Read+0x22c>)
 801c320:	9300      	str	r3, [sp, #0]
 801c322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c326:	68f8      	ldr	r0, [r7, #12]
 801c328:	f000 fafa 	bl	801c920 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801c32c:	697b      	ldr	r3, [r7, #20]
 801c32e:	9300      	str	r3, [sp, #0]
 801c330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c332:	2200      	movs	r2, #0
 801c334:	2104      	movs	r1, #4
 801c336:	68f8      	ldr	r0, [r7, #12]
 801c338:	f000 f956 	bl	801c5e8 <I2C_WaitOnFlagUntilTimeout>
 801c33c:	4603      	mov	r3, r0
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d001      	beq.n	801c346 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801c342:	2301      	movs	r3, #1
 801c344:	e07c      	b.n	801c440 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801c346:	68fb      	ldr	r3, [r7, #12]
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c350:	b2d2      	uxtb	r2, r2
 801c352:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801c354:	68fb      	ldr	r3, [r7, #12]
 801c356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c358:	1c5a      	adds	r2, r3, #1
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c362:	3b01      	subs	r3, #1
 801c364:	b29a      	uxth	r2, r3
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c36e:	b29b      	uxth	r3, r3
 801c370:	3b01      	subs	r3, #1
 801c372:	b29a      	uxth	r2, r3
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c37c:	b29b      	uxth	r3, r3
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d034      	beq.n	801c3ec <HAL_I2C_Mem_Read+0x1d0>
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c386:	2b00      	cmp	r3, #0
 801c388:	d130      	bne.n	801c3ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801c38a:	697b      	ldr	r3, [r7, #20]
 801c38c:	9300      	str	r3, [sp, #0]
 801c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c390:	2200      	movs	r2, #0
 801c392:	2180      	movs	r1, #128	; 0x80
 801c394:	68f8      	ldr	r0, [r7, #12]
 801c396:	f000 f927 	bl	801c5e8 <I2C_WaitOnFlagUntilTimeout>
 801c39a:	4603      	mov	r3, r0
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d001      	beq.n	801c3a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801c3a0:	2301      	movs	r3, #1
 801c3a2:	e04d      	b.n	801c440 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c3a8:	b29b      	uxth	r3, r3
 801c3aa:	2bff      	cmp	r3, #255	; 0xff
 801c3ac:	d90e      	bls.n	801c3cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	22ff      	movs	r2, #255	; 0xff
 801c3b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c3b8:	b2da      	uxtb	r2, r3
 801c3ba:	8979      	ldrh	r1, [r7, #10]
 801c3bc:	2300      	movs	r3, #0
 801c3be:	9300      	str	r3, [sp, #0]
 801c3c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c3c4:	68f8      	ldr	r0, [r7, #12]
 801c3c6:	f000 faab 	bl	801c920 <I2C_TransferConfig>
 801c3ca:	e00f      	b.n	801c3ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c3d0:	b29a      	uxth	r2, r3
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c3da:	b2da      	uxtb	r2, r3
 801c3dc:	8979      	ldrh	r1, [r7, #10]
 801c3de:	2300      	movs	r3, #0
 801c3e0:	9300      	str	r3, [sp, #0]
 801c3e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c3e6:	68f8      	ldr	r0, [r7, #12]
 801c3e8:	f000 fa9a 	bl	801c920 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c3f0:	b29b      	uxth	r3, r3
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d19a      	bne.n	801c32c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c3f6:	697a      	ldr	r2, [r7, #20]
 801c3f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c3fa:	68f8      	ldr	r0, [r7, #12]
 801c3fc:	f000 f974 	bl	801c6e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 801c400:	4603      	mov	r3, r0
 801c402:	2b00      	cmp	r3, #0
 801c404:	d001      	beq.n	801c40a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801c406:	2301      	movs	r3, #1
 801c408:	e01a      	b.n	801c440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	2220      	movs	r2, #32
 801c410:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	6859      	ldr	r1, [r3, #4]
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	681a      	ldr	r2, [r3, #0]
 801c41c:	4b0b      	ldr	r3, [pc, #44]	; (801c44c <HAL_I2C_Mem_Read+0x230>)
 801c41e:	400b      	ands	r3, r1
 801c420:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	2220      	movs	r2, #32
 801c426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	2200      	movs	r2, #0
 801c42e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	2200      	movs	r2, #0
 801c436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c43a:	2300      	movs	r3, #0
 801c43c:	e000      	b.n	801c440 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801c43e:	2302      	movs	r3, #2
  }
}
 801c440:	4618      	mov	r0, r3
 801c442:	3718      	adds	r7, #24
 801c444:	46bd      	mov	sp, r7
 801c446:	bd80      	pop	{r7, pc}
 801c448:	80002400 	.word	0x80002400
 801c44c:	fe00e800 	.word	0xfe00e800

0801c450 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801c450:	b580      	push	{r7, lr}
 801c452:	b086      	sub	sp, #24
 801c454:	af02      	add	r7, sp, #8
 801c456:	60f8      	str	r0, [r7, #12]
 801c458:	4608      	mov	r0, r1
 801c45a:	4611      	mov	r1, r2
 801c45c:	461a      	mov	r2, r3
 801c45e:	4603      	mov	r3, r0
 801c460:	817b      	strh	r3, [r7, #10]
 801c462:	460b      	mov	r3, r1
 801c464:	813b      	strh	r3, [r7, #8]
 801c466:	4613      	mov	r3, r2
 801c468:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801c46a:	88fb      	ldrh	r3, [r7, #6]
 801c46c:	b2da      	uxtb	r2, r3
 801c46e:	8979      	ldrh	r1, [r7, #10]
 801c470:	4b20      	ldr	r3, [pc, #128]	; (801c4f4 <I2C_RequestMemoryWrite+0xa4>)
 801c472:	9300      	str	r3, [sp, #0]
 801c474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c478:	68f8      	ldr	r0, [r7, #12]
 801c47a:	f000 fa51 	bl	801c920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c47e:	69fa      	ldr	r2, [r7, #28]
 801c480:	69b9      	ldr	r1, [r7, #24]
 801c482:	68f8      	ldr	r0, [r7, #12]
 801c484:	f000 f8f0 	bl	801c668 <I2C_WaitOnTXISFlagUntilTimeout>
 801c488:	4603      	mov	r3, r0
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d001      	beq.n	801c492 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801c48e:	2301      	movs	r3, #1
 801c490:	e02c      	b.n	801c4ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801c492:	88fb      	ldrh	r3, [r7, #6]
 801c494:	2b01      	cmp	r3, #1
 801c496:	d105      	bne.n	801c4a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801c498:	893b      	ldrh	r3, [r7, #8]
 801c49a:	b2da      	uxtb	r2, r3
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	629a      	str	r2, [r3, #40]	; 0x28
 801c4a2:	e015      	b.n	801c4d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801c4a4:	893b      	ldrh	r3, [r7, #8]
 801c4a6:	0a1b      	lsrs	r3, r3, #8
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	b2da      	uxtb	r2, r3
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c4b2:	69fa      	ldr	r2, [r7, #28]
 801c4b4:	69b9      	ldr	r1, [r7, #24]
 801c4b6:	68f8      	ldr	r0, [r7, #12]
 801c4b8:	f000 f8d6 	bl	801c668 <I2C_WaitOnTXISFlagUntilTimeout>
 801c4bc:	4603      	mov	r3, r0
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d001      	beq.n	801c4c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801c4c2:	2301      	movs	r3, #1
 801c4c4:	e012      	b.n	801c4ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801c4c6:	893b      	ldrh	r3, [r7, #8]
 801c4c8:	b2da      	uxtb	r2, r3
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801c4d0:	69fb      	ldr	r3, [r7, #28]
 801c4d2:	9300      	str	r3, [sp, #0]
 801c4d4:	69bb      	ldr	r3, [r7, #24]
 801c4d6:	2200      	movs	r2, #0
 801c4d8:	2180      	movs	r1, #128	; 0x80
 801c4da:	68f8      	ldr	r0, [r7, #12]
 801c4dc:	f000 f884 	bl	801c5e8 <I2C_WaitOnFlagUntilTimeout>
 801c4e0:	4603      	mov	r3, r0
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d001      	beq.n	801c4ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801c4e6:	2301      	movs	r3, #1
 801c4e8:	e000      	b.n	801c4ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801c4ea:	2300      	movs	r3, #0
}
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	3710      	adds	r7, #16
 801c4f0:	46bd      	mov	sp, r7
 801c4f2:	bd80      	pop	{r7, pc}
 801c4f4:	80002000 	.word	0x80002000

0801c4f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801c4f8:	b580      	push	{r7, lr}
 801c4fa:	b086      	sub	sp, #24
 801c4fc:	af02      	add	r7, sp, #8
 801c4fe:	60f8      	str	r0, [r7, #12]
 801c500:	4608      	mov	r0, r1
 801c502:	4611      	mov	r1, r2
 801c504:	461a      	mov	r2, r3
 801c506:	4603      	mov	r3, r0
 801c508:	817b      	strh	r3, [r7, #10]
 801c50a:	460b      	mov	r3, r1
 801c50c:	813b      	strh	r3, [r7, #8]
 801c50e:	4613      	mov	r3, r2
 801c510:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801c512:	88fb      	ldrh	r3, [r7, #6]
 801c514:	b2da      	uxtb	r2, r3
 801c516:	8979      	ldrh	r1, [r7, #10]
 801c518:	4b20      	ldr	r3, [pc, #128]	; (801c59c <I2C_RequestMemoryRead+0xa4>)
 801c51a:	9300      	str	r3, [sp, #0]
 801c51c:	2300      	movs	r3, #0
 801c51e:	68f8      	ldr	r0, [r7, #12]
 801c520:	f000 f9fe 	bl	801c920 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c524:	69fa      	ldr	r2, [r7, #28]
 801c526:	69b9      	ldr	r1, [r7, #24]
 801c528:	68f8      	ldr	r0, [r7, #12]
 801c52a:	f000 f89d 	bl	801c668 <I2C_WaitOnTXISFlagUntilTimeout>
 801c52e:	4603      	mov	r3, r0
 801c530:	2b00      	cmp	r3, #0
 801c532:	d001      	beq.n	801c538 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801c534:	2301      	movs	r3, #1
 801c536:	e02c      	b.n	801c592 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801c538:	88fb      	ldrh	r3, [r7, #6]
 801c53a:	2b01      	cmp	r3, #1
 801c53c:	d105      	bne.n	801c54a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801c53e:	893b      	ldrh	r3, [r7, #8]
 801c540:	b2da      	uxtb	r2, r3
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	629a      	str	r2, [r3, #40]	; 0x28
 801c548:	e015      	b.n	801c576 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801c54a:	893b      	ldrh	r3, [r7, #8]
 801c54c:	0a1b      	lsrs	r3, r3, #8
 801c54e:	b29b      	uxth	r3, r3
 801c550:	b2da      	uxtb	r2, r3
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c558:	69fa      	ldr	r2, [r7, #28]
 801c55a:	69b9      	ldr	r1, [r7, #24]
 801c55c:	68f8      	ldr	r0, [r7, #12]
 801c55e:	f000 f883 	bl	801c668 <I2C_WaitOnTXISFlagUntilTimeout>
 801c562:	4603      	mov	r3, r0
 801c564:	2b00      	cmp	r3, #0
 801c566:	d001      	beq.n	801c56c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801c568:	2301      	movs	r3, #1
 801c56a:	e012      	b.n	801c592 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801c56c:	893b      	ldrh	r3, [r7, #8]
 801c56e:	b2da      	uxtb	r2, r3
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801c576:	69fb      	ldr	r3, [r7, #28]
 801c578:	9300      	str	r3, [sp, #0]
 801c57a:	69bb      	ldr	r3, [r7, #24]
 801c57c:	2200      	movs	r2, #0
 801c57e:	2140      	movs	r1, #64	; 0x40
 801c580:	68f8      	ldr	r0, [r7, #12]
 801c582:	f000 f831 	bl	801c5e8 <I2C_WaitOnFlagUntilTimeout>
 801c586:	4603      	mov	r3, r0
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d001      	beq.n	801c590 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801c58c:	2301      	movs	r3, #1
 801c58e:	e000      	b.n	801c592 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801c590:	2300      	movs	r3, #0
}
 801c592:	4618      	mov	r0, r3
 801c594:	3710      	adds	r7, #16
 801c596:	46bd      	mov	sp, r7
 801c598:	bd80      	pop	{r7, pc}
 801c59a:	bf00      	nop
 801c59c:	80002000 	.word	0x80002000

0801c5a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801c5a0:	b480      	push	{r7}
 801c5a2:	b083      	sub	sp, #12
 801c5a4:	af00      	add	r7, sp, #0
 801c5a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	699b      	ldr	r3, [r3, #24]
 801c5ae:	f003 0302 	and.w	r3, r3, #2
 801c5b2:	2b02      	cmp	r3, #2
 801c5b4:	d103      	bne.n	801c5be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	699b      	ldr	r3, [r3, #24]
 801c5c4:	f003 0301 	and.w	r3, r3, #1
 801c5c8:	2b01      	cmp	r3, #1
 801c5ca:	d007      	beq.n	801c5dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	681b      	ldr	r3, [r3, #0]
 801c5d0:	699a      	ldr	r2, [r3, #24]
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	f042 0201 	orr.w	r2, r2, #1
 801c5da:	619a      	str	r2, [r3, #24]
  }
}
 801c5dc:	bf00      	nop
 801c5de:	370c      	adds	r7, #12
 801c5e0:	46bd      	mov	sp, r7
 801c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5e6:	4770      	bx	lr

0801c5e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801c5e8:	b580      	push	{r7, lr}
 801c5ea:	b084      	sub	sp, #16
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	60f8      	str	r0, [r7, #12]
 801c5f0:	60b9      	str	r1, [r7, #8]
 801c5f2:	603b      	str	r3, [r7, #0]
 801c5f4:	4613      	mov	r3, r2
 801c5f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c5f8:	e022      	b.n	801c640 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c5fa:	683b      	ldr	r3, [r7, #0]
 801c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c600:	d01e      	beq.n	801c640 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c602:	f7fc ff3f 	bl	8019484 <HAL_GetTick>
 801c606:	4602      	mov	r2, r0
 801c608:	69bb      	ldr	r3, [r7, #24]
 801c60a:	1ad3      	subs	r3, r2, r3
 801c60c:	683a      	ldr	r2, [r7, #0]
 801c60e:	429a      	cmp	r2, r3
 801c610:	d302      	bcc.n	801c618 <I2C_WaitOnFlagUntilTimeout+0x30>
 801c612:	683b      	ldr	r3, [r7, #0]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d113      	bne.n	801c640 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c61c:	f043 0220 	orr.w	r2, r3, #32
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	2220      	movs	r2, #32
 801c628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	2200      	movs	r2, #0
 801c630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	2200      	movs	r2, #0
 801c638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801c63c:	2301      	movs	r3, #1
 801c63e:	e00f      	b.n	801c660 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	699a      	ldr	r2, [r3, #24]
 801c646:	68bb      	ldr	r3, [r7, #8]
 801c648:	4013      	ands	r3, r2
 801c64a:	68ba      	ldr	r2, [r7, #8]
 801c64c:	429a      	cmp	r2, r3
 801c64e:	bf0c      	ite	eq
 801c650:	2301      	moveq	r3, #1
 801c652:	2300      	movne	r3, #0
 801c654:	b2db      	uxtb	r3, r3
 801c656:	461a      	mov	r2, r3
 801c658:	79fb      	ldrb	r3, [r7, #7]
 801c65a:	429a      	cmp	r2, r3
 801c65c:	d0cd      	beq.n	801c5fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c65e:	2300      	movs	r3, #0
}
 801c660:	4618      	mov	r0, r3
 801c662:	3710      	adds	r7, #16
 801c664:	46bd      	mov	sp, r7
 801c666:	bd80      	pop	{r7, pc}

0801c668 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801c668:	b580      	push	{r7, lr}
 801c66a:	b084      	sub	sp, #16
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	60f8      	str	r0, [r7, #12]
 801c670:	60b9      	str	r1, [r7, #8]
 801c672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801c674:	e02c      	b.n	801c6d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801c676:	687a      	ldr	r2, [r7, #4]
 801c678:	68b9      	ldr	r1, [r7, #8]
 801c67a:	68f8      	ldr	r0, [r7, #12]
 801c67c:	f000 f870 	bl	801c760 <I2C_IsErrorOccurred>
 801c680:	4603      	mov	r3, r0
 801c682:	2b00      	cmp	r3, #0
 801c684:	d001      	beq.n	801c68a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801c686:	2301      	movs	r3, #1
 801c688:	e02a      	b.n	801c6e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c68a:	68bb      	ldr	r3, [r7, #8]
 801c68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c690:	d01e      	beq.n	801c6d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c692:	f7fc fef7 	bl	8019484 <HAL_GetTick>
 801c696:	4602      	mov	r2, r0
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	1ad3      	subs	r3, r2, r3
 801c69c:	68ba      	ldr	r2, [r7, #8]
 801c69e:	429a      	cmp	r2, r3
 801c6a0:	d302      	bcc.n	801c6a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801c6a2:	68bb      	ldr	r3, [r7, #8]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d113      	bne.n	801c6d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c6a8:	68fb      	ldr	r3, [r7, #12]
 801c6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6ac:	f043 0220 	orr.w	r2, r3, #32
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	2220      	movs	r2, #32
 801c6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	2200      	movs	r2, #0
 801c6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801c6cc:	2301      	movs	r3, #1
 801c6ce:	e007      	b.n	801c6e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	699b      	ldr	r3, [r3, #24]
 801c6d6:	f003 0302 	and.w	r3, r3, #2
 801c6da:	2b02      	cmp	r3, #2
 801c6dc:	d1cb      	bne.n	801c676 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801c6de:	2300      	movs	r3, #0
}
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	3710      	adds	r7, #16
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	bd80      	pop	{r7, pc}

0801c6e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b084      	sub	sp, #16
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	60f8      	str	r0, [r7, #12]
 801c6f0:	60b9      	str	r1, [r7, #8]
 801c6f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c6f4:	e028      	b.n	801c748 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801c6f6:	687a      	ldr	r2, [r7, #4]
 801c6f8:	68b9      	ldr	r1, [r7, #8]
 801c6fa:	68f8      	ldr	r0, [r7, #12]
 801c6fc:	f000 f830 	bl	801c760 <I2C_IsErrorOccurred>
 801c700:	4603      	mov	r3, r0
 801c702:	2b00      	cmp	r3, #0
 801c704:	d001      	beq.n	801c70a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801c706:	2301      	movs	r3, #1
 801c708:	e026      	b.n	801c758 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c70a:	f7fc febb 	bl	8019484 <HAL_GetTick>
 801c70e:	4602      	mov	r2, r0
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	1ad3      	subs	r3, r2, r3
 801c714:	68ba      	ldr	r2, [r7, #8]
 801c716:	429a      	cmp	r2, r3
 801c718:	d302      	bcc.n	801c720 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801c71a:	68bb      	ldr	r3, [r7, #8]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d113      	bne.n	801c748 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c724:	f043 0220 	orr.w	r2, r3, #32
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	2220      	movs	r2, #32
 801c730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	2200      	movs	r2, #0
 801c738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	2200      	movs	r2, #0
 801c740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801c744:	2301      	movs	r3, #1
 801c746:	e007      	b.n	801c758 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	699b      	ldr	r3, [r3, #24]
 801c74e:	f003 0320 	and.w	r3, r3, #32
 801c752:	2b20      	cmp	r3, #32
 801c754:	d1cf      	bne.n	801c6f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801c756:	2300      	movs	r3, #0
}
 801c758:	4618      	mov	r0, r3
 801c75a:	3710      	adds	r7, #16
 801c75c:	46bd      	mov	sp, r7
 801c75e:	bd80      	pop	{r7, pc}

0801c760 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801c760:	b580      	push	{r7, lr}
 801c762:	b08a      	sub	sp, #40	; 0x28
 801c764:	af00      	add	r7, sp, #0
 801c766:	60f8      	str	r0, [r7, #12]
 801c768:	60b9      	str	r1, [r7, #8]
 801c76a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c76c:	2300      	movs	r3, #0
 801c76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	699b      	ldr	r3, [r3, #24]
 801c778:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801c77a:	2300      	movs	r3, #0
 801c77c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801c782:	69bb      	ldr	r3, [r7, #24]
 801c784:	f003 0310 	and.w	r3, r3, #16
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d068      	beq.n	801c85e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	2210      	movs	r2, #16
 801c792:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801c794:	e049      	b.n	801c82a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801c796:	68bb      	ldr	r3, [r7, #8]
 801c798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c79c:	d045      	beq.n	801c82a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801c79e:	f7fc fe71 	bl	8019484 <HAL_GetTick>
 801c7a2:	4602      	mov	r2, r0
 801c7a4:	69fb      	ldr	r3, [r7, #28]
 801c7a6:	1ad3      	subs	r3, r2, r3
 801c7a8:	68ba      	ldr	r2, [r7, #8]
 801c7aa:	429a      	cmp	r2, r3
 801c7ac:	d302      	bcc.n	801c7b4 <I2C_IsErrorOccurred+0x54>
 801c7ae:	68bb      	ldr	r3, [r7, #8]
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d13a      	bne.n	801c82a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	685b      	ldr	r3, [r3, #4]
 801c7ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c7be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c7c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	699b      	ldr	r3, [r3, #24]
 801c7ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c7d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c7d6:	d121      	bne.n	801c81c <I2C_IsErrorOccurred+0xbc>
 801c7d8:	697b      	ldr	r3, [r7, #20]
 801c7da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c7de:	d01d      	beq.n	801c81c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801c7e0:	7cfb      	ldrb	r3, [r7, #19]
 801c7e2:	2b20      	cmp	r3, #32
 801c7e4:	d01a      	beq.n	801c81c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	685a      	ldr	r2, [r3, #4]
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c7f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801c7f6:	f7fc fe45 	bl	8019484 <HAL_GetTick>
 801c7fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c7fc:	e00e      	b.n	801c81c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801c7fe:	f7fc fe41 	bl	8019484 <HAL_GetTick>
 801c802:	4602      	mov	r2, r0
 801c804:	69fb      	ldr	r3, [r7, #28]
 801c806:	1ad3      	subs	r3, r2, r3
 801c808:	2b19      	cmp	r3, #25
 801c80a:	d907      	bls.n	801c81c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 801c80c:	6a3b      	ldr	r3, [r7, #32]
 801c80e:	f043 0320 	orr.w	r3, r3, #32
 801c812:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801c814:	2301      	movs	r3, #1
 801c816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801c81a:	e006      	b.n	801c82a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	699b      	ldr	r3, [r3, #24]
 801c822:	f003 0320 	and.w	r3, r3, #32
 801c826:	2b20      	cmp	r3, #32
 801c828:	d1e9      	bne.n	801c7fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	699b      	ldr	r3, [r3, #24]
 801c830:	f003 0320 	and.w	r3, r3, #32
 801c834:	2b20      	cmp	r3, #32
 801c836:	d003      	beq.n	801c840 <I2C_IsErrorOccurred+0xe0>
 801c838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d0aa      	beq.n	801c796 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801c840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c844:	2b00      	cmp	r3, #0
 801c846:	d103      	bne.n	801c850 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	2220      	movs	r2, #32
 801c84e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801c850:	6a3b      	ldr	r3, [r7, #32]
 801c852:	f043 0304 	orr.w	r3, r3, #4
 801c856:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801c858:	2301      	movs	r3, #1
 801c85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	699b      	ldr	r3, [r3, #24]
 801c864:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801c866:	69bb      	ldr	r3, [r7, #24]
 801c868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d00b      	beq.n	801c888 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801c870:	6a3b      	ldr	r3, [r7, #32]
 801c872:	f043 0301 	orr.w	r3, r3, #1
 801c876:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c880:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801c882:	2301      	movs	r3, #1
 801c884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801c888:	69bb      	ldr	r3, [r7, #24]
 801c88a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d00b      	beq.n	801c8aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801c892:	6a3b      	ldr	r3, [r7, #32]
 801c894:	f043 0308 	orr.w	r3, r3, #8
 801c898:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c8a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801c8a4:	2301      	movs	r3, #1
 801c8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801c8aa:	69bb      	ldr	r3, [r7, #24]
 801c8ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d00b      	beq.n	801c8cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801c8b4:	6a3b      	ldr	r3, [r7, #32]
 801c8b6:	f043 0302 	orr.w	r3, r3, #2
 801c8ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c8c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801c8c6:	2301      	movs	r3, #1
 801c8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801c8cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d01c      	beq.n	801c90e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801c8d4:	68f8      	ldr	r0, [r7, #12]
 801c8d6:	f7ff fe63 	bl	801c5a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	6859      	ldr	r1, [r3, #4]
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	681a      	ldr	r2, [r3, #0]
 801c8e4:	4b0d      	ldr	r3, [pc, #52]	; (801c91c <I2C_IsErrorOccurred+0x1bc>)
 801c8e6:	400b      	ands	r3, r1
 801c8e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c8ee:	6a3b      	ldr	r3, [r7, #32]
 801c8f0:	431a      	orrs	r2, r3
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	2220      	movs	r2, #32
 801c8fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	2200      	movs	r2, #0
 801c902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	2200      	movs	r2, #0
 801c90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801c90e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c912:	4618      	mov	r0, r3
 801c914:	3728      	adds	r7, #40	; 0x28
 801c916:	46bd      	mov	sp, r7
 801c918:	bd80      	pop	{r7, pc}
 801c91a:	bf00      	nop
 801c91c:	fe00e800 	.word	0xfe00e800

0801c920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801c920:	b480      	push	{r7}
 801c922:	b087      	sub	sp, #28
 801c924:	af00      	add	r7, sp, #0
 801c926:	60f8      	str	r0, [r7, #12]
 801c928:	607b      	str	r3, [r7, #4]
 801c92a:	460b      	mov	r3, r1
 801c92c:	817b      	strh	r3, [r7, #10]
 801c92e:	4613      	mov	r3, r2
 801c930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801c932:	897b      	ldrh	r3, [r7, #10]
 801c934:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801c938:	7a7b      	ldrb	r3, [r7, #9]
 801c93a:	041b      	lsls	r3, r3, #16
 801c93c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801c940:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801c946:	6a3b      	ldr	r3, [r7, #32]
 801c948:	4313      	orrs	r3, r2
 801c94a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c94e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	685a      	ldr	r2, [r3, #4]
 801c956:	6a3b      	ldr	r3, [r7, #32]
 801c958:	0d5b      	lsrs	r3, r3, #21
 801c95a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801c95e:	4b08      	ldr	r3, [pc, #32]	; (801c980 <I2C_TransferConfig+0x60>)
 801c960:	430b      	orrs	r3, r1
 801c962:	43db      	mvns	r3, r3
 801c964:	ea02 0103 	and.w	r1, r2, r3
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	697a      	ldr	r2, [r7, #20]
 801c96e:	430a      	orrs	r2, r1
 801c970:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801c972:	bf00      	nop
 801c974:	371c      	adds	r7, #28
 801c976:	46bd      	mov	sp, r7
 801c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c97c:	4770      	bx	lr
 801c97e:	bf00      	nop
 801c980:	03ff63ff 	.word	0x03ff63ff

0801c984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801c984:	b480      	push	{r7}
 801c986:	b083      	sub	sp, #12
 801c988:	af00      	add	r7, sp, #0
 801c98a:	6078      	str	r0, [r7, #4]
 801c98c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c994:	b2db      	uxtb	r3, r3
 801c996:	2b20      	cmp	r3, #32
 801c998:	d138      	bne.n	801ca0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c9a0:	2b01      	cmp	r3, #1
 801c9a2:	d101      	bne.n	801c9a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801c9a4:	2302      	movs	r3, #2
 801c9a6:	e032      	b.n	801ca0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	2201      	movs	r2, #1
 801c9ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	2224      	movs	r2, #36	; 0x24
 801c9b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	681a      	ldr	r2, [r3, #0]
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	f022 0201 	bic.w	r2, r2, #1
 801c9c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	681a      	ldr	r2, [r3, #0]
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	681b      	ldr	r3, [r3, #0]
 801c9d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c9d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	6819      	ldr	r1, [r3, #0]
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	683a      	ldr	r2, [r7, #0]
 801c9e4:	430a      	orrs	r2, r1
 801c9e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	681a      	ldr	r2, [r3, #0]
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	f042 0201 	orr.w	r2, r2, #1
 801c9f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	2220      	movs	r2, #32
 801c9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	2200      	movs	r2, #0
 801ca04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801ca08:	2300      	movs	r3, #0
 801ca0a:	e000      	b.n	801ca0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801ca0c:	2302      	movs	r3, #2
  }
}
 801ca0e:	4618      	mov	r0, r3
 801ca10:	370c      	adds	r7, #12
 801ca12:	46bd      	mov	sp, r7
 801ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca18:	4770      	bx	lr

0801ca1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801ca1a:	b480      	push	{r7}
 801ca1c:	b085      	sub	sp, #20
 801ca1e:	af00      	add	r7, sp, #0
 801ca20:	6078      	str	r0, [r7, #4]
 801ca22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ca2a:	b2db      	uxtb	r3, r3
 801ca2c:	2b20      	cmp	r3, #32
 801ca2e:	d139      	bne.n	801caa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ca36:	2b01      	cmp	r3, #1
 801ca38:	d101      	bne.n	801ca3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801ca3a:	2302      	movs	r3, #2
 801ca3c:	e033      	b.n	801caa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	2201      	movs	r2, #1
 801ca42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	2224      	movs	r2, #36	; 0x24
 801ca4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	681a      	ldr	r2, [r3, #0]
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	f022 0201 	bic.w	r2, r2, #1
 801ca5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801ca6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801ca6e:	683b      	ldr	r3, [r7, #0]
 801ca70:	021b      	lsls	r3, r3, #8
 801ca72:	68fa      	ldr	r2, [r7, #12]
 801ca74:	4313      	orrs	r3, r2
 801ca76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	68fa      	ldr	r2, [r7, #12]
 801ca7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	681a      	ldr	r2, [r3, #0]
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	f042 0201 	orr.w	r2, r2, #1
 801ca8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	2220      	movs	r2, #32
 801ca94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	2200      	movs	r2, #0
 801ca9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801caa0:	2300      	movs	r3, #0
 801caa2:	e000      	b.n	801caa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801caa4:	2302      	movs	r3, #2
  }
}
 801caa6:	4618      	mov	r0, r3
 801caa8:	3714      	adds	r7, #20
 801caaa:	46bd      	mov	sp, r7
 801caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cab0:	4770      	bx	lr

0801cab2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801cab2:	b580      	push	{r7, lr}
 801cab4:	b084      	sub	sp, #16
 801cab6:	af00      	add	r7, sp, #0
 801cab8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d101      	bne.n	801cac4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801cac0:	2301      	movs	r3, #1
 801cac2:	e041      	b.n	801cb48 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801cacc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	f245 5255 	movw	r2, #21845	; 0x5555
 801cad6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	687a      	ldr	r2, [r7, #4]
 801cade:	6852      	ldr	r2, [r2, #4]
 801cae0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	687a      	ldr	r2, [r7, #4]
 801cae8:	6892      	ldr	r2, [r2, #8]
 801caea:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801caec:	f7fc fcca 	bl	8019484 <HAL_GetTick>
 801caf0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801caf2:	e00f      	b.n	801cb14 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801caf4:	f7fc fcc6 	bl	8019484 <HAL_GetTick>
 801caf8:	4602      	mov	r2, r0
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	1ad3      	subs	r3, r2, r3
 801cafe:	2b31      	cmp	r3, #49	; 0x31
 801cb00:	d908      	bls.n	801cb14 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	68db      	ldr	r3, [r3, #12]
 801cb08:	f003 0307 	and.w	r3, r3, #7
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d001      	beq.n	801cb14 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 801cb10:	2303      	movs	r3, #3
 801cb12:	e019      	b.n	801cb48 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	68db      	ldr	r3, [r3, #12]
 801cb1a:	f003 0307 	and.w	r3, r3, #7
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d1e8      	bne.n	801caf4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	691a      	ldr	r2, [r3, #16]
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	68db      	ldr	r3, [r3, #12]
 801cb2c:	429a      	cmp	r2, r3
 801cb2e:	d005      	beq.n	801cb3c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	681b      	ldr	r3, [r3, #0]
 801cb34:	687a      	ldr	r2, [r7, #4]
 801cb36:	68d2      	ldr	r2, [r2, #12]
 801cb38:	611a      	str	r2, [r3, #16]
 801cb3a:	e004      	b.n	801cb46 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801cb44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cb46:	2300      	movs	r3, #0
}
 801cb48:	4618      	mov	r0, r3
 801cb4a:	3710      	adds	r7, #16
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}

0801cb50 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801cb50:	b480      	push	{r7}
 801cb52:	b083      	sub	sp, #12
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801cb60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801cb62:	2300      	movs	r3, #0
}
 801cb64:	4618      	mov	r0, r3
 801cb66:	370c      	adds	r7, #12
 801cb68:	46bd      	mov	sp, r7
 801cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb6e:	4770      	bx	lr

0801cb70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cb70:	b580      	push	{r7, lr}
 801cb72:	b086      	sub	sp, #24
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801cb78:	2300      	movs	r3, #0
 801cb7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d101      	bne.n	801cb86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801cb82:	2301      	movs	r3, #1
 801cb84:	e29b      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	f003 0301 	and.w	r3, r3, #1
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	f000 8087 	beq.w	801cca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801cb94:	4b96      	ldr	r3, [pc, #600]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cb96:	689b      	ldr	r3, [r3, #8]
 801cb98:	f003 030c 	and.w	r3, r3, #12
 801cb9c:	2b04      	cmp	r3, #4
 801cb9e:	d00c      	beq.n	801cbba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801cba0:	4b93      	ldr	r3, [pc, #588]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cba2:	689b      	ldr	r3, [r3, #8]
 801cba4:	f003 030c 	and.w	r3, r3, #12
 801cba8:	2b08      	cmp	r3, #8
 801cbaa:	d112      	bne.n	801cbd2 <HAL_RCC_OscConfig+0x62>
 801cbac:	4b90      	ldr	r3, [pc, #576]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cbae:	685b      	ldr	r3, [r3, #4]
 801cbb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801cbb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cbb8:	d10b      	bne.n	801cbd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cbba:	4b8d      	ldr	r3, [pc, #564]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d06c      	beq.n	801cca0 <HAL_RCC_OscConfig+0x130>
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	685b      	ldr	r3, [r3, #4]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d168      	bne.n	801cca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801cbce:	2301      	movs	r3, #1
 801cbd0:	e275      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	685b      	ldr	r3, [r3, #4]
 801cbd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbda:	d106      	bne.n	801cbea <HAL_RCC_OscConfig+0x7a>
 801cbdc:	4b84      	ldr	r3, [pc, #528]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	4a83      	ldr	r2, [pc, #524]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cbe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cbe6:	6013      	str	r3, [r2, #0]
 801cbe8:	e02e      	b.n	801cc48 <HAL_RCC_OscConfig+0xd8>
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	685b      	ldr	r3, [r3, #4]
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d10c      	bne.n	801cc0c <HAL_RCC_OscConfig+0x9c>
 801cbf2:	4b7f      	ldr	r3, [pc, #508]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	4a7e      	ldr	r2, [pc, #504]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cbf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cbfc:	6013      	str	r3, [r2, #0]
 801cbfe:	4b7c      	ldr	r3, [pc, #496]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	4a7b      	ldr	r2, [pc, #492]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801cc08:	6013      	str	r3, [r2, #0]
 801cc0a:	e01d      	b.n	801cc48 <HAL_RCC_OscConfig+0xd8>
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	685b      	ldr	r3, [r3, #4]
 801cc10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801cc14:	d10c      	bne.n	801cc30 <HAL_RCC_OscConfig+0xc0>
 801cc16:	4b76      	ldr	r3, [pc, #472]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	4a75      	ldr	r2, [pc, #468]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801cc20:	6013      	str	r3, [r2, #0]
 801cc22:	4b73      	ldr	r3, [pc, #460]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	4a72      	ldr	r2, [pc, #456]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc2c:	6013      	str	r3, [r2, #0]
 801cc2e:	e00b      	b.n	801cc48 <HAL_RCC_OscConfig+0xd8>
 801cc30:	4b6f      	ldr	r3, [pc, #444]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc32:	681b      	ldr	r3, [r3, #0]
 801cc34:	4a6e      	ldr	r2, [pc, #440]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cc3a:	6013      	str	r3, [r2, #0]
 801cc3c:	4b6c      	ldr	r3, [pc, #432]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	4a6b      	ldr	r2, [pc, #428]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801cc46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	685b      	ldr	r3, [r3, #4]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d013      	beq.n	801cc78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc50:	f7fc fc18 	bl	8019484 <HAL_GetTick>
 801cc54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801cc56:	e008      	b.n	801cc6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cc58:	f7fc fc14 	bl	8019484 <HAL_GetTick>
 801cc5c:	4602      	mov	r2, r0
 801cc5e:	693b      	ldr	r3, [r7, #16]
 801cc60:	1ad3      	subs	r3, r2, r3
 801cc62:	2b64      	cmp	r3, #100	; 0x64
 801cc64:	d901      	bls.n	801cc6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801cc66:	2303      	movs	r3, #3
 801cc68:	e229      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801cc6a:	4b61      	ldr	r3, [pc, #388]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d0f0      	beq.n	801cc58 <HAL_RCC_OscConfig+0xe8>
 801cc76:	e014      	b.n	801cca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc78:	f7fc fc04 	bl	8019484 <HAL_GetTick>
 801cc7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801cc7e:	e008      	b.n	801cc92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cc80:	f7fc fc00 	bl	8019484 <HAL_GetTick>
 801cc84:	4602      	mov	r2, r0
 801cc86:	693b      	ldr	r3, [r7, #16]
 801cc88:	1ad3      	subs	r3, r2, r3
 801cc8a:	2b64      	cmp	r3, #100	; 0x64
 801cc8c:	d901      	bls.n	801cc92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801cc8e:	2303      	movs	r3, #3
 801cc90:	e215      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801cc92:	4b57      	ldr	r3, [pc, #348]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d1f0      	bne.n	801cc80 <HAL_RCC_OscConfig+0x110>
 801cc9e:	e000      	b.n	801cca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	f003 0302 	and.w	r3, r3, #2
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d069      	beq.n	801cd82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801ccae:	4b50      	ldr	r3, [pc, #320]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801ccb0:	689b      	ldr	r3, [r3, #8]
 801ccb2:	f003 030c 	and.w	r3, r3, #12
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d00b      	beq.n	801ccd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801ccba:	4b4d      	ldr	r3, [pc, #308]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801ccbc:	689b      	ldr	r3, [r3, #8]
 801ccbe:	f003 030c 	and.w	r3, r3, #12
 801ccc2:	2b08      	cmp	r3, #8
 801ccc4:	d11c      	bne.n	801cd00 <HAL_RCC_OscConfig+0x190>
 801ccc6:	4b4a      	ldr	r3, [pc, #296]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801ccc8:	685b      	ldr	r3, [r3, #4]
 801ccca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d116      	bne.n	801cd00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801ccd2:	4b47      	ldr	r3, [pc, #284]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	f003 0302 	and.w	r3, r3, #2
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d005      	beq.n	801ccea <HAL_RCC_OscConfig+0x17a>
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	68db      	ldr	r3, [r3, #12]
 801cce2:	2b01      	cmp	r3, #1
 801cce4:	d001      	beq.n	801ccea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801cce6:	2301      	movs	r3, #1
 801cce8:	e1e9      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ccea:	4b41      	ldr	r3, [pc, #260]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	691b      	ldr	r3, [r3, #16]
 801ccf6:	00db      	lsls	r3, r3, #3
 801ccf8:	493d      	ldr	r1, [pc, #244]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801ccfa:	4313      	orrs	r3, r2
 801ccfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801ccfe:	e040      	b.n	801cd82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	68db      	ldr	r3, [r3, #12]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d023      	beq.n	801cd50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801cd08:	4b39      	ldr	r3, [pc, #228]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	4a38      	ldr	r2, [pc, #224]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd0e:	f043 0301 	orr.w	r3, r3, #1
 801cd12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd14:	f7fc fbb6 	bl	8019484 <HAL_GetTick>
 801cd18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801cd1a:	e008      	b.n	801cd2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cd1c:	f7fc fbb2 	bl	8019484 <HAL_GetTick>
 801cd20:	4602      	mov	r2, r0
 801cd22:	693b      	ldr	r3, [r7, #16]
 801cd24:	1ad3      	subs	r3, r2, r3
 801cd26:	2b02      	cmp	r3, #2
 801cd28:	d901      	bls.n	801cd2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801cd2a:	2303      	movs	r3, #3
 801cd2c:	e1c7      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801cd2e:	4b30      	ldr	r3, [pc, #192]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	f003 0302 	and.w	r3, r3, #2
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d0f0      	beq.n	801cd1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cd3a:	4b2d      	ldr	r3, [pc, #180]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	691b      	ldr	r3, [r3, #16]
 801cd46:	00db      	lsls	r3, r3, #3
 801cd48:	4929      	ldr	r1, [pc, #164]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd4a:	4313      	orrs	r3, r2
 801cd4c:	600b      	str	r3, [r1, #0]
 801cd4e:	e018      	b.n	801cd82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801cd50:	4b27      	ldr	r3, [pc, #156]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	4a26      	ldr	r2, [pc, #152]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd56:	f023 0301 	bic.w	r3, r3, #1
 801cd5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd5c:	f7fc fb92 	bl	8019484 <HAL_GetTick>
 801cd60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801cd62:	e008      	b.n	801cd76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cd64:	f7fc fb8e 	bl	8019484 <HAL_GetTick>
 801cd68:	4602      	mov	r2, r0
 801cd6a:	693b      	ldr	r3, [r7, #16]
 801cd6c:	1ad3      	subs	r3, r2, r3
 801cd6e:	2b02      	cmp	r3, #2
 801cd70:	d901      	bls.n	801cd76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801cd72:	2303      	movs	r3, #3
 801cd74:	e1a3      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801cd76:	4b1e      	ldr	r3, [pc, #120]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd78:	681b      	ldr	r3, [r3, #0]
 801cd7a:	f003 0302 	and.w	r3, r3, #2
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d1f0      	bne.n	801cd64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	f003 0308 	and.w	r3, r3, #8
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d038      	beq.n	801ce00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	695b      	ldr	r3, [r3, #20]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d019      	beq.n	801cdca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801cd96:	4b16      	ldr	r3, [pc, #88]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd9a:	4a15      	ldr	r2, [pc, #84]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cd9c:	f043 0301 	orr.w	r3, r3, #1
 801cda0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cda2:	f7fc fb6f 	bl	8019484 <HAL_GetTick>
 801cda6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801cda8:	e008      	b.n	801cdbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cdaa:	f7fc fb6b 	bl	8019484 <HAL_GetTick>
 801cdae:	4602      	mov	r2, r0
 801cdb0:	693b      	ldr	r3, [r7, #16]
 801cdb2:	1ad3      	subs	r3, r2, r3
 801cdb4:	2b02      	cmp	r3, #2
 801cdb6:	d901      	bls.n	801cdbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801cdb8:	2303      	movs	r3, #3
 801cdba:	e180      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801cdbc:	4b0c      	ldr	r3, [pc, #48]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cdbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cdc0:	f003 0302 	and.w	r3, r3, #2
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d0f0      	beq.n	801cdaa <HAL_RCC_OscConfig+0x23a>
 801cdc8:	e01a      	b.n	801ce00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801cdca:	4b09      	ldr	r3, [pc, #36]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cdcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cdce:	4a08      	ldr	r2, [pc, #32]	; (801cdf0 <HAL_RCC_OscConfig+0x280>)
 801cdd0:	f023 0301 	bic.w	r3, r3, #1
 801cdd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cdd6:	f7fc fb55 	bl	8019484 <HAL_GetTick>
 801cdda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801cddc:	e00a      	b.n	801cdf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cdde:	f7fc fb51 	bl	8019484 <HAL_GetTick>
 801cde2:	4602      	mov	r2, r0
 801cde4:	693b      	ldr	r3, [r7, #16]
 801cde6:	1ad3      	subs	r3, r2, r3
 801cde8:	2b02      	cmp	r3, #2
 801cdea:	d903      	bls.n	801cdf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801cdec:	2303      	movs	r3, #3
 801cdee:	e166      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
 801cdf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801cdf4:	4b92      	ldr	r3, [pc, #584]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cdf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cdf8:	f003 0302 	and.w	r3, r3, #2
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d1ee      	bne.n	801cdde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	f003 0304 	and.w	r3, r3, #4
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	f000 80a4 	beq.w	801cf56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ce0e:	4b8c      	ldr	r3, [pc, #560]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ce10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d10d      	bne.n	801ce36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801ce1a:	4b89      	ldr	r3, [pc, #548]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce1e:	4a88      	ldr	r2, [pc, #544]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ce20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ce24:	6413      	str	r3, [r2, #64]	; 0x40
 801ce26:	4b86      	ldr	r3, [pc, #536]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ce28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ce2e:	60bb      	str	r3, [r7, #8]
 801ce30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801ce32:	2301      	movs	r3, #1
 801ce34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ce36:	4b83      	ldr	r3, [pc, #524]	; (801d044 <HAL_RCC_OscConfig+0x4d4>)
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d118      	bne.n	801ce74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801ce42:	4b80      	ldr	r3, [pc, #512]	; (801d044 <HAL_RCC_OscConfig+0x4d4>)
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	4a7f      	ldr	r2, [pc, #508]	; (801d044 <HAL_RCC_OscConfig+0x4d4>)
 801ce48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ce4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801ce4e:	f7fc fb19 	bl	8019484 <HAL_GetTick>
 801ce52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ce54:	e008      	b.n	801ce68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ce56:	f7fc fb15 	bl	8019484 <HAL_GetTick>
 801ce5a:	4602      	mov	r2, r0
 801ce5c:	693b      	ldr	r3, [r7, #16]
 801ce5e:	1ad3      	subs	r3, r2, r3
 801ce60:	2b64      	cmp	r3, #100	; 0x64
 801ce62:	d901      	bls.n	801ce68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801ce64:	2303      	movs	r3, #3
 801ce66:	e12a      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ce68:	4b76      	ldr	r3, [pc, #472]	; (801d044 <HAL_RCC_OscConfig+0x4d4>)
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d0f0      	beq.n	801ce56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	689b      	ldr	r3, [r3, #8]
 801ce78:	2b01      	cmp	r3, #1
 801ce7a:	d106      	bne.n	801ce8a <HAL_RCC_OscConfig+0x31a>
 801ce7c:	4b70      	ldr	r3, [pc, #448]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ce7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce80:	4a6f      	ldr	r2, [pc, #444]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ce82:	f043 0301 	orr.w	r3, r3, #1
 801ce86:	6713      	str	r3, [r2, #112]	; 0x70
 801ce88:	e02d      	b.n	801cee6 <HAL_RCC_OscConfig+0x376>
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	689b      	ldr	r3, [r3, #8]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d10c      	bne.n	801ceac <HAL_RCC_OscConfig+0x33c>
 801ce92:	4b6b      	ldr	r3, [pc, #428]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ce94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce96:	4a6a      	ldr	r2, [pc, #424]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ce98:	f023 0301 	bic.w	r3, r3, #1
 801ce9c:	6713      	str	r3, [r2, #112]	; 0x70
 801ce9e:	4b68      	ldr	r3, [pc, #416]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cea2:	4a67      	ldr	r2, [pc, #412]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cea4:	f023 0304 	bic.w	r3, r3, #4
 801cea8:	6713      	str	r3, [r2, #112]	; 0x70
 801ceaa:	e01c      	b.n	801cee6 <HAL_RCC_OscConfig+0x376>
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	689b      	ldr	r3, [r3, #8]
 801ceb0:	2b05      	cmp	r3, #5
 801ceb2:	d10c      	bne.n	801cece <HAL_RCC_OscConfig+0x35e>
 801ceb4:	4b62      	ldr	r3, [pc, #392]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ceb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ceb8:	4a61      	ldr	r2, [pc, #388]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ceba:	f043 0304 	orr.w	r3, r3, #4
 801cebe:	6713      	str	r3, [r2, #112]	; 0x70
 801cec0:	4b5f      	ldr	r3, [pc, #380]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cec4:	4a5e      	ldr	r2, [pc, #376]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cec6:	f043 0301 	orr.w	r3, r3, #1
 801ceca:	6713      	str	r3, [r2, #112]	; 0x70
 801cecc:	e00b      	b.n	801cee6 <HAL_RCC_OscConfig+0x376>
 801cece:	4b5c      	ldr	r3, [pc, #368]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ced0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ced2:	4a5b      	ldr	r2, [pc, #364]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801ced4:	f023 0301 	bic.w	r3, r3, #1
 801ced8:	6713      	str	r3, [r2, #112]	; 0x70
 801ceda:	4b59      	ldr	r3, [pc, #356]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cede:	4a58      	ldr	r2, [pc, #352]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cee0:	f023 0304 	bic.w	r3, r3, #4
 801cee4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	689b      	ldr	r3, [r3, #8]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d015      	beq.n	801cf1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ceee:	f7fc fac9 	bl	8019484 <HAL_GetTick>
 801cef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801cef4:	e00a      	b.n	801cf0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cef6:	f7fc fac5 	bl	8019484 <HAL_GetTick>
 801cefa:	4602      	mov	r2, r0
 801cefc:	693b      	ldr	r3, [r7, #16]
 801cefe:	1ad3      	subs	r3, r2, r3
 801cf00:	f241 3288 	movw	r2, #5000	; 0x1388
 801cf04:	4293      	cmp	r3, r2
 801cf06:	d901      	bls.n	801cf0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801cf08:	2303      	movs	r3, #3
 801cf0a:	e0d8      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801cf0c:	4b4c      	ldr	r3, [pc, #304]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cf0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf10:	f003 0302 	and.w	r3, r3, #2
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d0ee      	beq.n	801cef6 <HAL_RCC_OscConfig+0x386>
 801cf18:	e014      	b.n	801cf44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf1a:	f7fc fab3 	bl	8019484 <HAL_GetTick>
 801cf1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801cf20:	e00a      	b.n	801cf38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cf22:	f7fc faaf 	bl	8019484 <HAL_GetTick>
 801cf26:	4602      	mov	r2, r0
 801cf28:	693b      	ldr	r3, [r7, #16]
 801cf2a:	1ad3      	subs	r3, r2, r3
 801cf2c:	f241 3288 	movw	r2, #5000	; 0x1388
 801cf30:	4293      	cmp	r3, r2
 801cf32:	d901      	bls.n	801cf38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801cf34:	2303      	movs	r3, #3
 801cf36:	e0c2      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801cf38:	4b41      	ldr	r3, [pc, #260]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cf3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf3c:	f003 0302 	and.w	r3, r3, #2
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d1ee      	bne.n	801cf22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801cf44:	7dfb      	ldrb	r3, [r7, #23]
 801cf46:	2b01      	cmp	r3, #1
 801cf48:	d105      	bne.n	801cf56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801cf4a:	4b3d      	ldr	r3, [pc, #244]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf4e:	4a3c      	ldr	r2, [pc, #240]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cf50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cf54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	699b      	ldr	r3, [r3, #24]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	f000 80ae 	beq.w	801d0bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801cf60:	4b37      	ldr	r3, [pc, #220]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cf62:	689b      	ldr	r3, [r3, #8]
 801cf64:	f003 030c 	and.w	r3, r3, #12
 801cf68:	2b08      	cmp	r3, #8
 801cf6a:	d06d      	beq.n	801d048 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	699b      	ldr	r3, [r3, #24]
 801cf70:	2b02      	cmp	r3, #2
 801cf72:	d14b      	bne.n	801d00c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cf74:	4b32      	ldr	r3, [pc, #200]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	4a31      	ldr	r2, [pc, #196]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cf7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801cf7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cf80:	f7fc fa80 	bl	8019484 <HAL_GetTick>
 801cf84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801cf86:	e008      	b.n	801cf9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cf88:	f7fc fa7c 	bl	8019484 <HAL_GetTick>
 801cf8c:	4602      	mov	r2, r0
 801cf8e:	693b      	ldr	r3, [r7, #16]
 801cf90:	1ad3      	subs	r3, r2, r3
 801cf92:	2b02      	cmp	r3, #2
 801cf94:	d901      	bls.n	801cf9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801cf96:	2303      	movs	r3, #3
 801cf98:	e091      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801cf9a:	4b29      	ldr	r3, [pc, #164]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d1f0      	bne.n	801cf88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	69da      	ldr	r2, [r3, #28]
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	6a1b      	ldr	r3, [r3, #32]
 801cfae:	431a      	orrs	r2, r3
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfb4:	019b      	lsls	r3, r3, #6
 801cfb6:	431a      	orrs	r2, r3
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfbc:	085b      	lsrs	r3, r3, #1
 801cfbe:	3b01      	subs	r3, #1
 801cfc0:	041b      	lsls	r3, r3, #16
 801cfc2:	431a      	orrs	r2, r3
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfc8:	061b      	lsls	r3, r3, #24
 801cfca:	431a      	orrs	r2, r3
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfd0:	071b      	lsls	r3, r3, #28
 801cfd2:	491b      	ldr	r1, [pc, #108]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cfd4:	4313      	orrs	r3, r2
 801cfd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801cfd8:	4b19      	ldr	r3, [pc, #100]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	4a18      	ldr	r2, [pc, #96]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801cfde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801cfe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cfe4:	f7fc fa4e 	bl	8019484 <HAL_GetTick>
 801cfe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801cfea:	e008      	b.n	801cffe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cfec:	f7fc fa4a 	bl	8019484 <HAL_GetTick>
 801cff0:	4602      	mov	r2, r0
 801cff2:	693b      	ldr	r3, [r7, #16]
 801cff4:	1ad3      	subs	r3, r2, r3
 801cff6:	2b02      	cmp	r3, #2
 801cff8:	d901      	bls.n	801cffe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801cffa:	2303      	movs	r3, #3
 801cffc:	e05f      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801cffe:	4b10      	ldr	r3, [pc, #64]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d006:	2b00      	cmp	r3, #0
 801d008:	d0f0      	beq.n	801cfec <HAL_RCC_OscConfig+0x47c>
 801d00a:	e057      	b.n	801d0bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d00c:	4b0c      	ldr	r3, [pc, #48]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	4a0b      	ldr	r2, [pc, #44]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801d012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d018:	f7fc fa34 	bl	8019484 <HAL_GetTick>
 801d01c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d01e:	e008      	b.n	801d032 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d020:	f7fc fa30 	bl	8019484 <HAL_GetTick>
 801d024:	4602      	mov	r2, r0
 801d026:	693b      	ldr	r3, [r7, #16]
 801d028:	1ad3      	subs	r3, r2, r3
 801d02a:	2b02      	cmp	r3, #2
 801d02c:	d901      	bls.n	801d032 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801d02e:	2303      	movs	r3, #3
 801d030:	e045      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d032:	4b03      	ldr	r3, [pc, #12]	; (801d040 <HAL_RCC_OscConfig+0x4d0>)
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d1f0      	bne.n	801d020 <HAL_RCC_OscConfig+0x4b0>
 801d03e:	e03d      	b.n	801d0bc <HAL_RCC_OscConfig+0x54c>
 801d040:	40023800 	.word	0x40023800
 801d044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801d048:	4b1f      	ldr	r3, [pc, #124]	; (801d0c8 <HAL_RCC_OscConfig+0x558>)
 801d04a:	685b      	ldr	r3, [r3, #4]
 801d04c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	699b      	ldr	r3, [r3, #24]
 801d052:	2b01      	cmp	r3, #1
 801d054:	d030      	beq.n	801d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d060:	429a      	cmp	r2, r3
 801d062:	d129      	bne.n	801d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801d064:	68fb      	ldr	r3, [r7, #12]
 801d066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d06e:	429a      	cmp	r2, r3
 801d070:	d122      	bne.n	801d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d072:	68fa      	ldr	r2, [r7, #12]
 801d074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801d078:	4013      	ands	r3, r2
 801d07a:	687a      	ldr	r2, [r7, #4]
 801d07c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801d07e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801d080:	4293      	cmp	r3, r2
 801d082:	d119      	bne.n	801d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d08e:	085b      	lsrs	r3, r3, #1
 801d090:	3b01      	subs	r3, #1
 801d092:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d094:	429a      	cmp	r2, r3
 801d096:	d10f      	bne.n	801d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d098:	68fb      	ldr	r3, [r7, #12]
 801d09a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	d107      	bne.n	801d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d0b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d0b4:	429a      	cmp	r2, r3
 801d0b6:	d001      	beq.n	801d0bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801d0b8:	2301      	movs	r3, #1
 801d0ba:	e000      	b.n	801d0be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801d0bc:	2300      	movs	r3, #0
}
 801d0be:	4618      	mov	r0, r3
 801d0c0:	3718      	adds	r7, #24
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd80      	pop	{r7, pc}
 801d0c6:	bf00      	nop
 801d0c8:	40023800 	.word	0x40023800

0801d0cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d0cc:	b580      	push	{r7, lr}
 801d0ce:	b084      	sub	sp, #16
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]
 801d0d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d101      	bne.n	801d0e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801d0e0:	2301      	movs	r3, #1
 801d0e2:	e0d0      	b.n	801d286 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d0e4:	4b6a      	ldr	r3, [pc, #424]	; (801d290 <HAL_RCC_ClockConfig+0x1c4>)
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	f003 030f 	and.w	r3, r3, #15
 801d0ec:	683a      	ldr	r2, [r7, #0]
 801d0ee:	429a      	cmp	r2, r3
 801d0f0:	d910      	bls.n	801d114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d0f2:	4b67      	ldr	r3, [pc, #412]	; (801d290 <HAL_RCC_ClockConfig+0x1c4>)
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	f023 020f 	bic.w	r2, r3, #15
 801d0fa:	4965      	ldr	r1, [pc, #404]	; (801d290 <HAL_RCC_ClockConfig+0x1c4>)
 801d0fc:	683b      	ldr	r3, [r7, #0]
 801d0fe:	4313      	orrs	r3, r2
 801d100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d102:	4b63      	ldr	r3, [pc, #396]	; (801d290 <HAL_RCC_ClockConfig+0x1c4>)
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	f003 030f 	and.w	r3, r3, #15
 801d10a:	683a      	ldr	r2, [r7, #0]
 801d10c:	429a      	cmp	r2, r3
 801d10e:	d001      	beq.n	801d114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801d110:	2301      	movs	r3, #1
 801d112:	e0b8      	b.n	801d286 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	f003 0302 	and.w	r3, r3, #2
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d020      	beq.n	801d162 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	681b      	ldr	r3, [r3, #0]
 801d124:	f003 0304 	and.w	r3, r3, #4
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d005      	beq.n	801d138 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801d12c:	4b59      	ldr	r3, [pc, #356]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d12e:	689b      	ldr	r3, [r3, #8]
 801d130:	4a58      	ldr	r2, [pc, #352]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801d136:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	f003 0308 	and.w	r3, r3, #8
 801d140:	2b00      	cmp	r3, #0
 801d142:	d005      	beq.n	801d150 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801d144:	4b53      	ldr	r3, [pc, #332]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d146:	689b      	ldr	r3, [r3, #8]
 801d148:	4a52      	ldr	r2, [pc, #328]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d14a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801d14e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d150:	4b50      	ldr	r3, [pc, #320]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d152:	689b      	ldr	r3, [r3, #8]
 801d154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	689b      	ldr	r3, [r3, #8]
 801d15c:	494d      	ldr	r1, [pc, #308]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d15e:	4313      	orrs	r3, r2
 801d160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	f003 0301 	and.w	r3, r3, #1
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d040      	beq.n	801d1f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	685b      	ldr	r3, [r3, #4]
 801d172:	2b01      	cmp	r3, #1
 801d174:	d107      	bne.n	801d186 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d176:	4b47      	ldr	r3, [pc, #284]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d115      	bne.n	801d1ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d182:	2301      	movs	r3, #1
 801d184:	e07f      	b.n	801d286 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	685b      	ldr	r3, [r3, #4]
 801d18a:	2b02      	cmp	r3, #2
 801d18c:	d107      	bne.n	801d19e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d18e:	4b41      	ldr	r3, [pc, #260]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d196:	2b00      	cmp	r3, #0
 801d198:	d109      	bne.n	801d1ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d19a:	2301      	movs	r3, #1
 801d19c:	e073      	b.n	801d286 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d19e:	4b3d      	ldr	r3, [pc, #244]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	f003 0302 	and.w	r3, r3, #2
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d101      	bne.n	801d1ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d1aa:	2301      	movs	r3, #1
 801d1ac:	e06b      	b.n	801d286 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801d1ae:	4b39      	ldr	r3, [pc, #228]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d1b0:	689b      	ldr	r3, [r3, #8]
 801d1b2:	f023 0203 	bic.w	r2, r3, #3
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	685b      	ldr	r3, [r3, #4]
 801d1ba:	4936      	ldr	r1, [pc, #216]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d1bc:	4313      	orrs	r3, r2
 801d1be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d1c0:	f7fc f960 	bl	8019484 <HAL_GetTick>
 801d1c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d1c6:	e00a      	b.n	801d1de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d1c8:	f7fc f95c 	bl	8019484 <HAL_GetTick>
 801d1cc:	4602      	mov	r2, r0
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	1ad3      	subs	r3, r2, r3
 801d1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 801d1d6:	4293      	cmp	r3, r2
 801d1d8:	d901      	bls.n	801d1de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801d1da:	2303      	movs	r3, #3
 801d1dc:	e053      	b.n	801d286 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d1de:	4b2d      	ldr	r3, [pc, #180]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d1e0:	689b      	ldr	r3, [r3, #8]
 801d1e2:	f003 020c 	and.w	r2, r3, #12
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	685b      	ldr	r3, [r3, #4]
 801d1ea:	009b      	lsls	r3, r3, #2
 801d1ec:	429a      	cmp	r2, r3
 801d1ee:	d1eb      	bne.n	801d1c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d1f0:	4b27      	ldr	r3, [pc, #156]	; (801d290 <HAL_RCC_ClockConfig+0x1c4>)
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	f003 030f 	and.w	r3, r3, #15
 801d1f8:	683a      	ldr	r2, [r7, #0]
 801d1fa:	429a      	cmp	r2, r3
 801d1fc:	d210      	bcs.n	801d220 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d1fe:	4b24      	ldr	r3, [pc, #144]	; (801d290 <HAL_RCC_ClockConfig+0x1c4>)
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	f023 020f 	bic.w	r2, r3, #15
 801d206:	4922      	ldr	r1, [pc, #136]	; (801d290 <HAL_RCC_ClockConfig+0x1c4>)
 801d208:	683b      	ldr	r3, [r7, #0]
 801d20a:	4313      	orrs	r3, r2
 801d20c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d20e:	4b20      	ldr	r3, [pc, #128]	; (801d290 <HAL_RCC_ClockConfig+0x1c4>)
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	f003 030f 	and.w	r3, r3, #15
 801d216:	683a      	ldr	r2, [r7, #0]
 801d218:	429a      	cmp	r2, r3
 801d21a:	d001      	beq.n	801d220 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801d21c:	2301      	movs	r3, #1
 801d21e:	e032      	b.n	801d286 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	f003 0304 	and.w	r3, r3, #4
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d008      	beq.n	801d23e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d22c:	4b19      	ldr	r3, [pc, #100]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d22e:	689b      	ldr	r3, [r3, #8]
 801d230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	68db      	ldr	r3, [r3, #12]
 801d238:	4916      	ldr	r1, [pc, #88]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d23a:	4313      	orrs	r3, r2
 801d23c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	681b      	ldr	r3, [r3, #0]
 801d242:	f003 0308 	and.w	r3, r3, #8
 801d246:	2b00      	cmp	r3, #0
 801d248:	d009      	beq.n	801d25e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801d24a:	4b12      	ldr	r3, [pc, #72]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d24c:	689b      	ldr	r3, [r3, #8]
 801d24e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	691b      	ldr	r3, [r3, #16]
 801d256:	00db      	lsls	r3, r3, #3
 801d258:	490e      	ldr	r1, [pc, #56]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d25a:	4313      	orrs	r3, r2
 801d25c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801d25e:	f000 f821 	bl	801d2a4 <HAL_RCC_GetSysClockFreq>
 801d262:	4602      	mov	r2, r0
 801d264:	4b0b      	ldr	r3, [pc, #44]	; (801d294 <HAL_RCC_ClockConfig+0x1c8>)
 801d266:	689b      	ldr	r3, [r3, #8]
 801d268:	091b      	lsrs	r3, r3, #4
 801d26a:	f003 030f 	and.w	r3, r3, #15
 801d26e:	490a      	ldr	r1, [pc, #40]	; (801d298 <HAL_RCC_ClockConfig+0x1cc>)
 801d270:	5ccb      	ldrb	r3, [r1, r3]
 801d272:	fa22 f303 	lsr.w	r3, r2, r3
 801d276:	4a09      	ldr	r2, [pc, #36]	; (801d29c <HAL_RCC_ClockConfig+0x1d0>)
 801d278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801d27a:	4b09      	ldr	r3, [pc, #36]	; (801d2a0 <HAL_RCC_ClockConfig+0x1d4>)
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	4618      	mov	r0, r3
 801d280:	f7fc f8bc 	bl	80193fc <HAL_InitTick>

  return HAL_OK;
 801d284:	2300      	movs	r3, #0
}
 801d286:	4618      	mov	r0, r3
 801d288:	3710      	adds	r7, #16
 801d28a:	46bd      	mov	sp, r7
 801d28c:	bd80      	pop	{r7, pc}
 801d28e:	bf00      	nop
 801d290:	40023c00 	.word	0x40023c00
 801d294:	40023800 	.word	0x40023800
 801d298:	0802da0c 	.word	0x0802da0c
 801d29c:	2000031c 	.word	0x2000031c
 801d2a0:	20000320 	.word	0x20000320

0801d2a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d2a8:	b090      	sub	sp, #64	; 0x40
 801d2aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801d2ac:	2300      	movs	r3, #0
 801d2ae:	637b      	str	r3, [r7, #52]	; 0x34
 801d2b0:	2300      	movs	r3, #0
 801d2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801d2b8:	2300      	movs	r3, #0
 801d2ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d2bc:	4b59      	ldr	r3, [pc, #356]	; (801d424 <HAL_RCC_GetSysClockFreq+0x180>)
 801d2be:	689b      	ldr	r3, [r3, #8]
 801d2c0:	f003 030c 	and.w	r3, r3, #12
 801d2c4:	2b08      	cmp	r3, #8
 801d2c6:	d00d      	beq.n	801d2e4 <HAL_RCC_GetSysClockFreq+0x40>
 801d2c8:	2b08      	cmp	r3, #8
 801d2ca:	f200 80a1 	bhi.w	801d410 <HAL_RCC_GetSysClockFreq+0x16c>
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d002      	beq.n	801d2d8 <HAL_RCC_GetSysClockFreq+0x34>
 801d2d2:	2b04      	cmp	r3, #4
 801d2d4:	d003      	beq.n	801d2de <HAL_RCC_GetSysClockFreq+0x3a>
 801d2d6:	e09b      	b.n	801d410 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801d2d8:	4b53      	ldr	r3, [pc, #332]	; (801d428 <HAL_RCC_GetSysClockFreq+0x184>)
 801d2da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801d2dc:	e09b      	b.n	801d416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801d2de:	4b53      	ldr	r3, [pc, #332]	; (801d42c <HAL_RCC_GetSysClockFreq+0x188>)
 801d2e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801d2e2:	e098      	b.n	801d416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801d2e4:	4b4f      	ldr	r3, [pc, #316]	; (801d424 <HAL_RCC_GetSysClockFreq+0x180>)
 801d2e6:	685b      	ldr	r3, [r3, #4]
 801d2e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d2ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801d2ee:	4b4d      	ldr	r3, [pc, #308]	; (801d424 <HAL_RCC_GetSysClockFreq+0x180>)
 801d2f0:	685b      	ldr	r3, [r3, #4]
 801d2f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	d028      	beq.n	801d34c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801d2fa:	4b4a      	ldr	r3, [pc, #296]	; (801d424 <HAL_RCC_GetSysClockFreq+0x180>)
 801d2fc:	685b      	ldr	r3, [r3, #4]
 801d2fe:	099b      	lsrs	r3, r3, #6
 801d300:	2200      	movs	r2, #0
 801d302:	623b      	str	r3, [r7, #32]
 801d304:	627a      	str	r2, [r7, #36]	; 0x24
 801d306:	6a3b      	ldr	r3, [r7, #32]
 801d308:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801d30c:	2100      	movs	r1, #0
 801d30e:	4b47      	ldr	r3, [pc, #284]	; (801d42c <HAL_RCC_GetSysClockFreq+0x188>)
 801d310:	fb03 f201 	mul.w	r2, r3, r1
 801d314:	2300      	movs	r3, #0
 801d316:	fb00 f303 	mul.w	r3, r0, r3
 801d31a:	4413      	add	r3, r2
 801d31c:	4a43      	ldr	r2, [pc, #268]	; (801d42c <HAL_RCC_GetSysClockFreq+0x188>)
 801d31e:	fba0 1202 	umull	r1, r2, r0, r2
 801d322:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d324:	460a      	mov	r2, r1
 801d326:	62ba      	str	r2, [r7, #40]	; 0x28
 801d328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d32a:	4413      	add	r3, r2
 801d32c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d330:	2200      	movs	r2, #0
 801d332:	61bb      	str	r3, [r7, #24]
 801d334:	61fa      	str	r2, [r7, #28]
 801d336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d33a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d33e:	f7e2 ffe7 	bl	8000310 <__aeabi_uldivmod>
 801d342:	4602      	mov	r2, r0
 801d344:	460b      	mov	r3, r1
 801d346:	4613      	mov	r3, r2
 801d348:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d34a:	e053      	b.n	801d3f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801d34c:	4b35      	ldr	r3, [pc, #212]	; (801d424 <HAL_RCC_GetSysClockFreq+0x180>)
 801d34e:	685b      	ldr	r3, [r3, #4]
 801d350:	099b      	lsrs	r3, r3, #6
 801d352:	2200      	movs	r2, #0
 801d354:	613b      	str	r3, [r7, #16]
 801d356:	617a      	str	r2, [r7, #20]
 801d358:	693b      	ldr	r3, [r7, #16]
 801d35a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801d35e:	f04f 0b00 	mov.w	fp, #0
 801d362:	4652      	mov	r2, sl
 801d364:	465b      	mov	r3, fp
 801d366:	f04f 0000 	mov.w	r0, #0
 801d36a:	f04f 0100 	mov.w	r1, #0
 801d36e:	0159      	lsls	r1, r3, #5
 801d370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801d374:	0150      	lsls	r0, r2, #5
 801d376:	4602      	mov	r2, r0
 801d378:	460b      	mov	r3, r1
 801d37a:	ebb2 080a 	subs.w	r8, r2, sl
 801d37e:	eb63 090b 	sbc.w	r9, r3, fp
 801d382:	f04f 0200 	mov.w	r2, #0
 801d386:	f04f 0300 	mov.w	r3, #0
 801d38a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801d38e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801d392:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801d396:	ebb2 0408 	subs.w	r4, r2, r8
 801d39a:	eb63 0509 	sbc.w	r5, r3, r9
 801d39e:	f04f 0200 	mov.w	r2, #0
 801d3a2:	f04f 0300 	mov.w	r3, #0
 801d3a6:	00eb      	lsls	r3, r5, #3
 801d3a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801d3ac:	00e2      	lsls	r2, r4, #3
 801d3ae:	4614      	mov	r4, r2
 801d3b0:	461d      	mov	r5, r3
 801d3b2:	eb14 030a 	adds.w	r3, r4, sl
 801d3b6:	603b      	str	r3, [r7, #0]
 801d3b8:	eb45 030b 	adc.w	r3, r5, fp
 801d3bc:	607b      	str	r3, [r7, #4]
 801d3be:	f04f 0200 	mov.w	r2, #0
 801d3c2:	f04f 0300 	mov.w	r3, #0
 801d3c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 801d3ca:	4629      	mov	r1, r5
 801d3cc:	028b      	lsls	r3, r1, #10
 801d3ce:	4621      	mov	r1, r4
 801d3d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801d3d4:	4621      	mov	r1, r4
 801d3d6:	028a      	lsls	r2, r1, #10
 801d3d8:	4610      	mov	r0, r2
 801d3da:	4619      	mov	r1, r3
 801d3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3de:	2200      	movs	r2, #0
 801d3e0:	60bb      	str	r3, [r7, #8]
 801d3e2:	60fa      	str	r2, [r7, #12]
 801d3e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d3e8:	f7e2 ff92 	bl	8000310 <__aeabi_uldivmod>
 801d3ec:	4602      	mov	r2, r0
 801d3ee:	460b      	mov	r3, r1
 801d3f0:	4613      	mov	r3, r2
 801d3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801d3f4:	4b0b      	ldr	r3, [pc, #44]	; (801d424 <HAL_RCC_GetSysClockFreq+0x180>)
 801d3f6:	685b      	ldr	r3, [r3, #4]
 801d3f8:	0c1b      	lsrs	r3, r3, #16
 801d3fa:	f003 0303 	and.w	r3, r3, #3
 801d3fe:	3301      	adds	r3, #1
 801d400:	005b      	lsls	r3, r3, #1
 801d402:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 801d404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d408:	fbb2 f3f3 	udiv	r3, r2, r3
 801d40c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801d40e:	e002      	b.n	801d416 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801d410:	4b05      	ldr	r3, [pc, #20]	; (801d428 <HAL_RCC_GetSysClockFreq+0x184>)
 801d412:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801d414:	bf00      	nop
    }
  }
  return sysclockfreq;
 801d416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801d418:	4618      	mov	r0, r3
 801d41a:	3740      	adds	r7, #64	; 0x40
 801d41c:	46bd      	mov	sp, r7
 801d41e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d422:	bf00      	nop
 801d424:	40023800 	.word	0x40023800
 801d428:	00f42400 	.word	0x00f42400
 801d42c:	00b71b00 	.word	0x00b71b00

0801d430 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d430:	b480      	push	{r7}
 801d432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801d434:	4b03      	ldr	r3, [pc, #12]	; (801d444 <HAL_RCC_GetHCLKFreq+0x14>)
 801d436:	681b      	ldr	r3, [r3, #0]
}
 801d438:	4618      	mov	r0, r3
 801d43a:	46bd      	mov	sp, r7
 801d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d440:	4770      	bx	lr
 801d442:	bf00      	nop
 801d444:	2000031c 	.word	0x2000031c

0801d448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d448:	b580      	push	{r7, lr}
 801d44a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801d44c:	f7ff fff0 	bl	801d430 <HAL_RCC_GetHCLKFreq>
 801d450:	4602      	mov	r2, r0
 801d452:	4b05      	ldr	r3, [pc, #20]	; (801d468 <HAL_RCC_GetPCLK1Freq+0x20>)
 801d454:	689b      	ldr	r3, [r3, #8]
 801d456:	0a9b      	lsrs	r3, r3, #10
 801d458:	f003 0307 	and.w	r3, r3, #7
 801d45c:	4903      	ldr	r1, [pc, #12]	; (801d46c <HAL_RCC_GetPCLK1Freq+0x24>)
 801d45e:	5ccb      	ldrb	r3, [r1, r3]
 801d460:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d464:	4618      	mov	r0, r3
 801d466:	bd80      	pop	{r7, pc}
 801d468:	40023800 	.word	0x40023800
 801d46c:	0802da1c 	.word	0x0802da1c

0801d470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d470:	b580      	push	{r7, lr}
 801d472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801d474:	f7ff ffdc 	bl	801d430 <HAL_RCC_GetHCLKFreq>
 801d478:	4602      	mov	r2, r0
 801d47a:	4b05      	ldr	r3, [pc, #20]	; (801d490 <HAL_RCC_GetPCLK2Freq+0x20>)
 801d47c:	689b      	ldr	r3, [r3, #8]
 801d47e:	0b5b      	lsrs	r3, r3, #13
 801d480:	f003 0307 	and.w	r3, r3, #7
 801d484:	4903      	ldr	r1, [pc, #12]	; (801d494 <HAL_RCC_GetPCLK2Freq+0x24>)
 801d486:	5ccb      	ldrb	r3, [r1, r3]
 801d488:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d48c:	4618      	mov	r0, r3
 801d48e:	bd80      	pop	{r7, pc}
 801d490:	40023800 	.word	0x40023800
 801d494:	0802da1c 	.word	0x0802da1c

0801d498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d498:	b580      	push	{r7, lr}
 801d49a:	b088      	sub	sp, #32
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 801d4a4:	2300      	movs	r3, #0
 801d4a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	f003 0301 	and.w	r3, r3, #1
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d012      	beq.n	801d4e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801d4c0:	4b69      	ldr	r3, [pc, #420]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d4c2:	689b      	ldr	r3, [r3, #8]
 801d4c4:	4a68      	ldr	r2, [pc, #416]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d4c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801d4ca:	6093      	str	r3, [r2, #8]
 801d4cc:	4b66      	ldr	r3, [pc, #408]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d4ce:	689a      	ldr	r2, [r3, #8]
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d4d4:	4964      	ldr	r1, [pc, #400]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d4d6:	4313      	orrs	r3, r2
 801d4d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801d4da:	687b      	ldr	r3, [r7, #4]
 801d4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d101      	bne.n	801d4e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801d4e2:	2301      	movs	r3, #1
 801d4e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d017      	beq.n	801d522 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d4f2:	4b5d      	ldr	r3, [pc, #372]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d4f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d4f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d500:	4959      	ldr	r1, [pc, #356]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d502:	4313      	orrs	r3, r2
 801d504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d50c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d510:	d101      	bne.n	801d516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801d512:	2301      	movs	r3, #1
 801d514:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d101      	bne.n	801d522 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801d51e:	2301      	movs	r3, #1
 801d520:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d017      	beq.n	801d55e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801d52e:	4b4e      	ldr	r3, [pc, #312]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d534:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d53c:	494a      	ldr	r1, [pc, #296]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d53e:	4313      	orrs	r3, r2
 801d540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d54c:	d101      	bne.n	801d552 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801d54e:	2301      	movs	r3, #1
 801d550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d556:	2b00      	cmp	r3, #0
 801d558:	d101      	bne.n	801d55e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801d55a:	2301      	movs	r3, #1
 801d55c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d566:	2b00      	cmp	r3, #0
 801d568:	d001      	beq.n	801d56e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801d56a:	2301      	movs	r3, #1
 801d56c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	f003 0320 	and.w	r3, r3, #32
 801d576:	2b00      	cmp	r3, #0
 801d578:	f000 808b 	beq.w	801d692 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801d57c:	4b3a      	ldr	r3, [pc, #232]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d580:	4a39      	ldr	r2, [pc, #228]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d586:	6413      	str	r3, [r2, #64]	; 0x40
 801d588:	4b37      	ldr	r3, [pc, #220]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d58c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d590:	60bb      	str	r3, [r7, #8]
 801d592:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801d594:	4b35      	ldr	r3, [pc, #212]	; (801d66c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	4a34      	ldr	r2, [pc, #208]	; (801d66c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801d59a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d59e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d5a0:	f7fb ff70 	bl	8019484 <HAL_GetTick>
 801d5a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801d5a6:	e008      	b.n	801d5ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d5a8:	f7fb ff6c 	bl	8019484 <HAL_GetTick>
 801d5ac:	4602      	mov	r2, r0
 801d5ae:	697b      	ldr	r3, [r7, #20]
 801d5b0:	1ad3      	subs	r3, r2, r3
 801d5b2:	2b64      	cmp	r3, #100	; 0x64
 801d5b4:	d901      	bls.n	801d5ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801d5b6:	2303      	movs	r3, #3
 801d5b8:	e38f      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801d5ba:	4b2c      	ldr	r3, [pc, #176]	; (801d66c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d0f0      	beq.n	801d5a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801d5c6:	4b28      	ldr	r3, [pc, #160]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d5ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d5ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801d5d0:	693b      	ldr	r3, [r7, #16]
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	d035      	beq.n	801d642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d5da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d5de:	693a      	ldr	r2, [r7, #16]
 801d5e0:	429a      	cmp	r2, r3
 801d5e2:	d02e      	beq.n	801d642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d5e4:	4b20      	ldr	r3, [pc, #128]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d5e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d5ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801d5ee:	4b1e      	ldr	r3, [pc, #120]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d5f2:	4a1d      	ldr	r2, [pc, #116]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d5f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d5f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801d5fa:	4b1b      	ldr	r3, [pc, #108]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d5fe:	4a1a      	ldr	r2, [pc, #104]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d604:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801d606:	4a18      	ldr	r2, [pc, #96]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d608:	693b      	ldr	r3, [r7, #16]
 801d60a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801d60c:	4b16      	ldr	r3, [pc, #88]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d610:	f003 0301 	and.w	r3, r3, #1
 801d614:	2b01      	cmp	r3, #1
 801d616:	d114      	bne.n	801d642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d618:	f7fb ff34 	bl	8019484 <HAL_GetTick>
 801d61c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d61e:	e00a      	b.n	801d636 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801d620:	f7fb ff30 	bl	8019484 <HAL_GetTick>
 801d624:	4602      	mov	r2, r0
 801d626:	697b      	ldr	r3, [r7, #20]
 801d628:	1ad3      	subs	r3, r2, r3
 801d62a:	f241 3288 	movw	r2, #5000	; 0x1388
 801d62e:	4293      	cmp	r3, r2
 801d630:	d901      	bls.n	801d636 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801d632:	2303      	movs	r3, #3
 801d634:	e351      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d636:	4b0c      	ldr	r3, [pc, #48]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d63a:	f003 0302 	and.w	r3, r3, #2
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d0ee      	beq.n	801d620 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d64a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d64e:	d111      	bne.n	801d674 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801d650:	4b05      	ldr	r3, [pc, #20]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d652:	689b      	ldr	r3, [r3, #8]
 801d654:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801d65c:	4b04      	ldr	r3, [pc, #16]	; (801d670 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801d65e:	400b      	ands	r3, r1
 801d660:	4901      	ldr	r1, [pc, #4]	; (801d668 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d662:	4313      	orrs	r3, r2
 801d664:	608b      	str	r3, [r1, #8]
 801d666:	e00b      	b.n	801d680 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801d668:	40023800 	.word	0x40023800
 801d66c:	40007000 	.word	0x40007000
 801d670:	0ffffcff 	.word	0x0ffffcff
 801d674:	4bac      	ldr	r3, [pc, #688]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d676:	689b      	ldr	r3, [r3, #8]
 801d678:	4aab      	ldr	r2, [pc, #684]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d67a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801d67e:	6093      	str	r3, [r2, #8]
 801d680:	4ba9      	ldr	r3, [pc, #676]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d682:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d68c:	49a6      	ldr	r1, [pc, #664]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d68e:	4313      	orrs	r3, r2
 801d690:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	f003 0310 	and.w	r3, r3, #16
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d010      	beq.n	801d6c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801d69e:	4ba2      	ldr	r3, [pc, #648]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d6a4:	4aa0      	ldr	r2, [pc, #640]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d6a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d6aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801d6ae:	4b9e      	ldr	r3, [pc, #632]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d6b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6b8:	499b      	ldr	r1, [pc, #620]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d6ba:	4313      	orrs	r3, r2
 801d6bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d00a      	beq.n	801d6e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d6cc:	4b96      	ldr	r3, [pc, #600]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d6da:	4993      	ldr	r1, [pc, #588]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d6dc:	4313      	orrs	r3, r2
 801d6de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	d00a      	beq.n	801d704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801d6ee:	4b8e      	ldr	r3, [pc, #568]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d6fc:	498a      	ldr	r1, [pc, #552]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d6fe:	4313      	orrs	r3, r2
 801d700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d00a      	beq.n	801d726 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d710:	4b85      	ldr	r3, [pc, #532]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d71e:	4982      	ldr	r1, [pc, #520]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d720:	4313      	orrs	r3, r2
 801d722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d00a      	beq.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d732:	4b7d      	ldr	r3, [pc, #500]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d738:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d740:	4979      	ldr	r1, [pc, #484]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d742:	4313      	orrs	r3, r2
 801d744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d750:	2b00      	cmp	r3, #0
 801d752:	d00a      	beq.n	801d76a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d754:	4b74      	ldr	r3, [pc, #464]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d75a:	f023 0203 	bic.w	r2, r3, #3
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d762:	4971      	ldr	r1, [pc, #452]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d764:	4313      	orrs	r3, r2
 801d766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d772:	2b00      	cmp	r3, #0
 801d774:	d00a      	beq.n	801d78c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801d776:	4b6c      	ldr	r3, [pc, #432]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d77c:	f023 020c 	bic.w	r2, r3, #12
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d784:	4968      	ldr	r1, [pc, #416]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d786:	4313      	orrs	r3, r2
 801d788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d794:	2b00      	cmp	r3, #0
 801d796:	d00a      	beq.n	801d7ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801d798:	4b63      	ldr	r3, [pc, #396]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d79e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d7a6:	4960      	ldr	r1, [pc, #384]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d7a8:	4313      	orrs	r3, r2
 801d7aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d00a      	beq.n	801d7d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801d7ba:	4b5b      	ldr	r3, [pc, #364]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d7c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d7c8:	4957      	ldr	r1, [pc, #348]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d7ca:	4313      	orrs	r3, r2
 801d7cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	681b      	ldr	r3, [r3, #0]
 801d7d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	d00a      	beq.n	801d7f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801d7dc:	4b52      	ldr	r3, [pc, #328]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d7e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d7ea:	494f      	ldr	r1, [pc, #316]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d7ec:	4313      	orrs	r3, r2
 801d7ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d00a      	beq.n	801d814 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801d7fe:	4b4a      	ldr	r3, [pc, #296]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d804:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d80c:	4946      	ldr	r1, [pc, #280]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d80e:	4313      	orrs	r3, r2
 801d810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d00a      	beq.n	801d836 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801d820:	4b41      	ldr	r3, [pc, #260]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d826:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d82e:	493e      	ldr	r1, [pc, #248]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d830:	4313      	orrs	r3, r2
 801d832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d00a      	beq.n	801d858 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801d842:	4b39      	ldr	r3, [pc, #228]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d848:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d850:	4935      	ldr	r1, [pc, #212]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d852:	4313      	orrs	r3, r2
 801d854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d860:	2b00      	cmp	r3, #0
 801d862:	d00a      	beq.n	801d87a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801d864:	4b30      	ldr	r3, [pc, #192]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d86a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d872:	492d      	ldr	r1, [pc, #180]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d874:	4313      	orrs	r3, r2
 801d876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d882:	2b00      	cmp	r3, #0
 801d884:	d011      	beq.n	801d8aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801d886:	4b28      	ldr	r3, [pc, #160]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d88c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d894:	4924      	ldr	r1, [pc, #144]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d896:	4313      	orrs	r3, r2
 801d898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d8a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d8a4:	d101      	bne.n	801d8aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801d8a6:	2301      	movs	r3, #1
 801d8a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	f003 0308 	and.w	r3, r3, #8
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	d001      	beq.n	801d8ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801d8b6:	2301      	movs	r3, #1
 801d8b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d00a      	beq.n	801d8dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d8c6:	4b18      	ldr	r3, [pc, #96]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d8cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d8d4:	4914      	ldr	r1, [pc, #80]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d8d6:	4313      	orrs	r3, r2
 801d8d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d00b      	beq.n	801d900 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801d8e8:	4b0f      	ldr	r3, [pc, #60]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d8ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d8f8:	490b      	ldr	r1, [pc, #44]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d8fa:	4313      	orrs	r3, r2
 801d8fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d00f      	beq.n	801d92c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 801d90c:	4b06      	ldr	r3, [pc, #24]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d912:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d91c:	4902      	ldr	r1, [pc, #8]	; (801d928 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d91e:	4313      	orrs	r3, r2
 801d920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801d924:	e002      	b.n	801d92c <HAL_RCCEx_PeriphCLKConfig+0x494>
 801d926:	bf00      	nop
 801d928:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d934:	2b00      	cmp	r3, #0
 801d936:	d00b      	beq.n	801d950 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d938:	4b8a      	ldr	r3, [pc, #552]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d93e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d948:	4986      	ldr	r1, [pc, #536]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d94a:	4313      	orrs	r3, r2
 801d94c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	681b      	ldr	r3, [r3, #0]
 801d954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d00b      	beq.n	801d974 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801d95c:	4b81      	ldr	r3, [pc, #516]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d962:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d96c:	497d      	ldr	r1, [pc, #500]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d96e:	4313      	orrs	r3, r2
 801d970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801d974:	69fb      	ldr	r3, [r7, #28]
 801d976:	2b01      	cmp	r3, #1
 801d978:	d006      	beq.n	801d988 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d982:	2b00      	cmp	r3, #0
 801d984:	f000 80d6 	beq.w	801db34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801d988:	4b76      	ldr	r3, [pc, #472]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	4a75      	ldr	r2, [pc, #468]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d98e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d994:	f7fb fd76 	bl	8019484 <HAL_GetTick>
 801d998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801d99a:	e008      	b.n	801d9ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801d99c:	f7fb fd72 	bl	8019484 <HAL_GetTick>
 801d9a0:	4602      	mov	r2, r0
 801d9a2:	697b      	ldr	r3, [r7, #20]
 801d9a4:	1ad3      	subs	r3, r2, r3
 801d9a6:	2b64      	cmp	r3, #100	; 0x64
 801d9a8:	d901      	bls.n	801d9ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801d9aa:	2303      	movs	r3, #3
 801d9ac:	e195      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801d9ae:	4b6d      	ldr	r3, [pc, #436]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d1f0      	bne.n	801d99c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	f003 0301 	and.w	r3, r3, #1
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d021      	beq.n	801da0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d11d      	bne.n	801da0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801d9ce:	4b65      	ldr	r3, [pc, #404]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d9d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d9d4:	0c1b      	lsrs	r3, r3, #16
 801d9d6:	f003 0303 	and.w	r3, r3, #3
 801d9da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801d9dc:	4b61      	ldr	r3, [pc, #388]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d9e2:	0e1b      	lsrs	r3, r3, #24
 801d9e4:	f003 030f 	and.w	r3, r3, #15
 801d9e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	685b      	ldr	r3, [r3, #4]
 801d9ee:	019a      	lsls	r2, r3, #6
 801d9f0:	693b      	ldr	r3, [r7, #16]
 801d9f2:	041b      	lsls	r3, r3, #16
 801d9f4:	431a      	orrs	r2, r3
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	061b      	lsls	r3, r3, #24
 801d9fa:	431a      	orrs	r2, r3
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	689b      	ldr	r3, [r3, #8]
 801da00:	071b      	lsls	r3, r3, #28
 801da02:	4958      	ldr	r1, [pc, #352]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801da04:	4313      	orrs	r3, r2
 801da06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801da12:	2b00      	cmp	r3, #0
 801da14:	d004      	beq.n	801da20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801da1e:	d00a      	beq.n	801da36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	681b      	ldr	r3, [r3, #0]
 801da24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801da28:	2b00      	cmp	r3, #0
 801da2a:	d02e      	beq.n	801da8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801da34:	d129      	bne.n	801da8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801da36:	4b4b      	ldr	r3, [pc, #300]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801da38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801da3c:	0c1b      	lsrs	r3, r3, #16
 801da3e:	f003 0303 	and.w	r3, r3, #3
 801da42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801da44:	4b47      	ldr	r3, [pc, #284]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801da46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801da4a:	0f1b      	lsrs	r3, r3, #28
 801da4c:	f003 0307 	and.w	r3, r3, #7
 801da50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	685b      	ldr	r3, [r3, #4]
 801da56:	019a      	lsls	r2, r3, #6
 801da58:	693b      	ldr	r3, [r7, #16]
 801da5a:	041b      	lsls	r3, r3, #16
 801da5c:	431a      	orrs	r2, r3
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	68db      	ldr	r3, [r3, #12]
 801da62:	061b      	lsls	r3, r3, #24
 801da64:	431a      	orrs	r2, r3
 801da66:	68fb      	ldr	r3, [r7, #12]
 801da68:	071b      	lsls	r3, r3, #28
 801da6a:	493e      	ldr	r1, [pc, #248]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801da6c:	4313      	orrs	r3, r2
 801da6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801da72:	4b3c      	ldr	r3, [pc, #240]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801da74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801da78:	f023 021f 	bic.w	r2, r3, #31
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da80:	3b01      	subs	r3, #1
 801da82:	4938      	ldr	r1, [pc, #224]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801da84:	4313      	orrs	r3, r2
 801da86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	681b      	ldr	r3, [r3, #0]
 801da8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801da92:	2b00      	cmp	r3, #0
 801da94:	d01d      	beq.n	801dad2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801da96:	4b33      	ldr	r3, [pc, #204]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801da98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801da9c:	0e1b      	lsrs	r3, r3, #24
 801da9e:	f003 030f 	and.w	r3, r3, #15
 801daa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801daa4:	4b2f      	ldr	r3, [pc, #188]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801daa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801daaa:	0f1b      	lsrs	r3, r3, #28
 801daac:	f003 0307 	and.w	r3, r3, #7
 801dab0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	685b      	ldr	r3, [r3, #4]
 801dab6:	019a      	lsls	r2, r3, #6
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	691b      	ldr	r3, [r3, #16]
 801dabc:	041b      	lsls	r3, r3, #16
 801dabe:	431a      	orrs	r2, r3
 801dac0:	693b      	ldr	r3, [r7, #16]
 801dac2:	061b      	lsls	r3, r3, #24
 801dac4:	431a      	orrs	r2, r3
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	071b      	lsls	r3, r3, #28
 801daca:	4926      	ldr	r1, [pc, #152]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801dacc:	4313      	orrs	r3, r2
 801dace:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d011      	beq.n	801db02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	685b      	ldr	r3, [r3, #4]
 801dae2:	019a      	lsls	r2, r3, #6
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	691b      	ldr	r3, [r3, #16]
 801dae8:	041b      	lsls	r3, r3, #16
 801daea:	431a      	orrs	r2, r3
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	68db      	ldr	r3, [r3, #12]
 801daf0:	061b      	lsls	r3, r3, #24
 801daf2:	431a      	orrs	r2, r3
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	689b      	ldr	r3, [r3, #8]
 801daf8:	071b      	lsls	r3, r3, #28
 801dafa:	491a      	ldr	r1, [pc, #104]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801dafc:	4313      	orrs	r3, r2
 801dafe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801db02:	4b18      	ldr	r3, [pc, #96]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801db04:	681b      	ldr	r3, [r3, #0]
 801db06:	4a17      	ldr	r2, [pc, #92]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801db08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801db0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801db0e:	f7fb fcb9 	bl	8019484 <HAL_GetTick>
 801db12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801db14:	e008      	b.n	801db28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801db16:	f7fb fcb5 	bl	8019484 <HAL_GetTick>
 801db1a:	4602      	mov	r2, r0
 801db1c:	697b      	ldr	r3, [r7, #20]
 801db1e:	1ad3      	subs	r3, r2, r3
 801db20:	2b64      	cmp	r3, #100	; 0x64
 801db22:	d901      	bls.n	801db28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801db24:	2303      	movs	r3, #3
 801db26:	e0d8      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801db28:	4b0e      	ldr	r3, [pc, #56]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801db30:	2b00      	cmp	r3, #0
 801db32:	d0f0      	beq.n	801db16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801db34:	69bb      	ldr	r3, [r7, #24]
 801db36:	2b01      	cmp	r3, #1
 801db38:	f040 80ce 	bne.w	801dcd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801db3c:	4b09      	ldr	r3, [pc, #36]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801db3e:	681b      	ldr	r3, [r3, #0]
 801db40:	4a08      	ldr	r2, [pc, #32]	; (801db64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801db42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801db46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801db48:	f7fb fc9c 	bl	8019484 <HAL_GetTick>
 801db4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801db4e:	e00b      	b.n	801db68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801db50:	f7fb fc98 	bl	8019484 <HAL_GetTick>
 801db54:	4602      	mov	r2, r0
 801db56:	697b      	ldr	r3, [r7, #20]
 801db58:	1ad3      	subs	r3, r2, r3
 801db5a:	2b64      	cmp	r3, #100	; 0x64
 801db5c:	d904      	bls.n	801db68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801db5e:	2303      	movs	r3, #3
 801db60:	e0bb      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x842>
 801db62:	bf00      	nop
 801db64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801db68:	4b5e      	ldr	r3, [pc, #376]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801db70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801db74:	d0ec      	beq.n	801db50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d003      	beq.n	801db8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db86:	2b00      	cmp	r3, #0
 801db88:	d009      	beq.n	801db9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	681b      	ldr	r3, [r3, #0]
 801db8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801db92:	2b00      	cmp	r3, #0
 801db94:	d02e      	beq.n	801dbf4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d12a      	bne.n	801dbf4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801db9e:	4b51      	ldr	r3, [pc, #324]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dba4:	0c1b      	lsrs	r3, r3, #16
 801dba6:	f003 0303 	and.w	r3, r3, #3
 801dbaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801dbac:	4b4d      	ldr	r3, [pc, #308]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dbae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dbb2:	0f1b      	lsrs	r3, r3, #28
 801dbb4:	f003 0307 	and.w	r3, r3, #7
 801dbb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	695b      	ldr	r3, [r3, #20]
 801dbbe:	019a      	lsls	r2, r3, #6
 801dbc0:	693b      	ldr	r3, [r7, #16]
 801dbc2:	041b      	lsls	r3, r3, #16
 801dbc4:	431a      	orrs	r2, r3
 801dbc6:	687b      	ldr	r3, [r7, #4]
 801dbc8:	699b      	ldr	r3, [r3, #24]
 801dbca:	061b      	lsls	r3, r3, #24
 801dbcc:	431a      	orrs	r2, r3
 801dbce:	68fb      	ldr	r3, [r7, #12]
 801dbd0:	071b      	lsls	r3, r3, #28
 801dbd2:	4944      	ldr	r1, [pc, #272]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dbd4:	4313      	orrs	r3, r2
 801dbd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801dbda:	4b42      	ldr	r3, [pc, #264]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dbdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dbe0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbe8:	3b01      	subs	r3, #1
 801dbea:	021b      	lsls	r3, r3, #8
 801dbec:	493d      	ldr	r1, [pc, #244]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dbee:	4313      	orrs	r3, r2
 801dbf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	681b      	ldr	r3, [r3, #0]
 801dbf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d022      	beq.n	801dc46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801dc04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801dc08:	d11d      	bne.n	801dc46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801dc0a:	4b36      	ldr	r3, [pc, #216]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dc0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dc10:	0e1b      	lsrs	r3, r3, #24
 801dc12:	f003 030f 	and.w	r3, r3, #15
 801dc16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801dc18:	4b32      	ldr	r3, [pc, #200]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dc1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dc1e:	0f1b      	lsrs	r3, r3, #28
 801dc20:	f003 0307 	and.w	r3, r3, #7
 801dc24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	695b      	ldr	r3, [r3, #20]
 801dc2a:	019a      	lsls	r2, r3, #6
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	6a1b      	ldr	r3, [r3, #32]
 801dc30:	041b      	lsls	r3, r3, #16
 801dc32:	431a      	orrs	r2, r3
 801dc34:	693b      	ldr	r3, [r7, #16]
 801dc36:	061b      	lsls	r3, r3, #24
 801dc38:	431a      	orrs	r2, r3
 801dc3a:	68fb      	ldr	r3, [r7, #12]
 801dc3c:	071b      	lsls	r3, r3, #28
 801dc3e:	4929      	ldr	r1, [pc, #164]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dc40:	4313      	orrs	r3, r2
 801dc42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	f003 0308 	and.w	r3, r3, #8
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d028      	beq.n	801dca4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801dc52:	4b24      	ldr	r3, [pc, #144]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dc54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dc58:	0e1b      	lsrs	r3, r3, #24
 801dc5a:	f003 030f 	and.w	r3, r3, #15
 801dc5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801dc60:	4b20      	ldr	r3, [pc, #128]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dc62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dc66:	0c1b      	lsrs	r3, r3, #16
 801dc68:	f003 0303 	and.w	r3, r3, #3
 801dc6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	695b      	ldr	r3, [r3, #20]
 801dc72:	019a      	lsls	r2, r3, #6
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	041b      	lsls	r3, r3, #16
 801dc78:	431a      	orrs	r2, r3
 801dc7a:	693b      	ldr	r3, [r7, #16]
 801dc7c:	061b      	lsls	r3, r3, #24
 801dc7e:	431a      	orrs	r2, r3
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	69db      	ldr	r3, [r3, #28]
 801dc84:	071b      	lsls	r3, r3, #28
 801dc86:	4917      	ldr	r1, [pc, #92]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dc88:	4313      	orrs	r3, r2
 801dc8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801dc8e:	4b15      	ldr	r3, [pc, #84]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dc90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dc94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc9c:	4911      	ldr	r1, [pc, #68]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dc9e:	4313      	orrs	r3, r2
 801dca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801dca4:	4b0f      	ldr	r3, [pc, #60]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	4a0e      	ldr	r2, [pc, #56]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dcaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801dcae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801dcb0:	f7fb fbe8 	bl	8019484 <HAL_GetTick>
 801dcb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801dcb6:	e008      	b.n	801dcca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801dcb8:	f7fb fbe4 	bl	8019484 <HAL_GetTick>
 801dcbc:	4602      	mov	r2, r0
 801dcbe:	697b      	ldr	r3, [r7, #20]
 801dcc0:	1ad3      	subs	r3, r2, r3
 801dcc2:	2b64      	cmp	r3, #100	; 0x64
 801dcc4:	d901      	bls.n	801dcca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801dcc6:	2303      	movs	r3, #3
 801dcc8:	e007      	b.n	801dcda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801dcca:	4b06      	ldr	r3, [pc, #24]	; (801dce4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801dcd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801dcd6:	d1ef      	bne.n	801dcb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801dcd8:	2300      	movs	r3, #0
}
 801dcda:	4618      	mov	r0, r3
 801dcdc:	3720      	adds	r7, #32
 801dcde:	46bd      	mov	sp, r7
 801dce0:	bd80      	pop	{r7, pc}
 801dce2:	bf00      	nop
 801dce4:	40023800 	.word	0x40023800

0801dce8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801dce8:	b580      	push	{r7, lr}
 801dcea:	b082      	sub	sp, #8
 801dcec:	af00      	add	r7, sp, #0
 801dcee:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d101      	bne.n	801dcfa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801dcf6:	2301      	movs	r3, #1
 801dcf8:	e01c      	b.n	801dd34 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	795b      	ldrb	r3, [r3, #5]
 801dcfe:	b2db      	uxtb	r3, r3
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d105      	bne.n	801dd10 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	2200      	movs	r2, #0
 801dd08:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801dd0a:	6878      	ldr	r0, [r7, #4]
 801dd0c:	f7f9 fdda 	bl	80178c4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	2202      	movs	r2, #2
 801dd14:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	681a      	ldr	r2, [r3, #0]
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	f042 0204 	orr.w	r2, r2, #4
 801dd24:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	2201      	movs	r2, #1
 801dd2a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	2200      	movs	r2, #0
 801dd30:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801dd32:	2300      	movs	r3, #0
}
 801dd34:	4618      	mov	r0, r3
 801dd36:	3708      	adds	r7, #8
 801dd38:	46bd      	mov	sp, r7
 801dd3a:	bd80      	pop	{r7, pc}

0801dd3c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801dd3c:	b580      	push	{r7, lr}
 801dd3e:	b084      	sub	sp, #16
 801dd40:	af00      	add	r7, sp, #0
 801dd42:	6078      	str	r0, [r7, #4]
 801dd44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801dd46:	2300      	movs	r3, #0
 801dd48:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	791b      	ldrb	r3, [r3, #4]
 801dd4e:	2b01      	cmp	r3, #1
 801dd50:	d101      	bne.n	801dd56 <HAL_RNG_GenerateRandomNumber+0x1a>
 801dd52:	2302      	movs	r3, #2
 801dd54:	e044      	b.n	801dde0 <HAL_RNG_GenerateRandomNumber+0xa4>
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	2201      	movs	r2, #1
 801dd5a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	795b      	ldrb	r3, [r3, #5]
 801dd60:	b2db      	uxtb	r3, r3
 801dd62:	2b01      	cmp	r3, #1
 801dd64:	d133      	bne.n	801ddce <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	2202      	movs	r2, #2
 801dd6a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801dd6c:	f7fb fb8a 	bl	8019484 <HAL_GetTick>
 801dd70:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801dd72:	e018      	b.n	801dda6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801dd74:	f7fb fb86 	bl	8019484 <HAL_GetTick>
 801dd78:	4602      	mov	r2, r0
 801dd7a:	68bb      	ldr	r3, [r7, #8]
 801dd7c:	1ad3      	subs	r3, r2, r3
 801dd7e:	2b02      	cmp	r3, #2
 801dd80:	d911      	bls.n	801dda6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	685b      	ldr	r3, [r3, #4]
 801dd88:	f003 0301 	and.w	r3, r3, #1
 801dd8c:	2b01      	cmp	r3, #1
 801dd8e:	d00a      	beq.n	801dda6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	2201      	movs	r2, #1
 801dd94:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	2202      	movs	r2, #2
 801dd9a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	2200      	movs	r2, #0
 801dda0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801dda2:	2301      	movs	r3, #1
 801dda4:	e01c      	b.n	801dde0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	685b      	ldr	r3, [r3, #4]
 801ddac:	f003 0301 	and.w	r3, r3, #1
 801ddb0:	2b01      	cmp	r3, #1
 801ddb2:	d1df      	bne.n	801dd74 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	689a      	ldr	r2, [r3, #8]
 801ddba:	687b      	ldr	r3, [r7, #4]
 801ddbc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	68da      	ldr	r2, [r3, #12]
 801ddc2:	683b      	ldr	r3, [r7, #0]
 801ddc4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	2201      	movs	r2, #1
 801ddca:	715a      	strb	r2, [r3, #5]
 801ddcc:	e004      	b.n	801ddd8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	2204      	movs	r2, #4
 801ddd2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801ddd4:	2301      	movs	r3, #1
 801ddd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	2200      	movs	r2, #0
 801dddc:	711a      	strb	r2, [r3, #4]

  return status;
 801ddde:	7bfb      	ldrb	r3, [r7, #15]
}
 801dde0:	4618      	mov	r0, r3
 801dde2:	3710      	adds	r7, #16
 801dde4:	46bd      	mov	sp, r7
 801dde6:	bd80      	pop	{r7, pc}

0801dde8 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801dde8:	b580      	push	{r7, lr}
 801ddea:	b082      	sub	sp, #8
 801ddec:	af00      	add	r7, sp, #0
 801ddee:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	330c      	adds	r3, #12
 801ddf4:	4619      	mov	r1, r3
 801ddf6:	6878      	ldr	r0, [r7, #4]
 801ddf8:	f7ff ffa0 	bl	801dd3c <HAL_RNG_GenerateRandomNumber>
 801ddfc:	4603      	mov	r3, r0
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	d102      	bne.n	801de08 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	68db      	ldr	r3, [r3, #12]
 801de06:	e000      	b.n	801de0a <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801de08:	2300      	movs	r3, #0
  }
}
 801de0a:	4618      	mov	r0, r3
 801de0c:	3708      	adds	r7, #8
 801de0e:	46bd      	mov	sp, r7
 801de10:	bd80      	pop	{r7, pc}

0801de12 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801de12:	b580      	push	{r7, lr}
 801de14:	b084      	sub	sp, #16
 801de16:	af00      	add	r7, sp, #0
 801de18:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d101      	bne.n	801de24 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801de20:	2301      	movs	r3, #1
 801de22:	e09d      	b.n	801df60 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d108      	bne.n	801de3e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	685b      	ldr	r3, [r3, #4]
 801de30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801de34:	d009      	beq.n	801de4a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	2200      	movs	r2, #0
 801de3a:	61da      	str	r2, [r3, #28]
 801de3c:	e005      	b.n	801de4a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	2200      	movs	r2, #0
 801de42:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	2200      	movs	r2, #0
 801de48:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	2200      	movs	r2, #0
 801de4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801de56:	b2db      	uxtb	r3, r3
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d106      	bne.n	801de6a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	2200      	movs	r2, #0
 801de60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801de64:	6878      	ldr	r0, [r7, #4]
 801de66:	f7f9 fdb5 	bl	80179d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	2202      	movs	r2, #2
 801de6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	681b      	ldr	r3, [r3, #0]
 801de76:	681a      	ldr	r2, [r3, #0]
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801de80:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	68db      	ldr	r3, [r3, #12]
 801de86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801de8a:	d902      	bls.n	801de92 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801de8c:	2300      	movs	r3, #0
 801de8e:	60fb      	str	r3, [r7, #12]
 801de90:	e002      	b.n	801de98 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801de92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801de96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	68db      	ldr	r3, [r3, #12]
 801de9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801dea0:	d007      	beq.n	801deb2 <HAL_SPI_Init+0xa0>
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	68db      	ldr	r3, [r3, #12]
 801dea6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801deaa:	d002      	beq.n	801deb2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	2200      	movs	r2, #0
 801deb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	685b      	ldr	r3, [r3, #4]
 801deb6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	689b      	ldr	r3, [r3, #8]
 801debe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801dec2:	431a      	orrs	r2, r3
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	691b      	ldr	r3, [r3, #16]
 801dec8:	f003 0302 	and.w	r3, r3, #2
 801decc:	431a      	orrs	r2, r3
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	695b      	ldr	r3, [r3, #20]
 801ded2:	f003 0301 	and.w	r3, r3, #1
 801ded6:	431a      	orrs	r2, r3
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	699b      	ldr	r3, [r3, #24]
 801dedc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801dee0:	431a      	orrs	r2, r3
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	69db      	ldr	r3, [r3, #28]
 801dee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801deea:	431a      	orrs	r2, r3
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	6a1b      	ldr	r3, [r3, #32]
 801def0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801def4:	ea42 0103 	orr.w	r1, r2, r3
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801defc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	681b      	ldr	r3, [r3, #0]
 801df04:	430a      	orrs	r2, r1
 801df06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	699b      	ldr	r3, [r3, #24]
 801df0c:	0c1b      	lsrs	r3, r3, #16
 801df0e:	f003 0204 	and.w	r2, r3, #4
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df16:	f003 0310 	and.w	r3, r3, #16
 801df1a:	431a      	orrs	r2, r3
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df20:	f003 0308 	and.w	r3, r3, #8
 801df24:	431a      	orrs	r2, r3
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	68db      	ldr	r3, [r3, #12]
 801df2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801df2e:	ea42 0103 	orr.w	r1, r2, r3
 801df32:	68fb      	ldr	r3, [r7, #12]
 801df34:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	681b      	ldr	r3, [r3, #0]
 801df3c:	430a      	orrs	r2, r1
 801df3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	69da      	ldr	r2, [r3, #28]
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801df4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	2200      	movs	r2, #0
 801df54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	2201      	movs	r2, #1
 801df5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801df5e:	2300      	movs	r3, #0
}
 801df60:	4618      	mov	r0, r3
 801df62:	3710      	adds	r7, #16
 801df64:	46bd      	mov	sp, r7
 801df66:	bd80      	pop	{r7, pc}

0801df68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	b088      	sub	sp, #32
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	60f8      	str	r0, [r7, #12]
 801df70:	60b9      	str	r1, [r7, #8]
 801df72:	603b      	str	r3, [r7, #0]
 801df74:	4613      	mov	r3, r2
 801df76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801df78:	2300      	movs	r3, #0
 801df7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801df7c:	68fb      	ldr	r3, [r7, #12]
 801df7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801df82:	2b01      	cmp	r3, #1
 801df84:	d101      	bne.n	801df8a <HAL_SPI_Transmit+0x22>
 801df86:	2302      	movs	r3, #2
 801df88:	e158      	b.n	801e23c <HAL_SPI_Transmit+0x2d4>
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	2201      	movs	r2, #1
 801df8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801df92:	f7fb fa77 	bl	8019484 <HAL_GetTick>
 801df96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801df98:	88fb      	ldrh	r3, [r7, #6]
 801df9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801dfa2:	b2db      	uxtb	r3, r3
 801dfa4:	2b01      	cmp	r3, #1
 801dfa6:	d002      	beq.n	801dfae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801dfa8:	2302      	movs	r3, #2
 801dfaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dfac:	e13d      	b.n	801e22a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801dfae:	68bb      	ldr	r3, [r7, #8]
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d002      	beq.n	801dfba <HAL_SPI_Transmit+0x52>
 801dfb4:	88fb      	ldrh	r3, [r7, #6]
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d102      	bne.n	801dfc0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801dfba:	2301      	movs	r3, #1
 801dfbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dfbe:	e134      	b.n	801e22a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801dfc0:	68fb      	ldr	r3, [r7, #12]
 801dfc2:	2203      	movs	r2, #3
 801dfc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	2200      	movs	r2, #0
 801dfcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801dfce:	68fb      	ldr	r3, [r7, #12]
 801dfd0:	68ba      	ldr	r2, [r7, #8]
 801dfd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801dfd4:	68fb      	ldr	r3, [r7, #12]
 801dfd6:	88fa      	ldrh	r2, [r7, #6]
 801dfd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	88fa      	ldrh	r2, [r7, #6]
 801dfde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	2200      	movs	r2, #0
 801dfe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801dfe6:	68fb      	ldr	r3, [r7, #12]
 801dfe8:	2200      	movs	r2, #0
 801dfea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801dfee:	68fb      	ldr	r3, [r7, #12]
 801dff0:	2200      	movs	r2, #0
 801dff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	2200      	movs	r2, #0
 801dffa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801dffc:	68fb      	ldr	r3, [r7, #12]
 801dffe:	2200      	movs	r2, #0
 801e000:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e002:	68fb      	ldr	r3, [r7, #12]
 801e004:	689b      	ldr	r3, [r3, #8]
 801e006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e00a:	d10f      	bne.n	801e02c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	681a      	ldr	r2, [r3, #0]
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e01a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	681a      	ldr	r2, [r3, #0]
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e02a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	681b      	ldr	r3, [r3, #0]
 801e032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e036:	2b40      	cmp	r3, #64	; 0x40
 801e038:	d007      	beq.n	801e04a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	681a      	ldr	r2, [r3, #0]
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e04a:	68fb      	ldr	r3, [r7, #12]
 801e04c:	68db      	ldr	r3, [r3, #12]
 801e04e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e052:	d94b      	bls.n	801e0ec <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	685b      	ldr	r3, [r3, #4]
 801e058:	2b00      	cmp	r3, #0
 801e05a:	d002      	beq.n	801e062 <HAL_SPI_Transmit+0xfa>
 801e05c:	8afb      	ldrh	r3, [r7, #22]
 801e05e:	2b01      	cmp	r3, #1
 801e060:	d13e      	bne.n	801e0e0 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e066:	881a      	ldrh	r2, [r3, #0]
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e072:	1c9a      	adds	r2, r3, #2
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e07c:	b29b      	uxth	r3, r3
 801e07e:	3b01      	subs	r3, #1
 801e080:	b29a      	uxth	r2, r3
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801e086:	e02b      	b.n	801e0e0 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e088:	68fb      	ldr	r3, [r7, #12]
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	689b      	ldr	r3, [r3, #8]
 801e08e:	f003 0302 	and.w	r3, r3, #2
 801e092:	2b02      	cmp	r3, #2
 801e094:	d112      	bne.n	801e0bc <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e09a:	881a      	ldrh	r2, [r3, #0]
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	681b      	ldr	r3, [r3, #0]
 801e0a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e0a6:	1c9a      	adds	r2, r3, #2
 801e0a8:	68fb      	ldr	r3, [r7, #12]
 801e0aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e0b0:	b29b      	uxth	r3, r3
 801e0b2:	3b01      	subs	r3, #1
 801e0b4:	b29a      	uxth	r2, r3
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e0ba:	e011      	b.n	801e0e0 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e0bc:	f7fb f9e2 	bl	8019484 <HAL_GetTick>
 801e0c0:	4602      	mov	r2, r0
 801e0c2:	69bb      	ldr	r3, [r7, #24]
 801e0c4:	1ad3      	subs	r3, r2, r3
 801e0c6:	683a      	ldr	r2, [r7, #0]
 801e0c8:	429a      	cmp	r2, r3
 801e0ca:	d803      	bhi.n	801e0d4 <HAL_SPI_Transmit+0x16c>
 801e0cc:	683b      	ldr	r3, [r7, #0]
 801e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0d2:	d102      	bne.n	801e0da <HAL_SPI_Transmit+0x172>
 801e0d4:	683b      	ldr	r3, [r7, #0]
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	d102      	bne.n	801e0e0 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801e0da:	2303      	movs	r3, #3
 801e0dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e0de:	e0a4      	b.n	801e22a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e0e4:	b29b      	uxth	r3, r3
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d1ce      	bne.n	801e088 <HAL_SPI_Transmit+0x120>
 801e0ea:	e07c      	b.n	801e1e6 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	685b      	ldr	r3, [r3, #4]
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d002      	beq.n	801e0fa <HAL_SPI_Transmit+0x192>
 801e0f4:	8afb      	ldrh	r3, [r7, #22]
 801e0f6:	2b01      	cmp	r3, #1
 801e0f8:	d170      	bne.n	801e1dc <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801e0fa:	68fb      	ldr	r3, [r7, #12]
 801e0fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e0fe:	b29b      	uxth	r3, r3
 801e100:	2b01      	cmp	r3, #1
 801e102:	d912      	bls.n	801e12a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e108:	881a      	ldrh	r2, [r3, #0]
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e114:	1c9a      	adds	r2, r3, #2
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e11a:	68fb      	ldr	r3, [r7, #12]
 801e11c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e11e:	b29b      	uxth	r3, r3
 801e120:	3b02      	subs	r3, #2
 801e122:	b29a      	uxth	r2, r3
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e128:	e058      	b.n	801e1dc <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	330c      	adds	r3, #12
 801e134:	7812      	ldrb	r2, [r2, #0]
 801e136:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e13c:	1c5a      	adds	r2, r3, #1
 801e13e:	68fb      	ldr	r3, [r7, #12]
 801e140:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e142:	68fb      	ldr	r3, [r7, #12]
 801e144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e146:	b29b      	uxth	r3, r3
 801e148:	3b01      	subs	r3, #1
 801e14a:	b29a      	uxth	r2, r3
 801e14c:	68fb      	ldr	r3, [r7, #12]
 801e14e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801e150:	e044      	b.n	801e1dc <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	689b      	ldr	r3, [r3, #8]
 801e158:	f003 0302 	and.w	r3, r3, #2
 801e15c:	2b02      	cmp	r3, #2
 801e15e:	d12b      	bne.n	801e1b8 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e164:	b29b      	uxth	r3, r3
 801e166:	2b01      	cmp	r3, #1
 801e168:	d912      	bls.n	801e190 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e16a:	68fb      	ldr	r3, [r7, #12]
 801e16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e16e:	881a      	ldrh	r2, [r3, #0]
 801e170:	68fb      	ldr	r3, [r7, #12]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e17a:	1c9a      	adds	r2, r3, #2
 801e17c:	68fb      	ldr	r3, [r7, #12]
 801e17e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e184:	b29b      	uxth	r3, r3
 801e186:	3b02      	subs	r3, #2
 801e188:	b29a      	uxth	r2, r3
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e18e:	e025      	b.n	801e1dc <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e194:	68fb      	ldr	r3, [r7, #12]
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	330c      	adds	r3, #12
 801e19a:	7812      	ldrb	r2, [r2, #0]
 801e19c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1a2:	1c5a      	adds	r2, r3, #1
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e1ac:	b29b      	uxth	r3, r3
 801e1ae:	3b01      	subs	r3, #1
 801e1b0:	b29a      	uxth	r2, r3
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e1b6:	e011      	b.n	801e1dc <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e1b8:	f7fb f964 	bl	8019484 <HAL_GetTick>
 801e1bc:	4602      	mov	r2, r0
 801e1be:	69bb      	ldr	r3, [r7, #24]
 801e1c0:	1ad3      	subs	r3, r2, r3
 801e1c2:	683a      	ldr	r2, [r7, #0]
 801e1c4:	429a      	cmp	r2, r3
 801e1c6:	d803      	bhi.n	801e1d0 <HAL_SPI_Transmit+0x268>
 801e1c8:	683b      	ldr	r3, [r7, #0]
 801e1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e1ce:	d102      	bne.n	801e1d6 <HAL_SPI_Transmit+0x26e>
 801e1d0:	683b      	ldr	r3, [r7, #0]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d102      	bne.n	801e1dc <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801e1d6:	2303      	movs	r3, #3
 801e1d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e1da:	e026      	b.n	801e22a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e1e0:	b29b      	uxth	r3, r3
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d1b5      	bne.n	801e152 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e1e6:	69ba      	ldr	r2, [r7, #24]
 801e1e8:	6839      	ldr	r1, [r7, #0]
 801e1ea:	68f8      	ldr	r0, [r7, #12]
 801e1ec:	f000 fd08 	bl	801ec00 <SPI_EndRxTxTransaction>
 801e1f0:	4603      	mov	r3, r0
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d002      	beq.n	801e1fc <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	2220      	movs	r2, #32
 801e1fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801e1fc:	68fb      	ldr	r3, [r7, #12]
 801e1fe:	689b      	ldr	r3, [r3, #8]
 801e200:	2b00      	cmp	r3, #0
 801e202:	d10a      	bne.n	801e21a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e204:	2300      	movs	r3, #0
 801e206:	613b      	str	r3, [r7, #16]
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	68db      	ldr	r3, [r3, #12]
 801e20e:	613b      	str	r3, [r7, #16]
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	689b      	ldr	r3, [r3, #8]
 801e216:	613b      	str	r3, [r7, #16]
 801e218:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d002      	beq.n	801e228 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801e222:	2301      	movs	r3, #1
 801e224:	77fb      	strb	r3, [r7, #31]
 801e226:	e000      	b.n	801e22a <HAL_SPI_Transmit+0x2c2>
  }

error:
 801e228:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e22a:	68fb      	ldr	r3, [r7, #12]
 801e22c:	2201      	movs	r2, #1
 801e22e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801e232:	68fb      	ldr	r3, [r7, #12]
 801e234:	2200      	movs	r2, #0
 801e236:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e23a:	7ffb      	ldrb	r3, [r7, #31]
}
 801e23c:	4618      	mov	r0, r3
 801e23e:	3720      	adds	r7, #32
 801e240:	46bd      	mov	sp, r7
 801e242:	bd80      	pop	{r7, pc}

0801e244 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e244:	b580      	push	{r7, lr}
 801e246:	b088      	sub	sp, #32
 801e248:	af02      	add	r7, sp, #8
 801e24a:	60f8      	str	r0, [r7, #12]
 801e24c:	60b9      	str	r1, [r7, #8]
 801e24e:	603b      	str	r3, [r7, #0]
 801e250:	4613      	mov	r3, r2
 801e252:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801e254:	2300      	movs	r3, #0
 801e256:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801e258:	68fb      	ldr	r3, [r7, #12]
 801e25a:	685b      	ldr	r3, [r3, #4]
 801e25c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e260:	d112      	bne.n	801e288 <HAL_SPI_Receive+0x44>
 801e262:	68fb      	ldr	r3, [r7, #12]
 801e264:	689b      	ldr	r3, [r3, #8]
 801e266:	2b00      	cmp	r3, #0
 801e268:	d10e      	bne.n	801e288 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	2204      	movs	r2, #4
 801e26e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801e272:	88fa      	ldrh	r2, [r7, #6]
 801e274:	683b      	ldr	r3, [r7, #0]
 801e276:	9300      	str	r3, [sp, #0]
 801e278:	4613      	mov	r3, r2
 801e27a:	68ba      	ldr	r2, [r7, #8]
 801e27c:	68b9      	ldr	r1, [r7, #8]
 801e27e:	68f8      	ldr	r0, [r7, #12]
 801e280:	f000 f910 	bl	801e4a4 <HAL_SPI_TransmitReceive>
 801e284:	4603      	mov	r3, r0
 801e286:	e109      	b.n	801e49c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e28e:	2b01      	cmp	r3, #1
 801e290:	d101      	bne.n	801e296 <HAL_SPI_Receive+0x52>
 801e292:	2302      	movs	r3, #2
 801e294:	e102      	b.n	801e49c <HAL_SPI_Receive+0x258>
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	2201      	movs	r2, #1
 801e29a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e29e:	f7fb f8f1 	bl	8019484 <HAL_GetTick>
 801e2a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801e2a4:	68fb      	ldr	r3, [r7, #12]
 801e2a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e2aa:	b2db      	uxtb	r3, r3
 801e2ac:	2b01      	cmp	r3, #1
 801e2ae:	d002      	beq.n	801e2b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801e2b0:	2302      	movs	r3, #2
 801e2b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 801e2b4:	e0e9      	b.n	801e48a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801e2b6:	68bb      	ldr	r3, [r7, #8]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d002      	beq.n	801e2c2 <HAL_SPI_Receive+0x7e>
 801e2bc:	88fb      	ldrh	r3, [r7, #6]
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	d102      	bne.n	801e2c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801e2c2:	2301      	movs	r3, #1
 801e2c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 801e2c6:	e0e0      	b.n	801e48a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	2204      	movs	r2, #4
 801e2cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	2200      	movs	r2, #0
 801e2d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801e2d6:	68fb      	ldr	r3, [r7, #12]
 801e2d8:	68ba      	ldr	r2, [r7, #8]
 801e2da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801e2dc:	68fb      	ldr	r3, [r7, #12]
 801e2de:	88fa      	ldrh	r2, [r7, #6]
 801e2e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	88fa      	ldrh	r2, [r7, #6]
 801e2e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	2200      	movs	r2, #0
 801e2f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	2200      	movs	r2, #0
 801e2f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801e2f8:	68fb      	ldr	r3, [r7, #12]
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801e2fe:	68fb      	ldr	r3, [r7, #12]
 801e300:	2200      	movs	r2, #0
 801e302:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e304:	68fb      	ldr	r3, [r7, #12]
 801e306:	2200      	movs	r2, #0
 801e308:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	68db      	ldr	r3, [r3, #12]
 801e30e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e312:	d908      	bls.n	801e326 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	685a      	ldr	r2, [r3, #4]
 801e31a:	68fb      	ldr	r3, [r7, #12]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e322:	605a      	str	r2, [r3, #4]
 801e324:	e007      	b.n	801e336 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	685a      	ldr	r2, [r3, #4]
 801e32c:	68fb      	ldr	r3, [r7, #12]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e334:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e336:	68fb      	ldr	r3, [r7, #12]
 801e338:	689b      	ldr	r3, [r3, #8]
 801e33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e33e:	d10f      	bne.n	801e360 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	681a      	ldr	r2, [r3, #0]
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e34e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	681a      	ldr	r2, [r3, #0]
 801e356:	68fb      	ldr	r3, [r7, #12]
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801e35e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e36a:	2b40      	cmp	r3, #64	; 0x40
 801e36c:	d007      	beq.n	801e37e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	681a      	ldr	r2, [r3, #0]
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e37c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801e37e:	68fb      	ldr	r3, [r7, #12]
 801e380:	68db      	ldr	r3, [r3, #12]
 801e382:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e386:	d867      	bhi.n	801e458 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801e388:	e030      	b.n	801e3ec <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e38a:	68fb      	ldr	r3, [r7, #12]
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	689b      	ldr	r3, [r3, #8]
 801e390:	f003 0301 	and.w	r3, r3, #1
 801e394:	2b01      	cmp	r3, #1
 801e396:	d117      	bne.n	801e3c8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	681b      	ldr	r3, [r3, #0]
 801e39c:	f103 020c 	add.w	r2, r3, #12
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3a4:	7812      	ldrb	r2, [r2, #0]
 801e3a6:	b2d2      	uxtb	r2, r2
 801e3a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3ae:	1c5a      	adds	r2, r3, #1
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e3ba:	b29b      	uxth	r3, r3
 801e3bc:	3b01      	subs	r3, #1
 801e3be:	b29a      	uxth	r2, r3
 801e3c0:	68fb      	ldr	r3, [r7, #12]
 801e3c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e3c6:	e011      	b.n	801e3ec <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e3c8:	f7fb f85c 	bl	8019484 <HAL_GetTick>
 801e3cc:	4602      	mov	r2, r0
 801e3ce:	693b      	ldr	r3, [r7, #16]
 801e3d0:	1ad3      	subs	r3, r2, r3
 801e3d2:	683a      	ldr	r2, [r7, #0]
 801e3d4:	429a      	cmp	r2, r3
 801e3d6:	d803      	bhi.n	801e3e0 <HAL_SPI_Receive+0x19c>
 801e3d8:	683b      	ldr	r3, [r7, #0]
 801e3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e3de:	d102      	bne.n	801e3e6 <HAL_SPI_Receive+0x1a2>
 801e3e0:	683b      	ldr	r3, [r7, #0]
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d102      	bne.n	801e3ec <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801e3e6:	2303      	movs	r3, #3
 801e3e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e3ea:	e04e      	b.n	801e48a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e3f2:	b29b      	uxth	r3, r3
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	d1c8      	bne.n	801e38a <HAL_SPI_Receive+0x146>
 801e3f8:	e034      	b.n	801e464 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	681b      	ldr	r3, [r3, #0]
 801e3fe:	689b      	ldr	r3, [r3, #8]
 801e400:	f003 0301 	and.w	r3, r3, #1
 801e404:	2b01      	cmp	r3, #1
 801e406:	d115      	bne.n	801e434 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	68da      	ldr	r2, [r3, #12]
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e412:	b292      	uxth	r2, r2
 801e414:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e416:	68fb      	ldr	r3, [r7, #12]
 801e418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e41a:	1c9a      	adds	r2, r3, #2
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e420:	68fb      	ldr	r3, [r7, #12]
 801e422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e426:	b29b      	uxth	r3, r3
 801e428:	3b01      	subs	r3, #1
 801e42a:	b29a      	uxth	r2, r3
 801e42c:	68fb      	ldr	r3, [r7, #12]
 801e42e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e432:	e011      	b.n	801e458 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e434:	f7fb f826 	bl	8019484 <HAL_GetTick>
 801e438:	4602      	mov	r2, r0
 801e43a:	693b      	ldr	r3, [r7, #16]
 801e43c:	1ad3      	subs	r3, r2, r3
 801e43e:	683a      	ldr	r2, [r7, #0]
 801e440:	429a      	cmp	r2, r3
 801e442:	d803      	bhi.n	801e44c <HAL_SPI_Receive+0x208>
 801e444:	683b      	ldr	r3, [r7, #0]
 801e446:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e44a:	d102      	bne.n	801e452 <HAL_SPI_Receive+0x20e>
 801e44c:	683b      	ldr	r3, [r7, #0]
 801e44e:	2b00      	cmp	r3, #0
 801e450:	d102      	bne.n	801e458 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801e452:	2303      	movs	r3, #3
 801e454:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e456:	e018      	b.n	801e48a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e45e:	b29b      	uxth	r3, r3
 801e460:	2b00      	cmp	r3, #0
 801e462:	d1ca      	bne.n	801e3fa <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e464:	693a      	ldr	r2, [r7, #16]
 801e466:	6839      	ldr	r1, [r7, #0]
 801e468:	68f8      	ldr	r0, [r7, #12]
 801e46a:	f000 fb4d 	bl	801eb08 <SPI_EndRxTransaction>
 801e46e:	4603      	mov	r3, r0
 801e470:	2b00      	cmp	r3, #0
 801e472:	d002      	beq.n	801e47a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	2220      	movs	r2, #32
 801e478:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d002      	beq.n	801e488 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801e482:	2301      	movs	r3, #1
 801e484:	75fb      	strb	r3, [r7, #23]
 801e486:	e000      	b.n	801e48a <HAL_SPI_Receive+0x246>
  }

error :
 801e488:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	2201      	movs	r2, #1
 801e48e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	2200      	movs	r2, #0
 801e496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e49a:	7dfb      	ldrb	r3, [r7, #23]
}
 801e49c:	4618      	mov	r0, r3
 801e49e:	3718      	adds	r7, #24
 801e4a0:	46bd      	mov	sp, r7
 801e4a2:	bd80      	pop	{r7, pc}

0801e4a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801e4a4:	b580      	push	{r7, lr}
 801e4a6:	b08a      	sub	sp, #40	; 0x28
 801e4a8:	af00      	add	r7, sp, #0
 801e4aa:	60f8      	str	r0, [r7, #12]
 801e4ac:	60b9      	str	r1, [r7, #8]
 801e4ae:	607a      	str	r2, [r7, #4]
 801e4b0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801e4b2:	2301      	movs	r3, #1
 801e4b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801e4b6:	2300      	movs	r3, #0
 801e4b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e4bc:	68fb      	ldr	r3, [r7, #12]
 801e4be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e4c2:	2b01      	cmp	r3, #1
 801e4c4:	d101      	bne.n	801e4ca <HAL_SPI_TransmitReceive+0x26>
 801e4c6:	2302      	movs	r3, #2
 801e4c8:	e1fb      	b.n	801e8c2 <HAL_SPI_TransmitReceive+0x41e>
 801e4ca:	68fb      	ldr	r3, [r7, #12]
 801e4cc:	2201      	movs	r2, #1
 801e4ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e4d2:	f7fa ffd7 	bl	8019484 <HAL_GetTick>
 801e4d6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e4de:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801e4e0:	68fb      	ldr	r3, [r7, #12]
 801e4e2:	685b      	ldr	r3, [r3, #4]
 801e4e4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801e4e6:	887b      	ldrh	r3, [r7, #2]
 801e4e8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801e4ea:	887b      	ldrh	r3, [r7, #2]
 801e4ec:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801e4ee:	7efb      	ldrb	r3, [r7, #27]
 801e4f0:	2b01      	cmp	r3, #1
 801e4f2:	d00e      	beq.n	801e512 <HAL_SPI_TransmitReceive+0x6e>
 801e4f4:	697b      	ldr	r3, [r7, #20]
 801e4f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e4fa:	d106      	bne.n	801e50a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	689b      	ldr	r3, [r3, #8]
 801e500:	2b00      	cmp	r3, #0
 801e502:	d102      	bne.n	801e50a <HAL_SPI_TransmitReceive+0x66>
 801e504:	7efb      	ldrb	r3, [r7, #27]
 801e506:	2b04      	cmp	r3, #4
 801e508:	d003      	beq.n	801e512 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801e50a:	2302      	movs	r3, #2
 801e50c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e510:	e1cd      	b.n	801e8ae <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801e512:	68bb      	ldr	r3, [r7, #8]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d005      	beq.n	801e524 <HAL_SPI_TransmitReceive+0x80>
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d002      	beq.n	801e524 <HAL_SPI_TransmitReceive+0x80>
 801e51e:	887b      	ldrh	r3, [r7, #2]
 801e520:	2b00      	cmp	r3, #0
 801e522:	d103      	bne.n	801e52c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801e524:	2301      	movs	r3, #1
 801e526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e52a:	e1c0      	b.n	801e8ae <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e52c:	68fb      	ldr	r3, [r7, #12]
 801e52e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e532:	b2db      	uxtb	r3, r3
 801e534:	2b04      	cmp	r3, #4
 801e536:	d003      	beq.n	801e540 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801e538:	68fb      	ldr	r3, [r7, #12]
 801e53a:	2205      	movs	r2, #5
 801e53c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e540:	68fb      	ldr	r3, [r7, #12]
 801e542:	2200      	movs	r2, #0
 801e544:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801e546:	68fb      	ldr	r3, [r7, #12]
 801e548:	687a      	ldr	r2, [r7, #4]
 801e54a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801e54c:	68fb      	ldr	r3, [r7, #12]
 801e54e:	887a      	ldrh	r2, [r7, #2]
 801e550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801e554:	68fb      	ldr	r3, [r7, #12]
 801e556:	887a      	ldrh	r2, [r7, #2]
 801e558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	68ba      	ldr	r2, [r7, #8]
 801e560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	887a      	ldrh	r2, [r7, #2]
 801e566:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801e568:	68fb      	ldr	r3, [r7, #12]
 801e56a:	887a      	ldrh	r2, [r7, #2]
 801e56c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801e56e:	68fb      	ldr	r3, [r7, #12]
 801e570:	2200      	movs	r2, #0
 801e572:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	2200      	movs	r2, #0
 801e578:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	68db      	ldr	r3, [r3, #12]
 801e57e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e582:	d802      	bhi.n	801e58a <HAL_SPI_TransmitReceive+0xe6>
 801e584:	8a3b      	ldrh	r3, [r7, #16]
 801e586:	2b01      	cmp	r3, #1
 801e588:	d908      	bls.n	801e59c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	681b      	ldr	r3, [r3, #0]
 801e58e:	685a      	ldr	r2, [r3, #4]
 801e590:	68fb      	ldr	r3, [r7, #12]
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e598:	605a      	str	r2, [r3, #4]
 801e59a:	e007      	b.n	801e5ac <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	681b      	ldr	r3, [r3, #0]
 801e5a0:	685a      	ldr	r2, [r3, #4]
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	681b      	ldr	r3, [r3, #0]
 801e5a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e5aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e5b6:	2b40      	cmp	r3, #64	; 0x40
 801e5b8:	d007      	beq.n	801e5ca <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e5ba:	68fb      	ldr	r3, [r7, #12]
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	681a      	ldr	r2, [r3, #0]
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e5c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e5ca:	68fb      	ldr	r3, [r7, #12]
 801e5cc:	68db      	ldr	r3, [r3, #12]
 801e5ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e5d2:	d97c      	bls.n	801e6ce <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e5d4:	68fb      	ldr	r3, [r7, #12]
 801e5d6:	685b      	ldr	r3, [r3, #4]
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d002      	beq.n	801e5e2 <HAL_SPI_TransmitReceive+0x13e>
 801e5dc:	8a7b      	ldrh	r3, [r7, #18]
 801e5de:	2b01      	cmp	r3, #1
 801e5e0:	d169      	bne.n	801e6b6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e5e2:	68fb      	ldr	r3, [r7, #12]
 801e5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5e6:	881a      	ldrh	r2, [r3, #0]
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e5ee:	68fb      	ldr	r3, [r7, #12]
 801e5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5f2:	1c9a      	adds	r2, r3, #2
 801e5f4:	68fb      	ldr	r3, [r7, #12]
 801e5f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e5f8:	68fb      	ldr	r3, [r7, #12]
 801e5fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e5fc:	b29b      	uxth	r3, r3
 801e5fe:	3b01      	subs	r3, #1
 801e600:	b29a      	uxth	r2, r3
 801e602:	68fb      	ldr	r3, [r7, #12]
 801e604:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e606:	e056      	b.n	801e6b6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	689b      	ldr	r3, [r3, #8]
 801e60e:	f003 0302 	and.w	r3, r3, #2
 801e612:	2b02      	cmp	r3, #2
 801e614:	d11b      	bne.n	801e64e <HAL_SPI_TransmitReceive+0x1aa>
 801e616:	68fb      	ldr	r3, [r7, #12]
 801e618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e61a:	b29b      	uxth	r3, r3
 801e61c:	2b00      	cmp	r3, #0
 801e61e:	d016      	beq.n	801e64e <HAL_SPI_TransmitReceive+0x1aa>
 801e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e622:	2b01      	cmp	r3, #1
 801e624:	d113      	bne.n	801e64e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e626:	68fb      	ldr	r3, [r7, #12]
 801e628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e62a:	881a      	ldrh	r2, [r3, #0]
 801e62c:	68fb      	ldr	r3, [r7, #12]
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e636:	1c9a      	adds	r2, r3, #2
 801e638:	68fb      	ldr	r3, [r7, #12]
 801e63a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e63c:	68fb      	ldr	r3, [r7, #12]
 801e63e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e640:	b29b      	uxth	r3, r3
 801e642:	3b01      	subs	r3, #1
 801e644:	b29a      	uxth	r2, r3
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e64a:	2300      	movs	r3, #0
 801e64c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	681b      	ldr	r3, [r3, #0]
 801e652:	689b      	ldr	r3, [r3, #8]
 801e654:	f003 0301 	and.w	r3, r3, #1
 801e658:	2b01      	cmp	r3, #1
 801e65a:	d11c      	bne.n	801e696 <HAL_SPI_TransmitReceive+0x1f2>
 801e65c:	68fb      	ldr	r3, [r7, #12]
 801e65e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e662:	b29b      	uxth	r3, r3
 801e664:	2b00      	cmp	r3, #0
 801e666:	d016      	beq.n	801e696 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e668:	68fb      	ldr	r3, [r7, #12]
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	68da      	ldr	r2, [r3, #12]
 801e66e:	68fb      	ldr	r3, [r7, #12]
 801e670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e672:	b292      	uxth	r2, r2
 801e674:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e67a:	1c9a      	adds	r2, r3, #2
 801e67c:	68fb      	ldr	r3, [r7, #12]
 801e67e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e680:	68fb      	ldr	r3, [r7, #12]
 801e682:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e686:	b29b      	uxth	r3, r3
 801e688:	3b01      	subs	r3, #1
 801e68a:	b29a      	uxth	r2, r3
 801e68c:	68fb      	ldr	r3, [r7, #12]
 801e68e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e692:	2301      	movs	r3, #1
 801e694:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801e696:	f7fa fef5 	bl	8019484 <HAL_GetTick>
 801e69a:	4602      	mov	r2, r0
 801e69c:	69fb      	ldr	r3, [r7, #28]
 801e69e:	1ad3      	subs	r3, r2, r3
 801e6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e6a2:	429a      	cmp	r2, r3
 801e6a4:	d807      	bhi.n	801e6b6 <HAL_SPI_TransmitReceive+0x212>
 801e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e6ac:	d003      	beq.n	801e6b6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801e6ae:	2303      	movs	r3, #3
 801e6b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e6b4:	e0fb      	b.n	801e8ae <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e6b6:	68fb      	ldr	r3, [r7, #12]
 801e6b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e6ba:	b29b      	uxth	r3, r3
 801e6bc:	2b00      	cmp	r3, #0
 801e6be:	d1a3      	bne.n	801e608 <HAL_SPI_TransmitReceive+0x164>
 801e6c0:	68fb      	ldr	r3, [r7, #12]
 801e6c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e6c6:	b29b      	uxth	r3, r3
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d19d      	bne.n	801e608 <HAL_SPI_TransmitReceive+0x164>
 801e6cc:	e0df      	b.n	801e88e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	685b      	ldr	r3, [r3, #4]
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d003      	beq.n	801e6de <HAL_SPI_TransmitReceive+0x23a>
 801e6d6:	8a7b      	ldrh	r3, [r7, #18]
 801e6d8:	2b01      	cmp	r3, #1
 801e6da:	f040 80cb 	bne.w	801e874 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e6e2:	b29b      	uxth	r3, r3
 801e6e4:	2b01      	cmp	r3, #1
 801e6e6:	d912      	bls.n	801e70e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6ec:	881a      	ldrh	r2, [r3, #0]
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6f8:	1c9a      	adds	r2, r3, #2
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e6fe:	68fb      	ldr	r3, [r7, #12]
 801e700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e702:	b29b      	uxth	r3, r3
 801e704:	3b02      	subs	r3, #2
 801e706:	b29a      	uxth	r2, r3
 801e708:	68fb      	ldr	r3, [r7, #12]
 801e70a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e70c:	e0b2      	b.n	801e874 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e70e:	68fb      	ldr	r3, [r7, #12]
 801e710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	330c      	adds	r3, #12
 801e718:	7812      	ldrb	r2, [r2, #0]
 801e71a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e720:	1c5a      	adds	r2, r3, #1
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e726:	68fb      	ldr	r3, [r7, #12]
 801e728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e72a:	b29b      	uxth	r3, r3
 801e72c:	3b01      	subs	r3, #1
 801e72e:	b29a      	uxth	r2, r3
 801e730:	68fb      	ldr	r3, [r7, #12]
 801e732:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e734:	e09e      	b.n	801e874 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	681b      	ldr	r3, [r3, #0]
 801e73a:	689b      	ldr	r3, [r3, #8]
 801e73c:	f003 0302 	and.w	r3, r3, #2
 801e740:	2b02      	cmp	r3, #2
 801e742:	d134      	bne.n	801e7ae <HAL_SPI_TransmitReceive+0x30a>
 801e744:	68fb      	ldr	r3, [r7, #12]
 801e746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e748:	b29b      	uxth	r3, r3
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	d02f      	beq.n	801e7ae <HAL_SPI_TransmitReceive+0x30a>
 801e74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e750:	2b01      	cmp	r3, #1
 801e752:	d12c      	bne.n	801e7ae <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e758:	b29b      	uxth	r3, r3
 801e75a:	2b01      	cmp	r3, #1
 801e75c:	d912      	bls.n	801e784 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e762:	881a      	ldrh	r2, [r3, #0]
 801e764:	68fb      	ldr	r3, [r7, #12]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e76a:	68fb      	ldr	r3, [r7, #12]
 801e76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e76e:	1c9a      	adds	r2, r3, #2
 801e770:	68fb      	ldr	r3, [r7, #12]
 801e772:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e774:	68fb      	ldr	r3, [r7, #12]
 801e776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e778:	b29b      	uxth	r3, r3
 801e77a:	3b02      	subs	r3, #2
 801e77c:	b29a      	uxth	r2, r3
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e782:	e012      	b.n	801e7aa <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	681b      	ldr	r3, [r3, #0]
 801e78c:	330c      	adds	r3, #12
 801e78e:	7812      	ldrb	r2, [r2, #0]
 801e790:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e792:	68fb      	ldr	r3, [r7, #12]
 801e794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e796:	1c5a      	adds	r2, r3, #1
 801e798:	68fb      	ldr	r3, [r7, #12]
 801e79a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e7a0:	b29b      	uxth	r3, r3
 801e7a2:	3b01      	subs	r3, #1
 801e7a4:	b29a      	uxth	r2, r3
 801e7a6:	68fb      	ldr	r3, [r7, #12]
 801e7a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	681b      	ldr	r3, [r3, #0]
 801e7b2:	689b      	ldr	r3, [r3, #8]
 801e7b4:	f003 0301 	and.w	r3, r3, #1
 801e7b8:	2b01      	cmp	r3, #1
 801e7ba:	d148      	bne.n	801e84e <HAL_SPI_TransmitReceive+0x3aa>
 801e7bc:	68fb      	ldr	r3, [r7, #12]
 801e7be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e7c2:	b29b      	uxth	r3, r3
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d042      	beq.n	801e84e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e7ce:	b29b      	uxth	r3, r3
 801e7d0:	2b01      	cmp	r3, #1
 801e7d2:	d923      	bls.n	801e81c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	681b      	ldr	r3, [r3, #0]
 801e7d8:	68da      	ldr	r2, [r3, #12]
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e7de:	b292      	uxth	r2, r2
 801e7e0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e7e6:	1c9a      	adds	r2, r3, #2
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801e7ec:	68fb      	ldr	r3, [r7, #12]
 801e7ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e7f2:	b29b      	uxth	r3, r3
 801e7f4:	3b02      	subs	r3, #2
 801e7f6:	b29a      	uxth	r2, r3
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e804:	b29b      	uxth	r3, r3
 801e806:	2b01      	cmp	r3, #1
 801e808:	d81f      	bhi.n	801e84a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e80a:	68fb      	ldr	r3, [r7, #12]
 801e80c:	681b      	ldr	r3, [r3, #0]
 801e80e:	685a      	ldr	r2, [r3, #4]
 801e810:	68fb      	ldr	r3, [r7, #12]
 801e812:	681b      	ldr	r3, [r3, #0]
 801e814:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e818:	605a      	str	r2, [r3, #4]
 801e81a:	e016      	b.n	801e84a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e81c:	68fb      	ldr	r3, [r7, #12]
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	f103 020c 	add.w	r2, r3, #12
 801e824:	68fb      	ldr	r3, [r7, #12]
 801e826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e828:	7812      	ldrb	r2, [r2, #0]
 801e82a:	b2d2      	uxtb	r2, r2
 801e82c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801e82e:	68fb      	ldr	r3, [r7, #12]
 801e830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e832:	1c5a      	adds	r2, r3, #1
 801e834:	68fb      	ldr	r3, [r7, #12]
 801e836:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801e838:	68fb      	ldr	r3, [r7, #12]
 801e83a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e83e:	b29b      	uxth	r3, r3
 801e840:	3b01      	subs	r3, #1
 801e842:	b29a      	uxth	r2, r3
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e84a:	2301      	movs	r3, #1
 801e84c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801e84e:	f7fa fe19 	bl	8019484 <HAL_GetTick>
 801e852:	4602      	mov	r2, r0
 801e854:	69fb      	ldr	r3, [r7, #28]
 801e856:	1ad3      	subs	r3, r2, r3
 801e858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e85a:	429a      	cmp	r2, r3
 801e85c:	d803      	bhi.n	801e866 <HAL_SPI_TransmitReceive+0x3c2>
 801e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e860:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e864:	d102      	bne.n	801e86c <HAL_SPI_TransmitReceive+0x3c8>
 801e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d103      	bne.n	801e874 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801e86c:	2303      	movs	r3, #3
 801e86e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e872:	e01c      	b.n	801e8ae <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e874:	68fb      	ldr	r3, [r7, #12]
 801e876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e878:	b29b      	uxth	r3, r3
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	f47f af5b 	bne.w	801e736 <HAL_SPI_TransmitReceive+0x292>
 801e880:	68fb      	ldr	r3, [r7, #12]
 801e882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e886:	b29b      	uxth	r3, r3
 801e888:	2b00      	cmp	r3, #0
 801e88a:	f47f af54 	bne.w	801e736 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e88e:	69fa      	ldr	r2, [r7, #28]
 801e890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e892:	68f8      	ldr	r0, [r7, #12]
 801e894:	f000 f9b4 	bl	801ec00 <SPI_EndRxTxTransaction>
 801e898:	4603      	mov	r3, r0
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	d006      	beq.n	801e8ac <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801e89e:	2301      	movs	r3, #1
 801e8a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e8a4:	68fb      	ldr	r3, [r7, #12]
 801e8a6:	2220      	movs	r2, #32
 801e8a8:	661a      	str	r2, [r3, #96]	; 0x60
 801e8aa:	e000      	b.n	801e8ae <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801e8ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	2201      	movs	r2, #1
 801e8b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	2200      	movs	r2, #0
 801e8ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e8be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	3728      	adds	r7, #40	; 0x28
 801e8c6:	46bd      	mov	sp, r7
 801e8c8:	bd80      	pop	{r7, pc}
	...

0801e8cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e8cc:	b580      	push	{r7, lr}
 801e8ce:	b088      	sub	sp, #32
 801e8d0:	af00      	add	r7, sp, #0
 801e8d2:	60f8      	str	r0, [r7, #12]
 801e8d4:	60b9      	str	r1, [r7, #8]
 801e8d6:	603b      	str	r3, [r7, #0]
 801e8d8:	4613      	mov	r3, r2
 801e8da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801e8dc:	f7fa fdd2 	bl	8019484 <HAL_GetTick>
 801e8e0:	4602      	mov	r2, r0
 801e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8e4:	1a9b      	subs	r3, r3, r2
 801e8e6:	683a      	ldr	r2, [r7, #0]
 801e8e8:	4413      	add	r3, r2
 801e8ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801e8ec:	f7fa fdca 	bl	8019484 <HAL_GetTick>
 801e8f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801e8f2:	4b39      	ldr	r3, [pc, #228]	; (801e9d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801e8f4:	681b      	ldr	r3, [r3, #0]
 801e8f6:	015b      	lsls	r3, r3, #5
 801e8f8:	0d1b      	lsrs	r3, r3, #20
 801e8fa:	69fa      	ldr	r2, [r7, #28]
 801e8fc:	fb02 f303 	mul.w	r3, r2, r3
 801e900:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e902:	e054      	b.n	801e9ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801e904:	683b      	ldr	r3, [r7, #0]
 801e906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e90a:	d050      	beq.n	801e9ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e90c:	f7fa fdba 	bl	8019484 <HAL_GetTick>
 801e910:	4602      	mov	r2, r0
 801e912:	69bb      	ldr	r3, [r7, #24]
 801e914:	1ad3      	subs	r3, r2, r3
 801e916:	69fa      	ldr	r2, [r7, #28]
 801e918:	429a      	cmp	r2, r3
 801e91a:	d902      	bls.n	801e922 <SPI_WaitFlagStateUntilTimeout+0x56>
 801e91c:	69fb      	ldr	r3, [r7, #28]
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d13d      	bne.n	801e99e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	685a      	ldr	r2, [r3, #4]
 801e928:	68fb      	ldr	r3, [r7, #12]
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	685b      	ldr	r3, [r3, #4]
 801e936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e93a:	d111      	bne.n	801e960 <SPI_WaitFlagStateUntilTimeout+0x94>
 801e93c:	68fb      	ldr	r3, [r7, #12]
 801e93e:	689b      	ldr	r3, [r3, #8]
 801e940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e944:	d004      	beq.n	801e950 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	689b      	ldr	r3, [r3, #8]
 801e94a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e94e:	d107      	bne.n	801e960 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e950:	68fb      	ldr	r3, [r7, #12]
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	681a      	ldr	r2, [r3, #0]
 801e956:	68fb      	ldr	r3, [r7, #12]
 801e958:	681b      	ldr	r3, [r3, #0]
 801e95a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e95e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e968:	d10f      	bne.n	801e98a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	681a      	ldr	r2, [r3, #0]
 801e970:	68fb      	ldr	r3, [r7, #12]
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e978:	601a      	str	r2, [r3, #0]
 801e97a:	68fb      	ldr	r3, [r7, #12]
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	681a      	ldr	r2, [r3, #0]
 801e980:	68fb      	ldr	r3, [r7, #12]
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	2201      	movs	r2, #1
 801e98e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	2200      	movs	r2, #0
 801e996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e99a:	2303      	movs	r3, #3
 801e99c:	e017      	b.n	801e9ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e99e:	697b      	ldr	r3, [r7, #20]
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d101      	bne.n	801e9a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801e9a4:	2300      	movs	r3, #0
 801e9a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801e9a8:	697b      	ldr	r3, [r7, #20]
 801e9aa:	3b01      	subs	r3, #1
 801e9ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	681b      	ldr	r3, [r3, #0]
 801e9b2:	689a      	ldr	r2, [r3, #8]
 801e9b4:	68bb      	ldr	r3, [r7, #8]
 801e9b6:	4013      	ands	r3, r2
 801e9b8:	68ba      	ldr	r2, [r7, #8]
 801e9ba:	429a      	cmp	r2, r3
 801e9bc:	bf0c      	ite	eq
 801e9be:	2301      	moveq	r3, #1
 801e9c0:	2300      	movne	r3, #0
 801e9c2:	b2db      	uxtb	r3, r3
 801e9c4:	461a      	mov	r2, r3
 801e9c6:	79fb      	ldrb	r3, [r7, #7]
 801e9c8:	429a      	cmp	r2, r3
 801e9ca:	d19b      	bne.n	801e904 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801e9cc:	2300      	movs	r3, #0
}
 801e9ce:	4618      	mov	r0, r3
 801e9d0:	3720      	adds	r7, #32
 801e9d2:	46bd      	mov	sp, r7
 801e9d4:	bd80      	pop	{r7, pc}
 801e9d6:	bf00      	nop
 801e9d8:	2000031c 	.word	0x2000031c

0801e9dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e9dc:	b580      	push	{r7, lr}
 801e9de:	b08a      	sub	sp, #40	; 0x28
 801e9e0:	af00      	add	r7, sp, #0
 801e9e2:	60f8      	str	r0, [r7, #12]
 801e9e4:	60b9      	str	r1, [r7, #8]
 801e9e6:	607a      	str	r2, [r7, #4]
 801e9e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801e9ea:	2300      	movs	r3, #0
 801e9ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801e9ee:	f7fa fd49 	bl	8019484 <HAL_GetTick>
 801e9f2:	4602      	mov	r2, r0
 801e9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e9f6:	1a9b      	subs	r3, r3, r2
 801e9f8:	683a      	ldr	r2, [r7, #0]
 801e9fa:	4413      	add	r3, r2
 801e9fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801e9fe:	f7fa fd41 	bl	8019484 <HAL_GetTick>
 801ea02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	330c      	adds	r3, #12
 801ea0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801ea0c:	4b3d      	ldr	r3, [pc, #244]	; (801eb04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801ea0e:	681a      	ldr	r2, [r3, #0]
 801ea10:	4613      	mov	r3, r2
 801ea12:	009b      	lsls	r3, r3, #2
 801ea14:	4413      	add	r3, r2
 801ea16:	00da      	lsls	r2, r3, #3
 801ea18:	1ad3      	subs	r3, r2, r3
 801ea1a:	0d1b      	lsrs	r3, r3, #20
 801ea1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ea1e:	fb02 f303 	mul.w	r3, r2, r3
 801ea22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801ea24:	e060      	b.n	801eae8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801ea26:	68bb      	ldr	r3, [r7, #8]
 801ea28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801ea2c:	d107      	bne.n	801ea3e <SPI_WaitFifoStateUntilTimeout+0x62>
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	d104      	bne.n	801ea3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801ea34:	69fb      	ldr	r3, [r7, #28]
 801ea36:	781b      	ldrb	r3, [r3, #0]
 801ea38:	b2db      	uxtb	r3, r3
 801ea3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801ea3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea44:	d050      	beq.n	801eae8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ea46:	f7fa fd1d 	bl	8019484 <HAL_GetTick>
 801ea4a:	4602      	mov	r2, r0
 801ea4c:	6a3b      	ldr	r3, [r7, #32]
 801ea4e:	1ad3      	subs	r3, r2, r3
 801ea50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ea52:	429a      	cmp	r2, r3
 801ea54:	d902      	bls.n	801ea5c <SPI_WaitFifoStateUntilTimeout+0x80>
 801ea56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	d13d      	bne.n	801ead8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ea5c:	68fb      	ldr	r3, [r7, #12]
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	685a      	ldr	r2, [r3, #4]
 801ea62:	68fb      	ldr	r3, [r7, #12]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ea6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ea6c:	68fb      	ldr	r3, [r7, #12]
 801ea6e:	685b      	ldr	r3, [r3, #4]
 801ea70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ea74:	d111      	bne.n	801ea9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	689b      	ldr	r3, [r3, #8]
 801ea7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ea7e:	d004      	beq.n	801ea8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	689b      	ldr	r3, [r3, #8]
 801ea84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ea88:	d107      	bne.n	801ea9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	681a      	ldr	r2, [r3, #0]
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ea98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ea9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801eaa2:	d10f      	bne.n	801eac4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801eaa4:	68fb      	ldr	r3, [r7, #12]
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	681a      	ldr	r2, [r3, #0]
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801eab2:	601a      	str	r2, [r3, #0]
 801eab4:	68fb      	ldr	r3, [r7, #12]
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	681a      	ldr	r2, [r3, #0]
 801eaba:	68fb      	ldr	r3, [r7, #12]
 801eabc:	681b      	ldr	r3, [r3, #0]
 801eabe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801eac2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801eac4:	68fb      	ldr	r3, [r7, #12]
 801eac6:	2201      	movs	r2, #1
 801eac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801eacc:	68fb      	ldr	r3, [r7, #12]
 801eace:	2200      	movs	r2, #0
 801ead0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801ead4:	2303      	movs	r3, #3
 801ead6:	e010      	b.n	801eafa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801ead8:	69bb      	ldr	r3, [r7, #24]
 801eada:	2b00      	cmp	r3, #0
 801eadc:	d101      	bne.n	801eae2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801eade:	2300      	movs	r3, #0
 801eae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801eae2:	69bb      	ldr	r3, [r7, #24]
 801eae4:	3b01      	subs	r3, #1
 801eae6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801eae8:	68fb      	ldr	r3, [r7, #12]
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	689a      	ldr	r2, [r3, #8]
 801eaee:	68bb      	ldr	r3, [r7, #8]
 801eaf0:	4013      	ands	r3, r2
 801eaf2:	687a      	ldr	r2, [r7, #4]
 801eaf4:	429a      	cmp	r2, r3
 801eaf6:	d196      	bne.n	801ea26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801eaf8:	2300      	movs	r3, #0
}
 801eafa:	4618      	mov	r0, r3
 801eafc:	3728      	adds	r7, #40	; 0x28
 801eafe:	46bd      	mov	sp, r7
 801eb00:	bd80      	pop	{r7, pc}
 801eb02:	bf00      	nop
 801eb04:	2000031c 	.word	0x2000031c

0801eb08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801eb08:	b580      	push	{r7, lr}
 801eb0a:	b088      	sub	sp, #32
 801eb0c:	af02      	add	r7, sp, #8
 801eb0e:	60f8      	str	r0, [r7, #12]
 801eb10:	60b9      	str	r1, [r7, #8]
 801eb12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801eb14:	68fb      	ldr	r3, [r7, #12]
 801eb16:	685b      	ldr	r3, [r3, #4]
 801eb18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801eb1c:	d111      	bne.n	801eb42 <SPI_EndRxTransaction+0x3a>
 801eb1e:	68fb      	ldr	r3, [r7, #12]
 801eb20:	689b      	ldr	r3, [r3, #8]
 801eb22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801eb26:	d004      	beq.n	801eb32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801eb28:	68fb      	ldr	r3, [r7, #12]
 801eb2a:	689b      	ldr	r3, [r3, #8]
 801eb2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801eb30:	d107      	bne.n	801eb42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801eb32:	68fb      	ldr	r3, [r7, #12]
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	681a      	ldr	r2, [r3, #0]
 801eb38:	68fb      	ldr	r3, [r7, #12]
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801eb40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801eb42:	68fb      	ldr	r3, [r7, #12]
 801eb44:	685b      	ldr	r3, [r3, #4]
 801eb46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801eb4a:	d112      	bne.n	801eb72 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	9300      	str	r3, [sp, #0]
 801eb50:	68bb      	ldr	r3, [r7, #8]
 801eb52:	2200      	movs	r2, #0
 801eb54:	2180      	movs	r1, #128	; 0x80
 801eb56:	68f8      	ldr	r0, [r7, #12]
 801eb58:	f7ff feb8 	bl	801e8cc <SPI_WaitFlagStateUntilTimeout>
 801eb5c:	4603      	mov	r3, r0
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d021      	beq.n	801eba6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801eb62:	68fb      	ldr	r3, [r7, #12]
 801eb64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801eb66:	f043 0220 	orr.w	r2, r3, #32
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801eb6e:	2303      	movs	r3, #3
 801eb70:	e03d      	b.n	801ebee <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801eb72:	4b21      	ldr	r3, [pc, #132]	; (801ebf8 <SPI_EndRxTransaction+0xf0>)
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	4a21      	ldr	r2, [pc, #132]	; (801ebfc <SPI_EndRxTransaction+0xf4>)
 801eb78:	fba2 2303 	umull	r2, r3, r2, r3
 801eb7c:	0d5b      	lsrs	r3, r3, #21
 801eb7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801eb82:	fb02 f303 	mul.w	r3, r2, r3
 801eb86:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801eb88:	697b      	ldr	r3, [r7, #20]
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d00a      	beq.n	801eba4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801eb8e:	697b      	ldr	r3, [r7, #20]
 801eb90:	3b01      	subs	r3, #1
 801eb92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	689b      	ldr	r3, [r3, #8]
 801eb9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801eb9e:	2b80      	cmp	r3, #128	; 0x80
 801eba0:	d0f2      	beq.n	801eb88 <SPI_EndRxTransaction+0x80>
 801eba2:	e000      	b.n	801eba6 <SPI_EndRxTransaction+0x9e>
        break;
 801eba4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801eba6:	68fb      	ldr	r3, [r7, #12]
 801eba8:	685b      	ldr	r3, [r3, #4]
 801ebaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ebae:	d11d      	bne.n	801ebec <SPI_EndRxTransaction+0xe4>
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	689b      	ldr	r3, [r3, #8]
 801ebb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ebb8:	d004      	beq.n	801ebc4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ebba:	68fb      	ldr	r3, [r7, #12]
 801ebbc:	689b      	ldr	r3, [r3, #8]
 801ebbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ebc2:	d113      	bne.n	801ebec <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	9300      	str	r3, [sp, #0]
 801ebc8:	68bb      	ldr	r3, [r7, #8]
 801ebca:	2200      	movs	r2, #0
 801ebcc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ebd0:	68f8      	ldr	r0, [r7, #12]
 801ebd2:	f7ff ff03 	bl	801e9dc <SPI_WaitFifoStateUntilTimeout>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	d007      	beq.n	801ebec <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ebdc:	68fb      	ldr	r3, [r7, #12]
 801ebde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ebe0:	f043 0220 	orr.w	r2, r3, #32
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801ebe8:	2303      	movs	r3, #3
 801ebea:	e000      	b.n	801ebee <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801ebec:	2300      	movs	r3, #0
}
 801ebee:	4618      	mov	r0, r3
 801ebf0:	3718      	adds	r7, #24
 801ebf2:	46bd      	mov	sp, r7
 801ebf4:	bd80      	pop	{r7, pc}
 801ebf6:	bf00      	nop
 801ebf8:	2000031c 	.word	0x2000031c
 801ebfc:	165e9f81 	.word	0x165e9f81

0801ec00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801ec00:	b580      	push	{r7, lr}
 801ec02:	b088      	sub	sp, #32
 801ec04:	af02      	add	r7, sp, #8
 801ec06:	60f8      	str	r0, [r7, #12]
 801ec08:	60b9      	str	r1, [r7, #8]
 801ec0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	9300      	str	r3, [sp, #0]
 801ec10:	68bb      	ldr	r3, [r7, #8]
 801ec12:	2200      	movs	r2, #0
 801ec14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ec18:	68f8      	ldr	r0, [r7, #12]
 801ec1a:	f7ff fedf 	bl	801e9dc <SPI_WaitFifoStateUntilTimeout>
 801ec1e:	4603      	mov	r3, r0
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d007      	beq.n	801ec34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ec24:	68fb      	ldr	r3, [r7, #12]
 801ec26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ec28:	f043 0220 	orr.w	r2, r3, #32
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ec30:	2303      	movs	r3, #3
 801ec32:	e046      	b.n	801ecc2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801ec34:	4b25      	ldr	r3, [pc, #148]	; (801eccc <SPI_EndRxTxTransaction+0xcc>)
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	4a25      	ldr	r2, [pc, #148]	; (801ecd0 <SPI_EndRxTxTransaction+0xd0>)
 801ec3a:	fba2 2303 	umull	r2, r3, r2, r3
 801ec3e:	0d5b      	lsrs	r3, r3, #21
 801ec40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ec44:	fb02 f303 	mul.w	r3, r2, r3
 801ec48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ec4a:	68fb      	ldr	r3, [r7, #12]
 801ec4c:	685b      	ldr	r3, [r3, #4]
 801ec4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ec52:	d112      	bne.n	801ec7a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	9300      	str	r3, [sp, #0]
 801ec58:	68bb      	ldr	r3, [r7, #8]
 801ec5a:	2200      	movs	r2, #0
 801ec5c:	2180      	movs	r1, #128	; 0x80
 801ec5e:	68f8      	ldr	r0, [r7, #12]
 801ec60:	f7ff fe34 	bl	801e8cc <SPI_WaitFlagStateUntilTimeout>
 801ec64:	4603      	mov	r3, r0
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d016      	beq.n	801ec98 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ec6e:	f043 0220 	orr.w	r2, r3, #32
 801ec72:	68fb      	ldr	r3, [r7, #12]
 801ec74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801ec76:	2303      	movs	r3, #3
 801ec78:	e023      	b.n	801ecc2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801ec7a:	697b      	ldr	r3, [r7, #20]
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d00a      	beq.n	801ec96 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801ec80:	697b      	ldr	r3, [r7, #20]
 801ec82:	3b01      	subs	r3, #1
 801ec84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801ec86:	68fb      	ldr	r3, [r7, #12]
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	689b      	ldr	r3, [r3, #8]
 801ec8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ec90:	2b80      	cmp	r3, #128	; 0x80
 801ec92:	d0f2      	beq.n	801ec7a <SPI_EndRxTxTransaction+0x7a>
 801ec94:	e000      	b.n	801ec98 <SPI_EndRxTxTransaction+0x98>
        break;
 801ec96:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	9300      	str	r3, [sp, #0]
 801ec9c:	68bb      	ldr	r3, [r7, #8]
 801ec9e:	2200      	movs	r2, #0
 801eca0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801eca4:	68f8      	ldr	r0, [r7, #12]
 801eca6:	f7ff fe99 	bl	801e9dc <SPI_WaitFifoStateUntilTimeout>
 801ecaa:	4603      	mov	r3, r0
 801ecac:	2b00      	cmp	r3, #0
 801ecae:	d007      	beq.n	801ecc0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ecb0:	68fb      	ldr	r3, [r7, #12]
 801ecb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ecb4:	f043 0220 	orr.w	r2, r3, #32
 801ecb8:	68fb      	ldr	r3, [r7, #12]
 801ecba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ecbc:	2303      	movs	r3, #3
 801ecbe:	e000      	b.n	801ecc2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801ecc0:	2300      	movs	r3, #0
}
 801ecc2:	4618      	mov	r0, r3
 801ecc4:	3718      	adds	r7, #24
 801ecc6:	46bd      	mov	sp, r7
 801ecc8:	bd80      	pop	{r7, pc}
 801ecca:	bf00      	nop
 801eccc:	2000031c 	.word	0x2000031c
 801ecd0:	165e9f81 	.word	0x165e9f81

0801ecd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ecd4:	b580      	push	{r7, lr}
 801ecd6:	b082      	sub	sp, #8
 801ecd8:	af00      	add	r7, sp, #0
 801ecda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	691b      	ldr	r3, [r3, #16]
 801ece2:	f003 0302 	and.w	r3, r3, #2
 801ece6:	2b02      	cmp	r3, #2
 801ece8:	d128      	bne.n	801ed3c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	68db      	ldr	r3, [r3, #12]
 801ecf0:	f003 0302 	and.w	r3, r3, #2
 801ecf4:	2b02      	cmp	r3, #2
 801ecf6:	d121      	bne.n	801ed3c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	f06f 0202 	mvn.w	r2, #2
 801ed00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	2201      	movs	r2, #1
 801ed06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	699b      	ldr	r3, [r3, #24]
 801ed0e:	f003 0303 	and.w	r3, r3, #3
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d005      	beq.n	801ed22 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ed1c:	6878      	ldr	r0, [r7, #4]
 801ed1e:	4798      	blx	r3
 801ed20:	e009      	b.n	801ed36 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ed28:	6878      	ldr	r0, [r7, #4]
 801ed2a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ed32:	6878      	ldr	r0, [r7, #4]
 801ed34:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	2200      	movs	r2, #0
 801ed3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	691b      	ldr	r3, [r3, #16]
 801ed42:	f003 0304 	and.w	r3, r3, #4
 801ed46:	2b04      	cmp	r3, #4
 801ed48:	d128      	bne.n	801ed9c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ed4a:	687b      	ldr	r3, [r7, #4]
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	68db      	ldr	r3, [r3, #12]
 801ed50:	f003 0304 	and.w	r3, r3, #4
 801ed54:	2b04      	cmp	r3, #4
 801ed56:	d121      	bne.n	801ed9c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	681b      	ldr	r3, [r3, #0]
 801ed5c:	f06f 0204 	mvn.w	r2, #4
 801ed60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	2202      	movs	r2, #2
 801ed66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	699b      	ldr	r3, [r3, #24]
 801ed6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	d005      	beq.n	801ed82 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801ed76:	687b      	ldr	r3, [r7, #4]
 801ed78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ed7c:	6878      	ldr	r0, [r7, #4]
 801ed7e:	4798      	blx	r3
 801ed80:	e009      	b.n	801ed96 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ed88:	6878      	ldr	r0, [r7, #4]
 801ed8a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ed92:	6878      	ldr	r0, [r7, #4]
 801ed94:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	2200      	movs	r2, #0
 801ed9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	681b      	ldr	r3, [r3, #0]
 801eda0:	691b      	ldr	r3, [r3, #16]
 801eda2:	f003 0308 	and.w	r3, r3, #8
 801eda6:	2b08      	cmp	r3, #8
 801eda8:	d128      	bne.n	801edfc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	681b      	ldr	r3, [r3, #0]
 801edae:	68db      	ldr	r3, [r3, #12]
 801edb0:	f003 0308 	and.w	r3, r3, #8
 801edb4:	2b08      	cmp	r3, #8
 801edb6:	d121      	bne.n	801edfc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	f06f 0208 	mvn.w	r2, #8
 801edc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	2204      	movs	r2, #4
 801edc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	69db      	ldr	r3, [r3, #28]
 801edce:	f003 0303 	and.w	r3, r3, #3
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d005      	beq.n	801ede2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801eddc:	6878      	ldr	r0, [r7, #4]
 801edde:	4798      	blx	r3
 801ede0:	e009      	b.n	801edf6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ede8:	6878      	ldr	r0, [r7, #4]
 801edea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801edf2:	6878      	ldr	r0, [r7, #4]
 801edf4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	2200      	movs	r2, #0
 801edfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	691b      	ldr	r3, [r3, #16]
 801ee02:	f003 0310 	and.w	r3, r3, #16
 801ee06:	2b10      	cmp	r3, #16
 801ee08:	d128      	bne.n	801ee5c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	68db      	ldr	r3, [r3, #12]
 801ee10:	f003 0310 	and.w	r3, r3, #16
 801ee14:	2b10      	cmp	r3, #16
 801ee16:	d121      	bne.n	801ee5c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	f06f 0210 	mvn.w	r2, #16
 801ee20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	2208      	movs	r2, #8
 801ee26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	69db      	ldr	r3, [r3, #28]
 801ee2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ee32:	2b00      	cmp	r3, #0
 801ee34:	d005      	beq.n	801ee42 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ee3c:	6878      	ldr	r0, [r7, #4]
 801ee3e:	4798      	blx	r3
 801ee40:	e009      	b.n	801ee56 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ee48:	6878      	ldr	r0, [r7, #4]
 801ee4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ee52:	6878      	ldr	r0, [r7, #4]
 801ee54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	2200      	movs	r2, #0
 801ee5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	691b      	ldr	r3, [r3, #16]
 801ee62:	f003 0301 	and.w	r3, r3, #1
 801ee66:	2b01      	cmp	r3, #1
 801ee68:	d110      	bne.n	801ee8c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	68db      	ldr	r3, [r3, #12]
 801ee70:	f003 0301 	and.w	r3, r3, #1
 801ee74:	2b01      	cmp	r3, #1
 801ee76:	d109      	bne.n	801ee8c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	f06f 0201 	mvn.w	r2, #1
 801ee80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ee88:	6878      	ldr	r0, [r7, #4]
 801ee8a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	691b      	ldr	r3, [r3, #16]
 801ee92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ee96:	2b80      	cmp	r3, #128	; 0x80
 801ee98:	d110      	bne.n	801eebc <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	681b      	ldr	r3, [r3, #0]
 801ee9e:	68db      	ldr	r3, [r3, #12]
 801eea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801eea4:	2b80      	cmp	r3, #128	; 0x80
 801eea6:	d109      	bne.n	801eebc <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801eeb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801eeb8:	6878      	ldr	r0, [r7, #4]
 801eeba:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	681b      	ldr	r3, [r3, #0]
 801eec0:	691b      	ldr	r3, [r3, #16]
 801eec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801eeca:	d110      	bne.n	801eeee <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	68db      	ldr	r3, [r3, #12]
 801eed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801eed6:	2b80      	cmp	r3, #128	; 0x80
 801eed8:	d109      	bne.n	801eeee <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801eee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801eeea:	6878      	ldr	r0, [r7, #4]
 801eeec:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	691b      	ldr	r3, [r3, #16]
 801eef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801eef8:	2b40      	cmp	r3, #64	; 0x40
 801eefa:	d110      	bne.n	801ef1e <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	68db      	ldr	r3, [r3, #12]
 801ef02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ef06:	2b40      	cmp	r3, #64	; 0x40
 801ef08:	d109      	bne.n	801ef1e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ef12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ef1a:	6878      	ldr	r0, [r7, #4]
 801ef1c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	691b      	ldr	r3, [r3, #16]
 801ef24:	f003 0320 	and.w	r3, r3, #32
 801ef28:	2b20      	cmp	r3, #32
 801ef2a:	d110      	bne.n	801ef4e <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	68db      	ldr	r3, [r3, #12]
 801ef32:	f003 0320 	and.w	r3, r3, #32
 801ef36:	2b20      	cmp	r3, #32
 801ef38:	d109      	bne.n	801ef4e <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801ef3a:	687b      	ldr	r3, [r7, #4]
 801ef3c:	681b      	ldr	r3, [r3, #0]
 801ef3e:	f06f 0220 	mvn.w	r2, #32
 801ef42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ef4a:	6878      	ldr	r0, [r7, #4]
 801ef4c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ef4e:	bf00      	nop
 801ef50:	3708      	adds	r7, #8
 801ef52:	46bd      	mov	sp, r7
 801ef54:	bd80      	pop	{r7, pc}
	...

0801ef58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801ef58:	b580      	push	{r7, lr}
 801ef5a:	b082      	sub	sp, #8
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d101      	bne.n	801ef6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801ef66:	2301      	movs	r3, #1
 801ef68:	e04e      	b.n	801f008 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ef6e:	2b00      	cmp	r3, #0
 801ef70:	d114      	bne.n	801ef9c <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	2200      	movs	r2, #0
 801ef76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801ef7a:	6878      	ldr	r0, [r7, #4]
 801ef7c:	f000 fc1c 	bl	801f7b8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801ef80:	687b      	ldr	r3, [r7, #4]
 801ef82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d103      	bne.n	801ef92 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	4a20      	ldr	r2, [pc, #128]	; (801f010 <HAL_UART_Init+0xb8>)
 801ef8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ef98:	6878      	ldr	r0, [r7, #4]
 801ef9a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	2224      	movs	r2, #36	; 0x24
 801efa0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	681b      	ldr	r3, [r3, #0]
 801efa6:	681a      	ldr	r2, [r3, #0]
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	681b      	ldr	r3, [r3, #0]
 801efac:	f022 0201 	bic.w	r2, r2, #1
 801efb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801efb2:	6878      	ldr	r0, [r7, #4]
 801efb4:	f000 fc46 	bl	801f844 <UART_SetConfig>
 801efb8:	4603      	mov	r3, r0
 801efba:	2b01      	cmp	r3, #1
 801efbc:	d101      	bne.n	801efc2 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801efbe:	2301      	movs	r3, #1
 801efc0:	e022      	b.n	801f008 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	d002      	beq.n	801efd0 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801efca:	6878      	ldr	r0, [r7, #4]
 801efcc:	f000 fe9e 	bl	801fd0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	685a      	ldr	r2, [r3, #4]
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801efde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	689a      	ldr	r2, [r3, #8]
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	681b      	ldr	r3, [r3, #0]
 801efea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801efee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	681b      	ldr	r3, [r3, #0]
 801eff4:	681a      	ldr	r2, [r3, #0]
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	681b      	ldr	r3, [r3, #0]
 801effa:	f042 0201 	orr.w	r2, r2, #1
 801effe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f000:	6878      	ldr	r0, [r7, #4]
 801f002:	f000 ff25 	bl	801fe50 <UART_CheckIdleState>
 801f006:	4603      	mov	r3, r0
}
 801f008:	4618      	mov	r0, r3
 801f00a:	3708      	adds	r7, #8
 801f00c:	46bd      	mov	sp, r7
 801f00e:	bd80      	pop	{r7, pc}
 801f010:	08018859 	.word	0x08018859

0801f014 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f014:	b580      	push	{r7, lr}
 801f016:	b08a      	sub	sp, #40	; 0x28
 801f018:	af02      	add	r7, sp, #8
 801f01a:	60f8      	str	r0, [r7, #12]
 801f01c:	60b9      	str	r1, [r7, #8]
 801f01e:	603b      	str	r3, [r7, #0]
 801f020:	4613      	mov	r3, r2
 801f022:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f028:	2b20      	cmp	r3, #32
 801f02a:	d171      	bne.n	801f110 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801f02c:	68bb      	ldr	r3, [r7, #8]
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d002      	beq.n	801f038 <HAL_UART_Transmit+0x24>
 801f032:	88fb      	ldrh	r3, [r7, #6]
 801f034:	2b00      	cmp	r3, #0
 801f036:	d101      	bne.n	801f03c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801f038:	2301      	movs	r3, #1
 801f03a:	e06a      	b.n	801f112 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f03c:	68fb      	ldr	r3, [r7, #12]
 801f03e:	2200      	movs	r2, #0
 801f040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	2221      	movs	r2, #33	; 0x21
 801f048:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f04a:	f7fa fa1b 	bl	8019484 <HAL_GetTick>
 801f04e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	88fa      	ldrh	r2, [r7, #6]
 801f054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	88fa      	ldrh	r2, [r7, #6]
 801f05c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f060:	68fb      	ldr	r3, [r7, #12]
 801f062:	689b      	ldr	r3, [r3, #8]
 801f064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f068:	d108      	bne.n	801f07c <HAL_UART_Transmit+0x68>
 801f06a:	68fb      	ldr	r3, [r7, #12]
 801f06c:	691b      	ldr	r3, [r3, #16]
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d104      	bne.n	801f07c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801f072:	2300      	movs	r3, #0
 801f074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f076:	68bb      	ldr	r3, [r7, #8]
 801f078:	61bb      	str	r3, [r7, #24]
 801f07a:	e003      	b.n	801f084 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801f07c:	68bb      	ldr	r3, [r7, #8]
 801f07e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f080:	2300      	movs	r3, #0
 801f082:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801f084:	e02c      	b.n	801f0e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f086:	683b      	ldr	r3, [r7, #0]
 801f088:	9300      	str	r3, [sp, #0]
 801f08a:	697b      	ldr	r3, [r7, #20]
 801f08c:	2200      	movs	r2, #0
 801f08e:	2180      	movs	r1, #128	; 0x80
 801f090:	68f8      	ldr	r0, [r7, #12]
 801f092:	f000 ff2a 	bl	801feea <UART_WaitOnFlagUntilTimeout>
 801f096:	4603      	mov	r3, r0
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d001      	beq.n	801f0a0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801f09c:	2303      	movs	r3, #3
 801f09e:	e038      	b.n	801f112 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801f0a0:	69fb      	ldr	r3, [r7, #28]
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	d10b      	bne.n	801f0be <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f0a6:	69bb      	ldr	r3, [r7, #24]
 801f0a8:	881b      	ldrh	r3, [r3, #0]
 801f0aa:	461a      	mov	r2, r3
 801f0ac:	68fb      	ldr	r3, [r7, #12]
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f0b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f0b6:	69bb      	ldr	r3, [r7, #24]
 801f0b8:	3302      	adds	r3, #2
 801f0ba:	61bb      	str	r3, [r7, #24]
 801f0bc:	e007      	b.n	801f0ce <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f0be:	69fb      	ldr	r3, [r7, #28]
 801f0c0:	781a      	ldrb	r2, [r3, #0]
 801f0c2:	68fb      	ldr	r3, [r7, #12]
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f0c8:	69fb      	ldr	r3, [r7, #28]
 801f0ca:	3301      	adds	r3, #1
 801f0cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f0ce:	68fb      	ldr	r3, [r7, #12]
 801f0d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801f0d4:	b29b      	uxth	r3, r3
 801f0d6:	3b01      	subs	r3, #1
 801f0d8:	b29a      	uxth	r2, r3
 801f0da:	68fb      	ldr	r3, [r7, #12]
 801f0dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801f0e0:	68fb      	ldr	r3, [r7, #12]
 801f0e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801f0e6:	b29b      	uxth	r3, r3
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d1cc      	bne.n	801f086 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f0ec:	683b      	ldr	r3, [r7, #0]
 801f0ee:	9300      	str	r3, [sp, #0]
 801f0f0:	697b      	ldr	r3, [r7, #20]
 801f0f2:	2200      	movs	r2, #0
 801f0f4:	2140      	movs	r1, #64	; 0x40
 801f0f6:	68f8      	ldr	r0, [r7, #12]
 801f0f8:	f000 fef7 	bl	801feea <UART_WaitOnFlagUntilTimeout>
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d001      	beq.n	801f106 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801f102:	2303      	movs	r3, #3
 801f104:	e005      	b.n	801f112 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	2220      	movs	r2, #32
 801f10a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801f10c:	2300      	movs	r3, #0
 801f10e:	e000      	b.n	801f112 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801f110:	2302      	movs	r3, #2
  }
}
 801f112:	4618      	mov	r0, r3
 801f114:	3720      	adds	r7, #32
 801f116:	46bd      	mov	sp, r7
 801f118:	bd80      	pop	{r7, pc}
	...

0801f11c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801f11c:	b580      	push	{r7, lr}
 801f11e:	b0ba      	sub	sp, #232	; 0xe8
 801f120:	af00      	add	r7, sp, #0
 801f122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	69db      	ldr	r3, [r3, #28]
 801f12a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	681b      	ldr	r3, [r3, #0]
 801f13c:	689b      	ldr	r3, [r3, #8]
 801f13e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801f142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801f146:	f640 030f 	movw	r3, #2063	; 0x80f
 801f14a:	4013      	ands	r3, r2
 801f14c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801f150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801f154:	2b00      	cmp	r3, #0
 801f156:	d115      	bne.n	801f184 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801f158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f15c:	f003 0320 	and.w	r3, r3, #32
 801f160:	2b00      	cmp	r3, #0
 801f162:	d00f      	beq.n	801f184 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801f164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f168:	f003 0320 	and.w	r3, r3, #32
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	d009      	beq.n	801f184 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f174:	2b00      	cmp	r3, #0
 801f176:	f000 82b8 	beq.w	801f6ea <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f17e:	6878      	ldr	r0, [r7, #4]
 801f180:	4798      	blx	r3
      }
      return;
 801f182:	e2b2      	b.n	801f6ea <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801f184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801f188:	2b00      	cmp	r3, #0
 801f18a:	f000 811d 	beq.w	801f3c8 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801f18e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f192:	f003 0301 	and.w	r3, r3, #1
 801f196:	2b00      	cmp	r3, #0
 801f198:	d106      	bne.n	801f1a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801f19a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801f19e:	4b88      	ldr	r3, [pc, #544]	; (801f3c0 <HAL_UART_IRQHandler+0x2a4>)
 801f1a0:	4013      	ands	r3, r2
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	f000 8110 	beq.w	801f3c8 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801f1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f1ac:	f003 0301 	and.w	r3, r3, #1
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d011      	beq.n	801f1d8 <HAL_UART_IRQHandler+0xbc>
 801f1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f1b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	d00b      	beq.n	801f1d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	2201      	movs	r2, #1
 801f1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f1ce:	f043 0201 	orr.w	r2, r3, #1
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f1dc:	f003 0302 	and.w	r3, r3, #2
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d011      	beq.n	801f208 <HAL_UART_IRQHandler+0xec>
 801f1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f1e8:	f003 0301 	and.w	r3, r3, #1
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d00b      	beq.n	801f208 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	2202      	movs	r2, #2
 801f1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f1fe:	f043 0204 	orr.w	r2, r3, #4
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f20c:	f003 0304 	and.w	r3, r3, #4
 801f210:	2b00      	cmp	r3, #0
 801f212:	d011      	beq.n	801f238 <HAL_UART_IRQHandler+0x11c>
 801f214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f218:	f003 0301 	and.w	r3, r3, #1
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d00b      	beq.n	801f238 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	2204      	movs	r2, #4
 801f226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f22e:	f043 0202 	orr.w	r2, r3, #2
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801f238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f23c:	f003 0308 	and.w	r3, r3, #8
 801f240:	2b00      	cmp	r3, #0
 801f242:	d017      	beq.n	801f274 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801f244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f248:	f003 0320 	and.w	r3, r3, #32
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	d105      	bne.n	801f25c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801f250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f254:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d00b      	beq.n	801f274 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	2208      	movs	r2, #8
 801f262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801f264:	687b      	ldr	r3, [r7, #4]
 801f266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f26a:	f043 0208 	orr.w	r2, r3, #8
 801f26e:	687b      	ldr	r3, [r7, #4]
 801f270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801f274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d012      	beq.n	801f2a6 <HAL_UART_IRQHandler+0x18a>
 801f280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d00c      	beq.n	801f2a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f29c:	f043 0220 	orr.w	r2, r3, #32
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	f000 821e 	beq.w	801f6ee <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801f2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f2b6:	f003 0320 	and.w	r3, r3, #32
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d00d      	beq.n	801f2da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801f2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f2c2:	f003 0320 	and.w	r3, r3, #32
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	d007      	beq.n	801f2da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d003      	beq.n	801f2da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f2d6:	6878      	ldr	r0, [r7, #4]
 801f2d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f2e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	689b      	ldr	r3, [r3, #8]
 801f2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f2ee:	2b40      	cmp	r3, #64	; 0x40
 801f2f0:	d005      	beq.n	801f2fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801f2f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801f2f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d053      	beq.n	801f3a6 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801f2fe:	6878      	ldr	r0, [r7, #4]
 801f300:	f000 ff80 	bl	8020204 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	689b      	ldr	r3, [r3, #8]
 801f30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f30e:	2b40      	cmp	r3, #64	; 0x40
 801f310:	d143      	bne.n	801f39a <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	3308      	adds	r3, #8
 801f318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f31c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f320:	e853 3f00 	ldrex	r3, [r3]
 801f324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801f328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f32c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	681b      	ldr	r3, [r3, #0]
 801f338:	3308      	adds	r3, #8
 801f33a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801f33e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801f342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801f34a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801f34e:	e841 2300 	strex	r3, r2, [r1]
 801f352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801f356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d1d9      	bne.n	801f312 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f362:	2b00      	cmp	r3, #0
 801f364:	d013      	beq.n	801f38e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f36a:	4a16      	ldr	r2, [pc, #88]	; (801f3c4 <HAL_UART_IRQHandler+0x2a8>)
 801f36c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f372:	4618      	mov	r0, r3
 801f374:	f7fb f98a 	bl	801a68c <HAL_DMA_Abort_IT>
 801f378:	4603      	mov	r3, r0
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d01d      	beq.n	801f3ba <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f384:	687a      	ldr	r2, [r7, #4]
 801f386:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801f388:	4610      	mov	r0, r2
 801f38a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f38c:	e015      	b.n	801f3ba <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801f394:	6878      	ldr	r0, [r7, #4]
 801f396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f398:	e00f      	b.n	801f3ba <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801f3a0:	6878      	ldr	r0, [r7, #4]
 801f3a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f3a4:	e009      	b.n	801f3ba <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801f3ac:	6878      	ldr	r0, [r7, #4]
 801f3ae:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	2200      	movs	r2, #0
 801f3b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801f3b8:	e199      	b.n	801f6ee <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f3ba:	bf00      	nop
    return;
 801f3bc:	e197      	b.n	801f6ee <HAL_UART_IRQHandler+0x5d2>
 801f3be:	bf00      	nop
 801f3c0:	04000120 	.word	0x04000120
 801f3c4:	080202cd 	.word	0x080202cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f3cc:	2b01      	cmp	r3, #1
 801f3ce:	f040 8150 	bne.w	801f672 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801f3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f3d6:	f003 0310 	and.w	r3, r3, #16
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	f000 8149 	beq.w	801f672 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801f3e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f3e4:	f003 0310 	and.w	r3, r3, #16
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	f000 8142 	beq.w	801f672 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	2210      	movs	r2, #16
 801f3f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	689b      	ldr	r3, [r3, #8]
 801f3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f400:	2b40      	cmp	r3, #64	; 0x40
 801f402:	f040 80b8 	bne.w	801f576 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	685b      	ldr	r3, [r3, #4]
 801f40e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801f412:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801f416:	2b00      	cmp	r3, #0
 801f418:	f000 816b 	beq.w	801f6f2 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801f422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801f426:	429a      	cmp	r2, r3
 801f428:	f080 8163 	bcs.w	801f6f2 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801f432:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f43a:	69db      	ldr	r3, [r3, #28]
 801f43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f440:	f000 8086 	beq.w	801f550 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f44c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801f450:	e853 3f00 	ldrex	r3, [r3]
 801f454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801f458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801f45c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	461a      	mov	r2, r3
 801f46a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801f46e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801f472:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f476:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801f47a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801f47e:	e841 2300 	strex	r3, r2, [r1]
 801f482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801f486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	d1da      	bne.n	801f444 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f48e:	687b      	ldr	r3, [r7, #4]
 801f490:	681b      	ldr	r3, [r3, #0]
 801f492:	3308      	adds	r3, #8
 801f494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801f498:	e853 3f00 	ldrex	r3, [r3]
 801f49c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801f49e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f4a0:	f023 0301 	bic.w	r3, r3, #1
 801f4a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	681b      	ldr	r3, [r3, #0]
 801f4ac:	3308      	adds	r3, #8
 801f4ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801f4b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801f4b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f4b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801f4ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801f4be:	e841 2300 	strex	r3, r2, [r1]
 801f4c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801f4c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d1e1      	bne.n	801f48e <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	3308      	adds	r3, #8
 801f4d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f4d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801f4d4:	e853 3f00 	ldrex	r3, [r3]
 801f4d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801f4da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f4dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f4e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	3308      	adds	r3, #8
 801f4ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801f4ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f4f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f4f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801f4f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801f4f6:	e841 2300 	strex	r3, r2, [r1]
 801f4fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801f4fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d1e3      	bne.n	801f4ca <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	2220      	movs	r2, #32
 801f506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	2200      	movs	r2, #0
 801f50e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f518:	e853 3f00 	ldrex	r3, [r3]
 801f51c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801f51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f520:	f023 0310 	bic.w	r3, r3, #16
 801f524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	681b      	ldr	r3, [r3, #0]
 801f52c:	461a      	mov	r2, r3
 801f52e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f532:	65bb      	str	r3, [r7, #88]	; 0x58
 801f534:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f536:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f53a:	e841 2300 	strex	r3, r2, [r1]
 801f53e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801f540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f542:	2b00      	cmp	r3, #0
 801f544:	d1e4      	bne.n	801f510 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801f546:	687b      	ldr	r3, [r7, #4]
 801f548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f54a:	4618      	mov	r0, r3
 801f54c:	f7fb f82e 	bl	801a5ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	2202      	movs	r2, #2
 801f554:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f55c:	687a      	ldr	r2, [r7, #4]
 801f55e:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801f562:	687a      	ldr	r2, [r7, #4]
 801f564:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801f568:	b292      	uxth	r2, r2
 801f56a:	1a8a      	subs	r2, r1, r2
 801f56c:	b292      	uxth	r2, r2
 801f56e:	4611      	mov	r1, r2
 801f570:	6878      	ldr	r0, [r7, #4]
 801f572:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801f574:	e0bd      	b.n	801f6f2 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f582:	b29b      	uxth	r3, r3
 801f584:	1ad3      	subs	r3, r2, r3
 801f586:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f590:	b29b      	uxth	r3, r3
 801f592:	2b00      	cmp	r3, #0
 801f594:	f000 80af 	beq.w	801f6f6 <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801f598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	f000 80aa 	beq.w	801f6f6 <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f5aa:	e853 3f00 	ldrex	r3, [r3]
 801f5ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801f5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f5b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f5b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801f5ba:	687b      	ldr	r3, [r7, #4]
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	461a      	mov	r2, r3
 801f5c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801f5c4:	647b      	str	r3, [r7, #68]	; 0x44
 801f5c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f5c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801f5ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f5cc:	e841 2300 	strex	r3, r2, [r1]
 801f5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801f5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d1e4      	bne.n	801f5a2 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	3308      	adds	r3, #8
 801f5de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5e2:	e853 3f00 	ldrex	r3, [r3]
 801f5e6:	623b      	str	r3, [r7, #32]
   return(result);
 801f5e8:	6a3b      	ldr	r3, [r7, #32]
 801f5ea:	f023 0301 	bic.w	r3, r3, #1
 801f5ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	681b      	ldr	r3, [r3, #0]
 801f5f6:	3308      	adds	r3, #8
 801f5f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801f5fc:	633a      	str	r2, [r7, #48]	; 0x30
 801f5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f604:	e841 2300 	strex	r3, r2, [r1]
 801f608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801f60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	d1e3      	bne.n	801f5d8 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	2220      	movs	r2, #32
 801f614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	2200      	movs	r2, #0
 801f61c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	2200      	movs	r2, #0
 801f622:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f62a:	693b      	ldr	r3, [r7, #16]
 801f62c:	e853 3f00 	ldrex	r3, [r3]
 801f630:	60fb      	str	r3, [r7, #12]
   return(result);
 801f632:	68fb      	ldr	r3, [r7, #12]
 801f634:	f023 0310 	bic.w	r3, r3, #16
 801f638:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	681b      	ldr	r3, [r3, #0]
 801f640:	461a      	mov	r2, r3
 801f642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f646:	61fb      	str	r3, [r7, #28]
 801f648:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f64a:	69b9      	ldr	r1, [r7, #24]
 801f64c:	69fa      	ldr	r2, [r7, #28]
 801f64e:	e841 2300 	strex	r3, r2, [r1]
 801f652:	617b      	str	r3, [r7, #20]
   return(result);
 801f654:	697b      	ldr	r3, [r7, #20]
 801f656:	2b00      	cmp	r3, #0
 801f658:	d1e4      	bne.n	801f624 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	2202      	movs	r2, #2
 801f65e:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801f660:	687b      	ldr	r3, [r7, #4]
 801f662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f666:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801f66a:	4611      	mov	r1, r2
 801f66c:	6878      	ldr	r0, [r7, #4]
 801f66e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801f670:	e041      	b.n	801f6f6 <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801f672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f67a:	2b00      	cmp	r3, #0
 801f67c:	d010      	beq.n	801f6a0 <HAL_UART_IRQHandler+0x584>
 801f67e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f686:	2b00      	cmp	r3, #0
 801f688:	d00a      	beq.n	801f6a0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801f692:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801f694:	687b      	ldr	r3, [r7, #4]
 801f696:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801f69a:	6878      	ldr	r0, [r7, #4]
 801f69c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801f69e:	e02d      	b.n	801f6fc <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801f6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f6a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d00e      	beq.n	801f6ca <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801f6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d008      	beq.n	801f6ca <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d01c      	beq.n	801f6fa <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f6c4:	6878      	ldr	r0, [r7, #4]
 801f6c6:	4798      	blx	r3
    }
    return;
 801f6c8:	e017      	b.n	801f6fa <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801f6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d012      	beq.n	801f6fc <HAL_UART_IRQHandler+0x5e0>
 801f6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d00c      	beq.n	801f6fc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801f6e2:	6878      	ldr	r0, [r7, #4]
 801f6e4:	f000 fe0a 	bl	80202fc <UART_EndTransmit_IT>
    return;
 801f6e8:	e008      	b.n	801f6fc <HAL_UART_IRQHandler+0x5e0>
      return;
 801f6ea:	bf00      	nop
 801f6ec:	e006      	b.n	801f6fc <HAL_UART_IRQHandler+0x5e0>
    return;
 801f6ee:	bf00      	nop
 801f6f0:	e004      	b.n	801f6fc <HAL_UART_IRQHandler+0x5e0>
      return;
 801f6f2:	bf00      	nop
 801f6f4:	e002      	b.n	801f6fc <HAL_UART_IRQHandler+0x5e0>
      return;
 801f6f6:	bf00      	nop
 801f6f8:	e000      	b.n	801f6fc <HAL_UART_IRQHandler+0x5e0>
    return;
 801f6fa:	bf00      	nop
  }

}
 801f6fc:	37e8      	adds	r7, #232	; 0xe8
 801f6fe:	46bd      	mov	sp, r7
 801f700:	bd80      	pop	{r7, pc}
 801f702:	bf00      	nop

0801f704 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801f704:	b480      	push	{r7}
 801f706:	b083      	sub	sp, #12
 801f708:	af00      	add	r7, sp, #0
 801f70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801f70c:	bf00      	nop
 801f70e:	370c      	adds	r7, #12
 801f710:	46bd      	mov	sp, r7
 801f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f716:	4770      	bx	lr

0801f718 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801f718:	b480      	push	{r7}
 801f71a:	b083      	sub	sp, #12
 801f71c:	af00      	add	r7, sp, #0
 801f71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801f720:	bf00      	nop
 801f722:	370c      	adds	r7, #12
 801f724:	46bd      	mov	sp, r7
 801f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f72a:	4770      	bx	lr

0801f72c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801f72c:	b480      	push	{r7}
 801f72e:	b083      	sub	sp, #12
 801f730:	af00      	add	r7, sp, #0
 801f732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801f734:	bf00      	nop
 801f736:	370c      	adds	r7, #12
 801f738:	46bd      	mov	sp, r7
 801f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f73e:	4770      	bx	lr

0801f740 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801f740:	b480      	push	{r7}
 801f742:	b083      	sub	sp, #12
 801f744:	af00      	add	r7, sp, #0
 801f746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801f748:	bf00      	nop
 801f74a:	370c      	adds	r7, #12
 801f74c:	46bd      	mov	sp, r7
 801f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f752:	4770      	bx	lr

0801f754 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801f754:	b480      	push	{r7}
 801f756:	b083      	sub	sp, #12
 801f758:	af00      	add	r7, sp, #0
 801f75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801f75c:	bf00      	nop
 801f75e:	370c      	adds	r7, #12
 801f760:	46bd      	mov	sp, r7
 801f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f766:	4770      	bx	lr

0801f768 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801f768:	b480      	push	{r7}
 801f76a:	b083      	sub	sp, #12
 801f76c:	af00      	add	r7, sp, #0
 801f76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801f770:	bf00      	nop
 801f772:	370c      	adds	r7, #12
 801f774:	46bd      	mov	sp, r7
 801f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f77a:	4770      	bx	lr

0801f77c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801f77c:	b480      	push	{r7}
 801f77e:	b083      	sub	sp, #12
 801f780:	af00      	add	r7, sp, #0
 801f782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801f784:	bf00      	nop
 801f786:	370c      	adds	r7, #12
 801f788:	46bd      	mov	sp, r7
 801f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f78e:	4770      	bx	lr

0801f790 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801f790:	b480      	push	{r7}
 801f792:	b083      	sub	sp, #12
 801f794:	af00      	add	r7, sp, #0
 801f796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801f798:	bf00      	nop
 801f79a:	370c      	adds	r7, #12
 801f79c:	46bd      	mov	sp, r7
 801f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7a2:	4770      	bx	lr

0801f7a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f7a4:	b480      	push	{r7}
 801f7a6:	b083      	sub	sp, #12
 801f7a8:	af00      	add	r7, sp, #0
 801f7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f7ac:	bf00      	nop
 801f7ae:	370c      	adds	r7, #12
 801f7b0:	46bd      	mov	sp, r7
 801f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7b6:	4770      	bx	lr

0801f7b8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801f7b8:	b480      	push	{r7}
 801f7ba:	b083      	sub	sp, #12
 801f7bc:	af00      	add	r7, sp, #0
 801f7be:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	4a16      	ldr	r2, [pc, #88]	; (801f81c <UART_InitCallbacksToDefault+0x64>)
 801f7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801f7c8:	687b      	ldr	r3, [r7, #4]
 801f7ca:	4a15      	ldr	r2, [pc, #84]	; (801f820 <UART_InitCallbacksToDefault+0x68>)
 801f7cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	4a14      	ldr	r2, [pc, #80]	; (801f824 <UART_InitCallbacksToDefault+0x6c>)
 801f7d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	4a13      	ldr	r2, [pc, #76]	; (801f828 <UART_InitCallbacksToDefault+0x70>)
 801f7dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	4a12      	ldr	r2, [pc, #72]	; (801f82c <UART_InitCallbacksToDefault+0x74>)
 801f7e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	4a11      	ldr	r2, [pc, #68]	; (801f830 <UART_InitCallbacksToDefault+0x78>)
 801f7ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	4a10      	ldr	r2, [pc, #64]	; (801f834 <UART_InitCallbacksToDefault+0x7c>)
 801f7f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	4a0f      	ldr	r2, [pc, #60]	; (801f838 <UART_InitCallbacksToDefault+0x80>)
 801f7fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	4a0e      	ldr	r2, [pc, #56]	; (801f83c <UART_InitCallbacksToDefault+0x84>)
 801f804:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	4a0d      	ldr	r2, [pc, #52]	; (801f840 <UART_InitCallbacksToDefault+0x88>)
 801f80c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801f810:	bf00      	nop
 801f812:	370c      	adds	r7, #12
 801f814:	46bd      	mov	sp, r7
 801f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f81a:	4770      	bx	lr
 801f81c:	0801f719 	.word	0x0801f719
 801f820:	0801f705 	.word	0x0801f705
 801f824:	0801f741 	.word	0x0801f741
 801f828:	0801f72d 	.word	0x0801f72d
 801f82c:	0801f755 	.word	0x0801f755
 801f830:	0801f769 	.word	0x0801f769
 801f834:	0801f77d 	.word	0x0801f77d
 801f838:	0801f791 	.word	0x0801f791
 801f83c:	0801f7a5 	.word	0x0801f7a5
 801f840:	08018bbd 	.word	0x08018bbd

0801f844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f844:	b580      	push	{r7, lr}
 801f846:	b088      	sub	sp, #32
 801f848:	af00      	add	r7, sp, #0
 801f84a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f84c:	2300      	movs	r3, #0
 801f84e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	689a      	ldr	r2, [r3, #8]
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	691b      	ldr	r3, [r3, #16]
 801f858:	431a      	orrs	r2, r3
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	695b      	ldr	r3, [r3, #20]
 801f85e:	431a      	orrs	r2, r3
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	69db      	ldr	r3, [r3, #28]
 801f864:	4313      	orrs	r3, r2
 801f866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	681b      	ldr	r3, [r3, #0]
 801f86c:	681a      	ldr	r2, [r3, #0]
 801f86e:	4ba6      	ldr	r3, [pc, #664]	; (801fb08 <UART_SetConfig+0x2c4>)
 801f870:	4013      	ands	r3, r2
 801f872:	687a      	ldr	r2, [r7, #4]
 801f874:	6812      	ldr	r2, [r2, #0]
 801f876:	6979      	ldr	r1, [r7, #20]
 801f878:	430b      	orrs	r3, r1
 801f87a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	685b      	ldr	r3, [r3, #4]
 801f882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	68da      	ldr	r2, [r3, #12]
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	681b      	ldr	r3, [r3, #0]
 801f88e:	430a      	orrs	r2, r1
 801f890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f892:	687b      	ldr	r3, [r7, #4]
 801f894:	699b      	ldr	r3, [r3, #24]
 801f896:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	6a1b      	ldr	r3, [r3, #32]
 801f89c:	697a      	ldr	r2, [r7, #20]
 801f89e:	4313      	orrs	r3, r2
 801f8a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	689b      	ldr	r3, [r3, #8]
 801f8a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	681b      	ldr	r3, [r3, #0]
 801f8b0:	697a      	ldr	r2, [r7, #20]
 801f8b2:	430a      	orrs	r2, r1
 801f8b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	681b      	ldr	r3, [r3, #0]
 801f8ba:	4a94      	ldr	r2, [pc, #592]	; (801fb0c <UART_SetConfig+0x2c8>)
 801f8bc:	4293      	cmp	r3, r2
 801f8be:	d120      	bne.n	801f902 <UART_SetConfig+0xbe>
 801f8c0:	4b93      	ldr	r3, [pc, #588]	; (801fb10 <UART_SetConfig+0x2cc>)
 801f8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f8c6:	f003 0303 	and.w	r3, r3, #3
 801f8ca:	2b03      	cmp	r3, #3
 801f8cc:	d816      	bhi.n	801f8fc <UART_SetConfig+0xb8>
 801f8ce:	a201      	add	r2, pc, #4	; (adr r2, 801f8d4 <UART_SetConfig+0x90>)
 801f8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f8d4:	0801f8e5 	.word	0x0801f8e5
 801f8d8:	0801f8f1 	.word	0x0801f8f1
 801f8dc:	0801f8eb 	.word	0x0801f8eb
 801f8e0:	0801f8f7 	.word	0x0801f8f7
 801f8e4:	2301      	movs	r3, #1
 801f8e6:	77fb      	strb	r3, [r7, #31]
 801f8e8:	e150      	b.n	801fb8c <UART_SetConfig+0x348>
 801f8ea:	2302      	movs	r3, #2
 801f8ec:	77fb      	strb	r3, [r7, #31]
 801f8ee:	e14d      	b.n	801fb8c <UART_SetConfig+0x348>
 801f8f0:	2304      	movs	r3, #4
 801f8f2:	77fb      	strb	r3, [r7, #31]
 801f8f4:	e14a      	b.n	801fb8c <UART_SetConfig+0x348>
 801f8f6:	2308      	movs	r3, #8
 801f8f8:	77fb      	strb	r3, [r7, #31]
 801f8fa:	e147      	b.n	801fb8c <UART_SetConfig+0x348>
 801f8fc:	2310      	movs	r3, #16
 801f8fe:	77fb      	strb	r3, [r7, #31]
 801f900:	e144      	b.n	801fb8c <UART_SetConfig+0x348>
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	681b      	ldr	r3, [r3, #0]
 801f906:	4a83      	ldr	r2, [pc, #524]	; (801fb14 <UART_SetConfig+0x2d0>)
 801f908:	4293      	cmp	r3, r2
 801f90a:	d132      	bne.n	801f972 <UART_SetConfig+0x12e>
 801f90c:	4b80      	ldr	r3, [pc, #512]	; (801fb10 <UART_SetConfig+0x2cc>)
 801f90e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f912:	f003 030c 	and.w	r3, r3, #12
 801f916:	2b0c      	cmp	r3, #12
 801f918:	d828      	bhi.n	801f96c <UART_SetConfig+0x128>
 801f91a:	a201      	add	r2, pc, #4	; (adr r2, 801f920 <UART_SetConfig+0xdc>)
 801f91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f920:	0801f955 	.word	0x0801f955
 801f924:	0801f96d 	.word	0x0801f96d
 801f928:	0801f96d 	.word	0x0801f96d
 801f92c:	0801f96d 	.word	0x0801f96d
 801f930:	0801f961 	.word	0x0801f961
 801f934:	0801f96d 	.word	0x0801f96d
 801f938:	0801f96d 	.word	0x0801f96d
 801f93c:	0801f96d 	.word	0x0801f96d
 801f940:	0801f95b 	.word	0x0801f95b
 801f944:	0801f96d 	.word	0x0801f96d
 801f948:	0801f96d 	.word	0x0801f96d
 801f94c:	0801f96d 	.word	0x0801f96d
 801f950:	0801f967 	.word	0x0801f967
 801f954:	2300      	movs	r3, #0
 801f956:	77fb      	strb	r3, [r7, #31]
 801f958:	e118      	b.n	801fb8c <UART_SetConfig+0x348>
 801f95a:	2302      	movs	r3, #2
 801f95c:	77fb      	strb	r3, [r7, #31]
 801f95e:	e115      	b.n	801fb8c <UART_SetConfig+0x348>
 801f960:	2304      	movs	r3, #4
 801f962:	77fb      	strb	r3, [r7, #31]
 801f964:	e112      	b.n	801fb8c <UART_SetConfig+0x348>
 801f966:	2308      	movs	r3, #8
 801f968:	77fb      	strb	r3, [r7, #31]
 801f96a:	e10f      	b.n	801fb8c <UART_SetConfig+0x348>
 801f96c:	2310      	movs	r3, #16
 801f96e:	77fb      	strb	r3, [r7, #31]
 801f970:	e10c      	b.n	801fb8c <UART_SetConfig+0x348>
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	4a68      	ldr	r2, [pc, #416]	; (801fb18 <UART_SetConfig+0x2d4>)
 801f978:	4293      	cmp	r3, r2
 801f97a:	d120      	bne.n	801f9be <UART_SetConfig+0x17a>
 801f97c:	4b64      	ldr	r3, [pc, #400]	; (801fb10 <UART_SetConfig+0x2cc>)
 801f97e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f982:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f986:	2b30      	cmp	r3, #48	; 0x30
 801f988:	d013      	beq.n	801f9b2 <UART_SetConfig+0x16e>
 801f98a:	2b30      	cmp	r3, #48	; 0x30
 801f98c:	d814      	bhi.n	801f9b8 <UART_SetConfig+0x174>
 801f98e:	2b20      	cmp	r3, #32
 801f990:	d009      	beq.n	801f9a6 <UART_SetConfig+0x162>
 801f992:	2b20      	cmp	r3, #32
 801f994:	d810      	bhi.n	801f9b8 <UART_SetConfig+0x174>
 801f996:	2b00      	cmp	r3, #0
 801f998:	d002      	beq.n	801f9a0 <UART_SetConfig+0x15c>
 801f99a:	2b10      	cmp	r3, #16
 801f99c:	d006      	beq.n	801f9ac <UART_SetConfig+0x168>
 801f99e:	e00b      	b.n	801f9b8 <UART_SetConfig+0x174>
 801f9a0:	2300      	movs	r3, #0
 801f9a2:	77fb      	strb	r3, [r7, #31]
 801f9a4:	e0f2      	b.n	801fb8c <UART_SetConfig+0x348>
 801f9a6:	2302      	movs	r3, #2
 801f9a8:	77fb      	strb	r3, [r7, #31]
 801f9aa:	e0ef      	b.n	801fb8c <UART_SetConfig+0x348>
 801f9ac:	2304      	movs	r3, #4
 801f9ae:	77fb      	strb	r3, [r7, #31]
 801f9b0:	e0ec      	b.n	801fb8c <UART_SetConfig+0x348>
 801f9b2:	2308      	movs	r3, #8
 801f9b4:	77fb      	strb	r3, [r7, #31]
 801f9b6:	e0e9      	b.n	801fb8c <UART_SetConfig+0x348>
 801f9b8:	2310      	movs	r3, #16
 801f9ba:	77fb      	strb	r3, [r7, #31]
 801f9bc:	e0e6      	b.n	801fb8c <UART_SetConfig+0x348>
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	4a56      	ldr	r2, [pc, #344]	; (801fb1c <UART_SetConfig+0x2d8>)
 801f9c4:	4293      	cmp	r3, r2
 801f9c6:	d120      	bne.n	801fa0a <UART_SetConfig+0x1c6>
 801f9c8:	4b51      	ldr	r3, [pc, #324]	; (801fb10 <UART_SetConfig+0x2cc>)
 801f9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f9ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f9d2:	2bc0      	cmp	r3, #192	; 0xc0
 801f9d4:	d013      	beq.n	801f9fe <UART_SetConfig+0x1ba>
 801f9d6:	2bc0      	cmp	r3, #192	; 0xc0
 801f9d8:	d814      	bhi.n	801fa04 <UART_SetConfig+0x1c0>
 801f9da:	2b80      	cmp	r3, #128	; 0x80
 801f9dc:	d009      	beq.n	801f9f2 <UART_SetConfig+0x1ae>
 801f9de:	2b80      	cmp	r3, #128	; 0x80
 801f9e0:	d810      	bhi.n	801fa04 <UART_SetConfig+0x1c0>
 801f9e2:	2b00      	cmp	r3, #0
 801f9e4:	d002      	beq.n	801f9ec <UART_SetConfig+0x1a8>
 801f9e6:	2b40      	cmp	r3, #64	; 0x40
 801f9e8:	d006      	beq.n	801f9f8 <UART_SetConfig+0x1b4>
 801f9ea:	e00b      	b.n	801fa04 <UART_SetConfig+0x1c0>
 801f9ec:	2300      	movs	r3, #0
 801f9ee:	77fb      	strb	r3, [r7, #31]
 801f9f0:	e0cc      	b.n	801fb8c <UART_SetConfig+0x348>
 801f9f2:	2302      	movs	r3, #2
 801f9f4:	77fb      	strb	r3, [r7, #31]
 801f9f6:	e0c9      	b.n	801fb8c <UART_SetConfig+0x348>
 801f9f8:	2304      	movs	r3, #4
 801f9fa:	77fb      	strb	r3, [r7, #31]
 801f9fc:	e0c6      	b.n	801fb8c <UART_SetConfig+0x348>
 801f9fe:	2308      	movs	r3, #8
 801fa00:	77fb      	strb	r3, [r7, #31]
 801fa02:	e0c3      	b.n	801fb8c <UART_SetConfig+0x348>
 801fa04:	2310      	movs	r3, #16
 801fa06:	77fb      	strb	r3, [r7, #31]
 801fa08:	e0c0      	b.n	801fb8c <UART_SetConfig+0x348>
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	4a44      	ldr	r2, [pc, #272]	; (801fb20 <UART_SetConfig+0x2dc>)
 801fa10:	4293      	cmp	r3, r2
 801fa12:	d125      	bne.n	801fa60 <UART_SetConfig+0x21c>
 801fa14:	4b3e      	ldr	r3, [pc, #248]	; (801fb10 <UART_SetConfig+0x2cc>)
 801fa16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fa1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fa1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801fa22:	d017      	beq.n	801fa54 <UART_SetConfig+0x210>
 801fa24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801fa28:	d817      	bhi.n	801fa5a <UART_SetConfig+0x216>
 801fa2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fa2e:	d00b      	beq.n	801fa48 <UART_SetConfig+0x204>
 801fa30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fa34:	d811      	bhi.n	801fa5a <UART_SetConfig+0x216>
 801fa36:	2b00      	cmp	r3, #0
 801fa38:	d003      	beq.n	801fa42 <UART_SetConfig+0x1fe>
 801fa3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fa3e:	d006      	beq.n	801fa4e <UART_SetConfig+0x20a>
 801fa40:	e00b      	b.n	801fa5a <UART_SetConfig+0x216>
 801fa42:	2300      	movs	r3, #0
 801fa44:	77fb      	strb	r3, [r7, #31]
 801fa46:	e0a1      	b.n	801fb8c <UART_SetConfig+0x348>
 801fa48:	2302      	movs	r3, #2
 801fa4a:	77fb      	strb	r3, [r7, #31]
 801fa4c:	e09e      	b.n	801fb8c <UART_SetConfig+0x348>
 801fa4e:	2304      	movs	r3, #4
 801fa50:	77fb      	strb	r3, [r7, #31]
 801fa52:	e09b      	b.n	801fb8c <UART_SetConfig+0x348>
 801fa54:	2308      	movs	r3, #8
 801fa56:	77fb      	strb	r3, [r7, #31]
 801fa58:	e098      	b.n	801fb8c <UART_SetConfig+0x348>
 801fa5a:	2310      	movs	r3, #16
 801fa5c:	77fb      	strb	r3, [r7, #31]
 801fa5e:	e095      	b.n	801fb8c <UART_SetConfig+0x348>
 801fa60:	687b      	ldr	r3, [r7, #4]
 801fa62:	681b      	ldr	r3, [r3, #0]
 801fa64:	4a2f      	ldr	r2, [pc, #188]	; (801fb24 <UART_SetConfig+0x2e0>)
 801fa66:	4293      	cmp	r3, r2
 801fa68:	d125      	bne.n	801fab6 <UART_SetConfig+0x272>
 801fa6a:	4b29      	ldr	r3, [pc, #164]	; (801fb10 <UART_SetConfig+0x2cc>)
 801fa6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fa70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801fa74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801fa78:	d017      	beq.n	801faaa <UART_SetConfig+0x266>
 801fa7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801fa7e:	d817      	bhi.n	801fab0 <UART_SetConfig+0x26c>
 801fa80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fa84:	d00b      	beq.n	801fa9e <UART_SetConfig+0x25a>
 801fa86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fa8a:	d811      	bhi.n	801fab0 <UART_SetConfig+0x26c>
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d003      	beq.n	801fa98 <UART_SetConfig+0x254>
 801fa90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fa94:	d006      	beq.n	801faa4 <UART_SetConfig+0x260>
 801fa96:	e00b      	b.n	801fab0 <UART_SetConfig+0x26c>
 801fa98:	2301      	movs	r3, #1
 801fa9a:	77fb      	strb	r3, [r7, #31]
 801fa9c:	e076      	b.n	801fb8c <UART_SetConfig+0x348>
 801fa9e:	2302      	movs	r3, #2
 801faa0:	77fb      	strb	r3, [r7, #31]
 801faa2:	e073      	b.n	801fb8c <UART_SetConfig+0x348>
 801faa4:	2304      	movs	r3, #4
 801faa6:	77fb      	strb	r3, [r7, #31]
 801faa8:	e070      	b.n	801fb8c <UART_SetConfig+0x348>
 801faaa:	2308      	movs	r3, #8
 801faac:	77fb      	strb	r3, [r7, #31]
 801faae:	e06d      	b.n	801fb8c <UART_SetConfig+0x348>
 801fab0:	2310      	movs	r3, #16
 801fab2:	77fb      	strb	r3, [r7, #31]
 801fab4:	e06a      	b.n	801fb8c <UART_SetConfig+0x348>
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	681b      	ldr	r3, [r3, #0]
 801faba:	4a1b      	ldr	r2, [pc, #108]	; (801fb28 <UART_SetConfig+0x2e4>)
 801fabc:	4293      	cmp	r3, r2
 801fabe:	d138      	bne.n	801fb32 <UART_SetConfig+0x2ee>
 801fac0:	4b13      	ldr	r3, [pc, #76]	; (801fb10 <UART_SetConfig+0x2cc>)
 801fac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fac6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801faca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801face:	d017      	beq.n	801fb00 <UART_SetConfig+0x2bc>
 801fad0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801fad4:	d82a      	bhi.n	801fb2c <UART_SetConfig+0x2e8>
 801fad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fada:	d00b      	beq.n	801faf4 <UART_SetConfig+0x2b0>
 801fadc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801fae0:	d824      	bhi.n	801fb2c <UART_SetConfig+0x2e8>
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d003      	beq.n	801faee <UART_SetConfig+0x2aa>
 801fae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801faea:	d006      	beq.n	801fafa <UART_SetConfig+0x2b6>
 801faec:	e01e      	b.n	801fb2c <UART_SetConfig+0x2e8>
 801faee:	2300      	movs	r3, #0
 801faf0:	77fb      	strb	r3, [r7, #31]
 801faf2:	e04b      	b.n	801fb8c <UART_SetConfig+0x348>
 801faf4:	2302      	movs	r3, #2
 801faf6:	77fb      	strb	r3, [r7, #31]
 801faf8:	e048      	b.n	801fb8c <UART_SetConfig+0x348>
 801fafa:	2304      	movs	r3, #4
 801fafc:	77fb      	strb	r3, [r7, #31]
 801fafe:	e045      	b.n	801fb8c <UART_SetConfig+0x348>
 801fb00:	2308      	movs	r3, #8
 801fb02:	77fb      	strb	r3, [r7, #31]
 801fb04:	e042      	b.n	801fb8c <UART_SetConfig+0x348>
 801fb06:	bf00      	nop
 801fb08:	efff69f3 	.word	0xefff69f3
 801fb0c:	40011000 	.word	0x40011000
 801fb10:	40023800 	.word	0x40023800
 801fb14:	40004400 	.word	0x40004400
 801fb18:	40004800 	.word	0x40004800
 801fb1c:	40004c00 	.word	0x40004c00
 801fb20:	40005000 	.word	0x40005000
 801fb24:	40011400 	.word	0x40011400
 801fb28:	40007800 	.word	0x40007800
 801fb2c:	2310      	movs	r3, #16
 801fb2e:	77fb      	strb	r3, [r7, #31]
 801fb30:	e02c      	b.n	801fb8c <UART_SetConfig+0x348>
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	4a72      	ldr	r2, [pc, #456]	; (801fd00 <UART_SetConfig+0x4bc>)
 801fb38:	4293      	cmp	r3, r2
 801fb3a:	d125      	bne.n	801fb88 <UART_SetConfig+0x344>
 801fb3c:	4b71      	ldr	r3, [pc, #452]	; (801fd04 <UART_SetConfig+0x4c0>)
 801fb3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fb42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801fb46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801fb4a:	d017      	beq.n	801fb7c <UART_SetConfig+0x338>
 801fb4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801fb50:	d817      	bhi.n	801fb82 <UART_SetConfig+0x33e>
 801fb52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fb56:	d00b      	beq.n	801fb70 <UART_SetConfig+0x32c>
 801fb58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fb5c:	d811      	bhi.n	801fb82 <UART_SetConfig+0x33e>
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d003      	beq.n	801fb6a <UART_SetConfig+0x326>
 801fb62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801fb66:	d006      	beq.n	801fb76 <UART_SetConfig+0x332>
 801fb68:	e00b      	b.n	801fb82 <UART_SetConfig+0x33e>
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	77fb      	strb	r3, [r7, #31]
 801fb6e:	e00d      	b.n	801fb8c <UART_SetConfig+0x348>
 801fb70:	2302      	movs	r3, #2
 801fb72:	77fb      	strb	r3, [r7, #31]
 801fb74:	e00a      	b.n	801fb8c <UART_SetConfig+0x348>
 801fb76:	2304      	movs	r3, #4
 801fb78:	77fb      	strb	r3, [r7, #31]
 801fb7a:	e007      	b.n	801fb8c <UART_SetConfig+0x348>
 801fb7c:	2308      	movs	r3, #8
 801fb7e:	77fb      	strb	r3, [r7, #31]
 801fb80:	e004      	b.n	801fb8c <UART_SetConfig+0x348>
 801fb82:	2310      	movs	r3, #16
 801fb84:	77fb      	strb	r3, [r7, #31]
 801fb86:	e001      	b.n	801fb8c <UART_SetConfig+0x348>
 801fb88:	2310      	movs	r3, #16
 801fb8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	69db      	ldr	r3, [r3, #28]
 801fb90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fb94:	d15b      	bne.n	801fc4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801fb96:	7ffb      	ldrb	r3, [r7, #31]
 801fb98:	2b08      	cmp	r3, #8
 801fb9a:	d828      	bhi.n	801fbee <UART_SetConfig+0x3aa>
 801fb9c:	a201      	add	r2, pc, #4	; (adr r2, 801fba4 <UART_SetConfig+0x360>)
 801fb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fba2:	bf00      	nop
 801fba4:	0801fbc9 	.word	0x0801fbc9
 801fba8:	0801fbd1 	.word	0x0801fbd1
 801fbac:	0801fbd9 	.word	0x0801fbd9
 801fbb0:	0801fbef 	.word	0x0801fbef
 801fbb4:	0801fbdf 	.word	0x0801fbdf
 801fbb8:	0801fbef 	.word	0x0801fbef
 801fbbc:	0801fbef 	.word	0x0801fbef
 801fbc0:	0801fbef 	.word	0x0801fbef
 801fbc4:	0801fbe7 	.word	0x0801fbe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fbc8:	f7fd fc3e 	bl	801d448 <HAL_RCC_GetPCLK1Freq>
 801fbcc:	61b8      	str	r0, [r7, #24]
        break;
 801fbce:	e013      	b.n	801fbf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fbd0:	f7fd fc4e 	bl	801d470 <HAL_RCC_GetPCLK2Freq>
 801fbd4:	61b8      	str	r0, [r7, #24]
        break;
 801fbd6:	e00f      	b.n	801fbf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fbd8:	4b4b      	ldr	r3, [pc, #300]	; (801fd08 <UART_SetConfig+0x4c4>)
 801fbda:	61bb      	str	r3, [r7, #24]
        break;
 801fbdc:	e00c      	b.n	801fbf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fbde:	f7fd fb61 	bl	801d2a4 <HAL_RCC_GetSysClockFreq>
 801fbe2:	61b8      	str	r0, [r7, #24]
        break;
 801fbe4:	e008      	b.n	801fbf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fbe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fbea:	61bb      	str	r3, [r7, #24]
        break;
 801fbec:	e004      	b.n	801fbf8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801fbee:	2300      	movs	r3, #0
 801fbf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801fbf2:	2301      	movs	r3, #1
 801fbf4:	77bb      	strb	r3, [r7, #30]
        break;
 801fbf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801fbf8:	69bb      	ldr	r3, [r7, #24]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d074      	beq.n	801fce8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801fbfe:	69bb      	ldr	r3, [r7, #24]
 801fc00:	005a      	lsls	r2, r3, #1
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	685b      	ldr	r3, [r3, #4]
 801fc06:	085b      	lsrs	r3, r3, #1
 801fc08:	441a      	add	r2, r3
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	685b      	ldr	r3, [r3, #4]
 801fc0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801fc12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fc14:	693b      	ldr	r3, [r7, #16]
 801fc16:	2b0f      	cmp	r3, #15
 801fc18:	d916      	bls.n	801fc48 <UART_SetConfig+0x404>
 801fc1a:	693b      	ldr	r3, [r7, #16]
 801fc1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fc20:	d212      	bcs.n	801fc48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801fc22:	693b      	ldr	r3, [r7, #16]
 801fc24:	b29b      	uxth	r3, r3
 801fc26:	f023 030f 	bic.w	r3, r3, #15
 801fc2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801fc2c:	693b      	ldr	r3, [r7, #16]
 801fc2e:	085b      	lsrs	r3, r3, #1
 801fc30:	b29b      	uxth	r3, r3
 801fc32:	f003 0307 	and.w	r3, r3, #7
 801fc36:	b29a      	uxth	r2, r3
 801fc38:	89fb      	ldrh	r3, [r7, #14]
 801fc3a:	4313      	orrs	r3, r2
 801fc3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	89fa      	ldrh	r2, [r7, #14]
 801fc44:	60da      	str	r2, [r3, #12]
 801fc46:	e04f      	b.n	801fce8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801fc48:	2301      	movs	r3, #1
 801fc4a:	77bb      	strb	r3, [r7, #30]
 801fc4c:	e04c      	b.n	801fce8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801fc4e:	7ffb      	ldrb	r3, [r7, #31]
 801fc50:	2b08      	cmp	r3, #8
 801fc52:	d828      	bhi.n	801fca6 <UART_SetConfig+0x462>
 801fc54:	a201      	add	r2, pc, #4	; (adr r2, 801fc5c <UART_SetConfig+0x418>)
 801fc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc5a:	bf00      	nop
 801fc5c:	0801fc81 	.word	0x0801fc81
 801fc60:	0801fc89 	.word	0x0801fc89
 801fc64:	0801fc91 	.word	0x0801fc91
 801fc68:	0801fca7 	.word	0x0801fca7
 801fc6c:	0801fc97 	.word	0x0801fc97
 801fc70:	0801fca7 	.word	0x0801fca7
 801fc74:	0801fca7 	.word	0x0801fca7
 801fc78:	0801fca7 	.word	0x0801fca7
 801fc7c:	0801fc9f 	.word	0x0801fc9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fc80:	f7fd fbe2 	bl	801d448 <HAL_RCC_GetPCLK1Freq>
 801fc84:	61b8      	str	r0, [r7, #24]
        break;
 801fc86:	e013      	b.n	801fcb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fc88:	f7fd fbf2 	bl	801d470 <HAL_RCC_GetPCLK2Freq>
 801fc8c:	61b8      	str	r0, [r7, #24]
        break;
 801fc8e:	e00f      	b.n	801fcb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fc90:	4b1d      	ldr	r3, [pc, #116]	; (801fd08 <UART_SetConfig+0x4c4>)
 801fc92:	61bb      	str	r3, [r7, #24]
        break;
 801fc94:	e00c      	b.n	801fcb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fc96:	f7fd fb05 	bl	801d2a4 <HAL_RCC_GetSysClockFreq>
 801fc9a:	61b8      	str	r0, [r7, #24]
        break;
 801fc9c:	e008      	b.n	801fcb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fc9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fca2:	61bb      	str	r3, [r7, #24]
        break;
 801fca4:	e004      	b.n	801fcb0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801fca6:	2300      	movs	r3, #0
 801fca8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801fcaa:	2301      	movs	r3, #1
 801fcac:	77bb      	strb	r3, [r7, #30]
        break;
 801fcae:	bf00      	nop
    }

    if (pclk != 0U)
 801fcb0:	69bb      	ldr	r3, [r7, #24]
 801fcb2:	2b00      	cmp	r3, #0
 801fcb4:	d018      	beq.n	801fce8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	685b      	ldr	r3, [r3, #4]
 801fcba:	085a      	lsrs	r2, r3, #1
 801fcbc:	69bb      	ldr	r3, [r7, #24]
 801fcbe:	441a      	add	r2, r3
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	685b      	ldr	r3, [r3, #4]
 801fcc4:	fbb2 f3f3 	udiv	r3, r2, r3
 801fcc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fcca:	693b      	ldr	r3, [r7, #16]
 801fccc:	2b0f      	cmp	r3, #15
 801fcce:	d909      	bls.n	801fce4 <UART_SetConfig+0x4a0>
 801fcd0:	693b      	ldr	r3, [r7, #16]
 801fcd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fcd6:	d205      	bcs.n	801fce4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801fcd8:	693b      	ldr	r3, [r7, #16]
 801fcda:	b29a      	uxth	r2, r3
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	681b      	ldr	r3, [r3, #0]
 801fce0:	60da      	str	r2, [r3, #12]
 801fce2:	e001      	b.n	801fce8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801fce4:	2301      	movs	r3, #1
 801fce6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	2200      	movs	r2, #0
 801fcec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	2200      	movs	r2, #0
 801fcf2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801fcf4:	7fbb      	ldrb	r3, [r7, #30]
}
 801fcf6:	4618      	mov	r0, r3
 801fcf8:	3720      	adds	r7, #32
 801fcfa:	46bd      	mov	sp, r7
 801fcfc:	bd80      	pop	{r7, pc}
 801fcfe:	bf00      	nop
 801fd00:	40007c00 	.word	0x40007c00
 801fd04:	40023800 	.word	0x40023800
 801fd08:	00f42400 	.word	0x00f42400

0801fd0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801fd0c:	b480      	push	{r7}
 801fd0e:	b083      	sub	sp, #12
 801fd10:	af00      	add	r7, sp, #0
 801fd12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd18:	f003 0301 	and.w	r3, r3, #1
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d00a      	beq.n	801fd36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	685b      	ldr	r3, [r3, #4]
 801fd26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	430a      	orrs	r2, r1
 801fd34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd3a:	f003 0302 	and.w	r3, r3, #2
 801fd3e:	2b00      	cmp	r3, #0
 801fd40:	d00a      	beq.n	801fd58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	681b      	ldr	r3, [r3, #0]
 801fd46:	685b      	ldr	r3, [r3, #4]
 801fd48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	681b      	ldr	r3, [r3, #0]
 801fd54:	430a      	orrs	r2, r1
 801fd56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd5c:	f003 0304 	and.w	r3, r3, #4
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d00a      	beq.n	801fd7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	685b      	ldr	r3, [r3, #4]
 801fd6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	430a      	orrs	r2, r1
 801fd78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd7e:	f003 0308 	and.w	r3, r3, #8
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	d00a      	beq.n	801fd9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	681b      	ldr	r3, [r3, #0]
 801fd8a:	685b      	ldr	r3, [r3, #4]
 801fd8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	681b      	ldr	r3, [r3, #0]
 801fd98:	430a      	orrs	r2, r1
 801fd9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fda0:	f003 0310 	and.w	r3, r3, #16
 801fda4:	2b00      	cmp	r3, #0
 801fda6:	d00a      	beq.n	801fdbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	689b      	ldr	r3, [r3, #8]
 801fdae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	430a      	orrs	r2, r1
 801fdbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801fdbe:	687b      	ldr	r3, [r7, #4]
 801fdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdc2:	f003 0320 	and.w	r3, r3, #32
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	d00a      	beq.n	801fde0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	689b      	ldr	r3, [r3, #8]
 801fdd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	430a      	orrs	r2, r1
 801fdde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fde4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d01a      	beq.n	801fe22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	685b      	ldr	r3, [r3, #4]
 801fdf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	681b      	ldr	r3, [r3, #0]
 801fdfe:	430a      	orrs	r2, r1
 801fe00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fe06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fe0a:	d10a      	bne.n	801fe22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	681b      	ldr	r3, [r3, #0]
 801fe10:	685b      	ldr	r3, [r3, #4]
 801fe12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801fe16:	687b      	ldr	r3, [r7, #4]
 801fe18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	430a      	orrs	r2, r1
 801fe20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d00a      	beq.n	801fe44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	681b      	ldr	r3, [r3, #0]
 801fe32:	685b      	ldr	r3, [r3, #4]
 801fe34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	430a      	orrs	r2, r1
 801fe42:	605a      	str	r2, [r3, #4]
  }
}
 801fe44:	bf00      	nop
 801fe46:	370c      	adds	r7, #12
 801fe48:	46bd      	mov	sp, r7
 801fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe4e:	4770      	bx	lr

0801fe50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fe50:	b580      	push	{r7, lr}
 801fe52:	b086      	sub	sp, #24
 801fe54:	af02      	add	r7, sp, #8
 801fe56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	2200      	movs	r2, #0
 801fe5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fe60:	f7f9 fb10 	bl	8019484 <HAL_GetTick>
 801fe64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	681b      	ldr	r3, [r3, #0]
 801fe6a:	681b      	ldr	r3, [r3, #0]
 801fe6c:	f003 0308 	and.w	r3, r3, #8
 801fe70:	2b08      	cmp	r3, #8
 801fe72:	d10e      	bne.n	801fe92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fe74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fe78:	9300      	str	r3, [sp, #0]
 801fe7a:	68fb      	ldr	r3, [r7, #12]
 801fe7c:	2200      	movs	r2, #0
 801fe7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801fe82:	6878      	ldr	r0, [r7, #4]
 801fe84:	f000 f831 	bl	801feea <UART_WaitOnFlagUntilTimeout>
 801fe88:	4603      	mov	r3, r0
 801fe8a:	2b00      	cmp	r3, #0
 801fe8c:	d001      	beq.n	801fe92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fe8e:	2303      	movs	r3, #3
 801fe90:	e027      	b.n	801fee2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	681b      	ldr	r3, [r3, #0]
 801fe96:	681b      	ldr	r3, [r3, #0]
 801fe98:	f003 0304 	and.w	r3, r3, #4
 801fe9c:	2b04      	cmp	r3, #4
 801fe9e:	d10e      	bne.n	801febe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fea4:	9300      	str	r3, [sp, #0]
 801fea6:	68fb      	ldr	r3, [r7, #12]
 801fea8:	2200      	movs	r2, #0
 801feaa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801feae:	6878      	ldr	r0, [r7, #4]
 801feb0:	f000 f81b 	bl	801feea <UART_WaitOnFlagUntilTimeout>
 801feb4:	4603      	mov	r3, r0
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d001      	beq.n	801febe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801feba:	2303      	movs	r3, #3
 801febc:	e011      	b.n	801fee2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	2220      	movs	r2, #32
 801fec2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	2220      	movs	r2, #32
 801fec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	2200      	movs	r2, #0
 801fed0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801fed2:	687b      	ldr	r3, [r7, #4]
 801fed4:	2200      	movs	r2, #0
 801fed6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	2200      	movs	r2, #0
 801fedc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801fee0:	2300      	movs	r3, #0
}
 801fee2:	4618      	mov	r0, r3
 801fee4:	3710      	adds	r7, #16
 801fee6:	46bd      	mov	sp, r7
 801fee8:	bd80      	pop	{r7, pc}

0801feea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801feea:	b580      	push	{r7, lr}
 801feec:	b09c      	sub	sp, #112	; 0x70
 801feee:	af00      	add	r7, sp, #0
 801fef0:	60f8      	str	r0, [r7, #12]
 801fef2:	60b9      	str	r1, [r7, #8]
 801fef4:	603b      	str	r3, [r7, #0]
 801fef6:	4613      	mov	r3, r2
 801fef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fefa:	e0a7      	b.n	802004c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fefc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff02:	f000 80a3 	beq.w	802004c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ff06:	f7f9 fabd 	bl	8019484 <HAL_GetTick>
 801ff0a:	4602      	mov	r2, r0
 801ff0c:	683b      	ldr	r3, [r7, #0]
 801ff0e:	1ad3      	subs	r3, r2, r3
 801ff10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ff12:	429a      	cmp	r2, r3
 801ff14:	d302      	bcc.n	801ff1c <UART_WaitOnFlagUntilTimeout+0x32>
 801ff16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	d13f      	bne.n	801ff9c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801ff1c:	68fb      	ldr	r3, [r7, #12]
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ff24:	e853 3f00 	ldrex	r3, [r3]
 801ff28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ff2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ff2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ff30:	667b      	str	r3, [r7, #100]	; 0x64
 801ff32:	68fb      	ldr	r3, [r7, #12]
 801ff34:	681b      	ldr	r3, [r3, #0]
 801ff36:	461a      	mov	r2, r3
 801ff38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ff3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ff3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ff40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ff42:	e841 2300 	strex	r3, r2, [r1]
 801ff46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ff48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	d1e6      	bne.n	801ff1c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ff4e:	68fb      	ldr	r3, [r7, #12]
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	3308      	adds	r3, #8
 801ff54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ff58:	e853 3f00 	ldrex	r3, [r3]
 801ff5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ff5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ff60:	f023 0301 	bic.w	r3, r3, #1
 801ff64:	663b      	str	r3, [r7, #96]	; 0x60
 801ff66:	68fb      	ldr	r3, [r7, #12]
 801ff68:	681b      	ldr	r3, [r3, #0]
 801ff6a:	3308      	adds	r3, #8
 801ff6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ff6e:	64ba      	str	r2, [r7, #72]	; 0x48
 801ff70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ff74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ff76:	e841 2300 	strex	r3, r2, [r1]
 801ff7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801ff7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d1e5      	bne.n	801ff4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801ff82:	68fb      	ldr	r3, [r7, #12]
 801ff84:	2220      	movs	r2, #32
 801ff86:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801ff88:	68fb      	ldr	r3, [r7, #12]
 801ff8a:	2220      	movs	r2, #32
 801ff8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801ff90:	68fb      	ldr	r3, [r7, #12]
 801ff92:	2200      	movs	r2, #0
 801ff94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801ff98:	2303      	movs	r3, #3
 801ff9a:	e068      	b.n	802006e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ff9c:	68fb      	ldr	r3, [r7, #12]
 801ff9e:	681b      	ldr	r3, [r3, #0]
 801ffa0:	681b      	ldr	r3, [r3, #0]
 801ffa2:	f003 0304 	and.w	r3, r3, #4
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d050      	beq.n	802004c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ffaa:	68fb      	ldr	r3, [r7, #12]
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	69db      	ldr	r3, [r3, #28]
 801ffb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ffb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ffb8:	d148      	bne.n	802004c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ffba:	68fb      	ldr	r3, [r7, #12]
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ffc2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801ffc4:	68fb      	ldr	r3, [r7, #12]
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ffca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffcc:	e853 3f00 	ldrex	r3, [r3]
 801ffd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ffd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ffd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ffda:	68fb      	ldr	r3, [r7, #12]
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	461a      	mov	r2, r3
 801ffe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ffe2:	637b      	str	r3, [r7, #52]	; 0x34
 801ffe4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ffe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ffe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ffea:	e841 2300 	strex	r3, r2, [r1]
 801ffee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801fff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	d1e6      	bne.n	801ffc4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fff6:	68fb      	ldr	r3, [r7, #12]
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	3308      	adds	r3, #8
 801fffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fffe:	697b      	ldr	r3, [r7, #20]
 8020000:	e853 3f00 	ldrex	r3, [r3]
 8020004:	613b      	str	r3, [r7, #16]
   return(result);
 8020006:	693b      	ldr	r3, [r7, #16]
 8020008:	f023 0301 	bic.w	r3, r3, #1
 802000c:	66bb      	str	r3, [r7, #104]	; 0x68
 802000e:	68fb      	ldr	r3, [r7, #12]
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	3308      	adds	r3, #8
 8020014:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8020016:	623a      	str	r2, [r7, #32]
 8020018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802001a:	69f9      	ldr	r1, [r7, #28]
 802001c:	6a3a      	ldr	r2, [r7, #32]
 802001e:	e841 2300 	strex	r3, r2, [r1]
 8020022:	61bb      	str	r3, [r7, #24]
   return(result);
 8020024:	69bb      	ldr	r3, [r7, #24]
 8020026:	2b00      	cmp	r3, #0
 8020028:	d1e5      	bne.n	801fff6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 802002a:	68fb      	ldr	r3, [r7, #12]
 802002c:	2220      	movs	r2, #32
 802002e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8020030:	68fb      	ldr	r3, [r7, #12]
 8020032:	2220      	movs	r2, #32
 8020034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	2220      	movs	r2, #32
 802003c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020040:	68fb      	ldr	r3, [r7, #12]
 8020042:	2200      	movs	r2, #0
 8020044:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8020048:	2303      	movs	r3, #3
 802004a:	e010      	b.n	802006e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802004c:	68fb      	ldr	r3, [r7, #12]
 802004e:	681b      	ldr	r3, [r3, #0]
 8020050:	69da      	ldr	r2, [r3, #28]
 8020052:	68bb      	ldr	r3, [r7, #8]
 8020054:	4013      	ands	r3, r2
 8020056:	68ba      	ldr	r2, [r7, #8]
 8020058:	429a      	cmp	r2, r3
 802005a:	bf0c      	ite	eq
 802005c:	2301      	moveq	r3, #1
 802005e:	2300      	movne	r3, #0
 8020060:	b2db      	uxtb	r3, r3
 8020062:	461a      	mov	r2, r3
 8020064:	79fb      	ldrb	r3, [r7, #7]
 8020066:	429a      	cmp	r2, r3
 8020068:	f43f af48 	beq.w	801fefc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802006c:	2300      	movs	r3, #0
}
 802006e:	4618      	mov	r0, r3
 8020070:	3770      	adds	r7, #112	; 0x70
 8020072:	46bd      	mov	sp, r7
 8020074:	bd80      	pop	{r7, pc}
	...

08020078 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020078:	b480      	push	{r7}
 802007a:	b097      	sub	sp, #92	; 0x5c
 802007c:	af00      	add	r7, sp, #0
 802007e:	60f8      	str	r0, [r7, #12]
 8020080:	60b9      	str	r1, [r7, #8]
 8020082:	4613      	mov	r3, r2
 8020084:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8020086:	68fb      	ldr	r3, [r7, #12]
 8020088:	68ba      	ldr	r2, [r7, #8]
 802008a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 802008c:	68fb      	ldr	r3, [r7, #12]
 802008e:	88fa      	ldrh	r2, [r7, #6]
 8020090:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8020094:	68fb      	ldr	r3, [r7, #12]
 8020096:	88fa      	ldrh	r2, [r7, #6]
 8020098:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 802009c:	68fb      	ldr	r3, [r7, #12]
 802009e:	2200      	movs	r2, #0
 80200a0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80200a2:	68fb      	ldr	r3, [r7, #12]
 80200a4:	689b      	ldr	r3, [r3, #8]
 80200a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80200aa:	d10e      	bne.n	80200ca <UART_Start_Receive_IT+0x52>
 80200ac:	68fb      	ldr	r3, [r7, #12]
 80200ae:	691b      	ldr	r3, [r3, #16]
 80200b0:	2b00      	cmp	r3, #0
 80200b2:	d105      	bne.n	80200c0 <UART_Start_Receive_IT+0x48>
 80200b4:	68fb      	ldr	r3, [r7, #12]
 80200b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80200ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80200be:	e02d      	b.n	802011c <UART_Start_Receive_IT+0xa4>
 80200c0:	68fb      	ldr	r3, [r7, #12]
 80200c2:	22ff      	movs	r2, #255	; 0xff
 80200c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80200c8:	e028      	b.n	802011c <UART_Start_Receive_IT+0xa4>
 80200ca:	68fb      	ldr	r3, [r7, #12]
 80200cc:	689b      	ldr	r3, [r3, #8]
 80200ce:	2b00      	cmp	r3, #0
 80200d0:	d10d      	bne.n	80200ee <UART_Start_Receive_IT+0x76>
 80200d2:	68fb      	ldr	r3, [r7, #12]
 80200d4:	691b      	ldr	r3, [r3, #16]
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d104      	bne.n	80200e4 <UART_Start_Receive_IT+0x6c>
 80200da:	68fb      	ldr	r3, [r7, #12]
 80200dc:	22ff      	movs	r2, #255	; 0xff
 80200de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80200e2:	e01b      	b.n	802011c <UART_Start_Receive_IT+0xa4>
 80200e4:	68fb      	ldr	r3, [r7, #12]
 80200e6:	227f      	movs	r2, #127	; 0x7f
 80200e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80200ec:	e016      	b.n	802011c <UART_Start_Receive_IT+0xa4>
 80200ee:	68fb      	ldr	r3, [r7, #12]
 80200f0:	689b      	ldr	r3, [r3, #8]
 80200f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80200f6:	d10d      	bne.n	8020114 <UART_Start_Receive_IT+0x9c>
 80200f8:	68fb      	ldr	r3, [r7, #12]
 80200fa:	691b      	ldr	r3, [r3, #16]
 80200fc:	2b00      	cmp	r3, #0
 80200fe:	d104      	bne.n	802010a <UART_Start_Receive_IT+0x92>
 8020100:	68fb      	ldr	r3, [r7, #12]
 8020102:	227f      	movs	r2, #127	; 0x7f
 8020104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8020108:	e008      	b.n	802011c <UART_Start_Receive_IT+0xa4>
 802010a:	68fb      	ldr	r3, [r7, #12]
 802010c:	223f      	movs	r2, #63	; 0x3f
 802010e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8020112:	e003      	b.n	802011c <UART_Start_Receive_IT+0xa4>
 8020114:	68fb      	ldr	r3, [r7, #12]
 8020116:	2200      	movs	r2, #0
 8020118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802011c:	68fb      	ldr	r3, [r7, #12]
 802011e:	2200      	movs	r2, #0
 8020120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8020124:	68fb      	ldr	r3, [r7, #12]
 8020126:	2222      	movs	r2, #34	; 0x22
 8020128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	681b      	ldr	r3, [r3, #0]
 8020130:	3308      	adds	r3, #8
 8020132:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020136:	e853 3f00 	ldrex	r3, [r3]
 802013a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802013c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802013e:	f043 0301 	orr.w	r3, r3, #1
 8020142:	657b      	str	r3, [r7, #84]	; 0x54
 8020144:	68fb      	ldr	r3, [r7, #12]
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	3308      	adds	r3, #8
 802014a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802014c:	64ba      	str	r2, [r7, #72]	; 0x48
 802014e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020150:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8020152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020154:	e841 2300 	strex	r3, r2, [r1]
 8020158:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 802015a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802015c:	2b00      	cmp	r3, #0
 802015e:	d1e5      	bne.n	802012c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8020160:	68fb      	ldr	r3, [r7, #12]
 8020162:	689b      	ldr	r3, [r3, #8]
 8020164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020168:	d107      	bne.n	802017a <UART_Start_Receive_IT+0x102>
 802016a:	68fb      	ldr	r3, [r7, #12]
 802016c:	691b      	ldr	r3, [r3, #16]
 802016e:	2b00      	cmp	r3, #0
 8020170:	d103      	bne.n	802017a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8020172:	68fb      	ldr	r3, [r7, #12]
 8020174:	4a21      	ldr	r2, [pc, #132]	; (80201fc <UART_Start_Receive_IT+0x184>)
 8020176:	669a      	str	r2, [r3, #104]	; 0x68
 8020178:	e002      	b.n	8020180 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 802017a:	68fb      	ldr	r3, [r7, #12]
 802017c:	4a20      	ldr	r2, [pc, #128]	; (8020200 <UART_Start_Receive_IT+0x188>)
 802017e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	691b      	ldr	r3, [r3, #16]
 8020184:	2b00      	cmp	r3, #0
 8020186:	d019      	beq.n	80201bc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802018e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020190:	e853 3f00 	ldrex	r3, [r3]
 8020194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020198:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 802019c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802019e:	68fb      	ldr	r3, [r7, #12]
 80201a0:	681b      	ldr	r3, [r3, #0]
 80201a2:	461a      	mov	r2, r3
 80201a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80201a6:	637b      	str	r3, [r7, #52]	; 0x34
 80201a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80201aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80201ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80201ae:	e841 2300 	strex	r3, r2, [r1]
 80201b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80201b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80201b6:	2b00      	cmp	r3, #0
 80201b8:	d1e6      	bne.n	8020188 <UART_Start_Receive_IT+0x110>
 80201ba:	e018      	b.n	80201ee <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80201bc:	68fb      	ldr	r3, [r7, #12]
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80201c2:	697b      	ldr	r3, [r7, #20]
 80201c4:	e853 3f00 	ldrex	r3, [r3]
 80201c8:	613b      	str	r3, [r7, #16]
   return(result);
 80201ca:	693b      	ldr	r3, [r7, #16]
 80201cc:	f043 0320 	orr.w	r3, r3, #32
 80201d0:	653b      	str	r3, [r7, #80]	; 0x50
 80201d2:	68fb      	ldr	r3, [r7, #12]
 80201d4:	681b      	ldr	r3, [r3, #0]
 80201d6:	461a      	mov	r2, r3
 80201d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80201da:	623b      	str	r3, [r7, #32]
 80201dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80201de:	69f9      	ldr	r1, [r7, #28]
 80201e0:	6a3a      	ldr	r2, [r7, #32]
 80201e2:	e841 2300 	strex	r3, r2, [r1]
 80201e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80201e8:	69bb      	ldr	r3, [r7, #24]
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	d1e6      	bne.n	80201bc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80201ee:	2300      	movs	r3, #0
}
 80201f0:	4618      	mov	r0, r3
 80201f2:	375c      	adds	r7, #92	; 0x5c
 80201f4:	46bd      	mov	sp, r7
 80201f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201fa:	4770      	bx	lr
 80201fc:	080204c3 	.word	0x080204c3
 8020200:	08020355 	.word	0x08020355

08020204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020204:	b480      	push	{r7}
 8020206:	b095      	sub	sp, #84	; 0x54
 8020208:	af00      	add	r7, sp, #0
 802020a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020214:	e853 3f00 	ldrex	r3, [r3]
 8020218:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802021a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802021c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8020220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020222:	687b      	ldr	r3, [r7, #4]
 8020224:	681b      	ldr	r3, [r3, #0]
 8020226:	461a      	mov	r2, r3
 8020228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802022a:	643b      	str	r3, [r7, #64]	; 0x40
 802022c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802022e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8020230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020232:	e841 2300 	strex	r3, r2, [r1]
 8020236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8020238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802023a:	2b00      	cmp	r3, #0
 802023c:	d1e6      	bne.n	802020c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802023e:	687b      	ldr	r3, [r7, #4]
 8020240:	681b      	ldr	r3, [r3, #0]
 8020242:	3308      	adds	r3, #8
 8020244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020246:	6a3b      	ldr	r3, [r7, #32]
 8020248:	e853 3f00 	ldrex	r3, [r3]
 802024c:	61fb      	str	r3, [r7, #28]
   return(result);
 802024e:	69fb      	ldr	r3, [r7, #28]
 8020250:	f023 0301 	bic.w	r3, r3, #1
 8020254:	64bb      	str	r3, [r7, #72]	; 0x48
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	3308      	adds	r3, #8
 802025c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802025e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020266:	e841 2300 	strex	r3, r2, [r1]
 802026a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802026c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802026e:	2b00      	cmp	r3, #0
 8020270:	d1e5      	bne.n	802023e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020276:	2b01      	cmp	r3, #1
 8020278:	d118      	bne.n	80202ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020280:	68fb      	ldr	r3, [r7, #12]
 8020282:	e853 3f00 	ldrex	r3, [r3]
 8020286:	60bb      	str	r3, [r7, #8]
   return(result);
 8020288:	68bb      	ldr	r3, [r7, #8]
 802028a:	f023 0310 	bic.w	r3, r3, #16
 802028e:	647b      	str	r3, [r7, #68]	; 0x44
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	461a      	mov	r2, r3
 8020296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020298:	61bb      	str	r3, [r7, #24]
 802029a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802029c:	6979      	ldr	r1, [r7, #20]
 802029e:	69ba      	ldr	r2, [r7, #24]
 80202a0:	e841 2300 	strex	r3, r2, [r1]
 80202a4:	613b      	str	r3, [r7, #16]
   return(result);
 80202a6:	693b      	ldr	r3, [r7, #16]
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	d1e6      	bne.n	802027a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80202ac:	687b      	ldr	r3, [r7, #4]
 80202ae:	2220      	movs	r2, #32
 80202b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80202b4:	687b      	ldr	r3, [r7, #4]
 80202b6:	2200      	movs	r2, #0
 80202b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	2200      	movs	r2, #0
 80202be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80202c0:	bf00      	nop
 80202c2:	3754      	adds	r7, #84	; 0x54
 80202c4:	46bd      	mov	sp, r7
 80202c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202ca:	4770      	bx	lr

080202cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80202cc:	b580      	push	{r7, lr}
 80202ce:	b084      	sub	sp, #16
 80202d0:	af00      	add	r7, sp, #0
 80202d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80202d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80202da:	68fb      	ldr	r3, [r7, #12]
 80202dc:	2200      	movs	r2, #0
 80202de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80202e2:	68fb      	ldr	r3, [r7, #12]
 80202e4:	2200      	movs	r2, #0
 80202e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80202ea:	68fb      	ldr	r3, [r7, #12]
 80202ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80202f0:	68f8      	ldr	r0, [r7, #12]
 80202f2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80202f4:	bf00      	nop
 80202f6:	3710      	adds	r7, #16
 80202f8:	46bd      	mov	sp, r7
 80202fa:	bd80      	pop	{r7, pc}

080202fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80202fc:	b580      	push	{r7, lr}
 80202fe:	b088      	sub	sp, #32
 8020300:	af00      	add	r7, sp, #0
 8020302:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802030a:	68fb      	ldr	r3, [r7, #12]
 802030c:	e853 3f00 	ldrex	r3, [r3]
 8020310:	60bb      	str	r3, [r7, #8]
   return(result);
 8020312:	68bb      	ldr	r3, [r7, #8]
 8020314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020318:	61fb      	str	r3, [r7, #28]
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	461a      	mov	r2, r3
 8020320:	69fb      	ldr	r3, [r7, #28]
 8020322:	61bb      	str	r3, [r7, #24]
 8020324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020326:	6979      	ldr	r1, [r7, #20]
 8020328:	69ba      	ldr	r2, [r7, #24]
 802032a:	e841 2300 	strex	r3, r2, [r1]
 802032e:	613b      	str	r3, [r7, #16]
   return(result);
 8020330:	693b      	ldr	r3, [r7, #16]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d1e6      	bne.n	8020304 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	2220      	movs	r2, #32
 802033a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	2200      	movs	r2, #0
 8020340:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8020348:	6878      	ldr	r0, [r7, #4]
 802034a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802034c:	bf00      	nop
 802034e:	3720      	adds	r7, #32
 8020350:	46bd      	mov	sp, r7
 8020352:	bd80      	pop	{r7, pc}

08020354 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8020354:	b580      	push	{r7, lr}
 8020356:	b096      	sub	sp, #88	; 0x58
 8020358:	af00      	add	r7, sp, #0
 802035a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8020362:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8020366:	687b      	ldr	r3, [r7, #4]
 8020368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802036c:	2b22      	cmp	r3, #34	; 0x22
 802036e:	f040 809c 	bne.w	80204aa <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8020372:	687b      	ldr	r3, [r7, #4]
 8020374:	681b      	ldr	r3, [r3, #0]
 8020376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020378:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 802037c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8020380:	b2d9      	uxtb	r1, r3
 8020382:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8020386:	b2da      	uxtb	r2, r3
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802038c:	400a      	ands	r2, r1
 802038e:	b2d2      	uxtb	r2, r2
 8020390:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020396:	1c5a      	adds	r2, r3, #1
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80203a2:	b29b      	uxth	r3, r3
 80203a4:	3b01      	subs	r3, #1
 80203a6:	b29a      	uxth	r2, r3
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80203b4:	b29b      	uxth	r3, r3
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	d17f      	bne.n	80204ba <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80203ba:	687b      	ldr	r3, [r7, #4]
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80203c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80203c2:	e853 3f00 	ldrex	r3, [r3]
 80203c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80203c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80203ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80203ce:	653b      	str	r3, [r7, #80]	; 0x50
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	461a      	mov	r2, r3
 80203d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80203d8:	647b      	str	r3, [r7, #68]	; 0x44
 80203da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80203dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80203de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80203e0:	e841 2300 	strex	r3, r2, [r1]
 80203e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80203e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d1e6      	bne.n	80203ba <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	3308      	adds	r3, #8
 80203f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80203f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203f6:	e853 3f00 	ldrex	r3, [r3]
 80203fa:	623b      	str	r3, [r7, #32]
   return(result);
 80203fc:	6a3b      	ldr	r3, [r7, #32]
 80203fe:	f023 0301 	bic.w	r3, r3, #1
 8020402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	3308      	adds	r3, #8
 802040a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802040c:	633a      	str	r2, [r7, #48]	; 0x30
 802040e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020414:	e841 2300 	strex	r3, r2, [r1]
 8020418:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802041a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802041c:	2b00      	cmp	r3, #0
 802041e:	d1e5      	bne.n	80203ec <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	2220      	movs	r2, #32
 8020424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	2200      	movs	r2, #0
 802042c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	2200      	movs	r2, #0
 8020432:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020438:	2b01      	cmp	r3, #1
 802043a:	d130      	bne.n	802049e <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	2200      	movs	r2, #0
 8020440:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	681b      	ldr	r3, [r3, #0]
 8020446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020448:	693b      	ldr	r3, [r7, #16]
 802044a:	e853 3f00 	ldrex	r3, [r3]
 802044e:	60fb      	str	r3, [r7, #12]
   return(result);
 8020450:	68fb      	ldr	r3, [r7, #12]
 8020452:	f023 0310 	bic.w	r3, r3, #16
 8020456:	64bb      	str	r3, [r7, #72]	; 0x48
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	461a      	mov	r2, r3
 802045e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020460:	61fb      	str	r3, [r7, #28]
 8020462:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020464:	69b9      	ldr	r1, [r7, #24]
 8020466:	69fa      	ldr	r2, [r7, #28]
 8020468:	e841 2300 	strex	r3, r2, [r1]
 802046c:	617b      	str	r3, [r7, #20]
   return(result);
 802046e:	697b      	ldr	r3, [r7, #20]
 8020470:	2b00      	cmp	r3, #0
 8020472:	d1e6      	bne.n	8020442 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	681b      	ldr	r3, [r3, #0]
 8020478:	69db      	ldr	r3, [r3, #28]
 802047a:	f003 0310 	and.w	r3, r3, #16
 802047e:	2b10      	cmp	r3, #16
 8020480:	d103      	bne.n	802048a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020482:	687b      	ldr	r3, [r7, #4]
 8020484:	681b      	ldr	r3, [r3, #0]
 8020486:	2210      	movs	r2, #16
 8020488:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8020490:	687a      	ldr	r2, [r7, #4]
 8020492:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8020496:	4611      	mov	r1, r2
 8020498:	6878      	ldr	r0, [r7, #4]
 802049a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802049c:	e00d      	b.n	80204ba <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 802049e:	687b      	ldr	r3, [r7, #4]
 80204a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80204a4:	6878      	ldr	r0, [r7, #4]
 80204a6:	4798      	blx	r3
}
 80204a8:	e007      	b.n	80204ba <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	681b      	ldr	r3, [r3, #0]
 80204ae:	699a      	ldr	r2, [r3, #24]
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	f042 0208 	orr.w	r2, r2, #8
 80204b8:	619a      	str	r2, [r3, #24]
}
 80204ba:	bf00      	nop
 80204bc:	3758      	adds	r7, #88	; 0x58
 80204be:	46bd      	mov	sp, r7
 80204c0:	bd80      	pop	{r7, pc}

080204c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80204c2:	b580      	push	{r7, lr}
 80204c4:	b096      	sub	sp, #88	; 0x58
 80204c6:	af00      	add	r7, sp, #0
 80204c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80204d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80204da:	2b22      	cmp	r3, #34	; 0x22
 80204dc:	f040 809c 	bne.w	8020618 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80204ee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80204f0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80204f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80204f8:	4013      	ands	r3, r2
 80204fa:	b29a      	uxth	r2, r3
 80204fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80204fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8020500:	687b      	ldr	r3, [r7, #4]
 8020502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020504:	1c9a      	adds	r2, r3, #2
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020510:	b29b      	uxth	r3, r3
 8020512:	3b01      	subs	r3, #1
 8020514:	b29a      	uxth	r2, r3
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020522:	b29b      	uxth	r3, r3
 8020524:	2b00      	cmp	r3, #0
 8020526:	d17f      	bne.n	8020628 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	681b      	ldr	r3, [r3, #0]
 802052c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802052e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020530:	e853 3f00 	ldrex	r3, [r3]
 8020534:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8020536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802053c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	681b      	ldr	r3, [r3, #0]
 8020542:	461a      	mov	r2, r3
 8020544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020546:	643b      	str	r3, [r7, #64]	; 0x40
 8020548:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802054a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802054c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802054e:	e841 2300 	strex	r3, r2, [r1]
 8020552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8020554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020556:	2b00      	cmp	r3, #0
 8020558:	d1e6      	bne.n	8020528 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	3308      	adds	r3, #8
 8020560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020562:	6a3b      	ldr	r3, [r7, #32]
 8020564:	e853 3f00 	ldrex	r3, [r3]
 8020568:	61fb      	str	r3, [r7, #28]
   return(result);
 802056a:	69fb      	ldr	r3, [r7, #28]
 802056c:	f023 0301 	bic.w	r3, r3, #1
 8020570:	64bb      	str	r3, [r7, #72]	; 0x48
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	681b      	ldr	r3, [r3, #0]
 8020576:	3308      	adds	r3, #8
 8020578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802057a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802057c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802057e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020582:	e841 2300 	strex	r3, r2, [r1]
 8020586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802058a:	2b00      	cmp	r3, #0
 802058c:	d1e5      	bne.n	802055a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802058e:	687b      	ldr	r3, [r7, #4]
 8020590:	2220      	movs	r2, #32
 8020592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8020596:	687b      	ldr	r3, [r7, #4]
 8020598:	2200      	movs	r2, #0
 802059a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	2200      	movs	r2, #0
 80205a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80205a6:	2b01      	cmp	r3, #1
 80205a8:	d130      	bne.n	802060c <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	2200      	movs	r2, #0
 80205ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	681b      	ldr	r3, [r3, #0]
 80205b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80205b6:	68fb      	ldr	r3, [r7, #12]
 80205b8:	e853 3f00 	ldrex	r3, [r3]
 80205bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80205be:	68bb      	ldr	r3, [r7, #8]
 80205c0:	f023 0310 	bic.w	r3, r3, #16
 80205c4:	647b      	str	r3, [r7, #68]	; 0x44
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	681b      	ldr	r3, [r3, #0]
 80205ca:	461a      	mov	r2, r3
 80205cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80205ce:	61bb      	str	r3, [r7, #24]
 80205d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80205d2:	6979      	ldr	r1, [r7, #20]
 80205d4:	69ba      	ldr	r2, [r7, #24]
 80205d6:	e841 2300 	strex	r3, r2, [r1]
 80205da:	613b      	str	r3, [r7, #16]
   return(result);
 80205dc:	693b      	ldr	r3, [r7, #16]
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d1e6      	bne.n	80205b0 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80205e2:	687b      	ldr	r3, [r7, #4]
 80205e4:	681b      	ldr	r3, [r3, #0]
 80205e6:	69db      	ldr	r3, [r3, #28]
 80205e8:	f003 0310 	and.w	r3, r3, #16
 80205ec:	2b10      	cmp	r3, #16
 80205ee:	d103      	bne.n	80205f8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	2210      	movs	r2, #16
 80205f6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80205fe:	687a      	ldr	r2, [r7, #4]
 8020600:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8020604:	4611      	mov	r1, r2
 8020606:	6878      	ldr	r0, [r7, #4]
 8020608:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802060a:	e00d      	b.n	8020628 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 802060c:	687b      	ldr	r3, [r7, #4]
 802060e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8020612:	6878      	ldr	r0, [r7, #4]
 8020614:	4798      	blx	r3
}
 8020616:	e007      	b.n	8020628 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	681b      	ldr	r3, [r3, #0]
 802061c:	699a      	ldr	r2, [r3, #24]
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	681b      	ldr	r3, [r3, #0]
 8020622:	f042 0208 	orr.w	r2, r2, #8
 8020626:	619a      	str	r2, [r3, #24]
}
 8020628:	bf00      	nop
 802062a:	3758      	adds	r7, #88	; 0x58
 802062c:	46bd      	mov	sp, r7
 802062e:	bd80      	pop	{r7, pc}

08020630 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020630:	b580      	push	{r7, lr}
 8020632:	b08c      	sub	sp, #48	; 0x30
 8020634:	af00      	add	r7, sp, #0
 8020636:	60f8      	str	r0, [r7, #12]
 8020638:	60b9      	str	r1, [r7, #8]
 802063a:	4613      	mov	r3, r2
 802063c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802063e:	68fb      	ldr	r3, [r7, #12]
 8020640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020644:	2b20      	cmp	r3, #32
 8020646:	d142      	bne.n	80206ce <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8020648:	68bb      	ldr	r3, [r7, #8]
 802064a:	2b00      	cmp	r3, #0
 802064c:	d002      	beq.n	8020654 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 802064e:	88fb      	ldrh	r3, [r7, #6]
 8020650:	2b00      	cmp	r3, #0
 8020652:	d101      	bne.n	8020658 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8020654:	2301      	movs	r3, #1
 8020656:	e03b      	b.n	80206d0 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	2201      	movs	r2, #1
 802065c:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 802065e:	68fb      	ldr	r3, [r7, #12]
 8020660:	2200      	movs	r2, #0
 8020662:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8020664:	88fb      	ldrh	r3, [r7, #6]
 8020666:	461a      	mov	r2, r3
 8020668:	68b9      	ldr	r1, [r7, #8]
 802066a:	68f8      	ldr	r0, [r7, #12]
 802066c:	f7ff fd04 	bl	8020078 <UART_Start_Receive_IT>
 8020670:	4603      	mov	r3, r0
 8020672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8020676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802067a:	2b00      	cmp	r3, #0
 802067c:	d124      	bne.n	80206c8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802067e:	68fb      	ldr	r3, [r7, #12]
 8020680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020682:	2b01      	cmp	r3, #1
 8020684:	d11d      	bne.n	80206c2 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020686:	68fb      	ldr	r3, [r7, #12]
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	2210      	movs	r2, #16
 802068c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802068e:	68fb      	ldr	r3, [r7, #12]
 8020690:	681b      	ldr	r3, [r3, #0]
 8020692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020694:	69bb      	ldr	r3, [r7, #24]
 8020696:	e853 3f00 	ldrex	r3, [r3]
 802069a:	617b      	str	r3, [r7, #20]
   return(result);
 802069c:	697b      	ldr	r3, [r7, #20]
 802069e:	f043 0310 	orr.w	r3, r3, #16
 80206a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	461a      	mov	r2, r3
 80206aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80206ac:	627b      	str	r3, [r7, #36]	; 0x24
 80206ae:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80206b0:	6a39      	ldr	r1, [r7, #32]
 80206b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80206b4:	e841 2300 	strex	r3, r2, [r1]
 80206b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80206ba:	69fb      	ldr	r3, [r7, #28]
 80206bc:	2b00      	cmp	r3, #0
 80206be:	d1e6      	bne.n	802068e <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 80206c0:	e002      	b.n	80206c8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80206c2:	2301      	movs	r3, #1
 80206c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80206c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80206cc:	e000      	b.n	80206d0 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80206ce:	2302      	movs	r3, #2
  }
}
 80206d0:	4618      	mov	r0, r3
 80206d2:	3730      	adds	r7, #48	; 0x30
 80206d4:	46bd      	mov	sp, r7
 80206d6:	bd80      	pop	{r7, pc}

080206d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80206d8:	b580      	push	{r7, lr}
 80206da:	b084      	sub	sp, #16
 80206dc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80206de:	4b2f      	ldr	r3, [pc, #188]	; (802079c <MX_LWIP_Init+0xc4>)
 80206e0:	22c0      	movs	r2, #192	; 0xc0
 80206e2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80206e4:	4b2d      	ldr	r3, [pc, #180]	; (802079c <MX_LWIP_Init+0xc4>)
 80206e6:	22a8      	movs	r2, #168	; 0xa8
 80206e8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 80206ea:	4b2c      	ldr	r3, [pc, #176]	; (802079c <MX_LWIP_Init+0xc4>)
 80206ec:	220c      	movs	r2, #12
 80206ee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 80206f0:	4b2a      	ldr	r3, [pc, #168]	; (802079c <MX_LWIP_Init+0xc4>)
 80206f2:	2264      	movs	r2, #100	; 0x64
 80206f4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80206f6:	4b2a      	ldr	r3, [pc, #168]	; (80207a0 <MX_LWIP_Init+0xc8>)
 80206f8:	22ff      	movs	r2, #255	; 0xff
 80206fa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80206fc:	4b28      	ldr	r3, [pc, #160]	; (80207a0 <MX_LWIP_Init+0xc8>)
 80206fe:	22ff      	movs	r2, #255	; 0xff
 8020700:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8020702:	4b27      	ldr	r3, [pc, #156]	; (80207a0 <MX_LWIP_Init+0xc8>)
 8020704:	22ff      	movs	r2, #255	; 0xff
 8020706:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8020708:	4b25      	ldr	r3, [pc, #148]	; (80207a0 <MX_LWIP_Init+0xc8>)
 802070a:	2200      	movs	r2, #0
 802070c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 802070e:	4b25      	ldr	r3, [pc, #148]	; (80207a4 <MX_LWIP_Init+0xcc>)
 8020710:	22c0      	movs	r2, #192	; 0xc0
 8020712:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8020714:	4b23      	ldr	r3, [pc, #140]	; (80207a4 <MX_LWIP_Init+0xcc>)
 8020716:	22a8      	movs	r2, #168	; 0xa8
 8020718:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 802071a:	4b22      	ldr	r3, [pc, #136]	; (80207a4 <MX_LWIP_Init+0xcc>)
 802071c:	220c      	movs	r2, #12
 802071e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8020720:	4b20      	ldr	r3, [pc, #128]	; (80207a4 <MX_LWIP_Init+0xcc>)
 8020722:	2201      	movs	r2, #1
 8020724:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 8020726:	4b20      	ldr	r3, [pc, #128]	; (80207a8 <MX_LWIP_Init+0xd0>)
 8020728:	781b      	ldrb	r3, [r3, #0]
 802072a:	2b01      	cmp	r3, #1
 802072c:	d002      	beq.n	8020734 <MX_LWIP_Init+0x5c>
 802072e:	2b02      	cmp	r3, #2
 8020730:	d03c      	beq.n	80207ac <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 8020732:	e162      	b.n	80209fa <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 8020734:	4b1c      	ldr	r3, [pc, #112]	; (80207a8 <MX_LWIP_Init+0xd0>)
 8020736:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 802073a:	4b18      	ldr	r3, [pc, #96]	; (802079c <MX_LWIP_Init+0xc4>)
 802073c:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 802073e:	4b1a      	ldr	r3, [pc, #104]	; (80207a8 <MX_LWIP_Init+0xd0>)
 8020740:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8020744:	4b15      	ldr	r3, [pc, #84]	; (802079c <MX_LWIP_Init+0xc4>)
 8020746:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 8020748:	4b17      	ldr	r3, [pc, #92]	; (80207a8 <MX_LWIP_Init+0xd0>)
 802074a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 802074e:	4b13      	ldr	r3, [pc, #76]	; (802079c <MX_LWIP_Init+0xc4>)
 8020750:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 8020752:	4b15      	ldr	r3, [pc, #84]	; (80207a8 <MX_LWIP_Init+0xd0>)
 8020754:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8020758:	4b10      	ldr	r3, [pc, #64]	; (802079c <MX_LWIP_Init+0xc4>)
 802075a:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 802075c:	4b10      	ldr	r3, [pc, #64]	; (80207a0 <MX_LWIP_Init+0xc8>)
 802075e:	22ff      	movs	r2, #255	; 0xff
 8020760:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 8020762:	4b0f      	ldr	r3, [pc, #60]	; (80207a0 <MX_LWIP_Init+0xc8>)
 8020764:	22ff      	movs	r2, #255	; 0xff
 8020766:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 8020768:	4b0d      	ldr	r3, [pc, #52]	; (80207a0 <MX_LWIP_Init+0xc8>)
 802076a:	22ff      	movs	r2, #255	; 0xff
 802076c:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 802076e:	4b0c      	ldr	r3, [pc, #48]	; (80207a0 <MX_LWIP_Init+0xc8>)
 8020770:	2200      	movs	r2, #0
 8020772:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 8020774:	4b0c      	ldr	r3, [pc, #48]	; (80207a8 <MX_LWIP_Init+0xd0>)
 8020776:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 802077a:	4b0a      	ldr	r3, [pc, #40]	; (80207a4 <MX_LWIP_Init+0xcc>)
 802077c:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 802077e:	4b0a      	ldr	r3, [pc, #40]	; (80207a8 <MX_LWIP_Init+0xd0>)
 8020780:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8020784:	4b07      	ldr	r3, [pc, #28]	; (80207a4 <MX_LWIP_Init+0xcc>)
 8020786:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 8020788:	4b07      	ldr	r3, [pc, #28]	; (80207a8 <MX_LWIP_Init+0xd0>)
 802078a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 802078e:	4b05      	ldr	r3, [pc, #20]	; (80207a4 <MX_LWIP_Init+0xcc>)
 8020790:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 8020792:	4b04      	ldr	r3, [pc, #16]	; (80207a4 <MX_LWIP_Init+0xcc>)
 8020794:	2201      	movs	r2, #1
 8020796:	70da      	strb	r2, [r3, #3]
		break;
 8020798:	e03b      	b.n	8020812 <MX_LWIP_Init+0x13a>
 802079a:	bf00      	nop
 802079c:	2000dd1c 	.word	0x2000dd1c
 80207a0:	2000dd20 	.word	0x2000dd20
 80207a4:	2000dd24 	.word	0x2000dd24
 80207a8:	20000504 	.word	0x20000504
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 80207ac:	4b94      	ldr	r3, [pc, #592]	; (8020a00 <MX_LWIP_Init+0x328>)
 80207ae:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 80207b2:	4b94      	ldr	r3, [pc, #592]	; (8020a04 <MX_LWIP_Init+0x32c>)
 80207b4:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 80207b6:	4b92      	ldr	r3, [pc, #584]	; (8020a00 <MX_LWIP_Init+0x328>)
 80207b8:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 80207bc:	4b91      	ldr	r3, [pc, #580]	; (8020a04 <MX_LWIP_Init+0x32c>)
 80207be:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 80207c0:	4b8f      	ldr	r3, [pc, #572]	; (8020a00 <MX_LWIP_Init+0x328>)
 80207c2:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 80207c6:	4b8f      	ldr	r3, [pc, #572]	; (8020a04 <MX_LWIP_Init+0x32c>)
 80207c8:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 80207ca:	4b8d      	ldr	r3, [pc, #564]	; (8020a00 <MX_LWIP_Init+0x328>)
 80207cc:	f893 22ac 	ldrb.w	r2, [r3, #684]	; 0x2ac
 80207d0:	4b8c      	ldr	r3, [pc, #560]	; (8020a04 <MX_LWIP_Init+0x32c>)
 80207d2:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 80207d4:	4b8c      	ldr	r3, [pc, #560]	; (8020a08 <MX_LWIP_Init+0x330>)
 80207d6:	22ff      	movs	r2, #255	; 0xff
 80207d8:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 80207da:	4b8b      	ldr	r3, [pc, #556]	; (8020a08 <MX_LWIP_Init+0x330>)
 80207dc:	22ff      	movs	r2, #255	; 0xff
 80207de:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 80207e0:	4b89      	ldr	r3, [pc, #548]	; (8020a08 <MX_LWIP_Init+0x330>)
 80207e2:	22ff      	movs	r2, #255	; 0xff
 80207e4:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 80207e6:	4b88      	ldr	r3, [pc, #544]	; (8020a08 <MX_LWIP_Init+0x330>)
 80207e8:	2200      	movs	r2, #0
 80207ea:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 80207ec:	4b84      	ldr	r3, [pc, #528]	; (8020a00 <MX_LWIP_Init+0x328>)
 80207ee:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 80207f2:	4b86      	ldr	r3, [pc, #536]	; (8020a0c <MX_LWIP_Init+0x334>)
 80207f4:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 80207f6:	4b82      	ldr	r3, [pc, #520]	; (8020a00 <MX_LWIP_Init+0x328>)
 80207f8:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 80207fc:	4b83      	ldr	r3, [pc, #524]	; (8020a0c <MX_LWIP_Init+0x334>)
 80207fe:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 8020800:	4b7f      	ldr	r3, [pc, #508]	; (8020a00 <MX_LWIP_Init+0x328>)
 8020802:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 8020806:	4b81      	ldr	r3, [pc, #516]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020808:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 802080a:	4b80      	ldr	r3, [pc, #512]	; (8020a0c <MX_LWIP_Init+0x334>)
 802080c:	2201      	movs	r2, #1
 802080e:	70da      	strb	r2, [r3, #3]
		break;
 8020810:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8020812:	f000 fd42 	bl	802129a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8020816:	4b7b      	ldr	r3, [pc, #492]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020818:	781b      	ldrb	r3, [r3, #0]
 802081a:	061a      	lsls	r2, r3, #24
 802081c:	4b79      	ldr	r3, [pc, #484]	; (8020a04 <MX_LWIP_Init+0x32c>)
 802081e:	785b      	ldrb	r3, [r3, #1]
 8020820:	041b      	lsls	r3, r3, #16
 8020822:	431a      	orrs	r2, r3
 8020824:	4b77      	ldr	r3, [pc, #476]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020826:	789b      	ldrb	r3, [r3, #2]
 8020828:	021b      	lsls	r3, r3, #8
 802082a:	4313      	orrs	r3, r2
 802082c:	4a75      	ldr	r2, [pc, #468]	; (8020a04 <MX_LWIP_Init+0x32c>)
 802082e:	78d2      	ldrb	r2, [r2, #3]
 8020830:	4313      	orrs	r3, r2
 8020832:	061a      	lsls	r2, r3, #24
 8020834:	4b73      	ldr	r3, [pc, #460]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020836:	781b      	ldrb	r3, [r3, #0]
 8020838:	0619      	lsls	r1, r3, #24
 802083a:	4b72      	ldr	r3, [pc, #456]	; (8020a04 <MX_LWIP_Init+0x32c>)
 802083c:	785b      	ldrb	r3, [r3, #1]
 802083e:	041b      	lsls	r3, r3, #16
 8020840:	4319      	orrs	r1, r3
 8020842:	4b70      	ldr	r3, [pc, #448]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020844:	789b      	ldrb	r3, [r3, #2]
 8020846:	021b      	lsls	r3, r3, #8
 8020848:	430b      	orrs	r3, r1
 802084a:	496e      	ldr	r1, [pc, #440]	; (8020a04 <MX_LWIP_Init+0x32c>)
 802084c:	78c9      	ldrb	r1, [r1, #3]
 802084e:	430b      	orrs	r3, r1
 8020850:	021b      	lsls	r3, r3, #8
 8020852:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020856:	431a      	orrs	r2, r3
 8020858:	4b6a      	ldr	r3, [pc, #424]	; (8020a04 <MX_LWIP_Init+0x32c>)
 802085a:	781b      	ldrb	r3, [r3, #0]
 802085c:	0619      	lsls	r1, r3, #24
 802085e:	4b69      	ldr	r3, [pc, #420]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020860:	785b      	ldrb	r3, [r3, #1]
 8020862:	041b      	lsls	r3, r3, #16
 8020864:	4319      	orrs	r1, r3
 8020866:	4b67      	ldr	r3, [pc, #412]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020868:	789b      	ldrb	r3, [r3, #2]
 802086a:	021b      	lsls	r3, r3, #8
 802086c:	430b      	orrs	r3, r1
 802086e:	4965      	ldr	r1, [pc, #404]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020870:	78c9      	ldrb	r1, [r1, #3]
 8020872:	430b      	orrs	r3, r1
 8020874:	0a1b      	lsrs	r3, r3, #8
 8020876:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802087a:	431a      	orrs	r2, r3
 802087c:	4b61      	ldr	r3, [pc, #388]	; (8020a04 <MX_LWIP_Init+0x32c>)
 802087e:	781b      	ldrb	r3, [r3, #0]
 8020880:	0619      	lsls	r1, r3, #24
 8020882:	4b60      	ldr	r3, [pc, #384]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020884:	785b      	ldrb	r3, [r3, #1]
 8020886:	041b      	lsls	r3, r3, #16
 8020888:	4319      	orrs	r1, r3
 802088a:	4b5e      	ldr	r3, [pc, #376]	; (8020a04 <MX_LWIP_Init+0x32c>)
 802088c:	789b      	ldrb	r3, [r3, #2]
 802088e:	021b      	lsls	r3, r3, #8
 8020890:	430b      	orrs	r3, r1
 8020892:	495c      	ldr	r1, [pc, #368]	; (8020a04 <MX_LWIP_Init+0x32c>)
 8020894:	78c9      	ldrb	r1, [r1, #3]
 8020896:	430b      	orrs	r3, r1
 8020898:	0e1b      	lsrs	r3, r3, #24
 802089a:	4313      	orrs	r3, r2
 802089c:	4a5c      	ldr	r2, [pc, #368]	; (8020a10 <MX_LWIP_Init+0x338>)
 802089e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80208a0:	4b59      	ldr	r3, [pc, #356]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208a2:	781b      	ldrb	r3, [r3, #0]
 80208a4:	061a      	lsls	r2, r3, #24
 80208a6:	4b58      	ldr	r3, [pc, #352]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208a8:	785b      	ldrb	r3, [r3, #1]
 80208aa:	041b      	lsls	r3, r3, #16
 80208ac:	431a      	orrs	r2, r3
 80208ae:	4b56      	ldr	r3, [pc, #344]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208b0:	789b      	ldrb	r3, [r3, #2]
 80208b2:	021b      	lsls	r3, r3, #8
 80208b4:	4313      	orrs	r3, r2
 80208b6:	4a54      	ldr	r2, [pc, #336]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208b8:	78d2      	ldrb	r2, [r2, #3]
 80208ba:	4313      	orrs	r3, r2
 80208bc:	061a      	lsls	r2, r3, #24
 80208be:	4b52      	ldr	r3, [pc, #328]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208c0:	781b      	ldrb	r3, [r3, #0]
 80208c2:	0619      	lsls	r1, r3, #24
 80208c4:	4b50      	ldr	r3, [pc, #320]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208c6:	785b      	ldrb	r3, [r3, #1]
 80208c8:	041b      	lsls	r3, r3, #16
 80208ca:	4319      	orrs	r1, r3
 80208cc:	4b4e      	ldr	r3, [pc, #312]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208ce:	789b      	ldrb	r3, [r3, #2]
 80208d0:	021b      	lsls	r3, r3, #8
 80208d2:	430b      	orrs	r3, r1
 80208d4:	494c      	ldr	r1, [pc, #304]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208d6:	78c9      	ldrb	r1, [r1, #3]
 80208d8:	430b      	orrs	r3, r1
 80208da:	021b      	lsls	r3, r3, #8
 80208dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80208e0:	431a      	orrs	r2, r3
 80208e2:	4b49      	ldr	r3, [pc, #292]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208e4:	781b      	ldrb	r3, [r3, #0]
 80208e6:	0619      	lsls	r1, r3, #24
 80208e8:	4b47      	ldr	r3, [pc, #284]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208ea:	785b      	ldrb	r3, [r3, #1]
 80208ec:	041b      	lsls	r3, r3, #16
 80208ee:	4319      	orrs	r1, r3
 80208f0:	4b45      	ldr	r3, [pc, #276]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208f2:	789b      	ldrb	r3, [r3, #2]
 80208f4:	021b      	lsls	r3, r3, #8
 80208f6:	430b      	orrs	r3, r1
 80208f8:	4943      	ldr	r1, [pc, #268]	; (8020a08 <MX_LWIP_Init+0x330>)
 80208fa:	78c9      	ldrb	r1, [r1, #3]
 80208fc:	430b      	orrs	r3, r1
 80208fe:	0a1b      	lsrs	r3, r3, #8
 8020900:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020904:	431a      	orrs	r2, r3
 8020906:	4b40      	ldr	r3, [pc, #256]	; (8020a08 <MX_LWIP_Init+0x330>)
 8020908:	781b      	ldrb	r3, [r3, #0]
 802090a:	0619      	lsls	r1, r3, #24
 802090c:	4b3e      	ldr	r3, [pc, #248]	; (8020a08 <MX_LWIP_Init+0x330>)
 802090e:	785b      	ldrb	r3, [r3, #1]
 8020910:	041b      	lsls	r3, r3, #16
 8020912:	4319      	orrs	r1, r3
 8020914:	4b3c      	ldr	r3, [pc, #240]	; (8020a08 <MX_LWIP_Init+0x330>)
 8020916:	789b      	ldrb	r3, [r3, #2]
 8020918:	021b      	lsls	r3, r3, #8
 802091a:	430b      	orrs	r3, r1
 802091c:	493a      	ldr	r1, [pc, #232]	; (8020a08 <MX_LWIP_Init+0x330>)
 802091e:	78c9      	ldrb	r1, [r1, #3]
 8020920:	430b      	orrs	r3, r1
 8020922:	0e1b      	lsrs	r3, r3, #24
 8020924:	4313      	orrs	r3, r2
 8020926:	4a3b      	ldr	r2, [pc, #236]	; (8020a14 <MX_LWIP_Init+0x33c>)
 8020928:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 802092a:	4b38      	ldr	r3, [pc, #224]	; (8020a0c <MX_LWIP_Init+0x334>)
 802092c:	781b      	ldrb	r3, [r3, #0]
 802092e:	061a      	lsls	r2, r3, #24
 8020930:	4b36      	ldr	r3, [pc, #216]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020932:	785b      	ldrb	r3, [r3, #1]
 8020934:	041b      	lsls	r3, r3, #16
 8020936:	431a      	orrs	r2, r3
 8020938:	4b34      	ldr	r3, [pc, #208]	; (8020a0c <MX_LWIP_Init+0x334>)
 802093a:	789b      	ldrb	r3, [r3, #2]
 802093c:	021b      	lsls	r3, r3, #8
 802093e:	4313      	orrs	r3, r2
 8020940:	4a32      	ldr	r2, [pc, #200]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020942:	78d2      	ldrb	r2, [r2, #3]
 8020944:	4313      	orrs	r3, r2
 8020946:	061a      	lsls	r2, r3, #24
 8020948:	4b30      	ldr	r3, [pc, #192]	; (8020a0c <MX_LWIP_Init+0x334>)
 802094a:	781b      	ldrb	r3, [r3, #0]
 802094c:	0619      	lsls	r1, r3, #24
 802094e:	4b2f      	ldr	r3, [pc, #188]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020950:	785b      	ldrb	r3, [r3, #1]
 8020952:	041b      	lsls	r3, r3, #16
 8020954:	4319      	orrs	r1, r3
 8020956:	4b2d      	ldr	r3, [pc, #180]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020958:	789b      	ldrb	r3, [r3, #2]
 802095a:	021b      	lsls	r3, r3, #8
 802095c:	430b      	orrs	r3, r1
 802095e:	492b      	ldr	r1, [pc, #172]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020960:	78c9      	ldrb	r1, [r1, #3]
 8020962:	430b      	orrs	r3, r1
 8020964:	021b      	lsls	r3, r3, #8
 8020966:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802096a:	431a      	orrs	r2, r3
 802096c:	4b27      	ldr	r3, [pc, #156]	; (8020a0c <MX_LWIP_Init+0x334>)
 802096e:	781b      	ldrb	r3, [r3, #0]
 8020970:	0619      	lsls	r1, r3, #24
 8020972:	4b26      	ldr	r3, [pc, #152]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020974:	785b      	ldrb	r3, [r3, #1]
 8020976:	041b      	lsls	r3, r3, #16
 8020978:	4319      	orrs	r1, r3
 802097a:	4b24      	ldr	r3, [pc, #144]	; (8020a0c <MX_LWIP_Init+0x334>)
 802097c:	789b      	ldrb	r3, [r3, #2]
 802097e:	021b      	lsls	r3, r3, #8
 8020980:	430b      	orrs	r3, r1
 8020982:	4922      	ldr	r1, [pc, #136]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020984:	78c9      	ldrb	r1, [r1, #3]
 8020986:	430b      	orrs	r3, r1
 8020988:	0a1b      	lsrs	r3, r3, #8
 802098a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802098e:	431a      	orrs	r2, r3
 8020990:	4b1e      	ldr	r3, [pc, #120]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020992:	781b      	ldrb	r3, [r3, #0]
 8020994:	0619      	lsls	r1, r3, #24
 8020996:	4b1d      	ldr	r3, [pc, #116]	; (8020a0c <MX_LWIP_Init+0x334>)
 8020998:	785b      	ldrb	r3, [r3, #1]
 802099a:	041b      	lsls	r3, r3, #16
 802099c:	4319      	orrs	r1, r3
 802099e:	4b1b      	ldr	r3, [pc, #108]	; (8020a0c <MX_LWIP_Init+0x334>)
 80209a0:	789b      	ldrb	r3, [r3, #2]
 80209a2:	021b      	lsls	r3, r3, #8
 80209a4:	430b      	orrs	r3, r1
 80209a6:	4919      	ldr	r1, [pc, #100]	; (8020a0c <MX_LWIP_Init+0x334>)
 80209a8:	78c9      	ldrb	r1, [r1, #3]
 80209aa:	430b      	orrs	r3, r1
 80209ac:	0e1b      	lsrs	r3, r3, #24
 80209ae:	4313      	orrs	r3, r2
 80209b0:	4a19      	ldr	r2, [pc, #100]	; (8020a18 <MX_LWIP_Init+0x340>)
 80209b2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80209b4:	4b19      	ldr	r3, [pc, #100]	; (8020a1c <MX_LWIP_Init+0x344>)
 80209b6:	9302      	str	r3, [sp, #8]
 80209b8:	4b19      	ldr	r3, [pc, #100]	; (8020a20 <MX_LWIP_Init+0x348>)
 80209ba:	9301      	str	r3, [sp, #4]
 80209bc:	2300      	movs	r3, #0
 80209be:	9300      	str	r3, [sp, #0]
 80209c0:	4b15      	ldr	r3, [pc, #84]	; (8020a18 <MX_LWIP_Init+0x340>)
 80209c2:	4a14      	ldr	r2, [pc, #80]	; (8020a14 <MX_LWIP_Init+0x33c>)
 80209c4:	4912      	ldr	r1, [pc, #72]	; (8020a10 <MX_LWIP_Init+0x338>)
 80209c6:	4817      	ldr	r0, [pc, #92]	; (8020a24 <MX_LWIP_Init+0x34c>)
 80209c8:	f001 f998 	bl	8021cfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80209cc:	4815      	ldr	r0, [pc, #84]	; (8020a24 <MX_LWIP_Init+0x34c>)
 80209ce:	f001 fb49 	bl	8022064 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80209d2:	4b14      	ldr	r3, [pc, #80]	; (8020a24 <MX_LWIP_Init+0x34c>)
 80209d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80209d8:	089b      	lsrs	r3, r3, #2
 80209da:	f003 0301 	and.w	r3, r3, #1
 80209de:	b2db      	uxtb	r3, r3
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d003      	beq.n	80209ec <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80209e4:	480f      	ldr	r0, [pc, #60]	; (8020a24 <MX_LWIP_Init+0x34c>)
 80209e6:	f001 fb4d 	bl	8022084 <netif_set_up>
 80209ea:	e002      	b.n	80209f2 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80209ec:	480d      	ldr	r0, [pc, #52]	; (8020a24 <MX_LWIP_Init+0x34c>)
 80209ee:	f001 fbb5 	bl	802215c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80209f2:	490d      	ldr	r1, [pc, #52]	; (8020a28 <MX_LWIP_Init+0x350>)
 80209f4:	480b      	ldr	r0, [pc, #44]	; (8020a24 <MX_LWIP_Init+0x34c>)
 80209f6:	f001 fc47 	bl	8022288 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80209fa:	46bd      	mov	sp, r7
 80209fc:	bd80      	pop	{r7, pc}
 80209fe:	bf00      	nop
 8020a00:	20000504 	.word	0x20000504
 8020a04:	2000dd1c 	.word	0x2000dd1c
 8020a08:	2000dd20 	.word	0x2000dd20
 8020a0c:	2000dd24 	.word	0x2000dd24
 8020a10:	2000dd10 	.word	0x2000dd10
 8020a14:	2000dd14 	.word	0x2000dd14
 8020a18:	2000dd18 	.word	0x2000dd18
 8020a1c:	08026045 	.word	0x08026045
 8020a20:	08020db9 	.word	0x08020db9
 8020a24:	2000dcd0 	.word	0x2000dcd0
 8020a28:	08020a7d 	.word	0x08020a7d

08020a2c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8020a2c:	b580      	push	{r7, lr}
 8020a2e:	b082      	sub	sp, #8
 8020a30:	af00      	add	r7, sp, #0
 8020a32:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8020a34:	f7f8 fd26 	bl	8019484 <HAL_GetTick>
 8020a38:	4602      	mov	r2, r0
 8020a3a:	4b08      	ldr	r3, [pc, #32]	; (8020a5c <Ethernet_Link_Periodic_Handle+0x30>)
 8020a3c:	681b      	ldr	r3, [r3, #0]
 8020a3e:	1ad3      	subs	r3, r2, r3
 8020a40:	2b63      	cmp	r3, #99	; 0x63
 8020a42:	d907      	bls.n	8020a54 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8020a44:	f7f8 fd1e 	bl	8019484 <HAL_GetTick>
 8020a48:	4603      	mov	r3, r0
 8020a4a:	4a04      	ldr	r2, [pc, #16]	; (8020a5c <Ethernet_Link_Periodic_Handle+0x30>)
 8020a4c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8020a4e:	6878      	ldr	r0, [r7, #4]
 8020a50:	f000 fb10 	bl	8021074 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8020a54:	bf00      	nop
 8020a56:	3708      	adds	r7, #8
 8020a58:	46bd      	mov	sp, r7
 8020a5a:	bd80      	pop	{r7, pc}
 8020a5c:	2000dccc 	.word	0x2000dccc

08020a60 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8020a64:	4804      	ldr	r0, [pc, #16]	; (8020a78 <MX_LWIP_Process+0x18>)
 8020a66:	f000 f987 	bl	8020d78 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8020a6a:	f002 fb83 	bl	8023174 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8020a6e:	4802      	ldr	r0, [pc, #8]	; (8020a78 <MX_LWIP_Process+0x18>)
 8020a70:	f7ff ffdc 	bl	8020a2c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8020a74:	bf00      	nop
 8020a76:	bd80      	pop	{r7, pc}
 8020a78:	2000dcd0 	.word	0x2000dcd0

08020a7c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8020a7c:	b480      	push	{r7}
 8020a7e:	b083      	sub	sp, #12
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8020a84:	bf00      	nop
 8020a86:	370c      	adds	r7, #12
 8020a88:	46bd      	mov	sp, r7
 8020a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a8e:	4770      	bx	lr

08020a90 <SCB_InvalidateDCache_by_Addr>:
{
 8020a90:	b480      	push	{r7}
 8020a92:	b087      	sub	sp, #28
 8020a94:	af00      	add	r7, sp, #0
 8020a96:	6078      	str	r0, [r7, #4]
 8020a98:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8020a9a:	683b      	ldr	r3, [r7, #0]
 8020a9c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8020aa2:	2320      	movs	r3, #32
 8020aa4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8020aa6:	f3bf 8f4f 	dsb	sy
}
 8020aaa:	bf00      	nop
    while (op_size > 0) {
 8020aac:	e00b      	b.n	8020ac6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8020aae:	4a0d      	ldr	r2, [pc, #52]	; (8020ae4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8020ab0:	693b      	ldr	r3, [r7, #16]
 8020ab2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8020ab6:	68fb      	ldr	r3, [r7, #12]
 8020ab8:	693a      	ldr	r2, [r7, #16]
 8020aba:	4413      	add	r3, r2
 8020abc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8020abe:	697a      	ldr	r2, [r7, #20]
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	1ad3      	subs	r3, r2, r3
 8020ac4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8020ac6:	697b      	ldr	r3, [r7, #20]
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	dcf0      	bgt.n	8020aae <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8020acc:	f3bf 8f4f 	dsb	sy
}
 8020ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8020ad2:	f3bf 8f6f 	isb	sy
}
 8020ad6:	bf00      	nop
}
 8020ad8:	bf00      	nop
 8020ada:	371c      	adds	r7, #28
 8020adc:	46bd      	mov	sp, r7
 8020ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ae2:	4770      	bx	lr
 8020ae4:	e000ed00 	.word	0xe000ed00

08020ae8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8020ae8:	b580      	push	{r7, lr}
 8020aea:	b084      	sub	sp, #16
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8020af0:	2300      	movs	r3, #0
 8020af2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8020af4:	4b47      	ldr	r3, [pc, #284]	; (8020c14 <low_level_init+0x12c>)
 8020af6:	4a48      	ldr	r2, [pc, #288]	; (8020c18 <low_level_init+0x130>)
 8020af8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8020afa:	2300      	movs	r3, #0
 8020afc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8020afe:	2380      	movs	r3, #128	; 0x80
 8020b00:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8020b02:	23e1      	movs	r3, #225	; 0xe1
 8020b04:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8020b06:	2300      	movs	r3, #0
 8020b08:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8020b0a:	2300      	movs	r3, #0
 8020b0c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8020b0e:	2300      	movs	r3, #0
 8020b10:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8020b12:	4a40      	ldr	r2, [pc, #256]	; (8020c14 <low_level_init+0x12c>)
 8020b14:	f107 0308 	add.w	r3, r7, #8
 8020b18:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8020b1a:	4b3e      	ldr	r3, [pc, #248]	; (8020c14 <low_level_init+0x12c>)
 8020b1c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8020b20:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8020b22:	4b3c      	ldr	r3, [pc, #240]	; (8020c14 <low_level_init+0x12c>)
 8020b24:	4a3d      	ldr	r2, [pc, #244]	; (8020c1c <low_level_init+0x134>)
 8020b26:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8020b28:	4b3a      	ldr	r3, [pc, #232]	; (8020c14 <low_level_init+0x12c>)
 8020b2a:	4a3d      	ldr	r2, [pc, #244]	; (8020c20 <low_level_init+0x138>)
 8020b2c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8020b2e:	4b39      	ldr	r3, [pc, #228]	; (8020c14 <low_level_init+0x12c>)
 8020b30:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8020b34:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 8020b36:	4b3b      	ldr	r3, [pc, #236]	; (8020c24 <low_level_init+0x13c>)
 8020b38:	781b      	ldrb	r3, [r3, #0]
 8020b3a:	2b01      	cmp	r3, #1
 8020b3c:	d002      	beq.n	8020b44 <low_level_init+0x5c>
 8020b3e:	2b02      	cmp	r3, #2
 8020b40:	d004      	beq.n	8020b4c <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 8020b42:	e063      	b.n	8020c0c <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 8020b44:	4b33      	ldr	r3, [pc, #204]	; (8020c14 <low_level_init+0x12c>)
 8020b46:	4a38      	ldr	r2, [pc, #224]	; (8020c28 <low_level_init+0x140>)
 8020b48:	605a      	str	r2, [r3, #4]
		break;
 8020b4a:	e003      	b.n	8020b54 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 8020b4c:	4b31      	ldr	r3, [pc, #196]	; (8020c14 <low_level_init+0x12c>)
 8020b4e:	4a37      	ldr	r2, [pc, #220]	; (8020c2c <low_level_init+0x144>)
 8020b50:	605a      	str	r2, [r3, #4]
		break;
 8020b52:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8020b54:	482f      	ldr	r0, [pc, #188]	; (8020c14 <low_level_init+0x12c>)
 8020b56:	f7f9 fdbb 	bl	801a6d0 <HAL_ETH_Init>
 8020b5a:	4603      	mov	r3, r0
 8020b5c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8020b5e:	2238      	movs	r2, #56	; 0x38
 8020b60:	2100      	movs	r1, #0
 8020b62:	4833      	ldr	r0, [pc, #204]	; (8020c30 <low_level_init+0x148>)
 8020b64:	f005 fbb0 	bl	80262c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8020b68:	4b31      	ldr	r3, [pc, #196]	; (8020c30 <low_level_init+0x148>)
 8020b6a:	2221      	movs	r2, #33	; 0x21
 8020b6c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8020b6e:	4b30      	ldr	r3, [pc, #192]	; (8020c30 <low_level_init+0x148>)
 8020b70:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8020b74:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8020b76:	4b2e      	ldr	r3, [pc, #184]	; (8020c30 <low_level_init+0x148>)
 8020b78:	2200      	movs	r2, #0
 8020b7a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8020b7c:	482d      	ldr	r0, [pc, #180]	; (8020c34 <low_level_init+0x14c>)
 8020b7e:	f000 ff3d 	bl	80219fc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	2206      	movs	r2, #6
 8020b86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8020b8a:	4b22      	ldr	r3, [pc, #136]	; (8020c14 <low_level_init+0x12c>)
 8020b8c:	685b      	ldr	r3, [r3, #4]
 8020b8e:	781a      	ldrb	r2, [r3, #0]
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8020b96:	4b1f      	ldr	r3, [pc, #124]	; (8020c14 <low_level_init+0x12c>)
 8020b98:	685b      	ldr	r3, [r3, #4]
 8020b9a:	785a      	ldrb	r2, [r3, #1]
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8020ba2:	4b1c      	ldr	r3, [pc, #112]	; (8020c14 <low_level_init+0x12c>)
 8020ba4:	685b      	ldr	r3, [r3, #4]
 8020ba6:	789a      	ldrb	r2, [r3, #2]
 8020ba8:	687b      	ldr	r3, [r7, #4]
 8020baa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8020bae:	4b19      	ldr	r3, [pc, #100]	; (8020c14 <low_level_init+0x12c>)
 8020bb0:	685b      	ldr	r3, [r3, #4]
 8020bb2:	78da      	ldrb	r2, [r3, #3]
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8020bba:	4b16      	ldr	r3, [pc, #88]	; (8020c14 <low_level_init+0x12c>)
 8020bbc:	685b      	ldr	r3, [r3, #4]
 8020bbe:	791a      	ldrb	r2, [r3, #4]
 8020bc0:	687b      	ldr	r3, [r7, #4]
 8020bc2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8020bc6:	4b13      	ldr	r3, [pc, #76]	; (8020c14 <low_level_init+0x12c>)
 8020bc8:	685b      	ldr	r3, [r3, #4]
 8020bca:	795a      	ldrb	r2, [r3, #5]
 8020bcc:	687b      	ldr	r3, [r7, #4]
 8020bce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8020bd8:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8020bda:	687b      	ldr	r3, [r7, #4]
 8020bdc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020be0:	f043 030a 	orr.w	r3, r3, #10
 8020be4:	b2da      	uxtb	r2, r3
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8020bec:	4912      	ldr	r1, [pc, #72]	; (8020c38 <low_level_init+0x150>)
 8020bee:	4813      	ldr	r0, [pc, #76]	; (8020c3c <low_level_init+0x154>)
 8020bf0:	f7f8 fa87 	bl	8019102 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8020bf4:	4811      	ldr	r0, [pc, #68]	; (8020c3c <low_level_init+0x154>)
 8020bf6:	f7f8 fab6 	bl	8019166 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8020bfa:	7bfb      	ldrb	r3, [r7, #15]
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d103      	bne.n	8020c08 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8020c00:	6878      	ldr	r0, [r7, #4]
 8020c02:	f000 fa37 	bl	8021074 <ethernet_link_check_state>
 8020c06:	e001      	b.n	8020c0c <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 8020c08:	f7f6 fe42 	bl	8017890 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8020c0c:	3710      	adds	r7, #16
 8020c0e:	46bd      	mov	sp, r7
 8020c10:	bd80      	pop	{r7, pc}
 8020c12:	bf00      	nop
 8020c14:	20012624 	.word	0x20012624
 8020c18:	40028000 	.word	0x40028000
 8020c1c:	20000444 	.word	0x20000444
 8020c20:	200003a4 	.word	0x200003a4
 8020c24:	20000504 	.word	0x20000504
 8020c28:	20000549 	.word	0x20000549
 8020c2c:	200007b7 	.word	0x200007b7
 8020c30:	200126d4 	.word	0x200126d4
 8020c34:	0802da24 	.word	0x0802da24
 8020c38:	20000328 	.word	0x20000328
 8020c3c:	2001270c 	.word	0x2001270c

08020c40 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8020c40:	b580      	push	{r7, lr}
 8020c42:	b092      	sub	sp, #72	; 0x48
 8020c44:	af00      	add	r7, sp, #0
 8020c46:	6078      	str	r0, [r7, #4]
 8020c48:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8020c4a:	2300      	movs	r3, #0
 8020c4c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8020c4e:	2300      	movs	r3, #0
 8020c50:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8020c52:	2300      	movs	r3, #0
 8020c54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8020c58:	f107 030c 	add.w	r3, r7, #12
 8020c5c:	2230      	movs	r2, #48	; 0x30
 8020c5e:	2100      	movs	r1, #0
 8020c60:	4618      	mov	r0, r3
 8020c62:	f005 fb31 	bl	80262c8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8020c66:	f107 030c 	add.w	r3, r7, #12
 8020c6a:	2230      	movs	r2, #48	; 0x30
 8020c6c:	2100      	movs	r1, #0
 8020c6e:	4618      	mov	r0, r3
 8020c70:	f005 fb2a 	bl	80262c8 <memset>

  for(q = p; q != NULL; q = q->next)
 8020c74:	683b      	ldr	r3, [r7, #0]
 8020c76:	643b      	str	r3, [r7, #64]	; 0x40
 8020c78:	e045      	b.n	8020d06 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8020c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020c7c:	2b03      	cmp	r3, #3
 8020c7e:	d902      	bls.n	8020c86 <low_level_output+0x46>
      return ERR_IF;
 8020c80:	f06f 030b 	mvn.w	r3, #11
 8020c84:	e055      	b.n	8020d32 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8020c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020c88:	6859      	ldr	r1, [r3, #4]
 8020c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020c8c:	4613      	mov	r3, r2
 8020c8e:	005b      	lsls	r3, r3, #1
 8020c90:	4413      	add	r3, r2
 8020c92:	009b      	lsls	r3, r3, #2
 8020c94:	3348      	adds	r3, #72	; 0x48
 8020c96:	443b      	add	r3, r7
 8020c98:	3b3c      	subs	r3, #60	; 0x3c
 8020c9a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8020c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020c9e:	895b      	ldrh	r3, [r3, #10]
 8020ca0:	4619      	mov	r1, r3
 8020ca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020ca4:	4613      	mov	r3, r2
 8020ca6:	005b      	lsls	r3, r3, #1
 8020ca8:	4413      	add	r3, r2
 8020caa:	009b      	lsls	r3, r3, #2
 8020cac:	3348      	adds	r3, #72	; 0x48
 8020cae:	443b      	add	r3, r7
 8020cb0:	3b38      	subs	r3, #56	; 0x38
 8020cb2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8020cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d011      	beq.n	8020cde <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8020cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020cbc:	1e5a      	subs	r2, r3, #1
 8020cbe:	f107 000c 	add.w	r0, r7, #12
 8020cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8020cc4:	460b      	mov	r3, r1
 8020cc6:	005b      	lsls	r3, r3, #1
 8020cc8:	440b      	add	r3, r1
 8020cca:	009b      	lsls	r3, r3, #2
 8020ccc:	18c1      	adds	r1, r0, r3
 8020cce:	4613      	mov	r3, r2
 8020cd0:	005b      	lsls	r3, r3, #1
 8020cd2:	4413      	add	r3, r2
 8020cd4:	009b      	lsls	r3, r3, #2
 8020cd6:	3348      	adds	r3, #72	; 0x48
 8020cd8:	443b      	add	r3, r7
 8020cda:	3b34      	subs	r3, #52	; 0x34
 8020cdc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8020cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d109      	bne.n	8020cfa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8020ce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020ce8:	4613      	mov	r3, r2
 8020cea:	005b      	lsls	r3, r3, #1
 8020cec:	4413      	add	r3, r2
 8020cee:	009b      	lsls	r3, r3, #2
 8020cf0:	3348      	adds	r3, #72	; 0x48
 8020cf2:	443b      	add	r3, r7
 8020cf4:	3b34      	subs	r3, #52	; 0x34
 8020cf6:	2200      	movs	r2, #0
 8020cf8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8020cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020cfc:	3301      	adds	r3, #1
 8020cfe:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8020d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	643b      	str	r3, [r7, #64]	; 0x40
 8020d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d1b6      	bne.n	8020c7a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8020d0c:	683b      	ldr	r3, [r7, #0]
 8020d0e:	891b      	ldrh	r3, [r3, #8]
 8020d10:	461a      	mov	r2, r3
 8020d12:	4b0a      	ldr	r3, [pc, #40]	; (8020d3c <low_level_output+0xfc>)
 8020d14:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8020d16:	4a09      	ldr	r2, [pc, #36]	; (8020d3c <low_level_output+0xfc>)
 8020d18:	f107 030c 	add.w	r3, r7, #12
 8020d1c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8020d1e:	4a07      	ldr	r2, [pc, #28]	; (8020d3c <low_level_output+0xfc>)
 8020d20:	683b      	ldr	r3, [r7, #0]
 8020d22:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8020d24:	2214      	movs	r2, #20
 8020d26:	4905      	ldr	r1, [pc, #20]	; (8020d3c <low_level_output+0xfc>)
 8020d28:	4805      	ldr	r0, [pc, #20]	; (8020d40 <low_level_output+0x100>)
 8020d2a:	f7f9 fe05 	bl	801a938 <HAL_ETH_Transmit>

  return errval;
 8020d2e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8020d32:	4618      	mov	r0, r3
 8020d34:	3748      	adds	r7, #72	; 0x48
 8020d36:	46bd      	mov	sp, r7
 8020d38:	bd80      	pop	{r7, pc}
 8020d3a:	bf00      	nop
 8020d3c:	200126d4 	.word	0x200126d4
 8020d40:	20012624 	.word	0x20012624

08020d44 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b084      	sub	sp, #16
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8020d50:	4b07      	ldr	r3, [pc, #28]	; (8020d70 <low_level_input+0x2c>)
 8020d52:	781b      	ldrb	r3, [r3, #0]
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	d105      	bne.n	8020d64 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8020d58:	f107 030c 	add.w	r3, r7, #12
 8020d5c:	4619      	mov	r1, r3
 8020d5e:	4805      	ldr	r0, [pc, #20]	; (8020d74 <low_level_input+0x30>)
 8020d60:	f7f9 fe7e 	bl	801aa60 <HAL_ETH_ReadData>
  }

  return p;
 8020d64:	68fb      	ldr	r3, [r7, #12]
}
 8020d66:	4618      	mov	r0, r3
 8020d68:	3710      	adds	r7, #16
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	bd80      	pop	{r7, pc}
 8020d6e:	bf00      	nop
 8020d70:	20012620 	.word	0x20012620
 8020d74:	20012624 	.word	0x20012624

08020d78 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8020d78:	b580      	push	{r7, lr}
 8020d7a:	b084      	sub	sp, #16
 8020d7c:	af00      	add	r7, sp, #0
 8020d7e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8020d80:	2300      	movs	r3, #0
 8020d82:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8020d84:	6878      	ldr	r0, [r7, #4]
 8020d86:	f7ff ffdd 	bl	8020d44 <low_level_input>
 8020d8a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8020d8c:	68fb      	ldr	r3, [r7, #12]
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	d00a      	beq.n	8020da8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	691b      	ldr	r3, [r3, #16]
 8020d96:	6879      	ldr	r1, [r7, #4]
 8020d98:	68f8      	ldr	r0, [r7, #12]
 8020d9a:	4798      	blx	r3
 8020d9c:	4603      	mov	r3, r0
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d002      	beq.n	8020da8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8020da2:	68f8      	ldr	r0, [r7, #12]
 8020da4:	f001 fe40 	bl	8022a28 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8020da8:	68fb      	ldr	r3, [r7, #12]
 8020daa:	2b00      	cmp	r3, #0
 8020dac:	d1ea      	bne.n	8020d84 <ethernetif_input+0xc>
}
 8020dae:	bf00      	nop
 8020db0:	bf00      	nop
 8020db2:	3710      	adds	r7, #16
 8020db4:	46bd      	mov	sp, r7
 8020db6:	bd80      	pop	{r7, pc}

08020db8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8020db8:	b580      	push	{r7, lr}
 8020dba:	b082      	sub	sp, #8
 8020dbc:	af00      	add	r7, sp, #0
 8020dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	d106      	bne.n	8020dd4 <ethernetif_init+0x1c>
 8020dc6:	4b0e      	ldr	r3, [pc, #56]	; (8020e00 <ethernetif_init+0x48>)
 8020dc8:	f240 1287 	movw	r2, #391	; 0x187
 8020dcc:	490d      	ldr	r1, [pc, #52]	; (8020e04 <ethernetif_init+0x4c>)
 8020dce:	480e      	ldr	r0, [pc, #56]	; (8020e08 <ethernetif_init+0x50>)
 8020dd0:	f005 fb62 	bl	8026498 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	2273      	movs	r2, #115	; 0x73
 8020dd8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	2274      	movs	r2, #116	; 0x74
 8020de0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	4a09      	ldr	r2, [pc, #36]	; (8020e0c <ethernetif_init+0x54>)
 8020de8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	4a08      	ldr	r2, [pc, #32]	; (8020e10 <ethernetif_init+0x58>)
 8020dee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8020df0:	6878      	ldr	r0, [r7, #4]
 8020df2:	f7ff fe79 	bl	8020ae8 <low_level_init>

  return ERR_OK;
 8020df6:	2300      	movs	r3, #0
}
 8020df8:	4618      	mov	r0, r3
 8020dfa:	3708      	adds	r7, #8
 8020dfc:	46bd      	mov	sp, r7
 8020dfe:	bd80      	pop	{r7, pc}
 8020e00:	0802bcbc 	.word	0x0802bcbc
 8020e04:	0802bd14 	.word	0x0802bd14
 8020e08:	0802bd24 	.word	0x0802bd24
 8020e0c:	080243d5 	.word	0x080243d5
 8020e10:	08020c41 	.word	0x08020c41

08020e14 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8020e14:	b580      	push	{r7, lr}
 8020e16:	b084      	sub	sp, #16
 8020e18:	af00      	add	r7, sp, #0
 8020e1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8020e20:	68f9      	ldr	r1, [r7, #12]
 8020e22:	4807      	ldr	r0, [pc, #28]	; (8020e40 <pbuf_free_custom+0x2c>)
 8020e24:	f000 fecc 	bl	8021bc0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8020e28:	4b06      	ldr	r3, [pc, #24]	; (8020e44 <pbuf_free_custom+0x30>)
 8020e2a:	781b      	ldrb	r3, [r3, #0]
 8020e2c:	2b01      	cmp	r3, #1
 8020e2e:	d102      	bne.n	8020e36 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8020e30:	4b04      	ldr	r3, [pc, #16]	; (8020e44 <pbuf_free_custom+0x30>)
 8020e32:	2200      	movs	r2, #0
 8020e34:	701a      	strb	r2, [r3, #0]
  }
}
 8020e36:	bf00      	nop
 8020e38:	3710      	adds	r7, #16
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	0802da24 	.word	0x0802da24
 8020e44:	20012620 	.word	0x20012620

08020e48 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 8020e48:	b580      	push	{r7, lr}
 8020e4a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8020e4c:	f7f8 fb1a 	bl	8019484 <HAL_GetTick>
 8020e50:	4603      	mov	r3, r0
}
 8020e52:	4618      	mov	r0, r3
 8020e54:	bd80      	pop	{r7, pc}
	...

08020e58 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8020e58:	b580      	push	{r7, lr}
 8020e5a:	b08e      	sub	sp, #56	; 0x38
 8020e5c:	af00      	add	r7, sp, #0
 8020e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e64:	2200      	movs	r2, #0
 8020e66:	601a      	str	r2, [r3, #0]
 8020e68:	605a      	str	r2, [r3, #4]
 8020e6a:	609a      	str	r2, [r3, #8]
 8020e6c:	60da      	str	r2, [r3, #12]
 8020e6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	681b      	ldr	r3, [r3, #0]
 8020e74:	4a52      	ldr	r2, [pc, #328]	; (8020fc0 <HAL_ETH_MspInit+0x168>)
 8020e76:	4293      	cmp	r3, r2
 8020e78:	f040 809e 	bne.w	8020fb8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8020e7c:	4b51      	ldr	r3, [pc, #324]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e80:	4a50      	ldr	r2, [pc, #320]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8020e86:	6313      	str	r3, [r2, #48]	; 0x30
 8020e88:	4b4e      	ldr	r3, [pc, #312]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020e90:	623b      	str	r3, [r7, #32]
 8020e92:	6a3b      	ldr	r3, [r7, #32]
 8020e94:	4b4b      	ldr	r3, [pc, #300]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e98:	4a4a      	ldr	r2, [pc, #296]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020e9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8020e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8020ea0:	4b48      	ldr	r3, [pc, #288]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8020ea8:	61fb      	str	r3, [r7, #28]
 8020eaa:	69fb      	ldr	r3, [r7, #28]
 8020eac:	4b45      	ldr	r3, [pc, #276]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020eb0:	4a44      	ldr	r2, [pc, #272]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020eb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8020eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8020eb8:	4b42      	ldr	r3, [pc, #264]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8020ec0:	61bb      	str	r3, [r7, #24]
 8020ec2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020ec4:	4b3f      	ldr	r3, [pc, #252]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ec8:	4a3e      	ldr	r2, [pc, #248]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020eca:	f043 0304 	orr.w	r3, r3, #4
 8020ece:	6313      	str	r3, [r2, #48]	; 0x30
 8020ed0:	4b3c      	ldr	r3, [pc, #240]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ed4:	f003 0304 	and.w	r3, r3, #4
 8020ed8:	617b      	str	r3, [r7, #20]
 8020eda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020edc:	4b39      	ldr	r3, [pc, #228]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ee0:	4a38      	ldr	r2, [pc, #224]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020ee2:	f043 0301 	orr.w	r3, r3, #1
 8020ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8020ee8:	4b36      	ldr	r3, [pc, #216]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020eec:	f003 0301 	and.w	r3, r3, #1
 8020ef0:	613b      	str	r3, [r7, #16]
 8020ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020ef4:	4b33      	ldr	r3, [pc, #204]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ef8:	4a32      	ldr	r2, [pc, #200]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020efa:	f043 0302 	orr.w	r3, r3, #2
 8020efe:	6313      	str	r3, [r2, #48]	; 0x30
 8020f00:	4b30      	ldr	r3, [pc, #192]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f04:	f003 0302 	and.w	r3, r3, #2
 8020f08:	60fb      	str	r3, [r7, #12]
 8020f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8020f0c:	4b2d      	ldr	r3, [pc, #180]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f10:	4a2c      	ldr	r2, [pc, #176]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f16:	6313      	str	r3, [r2, #48]	; 0x30
 8020f18:	4b2a      	ldr	r3, [pc, #168]	; (8020fc4 <HAL_ETH_MspInit+0x16c>)
 8020f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020f20:	60bb      	str	r3, [r7, #8]
 8020f22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 8020f24:	2332      	movs	r3, #50	; 0x32
 8020f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020f28:	2302      	movs	r3, #2
 8020f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020f30:	2303      	movs	r3, #3
 8020f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020f34:	230b      	movs	r3, #11
 8020f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020f3c:	4619      	mov	r1, r3
 8020f3e:	4822      	ldr	r0, [pc, #136]	; (8020fc8 <HAL_ETH_MspInit+0x170>)
 8020f40:	f7fa fdac 	bl	801ba9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 8020f44:	2386      	movs	r3, #134	; 0x86
 8020f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020f48:	2302      	movs	r3, #2
 8020f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f4c:	2300      	movs	r3, #0
 8020f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020f50:	2303      	movs	r3, #3
 8020f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020f54:	230b      	movs	r3, #11
 8020f56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020f5c:	4619      	mov	r1, r3
 8020f5e:	481b      	ldr	r0, [pc, #108]	; (8020fcc <HAL_ETH_MspInit+0x174>)
 8020f60:	f7fa fd9c 	bl	801ba9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 8020f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020f6a:	2302      	movs	r3, #2
 8020f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f6e:	2300      	movs	r3, #0
 8020f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020f72:	2303      	movs	r3, #3
 8020f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020f76:	230b      	movs	r3, #11
 8020f78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8020f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020f7e:	4619      	mov	r1, r3
 8020f80:	4813      	ldr	r0, [pc, #76]	; (8020fd0 <HAL_ETH_MspInit+0x178>)
 8020f82:	f7fa fd8b 	bl	801ba9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 8020f86:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020f8c:	2302      	movs	r3, #2
 8020f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f90:	2300      	movs	r3, #0
 8020f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020f94:	2303      	movs	r3, #3
 8020f96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020f98:	230b      	movs	r3, #11
 8020f9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020fa0:	4619      	mov	r1, r3
 8020fa2:	480c      	ldr	r0, [pc, #48]	; (8020fd4 <HAL_ETH_MspInit+0x17c>)
 8020fa4:	f7fa fd7a 	bl	801ba9c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8020fa8:	2200      	movs	r2, #0
 8020faa:	2101      	movs	r1, #1
 8020fac:	203d      	movs	r0, #61	; 0x3d
 8020fae:	f7f9 fa4a 	bl	801a446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8020fb2:	203d      	movs	r0, #61	; 0x3d
 8020fb4:	f7f9 fa63 	bl	801a47e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8020fb8:	bf00      	nop
 8020fba:	3738      	adds	r7, #56	; 0x38
 8020fbc:	46bd      	mov	sp, r7
 8020fbe:	bd80      	pop	{r7, pc}
 8020fc0:	40028000 	.word	0x40028000
 8020fc4:	40023800 	.word	0x40023800
 8020fc8:	40020800 	.word	0x40020800
 8020fcc:	40020000 	.word	0x40020000
 8020fd0:	40020400 	.word	0x40020400
 8020fd4:	40021800 	.word	0x40021800

08020fd8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8020fd8:	b580      	push	{r7, lr}
 8020fda:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8020fdc:	4802      	ldr	r0, [pc, #8]	; (8020fe8 <ETH_PHY_IO_Init+0x10>)
 8020fde:	f7fa f903 	bl	801b1e8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8020fe2:	2300      	movs	r3, #0
}
 8020fe4:	4618      	mov	r0, r3
 8020fe6:	bd80      	pop	{r7, pc}
 8020fe8:	20012624 	.word	0x20012624

08020fec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8020fec:	b480      	push	{r7}
 8020fee:	af00      	add	r7, sp, #0
  return 0;
 8020ff0:	2300      	movs	r3, #0
}
 8020ff2:	4618      	mov	r0, r3
 8020ff4:	46bd      	mov	sp, r7
 8020ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffa:	4770      	bx	lr

08020ffc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8020ffc:	b580      	push	{r7, lr}
 8020ffe:	b084      	sub	sp, #16
 8021000:	af00      	add	r7, sp, #0
 8021002:	60f8      	str	r0, [r7, #12]
 8021004:	60b9      	str	r1, [r7, #8]
 8021006:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	68ba      	ldr	r2, [r7, #8]
 802100c:	68f9      	ldr	r1, [r7, #12]
 802100e:	4807      	ldr	r0, [pc, #28]	; (802102c <ETH_PHY_IO_ReadReg+0x30>)
 8021010:	f7f9 ff52 	bl	801aeb8 <HAL_ETH_ReadPHYRegister>
 8021014:	4603      	mov	r3, r0
 8021016:	2b00      	cmp	r3, #0
 8021018:	d002      	beq.n	8021020 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 802101a:	f04f 33ff 	mov.w	r3, #4294967295
 802101e:	e000      	b.n	8021022 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8021020:	2300      	movs	r3, #0
}
 8021022:	4618      	mov	r0, r3
 8021024:	3710      	adds	r7, #16
 8021026:	46bd      	mov	sp, r7
 8021028:	bd80      	pop	{r7, pc}
 802102a:	bf00      	nop
 802102c:	20012624 	.word	0x20012624

08021030 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8021030:	b580      	push	{r7, lr}
 8021032:	b084      	sub	sp, #16
 8021034:	af00      	add	r7, sp, #0
 8021036:	60f8      	str	r0, [r7, #12]
 8021038:	60b9      	str	r1, [r7, #8]
 802103a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	68ba      	ldr	r2, [r7, #8]
 8021040:	68f9      	ldr	r1, [r7, #12]
 8021042:	4807      	ldr	r0, [pc, #28]	; (8021060 <ETH_PHY_IO_WriteReg+0x30>)
 8021044:	f7f9 ff83 	bl	801af4e <HAL_ETH_WritePHYRegister>
 8021048:	4603      	mov	r3, r0
 802104a:	2b00      	cmp	r3, #0
 802104c:	d002      	beq.n	8021054 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 802104e:	f04f 33ff 	mov.w	r3, #4294967295
 8021052:	e000      	b.n	8021056 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8021054:	2300      	movs	r3, #0
}
 8021056:	4618      	mov	r0, r3
 8021058:	3710      	adds	r7, #16
 802105a:	46bd      	mov	sp, r7
 802105c:	bd80      	pop	{r7, pc}
 802105e:	bf00      	nop
 8021060:	20012624 	.word	0x20012624

08021064 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8021064:	b580      	push	{r7, lr}
 8021066:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8021068:	f7f8 fa0c 	bl	8019484 <HAL_GetTick>
 802106c:	4603      	mov	r3, r0
}
 802106e:	4618      	mov	r0, r3
 8021070:	bd80      	pop	{r7, pc}
	...

08021074 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8021074:	b580      	push	{r7, lr}
 8021076:	b0a0      	sub	sp, #128	; 0x80
 8021078:	af00      	add	r7, sp, #0
 802107a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 802107c:	f107 030c 	add.w	r3, r7, #12
 8021080:	2264      	movs	r2, #100	; 0x64
 8021082:	2100      	movs	r1, #0
 8021084:	4618      	mov	r0, r3
 8021086:	f005 f91f 	bl	80262c8 <memset>
  int32_t PHYLinkState = 0;
 802108a:	2300      	movs	r3, #0
 802108c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 802108e:	2300      	movs	r3, #0
 8021090:	67fb      	str	r3, [r7, #124]	; 0x7c
 8021092:	2300      	movs	r3, #0
 8021094:	67bb      	str	r3, [r7, #120]	; 0x78
 8021096:	2300      	movs	r3, #0
 8021098:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 802109a:	483a      	ldr	r0, [pc, #232]	; (8021184 <ethernet_link_check_state+0x110>)
 802109c:	f7f8 f90b 	bl	80192b6 <DP83848_GetLinkState>
 80210a0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80210a2:	687b      	ldr	r3, [r7, #4]
 80210a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80210a8:	089b      	lsrs	r3, r3, #2
 80210aa:	f003 0301 	and.w	r3, r3, #1
 80210ae:	b2db      	uxtb	r3, r3
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d00c      	beq.n	80210ce <ethernet_link_check_state+0x5a>
 80210b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80210b6:	2b01      	cmp	r3, #1
 80210b8:	dc09      	bgt.n	80210ce <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80210ba:	4833      	ldr	r0, [pc, #204]	; (8021188 <ethernet_link_check_state+0x114>)
 80210bc:	f7f9 fbe3 	bl	801a886 <HAL_ETH_Stop>
    netif_set_down(netif);
 80210c0:	6878      	ldr	r0, [r7, #4]
 80210c2:	f001 f84b 	bl	802215c <netif_set_down>
    netif_set_link_down(netif);
 80210c6:	6878      	ldr	r0, [r7, #4]
 80210c8:	f001 f8ae 	bl	8022228 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80210cc:	e055      	b.n	802117a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80210d4:	f003 0304 	and.w	r3, r3, #4
 80210d8:	2b00      	cmp	r3, #0
 80210da:	d14e      	bne.n	802117a <ethernet_link_check_state+0x106>
 80210dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80210de:	2b01      	cmp	r3, #1
 80210e0:	dd4b      	ble.n	802117a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80210e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80210e4:	3b02      	subs	r3, #2
 80210e6:	2b03      	cmp	r3, #3
 80210e8:	d82a      	bhi.n	8021140 <ethernet_link_check_state+0xcc>
 80210ea:	a201      	add	r2, pc, #4	; (adr r2, 80210f0 <ethernet_link_check_state+0x7c>)
 80210ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210f0:	08021101 	.word	0x08021101
 80210f4:	08021113 	.word	0x08021113
 80210f8:	08021123 	.word	0x08021123
 80210fc:	08021133 	.word	0x08021133
      duplex = ETH_FULLDUPLEX_MODE;
 8021100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021104:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8021106:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802110a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802110c:	2301      	movs	r3, #1
 802110e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8021110:	e017      	b.n	8021142 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8021112:	2300      	movs	r3, #0
 8021114:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8021116:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802111a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802111c:	2301      	movs	r3, #1
 802111e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8021120:	e00f      	b.n	8021142 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8021122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021126:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8021128:	2300      	movs	r3, #0
 802112a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802112c:	2301      	movs	r3, #1
 802112e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8021130:	e007      	b.n	8021142 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8021132:	2300      	movs	r3, #0
 8021134:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8021136:	2300      	movs	r3, #0
 8021138:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 802113a:	2301      	movs	r3, #1
 802113c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 802113e:	e000      	b.n	8021142 <ethernet_link_check_state+0xce>
      break;
 8021140:	bf00      	nop
    if(linkchanged)
 8021142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021144:	2b00      	cmp	r3, #0
 8021146:	d018      	beq.n	802117a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8021148:	f107 030c 	add.w	r3, r7, #12
 802114c:	4619      	mov	r1, r3
 802114e:	480e      	ldr	r0, [pc, #56]	; (8021188 <ethernet_link_check_state+0x114>)
 8021150:	f7f9 ff46 	bl	801afe0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8021154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021156:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8021158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802115a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 802115c:	f107 030c 	add.w	r3, r7, #12
 8021160:	4619      	mov	r1, r3
 8021162:	4809      	ldr	r0, [pc, #36]	; (8021188 <ethernet_link_check_state+0x114>)
 8021164:	f7fa f826 	bl	801b1b4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8021168:	4807      	ldr	r0, [pc, #28]	; (8021188 <ethernet_link_check_state+0x114>)
 802116a:	f7f9 fb2d 	bl	801a7c8 <HAL_ETH_Start>
      netif_set_up(netif);
 802116e:	6878      	ldr	r0, [r7, #4]
 8021170:	f000 ff88 	bl	8022084 <netif_set_up>
      netif_set_link_up(netif);
 8021174:	6878      	ldr	r0, [r7, #4]
 8021176:	f001 f823 	bl	80221c0 <netif_set_link_up>
}
 802117a:	bf00      	nop
 802117c:	3780      	adds	r7, #128	; 0x80
 802117e:	46bd      	mov	sp, r7
 8021180:	bd80      	pop	{r7, pc}
 8021182:	bf00      	nop
 8021184:	2001270c 	.word	0x2001270c
 8021188:	20012624 	.word	0x20012624

0802118c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 802118c:	b580      	push	{r7, lr}
 802118e:	b086      	sub	sp, #24
 8021190:	af02      	add	r7, sp, #8
 8021192:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8021194:	4812      	ldr	r0, [pc, #72]	; (80211e0 <HAL_ETH_RxAllocateCallback+0x54>)
 8021196:	f000 fca5 	bl	8021ae4 <memp_malloc_pool>
 802119a:	60f8      	str	r0, [r7, #12]
	if (p)
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d014      	beq.n	80211cc <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80211a2:	68fb      	ldr	r3, [r7, #12]
 80211a4:	f103 0214 	add.w	r2, r3, #20
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 80211ac:	68fb      	ldr	r3, [r7, #12]
 80211ae:	4a0d      	ldr	r2, [pc, #52]	; (80211e4 <HAL_ETH_RxAllocateCallback+0x58>)
 80211b0:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80211b2:	687b      	ldr	r3, [r7, #4]
 80211b4:	681b      	ldr	r3, [r3, #0]
 80211b6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80211ba:	9201      	str	r2, [sp, #4]
 80211bc:	9300      	str	r3, [sp, #0]
 80211be:	68fb      	ldr	r3, [r7, #12]
 80211c0:	2241      	movs	r2, #65	; 0x41
 80211c2:	2100      	movs	r1, #0
 80211c4:	2000      	movs	r0, #0
 80211c6:	f001 fa75 	bl	80226b4 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80211ca:	e005      	b.n	80211d8 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 80211cc:	4b06      	ldr	r3, [pc, #24]	; (80211e8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80211ce:	2201      	movs	r2, #1
 80211d0:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 80211d2:	687b      	ldr	r3, [r7, #4]
 80211d4:	2200      	movs	r2, #0
 80211d6:	601a      	str	r2, [r3, #0]
}
 80211d8:	bf00      	nop
 80211da:	3710      	adds	r7, #16
 80211dc:	46bd      	mov	sp, r7
 80211de:	bd80      	pop	{r7, pc}
 80211e0:	0802da24 	.word	0x0802da24
 80211e4:	08020e15 	.word	0x08020e15
 80211e8:	20012620 	.word	0x20012620

080211ec <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80211ec:	b580      	push	{r7, lr}
 80211ee:	b088      	sub	sp, #32
 80211f0:	af00      	add	r7, sp, #0
 80211f2:	60f8      	str	r0, [r7, #12]
 80211f4:	60b9      	str	r1, [r7, #8]
 80211f6:	607a      	str	r2, [r7, #4]
 80211f8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 80211fa:	68fb      	ldr	r3, [r7, #12]
 80211fc:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80211fe:	68bb      	ldr	r3, [r7, #8]
 8021200:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 8021202:	2300      	movs	r3, #0
 8021204:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	3b14      	subs	r3, #20
 802120a:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 802120c:	69fb      	ldr	r3, [r7, #28]
 802120e:	2200      	movs	r2, #0
 8021210:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 8021212:	69fb      	ldr	r3, [r7, #28]
 8021214:	2200      	movs	r2, #0
 8021216:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 8021218:	69fb      	ldr	r3, [r7, #28]
 802121a:	887a      	ldrh	r2, [r7, #2]
 802121c:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 802121e:	69bb      	ldr	r3, [r7, #24]
 8021220:	681b      	ldr	r3, [r3, #0]
 8021222:	2b00      	cmp	r3, #0
 8021224:	d103      	bne.n	802122e <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 8021226:	69bb      	ldr	r3, [r7, #24]
 8021228:	69fa      	ldr	r2, [r7, #28]
 802122a:	601a      	str	r2, [r3, #0]
 802122c:	e003      	b.n	8021236 <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 802122e:	697b      	ldr	r3, [r7, #20]
 8021230:	681b      	ldr	r3, [r3, #0]
 8021232:	69fa      	ldr	r2, [r7, #28]
 8021234:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 8021236:	697b      	ldr	r3, [r7, #20]
 8021238:	69fa      	ldr	r2, [r7, #28]
 802123a:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 802123c:	69bb      	ldr	r3, [r7, #24]
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	61fb      	str	r3, [r7, #28]
 8021242:	e009      	b.n	8021258 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 8021244:	69fb      	ldr	r3, [r7, #28]
 8021246:	891a      	ldrh	r2, [r3, #8]
 8021248:	887b      	ldrh	r3, [r7, #2]
 802124a:	4413      	add	r3, r2
 802124c:	b29a      	uxth	r2, r3
 802124e:	69fb      	ldr	r3, [r7, #28]
 8021250:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 8021252:	69fb      	ldr	r3, [r7, #28]
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	61fb      	str	r3, [r7, #28]
 8021258:	69fb      	ldr	r3, [r7, #28]
 802125a:	2b00      	cmp	r3, #0
 802125c:	d1f2      	bne.n	8021244 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 802125e:	887b      	ldrh	r3, [r7, #2]
 8021260:	4619      	mov	r1, r3
 8021262:	6878      	ldr	r0, [r7, #4]
 8021264:	f7ff fc14 	bl	8020a90 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8021268:	bf00      	nop
 802126a:	3720      	adds	r7, #32
 802126c:	46bd      	mov	sp, r7
 802126e:	bd80      	pop	{r7, pc}

08021270 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8021270:	b480      	push	{r7}
 8021272:	b083      	sub	sp, #12
 8021274:	af00      	add	r7, sp, #0
 8021276:	4603      	mov	r3, r0
 8021278:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 802127a:	88fb      	ldrh	r3, [r7, #6]
 802127c:	021b      	lsls	r3, r3, #8
 802127e:	b21a      	sxth	r2, r3
 8021280:	88fb      	ldrh	r3, [r7, #6]
 8021282:	0a1b      	lsrs	r3, r3, #8
 8021284:	b29b      	uxth	r3, r3
 8021286:	b21b      	sxth	r3, r3
 8021288:	4313      	orrs	r3, r2
 802128a:	b21b      	sxth	r3, r3
 802128c:	b29b      	uxth	r3, r3
}
 802128e:	4618      	mov	r0, r3
 8021290:	370c      	adds	r7, #12
 8021292:	46bd      	mov	sp, r7
 8021294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021298:	4770      	bx	lr

0802129a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 802129a:	b580      	push	{r7, lr}
 802129c:	b082      	sub	sp, #8
 802129e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80212a0:	2300      	movs	r3, #0
 80212a2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80212a4:	f000 f8d2 	bl	802144c <mem_init>
  memp_init();
 80212a8:	f000 fbd8 	bl	8021a5c <memp_init>
  pbuf_init();
  netif_init();
 80212ac:	f000 fcfc 	bl	8021ca8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80212b0:	f001 ff9a 	bl	80231e8 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80212b4:	f001 ff16 	bl	80230e4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80212b8:	bf00      	nop
 80212ba:	3708      	adds	r7, #8
 80212bc:	46bd      	mov	sp, r7
 80212be:	bd80      	pop	{r7, pc}

080212c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80212c0:	b480      	push	{r7}
 80212c2:	b083      	sub	sp, #12
 80212c4:	af00      	add	r7, sp, #0
 80212c6:	4603      	mov	r3, r0
 80212c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80212ca:	4b05      	ldr	r3, [pc, #20]	; (80212e0 <ptr_to_mem+0x20>)
 80212cc:	681a      	ldr	r2, [r3, #0]
 80212ce:	88fb      	ldrh	r3, [r7, #6]
 80212d0:	4413      	add	r3, r2
}
 80212d2:	4618      	mov	r0, r3
 80212d4:	370c      	adds	r7, #12
 80212d6:	46bd      	mov	sp, r7
 80212d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212dc:	4770      	bx	lr
 80212de:	bf00      	nop
 80212e0:	20012d98 	.word	0x20012d98

080212e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80212e4:	b480      	push	{r7}
 80212e6:	b083      	sub	sp, #12
 80212e8:	af00      	add	r7, sp, #0
 80212ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80212ec:	4b05      	ldr	r3, [pc, #20]	; (8021304 <mem_to_ptr+0x20>)
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	687a      	ldr	r2, [r7, #4]
 80212f2:	1ad3      	subs	r3, r2, r3
 80212f4:	b29b      	uxth	r3, r3
}
 80212f6:	4618      	mov	r0, r3
 80212f8:	370c      	adds	r7, #12
 80212fa:	46bd      	mov	sp, r7
 80212fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021300:	4770      	bx	lr
 8021302:	bf00      	nop
 8021304:	20012d98 	.word	0x20012d98

08021308 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8021308:	b590      	push	{r4, r7, lr}
 802130a:	b085      	sub	sp, #20
 802130c:	af00      	add	r7, sp, #0
 802130e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8021310:	4b45      	ldr	r3, [pc, #276]	; (8021428 <plug_holes+0x120>)
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	687a      	ldr	r2, [r7, #4]
 8021316:	429a      	cmp	r2, r3
 8021318:	d206      	bcs.n	8021328 <plug_holes+0x20>
 802131a:	4b44      	ldr	r3, [pc, #272]	; (802142c <plug_holes+0x124>)
 802131c:	f240 12df 	movw	r2, #479	; 0x1df
 8021320:	4943      	ldr	r1, [pc, #268]	; (8021430 <plug_holes+0x128>)
 8021322:	4844      	ldr	r0, [pc, #272]	; (8021434 <plug_holes+0x12c>)
 8021324:	f005 f8b8 	bl	8026498 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8021328:	4b43      	ldr	r3, [pc, #268]	; (8021438 <plug_holes+0x130>)
 802132a:	681b      	ldr	r3, [r3, #0]
 802132c:	687a      	ldr	r2, [r7, #4]
 802132e:	429a      	cmp	r2, r3
 8021330:	d306      	bcc.n	8021340 <plug_holes+0x38>
 8021332:	4b3e      	ldr	r3, [pc, #248]	; (802142c <plug_holes+0x124>)
 8021334:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021338:	4940      	ldr	r1, [pc, #256]	; (802143c <plug_holes+0x134>)
 802133a:	483e      	ldr	r0, [pc, #248]	; (8021434 <plug_holes+0x12c>)
 802133c:	f005 f8ac 	bl	8026498 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	791b      	ldrb	r3, [r3, #4]
 8021344:	2b00      	cmp	r3, #0
 8021346:	d006      	beq.n	8021356 <plug_holes+0x4e>
 8021348:	4b38      	ldr	r3, [pc, #224]	; (802142c <plug_holes+0x124>)
 802134a:	f240 12e1 	movw	r2, #481	; 0x1e1
 802134e:	493c      	ldr	r1, [pc, #240]	; (8021440 <plug_holes+0x138>)
 8021350:	4838      	ldr	r0, [pc, #224]	; (8021434 <plug_holes+0x12c>)
 8021352:	f005 f8a1 	bl	8026498 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	881b      	ldrh	r3, [r3, #0]
 802135a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802135e:	d906      	bls.n	802136e <plug_holes+0x66>
 8021360:	4b32      	ldr	r3, [pc, #200]	; (802142c <plug_holes+0x124>)
 8021362:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8021366:	4937      	ldr	r1, [pc, #220]	; (8021444 <plug_holes+0x13c>)
 8021368:	4832      	ldr	r0, [pc, #200]	; (8021434 <plug_holes+0x12c>)
 802136a:	f005 f895 	bl	8026498 <iprintf>

  nmem = ptr_to_mem(mem->next);
 802136e:	687b      	ldr	r3, [r7, #4]
 8021370:	881b      	ldrh	r3, [r3, #0]
 8021372:	4618      	mov	r0, r3
 8021374:	f7ff ffa4 	bl	80212c0 <ptr_to_mem>
 8021378:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 802137a:	687a      	ldr	r2, [r7, #4]
 802137c:	68fb      	ldr	r3, [r7, #12]
 802137e:	429a      	cmp	r2, r3
 8021380:	d024      	beq.n	80213cc <plug_holes+0xc4>
 8021382:	68fb      	ldr	r3, [r7, #12]
 8021384:	791b      	ldrb	r3, [r3, #4]
 8021386:	2b00      	cmp	r3, #0
 8021388:	d120      	bne.n	80213cc <plug_holes+0xc4>
 802138a:	4b2b      	ldr	r3, [pc, #172]	; (8021438 <plug_holes+0x130>)
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	68fa      	ldr	r2, [r7, #12]
 8021390:	429a      	cmp	r2, r3
 8021392:	d01b      	beq.n	80213cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8021394:	4b2c      	ldr	r3, [pc, #176]	; (8021448 <plug_holes+0x140>)
 8021396:	681b      	ldr	r3, [r3, #0]
 8021398:	68fa      	ldr	r2, [r7, #12]
 802139a:	429a      	cmp	r2, r3
 802139c:	d102      	bne.n	80213a4 <plug_holes+0x9c>
      lfree = mem;
 802139e:	4a2a      	ldr	r2, [pc, #168]	; (8021448 <plug_holes+0x140>)
 80213a0:	687b      	ldr	r3, [r7, #4]
 80213a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80213a4:	68fb      	ldr	r3, [r7, #12]
 80213a6:	881a      	ldrh	r2, [r3, #0]
 80213a8:	687b      	ldr	r3, [r7, #4]
 80213aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80213ac:	68fb      	ldr	r3, [r7, #12]
 80213ae:	881b      	ldrh	r3, [r3, #0]
 80213b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80213b4:	d00a      	beq.n	80213cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	881b      	ldrh	r3, [r3, #0]
 80213ba:	4618      	mov	r0, r3
 80213bc:	f7ff ff80 	bl	80212c0 <ptr_to_mem>
 80213c0:	4604      	mov	r4, r0
 80213c2:	6878      	ldr	r0, [r7, #4]
 80213c4:	f7ff ff8e 	bl	80212e4 <mem_to_ptr>
 80213c8:	4603      	mov	r3, r0
 80213ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80213cc:	687b      	ldr	r3, [r7, #4]
 80213ce:	885b      	ldrh	r3, [r3, #2]
 80213d0:	4618      	mov	r0, r3
 80213d2:	f7ff ff75 	bl	80212c0 <ptr_to_mem>
 80213d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80213d8:	68ba      	ldr	r2, [r7, #8]
 80213da:	687b      	ldr	r3, [r7, #4]
 80213dc:	429a      	cmp	r2, r3
 80213de:	d01f      	beq.n	8021420 <plug_holes+0x118>
 80213e0:	68bb      	ldr	r3, [r7, #8]
 80213e2:	791b      	ldrb	r3, [r3, #4]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d11b      	bne.n	8021420 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80213e8:	4b17      	ldr	r3, [pc, #92]	; (8021448 <plug_holes+0x140>)
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	687a      	ldr	r2, [r7, #4]
 80213ee:	429a      	cmp	r2, r3
 80213f0:	d102      	bne.n	80213f8 <plug_holes+0xf0>
      lfree = pmem;
 80213f2:	4a15      	ldr	r2, [pc, #84]	; (8021448 <plug_holes+0x140>)
 80213f4:	68bb      	ldr	r3, [r7, #8]
 80213f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	881a      	ldrh	r2, [r3, #0]
 80213fc:	68bb      	ldr	r3, [r7, #8]
 80213fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	881b      	ldrh	r3, [r3, #0]
 8021404:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021408:	d00a      	beq.n	8021420 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	881b      	ldrh	r3, [r3, #0]
 802140e:	4618      	mov	r0, r3
 8021410:	f7ff ff56 	bl	80212c0 <ptr_to_mem>
 8021414:	4604      	mov	r4, r0
 8021416:	68b8      	ldr	r0, [r7, #8]
 8021418:	f7ff ff64 	bl	80212e4 <mem_to_ptr>
 802141c:	4603      	mov	r3, r0
 802141e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8021420:	bf00      	nop
 8021422:	3714      	adds	r7, #20
 8021424:	46bd      	mov	sp, r7
 8021426:	bd90      	pop	{r4, r7, pc}
 8021428:	20012d98 	.word	0x20012d98
 802142c:	0802bd4c 	.word	0x0802bd4c
 8021430:	0802bdb8 	.word	0x0802bdb8
 8021434:	0802bdd0 	.word	0x0802bdd0
 8021438:	20012d9c 	.word	0x20012d9c
 802143c:	0802bdf8 	.word	0x0802bdf8
 8021440:	0802be14 	.word	0x0802be14
 8021444:	0802be30 	.word	0x0802be30
 8021448:	20012da0 	.word	0x20012da0

0802144c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 802144c:	b580      	push	{r7, lr}
 802144e:	b082      	sub	sp, #8
 8021450:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8021452:	4b18      	ldr	r3, [pc, #96]	; (80214b4 <mem_init+0x68>)
 8021454:	3303      	adds	r3, #3
 8021456:	f023 0303 	bic.w	r3, r3, #3
 802145a:	461a      	mov	r2, r3
 802145c:	4b16      	ldr	r3, [pc, #88]	; (80214b8 <mem_init+0x6c>)
 802145e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8021460:	4b15      	ldr	r3, [pc, #84]	; (80214b8 <mem_init+0x6c>)
 8021462:	681b      	ldr	r3, [r3, #0]
 8021464:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 802146c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 802146e:	687b      	ldr	r3, [r7, #4]
 8021470:	2200      	movs	r2, #0
 8021472:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8021474:	687b      	ldr	r3, [r7, #4]
 8021476:	2200      	movs	r2, #0
 8021478:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 802147a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 802147e:	f7ff ff1f 	bl	80212c0 <ptr_to_mem>
 8021482:	4603      	mov	r3, r0
 8021484:	4a0d      	ldr	r2, [pc, #52]	; (80214bc <mem_init+0x70>)
 8021486:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8021488:	4b0c      	ldr	r3, [pc, #48]	; (80214bc <mem_init+0x70>)
 802148a:	681b      	ldr	r3, [r3, #0]
 802148c:	2201      	movs	r2, #1
 802148e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8021490:	4b0a      	ldr	r3, [pc, #40]	; (80214bc <mem_init+0x70>)
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8021498:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 802149a:	4b08      	ldr	r3, [pc, #32]	; (80214bc <mem_init+0x70>)
 802149c:	681b      	ldr	r3, [r3, #0]
 802149e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80214a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80214a4:	4b04      	ldr	r3, [pc, #16]	; (80214b8 <mem_init+0x6c>)
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	4a05      	ldr	r2, [pc, #20]	; (80214c0 <mem_init+0x74>)
 80214aa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80214ac:	bf00      	nop
 80214ae:	3708      	adds	r7, #8
 80214b0:	46bd      	mov	sp, r7
 80214b2:	bd80      	pop	{r7, pc}
 80214b4:	20012744 	.word	0x20012744
 80214b8:	20012d98 	.word	0x20012d98
 80214bc:	20012d9c 	.word	0x20012d9c
 80214c0:	20012da0 	.word	0x20012da0

080214c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80214c4:	b580      	push	{r7, lr}
 80214c6:	b086      	sub	sp, #24
 80214c8:	af00      	add	r7, sp, #0
 80214ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80214cc:	6878      	ldr	r0, [r7, #4]
 80214ce:	f7ff ff09 	bl	80212e4 <mem_to_ptr>
 80214d2:	4603      	mov	r3, r0
 80214d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80214d6:	687b      	ldr	r3, [r7, #4]
 80214d8:	881b      	ldrh	r3, [r3, #0]
 80214da:	4618      	mov	r0, r3
 80214dc:	f7ff fef0 	bl	80212c0 <ptr_to_mem>
 80214e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80214e2:	687b      	ldr	r3, [r7, #4]
 80214e4:	885b      	ldrh	r3, [r3, #2]
 80214e6:	4618      	mov	r0, r3
 80214e8:	f7ff feea 	bl	80212c0 <ptr_to_mem>
 80214ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80214ee:	687b      	ldr	r3, [r7, #4]
 80214f0:	881b      	ldrh	r3, [r3, #0]
 80214f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80214f6:	d818      	bhi.n	802152a <mem_link_valid+0x66>
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	885b      	ldrh	r3, [r3, #2]
 80214fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021500:	d813      	bhi.n	802152a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8021506:	8afa      	ldrh	r2, [r7, #22]
 8021508:	429a      	cmp	r2, r3
 802150a:	d004      	beq.n	8021516 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802150c:	68fb      	ldr	r3, [r7, #12]
 802150e:	881b      	ldrh	r3, [r3, #0]
 8021510:	8afa      	ldrh	r2, [r7, #22]
 8021512:	429a      	cmp	r2, r3
 8021514:	d109      	bne.n	802152a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8021516:	4b08      	ldr	r3, [pc, #32]	; (8021538 <mem_link_valid+0x74>)
 8021518:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802151a:	693a      	ldr	r2, [r7, #16]
 802151c:	429a      	cmp	r2, r3
 802151e:	d006      	beq.n	802152e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8021520:	693b      	ldr	r3, [r7, #16]
 8021522:	885b      	ldrh	r3, [r3, #2]
 8021524:	8afa      	ldrh	r2, [r7, #22]
 8021526:	429a      	cmp	r2, r3
 8021528:	d001      	beq.n	802152e <mem_link_valid+0x6a>
    return 0;
 802152a:	2300      	movs	r3, #0
 802152c:	e000      	b.n	8021530 <mem_link_valid+0x6c>
  }
  return 1;
 802152e:	2301      	movs	r3, #1
}
 8021530:	4618      	mov	r0, r3
 8021532:	3718      	adds	r7, #24
 8021534:	46bd      	mov	sp, r7
 8021536:	bd80      	pop	{r7, pc}
 8021538:	20012d9c 	.word	0x20012d9c

0802153c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 802153c:	b580      	push	{r7, lr}
 802153e:	b084      	sub	sp, #16
 8021540:	af00      	add	r7, sp, #0
 8021542:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8021544:	687b      	ldr	r3, [r7, #4]
 8021546:	2b00      	cmp	r3, #0
 8021548:	d04c      	beq.n	80215e4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 802154a:	687b      	ldr	r3, [r7, #4]
 802154c:	f003 0303 	and.w	r3, r3, #3
 8021550:	2b00      	cmp	r3, #0
 8021552:	d007      	beq.n	8021564 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8021554:	4b25      	ldr	r3, [pc, #148]	; (80215ec <mem_free+0xb0>)
 8021556:	f240 2273 	movw	r2, #627	; 0x273
 802155a:	4925      	ldr	r1, [pc, #148]	; (80215f0 <mem_free+0xb4>)
 802155c:	4825      	ldr	r0, [pc, #148]	; (80215f4 <mem_free+0xb8>)
 802155e:	f004 ff9b 	bl	8026498 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021562:	e040      	b.n	80215e6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8021564:	687b      	ldr	r3, [r7, #4]
 8021566:	3b08      	subs	r3, #8
 8021568:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 802156a:	4b23      	ldr	r3, [pc, #140]	; (80215f8 <mem_free+0xbc>)
 802156c:	681b      	ldr	r3, [r3, #0]
 802156e:	68fa      	ldr	r2, [r7, #12]
 8021570:	429a      	cmp	r2, r3
 8021572:	d306      	bcc.n	8021582 <mem_free+0x46>
 8021574:	687b      	ldr	r3, [r7, #4]
 8021576:	f103 020c 	add.w	r2, r3, #12
 802157a:	4b20      	ldr	r3, [pc, #128]	; (80215fc <mem_free+0xc0>)
 802157c:	681b      	ldr	r3, [r3, #0]
 802157e:	429a      	cmp	r2, r3
 8021580:	d907      	bls.n	8021592 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8021582:	4b1a      	ldr	r3, [pc, #104]	; (80215ec <mem_free+0xb0>)
 8021584:	f240 227f 	movw	r2, #639	; 0x27f
 8021588:	491d      	ldr	r1, [pc, #116]	; (8021600 <mem_free+0xc4>)
 802158a:	481a      	ldr	r0, [pc, #104]	; (80215f4 <mem_free+0xb8>)
 802158c:	f004 ff84 	bl	8026498 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021590:	e029      	b.n	80215e6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8021592:	68fb      	ldr	r3, [r7, #12]
 8021594:	791b      	ldrb	r3, [r3, #4]
 8021596:	2b00      	cmp	r3, #0
 8021598:	d107      	bne.n	80215aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 802159a:	4b14      	ldr	r3, [pc, #80]	; (80215ec <mem_free+0xb0>)
 802159c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80215a0:	4918      	ldr	r1, [pc, #96]	; (8021604 <mem_free+0xc8>)
 80215a2:	4814      	ldr	r0, [pc, #80]	; (80215f4 <mem_free+0xb8>)
 80215a4:	f004 ff78 	bl	8026498 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80215a8:	e01d      	b.n	80215e6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80215aa:	68f8      	ldr	r0, [r7, #12]
 80215ac:	f7ff ff8a 	bl	80214c4 <mem_link_valid>
 80215b0:	4603      	mov	r3, r0
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d107      	bne.n	80215c6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80215b6:	4b0d      	ldr	r3, [pc, #52]	; (80215ec <mem_free+0xb0>)
 80215b8:	f240 2295 	movw	r2, #661	; 0x295
 80215bc:	4912      	ldr	r1, [pc, #72]	; (8021608 <mem_free+0xcc>)
 80215be:	480d      	ldr	r0, [pc, #52]	; (80215f4 <mem_free+0xb8>)
 80215c0:	f004 ff6a 	bl	8026498 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80215c4:	e00f      	b.n	80215e6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	2200      	movs	r2, #0
 80215ca:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80215cc:	4b0f      	ldr	r3, [pc, #60]	; (802160c <mem_free+0xd0>)
 80215ce:	681b      	ldr	r3, [r3, #0]
 80215d0:	68fa      	ldr	r2, [r7, #12]
 80215d2:	429a      	cmp	r2, r3
 80215d4:	d202      	bcs.n	80215dc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80215d6:	4a0d      	ldr	r2, [pc, #52]	; (802160c <mem_free+0xd0>)
 80215d8:	68fb      	ldr	r3, [r7, #12]
 80215da:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80215dc:	68f8      	ldr	r0, [r7, #12]
 80215de:	f7ff fe93 	bl	8021308 <plug_holes>
 80215e2:	e000      	b.n	80215e6 <mem_free+0xaa>
    return;
 80215e4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80215e6:	3710      	adds	r7, #16
 80215e8:	46bd      	mov	sp, r7
 80215ea:	bd80      	pop	{r7, pc}
 80215ec:	0802bd4c 	.word	0x0802bd4c
 80215f0:	0802be5c 	.word	0x0802be5c
 80215f4:	0802bdd0 	.word	0x0802bdd0
 80215f8:	20012d98 	.word	0x20012d98
 80215fc:	20012d9c 	.word	0x20012d9c
 8021600:	0802be80 	.word	0x0802be80
 8021604:	0802be9c 	.word	0x0802be9c
 8021608:	0802bec4 	.word	0x0802bec4
 802160c:	20012da0 	.word	0x20012da0

08021610 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8021610:	b580      	push	{r7, lr}
 8021612:	b088      	sub	sp, #32
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
 8021618:	460b      	mov	r3, r1
 802161a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 802161c:	887b      	ldrh	r3, [r7, #2]
 802161e:	3303      	adds	r3, #3
 8021620:	b29b      	uxth	r3, r3
 8021622:	f023 0303 	bic.w	r3, r3, #3
 8021626:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8021628:	8bfb      	ldrh	r3, [r7, #30]
 802162a:	2b0b      	cmp	r3, #11
 802162c:	d801      	bhi.n	8021632 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 802162e:	230c      	movs	r3, #12
 8021630:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8021632:	8bfb      	ldrh	r3, [r7, #30]
 8021634:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021638:	d803      	bhi.n	8021642 <mem_trim+0x32>
 802163a:	8bfa      	ldrh	r2, [r7, #30]
 802163c:	887b      	ldrh	r3, [r7, #2]
 802163e:	429a      	cmp	r2, r3
 8021640:	d201      	bcs.n	8021646 <mem_trim+0x36>
    return NULL;
 8021642:	2300      	movs	r3, #0
 8021644:	e0cc      	b.n	80217e0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8021646:	4b68      	ldr	r3, [pc, #416]	; (80217e8 <mem_trim+0x1d8>)
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	687a      	ldr	r2, [r7, #4]
 802164c:	429a      	cmp	r2, r3
 802164e:	d304      	bcc.n	802165a <mem_trim+0x4a>
 8021650:	4b66      	ldr	r3, [pc, #408]	; (80217ec <mem_trim+0x1dc>)
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	687a      	ldr	r2, [r7, #4]
 8021656:	429a      	cmp	r2, r3
 8021658:	d306      	bcc.n	8021668 <mem_trim+0x58>
 802165a:	4b65      	ldr	r3, [pc, #404]	; (80217f0 <mem_trim+0x1e0>)
 802165c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021660:	4964      	ldr	r1, [pc, #400]	; (80217f4 <mem_trim+0x1e4>)
 8021662:	4865      	ldr	r0, [pc, #404]	; (80217f8 <mem_trim+0x1e8>)
 8021664:	f004 ff18 	bl	8026498 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8021668:	4b5f      	ldr	r3, [pc, #380]	; (80217e8 <mem_trim+0x1d8>)
 802166a:	681b      	ldr	r3, [r3, #0]
 802166c:	687a      	ldr	r2, [r7, #4]
 802166e:	429a      	cmp	r2, r3
 8021670:	d304      	bcc.n	802167c <mem_trim+0x6c>
 8021672:	4b5e      	ldr	r3, [pc, #376]	; (80217ec <mem_trim+0x1dc>)
 8021674:	681b      	ldr	r3, [r3, #0]
 8021676:	687a      	ldr	r2, [r7, #4]
 8021678:	429a      	cmp	r2, r3
 802167a:	d301      	bcc.n	8021680 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	e0af      	b.n	80217e0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8021680:	687b      	ldr	r3, [r7, #4]
 8021682:	3b08      	subs	r3, #8
 8021684:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8021686:	69b8      	ldr	r0, [r7, #24]
 8021688:	f7ff fe2c 	bl	80212e4 <mem_to_ptr>
 802168c:	4603      	mov	r3, r0
 802168e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8021690:	69bb      	ldr	r3, [r7, #24]
 8021692:	881a      	ldrh	r2, [r3, #0]
 8021694:	8afb      	ldrh	r3, [r7, #22]
 8021696:	1ad3      	subs	r3, r2, r3
 8021698:	b29b      	uxth	r3, r3
 802169a:	3b08      	subs	r3, #8
 802169c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 802169e:	8bfa      	ldrh	r2, [r7, #30]
 80216a0:	8abb      	ldrh	r3, [r7, #20]
 80216a2:	429a      	cmp	r2, r3
 80216a4:	d906      	bls.n	80216b4 <mem_trim+0xa4>
 80216a6:	4b52      	ldr	r3, [pc, #328]	; (80217f0 <mem_trim+0x1e0>)
 80216a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80216ac:	4953      	ldr	r1, [pc, #332]	; (80217fc <mem_trim+0x1ec>)
 80216ae:	4852      	ldr	r0, [pc, #328]	; (80217f8 <mem_trim+0x1e8>)
 80216b0:	f004 fef2 	bl	8026498 <iprintf>
  if (newsize > size) {
 80216b4:	8bfa      	ldrh	r2, [r7, #30]
 80216b6:	8abb      	ldrh	r3, [r7, #20]
 80216b8:	429a      	cmp	r2, r3
 80216ba:	d901      	bls.n	80216c0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80216bc:	2300      	movs	r3, #0
 80216be:	e08f      	b.n	80217e0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80216c0:	8bfa      	ldrh	r2, [r7, #30]
 80216c2:	8abb      	ldrh	r3, [r7, #20]
 80216c4:	429a      	cmp	r2, r3
 80216c6:	d101      	bne.n	80216cc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80216c8:	687b      	ldr	r3, [r7, #4]
 80216ca:	e089      	b.n	80217e0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80216cc:	69bb      	ldr	r3, [r7, #24]
 80216ce:	881b      	ldrh	r3, [r3, #0]
 80216d0:	4618      	mov	r0, r3
 80216d2:	f7ff fdf5 	bl	80212c0 <ptr_to_mem>
 80216d6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80216d8:	693b      	ldr	r3, [r7, #16]
 80216da:	791b      	ldrb	r3, [r3, #4]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	d13f      	bne.n	8021760 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80216e0:	69bb      	ldr	r3, [r7, #24]
 80216e2:	881b      	ldrh	r3, [r3, #0]
 80216e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80216e8:	d106      	bne.n	80216f8 <mem_trim+0xe8>
 80216ea:	4b41      	ldr	r3, [pc, #260]	; (80217f0 <mem_trim+0x1e0>)
 80216ec:	f240 22f5 	movw	r2, #757	; 0x2f5
 80216f0:	4943      	ldr	r1, [pc, #268]	; (8021800 <mem_trim+0x1f0>)
 80216f2:	4841      	ldr	r0, [pc, #260]	; (80217f8 <mem_trim+0x1e8>)
 80216f4:	f004 fed0 	bl	8026498 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80216f8:	693b      	ldr	r3, [r7, #16]
 80216fa:	881b      	ldrh	r3, [r3, #0]
 80216fc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80216fe:	8afa      	ldrh	r2, [r7, #22]
 8021700:	8bfb      	ldrh	r3, [r7, #30]
 8021702:	4413      	add	r3, r2
 8021704:	b29b      	uxth	r3, r3
 8021706:	3308      	adds	r3, #8
 8021708:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 802170a:	4b3e      	ldr	r3, [pc, #248]	; (8021804 <mem_trim+0x1f4>)
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	693a      	ldr	r2, [r7, #16]
 8021710:	429a      	cmp	r2, r3
 8021712:	d106      	bne.n	8021722 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8021714:	89fb      	ldrh	r3, [r7, #14]
 8021716:	4618      	mov	r0, r3
 8021718:	f7ff fdd2 	bl	80212c0 <ptr_to_mem>
 802171c:	4603      	mov	r3, r0
 802171e:	4a39      	ldr	r2, [pc, #228]	; (8021804 <mem_trim+0x1f4>)
 8021720:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8021722:	89fb      	ldrh	r3, [r7, #14]
 8021724:	4618      	mov	r0, r3
 8021726:	f7ff fdcb 	bl	80212c0 <ptr_to_mem>
 802172a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 802172c:	693b      	ldr	r3, [r7, #16]
 802172e:	2200      	movs	r2, #0
 8021730:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8021732:	693b      	ldr	r3, [r7, #16]
 8021734:	89ba      	ldrh	r2, [r7, #12]
 8021736:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8021738:	693b      	ldr	r3, [r7, #16]
 802173a:	8afa      	ldrh	r2, [r7, #22]
 802173c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 802173e:	69bb      	ldr	r3, [r7, #24]
 8021740:	89fa      	ldrh	r2, [r7, #14]
 8021742:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8021744:	693b      	ldr	r3, [r7, #16]
 8021746:	881b      	ldrh	r3, [r3, #0]
 8021748:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802174c:	d047      	beq.n	80217de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 802174e:	693b      	ldr	r3, [r7, #16]
 8021750:	881b      	ldrh	r3, [r3, #0]
 8021752:	4618      	mov	r0, r3
 8021754:	f7ff fdb4 	bl	80212c0 <ptr_to_mem>
 8021758:	4602      	mov	r2, r0
 802175a:	89fb      	ldrh	r3, [r7, #14]
 802175c:	8053      	strh	r3, [r2, #2]
 802175e:	e03e      	b.n	80217de <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8021760:	8bfb      	ldrh	r3, [r7, #30]
 8021762:	f103 0214 	add.w	r2, r3, #20
 8021766:	8abb      	ldrh	r3, [r7, #20]
 8021768:	429a      	cmp	r2, r3
 802176a:	d838      	bhi.n	80217de <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 802176c:	8afa      	ldrh	r2, [r7, #22]
 802176e:	8bfb      	ldrh	r3, [r7, #30]
 8021770:	4413      	add	r3, r2
 8021772:	b29b      	uxth	r3, r3
 8021774:	3308      	adds	r3, #8
 8021776:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8021778:	69bb      	ldr	r3, [r7, #24]
 802177a:	881b      	ldrh	r3, [r3, #0]
 802177c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021780:	d106      	bne.n	8021790 <mem_trim+0x180>
 8021782:	4b1b      	ldr	r3, [pc, #108]	; (80217f0 <mem_trim+0x1e0>)
 8021784:	f240 3216 	movw	r2, #790	; 0x316
 8021788:	491d      	ldr	r1, [pc, #116]	; (8021800 <mem_trim+0x1f0>)
 802178a:	481b      	ldr	r0, [pc, #108]	; (80217f8 <mem_trim+0x1e8>)
 802178c:	f004 fe84 	bl	8026498 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8021790:	89fb      	ldrh	r3, [r7, #14]
 8021792:	4618      	mov	r0, r3
 8021794:	f7ff fd94 	bl	80212c0 <ptr_to_mem>
 8021798:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 802179a:	4b1a      	ldr	r3, [pc, #104]	; (8021804 <mem_trim+0x1f4>)
 802179c:	681b      	ldr	r3, [r3, #0]
 802179e:	693a      	ldr	r2, [r7, #16]
 80217a0:	429a      	cmp	r2, r3
 80217a2:	d202      	bcs.n	80217aa <mem_trim+0x19a>
      lfree = mem2;
 80217a4:	4a17      	ldr	r2, [pc, #92]	; (8021804 <mem_trim+0x1f4>)
 80217a6:	693b      	ldr	r3, [r7, #16]
 80217a8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80217aa:	693b      	ldr	r3, [r7, #16]
 80217ac:	2200      	movs	r2, #0
 80217ae:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80217b0:	69bb      	ldr	r3, [r7, #24]
 80217b2:	881a      	ldrh	r2, [r3, #0]
 80217b4:	693b      	ldr	r3, [r7, #16]
 80217b6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80217b8:	693b      	ldr	r3, [r7, #16]
 80217ba:	8afa      	ldrh	r2, [r7, #22]
 80217bc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80217be:	69bb      	ldr	r3, [r7, #24]
 80217c0:	89fa      	ldrh	r2, [r7, #14]
 80217c2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80217c4:	693b      	ldr	r3, [r7, #16]
 80217c6:	881b      	ldrh	r3, [r3, #0]
 80217c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80217cc:	d007      	beq.n	80217de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80217ce:	693b      	ldr	r3, [r7, #16]
 80217d0:	881b      	ldrh	r3, [r3, #0]
 80217d2:	4618      	mov	r0, r3
 80217d4:	f7ff fd74 	bl	80212c0 <ptr_to_mem>
 80217d8:	4602      	mov	r2, r0
 80217da:	89fb      	ldrh	r3, [r7, #14]
 80217dc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80217de:	687b      	ldr	r3, [r7, #4]
}
 80217e0:	4618      	mov	r0, r3
 80217e2:	3720      	adds	r7, #32
 80217e4:	46bd      	mov	sp, r7
 80217e6:	bd80      	pop	{r7, pc}
 80217e8:	20012d98 	.word	0x20012d98
 80217ec:	20012d9c 	.word	0x20012d9c
 80217f0:	0802bd4c 	.word	0x0802bd4c
 80217f4:	0802bef8 	.word	0x0802bef8
 80217f8:	0802bdd0 	.word	0x0802bdd0
 80217fc:	0802bf10 	.word	0x0802bf10
 8021800:	0802bf30 	.word	0x0802bf30
 8021804:	20012da0 	.word	0x20012da0

08021808 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8021808:	b580      	push	{r7, lr}
 802180a:	b088      	sub	sp, #32
 802180c:	af00      	add	r7, sp, #0
 802180e:	4603      	mov	r3, r0
 8021810:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8021812:	88fb      	ldrh	r3, [r7, #6]
 8021814:	2b00      	cmp	r3, #0
 8021816:	d101      	bne.n	802181c <mem_malloc+0x14>
    return NULL;
 8021818:	2300      	movs	r3, #0
 802181a:	e0d9      	b.n	80219d0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 802181c:	88fb      	ldrh	r3, [r7, #6]
 802181e:	3303      	adds	r3, #3
 8021820:	b29b      	uxth	r3, r3
 8021822:	f023 0303 	bic.w	r3, r3, #3
 8021826:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8021828:	8bbb      	ldrh	r3, [r7, #28]
 802182a:	2b0b      	cmp	r3, #11
 802182c:	d801      	bhi.n	8021832 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 802182e:	230c      	movs	r3, #12
 8021830:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8021832:	8bbb      	ldrh	r3, [r7, #28]
 8021834:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021838:	d803      	bhi.n	8021842 <mem_malloc+0x3a>
 802183a:	8bba      	ldrh	r2, [r7, #28]
 802183c:	88fb      	ldrh	r3, [r7, #6]
 802183e:	429a      	cmp	r2, r3
 8021840:	d201      	bcs.n	8021846 <mem_malloc+0x3e>
    return NULL;
 8021842:	2300      	movs	r3, #0
 8021844:	e0c4      	b.n	80219d0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8021846:	4b64      	ldr	r3, [pc, #400]	; (80219d8 <mem_malloc+0x1d0>)
 8021848:	681b      	ldr	r3, [r3, #0]
 802184a:	4618      	mov	r0, r3
 802184c:	f7ff fd4a 	bl	80212e4 <mem_to_ptr>
 8021850:	4603      	mov	r3, r0
 8021852:	83fb      	strh	r3, [r7, #30]
 8021854:	e0b4      	b.n	80219c0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8021856:	8bfb      	ldrh	r3, [r7, #30]
 8021858:	4618      	mov	r0, r3
 802185a:	f7ff fd31 	bl	80212c0 <ptr_to_mem>
 802185e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8021860:	697b      	ldr	r3, [r7, #20]
 8021862:	791b      	ldrb	r3, [r3, #4]
 8021864:	2b00      	cmp	r3, #0
 8021866:	f040 80a4 	bne.w	80219b2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 802186a:	697b      	ldr	r3, [r7, #20]
 802186c:	881b      	ldrh	r3, [r3, #0]
 802186e:	461a      	mov	r2, r3
 8021870:	8bfb      	ldrh	r3, [r7, #30]
 8021872:	1ad3      	subs	r3, r2, r3
 8021874:	f1a3 0208 	sub.w	r2, r3, #8
 8021878:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 802187a:	429a      	cmp	r2, r3
 802187c:	f0c0 8099 	bcc.w	80219b2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8021880:	697b      	ldr	r3, [r7, #20]
 8021882:	881b      	ldrh	r3, [r3, #0]
 8021884:	461a      	mov	r2, r3
 8021886:	8bfb      	ldrh	r3, [r7, #30]
 8021888:	1ad3      	subs	r3, r2, r3
 802188a:	f1a3 0208 	sub.w	r2, r3, #8
 802188e:	8bbb      	ldrh	r3, [r7, #28]
 8021890:	3314      	adds	r3, #20
 8021892:	429a      	cmp	r2, r3
 8021894:	d333      	bcc.n	80218fe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8021896:	8bfa      	ldrh	r2, [r7, #30]
 8021898:	8bbb      	ldrh	r3, [r7, #28]
 802189a:	4413      	add	r3, r2
 802189c:	b29b      	uxth	r3, r3
 802189e:	3308      	adds	r3, #8
 80218a0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80218a2:	8a7b      	ldrh	r3, [r7, #18]
 80218a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80218a8:	d106      	bne.n	80218b8 <mem_malloc+0xb0>
 80218aa:	4b4c      	ldr	r3, [pc, #304]	; (80219dc <mem_malloc+0x1d4>)
 80218ac:	f240 3287 	movw	r2, #903	; 0x387
 80218b0:	494b      	ldr	r1, [pc, #300]	; (80219e0 <mem_malloc+0x1d8>)
 80218b2:	484c      	ldr	r0, [pc, #304]	; (80219e4 <mem_malloc+0x1dc>)
 80218b4:	f004 fdf0 	bl	8026498 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80218b8:	8a7b      	ldrh	r3, [r7, #18]
 80218ba:	4618      	mov	r0, r3
 80218bc:	f7ff fd00 	bl	80212c0 <ptr_to_mem>
 80218c0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80218c2:	68fb      	ldr	r3, [r7, #12]
 80218c4:	2200      	movs	r2, #0
 80218c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80218c8:	697b      	ldr	r3, [r7, #20]
 80218ca:	881a      	ldrh	r2, [r3, #0]
 80218cc:	68fb      	ldr	r3, [r7, #12]
 80218ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80218d0:	68fb      	ldr	r3, [r7, #12]
 80218d2:	8bfa      	ldrh	r2, [r7, #30]
 80218d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80218d6:	697b      	ldr	r3, [r7, #20]
 80218d8:	8a7a      	ldrh	r2, [r7, #18]
 80218da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80218dc:	697b      	ldr	r3, [r7, #20]
 80218de:	2201      	movs	r2, #1
 80218e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80218e2:	68fb      	ldr	r3, [r7, #12]
 80218e4:	881b      	ldrh	r3, [r3, #0]
 80218e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80218ea:	d00b      	beq.n	8021904 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80218ec:	68fb      	ldr	r3, [r7, #12]
 80218ee:	881b      	ldrh	r3, [r3, #0]
 80218f0:	4618      	mov	r0, r3
 80218f2:	f7ff fce5 	bl	80212c0 <ptr_to_mem>
 80218f6:	4602      	mov	r2, r0
 80218f8:	8a7b      	ldrh	r3, [r7, #18]
 80218fa:	8053      	strh	r3, [r2, #2]
 80218fc:	e002      	b.n	8021904 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80218fe:	697b      	ldr	r3, [r7, #20]
 8021900:	2201      	movs	r2, #1
 8021902:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8021904:	4b34      	ldr	r3, [pc, #208]	; (80219d8 <mem_malloc+0x1d0>)
 8021906:	681b      	ldr	r3, [r3, #0]
 8021908:	697a      	ldr	r2, [r7, #20]
 802190a:	429a      	cmp	r2, r3
 802190c:	d127      	bne.n	802195e <mem_malloc+0x156>
          struct mem *cur = lfree;
 802190e:	4b32      	ldr	r3, [pc, #200]	; (80219d8 <mem_malloc+0x1d0>)
 8021910:	681b      	ldr	r3, [r3, #0]
 8021912:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8021914:	e005      	b.n	8021922 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8021916:	69bb      	ldr	r3, [r7, #24]
 8021918:	881b      	ldrh	r3, [r3, #0]
 802191a:	4618      	mov	r0, r3
 802191c:	f7ff fcd0 	bl	80212c0 <ptr_to_mem>
 8021920:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8021922:	69bb      	ldr	r3, [r7, #24]
 8021924:	791b      	ldrb	r3, [r3, #4]
 8021926:	2b00      	cmp	r3, #0
 8021928:	d004      	beq.n	8021934 <mem_malloc+0x12c>
 802192a:	4b2f      	ldr	r3, [pc, #188]	; (80219e8 <mem_malloc+0x1e0>)
 802192c:	681b      	ldr	r3, [r3, #0]
 802192e:	69ba      	ldr	r2, [r7, #24]
 8021930:	429a      	cmp	r2, r3
 8021932:	d1f0      	bne.n	8021916 <mem_malloc+0x10e>
          }
          lfree = cur;
 8021934:	4a28      	ldr	r2, [pc, #160]	; (80219d8 <mem_malloc+0x1d0>)
 8021936:	69bb      	ldr	r3, [r7, #24]
 8021938:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 802193a:	4b27      	ldr	r3, [pc, #156]	; (80219d8 <mem_malloc+0x1d0>)
 802193c:	681a      	ldr	r2, [r3, #0]
 802193e:	4b2a      	ldr	r3, [pc, #168]	; (80219e8 <mem_malloc+0x1e0>)
 8021940:	681b      	ldr	r3, [r3, #0]
 8021942:	429a      	cmp	r2, r3
 8021944:	d00b      	beq.n	802195e <mem_malloc+0x156>
 8021946:	4b24      	ldr	r3, [pc, #144]	; (80219d8 <mem_malloc+0x1d0>)
 8021948:	681b      	ldr	r3, [r3, #0]
 802194a:	791b      	ldrb	r3, [r3, #4]
 802194c:	2b00      	cmp	r3, #0
 802194e:	d006      	beq.n	802195e <mem_malloc+0x156>
 8021950:	4b22      	ldr	r3, [pc, #136]	; (80219dc <mem_malloc+0x1d4>)
 8021952:	f240 32b5 	movw	r2, #949	; 0x3b5
 8021956:	4925      	ldr	r1, [pc, #148]	; (80219ec <mem_malloc+0x1e4>)
 8021958:	4822      	ldr	r0, [pc, #136]	; (80219e4 <mem_malloc+0x1dc>)
 802195a:	f004 fd9d 	bl	8026498 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 802195e:	8bba      	ldrh	r2, [r7, #28]
 8021960:	697b      	ldr	r3, [r7, #20]
 8021962:	4413      	add	r3, r2
 8021964:	3308      	adds	r3, #8
 8021966:	4a20      	ldr	r2, [pc, #128]	; (80219e8 <mem_malloc+0x1e0>)
 8021968:	6812      	ldr	r2, [r2, #0]
 802196a:	4293      	cmp	r3, r2
 802196c:	d906      	bls.n	802197c <mem_malloc+0x174>
 802196e:	4b1b      	ldr	r3, [pc, #108]	; (80219dc <mem_malloc+0x1d4>)
 8021970:	f240 32b9 	movw	r2, #953	; 0x3b9
 8021974:	491e      	ldr	r1, [pc, #120]	; (80219f0 <mem_malloc+0x1e8>)
 8021976:	481b      	ldr	r0, [pc, #108]	; (80219e4 <mem_malloc+0x1dc>)
 8021978:	f004 fd8e 	bl	8026498 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 802197c:	697b      	ldr	r3, [r7, #20]
 802197e:	f003 0303 	and.w	r3, r3, #3
 8021982:	2b00      	cmp	r3, #0
 8021984:	d006      	beq.n	8021994 <mem_malloc+0x18c>
 8021986:	4b15      	ldr	r3, [pc, #84]	; (80219dc <mem_malloc+0x1d4>)
 8021988:	f240 32bb 	movw	r2, #955	; 0x3bb
 802198c:	4919      	ldr	r1, [pc, #100]	; (80219f4 <mem_malloc+0x1ec>)
 802198e:	4815      	ldr	r0, [pc, #84]	; (80219e4 <mem_malloc+0x1dc>)
 8021990:	f004 fd82 	bl	8026498 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8021994:	697b      	ldr	r3, [r7, #20]
 8021996:	f003 0303 	and.w	r3, r3, #3
 802199a:	2b00      	cmp	r3, #0
 802199c:	d006      	beq.n	80219ac <mem_malloc+0x1a4>
 802199e:	4b0f      	ldr	r3, [pc, #60]	; (80219dc <mem_malloc+0x1d4>)
 80219a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80219a4:	4914      	ldr	r1, [pc, #80]	; (80219f8 <mem_malloc+0x1f0>)
 80219a6:	480f      	ldr	r0, [pc, #60]	; (80219e4 <mem_malloc+0x1dc>)
 80219a8:	f004 fd76 	bl	8026498 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80219ac:	697b      	ldr	r3, [r7, #20]
 80219ae:	3308      	adds	r3, #8
 80219b0:	e00e      	b.n	80219d0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80219b2:	8bfb      	ldrh	r3, [r7, #30]
 80219b4:	4618      	mov	r0, r3
 80219b6:	f7ff fc83 	bl	80212c0 <ptr_to_mem>
 80219ba:	4603      	mov	r3, r0
 80219bc:	881b      	ldrh	r3, [r3, #0]
 80219be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80219c0:	8bfa      	ldrh	r2, [r7, #30]
 80219c2:	8bbb      	ldrh	r3, [r7, #28]
 80219c4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80219c8:	429a      	cmp	r2, r3
 80219ca:	f4ff af44 	bcc.w	8021856 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80219ce:	2300      	movs	r3, #0
}
 80219d0:	4618      	mov	r0, r3
 80219d2:	3720      	adds	r7, #32
 80219d4:	46bd      	mov	sp, r7
 80219d6:	bd80      	pop	{r7, pc}
 80219d8:	20012da0 	.word	0x20012da0
 80219dc:	0802bd4c 	.word	0x0802bd4c
 80219e0:	0802bf30 	.word	0x0802bf30
 80219e4:	0802bdd0 	.word	0x0802bdd0
 80219e8:	20012d9c 	.word	0x20012d9c
 80219ec:	0802bf44 	.word	0x0802bf44
 80219f0:	0802bf60 	.word	0x0802bf60
 80219f4:	0802bf90 	.word	0x0802bf90
 80219f8:	0802bfc0 	.word	0x0802bfc0

080219fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80219fc:	b480      	push	{r7}
 80219fe:	b085      	sub	sp, #20
 8021a00:	af00      	add	r7, sp, #0
 8021a02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	689b      	ldr	r3, [r3, #8]
 8021a08:	2200      	movs	r2, #0
 8021a0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	685b      	ldr	r3, [r3, #4]
 8021a10:	3303      	adds	r3, #3
 8021a12:	f023 0303 	bic.w	r3, r3, #3
 8021a16:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8021a18:	2300      	movs	r3, #0
 8021a1a:	60fb      	str	r3, [r7, #12]
 8021a1c:	e011      	b.n	8021a42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	689b      	ldr	r3, [r3, #8]
 8021a22:	681a      	ldr	r2, [r3, #0]
 8021a24:	68bb      	ldr	r3, [r7, #8]
 8021a26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	689b      	ldr	r3, [r3, #8]
 8021a2c:	68ba      	ldr	r2, [r7, #8]
 8021a2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	881b      	ldrh	r3, [r3, #0]
 8021a34:	461a      	mov	r2, r3
 8021a36:	68bb      	ldr	r3, [r7, #8]
 8021a38:	4413      	add	r3, r2
 8021a3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8021a3c:	68fb      	ldr	r3, [r7, #12]
 8021a3e:	3301      	adds	r3, #1
 8021a40:	60fb      	str	r3, [r7, #12]
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	885b      	ldrh	r3, [r3, #2]
 8021a46:	461a      	mov	r2, r3
 8021a48:	68fb      	ldr	r3, [r7, #12]
 8021a4a:	4293      	cmp	r3, r2
 8021a4c:	dbe7      	blt.n	8021a1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8021a4e:	bf00      	nop
 8021a50:	bf00      	nop
 8021a52:	3714      	adds	r7, #20
 8021a54:	46bd      	mov	sp, r7
 8021a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a5a:	4770      	bx	lr

08021a5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8021a5c:	b580      	push	{r7, lr}
 8021a5e:	b082      	sub	sp, #8
 8021a60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8021a62:	2300      	movs	r3, #0
 8021a64:	80fb      	strh	r3, [r7, #6]
 8021a66:	e009      	b.n	8021a7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8021a68:	88fb      	ldrh	r3, [r7, #6]
 8021a6a:	4a08      	ldr	r2, [pc, #32]	; (8021a8c <memp_init+0x30>)
 8021a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021a70:	4618      	mov	r0, r3
 8021a72:	f7ff ffc3 	bl	80219fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8021a76:	88fb      	ldrh	r3, [r7, #6]
 8021a78:	3301      	adds	r3, #1
 8021a7a:	80fb      	strh	r3, [r7, #6]
 8021a7c:	88fb      	ldrh	r3, [r7, #6]
 8021a7e:	2b05      	cmp	r3, #5
 8021a80:	d9f2      	bls.n	8021a68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8021a82:	bf00      	nop
 8021a84:	bf00      	nop
 8021a86:	3708      	adds	r7, #8
 8021a88:	46bd      	mov	sp, r7
 8021a8a:	bd80      	pop	{r7, pc}
 8021a8c:	0802da78 	.word	0x0802da78

08021a90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8021a90:	b580      	push	{r7, lr}
 8021a92:	b084      	sub	sp, #16
 8021a94:	af00      	add	r7, sp, #0
 8021a96:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	689b      	ldr	r3, [r3, #8]
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8021aa0:	68fb      	ldr	r3, [r7, #12]
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d012      	beq.n	8021acc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	689b      	ldr	r3, [r3, #8]
 8021aaa:	68fa      	ldr	r2, [r7, #12]
 8021aac:	6812      	ldr	r2, [r2, #0]
 8021aae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8021ab0:	68fb      	ldr	r3, [r7, #12]
 8021ab2:	f003 0303 	and.w	r3, r3, #3
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	d006      	beq.n	8021ac8 <do_memp_malloc_pool+0x38>
 8021aba:	4b07      	ldr	r3, [pc, #28]	; (8021ad8 <do_memp_malloc_pool+0x48>)
 8021abc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021ac0:	4906      	ldr	r1, [pc, #24]	; (8021adc <do_memp_malloc_pool+0x4c>)
 8021ac2:	4807      	ldr	r0, [pc, #28]	; (8021ae0 <do_memp_malloc_pool+0x50>)
 8021ac4:	f004 fce8 	bl	8026498 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8021ac8:	68fb      	ldr	r3, [r7, #12]
 8021aca:	e000      	b.n	8021ace <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8021acc:	2300      	movs	r3, #0
}
 8021ace:	4618      	mov	r0, r3
 8021ad0:	3710      	adds	r7, #16
 8021ad2:	46bd      	mov	sp, r7
 8021ad4:	bd80      	pop	{r7, pc}
 8021ad6:	bf00      	nop
 8021ad8:	0802bfe4 	.word	0x0802bfe4
 8021adc:	0802c050 	.word	0x0802c050
 8021ae0:	0802c074 	.word	0x0802c074

08021ae4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8021ae4:	b580      	push	{r7, lr}
 8021ae6:	b082      	sub	sp, #8
 8021ae8:	af00      	add	r7, sp, #0
 8021aea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8021aec:	687b      	ldr	r3, [r7, #4]
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d106      	bne.n	8021b00 <memp_malloc_pool+0x1c>
 8021af2:	4b0a      	ldr	r3, [pc, #40]	; (8021b1c <memp_malloc_pool+0x38>)
 8021af4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8021af8:	4909      	ldr	r1, [pc, #36]	; (8021b20 <memp_malloc_pool+0x3c>)
 8021afa:	480a      	ldr	r0, [pc, #40]	; (8021b24 <memp_malloc_pool+0x40>)
 8021afc:	f004 fccc 	bl	8026498 <iprintf>
  if (desc == NULL) {
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d101      	bne.n	8021b0a <memp_malloc_pool+0x26>
    return NULL;
 8021b06:	2300      	movs	r3, #0
 8021b08:	e003      	b.n	8021b12 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8021b0a:	6878      	ldr	r0, [r7, #4]
 8021b0c:	f7ff ffc0 	bl	8021a90 <do_memp_malloc_pool>
 8021b10:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8021b12:	4618      	mov	r0, r3
 8021b14:	3708      	adds	r7, #8
 8021b16:	46bd      	mov	sp, r7
 8021b18:	bd80      	pop	{r7, pc}
 8021b1a:	bf00      	nop
 8021b1c:	0802bfe4 	.word	0x0802bfe4
 8021b20:	0802c09c 	.word	0x0802c09c
 8021b24:	0802c074 	.word	0x0802c074

08021b28 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8021b28:	b580      	push	{r7, lr}
 8021b2a:	b084      	sub	sp, #16
 8021b2c:	af00      	add	r7, sp, #0
 8021b2e:	4603      	mov	r3, r0
 8021b30:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8021b32:	79fb      	ldrb	r3, [r7, #7]
 8021b34:	2b05      	cmp	r3, #5
 8021b36:	d908      	bls.n	8021b4a <memp_malloc+0x22>
 8021b38:	4b0a      	ldr	r3, [pc, #40]	; (8021b64 <memp_malloc+0x3c>)
 8021b3a:	f240 1257 	movw	r2, #343	; 0x157
 8021b3e:	490a      	ldr	r1, [pc, #40]	; (8021b68 <memp_malloc+0x40>)
 8021b40:	480a      	ldr	r0, [pc, #40]	; (8021b6c <memp_malloc+0x44>)
 8021b42:	f004 fca9 	bl	8026498 <iprintf>
 8021b46:	2300      	movs	r3, #0
 8021b48:	e008      	b.n	8021b5c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8021b4a:	79fb      	ldrb	r3, [r7, #7]
 8021b4c:	4a08      	ldr	r2, [pc, #32]	; (8021b70 <memp_malloc+0x48>)
 8021b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021b52:	4618      	mov	r0, r3
 8021b54:	f7ff ff9c 	bl	8021a90 <do_memp_malloc_pool>
 8021b58:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8021b5a:	68fb      	ldr	r3, [r7, #12]
}
 8021b5c:	4618      	mov	r0, r3
 8021b5e:	3710      	adds	r7, #16
 8021b60:	46bd      	mov	sp, r7
 8021b62:	bd80      	pop	{r7, pc}
 8021b64:	0802bfe4 	.word	0x0802bfe4
 8021b68:	0802c0b0 	.word	0x0802c0b0
 8021b6c:	0802c074 	.word	0x0802c074
 8021b70:	0802da78 	.word	0x0802da78

08021b74 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8021b74:	b580      	push	{r7, lr}
 8021b76:	b084      	sub	sp, #16
 8021b78:	af00      	add	r7, sp, #0
 8021b7a:	6078      	str	r0, [r7, #4]
 8021b7c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8021b7e:	683b      	ldr	r3, [r7, #0]
 8021b80:	f003 0303 	and.w	r3, r3, #3
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d006      	beq.n	8021b96 <do_memp_free_pool+0x22>
 8021b88:	4b0a      	ldr	r3, [pc, #40]	; (8021bb4 <do_memp_free_pool+0x40>)
 8021b8a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8021b8e:	490a      	ldr	r1, [pc, #40]	; (8021bb8 <do_memp_free_pool+0x44>)
 8021b90:	480a      	ldr	r0, [pc, #40]	; (8021bbc <do_memp_free_pool+0x48>)
 8021b92:	f004 fc81 	bl	8026498 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8021b96:	683b      	ldr	r3, [r7, #0]
 8021b98:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	689b      	ldr	r3, [r3, #8]
 8021b9e:	681a      	ldr	r2, [r3, #0]
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	689b      	ldr	r3, [r3, #8]
 8021ba8:	68fa      	ldr	r2, [r7, #12]
 8021baa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8021bac:	bf00      	nop
 8021bae:	3710      	adds	r7, #16
 8021bb0:	46bd      	mov	sp, r7
 8021bb2:	bd80      	pop	{r7, pc}
 8021bb4:	0802bfe4 	.word	0x0802bfe4
 8021bb8:	0802c0d0 	.word	0x0802c0d0
 8021bbc:	0802c074 	.word	0x0802c074

08021bc0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8021bc0:	b580      	push	{r7, lr}
 8021bc2:	b082      	sub	sp, #8
 8021bc4:	af00      	add	r7, sp, #0
 8021bc6:	6078      	str	r0, [r7, #4]
 8021bc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8021bca:	687b      	ldr	r3, [r7, #4]
 8021bcc:	2b00      	cmp	r3, #0
 8021bce:	d106      	bne.n	8021bde <memp_free_pool+0x1e>
 8021bd0:	4b0a      	ldr	r3, [pc, #40]	; (8021bfc <memp_free_pool+0x3c>)
 8021bd2:	f240 1295 	movw	r2, #405	; 0x195
 8021bd6:	490a      	ldr	r1, [pc, #40]	; (8021c00 <memp_free_pool+0x40>)
 8021bd8:	480a      	ldr	r0, [pc, #40]	; (8021c04 <memp_free_pool+0x44>)
 8021bda:	f004 fc5d 	bl	8026498 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8021bde:	687b      	ldr	r3, [r7, #4]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d007      	beq.n	8021bf4 <memp_free_pool+0x34>
 8021be4:	683b      	ldr	r3, [r7, #0]
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d004      	beq.n	8021bf4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8021bea:	6839      	ldr	r1, [r7, #0]
 8021bec:	6878      	ldr	r0, [r7, #4]
 8021bee:	f7ff ffc1 	bl	8021b74 <do_memp_free_pool>
 8021bf2:	e000      	b.n	8021bf6 <memp_free_pool+0x36>
    return;
 8021bf4:	bf00      	nop
}
 8021bf6:	3708      	adds	r7, #8
 8021bf8:	46bd      	mov	sp, r7
 8021bfa:	bd80      	pop	{r7, pc}
 8021bfc:	0802bfe4 	.word	0x0802bfe4
 8021c00:	0802c09c 	.word	0x0802c09c
 8021c04:	0802c074 	.word	0x0802c074

08021c08 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8021c08:	b580      	push	{r7, lr}
 8021c0a:	b082      	sub	sp, #8
 8021c0c:	af00      	add	r7, sp, #0
 8021c0e:	4603      	mov	r3, r0
 8021c10:	6039      	str	r1, [r7, #0]
 8021c12:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8021c14:	79fb      	ldrb	r3, [r7, #7]
 8021c16:	2b05      	cmp	r3, #5
 8021c18:	d907      	bls.n	8021c2a <memp_free+0x22>
 8021c1a:	4b0c      	ldr	r3, [pc, #48]	; (8021c4c <memp_free+0x44>)
 8021c1c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8021c20:	490b      	ldr	r1, [pc, #44]	; (8021c50 <memp_free+0x48>)
 8021c22:	480c      	ldr	r0, [pc, #48]	; (8021c54 <memp_free+0x4c>)
 8021c24:	f004 fc38 	bl	8026498 <iprintf>
 8021c28:	e00c      	b.n	8021c44 <memp_free+0x3c>

  if (mem == NULL) {
 8021c2a:	683b      	ldr	r3, [r7, #0]
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	d008      	beq.n	8021c42 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8021c30:	79fb      	ldrb	r3, [r7, #7]
 8021c32:	4a09      	ldr	r2, [pc, #36]	; (8021c58 <memp_free+0x50>)
 8021c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021c38:	6839      	ldr	r1, [r7, #0]
 8021c3a:	4618      	mov	r0, r3
 8021c3c:	f7ff ff9a 	bl	8021b74 <do_memp_free_pool>
 8021c40:	e000      	b.n	8021c44 <memp_free+0x3c>
    return;
 8021c42:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8021c44:	3708      	adds	r7, #8
 8021c46:	46bd      	mov	sp, r7
 8021c48:	bd80      	pop	{r7, pc}
 8021c4a:	bf00      	nop
 8021c4c:	0802bfe4 	.word	0x0802bfe4
 8021c50:	0802c0f0 	.word	0x0802c0f0
 8021c54:	0802c074 	.word	0x0802c074
 8021c58:	0802da78 	.word	0x0802da78

08021c5c <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 8021c5c:	b580      	push	{r7, lr}
 8021c5e:	b082      	sub	sp, #8
 8021c60:	af00      	add	r7, sp, #0
 8021c62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d105      	bne.n	8021c76 <netif_loopif_init+0x1a>
 8021c6a:	4b0b      	ldr	r3, [pc, #44]	; (8021c98 <netif_loopif_init+0x3c>)
 8021c6c:	2299      	movs	r2, #153	; 0x99
 8021c6e:	490b      	ldr	r1, [pc, #44]	; (8021c9c <netif_loopif_init+0x40>)
 8021c70:	480b      	ldr	r0, [pc, #44]	; (8021ca0 <netif_loopif_init+0x44>)
 8021c72:	f004 fc11 	bl	8026498 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	226c      	movs	r2, #108	; 0x6c
 8021c7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 8021c7e:	687b      	ldr	r3, [r7, #4]
 8021c80:	226f      	movs	r2, #111	; 0x6f
 8021c82:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	4a06      	ldr	r2, [pc, #24]	; (8021ca4 <netif_loopif_init+0x48>)
 8021c8a:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 8021c8c:	2300      	movs	r3, #0
}
 8021c8e:	4618      	mov	r0, r3
 8021c90:	3708      	adds	r7, #8
 8021c92:	46bd      	mov	sp, r7
 8021c94:	bd80      	pop	{r7, pc}
 8021c96:	bf00      	nop
 8021c98:	0802c10c 	.word	0x0802c10c
 8021c9c:	0802c178 	.word	0x0802c178
 8021ca0:	0802c19c 	.word	0x0802c19c
 8021ca4:	08022389 	.word	0x08022389

08021ca8 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8021ca8:	b580      	push	{r7, lr}
 8021caa:	b088      	sub	sp, #32
 8021cac:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 8021cae:	4b0f      	ldr	r3, [pc, #60]	; (8021cec <netif_init+0x44>)
 8021cb0:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 8021cb2:	4b0e      	ldr	r3, [pc, #56]	; (8021cec <netif_init+0x44>)
 8021cb4:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 8021cb6:	23ff      	movs	r3, #255	; 0xff
 8021cb8:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 8021cba:	1d3b      	adds	r3, r7, #4
 8021cbc:	f107 0208 	add.w	r2, r7, #8
 8021cc0:	f107 010c 	add.w	r1, r7, #12
 8021cc4:	480a      	ldr	r0, [pc, #40]	; (8021cf0 <netif_init+0x48>)
 8021cc6:	9002      	str	r0, [sp, #8]
 8021cc8:	480a      	ldr	r0, [pc, #40]	; (8021cf4 <netif_init+0x4c>)
 8021cca:	9001      	str	r0, [sp, #4]
 8021ccc:	2000      	movs	r0, #0
 8021cce:	9000      	str	r0, [sp, #0]
 8021cd0:	4809      	ldr	r0, [pc, #36]	; (8021cf8 <netif_init+0x50>)
 8021cd2:	f000 f813 	bl	8021cfc <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 8021cd6:	4808      	ldr	r0, [pc, #32]	; (8021cf8 <netif_init+0x50>)
 8021cd8:	f000 fa72 	bl	80221c0 <netif_set_link_up>
  netif_set_up(&loop_netif);
 8021cdc:	4806      	ldr	r0, [pc, #24]	; (8021cf8 <netif_init+0x50>)
 8021cde:	f000 f9d1 	bl	8022084 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 8021ce2:	bf00      	nop
 8021ce4:	3710      	adds	r7, #16
 8021ce6:	46bd      	mov	sp, r7
 8021ce8:	bd80      	pop	{r7, pc}
 8021cea:	bf00      	nop
 8021cec:	0100007f 	.word	0x0100007f
 8021cf0:	08024e25 	.word	0x08024e25
 8021cf4:	08021c5d 	.word	0x08021c5d
 8021cf8:	20015d48 	.word	0x20015d48

08021cfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8021cfc:	b580      	push	{r7, lr}
 8021cfe:	b086      	sub	sp, #24
 8021d00:	af00      	add	r7, sp, #0
 8021d02:	60f8      	str	r0, [r7, #12]
 8021d04:	60b9      	str	r1, [r7, #8]
 8021d06:	607a      	str	r2, [r7, #4]
 8021d08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8021d0a:	68fb      	ldr	r3, [r7, #12]
 8021d0c:	2b00      	cmp	r3, #0
 8021d0e:	d108      	bne.n	8021d22 <netif_add+0x26>
 8021d10:	4b5a      	ldr	r3, [pc, #360]	; (8021e7c <netif_add+0x180>)
 8021d12:	f240 1227 	movw	r2, #295	; 0x127
 8021d16:	495a      	ldr	r1, [pc, #360]	; (8021e80 <netif_add+0x184>)
 8021d18:	485a      	ldr	r0, [pc, #360]	; (8021e84 <netif_add+0x188>)
 8021d1a:	f004 fbbd 	bl	8026498 <iprintf>
 8021d1e:	2300      	movs	r3, #0
 8021d20:	e0a8      	b.n	8021e74 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8021d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	d108      	bne.n	8021d3a <netif_add+0x3e>
 8021d28:	4b54      	ldr	r3, [pc, #336]	; (8021e7c <netif_add+0x180>)
 8021d2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8021d2e:	4956      	ldr	r1, [pc, #344]	; (8021e88 <netif_add+0x18c>)
 8021d30:	4854      	ldr	r0, [pc, #336]	; (8021e84 <netif_add+0x188>)
 8021d32:	f004 fbb1 	bl	8026498 <iprintf>
 8021d36:	2300      	movs	r3, #0
 8021d38:	e09c      	b.n	8021e74 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8021d3a:	68bb      	ldr	r3, [r7, #8]
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	d101      	bne.n	8021d44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8021d40:	4b52      	ldr	r3, [pc, #328]	; (8021e8c <netif_add+0x190>)
 8021d42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	d101      	bne.n	8021d4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8021d4a:	4b50      	ldr	r3, [pc, #320]	; (8021e8c <netif_add+0x190>)
 8021d4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8021d4e:	683b      	ldr	r3, [r7, #0]
 8021d50:	2b00      	cmp	r3, #0
 8021d52:	d101      	bne.n	8021d58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8021d54:	4b4d      	ldr	r3, [pc, #308]	; (8021e8c <netif_add+0x190>)
 8021d56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8021d58:	68fb      	ldr	r3, [r7, #12]
 8021d5a:	2200      	movs	r2, #0
 8021d5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8021d5e:	68fb      	ldr	r3, [r7, #12]
 8021d60:	2200      	movs	r2, #0
 8021d62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8021d64:	68fb      	ldr	r3, [r7, #12]
 8021d66:	2200      	movs	r2, #0
 8021d68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8021d6a:	68fb      	ldr	r3, [r7, #12]
 8021d6c:	4a48      	ldr	r2, [pc, #288]	; (8021e90 <netif_add+0x194>)
 8021d6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8021d70:	68fb      	ldr	r3, [r7, #12]
 8021d72:	2200      	movs	r2, #0
 8021d74:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8021d76:	68fb      	ldr	r3, [r7, #12]
 8021d78:	2200      	movs	r2, #0
 8021d7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8021d7e:	68fb      	ldr	r3, [r7, #12]
 8021d80:	2200      	movs	r2, #0
 8021d82:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 8021d84:	68fb      	ldr	r3, [r7, #12]
 8021d86:	2200      	movs	r2, #0
 8021d88:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 8021d8a:	68fb      	ldr	r3, [r7, #12]
 8021d8c:	2200      	movs	r2, #0
 8021d8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8021d90:	68fb      	ldr	r3, [r7, #12]
 8021d92:	6a3a      	ldr	r2, [r7, #32]
 8021d94:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8021d96:	4b3f      	ldr	r3, [pc, #252]	; (8021e94 <netif_add+0x198>)
 8021d98:	781a      	ldrb	r2, [r3, #0]
 8021d9a:	68fb      	ldr	r3, [r7, #12]
 8021d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021da4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8021da6:	683b      	ldr	r3, [r7, #0]
 8021da8:	687a      	ldr	r2, [r7, #4]
 8021daa:	68b9      	ldr	r1, [r7, #8]
 8021dac:	68f8      	ldr	r0, [r7, #12]
 8021dae:	f000 f90f 	bl	8021fd0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8021db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021db4:	68f8      	ldr	r0, [r7, #12]
 8021db6:	4798      	blx	r3
 8021db8:	4603      	mov	r3, r0
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d001      	beq.n	8021dc2 <netif_add+0xc6>
    return NULL;
 8021dbe:	2300      	movs	r3, #0
 8021dc0:	e058      	b.n	8021e74 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8021dc2:	68fb      	ldr	r3, [r7, #12]
 8021dc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021dc8:	2bff      	cmp	r3, #255	; 0xff
 8021dca:	d103      	bne.n	8021dd4 <netif_add+0xd8>
        netif->num = 0;
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	2200      	movs	r2, #0
 8021dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8021dd4:	2300      	movs	r3, #0
 8021dd6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8021dd8:	4b2f      	ldr	r3, [pc, #188]	; (8021e98 <netif_add+0x19c>)
 8021dda:	681b      	ldr	r3, [r3, #0]
 8021ddc:	617b      	str	r3, [r7, #20]
 8021dde:	e02b      	b.n	8021e38 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8021de0:	697a      	ldr	r2, [r7, #20]
 8021de2:	68fb      	ldr	r3, [r7, #12]
 8021de4:	429a      	cmp	r2, r3
 8021de6:	d106      	bne.n	8021df6 <netif_add+0xfa>
 8021de8:	4b24      	ldr	r3, [pc, #144]	; (8021e7c <netif_add+0x180>)
 8021dea:	f240 128b 	movw	r2, #395	; 0x18b
 8021dee:	492b      	ldr	r1, [pc, #172]	; (8021e9c <netif_add+0x1a0>)
 8021df0:	4824      	ldr	r0, [pc, #144]	; (8021e84 <netif_add+0x188>)
 8021df2:	f004 fb51 	bl	8026498 <iprintf>
        num_netifs++;
 8021df6:	693b      	ldr	r3, [r7, #16]
 8021df8:	3301      	adds	r3, #1
 8021dfa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8021dfc:	693b      	ldr	r3, [r7, #16]
 8021dfe:	2bff      	cmp	r3, #255	; 0xff
 8021e00:	dd06      	ble.n	8021e10 <netif_add+0x114>
 8021e02:	4b1e      	ldr	r3, [pc, #120]	; (8021e7c <netif_add+0x180>)
 8021e04:	f240 128d 	movw	r2, #397	; 0x18d
 8021e08:	4925      	ldr	r1, [pc, #148]	; (8021ea0 <netif_add+0x1a4>)
 8021e0a:	481e      	ldr	r0, [pc, #120]	; (8021e84 <netif_add+0x188>)
 8021e0c:	f004 fb44 	bl	8026498 <iprintf>
        if (netif2->num == netif->num) {
 8021e10:	697b      	ldr	r3, [r7, #20]
 8021e12:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8021e16:	68fb      	ldr	r3, [r7, #12]
 8021e18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021e1c:	429a      	cmp	r2, r3
 8021e1e:	d108      	bne.n	8021e32 <netif_add+0x136>
          netif->num++;
 8021e20:	68fb      	ldr	r3, [r7, #12]
 8021e22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021e26:	3301      	adds	r3, #1
 8021e28:	b2da      	uxtb	r2, r3
 8021e2a:	68fb      	ldr	r3, [r7, #12]
 8021e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8021e30:	e005      	b.n	8021e3e <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8021e32:	697b      	ldr	r3, [r7, #20]
 8021e34:	681b      	ldr	r3, [r3, #0]
 8021e36:	617b      	str	r3, [r7, #20]
 8021e38:	697b      	ldr	r3, [r7, #20]
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	d1d0      	bne.n	8021de0 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 8021e3e:	697b      	ldr	r3, [r7, #20]
 8021e40:	2b00      	cmp	r3, #0
 8021e42:	d1be      	bne.n	8021dc2 <netif_add+0xc6>
  }
  if (netif->num == 254) {
 8021e44:	68fb      	ldr	r3, [r7, #12]
 8021e46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8021e4c:	d103      	bne.n	8021e56 <netif_add+0x15a>
    netif_num = 0;
 8021e4e:	4b11      	ldr	r3, [pc, #68]	; (8021e94 <netif_add+0x198>)
 8021e50:	2200      	movs	r2, #0
 8021e52:	701a      	strb	r2, [r3, #0]
 8021e54:	e006      	b.n	8021e64 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8021e56:	68fb      	ldr	r3, [r7, #12]
 8021e58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021e5c:	3301      	adds	r3, #1
 8021e5e:	b2da      	uxtb	r2, r3
 8021e60:	4b0c      	ldr	r3, [pc, #48]	; (8021e94 <netif_add+0x198>)
 8021e62:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8021e64:	4b0c      	ldr	r3, [pc, #48]	; (8021e98 <netif_add+0x19c>)
 8021e66:	681a      	ldr	r2, [r3, #0]
 8021e68:	68fb      	ldr	r3, [r7, #12]
 8021e6a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8021e6c:	4a0a      	ldr	r2, [pc, #40]	; (8021e98 <netif_add+0x19c>)
 8021e6e:	68fb      	ldr	r3, [r7, #12]
 8021e70:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8021e72:	68fb      	ldr	r3, [r7, #12]
}
 8021e74:	4618      	mov	r0, r3
 8021e76:	3718      	adds	r7, #24
 8021e78:	46bd      	mov	sp, r7
 8021e7a:	bd80      	pop	{r7, pc}
 8021e7c:	0802c10c 	.word	0x0802c10c
 8021e80:	0802c1fc 	.word	0x0802c1fc
 8021e84:	0802c19c 	.word	0x0802c19c
 8021e88:	0802c218 	.word	0x0802c218
 8021e8c:	0802daa0 	.word	0x0802daa0
 8021e90:	080223a7 	.word	0x080223a7
 8021e94:	20015d44 	.word	0x20015d44
 8021e98:	20015d3c 	.word	0x20015d3c
 8021e9c:	0802c23c 	.word	0x0802c23c
 8021ea0:	0802c250 	.word	0x0802c250

08021ea4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b082      	sub	sp, #8
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	6078      	str	r0, [r7, #4]
 8021eac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8021eae:	6839      	ldr	r1, [r7, #0]
 8021eb0:	6878      	ldr	r0, [r7, #4]
 8021eb2:	f001 fe13 	bl	8023adc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8021eb6:	bf00      	nop
 8021eb8:	3708      	adds	r7, #8
 8021eba:	46bd      	mov	sp, r7
 8021ebc:	bd80      	pop	{r7, pc}
	...

08021ec0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8021ec0:	b580      	push	{r7, lr}
 8021ec2:	b086      	sub	sp, #24
 8021ec4:	af00      	add	r7, sp, #0
 8021ec6:	60f8      	str	r0, [r7, #12]
 8021ec8:	60b9      	str	r1, [r7, #8]
 8021eca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8021ecc:	68bb      	ldr	r3, [r7, #8]
 8021ece:	2b00      	cmp	r3, #0
 8021ed0:	d106      	bne.n	8021ee0 <netif_do_set_ipaddr+0x20>
 8021ed2:	4b1d      	ldr	r3, [pc, #116]	; (8021f48 <netif_do_set_ipaddr+0x88>)
 8021ed4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8021ed8:	491c      	ldr	r1, [pc, #112]	; (8021f4c <netif_do_set_ipaddr+0x8c>)
 8021eda:	481d      	ldr	r0, [pc, #116]	; (8021f50 <netif_do_set_ipaddr+0x90>)
 8021edc:	f004 fadc 	bl	8026498 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d106      	bne.n	8021ef4 <netif_do_set_ipaddr+0x34>
 8021ee6:	4b18      	ldr	r3, [pc, #96]	; (8021f48 <netif_do_set_ipaddr+0x88>)
 8021ee8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8021eec:	4917      	ldr	r1, [pc, #92]	; (8021f4c <netif_do_set_ipaddr+0x8c>)
 8021eee:	4818      	ldr	r0, [pc, #96]	; (8021f50 <netif_do_set_ipaddr+0x90>)
 8021ef0:	f004 fad2 	bl	8026498 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8021ef4:	68bb      	ldr	r3, [r7, #8]
 8021ef6:	681a      	ldr	r2, [r3, #0]
 8021ef8:	68fb      	ldr	r3, [r7, #12]
 8021efa:	3304      	adds	r3, #4
 8021efc:	681b      	ldr	r3, [r3, #0]
 8021efe:	429a      	cmp	r2, r3
 8021f00:	d01c      	beq.n	8021f3c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8021f02:	68bb      	ldr	r3, [r7, #8]
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	3304      	adds	r3, #4
 8021f0c:	681a      	ldr	r2, [r3, #0]
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8021f12:	f107 0314 	add.w	r3, r7, #20
 8021f16:	4619      	mov	r1, r3
 8021f18:	6878      	ldr	r0, [r7, #4]
 8021f1a:	f7ff ffc3 	bl	8021ea4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8021f1e:	68bb      	ldr	r3, [r7, #8]
 8021f20:	2b00      	cmp	r3, #0
 8021f22:	d002      	beq.n	8021f2a <netif_do_set_ipaddr+0x6a>
 8021f24:	68bb      	ldr	r3, [r7, #8]
 8021f26:	681b      	ldr	r3, [r3, #0]
 8021f28:	e000      	b.n	8021f2c <netif_do_set_ipaddr+0x6c>
 8021f2a:	2300      	movs	r3, #0
 8021f2c:	68fa      	ldr	r2, [r7, #12]
 8021f2e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8021f30:	2101      	movs	r1, #1
 8021f32:	68f8      	ldr	r0, [r7, #12]
 8021f34:	f000 f8d2 	bl	80220dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8021f38:	2301      	movs	r3, #1
 8021f3a:	e000      	b.n	8021f3e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8021f3c:	2300      	movs	r3, #0
}
 8021f3e:	4618      	mov	r0, r3
 8021f40:	3718      	adds	r7, #24
 8021f42:	46bd      	mov	sp, r7
 8021f44:	bd80      	pop	{r7, pc}
 8021f46:	bf00      	nop
 8021f48:	0802c10c 	.word	0x0802c10c
 8021f4c:	0802c280 	.word	0x0802c280
 8021f50:	0802c19c 	.word	0x0802c19c

08021f54 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8021f54:	b480      	push	{r7}
 8021f56:	b085      	sub	sp, #20
 8021f58:	af00      	add	r7, sp, #0
 8021f5a:	60f8      	str	r0, [r7, #12]
 8021f5c:	60b9      	str	r1, [r7, #8]
 8021f5e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8021f60:	68bb      	ldr	r3, [r7, #8]
 8021f62:	681a      	ldr	r2, [r3, #0]
 8021f64:	68fb      	ldr	r3, [r7, #12]
 8021f66:	3308      	adds	r3, #8
 8021f68:	681b      	ldr	r3, [r3, #0]
 8021f6a:	429a      	cmp	r2, r3
 8021f6c:	d00a      	beq.n	8021f84 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8021f6e:	68bb      	ldr	r3, [r7, #8]
 8021f70:	2b00      	cmp	r3, #0
 8021f72:	d002      	beq.n	8021f7a <netif_do_set_netmask+0x26>
 8021f74:	68bb      	ldr	r3, [r7, #8]
 8021f76:	681b      	ldr	r3, [r3, #0]
 8021f78:	e000      	b.n	8021f7c <netif_do_set_netmask+0x28>
 8021f7a:	2300      	movs	r3, #0
 8021f7c:	68fa      	ldr	r2, [r7, #12]
 8021f7e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8021f80:	2301      	movs	r3, #1
 8021f82:	e000      	b.n	8021f86 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8021f84:	2300      	movs	r3, #0
}
 8021f86:	4618      	mov	r0, r3
 8021f88:	3714      	adds	r7, #20
 8021f8a:	46bd      	mov	sp, r7
 8021f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f90:	4770      	bx	lr

08021f92 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8021f92:	b480      	push	{r7}
 8021f94:	b085      	sub	sp, #20
 8021f96:	af00      	add	r7, sp, #0
 8021f98:	60f8      	str	r0, [r7, #12]
 8021f9a:	60b9      	str	r1, [r7, #8]
 8021f9c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8021f9e:	68bb      	ldr	r3, [r7, #8]
 8021fa0:	681a      	ldr	r2, [r3, #0]
 8021fa2:	68fb      	ldr	r3, [r7, #12]
 8021fa4:	330c      	adds	r3, #12
 8021fa6:	681b      	ldr	r3, [r3, #0]
 8021fa8:	429a      	cmp	r2, r3
 8021faa:	d00a      	beq.n	8021fc2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8021fac:	68bb      	ldr	r3, [r7, #8]
 8021fae:	2b00      	cmp	r3, #0
 8021fb0:	d002      	beq.n	8021fb8 <netif_do_set_gw+0x26>
 8021fb2:	68bb      	ldr	r3, [r7, #8]
 8021fb4:	681b      	ldr	r3, [r3, #0]
 8021fb6:	e000      	b.n	8021fba <netif_do_set_gw+0x28>
 8021fb8:	2300      	movs	r3, #0
 8021fba:	68fa      	ldr	r2, [r7, #12]
 8021fbc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8021fbe:	2301      	movs	r3, #1
 8021fc0:	e000      	b.n	8021fc4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8021fc2:	2300      	movs	r3, #0
}
 8021fc4:	4618      	mov	r0, r3
 8021fc6:	3714      	adds	r7, #20
 8021fc8:	46bd      	mov	sp, r7
 8021fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fce:	4770      	bx	lr

08021fd0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8021fd0:	b580      	push	{r7, lr}
 8021fd2:	b088      	sub	sp, #32
 8021fd4:	af00      	add	r7, sp, #0
 8021fd6:	60f8      	str	r0, [r7, #12]
 8021fd8:	60b9      	str	r1, [r7, #8]
 8021fda:	607a      	str	r2, [r7, #4]
 8021fdc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8021fde:	2300      	movs	r3, #0
 8021fe0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8021fe2:	2300      	movs	r3, #0
 8021fe4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8021fe6:	68bb      	ldr	r3, [r7, #8]
 8021fe8:	2b00      	cmp	r3, #0
 8021fea:	d101      	bne.n	8021ff0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8021fec:	4b1c      	ldr	r3, [pc, #112]	; (8022060 <netif_set_addr+0x90>)
 8021fee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8021ff0:	687b      	ldr	r3, [r7, #4]
 8021ff2:	2b00      	cmp	r3, #0
 8021ff4:	d101      	bne.n	8021ffa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8021ff6:	4b1a      	ldr	r3, [pc, #104]	; (8022060 <netif_set_addr+0x90>)
 8021ff8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8021ffa:	683b      	ldr	r3, [r7, #0]
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d101      	bne.n	8022004 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8022000:	4b17      	ldr	r3, [pc, #92]	; (8022060 <netif_set_addr+0x90>)
 8022002:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8022004:	68bb      	ldr	r3, [r7, #8]
 8022006:	2b00      	cmp	r3, #0
 8022008:	d003      	beq.n	8022012 <netif_set_addr+0x42>
 802200a:	68bb      	ldr	r3, [r7, #8]
 802200c:	681b      	ldr	r3, [r3, #0]
 802200e:	2b00      	cmp	r3, #0
 8022010:	d101      	bne.n	8022016 <netif_set_addr+0x46>
 8022012:	2301      	movs	r3, #1
 8022014:	e000      	b.n	8022018 <netif_set_addr+0x48>
 8022016:	2300      	movs	r3, #0
 8022018:	617b      	str	r3, [r7, #20]
  if (remove) {
 802201a:	697b      	ldr	r3, [r7, #20]
 802201c:	2b00      	cmp	r3, #0
 802201e:	d006      	beq.n	802202e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8022020:	f107 0310 	add.w	r3, r7, #16
 8022024:	461a      	mov	r2, r3
 8022026:	68b9      	ldr	r1, [r7, #8]
 8022028:	68f8      	ldr	r0, [r7, #12]
 802202a:	f7ff ff49 	bl	8021ec0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 802202e:	69fa      	ldr	r2, [r7, #28]
 8022030:	6879      	ldr	r1, [r7, #4]
 8022032:	68f8      	ldr	r0, [r7, #12]
 8022034:	f7ff ff8e 	bl	8021f54 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8022038:	69ba      	ldr	r2, [r7, #24]
 802203a:	6839      	ldr	r1, [r7, #0]
 802203c:	68f8      	ldr	r0, [r7, #12]
 802203e:	f7ff ffa8 	bl	8021f92 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8022042:	697b      	ldr	r3, [r7, #20]
 8022044:	2b00      	cmp	r3, #0
 8022046:	d106      	bne.n	8022056 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8022048:	f107 0310 	add.w	r3, r7, #16
 802204c:	461a      	mov	r2, r3
 802204e:	68b9      	ldr	r1, [r7, #8]
 8022050:	68f8      	ldr	r0, [r7, #12]
 8022052:	f7ff ff35 	bl	8021ec0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8022056:	bf00      	nop
 8022058:	3720      	adds	r7, #32
 802205a:	46bd      	mov	sp, r7
 802205c:	bd80      	pop	{r7, pc}
 802205e:	bf00      	nop
 8022060:	0802daa0 	.word	0x0802daa0

08022064 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8022064:	b480      	push	{r7}
 8022066:	b083      	sub	sp, #12
 8022068:	af00      	add	r7, sp, #0
 802206a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 802206c:	4a04      	ldr	r2, [pc, #16]	; (8022080 <netif_set_default+0x1c>)
 802206e:	687b      	ldr	r3, [r7, #4]
 8022070:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8022072:	bf00      	nop
 8022074:	370c      	adds	r7, #12
 8022076:	46bd      	mov	sp, r7
 8022078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802207c:	4770      	bx	lr
 802207e:	bf00      	nop
 8022080:	20015d40 	.word	0x20015d40

08022084 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8022084:	b580      	push	{r7, lr}
 8022086:	b082      	sub	sp, #8
 8022088:	af00      	add	r7, sp, #0
 802208a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	2b00      	cmp	r3, #0
 8022090:	d107      	bne.n	80220a2 <netif_set_up+0x1e>
 8022092:	4b0f      	ldr	r3, [pc, #60]	; (80220d0 <netif_set_up+0x4c>)
 8022094:	f44f 7254 	mov.w	r2, #848	; 0x350
 8022098:	490e      	ldr	r1, [pc, #56]	; (80220d4 <netif_set_up+0x50>)
 802209a:	480f      	ldr	r0, [pc, #60]	; (80220d8 <netif_set_up+0x54>)
 802209c:	f004 f9fc 	bl	8026498 <iprintf>
 80220a0:	e013      	b.n	80220ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80220a8:	f003 0301 	and.w	r3, r3, #1
 80220ac:	2b00      	cmp	r3, #0
 80220ae:	d10c      	bne.n	80220ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80220b6:	f043 0301 	orr.w	r3, r3, #1
 80220ba:	b2da      	uxtb	r2, r3
 80220bc:	687b      	ldr	r3, [r7, #4]
 80220be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80220c2:	2103      	movs	r1, #3
 80220c4:	6878      	ldr	r0, [r7, #4]
 80220c6:	f000 f809 	bl	80220dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80220ca:	3708      	adds	r7, #8
 80220cc:	46bd      	mov	sp, r7
 80220ce:	bd80      	pop	{r7, pc}
 80220d0:	0802c10c 	.word	0x0802c10c
 80220d4:	0802c2f0 	.word	0x0802c2f0
 80220d8:	0802c19c 	.word	0x0802c19c

080220dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80220dc:	b580      	push	{r7, lr}
 80220de:	b082      	sub	sp, #8
 80220e0:	af00      	add	r7, sp, #0
 80220e2:	6078      	str	r0, [r7, #4]
 80220e4:	460b      	mov	r3, r1
 80220e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	2b00      	cmp	r3, #0
 80220ec:	d106      	bne.n	80220fc <netif_issue_reports+0x20>
 80220ee:	4b18      	ldr	r3, [pc, #96]	; (8022150 <netif_issue_reports+0x74>)
 80220f0:	f240 326d 	movw	r2, #877	; 0x36d
 80220f4:	4917      	ldr	r1, [pc, #92]	; (8022154 <netif_issue_reports+0x78>)
 80220f6:	4818      	ldr	r0, [pc, #96]	; (8022158 <netif_issue_reports+0x7c>)
 80220f8:	f004 f9ce 	bl	8026498 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022102:	f003 0304 	and.w	r3, r3, #4
 8022106:	2b00      	cmp	r3, #0
 8022108:	d01e      	beq.n	8022148 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022110:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8022114:	2b00      	cmp	r3, #0
 8022116:	d017      	beq.n	8022148 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8022118:	78fb      	ldrb	r3, [r7, #3]
 802211a:	f003 0301 	and.w	r3, r3, #1
 802211e:	2b00      	cmp	r3, #0
 8022120:	d013      	beq.n	802214a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	3304      	adds	r3, #4
 8022126:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8022128:	2b00      	cmp	r3, #0
 802212a:	d00e      	beq.n	802214a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022132:	f003 0308 	and.w	r3, r3, #8
 8022136:	2b00      	cmp	r3, #0
 8022138:	d007      	beq.n	802214a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	3304      	adds	r3, #4
 802213e:	4619      	mov	r1, r3
 8022140:	6878      	ldr	r0, [r7, #4]
 8022142:	f002 fc35 	bl	80249b0 <etharp_request>
 8022146:	e000      	b.n	802214a <netif_issue_reports+0x6e>
    return;
 8022148:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 802214a:	3708      	adds	r7, #8
 802214c:	46bd      	mov	sp, r7
 802214e:	bd80      	pop	{r7, pc}
 8022150:	0802c10c 	.word	0x0802c10c
 8022154:	0802c30c 	.word	0x0802c30c
 8022158:	0802c19c 	.word	0x0802c19c

0802215c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 802215c:	b580      	push	{r7, lr}
 802215e:	b082      	sub	sp, #8
 8022160:	af00      	add	r7, sp, #0
 8022162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	2b00      	cmp	r3, #0
 8022168:	d107      	bne.n	802217a <netif_set_down+0x1e>
 802216a:	4b12      	ldr	r3, [pc, #72]	; (80221b4 <netif_set_down+0x58>)
 802216c:	f240 329b 	movw	r2, #923	; 0x39b
 8022170:	4911      	ldr	r1, [pc, #68]	; (80221b8 <netif_set_down+0x5c>)
 8022172:	4812      	ldr	r0, [pc, #72]	; (80221bc <netif_set_down+0x60>)
 8022174:	f004 f990 	bl	8026498 <iprintf>
 8022178:	e019      	b.n	80221ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022180:	f003 0301 	and.w	r3, r3, #1
 8022184:	2b00      	cmp	r3, #0
 8022186:	d012      	beq.n	80221ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8022188:	687b      	ldr	r3, [r7, #4]
 802218a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802218e:	f023 0301 	bic.w	r3, r3, #1
 8022192:	b2da      	uxtb	r2, r3
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80221a0:	f003 0308 	and.w	r3, r3, #8
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	d002      	beq.n	80221ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80221a8:	6878      	ldr	r0, [r7, #4]
 80221aa:	f001 ffbf 	bl	802412c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80221ae:	3708      	adds	r7, #8
 80221b0:	46bd      	mov	sp, r7
 80221b2:	bd80      	pop	{r7, pc}
 80221b4:	0802c10c 	.word	0x0802c10c
 80221b8:	0802c330 	.word	0x0802c330
 80221bc:	0802c19c 	.word	0x0802c19c

080221c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80221c0:	b580      	push	{r7, lr}
 80221c2:	b082      	sub	sp, #8
 80221c4:	af00      	add	r7, sp, #0
 80221c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80221c8:	687b      	ldr	r3, [r7, #4]
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d107      	bne.n	80221de <netif_set_link_up+0x1e>
 80221ce:	4b13      	ldr	r3, [pc, #76]	; (802221c <netif_set_link_up+0x5c>)
 80221d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80221d4:	4912      	ldr	r1, [pc, #72]	; (8022220 <netif_set_link_up+0x60>)
 80221d6:	4813      	ldr	r0, [pc, #76]	; (8022224 <netif_set_link_up+0x64>)
 80221d8:	f004 f95e 	bl	8026498 <iprintf>
 80221dc:	e01b      	b.n	8022216 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80221e4:	f003 0304 	and.w	r3, r3, #4
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d114      	bne.n	8022216 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80221f2:	f043 0304 	orr.w	r3, r3, #4
 80221f6:	b2da      	uxtb	r2, r3
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80221fe:	2103      	movs	r1, #3
 8022200:	6878      	ldr	r0, [r7, #4]
 8022202:	f7ff ff6b 	bl	80220dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	69db      	ldr	r3, [r3, #28]
 802220a:	2b00      	cmp	r3, #0
 802220c:	d003      	beq.n	8022216 <netif_set_link_up+0x56>
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	69db      	ldr	r3, [r3, #28]
 8022212:	6878      	ldr	r0, [r7, #4]
 8022214:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8022216:	3708      	adds	r7, #8
 8022218:	46bd      	mov	sp, r7
 802221a:	bd80      	pop	{r7, pc}
 802221c:	0802c10c 	.word	0x0802c10c
 8022220:	0802c350 	.word	0x0802c350
 8022224:	0802c19c 	.word	0x0802c19c

08022228 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8022228:	b580      	push	{r7, lr}
 802222a:	b082      	sub	sp, #8
 802222c:	af00      	add	r7, sp, #0
 802222e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8022230:	687b      	ldr	r3, [r7, #4]
 8022232:	2b00      	cmp	r3, #0
 8022234:	d107      	bne.n	8022246 <netif_set_link_down+0x1e>
 8022236:	4b11      	ldr	r3, [pc, #68]	; (802227c <netif_set_link_down+0x54>)
 8022238:	f240 4206 	movw	r2, #1030	; 0x406
 802223c:	4910      	ldr	r1, [pc, #64]	; (8022280 <netif_set_link_down+0x58>)
 802223e:	4811      	ldr	r0, [pc, #68]	; (8022284 <netif_set_link_down+0x5c>)
 8022240:	f004 f92a 	bl	8026498 <iprintf>
 8022244:	e017      	b.n	8022276 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802224c:	f003 0304 	and.w	r3, r3, #4
 8022250:	2b00      	cmp	r3, #0
 8022252:	d010      	beq.n	8022276 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802225a:	f023 0304 	bic.w	r3, r3, #4
 802225e:	b2da      	uxtb	r2, r3
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	69db      	ldr	r3, [r3, #28]
 802226a:	2b00      	cmp	r3, #0
 802226c:	d003      	beq.n	8022276 <netif_set_link_down+0x4e>
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	69db      	ldr	r3, [r3, #28]
 8022272:	6878      	ldr	r0, [r7, #4]
 8022274:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8022276:	3708      	adds	r7, #8
 8022278:	46bd      	mov	sp, r7
 802227a:	bd80      	pop	{r7, pc}
 802227c:	0802c10c 	.word	0x0802c10c
 8022280:	0802c374 	.word	0x0802c374
 8022284:	0802c19c 	.word	0x0802c19c

08022288 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8022288:	b480      	push	{r7}
 802228a:	b083      	sub	sp, #12
 802228c:	af00      	add	r7, sp, #0
 802228e:	6078      	str	r0, [r7, #4]
 8022290:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	2b00      	cmp	r3, #0
 8022296:	d002      	beq.n	802229e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8022298:	687b      	ldr	r3, [r7, #4]
 802229a:	683a      	ldr	r2, [r7, #0]
 802229c:	61da      	str	r2, [r3, #28]
  }
}
 802229e:	bf00      	nop
 80222a0:	370c      	adds	r7, #12
 80222a2:	46bd      	mov	sp, r7
 80222a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222a8:	4770      	bx	lr
	...

080222ac <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 80222ac:	b580      	push	{r7, lr}
 80222ae:	b086      	sub	sp, #24
 80222b0:	af00      	add	r7, sp, #0
 80222b2:	6078      	str	r0, [r7, #4]
 80222b4:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	2b00      	cmp	r3, #0
 80222ba:	d106      	bne.n	80222ca <netif_loop_output+0x1e>
 80222bc:	4b2d      	ldr	r3, [pc, #180]	; (8022374 <netif_loop_output+0xc8>)
 80222be:	f240 424b 	movw	r2, #1099	; 0x44b
 80222c2:	492d      	ldr	r1, [pc, #180]	; (8022378 <netif_loop_output+0xcc>)
 80222c4:	482d      	ldr	r0, [pc, #180]	; (802237c <netif_loop_output+0xd0>)
 80222c6:	f004 f8e7 	bl	8026498 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 80222ca:	683b      	ldr	r3, [r7, #0]
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	d106      	bne.n	80222de <netif_loop_output+0x32>
 80222d0:	4b28      	ldr	r3, [pc, #160]	; (8022374 <netif_loop_output+0xc8>)
 80222d2:	f240 424c 	movw	r2, #1100	; 0x44c
 80222d6:	492a      	ldr	r1, [pc, #168]	; (8022380 <netif_loop_output+0xd4>)
 80222d8:	4828      	ldr	r0, [pc, #160]	; (802237c <netif_loop_output+0xd0>)
 80222da:	f004 f8dd 	bl	8026498 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80222de:	683b      	ldr	r3, [r7, #0]
 80222e0:	891b      	ldrh	r3, [r3, #8]
 80222e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80222e6:	4619      	mov	r1, r3
 80222e8:	200e      	movs	r0, #14
 80222ea:	f000 f8bb 	bl	8022464 <pbuf_alloc>
 80222ee:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 80222f0:	693b      	ldr	r3, [r7, #16]
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	d102      	bne.n	80222fc <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 80222f6:	f04f 33ff 	mov.w	r3, #4294967295
 80222fa:	e037      	b.n	802236c <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 80222fc:	6839      	ldr	r1, [r7, #0]
 80222fe:	6938      	ldr	r0, [r7, #16]
 8022300:	f000 fcba 	bl	8022c78 <pbuf_copy>
 8022304:	4603      	mov	r3, r0
 8022306:	73fb      	strb	r3, [r7, #15]
 8022308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802230c:	2b00      	cmp	r3, #0
 802230e:	d005      	beq.n	802231c <netif_loop_output+0x70>
    pbuf_free(r);
 8022310:	6938      	ldr	r0, [r7, #16]
 8022312:	f000 fb89 	bl	8022a28 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 8022316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802231a:	e027      	b.n	802236c <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 802231c:	693b      	ldr	r3, [r7, #16]
 802231e:	617b      	str	r3, [r7, #20]
 8022320:	e002      	b.n	8022328 <netif_loop_output+0x7c>
 8022322:	697b      	ldr	r3, [r7, #20]
 8022324:	681b      	ldr	r3, [r3, #0]
 8022326:	617b      	str	r3, [r7, #20]
 8022328:	697b      	ldr	r3, [r7, #20]
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	2b00      	cmp	r3, #0
 802232e:	d1f8      	bne.n	8022322 <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022334:	2b00      	cmp	r3, #0
 8022336:	d012      	beq.n	802235e <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802233c:	2b00      	cmp	r3, #0
 802233e:	d106      	bne.n	802234e <netif_loop_output+0xa2>
 8022340:	4b0c      	ldr	r3, [pc, #48]	; (8022374 <netif_loop_output+0xc8>)
 8022342:	f240 4277 	movw	r2, #1143	; 0x477
 8022346:	490f      	ldr	r1, [pc, #60]	; (8022384 <netif_loop_output+0xd8>)
 8022348:	480c      	ldr	r0, [pc, #48]	; (802237c <netif_loop_output+0xd0>)
 802234a:	f004 f8a5 	bl	8026498 <iprintf>
    netif->loop_last->next = r;
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022352:	693a      	ldr	r2, [r7, #16]
 8022354:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	697a      	ldr	r2, [r7, #20]
 802235a:	63da      	str	r2, [r3, #60]	; 0x3c
 802235c:	e005      	b.n	802236a <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 802235e:	687b      	ldr	r3, [r7, #4]
 8022360:	693a      	ldr	r2, [r7, #16]
 8022362:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 8022364:	687b      	ldr	r3, [r7, #4]
 8022366:	697a      	ldr	r2, [r7, #20]
 8022368:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 802236a:	2300      	movs	r3, #0
}
 802236c:	4618      	mov	r0, r3
 802236e:	3718      	adds	r7, #24
 8022370:	46bd      	mov	sp, r7
 8022372:	bd80      	pop	{r7, pc}
 8022374:	0802c10c 	.word	0x0802c10c
 8022378:	0802c398 	.word	0x0802c398
 802237c:	0802c19c 	.word	0x0802c19c
 8022380:	0802c3bc 	.word	0x0802c3bc
 8022384:	0802c3dc 	.word	0x0802c3dc

08022388 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 8022388:	b580      	push	{r7, lr}
 802238a:	b084      	sub	sp, #16
 802238c:	af00      	add	r7, sp, #0
 802238e:	60f8      	str	r0, [r7, #12]
 8022390:	60b9      	str	r1, [r7, #8]
 8022392:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 8022394:	68b9      	ldr	r1, [r7, #8]
 8022396:	68f8      	ldr	r0, [r7, #12]
 8022398:	f7ff ff88 	bl	80222ac <netif_loop_output>
 802239c:	4603      	mov	r3, r0
}
 802239e:	4618      	mov	r0, r3
 80223a0:	3710      	adds	r7, #16
 80223a2:	46bd      	mov	sp, r7
 80223a4:	bd80      	pop	{r7, pc}

080223a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80223a6:	b480      	push	{r7}
 80223a8:	b085      	sub	sp, #20
 80223aa:	af00      	add	r7, sp, #0
 80223ac:	60f8      	str	r0, [r7, #12]
 80223ae:	60b9      	str	r1, [r7, #8]
 80223b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80223b2:	f06f 030b 	mvn.w	r3, #11
}
 80223b6:	4618      	mov	r0, r3
 80223b8:	3714      	adds	r7, #20
 80223ba:	46bd      	mov	sp, r7
 80223bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223c0:	4770      	bx	lr
	...

080223c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80223c4:	b480      	push	{r7}
 80223c6:	b085      	sub	sp, #20
 80223c8:	af00      	add	r7, sp, #0
 80223ca:	4603      	mov	r3, r0
 80223cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80223ce:	79fb      	ldrb	r3, [r7, #7]
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	d013      	beq.n	80223fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80223d4:	4b0d      	ldr	r3, [pc, #52]	; (802240c <netif_get_by_index+0x48>)
 80223d6:	681b      	ldr	r3, [r3, #0]
 80223d8:	60fb      	str	r3, [r7, #12]
 80223da:	e00c      	b.n	80223f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80223dc:	68fb      	ldr	r3, [r7, #12]
 80223de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80223e2:	3301      	adds	r3, #1
 80223e4:	b2db      	uxtb	r3, r3
 80223e6:	79fa      	ldrb	r2, [r7, #7]
 80223e8:	429a      	cmp	r2, r3
 80223ea:	d101      	bne.n	80223f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80223ec:	68fb      	ldr	r3, [r7, #12]
 80223ee:	e006      	b.n	80223fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80223f0:	68fb      	ldr	r3, [r7, #12]
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	60fb      	str	r3, [r7, #12]
 80223f6:	68fb      	ldr	r3, [r7, #12]
 80223f8:	2b00      	cmp	r3, #0
 80223fa:	d1ef      	bne.n	80223dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80223fc:	2300      	movs	r3, #0
}
 80223fe:	4618      	mov	r0, r3
 8022400:	3714      	adds	r7, #20
 8022402:	46bd      	mov	sp, r7
 8022404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022408:	4770      	bx	lr
 802240a:	bf00      	nop
 802240c:	20015d3c 	.word	0x20015d3c

08022410 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8022410:	b480      	push	{r7}
 8022412:	b085      	sub	sp, #20
 8022414:	af00      	add	r7, sp, #0
 8022416:	60f8      	str	r0, [r7, #12]
 8022418:	60b9      	str	r1, [r7, #8]
 802241a:	4611      	mov	r1, r2
 802241c:	461a      	mov	r2, r3
 802241e:	460b      	mov	r3, r1
 8022420:	80fb      	strh	r3, [r7, #6]
 8022422:	4613      	mov	r3, r2
 8022424:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8022426:	68fb      	ldr	r3, [r7, #12]
 8022428:	2200      	movs	r2, #0
 802242a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 802242c:	68fb      	ldr	r3, [r7, #12]
 802242e:	68ba      	ldr	r2, [r7, #8]
 8022430:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8022432:	68fb      	ldr	r3, [r7, #12]
 8022434:	88fa      	ldrh	r2, [r7, #6]
 8022436:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8022438:	68fb      	ldr	r3, [r7, #12]
 802243a:	88ba      	ldrh	r2, [r7, #4]
 802243c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 802243e:	8b3b      	ldrh	r3, [r7, #24]
 8022440:	b2da      	uxtb	r2, r3
 8022442:	68fb      	ldr	r3, [r7, #12]
 8022444:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8022446:	68fb      	ldr	r3, [r7, #12]
 8022448:	7f3a      	ldrb	r2, [r7, #28]
 802244a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 802244c:	68fb      	ldr	r3, [r7, #12]
 802244e:	2201      	movs	r2, #1
 8022450:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8022452:	68fb      	ldr	r3, [r7, #12]
 8022454:	2200      	movs	r2, #0
 8022456:	73da      	strb	r2, [r3, #15]
}
 8022458:	bf00      	nop
 802245a:	3714      	adds	r7, #20
 802245c:	46bd      	mov	sp, r7
 802245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022462:	4770      	bx	lr

08022464 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8022464:	b580      	push	{r7, lr}
 8022466:	b08c      	sub	sp, #48	; 0x30
 8022468:	af02      	add	r7, sp, #8
 802246a:	4603      	mov	r3, r0
 802246c:	71fb      	strb	r3, [r7, #7]
 802246e:	460b      	mov	r3, r1
 8022470:	80bb      	strh	r3, [r7, #4]
 8022472:	4613      	mov	r3, r2
 8022474:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8022476:	79fb      	ldrb	r3, [r7, #7]
 8022478:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 802247a:	887b      	ldrh	r3, [r7, #2]
 802247c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8022480:	d07d      	beq.n	802257e <pbuf_alloc+0x11a>
 8022482:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8022486:	f300 80c6 	bgt.w	8022616 <pbuf_alloc+0x1b2>
 802248a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 802248e:	d010      	beq.n	80224b2 <pbuf_alloc+0x4e>
 8022490:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8022494:	f300 80bf 	bgt.w	8022616 <pbuf_alloc+0x1b2>
 8022498:	2b01      	cmp	r3, #1
 802249a:	d002      	beq.n	80224a2 <pbuf_alloc+0x3e>
 802249c:	2b41      	cmp	r3, #65	; 0x41
 802249e:	f040 80ba 	bne.w	8022616 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80224a2:	887a      	ldrh	r2, [r7, #2]
 80224a4:	88bb      	ldrh	r3, [r7, #4]
 80224a6:	4619      	mov	r1, r3
 80224a8:	2000      	movs	r0, #0
 80224aa:	f000 f8cf 	bl	802264c <pbuf_alloc_reference>
 80224ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80224b0:	e0bb      	b.n	802262a <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80224b2:	2300      	movs	r3, #0
 80224b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80224b6:	2300      	movs	r3, #0
 80224b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80224ba:	88bb      	ldrh	r3, [r7, #4]
 80224bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80224be:	2005      	movs	r0, #5
 80224c0:	f7ff fb32 	bl	8021b28 <memp_malloc>
 80224c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80224c6:	693b      	ldr	r3, [r7, #16]
 80224c8:	2b00      	cmp	r3, #0
 80224ca:	d107      	bne.n	80224dc <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 80224cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ce:	2b00      	cmp	r3, #0
 80224d0:	d002      	beq.n	80224d8 <pbuf_alloc+0x74>
            pbuf_free(p);
 80224d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80224d4:	f000 faa8 	bl	8022a28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80224d8:	2300      	movs	r3, #0
 80224da:	e0a7      	b.n	802262c <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80224dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80224de:	3303      	adds	r3, #3
 80224e0:	b29b      	uxth	r3, r3
 80224e2:	f023 0303 	bic.w	r3, r3, #3
 80224e6:	b29b      	uxth	r3, r3
 80224e8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80224ec:	b29b      	uxth	r3, r3
 80224ee:	8b7a      	ldrh	r2, [r7, #26]
 80224f0:	4293      	cmp	r3, r2
 80224f2:	bf28      	it	cs
 80224f4:	4613      	movcs	r3, r2
 80224f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80224f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80224fa:	3310      	adds	r3, #16
 80224fc:	693a      	ldr	r2, [r7, #16]
 80224fe:	4413      	add	r3, r2
 8022500:	3303      	adds	r3, #3
 8022502:	f023 0303 	bic.w	r3, r3, #3
 8022506:	4618      	mov	r0, r3
 8022508:	89f9      	ldrh	r1, [r7, #14]
 802250a:	8b7a      	ldrh	r2, [r7, #26]
 802250c:	2300      	movs	r3, #0
 802250e:	9301      	str	r3, [sp, #4]
 8022510:	887b      	ldrh	r3, [r7, #2]
 8022512:	9300      	str	r3, [sp, #0]
 8022514:	460b      	mov	r3, r1
 8022516:	4601      	mov	r1, r0
 8022518:	6938      	ldr	r0, [r7, #16]
 802251a:	f7ff ff79 	bl	8022410 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 802251e:	693b      	ldr	r3, [r7, #16]
 8022520:	685b      	ldr	r3, [r3, #4]
 8022522:	f003 0303 	and.w	r3, r3, #3
 8022526:	2b00      	cmp	r3, #0
 8022528:	d006      	beq.n	8022538 <pbuf_alloc+0xd4>
 802252a:	4b42      	ldr	r3, [pc, #264]	; (8022634 <pbuf_alloc+0x1d0>)
 802252c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022530:	4941      	ldr	r1, [pc, #260]	; (8022638 <pbuf_alloc+0x1d4>)
 8022532:	4842      	ldr	r0, [pc, #264]	; (802263c <pbuf_alloc+0x1d8>)
 8022534:	f003 ffb0 	bl	8026498 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8022538:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802253a:	3303      	adds	r3, #3
 802253c:	f023 0303 	bic.w	r3, r3, #3
 8022540:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8022544:	d106      	bne.n	8022554 <pbuf_alloc+0xf0>
 8022546:	4b3b      	ldr	r3, [pc, #236]	; (8022634 <pbuf_alloc+0x1d0>)
 8022548:	f44f 7281 	mov.w	r2, #258	; 0x102
 802254c:	493c      	ldr	r1, [pc, #240]	; (8022640 <pbuf_alloc+0x1dc>)
 802254e:	483b      	ldr	r0, [pc, #236]	; (802263c <pbuf_alloc+0x1d8>)
 8022550:	f003 ffa2 	bl	8026498 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8022554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022556:	2b00      	cmp	r3, #0
 8022558:	d102      	bne.n	8022560 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 802255a:	693b      	ldr	r3, [r7, #16]
 802255c:	627b      	str	r3, [r7, #36]	; 0x24
 802255e:	e002      	b.n	8022566 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8022560:	69fb      	ldr	r3, [r7, #28]
 8022562:	693a      	ldr	r2, [r7, #16]
 8022564:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8022566:	693b      	ldr	r3, [r7, #16]
 8022568:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 802256a:	8b7a      	ldrh	r2, [r7, #26]
 802256c:	89fb      	ldrh	r3, [r7, #14]
 802256e:	1ad3      	subs	r3, r2, r3
 8022570:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8022572:	2300      	movs	r3, #0
 8022574:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8022576:	8b7b      	ldrh	r3, [r7, #26]
 8022578:	2b00      	cmp	r3, #0
 802257a:	d1a0      	bne.n	80224be <pbuf_alloc+0x5a>
      break;
 802257c:	e055      	b.n	802262a <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 802257e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022580:	3303      	adds	r3, #3
 8022582:	b29b      	uxth	r3, r3
 8022584:	f023 0303 	bic.w	r3, r3, #3
 8022588:	b29a      	uxth	r2, r3
 802258a:	88bb      	ldrh	r3, [r7, #4]
 802258c:	3303      	adds	r3, #3
 802258e:	b29b      	uxth	r3, r3
 8022590:	f023 0303 	bic.w	r3, r3, #3
 8022594:	b29b      	uxth	r3, r3
 8022596:	4413      	add	r3, r2
 8022598:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 802259a:	8b3b      	ldrh	r3, [r7, #24]
 802259c:	3310      	adds	r3, #16
 802259e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80225a0:	8b3a      	ldrh	r2, [r7, #24]
 80225a2:	88bb      	ldrh	r3, [r7, #4]
 80225a4:	3303      	adds	r3, #3
 80225a6:	f023 0303 	bic.w	r3, r3, #3
 80225aa:	429a      	cmp	r2, r3
 80225ac:	d306      	bcc.n	80225bc <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80225ae:	8afa      	ldrh	r2, [r7, #22]
 80225b0:	88bb      	ldrh	r3, [r7, #4]
 80225b2:	3303      	adds	r3, #3
 80225b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80225b8:	429a      	cmp	r2, r3
 80225ba:	d201      	bcs.n	80225c0 <pbuf_alloc+0x15c>
        return NULL;
 80225bc:	2300      	movs	r3, #0
 80225be:	e035      	b.n	802262c <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80225c0:	8afb      	ldrh	r3, [r7, #22]
 80225c2:	4618      	mov	r0, r3
 80225c4:	f7ff f920 	bl	8021808 <mem_malloc>
 80225c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80225ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d101      	bne.n	80225d4 <pbuf_alloc+0x170>
        return NULL;
 80225d0:	2300      	movs	r3, #0
 80225d2:	e02b      	b.n	802262c <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80225d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80225d6:	3310      	adds	r3, #16
 80225d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80225da:	4413      	add	r3, r2
 80225dc:	3303      	adds	r3, #3
 80225de:	f023 0303 	bic.w	r3, r3, #3
 80225e2:	4618      	mov	r0, r3
 80225e4:	88b9      	ldrh	r1, [r7, #4]
 80225e6:	88ba      	ldrh	r2, [r7, #4]
 80225e8:	2300      	movs	r3, #0
 80225ea:	9301      	str	r3, [sp, #4]
 80225ec:	887b      	ldrh	r3, [r7, #2]
 80225ee:	9300      	str	r3, [sp, #0]
 80225f0:	460b      	mov	r3, r1
 80225f2:	4601      	mov	r1, r0
 80225f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80225f6:	f7ff ff0b 	bl	8022410 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80225fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225fc:	685b      	ldr	r3, [r3, #4]
 80225fe:	f003 0303 	and.w	r3, r3, #3
 8022602:	2b00      	cmp	r3, #0
 8022604:	d010      	beq.n	8022628 <pbuf_alloc+0x1c4>
 8022606:	4b0b      	ldr	r3, [pc, #44]	; (8022634 <pbuf_alloc+0x1d0>)
 8022608:	f44f 7291 	mov.w	r2, #290	; 0x122
 802260c:	490d      	ldr	r1, [pc, #52]	; (8022644 <pbuf_alloc+0x1e0>)
 802260e:	480b      	ldr	r0, [pc, #44]	; (802263c <pbuf_alloc+0x1d8>)
 8022610:	f003 ff42 	bl	8026498 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8022614:	e008      	b.n	8022628 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8022616:	4b07      	ldr	r3, [pc, #28]	; (8022634 <pbuf_alloc+0x1d0>)
 8022618:	f240 1227 	movw	r2, #295	; 0x127
 802261c:	490a      	ldr	r1, [pc, #40]	; (8022648 <pbuf_alloc+0x1e4>)
 802261e:	4807      	ldr	r0, [pc, #28]	; (802263c <pbuf_alloc+0x1d8>)
 8022620:	f003 ff3a 	bl	8026498 <iprintf>
      return NULL;
 8022624:	2300      	movs	r3, #0
 8022626:	e001      	b.n	802262c <pbuf_alloc+0x1c8>
      break;
 8022628:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 802262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802262c:	4618      	mov	r0, r3
 802262e:	3728      	adds	r7, #40	; 0x28
 8022630:	46bd      	mov	sp, r7
 8022632:	bd80      	pop	{r7, pc}
 8022634:	0802c47c 	.word	0x0802c47c
 8022638:	0802c4e8 	.word	0x0802c4e8
 802263c:	0802c518 	.word	0x0802c518
 8022640:	0802c540 	.word	0x0802c540
 8022644:	0802c574 	.word	0x0802c574
 8022648:	0802c5a0 	.word	0x0802c5a0

0802264c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 802264c:	b580      	push	{r7, lr}
 802264e:	b086      	sub	sp, #24
 8022650:	af02      	add	r7, sp, #8
 8022652:	6078      	str	r0, [r7, #4]
 8022654:	460b      	mov	r3, r1
 8022656:	807b      	strh	r3, [r7, #2]
 8022658:	4613      	mov	r3, r2
 802265a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 802265c:	883b      	ldrh	r3, [r7, #0]
 802265e:	2b41      	cmp	r3, #65	; 0x41
 8022660:	d009      	beq.n	8022676 <pbuf_alloc_reference+0x2a>
 8022662:	883b      	ldrh	r3, [r7, #0]
 8022664:	2b01      	cmp	r3, #1
 8022666:	d006      	beq.n	8022676 <pbuf_alloc_reference+0x2a>
 8022668:	4b0f      	ldr	r3, [pc, #60]	; (80226a8 <pbuf_alloc_reference+0x5c>)
 802266a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 802266e:	490f      	ldr	r1, [pc, #60]	; (80226ac <pbuf_alloc_reference+0x60>)
 8022670:	480f      	ldr	r0, [pc, #60]	; (80226b0 <pbuf_alloc_reference+0x64>)
 8022672:	f003 ff11 	bl	8026498 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8022676:	2004      	movs	r0, #4
 8022678:	f7ff fa56 	bl	8021b28 <memp_malloc>
 802267c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 802267e:	68fb      	ldr	r3, [r7, #12]
 8022680:	2b00      	cmp	r3, #0
 8022682:	d101      	bne.n	8022688 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8022684:	2300      	movs	r3, #0
 8022686:	e00b      	b.n	80226a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8022688:	8879      	ldrh	r1, [r7, #2]
 802268a:	887a      	ldrh	r2, [r7, #2]
 802268c:	2300      	movs	r3, #0
 802268e:	9301      	str	r3, [sp, #4]
 8022690:	883b      	ldrh	r3, [r7, #0]
 8022692:	9300      	str	r3, [sp, #0]
 8022694:	460b      	mov	r3, r1
 8022696:	6879      	ldr	r1, [r7, #4]
 8022698:	68f8      	ldr	r0, [r7, #12]
 802269a:	f7ff feb9 	bl	8022410 <pbuf_init_alloced_pbuf>
  return p;
 802269e:	68fb      	ldr	r3, [r7, #12]
}
 80226a0:	4618      	mov	r0, r3
 80226a2:	3710      	adds	r7, #16
 80226a4:	46bd      	mov	sp, r7
 80226a6:	bd80      	pop	{r7, pc}
 80226a8:	0802c47c 	.word	0x0802c47c
 80226ac:	0802c5bc 	.word	0x0802c5bc
 80226b0:	0802c518 	.word	0x0802c518

080226b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80226b4:	b580      	push	{r7, lr}
 80226b6:	b088      	sub	sp, #32
 80226b8:	af02      	add	r7, sp, #8
 80226ba:	607b      	str	r3, [r7, #4]
 80226bc:	4603      	mov	r3, r0
 80226be:	73fb      	strb	r3, [r7, #15]
 80226c0:	460b      	mov	r3, r1
 80226c2:	81bb      	strh	r3, [r7, #12]
 80226c4:	4613      	mov	r3, r2
 80226c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80226c8:	7bfb      	ldrb	r3, [r7, #15]
 80226ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80226cc:	8a7b      	ldrh	r3, [r7, #18]
 80226ce:	3303      	adds	r3, #3
 80226d0:	f023 0203 	bic.w	r2, r3, #3
 80226d4:	89bb      	ldrh	r3, [r7, #12]
 80226d6:	441a      	add	r2, r3
 80226d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80226da:	429a      	cmp	r2, r3
 80226dc:	d901      	bls.n	80226e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80226de:	2300      	movs	r3, #0
 80226e0:	e018      	b.n	8022714 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80226e2:	6a3b      	ldr	r3, [r7, #32]
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d007      	beq.n	80226f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80226e8:	8a7b      	ldrh	r3, [r7, #18]
 80226ea:	3303      	adds	r3, #3
 80226ec:	f023 0303 	bic.w	r3, r3, #3
 80226f0:	6a3a      	ldr	r2, [r7, #32]
 80226f2:	4413      	add	r3, r2
 80226f4:	617b      	str	r3, [r7, #20]
 80226f6:	e001      	b.n	80226fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80226f8:	2300      	movs	r3, #0
 80226fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80226fc:	6878      	ldr	r0, [r7, #4]
 80226fe:	89b9      	ldrh	r1, [r7, #12]
 8022700:	89ba      	ldrh	r2, [r7, #12]
 8022702:	2302      	movs	r3, #2
 8022704:	9301      	str	r3, [sp, #4]
 8022706:	897b      	ldrh	r3, [r7, #10]
 8022708:	9300      	str	r3, [sp, #0]
 802270a:	460b      	mov	r3, r1
 802270c:	6979      	ldr	r1, [r7, #20]
 802270e:	f7ff fe7f 	bl	8022410 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8022712:	687b      	ldr	r3, [r7, #4]
}
 8022714:	4618      	mov	r0, r3
 8022716:	3718      	adds	r7, #24
 8022718:	46bd      	mov	sp, r7
 802271a:	bd80      	pop	{r7, pc}

0802271c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 802271c:	b580      	push	{r7, lr}
 802271e:	b084      	sub	sp, #16
 8022720:	af00      	add	r7, sp, #0
 8022722:	6078      	str	r0, [r7, #4]
 8022724:	460b      	mov	r3, r1
 8022726:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	2b00      	cmp	r3, #0
 802272c:	d106      	bne.n	802273c <pbuf_realloc+0x20>
 802272e:	4b3a      	ldr	r3, [pc, #232]	; (8022818 <pbuf_realloc+0xfc>)
 8022730:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8022734:	4939      	ldr	r1, [pc, #228]	; (802281c <pbuf_realloc+0x100>)
 8022736:	483a      	ldr	r0, [pc, #232]	; (8022820 <pbuf_realloc+0x104>)
 8022738:	f003 feae 	bl	8026498 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	891b      	ldrh	r3, [r3, #8]
 8022740:	887a      	ldrh	r2, [r7, #2]
 8022742:	429a      	cmp	r2, r3
 8022744:	d263      	bcs.n	802280e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8022746:	687b      	ldr	r3, [r7, #4]
 8022748:	891a      	ldrh	r2, [r3, #8]
 802274a:	887b      	ldrh	r3, [r7, #2]
 802274c:	1ad3      	subs	r3, r2, r3
 802274e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8022750:	887b      	ldrh	r3, [r7, #2]
 8022752:	817b      	strh	r3, [r7, #10]
  q = p;
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8022758:	e018      	b.n	802278c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 802275a:	68fb      	ldr	r3, [r7, #12]
 802275c:	895b      	ldrh	r3, [r3, #10]
 802275e:	897a      	ldrh	r2, [r7, #10]
 8022760:	1ad3      	subs	r3, r2, r3
 8022762:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8022764:	68fb      	ldr	r3, [r7, #12]
 8022766:	891a      	ldrh	r2, [r3, #8]
 8022768:	893b      	ldrh	r3, [r7, #8]
 802276a:	1ad3      	subs	r3, r2, r3
 802276c:	b29a      	uxth	r2, r3
 802276e:	68fb      	ldr	r3, [r7, #12]
 8022770:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8022772:	68fb      	ldr	r3, [r7, #12]
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8022778:	68fb      	ldr	r3, [r7, #12]
 802277a:	2b00      	cmp	r3, #0
 802277c:	d106      	bne.n	802278c <pbuf_realloc+0x70>
 802277e:	4b26      	ldr	r3, [pc, #152]	; (8022818 <pbuf_realloc+0xfc>)
 8022780:	f240 12af 	movw	r2, #431	; 0x1af
 8022784:	4927      	ldr	r1, [pc, #156]	; (8022824 <pbuf_realloc+0x108>)
 8022786:	4826      	ldr	r0, [pc, #152]	; (8022820 <pbuf_realloc+0x104>)
 8022788:	f003 fe86 	bl	8026498 <iprintf>
  while (rem_len > q->len) {
 802278c:	68fb      	ldr	r3, [r7, #12]
 802278e:	895b      	ldrh	r3, [r3, #10]
 8022790:	897a      	ldrh	r2, [r7, #10]
 8022792:	429a      	cmp	r2, r3
 8022794:	d8e1      	bhi.n	802275a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8022796:	68fb      	ldr	r3, [r7, #12]
 8022798:	7b1b      	ldrb	r3, [r3, #12]
 802279a:	f003 030f 	and.w	r3, r3, #15
 802279e:	2b00      	cmp	r3, #0
 80227a0:	d121      	bne.n	80227e6 <pbuf_realloc+0xca>
 80227a2:	68fb      	ldr	r3, [r7, #12]
 80227a4:	895b      	ldrh	r3, [r3, #10]
 80227a6:	897a      	ldrh	r2, [r7, #10]
 80227a8:	429a      	cmp	r2, r3
 80227aa:	d01c      	beq.n	80227e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80227ac:	68fb      	ldr	r3, [r7, #12]
 80227ae:	7b5b      	ldrb	r3, [r3, #13]
 80227b0:	f003 0302 	and.w	r3, r3, #2
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	d116      	bne.n	80227e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80227b8:	68fb      	ldr	r3, [r7, #12]
 80227ba:	685a      	ldr	r2, [r3, #4]
 80227bc:	68fb      	ldr	r3, [r7, #12]
 80227be:	1ad3      	subs	r3, r2, r3
 80227c0:	b29a      	uxth	r2, r3
 80227c2:	897b      	ldrh	r3, [r7, #10]
 80227c4:	4413      	add	r3, r2
 80227c6:	b29b      	uxth	r3, r3
 80227c8:	4619      	mov	r1, r3
 80227ca:	68f8      	ldr	r0, [r7, #12]
 80227cc:	f7fe ff20 	bl	8021610 <mem_trim>
 80227d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80227d2:	68fb      	ldr	r3, [r7, #12]
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d106      	bne.n	80227e6 <pbuf_realloc+0xca>
 80227d8:	4b0f      	ldr	r3, [pc, #60]	; (8022818 <pbuf_realloc+0xfc>)
 80227da:	f240 12bd 	movw	r2, #445	; 0x1bd
 80227de:	4912      	ldr	r1, [pc, #72]	; (8022828 <pbuf_realloc+0x10c>)
 80227e0:	480f      	ldr	r0, [pc, #60]	; (8022820 <pbuf_realloc+0x104>)
 80227e2:	f003 fe59 	bl	8026498 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80227e6:	68fb      	ldr	r3, [r7, #12]
 80227e8:	897a      	ldrh	r2, [r7, #10]
 80227ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80227ec:	68fb      	ldr	r3, [r7, #12]
 80227ee:	895a      	ldrh	r2, [r3, #10]
 80227f0:	68fb      	ldr	r3, [r7, #12]
 80227f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80227f4:	68fb      	ldr	r3, [r7, #12]
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	2b00      	cmp	r3, #0
 80227fa:	d004      	beq.n	8022806 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80227fc:	68fb      	ldr	r3, [r7, #12]
 80227fe:	681b      	ldr	r3, [r3, #0]
 8022800:	4618      	mov	r0, r3
 8022802:	f000 f911 	bl	8022a28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8022806:	68fb      	ldr	r3, [r7, #12]
 8022808:	2200      	movs	r2, #0
 802280a:	601a      	str	r2, [r3, #0]
 802280c:	e000      	b.n	8022810 <pbuf_realloc+0xf4>
    return;
 802280e:	bf00      	nop

}
 8022810:	3710      	adds	r7, #16
 8022812:	46bd      	mov	sp, r7
 8022814:	bd80      	pop	{r7, pc}
 8022816:	bf00      	nop
 8022818:	0802c47c 	.word	0x0802c47c
 802281c:	0802c5d0 	.word	0x0802c5d0
 8022820:	0802c518 	.word	0x0802c518
 8022824:	0802c5e8 	.word	0x0802c5e8
 8022828:	0802c600 	.word	0x0802c600

0802282c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 802282c:	b580      	push	{r7, lr}
 802282e:	b086      	sub	sp, #24
 8022830:	af00      	add	r7, sp, #0
 8022832:	60f8      	str	r0, [r7, #12]
 8022834:	60b9      	str	r1, [r7, #8]
 8022836:	4613      	mov	r3, r2
 8022838:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 802283a:	68fb      	ldr	r3, [r7, #12]
 802283c:	2b00      	cmp	r3, #0
 802283e:	d106      	bne.n	802284e <pbuf_add_header_impl+0x22>
 8022840:	4b2b      	ldr	r3, [pc, #172]	; (80228f0 <pbuf_add_header_impl+0xc4>)
 8022842:	f240 12df 	movw	r2, #479	; 0x1df
 8022846:	492b      	ldr	r1, [pc, #172]	; (80228f4 <pbuf_add_header_impl+0xc8>)
 8022848:	482b      	ldr	r0, [pc, #172]	; (80228f8 <pbuf_add_header_impl+0xcc>)
 802284a:	f003 fe25 	bl	8026498 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 802284e:	68fb      	ldr	r3, [r7, #12]
 8022850:	2b00      	cmp	r3, #0
 8022852:	d003      	beq.n	802285c <pbuf_add_header_impl+0x30>
 8022854:	68bb      	ldr	r3, [r7, #8]
 8022856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802285a:	d301      	bcc.n	8022860 <pbuf_add_header_impl+0x34>
    return 1;
 802285c:	2301      	movs	r3, #1
 802285e:	e043      	b.n	80228e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8022860:	68bb      	ldr	r3, [r7, #8]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d101      	bne.n	802286a <pbuf_add_header_impl+0x3e>
    return 0;
 8022866:	2300      	movs	r3, #0
 8022868:	e03e      	b.n	80228e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 802286a:	68bb      	ldr	r3, [r7, #8]
 802286c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 802286e:	68fb      	ldr	r3, [r7, #12]
 8022870:	891a      	ldrh	r2, [r3, #8]
 8022872:	8a7b      	ldrh	r3, [r7, #18]
 8022874:	4413      	add	r3, r2
 8022876:	b29b      	uxth	r3, r3
 8022878:	8a7a      	ldrh	r2, [r7, #18]
 802287a:	429a      	cmp	r2, r3
 802287c:	d901      	bls.n	8022882 <pbuf_add_header_impl+0x56>
    return 1;
 802287e:	2301      	movs	r3, #1
 8022880:	e032      	b.n	80228e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8022882:	68fb      	ldr	r3, [r7, #12]
 8022884:	7b1b      	ldrb	r3, [r3, #12]
 8022886:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8022888:	8a3b      	ldrh	r3, [r7, #16]
 802288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802288e:	2b00      	cmp	r3, #0
 8022890:	d00c      	beq.n	80228ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	685a      	ldr	r2, [r3, #4]
 8022896:	68bb      	ldr	r3, [r7, #8]
 8022898:	425b      	negs	r3, r3
 802289a:	4413      	add	r3, r2
 802289c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 802289e:	68fb      	ldr	r3, [r7, #12]
 80228a0:	3310      	adds	r3, #16
 80228a2:	697a      	ldr	r2, [r7, #20]
 80228a4:	429a      	cmp	r2, r3
 80228a6:	d20d      	bcs.n	80228c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80228a8:	2301      	movs	r3, #1
 80228aa:	e01d      	b.n	80228e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80228ac:	79fb      	ldrb	r3, [r7, #7]
 80228ae:	2b00      	cmp	r3, #0
 80228b0:	d006      	beq.n	80228c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80228b2:	68fb      	ldr	r3, [r7, #12]
 80228b4:	685a      	ldr	r2, [r3, #4]
 80228b6:	68bb      	ldr	r3, [r7, #8]
 80228b8:	425b      	negs	r3, r3
 80228ba:	4413      	add	r3, r2
 80228bc:	617b      	str	r3, [r7, #20]
 80228be:	e001      	b.n	80228c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80228c0:	2301      	movs	r3, #1
 80228c2:	e011      	b.n	80228e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80228c4:	68fb      	ldr	r3, [r7, #12]
 80228c6:	697a      	ldr	r2, [r7, #20]
 80228c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	895a      	ldrh	r2, [r3, #10]
 80228ce:	8a7b      	ldrh	r3, [r7, #18]
 80228d0:	4413      	add	r3, r2
 80228d2:	b29a      	uxth	r2, r3
 80228d4:	68fb      	ldr	r3, [r7, #12]
 80228d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80228d8:	68fb      	ldr	r3, [r7, #12]
 80228da:	891a      	ldrh	r2, [r3, #8]
 80228dc:	8a7b      	ldrh	r3, [r7, #18]
 80228de:	4413      	add	r3, r2
 80228e0:	b29a      	uxth	r2, r3
 80228e2:	68fb      	ldr	r3, [r7, #12]
 80228e4:	811a      	strh	r2, [r3, #8]


  return 0;
 80228e6:	2300      	movs	r3, #0
}
 80228e8:	4618      	mov	r0, r3
 80228ea:	3718      	adds	r7, #24
 80228ec:	46bd      	mov	sp, r7
 80228ee:	bd80      	pop	{r7, pc}
 80228f0:	0802c47c 	.word	0x0802c47c
 80228f4:	0802c61c 	.word	0x0802c61c
 80228f8:	0802c518 	.word	0x0802c518

080228fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80228fc:	b580      	push	{r7, lr}
 80228fe:	b082      	sub	sp, #8
 8022900:	af00      	add	r7, sp, #0
 8022902:	6078      	str	r0, [r7, #4]
 8022904:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8022906:	2200      	movs	r2, #0
 8022908:	6839      	ldr	r1, [r7, #0]
 802290a:	6878      	ldr	r0, [r7, #4]
 802290c:	f7ff ff8e 	bl	802282c <pbuf_add_header_impl>
 8022910:	4603      	mov	r3, r0
}
 8022912:	4618      	mov	r0, r3
 8022914:	3708      	adds	r7, #8
 8022916:	46bd      	mov	sp, r7
 8022918:	bd80      	pop	{r7, pc}
	...

0802291c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 802291c:	b580      	push	{r7, lr}
 802291e:	b084      	sub	sp, #16
 8022920:	af00      	add	r7, sp, #0
 8022922:	6078      	str	r0, [r7, #4]
 8022924:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8022926:	687b      	ldr	r3, [r7, #4]
 8022928:	2b00      	cmp	r3, #0
 802292a:	d106      	bne.n	802293a <pbuf_remove_header+0x1e>
 802292c:	4b20      	ldr	r3, [pc, #128]	; (80229b0 <pbuf_remove_header+0x94>)
 802292e:	f240 224b 	movw	r2, #587	; 0x24b
 8022932:	4920      	ldr	r1, [pc, #128]	; (80229b4 <pbuf_remove_header+0x98>)
 8022934:	4820      	ldr	r0, [pc, #128]	; (80229b8 <pbuf_remove_header+0x9c>)
 8022936:	f003 fdaf 	bl	8026498 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	2b00      	cmp	r3, #0
 802293e:	d003      	beq.n	8022948 <pbuf_remove_header+0x2c>
 8022940:	683b      	ldr	r3, [r7, #0]
 8022942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022946:	d301      	bcc.n	802294c <pbuf_remove_header+0x30>
    return 1;
 8022948:	2301      	movs	r3, #1
 802294a:	e02c      	b.n	80229a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 802294c:	683b      	ldr	r3, [r7, #0]
 802294e:	2b00      	cmp	r3, #0
 8022950:	d101      	bne.n	8022956 <pbuf_remove_header+0x3a>
    return 0;
 8022952:	2300      	movs	r3, #0
 8022954:	e027      	b.n	80229a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8022956:	683b      	ldr	r3, [r7, #0]
 8022958:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 802295a:	687b      	ldr	r3, [r7, #4]
 802295c:	895b      	ldrh	r3, [r3, #10]
 802295e:	89fa      	ldrh	r2, [r7, #14]
 8022960:	429a      	cmp	r2, r3
 8022962:	d908      	bls.n	8022976 <pbuf_remove_header+0x5a>
 8022964:	4b12      	ldr	r3, [pc, #72]	; (80229b0 <pbuf_remove_header+0x94>)
 8022966:	f240 2255 	movw	r2, #597	; 0x255
 802296a:	4914      	ldr	r1, [pc, #80]	; (80229bc <pbuf_remove_header+0xa0>)
 802296c:	4812      	ldr	r0, [pc, #72]	; (80229b8 <pbuf_remove_header+0x9c>)
 802296e:	f003 fd93 	bl	8026498 <iprintf>
 8022972:	2301      	movs	r3, #1
 8022974:	e017      	b.n	80229a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8022976:	687b      	ldr	r3, [r7, #4]
 8022978:	685b      	ldr	r3, [r3, #4]
 802297a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	685a      	ldr	r2, [r3, #4]
 8022980:	683b      	ldr	r3, [r7, #0]
 8022982:	441a      	add	r2, r3
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	895a      	ldrh	r2, [r3, #10]
 802298c:	89fb      	ldrh	r3, [r7, #14]
 802298e:	1ad3      	subs	r3, r2, r3
 8022990:	b29a      	uxth	r2, r3
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8022996:	687b      	ldr	r3, [r7, #4]
 8022998:	891a      	ldrh	r2, [r3, #8]
 802299a:	89fb      	ldrh	r3, [r7, #14]
 802299c:	1ad3      	subs	r3, r2, r3
 802299e:	b29a      	uxth	r2, r3
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80229a4:	2300      	movs	r3, #0
}
 80229a6:	4618      	mov	r0, r3
 80229a8:	3710      	adds	r7, #16
 80229aa:	46bd      	mov	sp, r7
 80229ac:	bd80      	pop	{r7, pc}
 80229ae:	bf00      	nop
 80229b0:	0802c47c 	.word	0x0802c47c
 80229b4:	0802c61c 	.word	0x0802c61c
 80229b8:	0802c518 	.word	0x0802c518
 80229bc:	0802c628 	.word	0x0802c628

080229c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80229c0:	b580      	push	{r7, lr}
 80229c2:	b082      	sub	sp, #8
 80229c4:	af00      	add	r7, sp, #0
 80229c6:	6078      	str	r0, [r7, #4]
 80229c8:	460b      	mov	r3, r1
 80229ca:	807b      	strh	r3, [r7, #2]
 80229cc:	4613      	mov	r3, r2
 80229ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80229d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	da08      	bge.n	80229ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80229d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80229dc:	425b      	negs	r3, r3
 80229de:	4619      	mov	r1, r3
 80229e0:	6878      	ldr	r0, [r7, #4]
 80229e2:	f7ff ff9b 	bl	802291c <pbuf_remove_header>
 80229e6:	4603      	mov	r3, r0
 80229e8:	e007      	b.n	80229fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80229ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80229ee:	787a      	ldrb	r2, [r7, #1]
 80229f0:	4619      	mov	r1, r3
 80229f2:	6878      	ldr	r0, [r7, #4]
 80229f4:	f7ff ff1a 	bl	802282c <pbuf_add_header_impl>
 80229f8:	4603      	mov	r3, r0
  }
}
 80229fa:	4618      	mov	r0, r3
 80229fc:	3708      	adds	r7, #8
 80229fe:	46bd      	mov	sp, r7
 8022a00:	bd80      	pop	{r7, pc}

08022a02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8022a02:	b580      	push	{r7, lr}
 8022a04:	b082      	sub	sp, #8
 8022a06:	af00      	add	r7, sp, #0
 8022a08:	6078      	str	r0, [r7, #4]
 8022a0a:	460b      	mov	r3, r1
 8022a0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8022a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022a12:	2201      	movs	r2, #1
 8022a14:	4619      	mov	r1, r3
 8022a16:	6878      	ldr	r0, [r7, #4]
 8022a18:	f7ff ffd2 	bl	80229c0 <pbuf_header_impl>
 8022a1c:	4603      	mov	r3, r0
}
 8022a1e:	4618      	mov	r0, r3
 8022a20:	3708      	adds	r7, #8
 8022a22:	46bd      	mov	sp, r7
 8022a24:	bd80      	pop	{r7, pc}
	...

08022a28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8022a28:	b580      	push	{r7, lr}
 8022a2a:	b086      	sub	sp, #24
 8022a2c:	af00      	add	r7, sp, #0
 8022a2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d10b      	bne.n	8022a4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	2b00      	cmp	r3, #0
 8022a3a:	d106      	bne.n	8022a4a <pbuf_free+0x22>
 8022a3c:	4b38      	ldr	r3, [pc, #224]	; (8022b20 <pbuf_free+0xf8>)
 8022a3e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8022a42:	4938      	ldr	r1, [pc, #224]	; (8022b24 <pbuf_free+0xfc>)
 8022a44:	4838      	ldr	r0, [pc, #224]	; (8022b28 <pbuf_free+0x100>)
 8022a46:	f003 fd27 	bl	8026498 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8022a4a:	2300      	movs	r3, #0
 8022a4c:	e063      	b.n	8022b16 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8022a4e:	2300      	movs	r3, #0
 8022a50:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8022a52:	e05c      	b.n	8022b0e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8022a54:	687b      	ldr	r3, [r7, #4]
 8022a56:	7b9b      	ldrb	r3, [r3, #14]
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	d106      	bne.n	8022a6a <pbuf_free+0x42>
 8022a5c:	4b30      	ldr	r3, [pc, #192]	; (8022b20 <pbuf_free+0xf8>)
 8022a5e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8022a62:	4932      	ldr	r1, [pc, #200]	; (8022b2c <pbuf_free+0x104>)
 8022a64:	4830      	ldr	r0, [pc, #192]	; (8022b28 <pbuf_free+0x100>)
 8022a66:	f003 fd17 	bl	8026498 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	7b9b      	ldrb	r3, [r3, #14]
 8022a6e:	3b01      	subs	r3, #1
 8022a70:	b2da      	uxtb	r2, r3
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	739a      	strb	r2, [r3, #14]
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	7b9b      	ldrb	r3, [r3, #14]
 8022a7a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8022a7c:	7dbb      	ldrb	r3, [r7, #22]
 8022a7e:	2b00      	cmp	r3, #0
 8022a80:	d143      	bne.n	8022b0a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	681b      	ldr	r3, [r3, #0]
 8022a86:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8022a88:	687b      	ldr	r3, [r7, #4]
 8022a8a:	7b1b      	ldrb	r3, [r3, #12]
 8022a8c:	f003 030f 	and.w	r3, r3, #15
 8022a90:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8022a92:	687b      	ldr	r3, [r7, #4]
 8022a94:	7b5b      	ldrb	r3, [r3, #13]
 8022a96:	f003 0302 	and.w	r3, r3, #2
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	d011      	beq.n	8022ac2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8022a9e:	687b      	ldr	r3, [r7, #4]
 8022aa0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8022aa2:	68bb      	ldr	r3, [r7, #8]
 8022aa4:	691b      	ldr	r3, [r3, #16]
 8022aa6:	2b00      	cmp	r3, #0
 8022aa8:	d106      	bne.n	8022ab8 <pbuf_free+0x90>
 8022aaa:	4b1d      	ldr	r3, [pc, #116]	; (8022b20 <pbuf_free+0xf8>)
 8022aac:	f240 22ff 	movw	r2, #767	; 0x2ff
 8022ab0:	491f      	ldr	r1, [pc, #124]	; (8022b30 <pbuf_free+0x108>)
 8022ab2:	481d      	ldr	r0, [pc, #116]	; (8022b28 <pbuf_free+0x100>)
 8022ab4:	f003 fcf0 	bl	8026498 <iprintf>
        pc->custom_free_function(p);
 8022ab8:	68bb      	ldr	r3, [r7, #8]
 8022aba:	691b      	ldr	r3, [r3, #16]
 8022abc:	6878      	ldr	r0, [r7, #4]
 8022abe:	4798      	blx	r3
 8022ac0:	e01d      	b.n	8022afe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8022ac2:	7bfb      	ldrb	r3, [r7, #15]
 8022ac4:	2b02      	cmp	r3, #2
 8022ac6:	d104      	bne.n	8022ad2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8022ac8:	6879      	ldr	r1, [r7, #4]
 8022aca:	2005      	movs	r0, #5
 8022acc:	f7ff f89c 	bl	8021c08 <memp_free>
 8022ad0:	e015      	b.n	8022afe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8022ad2:	7bfb      	ldrb	r3, [r7, #15]
 8022ad4:	2b01      	cmp	r3, #1
 8022ad6:	d104      	bne.n	8022ae2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8022ad8:	6879      	ldr	r1, [r7, #4]
 8022ada:	2004      	movs	r0, #4
 8022adc:	f7ff f894 	bl	8021c08 <memp_free>
 8022ae0:	e00d      	b.n	8022afe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8022ae2:	7bfb      	ldrb	r3, [r7, #15]
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	d103      	bne.n	8022af0 <pbuf_free+0xc8>
          mem_free(p);
 8022ae8:	6878      	ldr	r0, [r7, #4]
 8022aea:	f7fe fd27 	bl	802153c <mem_free>
 8022aee:	e006      	b.n	8022afe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8022af0:	4b0b      	ldr	r3, [pc, #44]	; (8022b20 <pbuf_free+0xf8>)
 8022af2:	f240 320f 	movw	r2, #783	; 0x30f
 8022af6:	490f      	ldr	r1, [pc, #60]	; (8022b34 <pbuf_free+0x10c>)
 8022af8:	480b      	ldr	r0, [pc, #44]	; (8022b28 <pbuf_free+0x100>)
 8022afa:	f003 fccd 	bl	8026498 <iprintf>
        }
      }
      count++;
 8022afe:	7dfb      	ldrb	r3, [r7, #23]
 8022b00:	3301      	adds	r3, #1
 8022b02:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8022b04:	693b      	ldr	r3, [r7, #16]
 8022b06:	607b      	str	r3, [r7, #4]
 8022b08:	e001      	b.n	8022b0e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8022b0a:	2300      	movs	r3, #0
 8022b0c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8022b0e:	687b      	ldr	r3, [r7, #4]
 8022b10:	2b00      	cmp	r3, #0
 8022b12:	d19f      	bne.n	8022a54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8022b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8022b16:	4618      	mov	r0, r3
 8022b18:	3718      	adds	r7, #24
 8022b1a:	46bd      	mov	sp, r7
 8022b1c:	bd80      	pop	{r7, pc}
 8022b1e:	bf00      	nop
 8022b20:	0802c47c 	.word	0x0802c47c
 8022b24:	0802c61c 	.word	0x0802c61c
 8022b28:	0802c518 	.word	0x0802c518
 8022b2c:	0802c648 	.word	0x0802c648
 8022b30:	0802c660 	.word	0x0802c660
 8022b34:	0802c684 	.word	0x0802c684

08022b38 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8022b38:	b480      	push	{r7}
 8022b3a:	b085      	sub	sp, #20
 8022b3c:	af00      	add	r7, sp, #0
 8022b3e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8022b40:	2300      	movs	r3, #0
 8022b42:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8022b44:	e005      	b.n	8022b52 <pbuf_clen+0x1a>
    ++len;
 8022b46:	89fb      	ldrh	r3, [r7, #14]
 8022b48:	3301      	adds	r3, #1
 8022b4a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8022b4c:	687b      	ldr	r3, [r7, #4]
 8022b4e:	681b      	ldr	r3, [r3, #0]
 8022b50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	d1f6      	bne.n	8022b46 <pbuf_clen+0xe>
  }
  return len;
 8022b58:	89fb      	ldrh	r3, [r7, #14]
}
 8022b5a:	4618      	mov	r0, r3
 8022b5c:	3714      	adds	r7, #20
 8022b5e:	46bd      	mov	sp, r7
 8022b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b64:	4770      	bx	lr
	...

08022b68 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8022b68:	b580      	push	{r7, lr}
 8022b6a:	b082      	sub	sp, #8
 8022b6c:	af00      	add	r7, sp, #0
 8022b6e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	d010      	beq.n	8022b98 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	7b9b      	ldrb	r3, [r3, #14]
 8022b7a:	3301      	adds	r3, #1
 8022b7c:	b2da      	uxtb	r2, r3
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8022b82:	687b      	ldr	r3, [r7, #4]
 8022b84:	7b9b      	ldrb	r3, [r3, #14]
 8022b86:	2b00      	cmp	r3, #0
 8022b88:	d106      	bne.n	8022b98 <pbuf_ref+0x30>
 8022b8a:	4b05      	ldr	r3, [pc, #20]	; (8022ba0 <pbuf_ref+0x38>)
 8022b8c:	f240 3242 	movw	r2, #834	; 0x342
 8022b90:	4904      	ldr	r1, [pc, #16]	; (8022ba4 <pbuf_ref+0x3c>)
 8022b92:	4805      	ldr	r0, [pc, #20]	; (8022ba8 <pbuf_ref+0x40>)
 8022b94:	f003 fc80 	bl	8026498 <iprintf>
  }
}
 8022b98:	bf00      	nop
 8022b9a:	3708      	adds	r7, #8
 8022b9c:	46bd      	mov	sp, r7
 8022b9e:	bd80      	pop	{r7, pc}
 8022ba0:	0802c47c 	.word	0x0802c47c
 8022ba4:	0802c698 	.word	0x0802c698
 8022ba8:	0802c518 	.word	0x0802c518

08022bac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8022bac:	b580      	push	{r7, lr}
 8022bae:	b084      	sub	sp, #16
 8022bb0:	af00      	add	r7, sp, #0
 8022bb2:	6078      	str	r0, [r7, #4]
 8022bb4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	d002      	beq.n	8022bc2 <pbuf_cat+0x16>
 8022bbc:	683b      	ldr	r3, [r7, #0]
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	d107      	bne.n	8022bd2 <pbuf_cat+0x26>
 8022bc2:	4b20      	ldr	r3, [pc, #128]	; (8022c44 <pbuf_cat+0x98>)
 8022bc4:	f240 3259 	movw	r2, #857	; 0x359
 8022bc8:	491f      	ldr	r1, [pc, #124]	; (8022c48 <pbuf_cat+0x9c>)
 8022bca:	4820      	ldr	r0, [pc, #128]	; (8022c4c <pbuf_cat+0xa0>)
 8022bcc:	f003 fc64 	bl	8026498 <iprintf>
 8022bd0:	e034      	b.n	8022c3c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8022bd2:	687b      	ldr	r3, [r7, #4]
 8022bd4:	60fb      	str	r3, [r7, #12]
 8022bd6:	e00a      	b.n	8022bee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8022bd8:	68fb      	ldr	r3, [r7, #12]
 8022bda:	891a      	ldrh	r2, [r3, #8]
 8022bdc:	683b      	ldr	r3, [r7, #0]
 8022bde:	891b      	ldrh	r3, [r3, #8]
 8022be0:	4413      	add	r3, r2
 8022be2:	b29a      	uxth	r2, r3
 8022be4:	68fb      	ldr	r3, [r7, #12]
 8022be6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8022be8:	68fb      	ldr	r3, [r7, #12]
 8022bea:	681b      	ldr	r3, [r3, #0]
 8022bec:	60fb      	str	r3, [r7, #12]
 8022bee:	68fb      	ldr	r3, [r7, #12]
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	2b00      	cmp	r3, #0
 8022bf4:	d1f0      	bne.n	8022bd8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8022bf6:	68fb      	ldr	r3, [r7, #12]
 8022bf8:	891a      	ldrh	r2, [r3, #8]
 8022bfa:	68fb      	ldr	r3, [r7, #12]
 8022bfc:	895b      	ldrh	r3, [r3, #10]
 8022bfe:	429a      	cmp	r2, r3
 8022c00:	d006      	beq.n	8022c10 <pbuf_cat+0x64>
 8022c02:	4b10      	ldr	r3, [pc, #64]	; (8022c44 <pbuf_cat+0x98>)
 8022c04:	f240 3262 	movw	r2, #866	; 0x362
 8022c08:	4911      	ldr	r1, [pc, #68]	; (8022c50 <pbuf_cat+0xa4>)
 8022c0a:	4810      	ldr	r0, [pc, #64]	; (8022c4c <pbuf_cat+0xa0>)
 8022c0c:	f003 fc44 	bl	8026498 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	681b      	ldr	r3, [r3, #0]
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d006      	beq.n	8022c26 <pbuf_cat+0x7a>
 8022c18:	4b0a      	ldr	r3, [pc, #40]	; (8022c44 <pbuf_cat+0x98>)
 8022c1a:	f240 3263 	movw	r2, #867	; 0x363
 8022c1e:	490d      	ldr	r1, [pc, #52]	; (8022c54 <pbuf_cat+0xa8>)
 8022c20:	480a      	ldr	r0, [pc, #40]	; (8022c4c <pbuf_cat+0xa0>)
 8022c22:	f003 fc39 	bl	8026498 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8022c26:	68fb      	ldr	r3, [r7, #12]
 8022c28:	891a      	ldrh	r2, [r3, #8]
 8022c2a:	683b      	ldr	r3, [r7, #0]
 8022c2c:	891b      	ldrh	r3, [r3, #8]
 8022c2e:	4413      	add	r3, r2
 8022c30:	b29a      	uxth	r2, r3
 8022c32:	68fb      	ldr	r3, [r7, #12]
 8022c34:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8022c36:	68fb      	ldr	r3, [r7, #12]
 8022c38:	683a      	ldr	r2, [r7, #0]
 8022c3a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8022c3c:	3710      	adds	r7, #16
 8022c3e:	46bd      	mov	sp, r7
 8022c40:	bd80      	pop	{r7, pc}
 8022c42:	bf00      	nop
 8022c44:	0802c47c 	.word	0x0802c47c
 8022c48:	0802c6ac 	.word	0x0802c6ac
 8022c4c:	0802c518 	.word	0x0802c518
 8022c50:	0802c6e4 	.word	0x0802c6e4
 8022c54:	0802c714 	.word	0x0802c714

08022c58 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8022c58:	b580      	push	{r7, lr}
 8022c5a:	b082      	sub	sp, #8
 8022c5c:	af00      	add	r7, sp, #0
 8022c5e:	6078      	str	r0, [r7, #4]
 8022c60:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8022c62:	6839      	ldr	r1, [r7, #0]
 8022c64:	6878      	ldr	r0, [r7, #4]
 8022c66:	f7ff ffa1 	bl	8022bac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8022c6a:	6838      	ldr	r0, [r7, #0]
 8022c6c:	f7ff ff7c 	bl	8022b68 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8022c70:	bf00      	nop
 8022c72:	3708      	adds	r7, #8
 8022c74:	46bd      	mov	sp, r7
 8022c76:	bd80      	pop	{r7, pc}

08022c78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8022c78:	b580      	push	{r7, lr}
 8022c7a:	b086      	sub	sp, #24
 8022c7c:	af00      	add	r7, sp, #0
 8022c7e:	6078      	str	r0, [r7, #4]
 8022c80:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8022c82:	2300      	movs	r3, #0
 8022c84:	617b      	str	r3, [r7, #20]
 8022c86:	2300      	movs	r3, #0
 8022c88:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8022c8a:	687b      	ldr	r3, [r7, #4]
 8022c8c:	2b00      	cmp	r3, #0
 8022c8e:	d008      	beq.n	8022ca2 <pbuf_copy+0x2a>
 8022c90:	683b      	ldr	r3, [r7, #0]
 8022c92:	2b00      	cmp	r3, #0
 8022c94:	d005      	beq.n	8022ca2 <pbuf_copy+0x2a>
 8022c96:	687b      	ldr	r3, [r7, #4]
 8022c98:	891a      	ldrh	r2, [r3, #8]
 8022c9a:	683b      	ldr	r3, [r7, #0]
 8022c9c:	891b      	ldrh	r3, [r3, #8]
 8022c9e:	429a      	cmp	r2, r3
 8022ca0:	d209      	bcs.n	8022cb6 <pbuf_copy+0x3e>
 8022ca2:	4b57      	ldr	r3, [pc, #348]	; (8022e00 <pbuf_copy+0x188>)
 8022ca4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8022ca8:	4956      	ldr	r1, [pc, #344]	; (8022e04 <pbuf_copy+0x18c>)
 8022caa:	4857      	ldr	r0, [pc, #348]	; (8022e08 <pbuf_copy+0x190>)
 8022cac:	f003 fbf4 	bl	8026498 <iprintf>
 8022cb0:	f06f 030f 	mvn.w	r3, #15
 8022cb4:	e09f      	b.n	8022df6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	895b      	ldrh	r3, [r3, #10]
 8022cba:	461a      	mov	r2, r3
 8022cbc:	697b      	ldr	r3, [r7, #20]
 8022cbe:	1ad2      	subs	r2, r2, r3
 8022cc0:	683b      	ldr	r3, [r7, #0]
 8022cc2:	895b      	ldrh	r3, [r3, #10]
 8022cc4:	4619      	mov	r1, r3
 8022cc6:	693b      	ldr	r3, [r7, #16]
 8022cc8:	1acb      	subs	r3, r1, r3
 8022cca:	429a      	cmp	r2, r3
 8022ccc:	d306      	bcc.n	8022cdc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8022cce:	683b      	ldr	r3, [r7, #0]
 8022cd0:	895b      	ldrh	r3, [r3, #10]
 8022cd2:	461a      	mov	r2, r3
 8022cd4:	693b      	ldr	r3, [r7, #16]
 8022cd6:	1ad3      	subs	r3, r2, r3
 8022cd8:	60fb      	str	r3, [r7, #12]
 8022cda:	e005      	b.n	8022ce8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	895b      	ldrh	r3, [r3, #10]
 8022ce0:	461a      	mov	r2, r3
 8022ce2:	697b      	ldr	r3, [r7, #20]
 8022ce4:	1ad3      	subs	r3, r2, r3
 8022ce6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	685a      	ldr	r2, [r3, #4]
 8022cec:	697b      	ldr	r3, [r7, #20]
 8022cee:	18d0      	adds	r0, r2, r3
 8022cf0:	683b      	ldr	r3, [r7, #0]
 8022cf2:	685a      	ldr	r2, [r3, #4]
 8022cf4:	693b      	ldr	r3, [r7, #16]
 8022cf6:	4413      	add	r3, r2
 8022cf8:	68fa      	ldr	r2, [r7, #12]
 8022cfa:	4619      	mov	r1, r3
 8022cfc:	f003 fabc 	bl	8026278 <memcpy>
    offset_to += len;
 8022d00:	697a      	ldr	r2, [r7, #20]
 8022d02:	68fb      	ldr	r3, [r7, #12]
 8022d04:	4413      	add	r3, r2
 8022d06:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8022d08:	693a      	ldr	r2, [r7, #16]
 8022d0a:	68fb      	ldr	r3, [r7, #12]
 8022d0c:	4413      	add	r3, r2
 8022d0e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	895b      	ldrh	r3, [r3, #10]
 8022d14:	461a      	mov	r2, r3
 8022d16:	697b      	ldr	r3, [r7, #20]
 8022d18:	4293      	cmp	r3, r2
 8022d1a:	d906      	bls.n	8022d2a <pbuf_copy+0xb2>
 8022d1c:	4b38      	ldr	r3, [pc, #224]	; (8022e00 <pbuf_copy+0x188>)
 8022d1e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8022d22:	493a      	ldr	r1, [pc, #232]	; (8022e0c <pbuf_copy+0x194>)
 8022d24:	4838      	ldr	r0, [pc, #224]	; (8022e08 <pbuf_copy+0x190>)
 8022d26:	f003 fbb7 	bl	8026498 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8022d2a:	683b      	ldr	r3, [r7, #0]
 8022d2c:	895b      	ldrh	r3, [r3, #10]
 8022d2e:	461a      	mov	r2, r3
 8022d30:	693b      	ldr	r3, [r7, #16]
 8022d32:	4293      	cmp	r3, r2
 8022d34:	d906      	bls.n	8022d44 <pbuf_copy+0xcc>
 8022d36:	4b32      	ldr	r3, [pc, #200]	; (8022e00 <pbuf_copy+0x188>)
 8022d38:	f240 32da 	movw	r2, #986	; 0x3da
 8022d3c:	4934      	ldr	r1, [pc, #208]	; (8022e10 <pbuf_copy+0x198>)
 8022d3e:	4832      	ldr	r0, [pc, #200]	; (8022e08 <pbuf_copy+0x190>)
 8022d40:	f003 fbaa 	bl	8026498 <iprintf>
    if (offset_from >= p_from->len) {
 8022d44:	683b      	ldr	r3, [r7, #0]
 8022d46:	895b      	ldrh	r3, [r3, #10]
 8022d48:	461a      	mov	r2, r3
 8022d4a:	693b      	ldr	r3, [r7, #16]
 8022d4c:	4293      	cmp	r3, r2
 8022d4e:	d304      	bcc.n	8022d5a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8022d50:	2300      	movs	r3, #0
 8022d52:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8022d54:	683b      	ldr	r3, [r7, #0]
 8022d56:	681b      	ldr	r3, [r3, #0]
 8022d58:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8022d5a:	687b      	ldr	r3, [r7, #4]
 8022d5c:	895b      	ldrh	r3, [r3, #10]
 8022d5e:	461a      	mov	r2, r3
 8022d60:	697b      	ldr	r3, [r7, #20]
 8022d62:	4293      	cmp	r3, r2
 8022d64:	d114      	bne.n	8022d90 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8022d66:	2300      	movs	r3, #0
 8022d68:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8022d6a:	687b      	ldr	r3, [r7, #4]
 8022d6c:	681b      	ldr	r3, [r3, #0]
 8022d6e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8022d70:	687b      	ldr	r3, [r7, #4]
 8022d72:	2b00      	cmp	r3, #0
 8022d74:	d10c      	bne.n	8022d90 <pbuf_copy+0x118>
 8022d76:	683b      	ldr	r3, [r7, #0]
 8022d78:	2b00      	cmp	r3, #0
 8022d7a:	d009      	beq.n	8022d90 <pbuf_copy+0x118>
 8022d7c:	4b20      	ldr	r3, [pc, #128]	; (8022e00 <pbuf_copy+0x188>)
 8022d7e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8022d82:	4924      	ldr	r1, [pc, #144]	; (8022e14 <pbuf_copy+0x19c>)
 8022d84:	4820      	ldr	r0, [pc, #128]	; (8022e08 <pbuf_copy+0x190>)
 8022d86:	f003 fb87 	bl	8026498 <iprintf>
 8022d8a:	f06f 030f 	mvn.w	r3, #15
 8022d8e:	e032      	b.n	8022df6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8022d90:	683b      	ldr	r3, [r7, #0]
 8022d92:	2b00      	cmp	r3, #0
 8022d94:	d013      	beq.n	8022dbe <pbuf_copy+0x146>
 8022d96:	683b      	ldr	r3, [r7, #0]
 8022d98:	895a      	ldrh	r2, [r3, #10]
 8022d9a:	683b      	ldr	r3, [r7, #0]
 8022d9c:	891b      	ldrh	r3, [r3, #8]
 8022d9e:	429a      	cmp	r2, r3
 8022da0:	d10d      	bne.n	8022dbe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8022da2:	683b      	ldr	r3, [r7, #0]
 8022da4:	681b      	ldr	r3, [r3, #0]
 8022da6:	2b00      	cmp	r3, #0
 8022da8:	d009      	beq.n	8022dbe <pbuf_copy+0x146>
 8022daa:	4b15      	ldr	r3, [pc, #84]	; (8022e00 <pbuf_copy+0x188>)
 8022dac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8022db0:	4919      	ldr	r1, [pc, #100]	; (8022e18 <pbuf_copy+0x1a0>)
 8022db2:	4815      	ldr	r0, [pc, #84]	; (8022e08 <pbuf_copy+0x190>)
 8022db4:	f003 fb70 	bl	8026498 <iprintf>
 8022db8:	f06f 0305 	mvn.w	r3, #5
 8022dbc:	e01b      	b.n	8022df6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	d013      	beq.n	8022dec <pbuf_copy+0x174>
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	895a      	ldrh	r2, [r3, #10]
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	891b      	ldrh	r3, [r3, #8]
 8022dcc:	429a      	cmp	r2, r3
 8022dce:	d10d      	bne.n	8022dec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	681b      	ldr	r3, [r3, #0]
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	d009      	beq.n	8022dec <pbuf_copy+0x174>
 8022dd8:	4b09      	ldr	r3, [pc, #36]	; (8022e00 <pbuf_copy+0x188>)
 8022dda:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8022dde:	490e      	ldr	r1, [pc, #56]	; (8022e18 <pbuf_copy+0x1a0>)
 8022de0:	4809      	ldr	r0, [pc, #36]	; (8022e08 <pbuf_copy+0x190>)
 8022de2:	f003 fb59 	bl	8026498 <iprintf>
 8022de6:	f06f 0305 	mvn.w	r3, #5
 8022dea:	e004      	b.n	8022df6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8022dec:	683b      	ldr	r3, [r7, #0]
 8022dee:	2b00      	cmp	r3, #0
 8022df0:	f47f af61 	bne.w	8022cb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8022df4:	2300      	movs	r3, #0
}
 8022df6:	4618      	mov	r0, r3
 8022df8:	3718      	adds	r7, #24
 8022dfa:	46bd      	mov	sp, r7
 8022dfc:	bd80      	pop	{r7, pc}
 8022dfe:	bf00      	nop
 8022e00:	0802c47c 	.word	0x0802c47c
 8022e04:	0802c760 	.word	0x0802c760
 8022e08:	0802c518 	.word	0x0802c518
 8022e0c:	0802c790 	.word	0x0802c790
 8022e10:	0802c7a8 	.word	0x0802c7a8
 8022e14:	0802c7c4 	.word	0x0802c7c4
 8022e18:	0802c7d4 	.word	0x0802c7d4

08022e1c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8022e1c:	b580      	push	{r7, lr}
 8022e1e:	b088      	sub	sp, #32
 8022e20:	af00      	add	r7, sp, #0
 8022e22:	60f8      	str	r0, [r7, #12]
 8022e24:	60b9      	str	r1, [r7, #8]
 8022e26:	4613      	mov	r3, r2
 8022e28:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8022e2a:	88fb      	ldrh	r3, [r7, #6]
 8022e2c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8022e2e:	2300      	movs	r3, #0
 8022e30:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8022e32:	68fb      	ldr	r3, [r7, #12]
 8022e34:	2b00      	cmp	r3, #0
 8022e36:	d109      	bne.n	8022e4c <pbuf_take+0x30>
 8022e38:	4b3a      	ldr	r3, [pc, #232]	; (8022f24 <pbuf_take+0x108>)
 8022e3a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8022e3e:	493a      	ldr	r1, [pc, #232]	; (8022f28 <pbuf_take+0x10c>)
 8022e40:	483a      	ldr	r0, [pc, #232]	; (8022f2c <pbuf_take+0x110>)
 8022e42:	f003 fb29 	bl	8026498 <iprintf>
 8022e46:	f06f 030f 	mvn.w	r3, #15
 8022e4a:	e067      	b.n	8022f1c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8022e4c:	68bb      	ldr	r3, [r7, #8]
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	d109      	bne.n	8022e66 <pbuf_take+0x4a>
 8022e52:	4b34      	ldr	r3, [pc, #208]	; (8022f24 <pbuf_take+0x108>)
 8022e54:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8022e58:	4935      	ldr	r1, [pc, #212]	; (8022f30 <pbuf_take+0x114>)
 8022e5a:	4834      	ldr	r0, [pc, #208]	; (8022f2c <pbuf_take+0x110>)
 8022e5c:	f003 fb1c 	bl	8026498 <iprintf>
 8022e60:	f06f 030f 	mvn.w	r3, #15
 8022e64:	e05a      	b.n	8022f1c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8022e66:	68fb      	ldr	r3, [r7, #12]
 8022e68:	891b      	ldrh	r3, [r3, #8]
 8022e6a:	88fa      	ldrh	r2, [r7, #6]
 8022e6c:	429a      	cmp	r2, r3
 8022e6e:	d909      	bls.n	8022e84 <pbuf_take+0x68>
 8022e70:	4b2c      	ldr	r3, [pc, #176]	; (8022f24 <pbuf_take+0x108>)
 8022e72:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8022e76:	492f      	ldr	r1, [pc, #188]	; (8022f34 <pbuf_take+0x118>)
 8022e78:	482c      	ldr	r0, [pc, #176]	; (8022f2c <pbuf_take+0x110>)
 8022e7a:	f003 fb0d 	bl	8026498 <iprintf>
 8022e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8022e82:	e04b      	b.n	8022f1c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8022e84:	68fb      	ldr	r3, [r7, #12]
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	d007      	beq.n	8022e9a <pbuf_take+0x7e>
 8022e8a:	68bb      	ldr	r3, [r7, #8]
 8022e8c:	2b00      	cmp	r3, #0
 8022e8e:	d004      	beq.n	8022e9a <pbuf_take+0x7e>
 8022e90:	68fb      	ldr	r3, [r7, #12]
 8022e92:	891b      	ldrh	r3, [r3, #8]
 8022e94:	88fa      	ldrh	r2, [r7, #6]
 8022e96:	429a      	cmp	r2, r3
 8022e98:	d902      	bls.n	8022ea0 <pbuf_take+0x84>
    return ERR_ARG;
 8022e9a:	f06f 030f 	mvn.w	r3, #15
 8022e9e:	e03d      	b.n	8022f1c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8022ea0:	68fb      	ldr	r3, [r7, #12]
 8022ea2:	61fb      	str	r3, [r7, #28]
 8022ea4:	e028      	b.n	8022ef8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8022ea6:	69fb      	ldr	r3, [r7, #28]
 8022ea8:	2b00      	cmp	r3, #0
 8022eaa:	d106      	bne.n	8022eba <pbuf_take+0x9e>
 8022eac:	4b1d      	ldr	r3, [pc, #116]	; (8022f24 <pbuf_take+0x108>)
 8022eae:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8022eb2:	4921      	ldr	r1, [pc, #132]	; (8022f38 <pbuf_take+0x11c>)
 8022eb4:	481d      	ldr	r0, [pc, #116]	; (8022f2c <pbuf_take+0x110>)
 8022eb6:	f003 faef 	bl	8026498 <iprintf>
    buf_copy_len = total_copy_len;
 8022eba:	697b      	ldr	r3, [r7, #20]
 8022ebc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8022ebe:	69fb      	ldr	r3, [r7, #28]
 8022ec0:	895b      	ldrh	r3, [r3, #10]
 8022ec2:	461a      	mov	r2, r3
 8022ec4:	69bb      	ldr	r3, [r7, #24]
 8022ec6:	4293      	cmp	r3, r2
 8022ec8:	d902      	bls.n	8022ed0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8022eca:	69fb      	ldr	r3, [r7, #28]
 8022ecc:	895b      	ldrh	r3, [r3, #10]
 8022ece:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8022ed0:	69fb      	ldr	r3, [r7, #28]
 8022ed2:	6858      	ldr	r0, [r3, #4]
 8022ed4:	68ba      	ldr	r2, [r7, #8]
 8022ed6:	693b      	ldr	r3, [r7, #16]
 8022ed8:	4413      	add	r3, r2
 8022eda:	69ba      	ldr	r2, [r7, #24]
 8022edc:	4619      	mov	r1, r3
 8022ede:	f003 f9cb 	bl	8026278 <memcpy>
    total_copy_len -= buf_copy_len;
 8022ee2:	697a      	ldr	r2, [r7, #20]
 8022ee4:	69bb      	ldr	r3, [r7, #24]
 8022ee6:	1ad3      	subs	r3, r2, r3
 8022ee8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8022eea:	693a      	ldr	r2, [r7, #16]
 8022eec:	69bb      	ldr	r3, [r7, #24]
 8022eee:	4413      	add	r3, r2
 8022ef0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8022ef2:	69fb      	ldr	r3, [r7, #28]
 8022ef4:	681b      	ldr	r3, [r3, #0]
 8022ef6:	61fb      	str	r3, [r7, #28]
 8022ef8:	697b      	ldr	r3, [r7, #20]
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d1d3      	bne.n	8022ea6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8022efe:	697b      	ldr	r3, [r7, #20]
 8022f00:	2b00      	cmp	r3, #0
 8022f02:	d103      	bne.n	8022f0c <pbuf_take+0xf0>
 8022f04:	88fb      	ldrh	r3, [r7, #6]
 8022f06:	693a      	ldr	r2, [r7, #16]
 8022f08:	429a      	cmp	r2, r3
 8022f0a:	d006      	beq.n	8022f1a <pbuf_take+0xfe>
 8022f0c:	4b05      	ldr	r3, [pc, #20]	; (8022f24 <pbuf_take+0x108>)
 8022f0e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8022f12:	490a      	ldr	r1, [pc, #40]	; (8022f3c <pbuf_take+0x120>)
 8022f14:	4805      	ldr	r0, [pc, #20]	; (8022f2c <pbuf_take+0x110>)
 8022f16:	f003 fabf 	bl	8026498 <iprintf>
  return ERR_OK;
 8022f1a:	2300      	movs	r3, #0
}
 8022f1c:	4618      	mov	r0, r3
 8022f1e:	3720      	adds	r7, #32
 8022f20:	46bd      	mov	sp, r7
 8022f22:	bd80      	pop	{r7, pc}
 8022f24:	0802c47c 	.word	0x0802c47c
 8022f28:	0802c890 	.word	0x0802c890
 8022f2c:	0802c518 	.word	0x0802c518
 8022f30:	0802c8a8 	.word	0x0802c8a8
 8022f34:	0802c8c4 	.word	0x0802c8c4
 8022f38:	0802c8e4 	.word	0x0802c8e4
 8022f3c:	0802c8fc 	.word	0x0802c8fc

08022f40 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8022f40:	b580      	push	{r7, lr}
 8022f42:	b084      	sub	sp, #16
 8022f44:	af00      	add	r7, sp, #0
 8022f46:	4603      	mov	r3, r0
 8022f48:	603a      	str	r2, [r7, #0]
 8022f4a:	71fb      	strb	r3, [r7, #7]
 8022f4c:	460b      	mov	r3, r1
 8022f4e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8022f50:	683b      	ldr	r3, [r7, #0]
 8022f52:	8919      	ldrh	r1, [r3, #8]
 8022f54:	88ba      	ldrh	r2, [r7, #4]
 8022f56:	79fb      	ldrb	r3, [r7, #7]
 8022f58:	4618      	mov	r0, r3
 8022f5a:	f7ff fa83 	bl	8022464 <pbuf_alloc>
 8022f5e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8022f60:	68fb      	ldr	r3, [r7, #12]
 8022f62:	2b00      	cmp	r3, #0
 8022f64:	d101      	bne.n	8022f6a <pbuf_clone+0x2a>
    return NULL;
 8022f66:	2300      	movs	r3, #0
 8022f68:	e011      	b.n	8022f8e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8022f6a:	6839      	ldr	r1, [r7, #0]
 8022f6c:	68f8      	ldr	r0, [r7, #12]
 8022f6e:	f7ff fe83 	bl	8022c78 <pbuf_copy>
 8022f72:	4603      	mov	r3, r0
 8022f74:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8022f76:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022f7a:	2b00      	cmp	r3, #0
 8022f7c:	d006      	beq.n	8022f8c <pbuf_clone+0x4c>
 8022f7e:	4b06      	ldr	r3, [pc, #24]	; (8022f98 <pbuf_clone+0x58>)
 8022f80:	f240 5224 	movw	r2, #1316	; 0x524
 8022f84:	4905      	ldr	r1, [pc, #20]	; (8022f9c <pbuf_clone+0x5c>)
 8022f86:	4806      	ldr	r0, [pc, #24]	; (8022fa0 <pbuf_clone+0x60>)
 8022f88:	f003 fa86 	bl	8026498 <iprintf>
  return q;
 8022f8c:	68fb      	ldr	r3, [r7, #12]
}
 8022f8e:	4618      	mov	r0, r3
 8022f90:	3710      	adds	r7, #16
 8022f92:	46bd      	mov	sp, r7
 8022f94:	bd80      	pop	{r7, pc}
 8022f96:	bf00      	nop
 8022f98:	0802c47c 	.word	0x0802c47c
 8022f9c:	0802c92c 	.word	0x0802c92c
 8022fa0:	0802c518 	.word	0x0802c518

08022fa4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8022fa4:	b580      	push	{r7, lr}
 8022fa6:	b086      	sub	sp, #24
 8022fa8:	af00      	add	r7, sp, #0
 8022faa:	60f8      	str	r0, [r7, #12]
 8022fac:	60b9      	str	r1, [r7, #8]
 8022fae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8022fb0:	2003      	movs	r0, #3
 8022fb2:	f7fe fdb9 	bl	8021b28 <memp_malloc>
 8022fb6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8022fb8:	693b      	ldr	r3, [r7, #16]
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	d109      	bne.n	8022fd2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8022fbe:	693b      	ldr	r3, [r7, #16]
 8022fc0:	2b00      	cmp	r3, #0
 8022fc2:	d151      	bne.n	8023068 <sys_timeout_abs+0xc4>
 8022fc4:	4b2a      	ldr	r3, [pc, #168]	; (8023070 <sys_timeout_abs+0xcc>)
 8022fc6:	22be      	movs	r2, #190	; 0xbe
 8022fc8:	492a      	ldr	r1, [pc, #168]	; (8023074 <sys_timeout_abs+0xd0>)
 8022fca:	482b      	ldr	r0, [pc, #172]	; (8023078 <sys_timeout_abs+0xd4>)
 8022fcc:	f003 fa64 	bl	8026498 <iprintf>
    return;
 8022fd0:	e04a      	b.n	8023068 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8022fd2:	693b      	ldr	r3, [r7, #16]
 8022fd4:	2200      	movs	r2, #0
 8022fd6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8022fd8:	693b      	ldr	r3, [r7, #16]
 8022fda:	68ba      	ldr	r2, [r7, #8]
 8022fdc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8022fde:	693b      	ldr	r3, [r7, #16]
 8022fe0:	687a      	ldr	r2, [r7, #4]
 8022fe2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8022fe4:	693b      	ldr	r3, [r7, #16]
 8022fe6:	68fa      	ldr	r2, [r7, #12]
 8022fe8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8022fea:	4b24      	ldr	r3, [pc, #144]	; (802307c <sys_timeout_abs+0xd8>)
 8022fec:	681b      	ldr	r3, [r3, #0]
 8022fee:	2b00      	cmp	r3, #0
 8022ff0:	d103      	bne.n	8022ffa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8022ff2:	4a22      	ldr	r2, [pc, #136]	; (802307c <sys_timeout_abs+0xd8>)
 8022ff4:	693b      	ldr	r3, [r7, #16]
 8022ff6:	6013      	str	r3, [r2, #0]
    return;
 8022ff8:	e037      	b.n	802306a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8022ffa:	693b      	ldr	r3, [r7, #16]
 8022ffc:	685a      	ldr	r2, [r3, #4]
 8022ffe:	4b1f      	ldr	r3, [pc, #124]	; (802307c <sys_timeout_abs+0xd8>)
 8023000:	681b      	ldr	r3, [r3, #0]
 8023002:	685b      	ldr	r3, [r3, #4]
 8023004:	1ad3      	subs	r3, r2, r3
 8023006:	0fdb      	lsrs	r3, r3, #31
 8023008:	f003 0301 	and.w	r3, r3, #1
 802300c:	b2db      	uxtb	r3, r3
 802300e:	2b00      	cmp	r3, #0
 8023010:	d007      	beq.n	8023022 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8023012:	4b1a      	ldr	r3, [pc, #104]	; (802307c <sys_timeout_abs+0xd8>)
 8023014:	681a      	ldr	r2, [r3, #0]
 8023016:	693b      	ldr	r3, [r7, #16]
 8023018:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 802301a:	4a18      	ldr	r2, [pc, #96]	; (802307c <sys_timeout_abs+0xd8>)
 802301c:	693b      	ldr	r3, [r7, #16]
 802301e:	6013      	str	r3, [r2, #0]
 8023020:	e023      	b.n	802306a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8023022:	4b16      	ldr	r3, [pc, #88]	; (802307c <sys_timeout_abs+0xd8>)
 8023024:	681b      	ldr	r3, [r3, #0]
 8023026:	617b      	str	r3, [r7, #20]
 8023028:	e01a      	b.n	8023060 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 802302a:	697b      	ldr	r3, [r7, #20]
 802302c:	681b      	ldr	r3, [r3, #0]
 802302e:	2b00      	cmp	r3, #0
 8023030:	d00b      	beq.n	802304a <sys_timeout_abs+0xa6>
 8023032:	693b      	ldr	r3, [r7, #16]
 8023034:	685a      	ldr	r2, [r3, #4]
 8023036:	697b      	ldr	r3, [r7, #20]
 8023038:	681b      	ldr	r3, [r3, #0]
 802303a:	685b      	ldr	r3, [r3, #4]
 802303c:	1ad3      	subs	r3, r2, r3
 802303e:	0fdb      	lsrs	r3, r3, #31
 8023040:	f003 0301 	and.w	r3, r3, #1
 8023044:	b2db      	uxtb	r3, r3
 8023046:	2b00      	cmp	r3, #0
 8023048:	d007      	beq.n	802305a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 802304a:	697b      	ldr	r3, [r7, #20]
 802304c:	681a      	ldr	r2, [r3, #0]
 802304e:	693b      	ldr	r3, [r7, #16]
 8023050:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8023052:	697b      	ldr	r3, [r7, #20]
 8023054:	693a      	ldr	r2, [r7, #16]
 8023056:	601a      	str	r2, [r3, #0]
        break;
 8023058:	e007      	b.n	802306a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 802305a:	697b      	ldr	r3, [r7, #20]
 802305c:	681b      	ldr	r3, [r3, #0]
 802305e:	617b      	str	r3, [r7, #20]
 8023060:	697b      	ldr	r3, [r7, #20]
 8023062:	2b00      	cmp	r3, #0
 8023064:	d1e1      	bne.n	802302a <sys_timeout_abs+0x86>
 8023066:	e000      	b.n	802306a <sys_timeout_abs+0xc6>
    return;
 8023068:	bf00      	nop
      }
    }
  }
}
 802306a:	3718      	adds	r7, #24
 802306c:	46bd      	mov	sp, r7
 802306e:	bd80      	pop	{r7, pc}
 8023070:	0802c940 	.word	0x0802c940
 8023074:	0802c9b0 	.word	0x0802c9b0
 8023078:	0802c9f0 	.word	0x0802c9f0
 802307c:	20015d88 	.word	0x20015d88

08023080 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8023080:	b580      	push	{r7, lr}
 8023082:	b086      	sub	sp, #24
 8023084:	af00      	add	r7, sp, #0
 8023086:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8023088:	687b      	ldr	r3, [r7, #4]
 802308a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 802308c:	697b      	ldr	r3, [r7, #20]
 802308e:	685b      	ldr	r3, [r3, #4]
 8023090:	4798      	blx	r3

  now = sys_now();
 8023092:	f7fd fed9 	bl	8020e48 <sys_now>
 8023096:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8023098:	697b      	ldr	r3, [r7, #20]
 802309a:	681a      	ldr	r2, [r3, #0]
 802309c:	4b0f      	ldr	r3, [pc, #60]	; (80230dc <lwip_cyclic_timer+0x5c>)
 802309e:	681b      	ldr	r3, [r3, #0]
 80230a0:	4413      	add	r3, r2
 80230a2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80230a4:	68fa      	ldr	r2, [r7, #12]
 80230a6:	693b      	ldr	r3, [r7, #16]
 80230a8:	1ad3      	subs	r3, r2, r3
 80230aa:	0fdb      	lsrs	r3, r3, #31
 80230ac:	f003 0301 	and.w	r3, r3, #1
 80230b0:	b2db      	uxtb	r3, r3
 80230b2:	2b00      	cmp	r3, #0
 80230b4:	d009      	beq.n	80230ca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80230b6:	697b      	ldr	r3, [r7, #20]
 80230b8:	681a      	ldr	r2, [r3, #0]
 80230ba:	693b      	ldr	r3, [r7, #16]
 80230bc:	4413      	add	r3, r2
 80230be:	687a      	ldr	r2, [r7, #4]
 80230c0:	4907      	ldr	r1, [pc, #28]	; (80230e0 <lwip_cyclic_timer+0x60>)
 80230c2:	4618      	mov	r0, r3
 80230c4:	f7ff ff6e 	bl	8022fa4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80230c8:	e004      	b.n	80230d4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80230ca:	687a      	ldr	r2, [r7, #4]
 80230cc:	4904      	ldr	r1, [pc, #16]	; (80230e0 <lwip_cyclic_timer+0x60>)
 80230ce:	68f8      	ldr	r0, [r7, #12]
 80230d0:	f7ff ff68 	bl	8022fa4 <sys_timeout_abs>
}
 80230d4:	bf00      	nop
 80230d6:	3718      	adds	r7, #24
 80230d8:	46bd      	mov	sp, r7
 80230da:	bd80      	pop	{r7, pc}
 80230dc:	20015d8c 	.word	0x20015d8c
 80230e0:	08023081 	.word	0x08023081

080230e4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80230e4:	b580      	push	{r7, lr}
 80230e6:	b082      	sub	sp, #8
 80230e8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80230ea:	2300      	movs	r3, #0
 80230ec:	607b      	str	r3, [r7, #4]
 80230ee:	e00e      	b.n	802310e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80230f0:	4a0b      	ldr	r2, [pc, #44]	; (8023120 <sys_timeouts_init+0x3c>)
 80230f2:	687b      	ldr	r3, [r7, #4]
 80230f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	00db      	lsls	r3, r3, #3
 80230fc:	4a08      	ldr	r2, [pc, #32]	; (8023120 <sys_timeouts_init+0x3c>)
 80230fe:	4413      	add	r3, r2
 8023100:	461a      	mov	r2, r3
 8023102:	4908      	ldr	r1, [pc, #32]	; (8023124 <sys_timeouts_init+0x40>)
 8023104:	f000 f810 	bl	8023128 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8023108:	687b      	ldr	r3, [r7, #4]
 802310a:	3301      	adds	r3, #1
 802310c:	607b      	str	r3, [r7, #4]
 802310e:	687b      	ldr	r3, [r7, #4]
 8023110:	2b01      	cmp	r3, #1
 8023112:	d9ed      	bls.n	80230f0 <sys_timeouts_init+0xc>
  }
}
 8023114:	bf00      	nop
 8023116:	bf00      	nop
 8023118:	3708      	adds	r7, #8
 802311a:	46bd      	mov	sp, r7
 802311c:	bd80      	pop	{r7, pc}
 802311e:	bf00      	nop
 8023120:	0802da90 	.word	0x0802da90
 8023124:	08023081 	.word	0x08023081

08023128 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8023128:	b580      	push	{r7, lr}
 802312a:	b086      	sub	sp, #24
 802312c:	af00      	add	r7, sp, #0
 802312e:	60f8      	str	r0, [r7, #12]
 8023130:	60b9      	str	r1, [r7, #8]
 8023132:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8023134:	68fb      	ldr	r3, [r7, #12]
 8023136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802313a:	d306      	bcc.n	802314a <sys_timeout+0x22>
 802313c:	4b0a      	ldr	r3, [pc, #40]	; (8023168 <sys_timeout+0x40>)
 802313e:	f240 1229 	movw	r2, #297	; 0x129
 8023142:	490a      	ldr	r1, [pc, #40]	; (802316c <sys_timeout+0x44>)
 8023144:	480a      	ldr	r0, [pc, #40]	; (8023170 <sys_timeout+0x48>)
 8023146:	f003 f9a7 	bl	8026498 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 802314a:	f7fd fe7d 	bl	8020e48 <sys_now>
 802314e:	4602      	mov	r2, r0
 8023150:	68fb      	ldr	r3, [r7, #12]
 8023152:	4413      	add	r3, r2
 8023154:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8023156:	687a      	ldr	r2, [r7, #4]
 8023158:	68b9      	ldr	r1, [r7, #8]
 802315a:	6978      	ldr	r0, [r7, #20]
 802315c:	f7ff ff22 	bl	8022fa4 <sys_timeout_abs>
#endif
}
 8023160:	bf00      	nop
 8023162:	3718      	adds	r7, #24
 8023164:	46bd      	mov	sp, r7
 8023166:	bd80      	pop	{r7, pc}
 8023168:	0802c940 	.word	0x0802c940
 802316c:	0802ca18 	.word	0x0802ca18
 8023170:	0802c9f0 	.word	0x0802c9f0

08023174 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8023174:	b580      	push	{r7, lr}
 8023176:	b084      	sub	sp, #16
 8023178:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 802317a:	f7fd fe65 	bl	8020e48 <sys_now>
 802317e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8023180:	4b17      	ldr	r3, [pc, #92]	; (80231e0 <sys_check_timeouts+0x6c>)
 8023182:	681b      	ldr	r3, [r3, #0]
 8023184:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8023186:	68bb      	ldr	r3, [r7, #8]
 8023188:	2b00      	cmp	r3, #0
 802318a:	d022      	beq.n	80231d2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 802318c:	68bb      	ldr	r3, [r7, #8]
 802318e:	685b      	ldr	r3, [r3, #4]
 8023190:	68fa      	ldr	r2, [r7, #12]
 8023192:	1ad3      	subs	r3, r2, r3
 8023194:	0fdb      	lsrs	r3, r3, #31
 8023196:	f003 0301 	and.w	r3, r3, #1
 802319a:	b2db      	uxtb	r3, r3
 802319c:	2b00      	cmp	r3, #0
 802319e:	d11a      	bne.n	80231d6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80231a0:	68bb      	ldr	r3, [r7, #8]
 80231a2:	681b      	ldr	r3, [r3, #0]
 80231a4:	4a0e      	ldr	r2, [pc, #56]	; (80231e0 <sys_check_timeouts+0x6c>)
 80231a6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80231a8:	68bb      	ldr	r3, [r7, #8]
 80231aa:	689b      	ldr	r3, [r3, #8]
 80231ac:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80231ae:	68bb      	ldr	r3, [r7, #8]
 80231b0:	68db      	ldr	r3, [r3, #12]
 80231b2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80231b4:	68bb      	ldr	r3, [r7, #8]
 80231b6:	685b      	ldr	r3, [r3, #4]
 80231b8:	4a0a      	ldr	r2, [pc, #40]	; (80231e4 <sys_check_timeouts+0x70>)
 80231ba:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80231bc:	68b9      	ldr	r1, [r7, #8]
 80231be:	2003      	movs	r0, #3
 80231c0:	f7fe fd22 	bl	8021c08 <memp_free>
    if (handler != NULL) {
 80231c4:	687b      	ldr	r3, [r7, #4]
 80231c6:	2b00      	cmp	r3, #0
 80231c8:	d0da      	beq.n	8023180 <sys_check_timeouts+0xc>
      handler(arg);
 80231ca:	687b      	ldr	r3, [r7, #4]
 80231cc:	6838      	ldr	r0, [r7, #0]
 80231ce:	4798      	blx	r3
  do {
 80231d0:	e7d6      	b.n	8023180 <sys_check_timeouts+0xc>
      return;
 80231d2:	bf00      	nop
 80231d4:	e000      	b.n	80231d8 <sys_check_timeouts+0x64>
      return;
 80231d6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80231d8:	3710      	adds	r7, #16
 80231da:	46bd      	mov	sp, r7
 80231dc:	bd80      	pop	{r7, pc}
 80231de:	bf00      	nop
 80231e0:	20015d88 	.word	0x20015d88
 80231e4:	20015d8c 	.word	0x20015d8c

080231e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80231e8:	b580      	push	{r7, lr}
 80231ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80231ec:	f003 f9f8 	bl	80265e0 <rand>
 80231f0:	4603      	mov	r3, r0
 80231f2:	b29b      	uxth	r3, r3
 80231f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80231f8:	b29b      	uxth	r3, r3
 80231fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80231fe:	b29a      	uxth	r2, r3
 8023200:	4b01      	ldr	r3, [pc, #4]	; (8023208 <udp_init+0x20>)
 8023202:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8023204:	bf00      	nop
 8023206:	bd80      	pop	{r7, pc}
 8023208:	2000033c 	.word	0x2000033c

0802320c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 802320c:	b480      	push	{r7}
 802320e:	b083      	sub	sp, #12
 8023210:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8023212:	2300      	movs	r3, #0
 8023214:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8023216:	4b17      	ldr	r3, [pc, #92]	; (8023274 <udp_new_port+0x68>)
 8023218:	881b      	ldrh	r3, [r3, #0]
 802321a:	1c5a      	adds	r2, r3, #1
 802321c:	b291      	uxth	r1, r2
 802321e:	4a15      	ldr	r2, [pc, #84]	; (8023274 <udp_new_port+0x68>)
 8023220:	8011      	strh	r1, [r2, #0]
 8023222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023226:	4293      	cmp	r3, r2
 8023228:	d103      	bne.n	8023232 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 802322a:	4b12      	ldr	r3, [pc, #72]	; (8023274 <udp_new_port+0x68>)
 802322c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8023230:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023232:	4b11      	ldr	r3, [pc, #68]	; (8023278 <udp_new_port+0x6c>)
 8023234:	681b      	ldr	r3, [r3, #0]
 8023236:	603b      	str	r3, [r7, #0]
 8023238:	e011      	b.n	802325e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 802323a:	683b      	ldr	r3, [r7, #0]
 802323c:	8a5a      	ldrh	r2, [r3, #18]
 802323e:	4b0d      	ldr	r3, [pc, #52]	; (8023274 <udp_new_port+0x68>)
 8023240:	881b      	ldrh	r3, [r3, #0]
 8023242:	429a      	cmp	r2, r3
 8023244:	d108      	bne.n	8023258 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8023246:	88fb      	ldrh	r3, [r7, #6]
 8023248:	3301      	adds	r3, #1
 802324a:	80fb      	strh	r3, [r7, #6]
 802324c:	88fb      	ldrh	r3, [r7, #6]
 802324e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8023252:	d3e0      	bcc.n	8023216 <udp_new_port+0xa>
        return 0;
 8023254:	2300      	movs	r3, #0
 8023256:	e007      	b.n	8023268 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023258:	683b      	ldr	r3, [r7, #0]
 802325a:	68db      	ldr	r3, [r3, #12]
 802325c:	603b      	str	r3, [r7, #0]
 802325e:	683b      	ldr	r3, [r7, #0]
 8023260:	2b00      	cmp	r3, #0
 8023262:	d1ea      	bne.n	802323a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8023264:	4b03      	ldr	r3, [pc, #12]	; (8023274 <udp_new_port+0x68>)
 8023266:	881b      	ldrh	r3, [r3, #0]
}
 8023268:	4618      	mov	r0, r3
 802326a:	370c      	adds	r7, #12
 802326c:	46bd      	mov	sp, r7
 802326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023272:	4770      	bx	lr
 8023274:	2000033c 	.word	0x2000033c
 8023278:	20015d90 	.word	0x20015d90

0802327c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 802327c:	b580      	push	{r7, lr}
 802327e:	b084      	sub	sp, #16
 8023280:	af00      	add	r7, sp, #0
 8023282:	60f8      	str	r0, [r7, #12]
 8023284:	60b9      	str	r1, [r7, #8]
 8023286:	4613      	mov	r3, r2
 8023288:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 802328a:	68fb      	ldr	r3, [r7, #12]
 802328c:	2b00      	cmp	r3, #0
 802328e:	d105      	bne.n	802329c <udp_input_local_match+0x20>
 8023290:	4b27      	ldr	r3, [pc, #156]	; (8023330 <udp_input_local_match+0xb4>)
 8023292:	2287      	movs	r2, #135	; 0x87
 8023294:	4927      	ldr	r1, [pc, #156]	; (8023334 <udp_input_local_match+0xb8>)
 8023296:	4828      	ldr	r0, [pc, #160]	; (8023338 <udp_input_local_match+0xbc>)
 8023298:	f003 f8fe 	bl	8026498 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 802329c:	68bb      	ldr	r3, [r7, #8]
 802329e:	2b00      	cmp	r3, #0
 80232a0:	d105      	bne.n	80232ae <udp_input_local_match+0x32>
 80232a2:	4b23      	ldr	r3, [pc, #140]	; (8023330 <udp_input_local_match+0xb4>)
 80232a4:	2288      	movs	r2, #136	; 0x88
 80232a6:	4925      	ldr	r1, [pc, #148]	; (802333c <udp_input_local_match+0xc0>)
 80232a8:	4823      	ldr	r0, [pc, #140]	; (8023338 <udp_input_local_match+0xbc>)
 80232aa:	f003 f8f5 	bl	8026498 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80232ae:	68fb      	ldr	r3, [r7, #12]
 80232b0:	7a1b      	ldrb	r3, [r3, #8]
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	d00b      	beq.n	80232ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80232b6:	68fb      	ldr	r3, [r7, #12]
 80232b8:	7a1a      	ldrb	r2, [r3, #8]
 80232ba:	4b21      	ldr	r3, [pc, #132]	; (8023340 <udp_input_local_match+0xc4>)
 80232bc:	685b      	ldr	r3, [r3, #4]
 80232be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80232c2:	3301      	adds	r3, #1
 80232c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80232c6:	429a      	cmp	r2, r3
 80232c8:	d001      	beq.n	80232ce <udp_input_local_match+0x52>
    return 0;
 80232ca:	2300      	movs	r3, #0
 80232cc:	e02b      	b.n	8023326 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80232ce:	79fb      	ldrb	r3, [r7, #7]
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d018      	beq.n	8023306 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80232d4:	68fb      	ldr	r3, [r7, #12]
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	d013      	beq.n	8023302 <udp_input_local_match+0x86>
 80232da:	68fb      	ldr	r3, [r7, #12]
 80232dc:	681b      	ldr	r3, [r3, #0]
 80232de:	2b00      	cmp	r3, #0
 80232e0:	d00f      	beq.n	8023302 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80232e2:	4b17      	ldr	r3, [pc, #92]	; (8023340 <udp_input_local_match+0xc4>)
 80232e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80232e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80232ea:	d00a      	beq.n	8023302 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80232ec:	68fb      	ldr	r3, [r7, #12]
 80232ee:	681a      	ldr	r2, [r3, #0]
 80232f0:	4b13      	ldr	r3, [pc, #76]	; (8023340 <udp_input_local_match+0xc4>)
 80232f2:	695b      	ldr	r3, [r3, #20]
 80232f4:	405a      	eors	r2, r3
 80232f6:	68bb      	ldr	r3, [r7, #8]
 80232f8:	3308      	adds	r3, #8
 80232fa:	681b      	ldr	r3, [r3, #0]
 80232fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80232fe:	2b00      	cmp	r3, #0
 8023300:	d110      	bne.n	8023324 <udp_input_local_match+0xa8>
          return 1;
 8023302:	2301      	movs	r3, #1
 8023304:	e00f      	b.n	8023326 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8023306:	68fb      	ldr	r3, [r7, #12]
 8023308:	2b00      	cmp	r3, #0
 802330a:	d009      	beq.n	8023320 <udp_input_local_match+0xa4>
 802330c:	68fb      	ldr	r3, [r7, #12]
 802330e:	681b      	ldr	r3, [r3, #0]
 8023310:	2b00      	cmp	r3, #0
 8023312:	d005      	beq.n	8023320 <udp_input_local_match+0xa4>
 8023314:	68fb      	ldr	r3, [r7, #12]
 8023316:	681a      	ldr	r2, [r3, #0]
 8023318:	4b09      	ldr	r3, [pc, #36]	; (8023340 <udp_input_local_match+0xc4>)
 802331a:	695b      	ldr	r3, [r3, #20]
 802331c:	429a      	cmp	r2, r3
 802331e:	d101      	bne.n	8023324 <udp_input_local_match+0xa8>
        return 1;
 8023320:	2301      	movs	r3, #1
 8023322:	e000      	b.n	8023326 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8023324:	2300      	movs	r3, #0
}
 8023326:	4618      	mov	r0, r3
 8023328:	3710      	adds	r7, #16
 802332a:	46bd      	mov	sp, r7
 802332c:	bd80      	pop	{r7, pc}
 802332e:	bf00      	nop
 8023330:	0802ca64 	.word	0x0802ca64
 8023334:	0802cad0 	.word	0x0802cad0
 8023338:	0802caf4 	.word	0x0802caf4
 802333c:	0802cb1c 	.word	0x0802cb1c
 8023340:	2001272c 	.word	0x2001272c

08023344 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8023344:	b590      	push	{r4, r7, lr}
 8023346:	b08d      	sub	sp, #52	; 0x34
 8023348:	af02      	add	r7, sp, #8
 802334a:	6078      	str	r0, [r7, #4]
 802334c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 802334e:	2300      	movs	r3, #0
 8023350:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8023352:	687b      	ldr	r3, [r7, #4]
 8023354:	2b00      	cmp	r3, #0
 8023356:	d105      	bne.n	8023364 <udp_input+0x20>
 8023358:	4b7c      	ldr	r3, [pc, #496]	; (802354c <udp_input+0x208>)
 802335a:	22cf      	movs	r2, #207	; 0xcf
 802335c:	497c      	ldr	r1, [pc, #496]	; (8023550 <udp_input+0x20c>)
 802335e:	487d      	ldr	r0, [pc, #500]	; (8023554 <udp_input+0x210>)
 8023360:	f003 f89a 	bl	8026498 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8023364:	683b      	ldr	r3, [r7, #0]
 8023366:	2b00      	cmp	r3, #0
 8023368:	d105      	bne.n	8023376 <udp_input+0x32>
 802336a:	4b78      	ldr	r3, [pc, #480]	; (802354c <udp_input+0x208>)
 802336c:	22d0      	movs	r2, #208	; 0xd0
 802336e:	497a      	ldr	r1, [pc, #488]	; (8023558 <udp_input+0x214>)
 8023370:	4878      	ldr	r0, [pc, #480]	; (8023554 <udp_input+0x210>)
 8023372:	f003 f891 	bl	8026498 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	895b      	ldrh	r3, [r3, #10]
 802337a:	2b07      	cmp	r3, #7
 802337c:	d803      	bhi.n	8023386 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 802337e:	6878      	ldr	r0, [r7, #4]
 8023380:	f7ff fb52 	bl	8022a28 <pbuf_free>
    goto end;
 8023384:	e0de      	b.n	8023544 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8023386:	687b      	ldr	r3, [r7, #4]
 8023388:	685b      	ldr	r3, [r3, #4]
 802338a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 802338c:	4b73      	ldr	r3, [pc, #460]	; (802355c <udp_input+0x218>)
 802338e:	695b      	ldr	r3, [r3, #20]
 8023390:	4a72      	ldr	r2, [pc, #456]	; (802355c <udp_input+0x218>)
 8023392:	6812      	ldr	r2, [r2, #0]
 8023394:	4611      	mov	r1, r2
 8023396:	4618      	mov	r0, r3
 8023398:	f001 ff44 	bl	8025224 <ip4_addr_isbroadcast_u32>
 802339c:	4603      	mov	r3, r0
 802339e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80233a0:	697b      	ldr	r3, [r7, #20]
 80233a2:	881b      	ldrh	r3, [r3, #0]
 80233a4:	b29b      	uxth	r3, r3
 80233a6:	4618      	mov	r0, r3
 80233a8:	f7fd ff62 	bl	8021270 <lwip_htons>
 80233ac:	4603      	mov	r3, r0
 80233ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80233b0:	697b      	ldr	r3, [r7, #20]
 80233b2:	885b      	ldrh	r3, [r3, #2]
 80233b4:	b29b      	uxth	r3, r3
 80233b6:	4618      	mov	r0, r3
 80233b8:	f7fd ff5a 	bl	8021270 <lwip_htons>
 80233bc:	4603      	mov	r3, r0
 80233be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80233c0:	2300      	movs	r3, #0
 80233c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80233c4:	2300      	movs	r3, #0
 80233c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80233c8:	2300      	movs	r3, #0
 80233ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80233cc:	4b64      	ldr	r3, [pc, #400]	; (8023560 <udp_input+0x21c>)
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	627b      	str	r3, [r7, #36]	; 0x24
 80233d2:	e054      	b.n	802347e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80233d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233d6:	8a5b      	ldrh	r3, [r3, #18]
 80233d8:	89fa      	ldrh	r2, [r7, #14]
 80233da:	429a      	cmp	r2, r3
 80233dc:	d14a      	bne.n	8023474 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80233de:	7cfb      	ldrb	r3, [r7, #19]
 80233e0:	461a      	mov	r2, r3
 80233e2:	6839      	ldr	r1, [r7, #0]
 80233e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80233e6:	f7ff ff49 	bl	802327c <udp_input_local_match>
 80233ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80233ec:	2b00      	cmp	r3, #0
 80233ee:	d041      	beq.n	8023474 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80233f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80233f2:	7c1b      	ldrb	r3, [r3, #16]
 80233f4:	f003 0304 	and.w	r3, r3, #4
 80233f8:	2b00      	cmp	r3, #0
 80233fa:	d11d      	bne.n	8023438 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80233fc:	69fb      	ldr	r3, [r7, #28]
 80233fe:	2b00      	cmp	r3, #0
 8023400:	d102      	bne.n	8023408 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8023402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023404:	61fb      	str	r3, [r7, #28]
 8023406:	e017      	b.n	8023438 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8023408:	7cfb      	ldrb	r3, [r7, #19]
 802340a:	2b00      	cmp	r3, #0
 802340c:	d014      	beq.n	8023438 <udp_input+0xf4>
 802340e:	4b53      	ldr	r3, [pc, #332]	; (802355c <udp_input+0x218>)
 8023410:	695b      	ldr	r3, [r3, #20]
 8023412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023416:	d10f      	bne.n	8023438 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8023418:	69fb      	ldr	r3, [r7, #28]
 802341a:	681a      	ldr	r2, [r3, #0]
 802341c:	683b      	ldr	r3, [r7, #0]
 802341e:	3304      	adds	r3, #4
 8023420:	681b      	ldr	r3, [r3, #0]
 8023422:	429a      	cmp	r2, r3
 8023424:	d008      	beq.n	8023438 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8023426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023428:	681a      	ldr	r2, [r3, #0]
 802342a:	683b      	ldr	r3, [r7, #0]
 802342c:	3304      	adds	r3, #4
 802342e:	681b      	ldr	r3, [r3, #0]
 8023430:	429a      	cmp	r2, r3
 8023432:	d101      	bne.n	8023438 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8023434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023436:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8023438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802343a:	8a9b      	ldrh	r3, [r3, #20]
 802343c:	8a3a      	ldrh	r2, [r7, #16]
 802343e:	429a      	cmp	r2, r3
 8023440:	d118      	bne.n	8023474 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8023442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023444:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8023446:	2b00      	cmp	r3, #0
 8023448:	d005      	beq.n	8023456 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 802344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802344c:	685a      	ldr	r2, [r3, #4]
 802344e:	4b43      	ldr	r3, [pc, #268]	; (802355c <udp_input+0x218>)
 8023450:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8023452:	429a      	cmp	r2, r3
 8023454:	d10e      	bne.n	8023474 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8023456:	6a3b      	ldr	r3, [r7, #32]
 8023458:	2b00      	cmp	r3, #0
 802345a:	d014      	beq.n	8023486 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 802345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802345e:	68da      	ldr	r2, [r3, #12]
 8023460:	6a3b      	ldr	r3, [r7, #32]
 8023462:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8023464:	4b3e      	ldr	r3, [pc, #248]	; (8023560 <udp_input+0x21c>)
 8023466:	681a      	ldr	r2, [r3, #0]
 8023468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802346a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 802346c:	4a3c      	ldr	r2, [pc, #240]	; (8023560 <udp_input+0x21c>)
 802346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023470:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8023472:	e008      	b.n	8023486 <udp_input+0x142>
      }
    }

    prev = pcb;
 8023474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023476:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802347a:	68db      	ldr	r3, [r3, #12]
 802347c:	627b      	str	r3, [r7, #36]	; 0x24
 802347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023480:	2b00      	cmp	r3, #0
 8023482:	d1a7      	bne.n	80233d4 <udp_input+0x90>
 8023484:	e000      	b.n	8023488 <udp_input+0x144>
        break;
 8023486:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8023488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802348a:	2b00      	cmp	r3, #0
 802348c:	d101      	bne.n	8023492 <udp_input+0x14e>
    pcb = uncon_pcb;
 802348e:	69fb      	ldr	r3, [r7, #28]
 8023490:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8023492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023494:	2b00      	cmp	r3, #0
 8023496:	d002      	beq.n	802349e <udp_input+0x15a>
    for_us = 1;
 8023498:	2301      	movs	r3, #1
 802349a:	76fb      	strb	r3, [r7, #27]
 802349c:	e00a      	b.n	80234b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 802349e:	683b      	ldr	r3, [r7, #0]
 80234a0:	3304      	adds	r3, #4
 80234a2:	681a      	ldr	r2, [r3, #0]
 80234a4:	4b2d      	ldr	r3, [pc, #180]	; (802355c <udp_input+0x218>)
 80234a6:	695b      	ldr	r3, [r3, #20]
 80234a8:	429a      	cmp	r2, r3
 80234aa:	bf0c      	ite	eq
 80234ac:	2301      	moveq	r3, #1
 80234ae:	2300      	movne	r3, #0
 80234b0:	b2db      	uxtb	r3, r3
 80234b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80234b4:	7efb      	ldrb	r3, [r7, #27]
 80234b6:	2b00      	cmp	r3, #0
 80234b8:	d041      	beq.n	802353e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80234ba:	2108      	movs	r1, #8
 80234bc:	6878      	ldr	r0, [r7, #4]
 80234be:	f7ff fa2d 	bl	802291c <pbuf_remove_header>
 80234c2:	4603      	mov	r3, r0
 80234c4:	2b00      	cmp	r3, #0
 80234c6:	d00a      	beq.n	80234de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80234c8:	4b20      	ldr	r3, [pc, #128]	; (802354c <udp_input+0x208>)
 80234ca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80234ce:	4925      	ldr	r1, [pc, #148]	; (8023564 <udp_input+0x220>)
 80234d0:	4820      	ldr	r0, [pc, #128]	; (8023554 <udp_input+0x210>)
 80234d2:	f002 ffe1 	bl	8026498 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80234d6:	6878      	ldr	r0, [r7, #4]
 80234d8:	f7ff faa6 	bl	8022a28 <pbuf_free>
      goto end;
 80234dc:	e032      	b.n	8023544 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80234de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d012      	beq.n	802350a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80234e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80234e6:	699b      	ldr	r3, [r3, #24]
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d00a      	beq.n	8023502 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80234ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80234ee:	699c      	ldr	r4, [r3, #24]
 80234f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80234f2:	69d8      	ldr	r0, [r3, #28]
 80234f4:	8a3b      	ldrh	r3, [r7, #16]
 80234f6:	9300      	str	r3, [sp, #0]
 80234f8:	4b1b      	ldr	r3, [pc, #108]	; (8023568 <udp_input+0x224>)
 80234fa:	687a      	ldr	r2, [r7, #4]
 80234fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80234fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8023500:	e021      	b.n	8023546 <udp_input+0x202>
        pbuf_free(p);
 8023502:	6878      	ldr	r0, [r7, #4]
 8023504:	f7ff fa90 	bl	8022a28 <pbuf_free>
        goto end;
 8023508:	e01c      	b.n	8023544 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 802350a:	7cfb      	ldrb	r3, [r7, #19]
 802350c:	2b00      	cmp	r3, #0
 802350e:	d112      	bne.n	8023536 <udp_input+0x1f2>
 8023510:	4b12      	ldr	r3, [pc, #72]	; (802355c <udp_input+0x218>)
 8023512:	695b      	ldr	r3, [r3, #20]
 8023514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023518:	2be0      	cmp	r3, #224	; 0xe0
 802351a:	d00c      	beq.n	8023536 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 802351c:	4b0f      	ldr	r3, [pc, #60]	; (802355c <udp_input+0x218>)
 802351e:	899b      	ldrh	r3, [r3, #12]
 8023520:	3308      	adds	r3, #8
 8023522:	b29b      	uxth	r3, r3
 8023524:	b21b      	sxth	r3, r3
 8023526:	4619      	mov	r1, r3
 8023528:	6878      	ldr	r0, [r7, #4]
 802352a:	f7ff fa6a 	bl	8022a02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 802352e:	2103      	movs	r1, #3
 8023530:	6878      	ldr	r0, [r7, #4]
 8023532:	f001 fb53 	bl	8024bdc <icmp_dest_unreach>
      pbuf_free(p);
 8023536:	6878      	ldr	r0, [r7, #4]
 8023538:	f7ff fa76 	bl	8022a28 <pbuf_free>
  return;
 802353c:	e003      	b.n	8023546 <udp_input+0x202>
    pbuf_free(p);
 802353e:	6878      	ldr	r0, [r7, #4]
 8023540:	f7ff fa72 	bl	8022a28 <pbuf_free>
  return;
 8023544:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8023546:	372c      	adds	r7, #44	; 0x2c
 8023548:	46bd      	mov	sp, r7
 802354a:	bd90      	pop	{r4, r7, pc}
 802354c:	0802ca64 	.word	0x0802ca64
 8023550:	0802cb44 	.word	0x0802cb44
 8023554:	0802caf4 	.word	0x0802caf4
 8023558:	0802cb5c 	.word	0x0802cb5c
 802355c:	2001272c 	.word	0x2001272c
 8023560:	20015d90 	.word	0x20015d90
 8023564:	0802cb78 	.word	0x0802cb78
 8023568:	2001273c 	.word	0x2001273c

0802356c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 802356c:	b580      	push	{r7, lr}
 802356e:	b088      	sub	sp, #32
 8023570:	af02      	add	r7, sp, #8
 8023572:	60f8      	str	r0, [r7, #12]
 8023574:	60b9      	str	r1, [r7, #8]
 8023576:	607a      	str	r2, [r7, #4]
 8023578:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802357a:	68fb      	ldr	r3, [r7, #12]
 802357c:	2b00      	cmp	r3, #0
 802357e:	d109      	bne.n	8023594 <udp_sendto+0x28>
 8023580:	4b23      	ldr	r3, [pc, #140]	; (8023610 <udp_sendto+0xa4>)
 8023582:	f44f 7206 	mov.w	r2, #536	; 0x218
 8023586:	4923      	ldr	r1, [pc, #140]	; (8023614 <udp_sendto+0xa8>)
 8023588:	4823      	ldr	r0, [pc, #140]	; (8023618 <udp_sendto+0xac>)
 802358a:	f002 ff85 	bl	8026498 <iprintf>
 802358e:	f06f 030f 	mvn.w	r3, #15
 8023592:	e038      	b.n	8023606 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8023594:	68bb      	ldr	r3, [r7, #8]
 8023596:	2b00      	cmp	r3, #0
 8023598:	d109      	bne.n	80235ae <udp_sendto+0x42>
 802359a:	4b1d      	ldr	r3, [pc, #116]	; (8023610 <udp_sendto+0xa4>)
 802359c:	f240 2219 	movw	r2, #537	; 0x219
 80235a0:	491e      	ldr	r1, [pc, #120]	; (802361c <udp_sendto+0xb0>)
 80235a2:	481d      	ldr	r0, [pc, #116]	; (8023618 <udp_sendto+0xac>)
 80235a4:	f002 ff78 	bl	8026498 <iprintf>
 80235a8:	f06f 030f 	mvn.w	r3, #15
 80235ac:	e02b      	b.n	8023606 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	d109      	bne.n	80235c8 <udp_sendto+0x5c>
 80235b4:	4b16      	ldr	r3, [pc, #88]	; (8023610 <udp_sendto+0xa4>)
 80235b6:	f240 221a 	movw	r2, #538	; 0x21a
 80235ba:	4919      	ldr	r1, [pc, #100]	; (8023620 <udp_sendto+0xb4>)
 80235bc:	4816      	ldr	r0, [pc, #88]	; (8023618 <udp_sendto+0xac>)
 80235be:	f002 ff6b 	bl	8026498 <iprintf>
 80235c2:	f06f 030f 	mvn.w	r3, #15
 80235c6:	e01e      	b.n	8023606 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80235c8:	68fb      	ldr	r3, [r7, #12]
 80235ca:	7a1b      	ldrb	r3, [r3, #8]
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	d006      	beq.n	80235de <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80235d0:	68fb      	ldr	r3, [r7, #12]
 80235d2:	7a1b      	ldrb	r3, [r3, #8]
 80235d4:	4618      	mov	r0, r3
 80235d6:	f7fe fef5 	bl	80223c4 <netif_get_by_index>
 80235da:	6178      	str	r0, [r7, #20]
 80235dc:	e003      	b.n	80235e6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80235de:	6878      	ldr	r0, [r7, #4]
 80235e0:	f001 fb86 	bl	8024cf0 <ip4_route>
 80235e4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80235e6:	697b      	ldr	r3, [r7, #20]
 80235e8:	2b00      	cmp	r3, #0
 80235ea:	d102      	bne.n	80235f2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80235ec:	f06f 0303 	mvn.w	r3, #3
 80235f0:	e009      	b.n	8023606 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80235f2:	887a      	ldrh	r2, [r7, #2]
 80235f4:	697b      	ldr	r3, [r7, #20]
 80235f6:	9300      	str	r3, [sp, #0]
 80235f8:	4613      	mov	r3, r2
 80235fa:	687a      	ldr	r2, [r7, #4]
 80235fc:	68b9      	ldr	r1, [r7, #8]
 80235fe:	68f8      	ldr	r0, [r7, #12]
 8023600:	f000 f810 	bl	8023624 <udp_sendto_if>
 8023604:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023606:	4618      	mov	r0, r3
 8023608:	3718      	adds	r7, #24
 802360a:	46bd      	mov	sp, r7
 802360c:	bd80      	pop	{r7, pc}
 802360e:	bf00      	nop
 8023610:	0802ca64 	.word	0x0802ca64
 8023614:	0802cbc4 	.word	0x0802cbc4
 8023618:	0802caf4 	.word	0x0802caf4
 802361c:	0802cbdc 	.word	0x0802cbdc
 8023620:	0802cbf8 	.word	0x0802cbf8

08023624 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8023624:	b580      	push	{r7, lr}
 8023626:	b088      	sub	sp, #32
 8023628:	af02      	add	r7, sp, #8
 802362a:	60f8      	str	r0, [r7, #12]
 802362c:	60b9      	str	r1, [r7, #8]
 802362e:	607a      	str	r2, [r7, #4]
 8023630:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8023632:	68fb      	ldr	r3, [r7, #12]
 8023634:	2b00      	cmp	r3, #0
 8023636:	d109      	bne.n	802364c <udp_sendto_if+0x28>
 8023638:	4b2e      	ldr	r3, [pc, #184]	; (80236f4 <udp_sendto_if+0xd0>)
 802363a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802363e:	492e      	ldr	r1, [pc, #184]	; (80236f8 <udp_sendto_if+0xd4>)
 8023640:	482e      	ldr	r0, [pc, #184]	; (80236fc <udp_sendto_if+0xd8>)
 8023642:	f002 ff29 	bl	8026498 <iprintf>
 8023646:	f06f 030f 	mvn.w	r3, #15
 802364a:	e04f      	b.n	80236ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802364c:	68bb      	ldr	r3, [r7, #8]
 802364e:	2b00      	cmp	r3, #0
 8023650:	d109      	bne.n	8023666 <udp_sendto_if+0x42>
 8023652:	4b28      	ldr	r3, [pc, #160]	; (80236f4 <udp_sendto_if+0xd0>)
 8023654:	f240 2281 	movw	r2, #641	; 0x281
 8023658:	4929      	ldr	r1, [pc, #164]	; (8023700 <udp_sendto_if+0xdc>)
 802365a:	4828      	ldr	r0, [pc, #160]	; (80236fc <udp_sendto_if+0xd8>)
 802365c:	f002 ff1c 	bl	8026498 <iprintf>
 8023660:	f06f 030f 	mvn.w	r3, #15
 8023664:	e042      	b.n	80236ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	2b00      	cmp	r3, #0
 802366a:	d109      	bne.n	8023680 <udp_sendto_if+0x5c>
 802366c:	4b21      	ldr	r3, [pc, #132]	; (80236f4 <udp_sendto_if+0xd0>)
 802366e:	f240 2282 	movw	r2, #642	; 0x282
 8023672:	4924      	ldr	r1, [pc, #144]	; (8023704 <udp_sendto_if+0xe0>)
 8023674:	4821      	ldr	r0, [pc, #132]	; (80236fc <udp_sendto_if+0xd8>)
 8023676:	f002 ff0f 	bl	8026498 <iprintf>
 802367a:	f06f 030f 	mvn.w	r3, #15
 802367e:	e035      	b.n	80236ec <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8023680:	6a3b      	ldr	r3, [r7, #32]
 8023682:	2b00      	cmp	r3, #0
 8023684:	d109      	bne.n	802369a <udp_sendto_if+0x76>
 8023686:	4b1b      	ldr	r3, [pc, #108]	; (80236f4 <udp_sendto_if+0xd0>)
 8023688:	f240 2283 	movw	r2, #643	; 0x283
 802368c:	491e      	ldr	r1, [pc, #120]	; (8023708 <udp_sendto_if+0xe4>)
 802368e:	481b      	ldr	r0, [pc, #108]	; (80236fc <udp_sendto_if+0xd8>)
 8023690:	f002 ff02 	bl	8026498 <iprintf>
 8023694:	f06f 030f 	mvn.w	r3, #15
 8023698:	e028      	b.n	80236ec <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 802369a:	68fb      	ldr	r3, [r7, #12]
 802369c:	2b00      	cmp	r3, #0
 802369e:	d009      	beq.n	80236b4 <udp_sendto_if+0x90>
 80236a0:	68fb      	ldr	r3, [r7, #12]
 80236a2:	681b      	ldr	r3, [r3, #0]
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	d005      	beq.n	80236b4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80236a8:	68fb      	ldr	r3, [r7, #12]
 80236aa:	681b      	ldr	r3, [r3, #0]
 80236ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80236b0:	2be0      	cmp	r3, #224	; 0xe0
 80236b2:	d103      	bne.n	80236bc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80236b4:	6a3b      	ldr	r3, [r7, #32]
 80236b6:	3304      	adds	r3, #4
 80236b8:	617b      	str	r3, [r7, #20]
 80236ba:	e00b      	b.n	80236d4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80236bc:	68fb      	ldr	r3, [r7, #12]
 80236be:	681a      	ldr	r2, [r3, #0]
 80236c0:	6a3b      	ldr	r3, [r7, #32]
 80236c2:	3304      	adds	r3, #4
 80236c4:	681b      	ldr	r3, [r3, #0]
 80236c6:	429a      	cmp	r2, r3
 80236c8:	d002      	beq.n	80236d0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80236ca:	f06f 0303 	mvn.w	r3, #3
 80236ce:	e00d      	b.n	80236ec <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80236d0:	68fb      	ldr	r3, [r7, #12]
 80236d2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80236d4:	887a      	ldrh	r2, [r7, #2]
 80236d6:	697b      	ldr	r3, [r7, #20]
 80236d8:	9301      	str	r3, [sp, #4]
 80236da:	6a3b      	ldr	r3, [r7, #32]
 80236dc:	9300      	str	r3, [sp, #0]
 80236de:	4613      	mov	r3, r2
 80236e0:	687a      	ldr	r2, [r7, #4]
 80236e2:	68b9      	ldr	r1, [r7, #8]
 80236e4:	68f8      	ldr	r0, [r7, #12]
 80236e6:	f000 f811 	bl	802370c <udp_sendto_if_src>
 80236ea:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80236ec:	4618      	mov	r0, r3
 80236ee:	3718      	adds	r7, #24
 80236f0:	46bd      	mov	sp, r7
 80236f2:	bd80      	pop	{r7, pc}
 80236f4:	0802ca64 	.word	0x0802ca64
 80236f8:	0802cc14 	.word	0x0802cc14
 80236fc:	0802caf4 	.word	0x0802caf4
 8023700:	0802cc30 	.word	0x0802cc30
 8023704:	0802cc4c 	.word	0x0802cc4c
 8023708:	0802cc6c 	.word	0x0802cc6c

0802370c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 802370c:	b580      	push	{r7, lr}
 802370e:	b08c      	sub	sp, #48	; 0x30
 8023710:	af04      	add	r7, sp, #16
 8023712:	60f8      	str	r0, [r7, #12]
 8023714:	60b9      	str	r1, [r7, #8]
 8023716:	607a      	str	r2, [r7, #4]
 8023718:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802371a:	68fb      	ldr	r3, [r7, #12]
 802371c:	2b00      	cmp	r3, #0
 802371e:	d109      	bne.n	8023734 <udp_sendto_if_src+0x28>
 8023720:	4b65      	ldr	r3, [pc, #404]	; (80238b8 <udp_sendto_if_src+0x1ac>)
 8023722:	f240 22d1 	movw	r2, #721	; 0x2d1
 8023726:	4965      	ldr	r1, [pc, #404]	; (80238bc <udp_sendto_if_src+0x1b0>)
 8023728:	4865      	ldr	r0, [pc, #404]	; (80238c0 <udp_sendto_if_src+0x1b4>)
 802372a:	f002 feb5 	bl	8026498 <iprintf>
 802372e:	f06f 030f 	mvn.w	r3, #15
 8023732:	e0bc      	b.n	80238ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8023734:	68bb      	ldr	r3, [r7, #8]
 8023736:	2b00      	cmp	r3, #0
 8023738:	d109      	bne.n	802374e <udp_sendto_if_src+0x42>
 802373a:	4b5f      	ldr	r3, [pc, #380]	; (80238b8 <udp_sendto_if_src+0x1ac>)
 802373c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8023740:	4960      	ldr	r1, [pc, #384]	; (80238c4 <udp_sendto_if_src+0x1b8>)
 8023742:	485f      	ldr	r0, [pc, #380]	; (80238c0 <udp_sendto_if_src+0x1b4>)
 8023744:	f002 fea8 	bl	8026498 <iprintf>
 8023748:	f06f 030f 	mvn.w	r3, #15
 802374c:	e0af      	b.n	80238ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802374e:	687b      	ldr	r3, [r7, #4]
 8023750:	2b00      	cmp	r3, #0
 8023752:	d109      	bne.n	8023768 <udp_sendto_if_src+0x5c>
 8023754:	4b58      	ldr	r3, [pc, #352]	; (80238b8 <udp_sendto_if_src+0x1ac>)
 8023756:	f240 22d3 	movw	r2, #723	; 0x2d3
 802375a:	495b      	ldr	r1, [pc, #364]	; (80238c8 <udp_sendto_if_src+0x1bc>)
 802375c:	4858      	ldr	r0, [pc, #352]	; (80238c0 <udp_sendto_if_src+0x1b4>)
 802375e:	f002 fe9b 	bl	8026498 <iprintf>
 8023762:	f06f 030f 	mvn.w	r3, #15
 8023766:	e0a2      	b.n	80238ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8023768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802376a:	2b00      	cmp	r3, #0
 802376c:	d109      	bne.n	8023782 <udp_sendto_if_src+0x76>
 802376e:	4b52      	ldr	r3, [pc, #328]	; (80238b8 <udp_sendto_if_src+0x1ac>)
 8023770:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8023774:	4955      	ldr	r1, [pc, #340]	; (80238cc <udp_sendto_if_src+0x1c0>)
 8023776:	4852      	ldr	r0, [pc, #328]	; (80238c0 <udp_sendto_if_src+0x1b4>)
 8023778:	f002 fe8e 	bl	8026498 <iprintf>
 802377c:	f06f 030f 	mvn.w	r3, #15
 8023780:	e095      	b.n	80238ae <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8023782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023784:	2b00      	cmp	r3, #0
 8023786:	d109      	bne.n	802379c <udp_sendto_if_src+0x90>
 8023788:	4b4b      	ldr	r3, [pc, #300]	; (80238b8 <udp_sendto_if_src+0x1ac>)
 802378a:	f240 22d5 	movw	r2, #725	; 0x2d5
 802378e:	4950      	ldr	r1, [pc, #320]	; (80238d0 <udp_sendto_if_src+0x1c4>)
 8023790:	484b      	ldr	r0, [pc, #300]	; (80238c0 <udp_sendto_if_src+0x1b4>)
 8023792:	f002 fe81 	bl	8026498 <iprintf>
 8023796:	f06f 030f 	mvn.w	r3, #15
 802379a:	e088      	b.n	80238ae <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 802379c:	68fb      	ldr	r3, [r7, #12]
 802379e:	8a5b      	ldrh	r3, [r3, #18]
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	d10f      	bne.n	80237c4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80237a4:	68f9      	ldr	r1, [r7, #12]
 80237a6:	68fb      	ldr	r3, [r7, #12]
 80237a8:	8a5b      	ldrh	r3, [r3, #18]
 80237aa:	461a      	mov	r2, r3
 80237ac:	68f8      	ldr	r0, [r7, #12]
 80237ae:	f000 f893 	bl	80238d8 <udp_bind>
 80237b2:	4603      	mov	r3, r0
 80237b4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80237b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d002      	beq.n	80237c4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80237be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80237c2:	e074      	b.n	80238ae <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80237c4:	68bb      	ldr	r3, [r7, #8]
 80237c6:	891b      	ldrh	r3, [r3, #8]
 80237c8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80237cc:	4293      	cmp	r3, r2
 80237ce:	d902      	bls.n	80237d6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80237d0:	f04f 33ff 	mov.w	r3, #4294967295
 80237d4:	e06b      	b.n	80238ae <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80237d6:	2108      	movs	r1, #8
 80237d8:	68b8      	ldr	r0, [r7, #8]
 80237da:	f7ff f88f 	bl	80228fc <pbuf_add_header>
 80237de:	4603      	mov	r3, r0
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	d015      	beq.n	8023810 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80237e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80237e8:	2108      	movs	r1, #8
 80237ea:	2022      	movs	r0, #34	; 0x22
 80237ec:	f7fe fe3a 	bl	8022464 <pbuf_alloc>
 80237f0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80237f2:	69fb      	ldr	r3, [r7, #28]
 80237f4:	2b00      	cmp	r3, #0
 80237f6:	d102      	bne.n	80237fe <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80237f8:	f04f 33ff 	mov.w	r3, #4294967295
 80237fc:	e057      	b.n	80238ae <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80237fe:	68bb      	ldr	r3, [r7, #8]
 8023800:	891b      	ldrh	r3, [r3, #8]
 8023802:	2b00      	cmp	r3, #0
 8023804:	d006      	beq.n	8023814 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8023806:	68b9      	ldr	r1, [r7, #8]
 8023808:	69f8      	ldr	r0, [r7, #28]
 802380a:	f7ff fa25 	bl	8022c58 <pbuf_chain>
 802380e:	e001      	b.n	8023814 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8023810:	68bb      	ldr	r3, [r7, #8]
 8023812:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8023814:	69fb      	ldr	r3, [r7, #28]
 8023816:	895b      	ldrh	r3, [r3, #10]
 8023818:	2b07      	cmp	r3, #7
 802381a:	d806      	bhi.n	802382a <udp_sendto_if_src+0x11e>
 802381c:	4b26      	ldr	r3, [pc, #152]	; (80238b8 <udp_sendto_if_src+0x1ac>)
 802381e:	f240 320d 	movw	r2, #781	; 0x30d
 8023822:	492c      	ldr	r1, [pc, #176]	; (80238d4 <udp_sendto_if_src+0x1c8>)
 8023824:	4826      	ldr	r0, [pc, #152]	; (80238c0 <udp_sendto_if_src+0x1b4>)
 8023826:	f002 fe37 	bl	8026498 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 802382a:	69fb      	ldr	r3, [r7, #28]
 802382c:	685b      	ldr	r3, [r3, #4]
 802382e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8023830:	68fb      	ldr	r3, [r7, #12]
 8023832:	8a5b      	ldrh	r3, [r3, #18]
 8023834:	4618      	mov	r0, r3
 8023836:	f7fd fd1b 	bl	8021270 <lwip_htons>
 802383a:	4603      	mov	r3, r0
 802383c:	461a      	mov	r2, r3
 802383e:	697b      	ldr	r3, [r7, #20]
 8023840:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8023842:	887b      	ldrh	r3, [r7, #2]
 8023844:	4618      	mov	r0, r3
 8023846:	f7fd fd13 	bl	8021270 <lwip_htons>
 802384a:	4603      	mov	r3, r0
 802384c:	461a      	mov	r2, r3
 802384e:	697b      	ldr	r3, [r7, #20]
 8023850:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8023852:	697b      	ldr	r3, [r7, #20]
 8023854:	2200      	movs	r2, #0
 8023856:	719a      	strb	r2, [r3, #6]
 8023858:	2200      	movs	r2, #0
 802385a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 802385c:	69fb      	ldr	r3, [r7, #28]
 802385e:	891b      	ldrh	r3, [r3, #8]
 8023860:	4618      	mov	r0, r3
 8023862:	f7fd fd05 	bl	8021270 <lwip_htons>
 8023866:	4603      	mov	r3, r0
 8023868:	461a      	mov	r2, r3
 802386a:	697b      	ldr	r3, [r7, #20]
 802386c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 802386e:	2311      	movs	r3, #17
 8023870:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8023872:	68fb      	ldr	r3, [r7, #12]
 8023874:	7adb      	ldrb	r3, [r3, #11]
 8023876:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8023878:	68fb      	ldr	r3, [r7, #12]
 802387a:	7a9b      	ldrb	r3, [r3, #10]
 802387c:	7cb9      	ldrb	r1, [r7, #18]
 802387e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023880:	9202      	str	r2, [sp, #8]
 8023882:	7cfa      	ldrb	r2, [r7, #19]
 8023884:	9201      	str	r2, [sp, #4]
 8023886:	9300      	str	r3, [sp, #0]
 8023888:	460b      	mov	r3, r1
 802388a:	687a      	ldr	r2, [r7, #4]
 802388c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802388e:	69f8      	ldr	r0, [r7, #28]
 8023890:	f001 fc0c 	bl	80250ac <ip4_output_if_src>
 8023894:	4603      	mov	r3, r0
 8023896:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8023898:	69fa      	ldr	r2, [r7, #28]
 802389a:	68bb      	ldr	r3, [r7, #8]
 802389c:	429a      	cmp	r2, r3
 802389e:	d004      	beq.n	80238aa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80238a0:	69f8      	ldr	r0, [r7, #28]
 80238a2:	f7ff f8c1 	bl	8022a28 <pbuf_free>
    q = NULL;
 80238a6:	2300      	movs	r3, #0
 80238a8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80238aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80238ae:	4618      	mov	r0, r3
 80238b0:	3720      	adds	r7, #32
 80238b2:	46bd      	mov	sp, r7
 80238b4:	bd80      	pop	{r7, pc}
 80238b6:	bf00      	nop
 80238b8:	0802ca64 	.word	0x0802ca64
 80238bc:	0802cc8c 	.word	0x0802cc8c
 80238c0:	0802caf4 	.word	0x0802caf4
 80238c4:	0802ccac 	.word	0x0802ccac
 80238c8:	0802cccc 	.word	0x0802cccc
 80238cc:	0802ccf0 	.word	0x0802ccf0
 80238d0:	0802cd14 	.word	0x0802cd14
 80238d4:	0802cd38 	.word	0x0802cd38

080238d8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80238d8:	b580      	push	{r7, lr}
 80238da:	b086      	sub	sp, #24
 80238dc:	af00      	add	r7, sp, #0
 80238de:	60f8      	str	r0, [r7, #12]
 80238e0:	60b9      	str	r1, [r7, #8]
 80238e2:	4613      	mov	r3, r2
 80238e4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80238e6:	68bb      	ldr	r3, [r7, #8]
 80238e8:	2b00      	cmp	r3, #0
 80238ea:	d101      	bne.n	80238f0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80238ec:	4b39      	ldr	r3, [pc, #228]	; (80239d4 <udp_bind+0xfc>)
 80238ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80238f0:	68fb      	ldr	r3, [r7, #12]
 80238f2:	2b00      	cmp	r3, #0
 80238f4:	d109      	bne.n	802390a <udp_bind+0x32>
 80238f6:	4b38      	ldr	r3, [pc, #224]	; (80239d8 <udp_bind+0x100>)
 80238f8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80238fc:	4937      	ldr	r1, [pc, #220]	; (80239dc <udp_bind+0x104>)
 80238fe:	4838      	ldr	r0, [pc, #224]	; (80239e0 <udp_bind+0x108>)
 8023900:	f002 fdca 	bl	8026498 <iprintf>
 8023904:	f06f 030f 	mvn.w	r3, #15
 8023908:	e060      	b.n	80239cc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802390a:	2300      	movs	r3, #0
 802390c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802390e:	4b35      	ldr	r3, [pc, #212]	; (80239e4 <udp_bind+0x10c>)
 8023910:	681b      	ldr	r3, [r3, #0]
 8023912:	617b      	str	r3, [r7, #20]
 8023914:	e009      	b.n	802392a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8023916:	68fa      	ldr	r2, [r7, #12]
 8023918:	697b      	ldr	r3, [r7, #20]
 802391a:	429a      	cmp	r2, r3
 802391c:	d102      	bne.n	8023924 <udp_bind+0x4c>
      rebind = 1;
 802391e:	2301      	movs	r3, #1
 8023920:	74fb      	strb	r3, [r7, #19]
      break;
 8023922:	e005      	b.n	8023930 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023924:	697b      	ldr	r3, [r7, #20]
 8023926:	68db      	ldr	r3, [r3, #12]
 8023928:	617b      	str	r3, [r7, #20]
 802392a:	697b      	ldr	r3, [r7, #20]
 802392c:	2b00      	cmp	r3, #0
 802392e:	d1f2      	bne.n	8023916 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8023930:	88fb      	ldrh	r3, [r7, #6]
 8023932:	2b00      	cmp	r3, #0
 8023934:	d109      	bne.n	802394a <udp_bind+0x72>
    port = udp_new_port();
 8023936:	f7ff fc69 	bl	802320c <udp_new_port>
 802393a:	4603      	mov	r3, r0
 802393c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802393e:	88fb      	ldrh	r3, [r7, #6]
 8023940:	2b00      	cmp	r3, #0
 8023942:	d12c      	bne.n	802399e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8023944:	f06f 0307 	mvn.w	r3, #7
 8023948:	e040      	b.n	80239cc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802394a:	4b26      	ldr	r3, [pc, #152]	; (80239e4 <udp_bind+0x10c>)
 802394c:	681b      	ldr	r3, [r3, #0]
 802394e:	617b      	str	r3, [r7, #20]
 8023950:	e022      	b.n	8023998 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8023952:	68fa      	ldr	r2, [r7, #12]
 8023954:	697b      	ldr	r3, [r7, #20]
 8023956:	429a      	cmp	r2, r3
 8023958:	d01b      	beq.n	8023992 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 802395a:	697b      	ldr	r3, [r7, #20]
 802395c:	8a5b      	ldrh	r3, [r3, #18]
 802395e:	88fa      	ldrh	r2, [r7, #6]
 8023960:	429a      	cmp	r2, r3
 8023962:	d116      	bne.n	8023992 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023964:	697b      	ldr	r3, [r7, #20]
 8023966:	681a      	ldr	r2, [r3, #0]
 8023968:	68bb      	ldr	r3, [r7, #8]
 802396a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 802396c:	429a      	cmp	r2, r3
 802396e:	d00d      	beq.n	802398c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023970:	68bb      	ldr	r3, [r7, #8]
 8023972:	2b00      	cmp	r3, #0
 8023974:	d00a      	beq.n	802398c <udp_bind+0xb4>
 8023976:	68bb      	ldr	r3, [r7, #8]
 8023978:	681b      	ldr	r3, [r3, #0]
 802397a:	2b00      	cmp	r3, #0
 802397c:	d006      	beq.n	802398c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 802397e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023980:	2b00      	cmp	r3, #0
 8023982:	d003      	beq.n	802398c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8023984:	697b      	ldr	r3, [r7, #20]
 8023986:	681b      	ldr	r3, [r3, #0]
 8023988:	2b00      	cmp	r3, #0
 802398a:	d102      	bne.n	8023992 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 802398c:	f06f 0307 	mvn.w	r3, #7
 8023990:	e01c      	b.n	80239cc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023992:	697b      	ldr	r3, [r7, #20]
 8023994:	68db      	ldr	r3, [r3, #12]
 8023996:	617b      	str	r3, [r7, #20]
 8023998:	697b      	ldr	r3, [r7, #20]
 802399a:	2b00      	cmp	r3, #0
 802399c:	d1d9      	bne.n	8023952 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 802399e:	68bb      	ldr	r3, [r7, #8]
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	d002      	beq.n	80239aa <udp_bind+0xd2>
 80239a4:	68bb      	ldr	r3, [r7, #8]
 80239a6:	681b      	ldr	r3, [r3, #0]
 80239a8:	e000      	b.n	80239ac <udp_bind+0xd4>
 80239aa:	2300      	movs	r3, #0
 80239ac:	68fa      	ldr	r2, [r7, #12]
 80239ae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80239b0:	68fb      	ldr	r3, [r7, #12]
 80239b2:	88fa      	ldrh	r2, [r7, #6]
 80239b4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80239b6:	7cfb      	ldrb	r3, [r7, #19]
 80239b8:	2b00      	cmp	r3, #0
 80239ba:	d106      	bne.n	80239ca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80239bc:	4b09      	ldr	r3, [pc, #36]	; (80239e4 <udp_bind+0x10c>)
 80239be:	681a      	ldr	r2, [r3, #0]
 80239c0:	68fb      	ldr	r3, [r7, #12]
 80239c2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80239c4:	4a07      	ldr	r2, [pc, #28]	; (80239e4 <udp_bind+0x10c>)
 80239c6:	68fb      	ldr	r3, [r7, #12]
 80239c8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80239ca:	2300      	movs	r3, #0
}
 80239cc:	4618      	mov	r0, r3
 80239ce:	3718      	adds	r7, #24
 80239d0:	46bd      	mov	sp, r7
 80239d2:	bd80      	pop	{r7, pc}
 80239d4:	0802daa0 	.word	0x0802daa0
 80239d8:	0802ca64 	.word	0x0802ca64
 80239dc:	0802cd68 	.word	0x0802cd68
 80239e0:	0802caf4 	.word	0x0802caf4
 80239e4:	20015d90 	.word	0x20015d90

080239e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80239e8:	b580      	push	{r7, lr}
 80239ea:	b084      	sub	sp, #16
 80239ec:	af00      	add	r7, sp, #0
 80239ee:	60f8      	str	r0, [r7, #12]
 80239f0:	60b9      	str	r1, [r7, #8]
 80239f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80239f4:	68fb      	ldr	r3, [r7, #12]
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d107      	bne.n	8023a0a <udp_recv+0x22>
 80239fa:	4b08      	ldr	r3, [pc, #32]	; (8023a1c <udp_recv+0x34>)
 80239fc:	f240 428a 	movw	r2, #1162	; 0x48a
 8023a00:	4907      	ldr	r1, [pc, #28]	; (8023a20 <udp_recv+0x38>)
 8023a02:	4808      	ldr	r0, [pc, #32]	; (8023a24 <udp_recv+0x3c>)
 8023a04:	f002 fd48 	bl	8026498 <iprintf>
 8023a08:	e005      	b.n	8023a16 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8023a0a:	68fb      	ldr	r3, [r7, #12]
 8023a0c:	68ba      	ldr	r2, [r7, #8]
 8023a0e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8023a10:	68fb      	ldr	r3, [r7, #12]
 8023a12:	687a      	ldr	r2, [r7, #4]
 8023a14:	61da      	str	r2, [r3, #28]
}
 8023a16:	3710      	adds	r7, #16
 8023a18:	46bd      	mov	sp, r7
 8023a1a:	bd80      	pop	{r7, pc}
 8023a1c:	0802ca64 	.word	0x0802ca64
 8023a20:	0802cdd4 	.word	0x0802cdd4
 8023a24:	0802caf4 	.word	0x0802caf4

08023a28 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8023a28:	b580      	push	{r7, lr}
 8023a2a:	b084      	sub	sp, #16
 8023a2c:	af00      	add	r7, sp, #0
 8023a2e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	2b00      	cmp	r3, #0
 8023a34:	d107      	bne.n	8023a46 <udp_remove+0x1e>
 8023a36:	4b19      	ldr	r3, [pc, #100]	; (8023a9c <udp_remove+0x74>)
 8023a38:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8023a3c:	4918      	ldr	r1, [pc, #96]	; (8023aa0 <udp_remove+0x78>)
 8023a3e:	4819      	ldr	r0, [pc, #100]	; (8023aa4 <udp_remove+0x7c>)
 8023a40:	f002 fd2a 	bl	8026498 <iprintf>
 8023a44:	e026      	b.n	8023a94 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8023a46:	4b18      	ldr	r3, [pc, #96]	; (8023aa8 <udp_remove+0x80>)
 8023a48:	681b      	ldr	r3, [r3, #0]
 8023a4a:	687a      	ldr	r2, [r7, #4]
 8023a4c:	429a      	cmp	r2, r3
 8023a4e:	d105      	bne.n	8023a5c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8023a50:	4b15      	ldr	r3, [pc, #84]	; (8023aa8 <udp_remove+0x80>)
 8023a52:	681b      	ldr	r3, [r3, #0]
 8023a54:	68db      	ldr	r3, [r3, #12]
 8023a56:	4a14      	ldr	r2, [pc, #80]	; (8023aa8 <udp_remove+0x80>)
 8023a58:	6013      	str	r3, [r2, #0]
 8023a5a:	e017      	b.n	8023a8c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8023a5c:	4b12      	ldr	r3, [pc, #72]	; (8023aa8 <udp_remove+0x80>)
 8023a5e:	681b      	ldr	r3, [r3, #0]
 8023a60:	60fb      	str	r3, [r7, #12]
 8023a62:	e010      	b.n	8023a86 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8023a64:	68fb      	ldr	r3, [r7, #12]
 8023a66:	68db      	ldr	r3, [r3, #12]
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	d009      	beq.n	8023a80 <udp_remove+0x58>
 8023a6c:	68fb      	ldr	r3, [r7, #12]
 8023a6e:	68db      	ldr	r3, [r3, #12]
 8023a70:	687a      	ldr	r2, [r7, #4]
 8023a72:	429a      	cmp	r2, r3
 8023a74:	d104      	bne.n	8023a80 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	68da      	ldr	r2, [r3, #12]
 8023a7a:	68fb      	ldr	r3, [r7, #12]
 8023a7c:	60da      	str	r2, [r3, #12]
        break;
 8023a7e:	e005      	b.n	8023a8c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8023a80:	68fb      	ldr	r3, [r7, #12]
 8023a82:	68db      	ldr	r3, [r3, #12]
 8023a84:	60fb      	str	r3, [r7, #12]
 8023a86:	68fb      	ldr	r3, [r7, #12]
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	d1eb      	bne.n	8023a64 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8023a8c:	6879      	ldr	r1, [r7, #4]
 8023a8e:	2000      	movs	r0, #0
 8023a90:	f7fe f8ba 	bl	8021c08 <memp_free>
}
 8023a94:	3710      	adds	r7, #16
 8023a96:	46bd      	mov	sp, r7
 8023a98:	bd80      	pop	{r7, pc}
 8023a9a:	bf00      	nop
 8023a9c:	0802ca64 	.word	0x0802ca64
 8023aa0:	0802cdec 	.word	0x0802cdec
 8023aa4:	0802caf4 	.word	0x0802caf4
 8023aa8:	20015d90 	.word	0x20015d90

08023aac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8023aac:	b580      	push	{r7, lr}
 8023aae:	b082      	sub	sp, #8
 8023ab0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8023ab2:	2000      	movs	r0, #0
 8023ab4:	f7fe f838 	bl	8021b28 <memp_malloc>
 8023ab8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8023aba:	687b      	ldr	r3, [r7, #4]
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	d007      	beq.n	8023ad0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8023ac0:	2220      	movs	r2, #32
 8023ac2:	2100      	movs	r1, #0
 8023ac4:	6878      	ldr	r0, [r7, #4]
 8023ac6:	f002 fbff 	bl	80262c8 <memset>
    pcb->ttl = UDP_TTL;
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	22ff      	movs	r2, #255	; 0xff
 8023ace:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8023ad0:	687b      	ldr	r3, [r7, #4]
}
 8023ad2:	4618      	mov	r0, r3
 8023ad4:	3708      	adds	r7, #8
 8023ad6:	46bd      	mov	sp, r7
 8023ad8:	bd80      	pop	{r7, pc}
	...

08023adc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8023adc:	b480      	push	{r7}
 8023ade:	b085      	sub	sp, #20
 8023ae0:	af00      	add	r7, sp, #0
 8023ae2:	6078      	str	r0, [r7, #4]
 8023ae4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8023ae6:	687b      	ldr	r3, [r7, #4]
 8023ae8:	2b00      	cmp	r3, #0
 8023aea:	d01e      	beq.n	8023b2a <udp_netif_ip_addr_changed+0x4e>
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	681b      	ldr	r3, [r3, #0]
 8023af0:	2b00      	cmp	r3, #0
 8023af2:	d01a      	beq.n	8023b2a <udp_netif_ip_addr_changed+0x4e>
 8023af4:	683b      	ldr	r3, [r7, #0]
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	d017      	beq.n	8023b2a <udp_netif_ip_addr_changed+0x4e>
 8023afa:	683b      	ldr	r3, [r7, #0]
 8023afc:	681b      	ldr	r3, [r3, #0]
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	d013      	beq.n	8023b2a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8023b02:	4b0d      	ldr	r3, [pc, #52]	; (8023b38 <udp_netif_ip_addr_changed+0x5c>)
 8023b04:	681b      	ldr	r3, [r3, #0]
 8023b06:	60fb      	str	r3, [r7, #12]
 8023b08:	e00c      	b.n	8023b24 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8023b0a:	68fb      	ldr	r3, [r7, #12]
 8023b0c:	681a      	ldr	r2, [r3, #0]
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	681b      	ldr	r3, [r3, #0]
 8023b12:	429a      	cmp	r2, r3
 8023b14:	d103      	bne.n	8023b1e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8023b16:	683b      	ldr	r3, [r7, #0]
 8023b18:	681a      	ldr	r2, [r3, #0]
 8023b1a:	68fb      	ldr	r3, [r7, #12]
 8023b1c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8023b1e:	68fb      	ldr	r3, [r7, #12]
 8023b20:	68db      	ldr	r3, [r3, #12]
 8023b22:	60fb      	str	r3, [r7, #12]
 8023b24:	68fb      	ldr	r3, [r7, #12]
 8023b26:	2b00      	cmp	r3, #0
 8023b28:	d1ef      	bne.n	8023b0a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8023b2a:	bf00      	nop
 8023b2c:	3714      	adds	r7, #20
 8023b2e:	46bd      	mov	sp, r7
 8023b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b34:	4770      	bx	lr
 8023b36:	bf00      	nop
 8023b38:	20015d90 	.word	0x20015d90

08023b3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8023b3c:	b580      	push	{r7, lr}
 8023b3e:	b082      	sub	sp, #8
 8023b40:	af00      	add	r7, sp, #0
 8023b42:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8023b44:	4915      	ldr	r1, [pc, #84]	; (8023b9c <etharp_free_entry+0x60>)
 8023b46:	687a      	ldr	r2, [r7, #4]
 8023b48:	4613      	mov	r3, r2
 8023b4a:	005b      	lsls	r3, r3, #1
 8023b4c:	4413      	add	r3, r2
 8023b4e:	00db      	lsls	r3, r3, #3
 8023b50:	440b      	add	r3, r1
 8023b52:	681b      	ldr	r3, [r3, #0]
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d013      	beq.n	8023b80 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8023b58:	4910      	ldr	r1, [pc, #64]	; (8023b9c <etharp_free_entry+0x60>)
 8023b5a:	687a      	ldr	r2, [r7, #4]
 8023b5c:	4613      	mov	r3, r2
 8023b5e:	005b      	lsls	r3, r3, #1
 8023b60:	4413      	add	r3, r2
 8023b62:	00db      	lsls	r3, r3, #3
 8023b64:	440b      	add	r3, r1
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	4618      	mov	r0, r3
 8023b6a:	f7fe ff5d 	bl	8022a28 <pbuf_free>
    arp_table[i].q = NULL;
 8023b6e:	490b      	ldr	r1, [pc, #44]	; (8023b9c <etharp_free_entry+0x60>)
 8023b70:	687a      	ldr	r2, [r7, #4]
 8023b72:	4613      	mov	r3, r2
 8023b74:	005b      	lsls	r3, r3, #1
 8023b76:	4413      	add	r3, r2
 8023b78:	00db      	lsls	r3, r3, #3
 8023b7a:	440b      	add	r3, r1
 8023b7c:	2200      	movs	r2, #0
 8023b7e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8023b80:	4906      	ldr	r1, [pc, #24]	; (8023b9c <etharp_free_entry+0x60>)
 8023b82:	687a      	ldr	r2, [r7, #4]
 8023b84:	4613      	mov	r3, r2
 8023b86:	005b      	lsls	r3, r3, #1
 8023b88:	4413      	add	r3, r2
 8023b8a:	00db      	lsls	r3, r3, #3
 8023b8c:	440b      	add	r3, r1
 8023b8e:	3314      	adds	r3, #20
 8023b90:	2200      	movs	r2, #0
 8023b92:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8023b94:	bf00      	nop
 8023b96:	3708      	adds	r7, #8
 8023b98:	46bd      	mov	sp, r7
 8023b9a:	bd80      	pop	{r7, pc}
 8023b9c:	20015d94 	.word	0x20015d94

08023ba0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8023ba0:	b580      	push	{r7, lr}
 8023ba2:	b082      	sub	sp, #8
 8023ba4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023ba6:	2300      	movs	r3, #0
 8023ba8:	607b      	str	r3, [r7, #4]
 8023baa:	e096      	b.n	8023cda <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8023bac:	494f      	ldr	r1, [pc, #316]	; (8023cec <etharp_tmr+0x14c>)
 8023bae:	687a      	ldr	r2, [r7, #4]
 8023bb0:	4613      	mov	r3, r2
 8023bb2:	005b      	lsls	r3, r3, #1
 8023bb4:	4413      	add	r3, r2
 8023bb6:	00db      	lsls	r3, r3, #3
 8023bb8:	440b      	add	r3, r1
 8023bba:	3314      	adds	r3, #20
 8023bbc:	781b      	ldrb	r3, [r3, #0]
 8023bbe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8023bc0:	78fb      	ldrb	r3, [r7, #3]
 8023bc2:	2b00      	cmp	r3, #0
 8023bc4:	f000 8086 	beq.w	8023cd4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8023bc8:	4948      	ldr	r1, [pc, #288]	; (8023cec <etharp_tmr+0x14c>)
 8023bca:	687a      	ldr	r2, [r7, #4]
 8023bcc:	4613      	mov	r3, r2
 8023bce:	005b      	lsls	r3, r3, #1
 8023bd0:	4413      	add	r3, r2
 8023bd2:	00db      	lsls	r3, r3, #3
 8023bd4:	440b      	add	r3, r1
 8023bd6:	3312      	adds	r3, #18
 8023bd8:	881b      	ldrh	r3, [r3, #0]
 8023bda:	3301      	adds	r3, #1
 8023bdc:	b298      	uxth	r0, r3
 8023bde:	4943      	ldr	r1, [pc, #268]	; (8023cec <etharp_tmr+0x14c>)
 8023be0:	687a      	ldr	r2, [r7, #4]
 8023be2:	4613      	mov	r3, r2
 8023be4:	005b      	lsls	r3, r3, #1
 8023be6:	4413      	add	r3, r2
 8023be8:	00db      	lsls	r3, r3, #3
 8023bea:	440b      	add	r3, r1
 8023bec:	3312      	adds	r3, #18
 8023bee:	4602      	mov	r2, r0
 8023bf0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023bf2:	493e      	ldr	r1, [pc, #248]	; (8023cec <etharp_tmr+0x14c>)
 8023bf4:	687a      	ldr	r2, [r7, #4]
 8023bf6:	4613      	mov	r3, r2
 8023bf8:	005b      	lsls	r3, r3, #1
 8023bfa:	4413      	add	r3, r2
 8023bfc:	00db      	lsls	r3, r3, #3
 8023bfe:	440b      	add	r3, r1
 8023c00:	3312      	adds	r3, #18
 8023c02:	881b      	ldrh	r3, [r3, #0]
 8023c04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8023c08:	d215      	bcs.n	8023c36 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8023c0a:	4938      	ldr	r1, [pc, #224]	; (8023cec <etharp_tmr+0x14c>)
 8023c0c:	687a      	ldr	r2, [r7, #4]
 8023c0e:	4613      	mov	r3, r2
 8023c10:	005b      	lsls	r3, r3, #1
 8023c12:	4413      	add	r3, r2
 8023c14:	00db      	lsls	r3, r3, #3
 8023c16:	440b      	add	r3, r1
 8023c18:	3314      	adds	r3, #20
 8023c1a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023c1c:	2b01      	cmp	r3, #1
 8023c1e:	d10e      	bne.n	8023c3e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8023c20:	4932      	ldr	r1, [pc, #200]	; (8023cec <etharp_tmr+0x14c>)
 8023c22:	687a      	ldr	r2, [r7, #4]
 8023c24:	4613      	mov	r3, r2
 8023c26:	005b      	lsls	r3, r3, #1
 8023c28:	4413      	add	r3, r2
 8023c2a:	00db      	lsls	r3, r3, #3
 8023c2c:	440b      	add	r3, r1
 8023c2e:	3312      	adds	r3, #18
 8023c30:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8023c32:	2b04      	cmp	r3, #4
 8023c34:	d903      	bls.n	8023c3e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8023c36:	6878      	ldr	r0, [r7, #4]
 8023c38:	f7ff ff80 	bl	8023b3c <etharp_free_entry>
 8023c3c:	e04a      	b.n	8023cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8023c3e:	492b      	ldr	r1, [pc, #172]	; (8023cec <etharp_tmr+0x14c>)
 8023c40:	687a      	ldr	r2, [r7, #4]
 8023c42:	4613      	mov	r3, r2
 8023c44:	005b      	lsls	r3, r3, #1
 8023c46:	4413      	add	r3, r2
 8023c48:	00db      	lsls	r3, r3, #3
 8023c4a:	440b      	add	r3, r1
 8023c4c:	3314      	adds	r3, #20
 8023c4e:	781b      	ldrb	r3, [r3, #0]
 8023c50:	2b03      	cmp	r3, #3
 8023c52:	d10a      	bne.n	8023c6a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8023c54:	4925      	ldr	r1, [pc, #148]	; (8023cec <etharp_tmr+0x14c>)
 8023c56:	687a      	ldr	r2, [r7, #4]
 8023c58:	4613      	mov	r3, r2
 8023c5a:	005b      	lsls	r3, r3, #1
 8023c5c:	4413      	add	r3, r2
 8023c5e:	00db      	lsls	r3, r3, #3
 8023c60:	440b      	add	r3, r1
 8023c62:	3314      	adds	r3, #20
 8023c64:	2204      	movs	r2, #4
 8023c66:	701a      	strb	r2, [r3, #0]
 8023c68:	e034      	b.n	8023cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8023c6a:	4920      	ldr	r1, [pc, #128]	; (8023cec <etharp_tmr+0x14c>)
 8023c6c:	687a      	ldr	r2, [r7, #4]
 8023c6e:	4613      	mov	r3, r2
 8023c70:	005b      	lsls	r3, r3, #1
 8023c72:	4413      	add	r3, r2
 8023c74:	00db      	lsls	r3, r3, #3
 8023c76:	440b      	add	r3, r1
 8023c78:	3314      	adds	r3, #20
 8023c7a:	781b      	ldrb	r3, [r3, #0]
 8023c7c:	2b04      	cmp	r3, #4
 8023c7e:	d10a      	bne.n	8023c96 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8023c80:	491a      	ldr	r1, [pc, #104]	; (8023cec <etharp_tmr+0x14c>)
 8023c82:	687a      	ldr	r2, [r7, #4]
 8023c84:	4613      	mov	r3, r2
 8023c86:	005b      	lsls	r3, r3, #1
 8023c88:	4413      	add	r3, r2
 8023c8a:	00db      	lsls	r3, r3, #3
 8023c8c:	440b      	add	r3, r1
 8023c8e:	3314      	adds	r3, #20
 8023c90:	2202      	movs	r2, #2
 8023c92:	701a      	strb	r2, [r3, #0]
 8023c94:	e01e      	b.n	8023cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023c96:	4915      	ldr	r1, [pc, #84]	; (8023cec <etharp_tmr+0x14c>)
 8023c98:	687a      	ldr	r2, [r7, #4]
 8023c9a:	4613      	mov	r3, r2
 8023c9c:	005b      	lsls	r3, r3, #1
 8023c9e:	4413      	add	r3, r2
 8023ca0:	00db      	lsls	r3, r3, #3
 8023ca2:	440b      	add	r3, r1
 8023ca4:	3314      	adds	r3, #20
 8023ca6:	781b      	ldrb	r3, [r3, #0]
 8023ca8:	2b01      	cmp	r3, #1
 8023caa:	d113      	bne.n	8023cd4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8023cac:	490f      	ldr	r1, [pc, #60]	; (8023cec <etharp_tmr+0x14c>)
 8023cae:	687a      	ldr	r2, [r7, #4]
 8023cb0:	4613      	mov	r3, r2
 8023cb2:	005b      	lsls	r3, r3, #1
 8023cb4:	4413      	add	r3, r2
 8023cb6:	00db      	lsls	r3, r3, #3
 8023cb8:	440b      	add	r3, r1
 8023cba:	3308      	adds	r3, #8
 8023cbc:	6818      	ldr	r0, [r3, #0]
 8023cbe:	687a      	ldr	r2, [r7, #4]
 8023cc0:	4613      	mov	r3, r2
 8023cc2:	005b      	lsls	r3, r3, #1
 8023cc4:	4413      	add	r3, r2
 8023cc6:	00db      	lsls	r3, r3, #3
 8023cc8:	4a08      	ldr	r2, [pc, #32]	; (8023cec <etharp_tmr+0x14c>)
 8023cca:	4413      	add	r3, r2
 8023ccc:	3304      	adds	r3, #4
 8023cce:	4619      	mov	r1, r3
 8023cd0:	f000 fe6e 	bl	80249b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	3301      	adds	r3, #1
 8023cd8:	607b      	str	r3, [r7, #4]
 8023cda:	687b      	ldr	r3, [r7, #4]
 8023cdc:	2b31      	cmp	r3, #49	; 0x31
 8023cde:	f77f af65 	ble.w	8023bac <etharp_tmr+0xc>
      }
    }
  }
}
 8023ce2:	bf00      	nop
 8023ce4:	bf00      	nop
 8023ce6:	3708      	adds	r7, #8
 8023ce8:	46bd      	mov	sp, r7
 8023cea:	bd80      	pop	{r7, pc}
 8023cec:	20015d94 	.word	0x20015d94

08023cf0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8023cf0:	b580      	push	{r7, lr}
 8023cf2:	b08a      	sub	sp, #40	; 0x28
 8023cf4:	af00      	add	r7, sp, #0
 8023cf6:	60f8      	str	r0, [r7, #12]
 8023cf8:	460b      	mov	r3, r1
 8023cfa:	607a      	str	r2, [r7, #4]
 8023cfc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8023cfe:	2332      	movs	r3, #50	; 0x32
 8023d00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8023d02:	2332      	movs	r3, #50	; 0x32
 8023d04:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8023d06:	2332      	movs	r3, #50	; 0x32
 8023d08:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8023d0a:	2300      	movs	r3, #0
 8023d0c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8023d0e:	2332      	movs	r3, #50	; 0x32
 8023d10:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8023d12:	2300      	movs	r3, #0
 8023d14:	83bb      	strh	r3, [r7, #28]
 8023d16:	2300      	movs	r3, #0
 8023d18:	837b      	strh	r3, [r7, #26]
 8023d1a:	2300      	movs	r3, #0
 8023d1c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023d1e:	2300      	movs	r3, #0
 8023d20:	843b      	strh	r3, [r7, #32]
 8023d22:	e0ae      	b.n	8023e82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8023d24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023d28:	49a6      	ldr	r1, [pc, #664]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023d2a:	4613      	mov	r3, r2
 8023d2c:	005b      	lsls	r3, r3, #1
 8023d2e:	4413      	add	r3, r2
 8023d30:	00db      	lsls	r3, r3, #3
 8023d32:	440b      	add	r3, r1
 8023d34:	3314      	adds	r3, #20
 8023d36:	781b      	ldrb	r3, [r3, #0]
 8023d38:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8023d3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023d3e:	2b32      	cmp	r3, #50	; 0x32
 8023d40:	d105      	bne.n	8023d4e <etharp_find_entry+0x5e>
 8023d42:	7dfb      	ldrb	r3, [r7, #23]
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	d102      	bne.n	8023d4e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8023d48:	8c3b      	ldrh	r3, [r7, #32]
 8023d4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8023d4c:	e095      	b.n	8023e7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8023d4e:	7dfb      	ldrb	r3, [r7, #23]
 8023d50:	2b00      	cmp	r3, #0
 8023d52:	f000 8092 	beq.w	8023e7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8023d56:	7dfb      	ldrb	r3, [r7, #23]
 8023d58:	2b01      	cmp	r3, #1
 8023d5a:	d009      	beq.n	8023d70 <etharp_find_entry+0x80>
 8023d5c:	7dfb      	ldrb	r3, [r7, #23]
 8023d5e:	2b01      	cmp	r3, #1
 8023d60:	d806      	bhi.n	8023d70 <etharp_find_entry+0x80>
 8023d62:	4b99      	ldr	r3, [pc, #612]	; (8023fc8 <etharp_find_entry+0x2d8>)
 8023d64:	f240 1223 	movw	r2, #291	; 0x123
 8023d68:	4998      	ldr	r1, [pc, #608]	; (8023fcc <etharp_find_entry+0x2dc>)
 8023d6a:	4899      	ldr	r0, [pc, #612]	; (8023fd0 <etharp_find_entry+0x2e0>)
 8023d6c:	f002 fb94 	bl	8026498 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8023d70:	68fb      	ldr	r3, [r7, #12]
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d020      	beq.n	8023db8 <etharp_find_entry+0xc8>
 8023d76:	68fb      	ldr	r3, [r7, #12]
 8023d78:	6819      	ldr	r1, [r3, #0]
 8023d7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023d7e:	4891      	ldr	r0, [pc, #580]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023d80:	4613      	mov	r3, r2
 8023d82:	005b      	lsls	r3, r3, #1
 8023d84:	4413      	add	r3, r2
 8023d86:	00db      	lsls	r3, r3, #3
 8023d88:	4403      	add	r3, r0
 8023d8a:	3304      	adds	r3, #4
 8023d8c:	681b      	ldr	r3, [r3, #0]
 8023d8e:	4299      	cmp	r1, r3
 8023d90:	d112      	bne.n	8023db8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	2b00      	cmp	r3, #0
 8023d96:	d00c      	beq.n	8023db2 <etharp_find_entry+0xc2>
 8023d98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023d9c:	4989      	ldr	r1, [pc, #548]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023d9e:	4613      	mov	r3, r2
 8023da0:	005b      	lsls	r3, r3, #1
 8023da2:	4413      	add	r3, r2
 8023da4:	00db      	lsls	r3, r3, #3
 8023da6:	440b      	add	r3, r1
 8023da8:	3308      	adds	r3, #8
 8023daa:	681b      	ldr	r3, [r3, #0]
 8023dac:	687a      	ldr	r2, [r7, #4]
 8023dae:	429a      	cmp	r2, r3
 8023db0:	d102      	bne.n	8023db8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8023db2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023db6:	e100      	b.n	8023fba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8023db8:	7dfb      	ldrb	r3, [r7, #23]
 8023dba:	2b01      	cmp	r3, #1
 8023dbc:	d140      	bne.n	8023e40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8023dbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023dc2:	4980      	ldr	r1, [pc, #512]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023dc4:	4613      	mov	r3, r2
 8023dc6:	005b      	lsls	r3, r3, #1
 8023dc8:	4413      	add	r3, r2
 8023dca:	00db      	lsls	r3, r3, #3
 8023dcc:	440b      	add	r3, r1
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	2b00      	cmp	r3, #0
 8023dd2:	d01a      	beq.n	8023e0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8023dd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023dd8:	497a      	ldr	r1, [pc, #488]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023dda:	4613      	mov	r3, r2
 8023ddc:	005b      	lsls	r3, r3, #1
 8023dde:	4413      	add	r3, r2
 8023de0:	00db      	lsls	r3, r3, #3
 8023de2:	440b      	add	r3, r1
 8023de4:	3312      	adds	r3, #18
 8023de6:	881b      	ldrh	r3, [r3, #0]
 8023de8:	8bba      	ldrh	r2, [r7, #28]
 8023dea:	429a      	cmp	r2, r3
 8023dec:	d845      	bhi.n	8023e7a <etharp_find_entry+0x18a>
            old_queue = i;
 8023dee:	8c3b      	ldrh	r3, [r7, #32]
 8023df0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8023df2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023df6:	4973      	ldr	r1, [pc, #460]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023df8:	4613      	mov	r3, r2
 8023dfa:	005b      	lsls	r3, r3, #1
 8023dfc:	4413      	add	r3, r2
 8023dfe:	00db      	lsls	r3, r3, #3
 8023e00:	440b      	add	r3, r1
 8023e02:	3312      	adds	r3, #18
 8023e04:	881b      	ldrh	r3, [r3, #0]
 8023e06:	83bb      	strh	r3, [r7, #28]
 8023e08:	e037      	b.n	8023e7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8023e0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023e0e:	496d      	ldr	r1, [pc, #436]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023e10:	4613      	mov	r3, r2
 8023e12:	005b      	lsls	r3, r3, #1
 8023e14:	4413      	add	r3, r2
 8023e16:	00db      	lsls	r3, r3, #3
 8023e18:	440b      	add	r3, r1
 8023e1a:	3312      	adds	r3, #18
 8023e1c:	881b      	ldrh	r3, [r3, #0]
 8023e1e:	8b7a      	ldrh	r2, [r7, #26]
 8023e20:	429a      	cmp	r2, r3
 8023e22:	d82a      	bhi.n	8023e7a <etharp_find_entry+0x18a>
            old_pending = i;
 8023e24:	8c3b      	ldrh	r3, [r7, #32]
 8023e26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8023e28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023e2c:	4965      	ldr	r1, [pc, #404]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023e2e:	4613      	mov	r3, r2
 8023e30:	005b      	lsls	r3, r3, #1
 8023e32:	4413      	add	r3, r2
 8023e34:	00db      	lsls	r3, r3, #3
 8023e36:	440b      	add	r3, r1
 8023e38:	3312      	adds	r3, #18
 8023e3a:	881b      	ldrh	r3, [r3, #0]
 8023e3c:	837b      	strh	r3, [r7, #26]
 8023e3e:	e01c      	b.n	8023e7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8023e40:	7dfb      	ldrb	r3, [r7, #23]
 8023e42:	2b01      	cmp	r3, #1
 8023e44:	d919      	bls.n	8023e7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8023e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023e4a:	495e      	ldr	r1, [pc, #376]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023e4c:	4613      	mov	r3, r2
 8023e4e:	005b      	lsls	r3, r3, #1
 8023e50:	4413      	add	r3, r2
 8023e52:	00db      	lsls	r3, r3, #3
 8023e54:	440b      	add	r3, r1
 8023e56:	3312      	adds	r3, #18
 8023e58:	881b      	ldrh	r3, [r3, #0]
 8023e5a:	8b3a      	ldrh	r2, [r7, #24]
 8023e5c:	429a      	cmp	r2, r3
 8023e5e:	d80c      	bhi.n	8023e7a <etharp_find_entry+0x18a>
            old_stable = i;
 8023e60:	8c3b      	ldrh	r3, [r7, #32]
 8023e62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8023e64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023e68:	4956      	ldr	r1, [pc, #344]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023e6a:	4613      	mov	r3, r2
 8023e6c:	005b      	lsls	r3, r3, #1
 8023e6e:	4413      	add	r3, r2
 8023e70:	00db      	lsls	r3, r3, #3
 8023e72:	440b      	add	r3, r1
 8023e74:	3312      	adds	r3, #18
 8023e76:	881b      	ldrh	r3, [r3, #0]
 8023e78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023e7a:	8c3b      	ldrh	r3, [r7, #32]
 8023e7c:	3301      	adds	r3, #1
 8023e7e:	b29b      	uxth	r3, r3
 8023e80:	843b      	strh	r3, [r7, #32]
 8023e82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023e86:	2b31      	cmp	r3, #49	; 0x31
 8023e88:	f77f af4c 	ble.w	8023d24 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8023e8c:	7afb      	ldrb	r3, [r7, #11]
 8023e8e:	f003 0302 	and.w	r3, r3, #2
 8023e92:	2b00      	cmp	r3, #0
 8023e94:	d108      	bne.n	8023ea8 <etharp_find_entry+0x1b8>
 8023e96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023e9a:	2b32      	cmp	r3, #50	; 0x32
 8023e9c:	d107      	bne.n	8023eae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8023e9e:	7afb      	ldrb	r3, [r7, #11]
 8023ea0:	f003 0301 	and.w	r3, r3, #1
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	d102      	bne.n	8023eae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8023ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8023eac:	e085      	b.n	8023fba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8023eae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023eb2:	2b31      	cmp	r3, #49	; 0x31
 8023eb4:	dc02      	bgt.n	8023ebc <etharp_find_entry+0x1cc>
    i = empty;
 8023eb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023eb8:	843b      	strh	r3, [r7, #32]
 8023eba:	e039      	b.n	8023f30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8023ebc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023ec0:	2b31      	cmp	r3, #49	; 0x31
 8023ec2:	dc14      	bgt.n	8023eee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8023ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023ec6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8023ec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023ecc:	493d      	ldr	r1, [pc, #244]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023ece:	4613      	mov	r3, r2
 8023ed0:	005b      	lsls	r3, r3, #1
 8023ed2:	4413      	add	r3, r2
 8023ed4:	00db      	lsls	r3, r3, #3
 8023ed6:	440b      	add	r3, r1
 8023ed8:	681b      	ldr	r3, [r3, #0]
 8023eda:	2b00      	cmp	r3, #0
 8023edc:	d018      	beq.n	8023f10 <etharp_find_entry+0x220>
 8023ede:	4b3a      	ldr	r3, [pc, #232]	; (8023fc8 <etharp_find_entry+0x2d8>)
 8023ee0:	f240 126d 	movw	r2, #365	; 0x16d
 8023ee4:	493b      	ldr	r1, [pc, #236]	; (8023fd4 <etharp_find_entry+0x2e4>)
 8023ee6:	483a      	ldr	r0, [pc, #232]	; (8023fd0 <etharp_find_entry+0x2e0>)
 8023ee8:	f002 fad6 	bl	8026498 <iprintf>
 8023eec:	e010      	b.n	8023f10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8023eee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8023ef2:	2b31      	cmp	r3, #49	; 0x31
 8023ef4:	dc02      	bgt.n	8023efc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8023ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023ef8:	843b      	strh	r3, [r7, #32]
 8023efa:	e009      	b.n	8023f10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8023efc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8023f00:	2b31      	cmp	r3, #49	; 0x31
 8023f02:	dc02      	bgt.n	8023f0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8023f04:	8bfb      	ldrh	r3, [r7, #30]
 8023f06:	843b      	strh	r3, [r7, #32]
 8023f08:	e002      	b.n	8023f10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8023f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8023f0e:	e054      	b.n	8023fba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8023f10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023f14:	2b31      	cmp	r3, #49	; 0x31
 8023f16:	dd06      	ble.n	8023f26 <etharp_find_entry+0x236>
 8023f18:	4b2b      	ldr	r3, [pc, #172]	; (8023fc8 <etharp_find_entry+0x2d8>)
 8023f1a:	f240 127f 	movw	r2, #383	; 0x17f
 8023f1e:	492e      	ldr	r1, [pc, #184]	; (8023fd8 <etharp_find_entry+0x2e8>)
 8023f20:	482b      	ldr	r0, [pc, #172]	; (8023fd0 <etharp_find_entry+0x2e0>)
 8023f22:	f002 fab9 	bl	8026498 <iprintf>
    etharp_free_entry(i);
 8023f26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023f2a:	4618      	mov	r0, r3
 8023f2c:	f7ff fe06 	bl	8023b3c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8023f30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023f34:	2b31      	cmp	r3, #49	; 0x31
 8023f36:	dd06      	ble.n	8023f46 <etharp_find_entry+0x256>
 8023f38:	4b23      	ldr	r3, [pc, #140]	; (8023fc8 <etharp_find_entry+0x2d8>)
 8023f3a:	f240 1283 	movw	r2, #387	; 0x183
 8023f3e:	4926      	ldr	r1, [pc, #152]	; (8023fd8 <etharp_find_entry+0x2e8>)
 8023f40:	4823      	ldr	r0, [pc, #140]	; (8023fd0 <etharp_find_entry+0x2e0>)
 8023f42:	f002 faa9 	bl	8026498 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8023f46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023f4a:	491e      	ldr	r1, [pc, #120]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023f4c:	4613      	mov	r3, r2
 8023f4e:	005b      	lsls	r3, r3, #1
 8023f50:	4413      	add	r3, r2
 8023f52:	00db      	lsls	r3, r3, #3
 8023f54:	440b      	add	r3, r1
 8023f56:	3314      	adds	r3, #20
 8023f58:	781b      	ldrb	r3, [r3, #0]
 8023f5a:	2b00      	cmp	r3, #0
 8023f5c:	d006      	beq.n	8023f6c <etharp_find_entry+0x27c>
 8023f5e:	4b1a      	ldr	r3, [pc, #104]	; (8023fc8 <etharp_find_entry+0x2d8>)
 8023f60:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8023f64:	491d      	ldr	r1, [pc, #116]	; (8023fdc <etharp_find_entry+0x2ec>)
 8023f66:	481a      	ldr	r0, [pc, #104]	; (8023fd0 <etharp_find_entry+0x2e0>)
 8023f68:	f002 fa96 	bl	8026498 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8023f6c:	68fb      	ldr	r3, [r7, #12]
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	d00b      	beq.n	8023f8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8023f72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023f76:	68fb      	ldr	r3, [r7, #12]
 8023f78:	6819      	ldr	r1, [r3, #0]
 8023f7a:	4812      	ldr	r0, [pc, #72]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023f7c:	4613      	mov	r3, r2
 8023f7e:	005b      	lsls	r3, r3, #1
 8023f80:	4413      	add	r3, r2
 8023f82:	00db      	lsls	r3, r3, #3
 8023f84:	4403      	add	r3, r0
 8023f86:	3304      	adds	r3, #4
 8023f88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8023f8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023f8e:	490d      	ldr	r1, [pc, #52]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023f90:	4613      	mov	r3, r2
 8023f92:	005b      	lsls	r3, r3, #1
 8023f94:	4413      	add	r3, r2
 8023f96:	00db      	lsls	r3, r3, #3
 8023f98:	440b      	add	r3, r1
 8023f9a:	3312      	adds	r3, #18
 8023f9c:	2200      	movs	r2, #0
 8023f9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8023fa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023fa4:	4907      	ldr	r1, [pc, #28]	; (8023fc4 <etharp_find_entry+0x2d4>)
 8023fa6:	4613      	mov	r3, r2
 8023fa8:	005b      	lsls	r3, r3, #1
 8023faa:	4413      	add	r3, r2
 8023fac:	00db      	lsls	r3, r3, #3
 8023fae:	440b      	add	r3, r1
 8023fb0:	3308      	adds	r3, #8
 8023fb2:	687a      	ldr	r2, [r7, #4]
 8023fb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8023fb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8023fba:	4618      	mov	r0, r3
 8023fbc:	3728      	adds	r7, #40	; 0x28
 8023fbe:	46bd      	mov	sp, r7
 8023fc0:	bd80      	pop	{r7, pc}
 8023fc2:	bf00      	nop
 8023fc4:	20015d94 	.word	0x20015d94
 8023fc8:	0802ce04 	.word	0x0802ce04
 8023fcc:	0802ce78 	.word	0x0802ce78
 8023fd0:	0802ceb8 	.word	0x0802ceb8
 8023fd4:	0802cee0 	.word	0x0802cee0
 8023fd8:	0802cef8 	.word	0x0802cef8
 8023fdc:	0802cf0c 	.word	0x0802cf0c

08023fe0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8023fe0:	b580      	push	{r7, lr}
 8023fe2:	b088      	sub	sp, #32
 8023fe4:	af02      	add	r7, sp, #8
 8023fe6:	60f8      	str	r0, [r7, #12]
 8023fe8:	60b9      	str	r1, [r7, #8]
 8023fea:	607a      	str	r2, [r7, #4]
 8023fec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8023fee:	68fb      	ldr	r3, [r7, #12]
 8023ff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023ff4:	2b06      	cmp	r3, #6
 8023ff6:	d006      	beq.n	8024006 <etharp_update_arp_entry+0x26>
 8023ff8:	4b48      	ldr	r3, [pc, #288]	; (802411c <etharp_update_arp_entry+0x13c>)
 8023ffa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8023ffe:	4948      	ldr	r1, [pc, #288]	; (8024120 <etharp_update_arp_entry+0x140>)
 8024000:	4848      	ldr	r0, [pc, #288]	; (8024124 <etharp_update_arp_entry+0x144>)
 8024002:	f002 fa49 	bl	8026498 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8024006:	68bb      	ldr	r3, [r7, #8]
 8024008:	2b00      	cmp	r3, #0
 802400a:	d012      	beq.n	8024032 <etharp_update_arp_entry+0x52>
 802400c:	68bb      	ldr	r3, [r7, #8]
 802400e:	681b      	ldr	r3, [r3, #0]
 8024010:	2b00      	cmp	r3, #0
 8024012:	d00e      	beq.n	8024032 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8024014:	68bb      	ldr	r3, [r7, #8]
 8024016:	681b      	ldr	r3, [r3, #0]
 8024018:	68f9      	ldr	r1, [r7, #12]
 802401a:	4618      	mov	r0, r3
 802401c:	f001 f902 	bl	8025224 <ip4_addr_isbroadcast_u32>
 8024020:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8024022:	2b00      	cmp	r3, #0
 8024024:	d105      	bne.n	8024032 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8024026:	68bb      	ldr	r3, [r7, #8]
 8024028:	681b      	ldr	r3, [r3, #0]
 802402a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802402e:	2be0      	cmp	r3, #224	; 0xe0
 8024030:	d102      	bne.n	8024038 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024032:	f06f 030f 	mvn.w	r3, #15
 8024036:	e06c      	b.n	8024112 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8024038:	78fb      	ldrb	r3, [r7, #3]
 802403a:	68fa      	ldr	r2, [r7, #12]
 802403c:	4619      	mov	r1, r3
 802403e:	68b8      	ldr	r0, [r7, #8]
 8024040:	f7ff fe56 	bl	8023cf0 <etharp_find_entry>
 8024044:	4603      	mov	r3, r0
 8024046:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8024048:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802404c:	2b00      	cmp	r3, #0
 802404e:	da02      	bge.n	8024056 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8024050:	8afb      	ldrh	r3, [r7, #22]
 8024052:	b25b      	sxtb	r3, r3
 8024054:	e05d      	b.n	8024112 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8024056:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802405a:	4933      	ldr	r1, [pc, #204]	; (8024128 <etharp_update_arp_entry+0x148>)
 802405c:	4613      	mov	r3, r2
 802405e:	005b      	lsls	r3, r3, #1
 8024060:	4413      	add	r3, r2
 8024062:	00db      	lsls	r3, r3, #3
 8024064:	440b      	add	r3, r1
 8024066:	3314      	adds	r3, #20
 8024068:	2202      	movs	r2, #2
 802406a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802406c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024070:	492d      	ldr	r1, [pc, #180]	; (8024128 <etharp_update_arp_entry+0x148>)
 8024072:	4613      	mov	r3, r2
 8024074:	005b      	lsls	r3, r3, #1
 8024076:	4413      	add	r3, r2
 8024078:	00db      	lsls	r3, r3, #3
 802407a:	440b      	add	r3, r1
 802407c:	3308      	adds	r3, #8
 802407e:	68fa      	ldr	r2, [r7, #12]
 8024080:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8024082:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024086:	4613      	mov	r3, r2
 8024088:	005b      	lsls	r3, r3, #1
 802408a:	4413      	add	r3, r2
 802408c:	00db      	lsls	r3, r3, #3
 802408e:	3308      	adds	r3, #8
 8024090:	4a25      	ldr	r2, [pc, #148]	; (8024128 <etharp_update_arp_entry+0x148>)
 8024092:	4413      	add	r3, r2
 8024094:	3304      	adds	r3, #4
 8024096:	2206      	movs	r2, #6
 8024098:	6879      	ldr	r1, [r7, #4]
 802409a:	4618      	mov	r0, r3
 802409c:	f002 f8ec 	bl	8026278 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80240a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80240a4:	4920      	ldr	r1, [pc, #128]	; (8024128 <etharp_update_arp_entry+0x148>)
 80240a6:	4613      	mov	r3, r2
 80240a8:	005b      	lsls	r3, r3, #1
 80240aa:	4413      	add	r3, r2
 80240ac:	00db      	lsls	r3, r3, #3
 80240ae:	440b      	add	r3, r1
 80240b0:	3312      	adds	r3, #18
 80240b2:	2200      	movs	r2, #0
 80240b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80240b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80240ba:	491b      	ldr	r1, [pc, #108]	; (8024128 <etharp_update_arp_entry+0x148>)
 80240bc:	4613      	mov	r3, r2
 80240be:	005b      	lsls	r3, r3, #1
 80240c0:	4413      	add	r3, r2
 80240c2:	00db      	lsls	r3, r3, #3
 80240c4:	440b      	add	r3, r1
 80240c6:	681b      	ldr	r3, [r3, #0]
 80240c8:	2b00      	cmp	r3, #0
 80240ca:	d021      	beq.n	8024110 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80240cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80240d0:	4915      	ldr	r1, [pc, #84]	; (8024128 <etharp_update_arp_entry+0x148>)
 80240d2:	4613      	mov	r3, r2
 80240d4:	005b      	lsls	r3, r3, #1
 80240d6:	4413      	add	r3, r2
 80240d8:	00db      	lsls	r3, r3, #3
 80240da:	440b      	add	r3, r1
 80240dc:	681b      	ldr	r3, [r3, #0]
 80240de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80240e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80240e4:	4910      	ldr	r1, [pc, #64]	; (8024128 <etharp_update_arp_entry+0x148>)
 80240e6:	4613      	mov	r3, r2
 80240e8:	005b      	lsls	r3, r3, #1
 80240ea:	4413      	add	r3, r2
 80240ec:	00db      	lsls	r3, r3, #3
 80240ee:	440b      	add	r3, r1
 80240f0:	2200      	movs	r2, #0
 80240f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80240f4:	68fb      	ldr	r3, [r7, #12]
 80240f6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80240fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80240fe:	9300      	str	r3, [sp, #0]
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	6939      	ldr	r1, [r7, #16]
 8024104:	68f8      	ldr	r0, [r7, #12]
 8024106:	f002 f82b 	bl	8026160 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802410a:	6938      	ldr	r0, [r7, #16]
 802410c:	f7fe fc8c 	bl	8022a28 <pbuf_free>
  }
  return ERR_OK;
 8024110:	2300      	movs	r3, #0
}
 8024112:	4618      	mov	r0, r3
 8024114:	3718      	adds	r7, #24
 8024116:	46bd      	mov	sp, r7
 8024118:	bd80      	pop	{r7, pc}
 802411a:	bf00      	nop
 802411c:	0802ce04 	.word	0x0802ce04
 8024120:	0802cf38 	.word	0x0802cf38
 8024124:	0802ceb8 	.word	0x0802ceb8
 8024128:	20015d94 	.word	0x20015d94

0802412c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 802412c:	b580      	push	{r7, lr}
 802412e:	b084      	sub	sp, #16
 8024130:	af00      	add	r7, sp, #0
 8024132:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024134:	2300      	movs	r3, #0
 8024136:	60fb      	str	r3, [r7, #12]
 8024138:	e01e      	b.n	8024178 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802413a:	4913      	ldr	r1, [pc, #76]	; (8024188 <etharp_cleanup_netif+0x5c>)
 802413c:	68fa      	ldr	r2, [r7, #12]
 802413e:	4613      	mov	r3, r2
 8024140:	005b      	lsls	r3, r3, #1
 8024142:	4413      	add	r3, r2
 8024144:	00db      	lsls	r3, r3, #3
 8024146:	440b      	add	r3, r1
 8024148:	3314      	adds	r3, #20
 802414a:	781b      	ldrb	r3, [r3, #0]
 802414c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802414e:	7afb      	ldrb	r3, [r7, #11]
 8024150:	2b00      	cmp	r3, #0
 8024152:	d00e      	beq.n	8024172 <etharp_cleanup_netif+0x46>
 8024154:	490c      	ldr	r1, [pc, #48]	; (8024188 <etharp_cleanup_netif+0x5c>)
 8024156:	68fa      	ldr	r2, [r7, #12]
 8024158:	4613      	mov	r3, r2
 802415a:	005b      	lsls	r3, r3, #1
 802415c:	4413      	add	r3, r2
 802415e:	00db      	lsls	r3, r3, #3
 8024160:	440b      	add	r3, r1
 8024162:	3308      	adds	r3, #8
 8024164:	681b      	ldr	r3, [r3, #0]
 8024166:	687a      	ldr	r2, [r7, #4]
 8024168:	429a      	cmp	r2, r3
 802416a:	d102      	bne.n	8024172 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 802416c:	68f8      	ldr	r0, [r7, #12]
 802416e:	f7ff fce5 	bl	8023b3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024172:	68fb      	ldr	r3, [r7, #12]
 8024174:	3301      	adds	r3, #1
 8024176:	60fb      	str	r3, [r7, #12]
 8024178:	68fb      	ldr	r3, [r7, #12]
 802417a:	2b31      	cmp	r3, #49	; 0x31
 802417c:	dddd      	ble.n	802413a <etharp_cleanup_netif+0xe>
    }
  }
}
 802417e:	bf00      	nop
 8024180:	bf00      	nop
 8024182:	3710      	adds	r7, #16
 8024184:	46bd      	mov	sp, r7
 8024186:	bd80      	pop	{r7, pc}
 8024188:	20015d94 	.word	0x20015d94

0802418c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 802418c:	b5b0      	push	{r4, r5, r7, lr}
 802418e:	b08a      	sub	sp, #40	; 0x28
 8024190:	af04      	add	r7, sp, #16
 8024192:	6078      	str	r0, [r7, #4]
 8024194:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8024196:	683b      	ldr	r3, [r7, #0]
 8024198:	2b00      	cmp	r3, #0
 802419a:	d107      	bne.n	80241ac <etharp_input+0x20>
 802419c:	4b3d      	ldr	r3, [pc, #244]	; (8024294 <etharp_input+0x108>)
 802419e:	f240 228a 	movw	r2, #650	; 0x28a
 80241a2:	493d      	ldr	r1, [pc, #244]	; (8024298 <etharp_input+0x10c>)
 80241a4:	483d      	ldr	r0, [pc, #244]	; (802429c <etharp_input+0x110>)
 80241a6:	f002 f977 	bl	8026498 <iprintf>
 80241aa:	e06f      	b.n	802428c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80241ac:	687b      	ldr	r3, [r7, #4]
 80241ae:	685b      	ldr	r3, [r3, #4]
 80241b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80241b2:	693b      	ldr	r3, [r7, #16]
 80241b4:	881b      	ldrh	r3, [r3, #0]
 80241b6:	b29b      	uxth	r3, r3
 80241b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80241bc:	d10c      	bne.n	80241d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80241be:	693b      	ldr	r3, [r7, #16]
 80241c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80241c2:	2b06      	cmp	r3, #6
 80241c4:	d108      	bne.n	80241d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80241c6:	693b      	ldr	r3, [r7, #16]
 80241c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80241ca:	2b04      	cmp	r3, #4
 80241cc:	d104      	bne.n	80241d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80241ce:	693b      	ldr	r3, [r7, #16]
 80241d0:	885b      	ldrh	r3, [r3, #2]
 80241d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80241d4:	2b08      	cmp	r3, #8
 80241d6:	d003      	beq.n	80241e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80241d8:	6878      	ldr	r0, [r7, #4]
 80241da:	f7fe fc25 	bl	8022a28 <pbuf_free>
    return;
 80241de:	e055      	b.n	802428c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80241e0:	693b      	ldr	r3, [r7, #16]
 80241e2:	330e      	adds	r3, #14
 80241e4:	681b      	ldr	r3, [r3, #0]
 80241e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80241e8:	693b      	ldr	r3, [r7, #16]
 80241ea:	3318      	adds	r3, #24
 80241ec:	681b      	ldr	r3, [r3, #0]
 80241ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80241f0:	683b      	ldr	r3, [r7, #0]
 80241f2:	3304      	adds	r3, #4
 80241f4:	681b      	ldr	r3, [r3, #0]
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	d102      	bne.n	8024200 <etharp_input+0x74>
    for_us = 0;
 80241fa:	2300      	movs	r3, #0
 80241fc:	75fb      	strb	r3, [r7, #23]
 80241fe:	e009      	b.n	8024214 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8024200:	68ba      	ldr	r2, [r7, #8]
 8024202:	683b      	ldr	r3, [r7, #0]
 8024204:	3304      	adds	r3, #4
 8024206:	681b      	ldr	r3, [r3, #0]
 8024208:	429a      	cmp	r2, r3
 802420a:	bf0c      	ite	eq
 802420c:	2301      	moveq	r3, #1
 802420e:	2300      	movne	r3, #0
 8024210:	b2db      	uxtb	r3, r3
 8024212:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8024214:	693b      	ldr	r3, [r7, #16]
 8024216:	f103 0208 	add.w	r2, r3, #8
 802421a:	7dfb      	ldrb	r3, [r7, #23]
 802421c:	2b00      	cmp	r3, #0
 802421e:	d001      	beq.n	8024224 <etharp_input+0x98>
 8024220:	2301      	movs	r3, #1
 8024222:	e000      	b.n	8024226 <etharp_input+0x9a>
 8024224:	2302      	movs	r3, #2
 8024226:	f107 010c 	add.w	r1, r7, #12
 802422a:	6838      	ldr	r0, [r7, #0]
 802422c:	f7ff fed8 	bl	8023fe0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8024230:	693b      	ldr	r3, [r7, #16]
 8024232:	88db      	ldrh	r3, [r3, #6]
 8024234:	b29b      	uxth	r3, r3
 8024236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802423a:	d003      	beq.n	8024244 <etharp_input+0xb8>
 802423c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024240:	d01e      	beq.n	8024280 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8024242:	e020      	b.n	8024286 <etharp_input+0xfa>
      if (for_us) {
 8024244:	7dfb      	ldrb	r3, [r7, #23]
 8024246:	2b00      	cmp	r3, #0
 8024248:	d01c      	beq.n	8024284 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802424a:	683b      	ldr	r3, [r7, #0]
 802424c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8024250:	693b      	ldr	r3, [r7, #16]
 8024252:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8024256:	683b      	ldr	r3, [r7, #0]
 8024258:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 802425c:	683b      	ldr	r3, [r7, #0]
 802425e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8024260:	693a      	ldr	r2, [r7, #16]
 8024262:	3208      	adds	r2, #8
        etharp_raw(netif,
 8024264:	2102      	movs	r1, #2
 8024266:	9103      	str	r1, [sp, #12]
 8024268:	f107 010c 	add.w	r1, r7, #12
 802426c:	9102      	str	r1, [sp, #8]
 802426e:	9201      	str	r2, [sp, #4]
 8024270:	9300      	str	r3, [sp, #0]
 8024272:	462b      	mov	r3, r5
 8024274:	4622      	mov	r2, r4
 8024276:	4601      	mov	r1, r0
 8024278:	6838      	ldr	r0, [r7, #0]
 802427a:	f000 faeb 	bl	8024854 <etharp_raw>
      break;
 802427e:	e001      	b.n	8024284 <etharp_input+0xf8>
      break;
 8024280:	bf00      	nop
 8024282:	e000      	b.n	8024286 <etharp_input+0xfa>
      break;
 8024284:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8024286:	6878      	ldr	r0, [r7, #4]
 8024288:	f7fe fbce 	bl	8022a28 <pbuf_free>
}
 802428c:	3718      	adds	r7, #24
 802428e:	46bd      	mov	sp, r7
 8024290:	bdb0      	pop	{r4, r5, r7, pc}
 8024292:	bf00      	nop
 8024294:	0802ce04 	.word	0x0802ce04
 8024298:	0802cf90 	.word	0x0802cf90
 802429c:	0802ceb8 	.word	0x0802ceb8

080242a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80242a0:	b580      	push	{r7, lr}
 80242a2:	b086      	sub	sp, #24
 80242a4:	af02      	add	r7, sp, #8
 80242a6:	60f8      	str	r0, [r7, #12]
 80242a8:	60b9      	str	r1, [r7, #8]
 80242aa:	4613      	mov	r3, r2
 80242ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80242ae:	79fa      	ldrb	r2, [r7, #7]
 80242b0:	4944      	ldr	r1, [pc, #272]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 80242b2:	4613      	mov	r3, r2
 80242b4:	005b      	lsls	r3, r3, #1
 80242b6:	4413      	add	r3, r2
 80242b8:	00db      	lsls	r3, r3, #3
 80242ba:	440b      	add	r3, r1
 80242bc:	3314      	adds	r3, #20
 80242be:	781b      	ldrb	r3, [r3, #0]
 80242c0:	2b01      	cmp	r3, #1
 80242c2:	d806      	bhi.n	80242d2 <etharp_output_to_arp_index+0x32>
 80242c4:	4b40      	ldr	r3, [pc, #256]	; (80243c8 <etharp_output_to_arp_index+0x128>)
 80242c6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80242ca:	4940      	ldr	r1, [pc, #256]	; (80243cc <etharp_output_to_arp_index+0x12c>)
 80242cc:	4840      	ldr	r0, [pc, #256]	; (80243d0 <etharp_output_to_arp_index+0x130>)
 80242ce:	f002 f8e3 	bl	8026498 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80242d2:	79fa      	ldrb	r2, [r7, #7]
 80242d4:	493b      	ldr	r1, [pc, #236]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 80242d6:	4613      	mov	r3, r2
 80242d8:	005b      	lsls	r3, r3, #1
 80242da:	4413      	add	r3, r2
 80242dc:	00db      	lsls	r3, r3, #3
 80242de:	440b      	add	r3, r1
 80242e0:	3314      	adds	r3, #20
 80242e2:	781b      	ldrb	r3, [r3, #0]
 80242e4:	2b02      	cmp	r3, #2
 80242e6:	d153      	bne.n	8024390 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80242e8:	79fa      	ldrb	r2, [r7, #7]
 80242ea:	4936      	ldr	r1, [pc, #216]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 80242ec:	4613      	mov	r3, r2
 80242ee:	005b      	lsls	r3, r3, #1
 80242f0:	4413      	add	r3, r2
 80242f2:	00db      	lsls	r3, r3, #3
 80242f4:	440b      	add	r3, r1
 80242f6:	3312      	adds	r3, #18
 80242f8:	881b      	ldrh	r3, [r3, #0]
 80242fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80242fe:	d919      	bls.n	8024334 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8024300:	79fa      	ldrb	r2, [r7, #7]
 8024302:	4613      	mov	r3, r2
 8024304:	005b      	lsls	r3, r3, #1
 8024306:	4413      	add	r3, r2
 8024308:	00db      	lsls	r3, r3, #3
 802430a:	4a2e      	ldr	r2, [pc, #184]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 802430c:	4413      	add	r3, r2
 802430e:	3304      	adds	r3, #4
 8024310:	4619      	mov	r1, r3
 8024312:	68f8      	ldr	r0, [r7, #12]
 8024314:	f000 fb4c 	bl	80249b0 <etharp_request>
 8024318:	4603      	mov	r3, r0
 802431a:	2b00      	cmp	r3, #0
 802431c:	d138      	bne.n	8024390 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802431e:	79fa      	ldrb	r2, [r7, #7]
 8024320:	4928      	ldr	r1, [pc, #160]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 8024322:	4613      	mov	r3, r2
 8024324:	005b      	lsls	r3, r3, #1
 8024326:	4413      	add	r3, r2
 8024328:	00db      	lsls	r3, r3, #3
 802432a:	440b      	add	r3, r1
 802432c:	3314      	adds	r3, #20
 802432e:	2203      	movs	r2, #3
 8024330:	701a      	strb	r2, [r3, #0]
 8024332:	e02d      	b.n	8024390 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8024334:	79fa      	ldrb	r2, [r7, #7]
 8024336:	4923      	ldr	r1, [pc, #140]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 8024338:	4613      	mov	r3, r2
 802433a:	005b      	lsls	r3, r3, #1
 802433c:	4413      	add	r3, r2
 802433e:	00db      	lsls	r3, r3, #3
 8024340:	440b      	add	r3, r1
 8024342:	3312      	adds	r3, #18
 8024344:	881b      	ldrh	r3, [r3, #0]
 8024346:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802434a:	d321      	bcc.n	8024390 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802434c:	79fa      	ldrb	r2, [r7, #7]
 802434e:	4613      	mov	r3, r2
 8024350:	005b      	lsls	r3, r3, #1
 8024352:	4413      	add	r3, r2
 8024354:	00db      	lsls	r3, r3, #3
 8024356:	4a1b      	ldr	r2, [pc, #108]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 8024358:	4413      	add	r3, r2
 802435a:	1d19      	adds	r1, r3, #4
 802435c:	79fa      	ldrb	r2, [r7, #7]
 802435e:	4613      	mov	r3, r2
 8024360:	005b      	lsls	r3, r3, #1
 8024362:	4413      	add	r3, r2
 8024364:	00db      	lsls	r3, r3, #3
 8024366:	3308      	adds	r3, #8
 8024368:	4a16      	ldr	r2, [pc, #88]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 802436a:	4413      	add	r3, r2
 802436c:	3304      	adds	r3, #4
 802436e:	461a      	mov	r2, r3
 8024370:	68f8      	ldr	r0, [r7, #12]
 8024372:	f000 fafb 	bl	802496c <etharp_request_dst>
 8024376:	4603      	mov	r3, r0
 8024378:	2b00      	cmp	r3, #0
 802437a:	d109      	bne.n	8024390 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802437c:	79fa      	ldrb	r2, [r7, #7]
 802437e:	4911      	ldr	r1, [pc, #68]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 8024380:	4613      	mov	r3, r2
 8024382:	005b      	lsls	r3, r3, #1
 8024384:	4413      	add	r3, r2
 8024386:	00db      	lsls	r3, r3, #3
 8024388:	440b      	add	r3, r1
 802438a:	3314      	adds	r3, #20
 802438c:	2203      	movs	r2, #3
 802438e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8024390:	68fb      	ldr	r3, [r7, #12]
 8024392:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8024396:	79fa      	ldrb	r2, [r7, #7]
 8024398:	4613      	mov	r3, r2
 802439a:	005b      	lsls	r3, r3, #1
 802439c:	4413      	add	r3, r2
 802439e:	00db      	lsls	r3, r3, #3
 80243a0:	3308      	adds	r3, #8
 80243a2:	4a08      	ldr	r2, [pc, #32]	; (80243c4 <etharp_output_to_arp_index+0x124>)
 80243a4:	4413      	add	r3, r2
 80243a6:	3304      	adds	r3, #4
 80243a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80243ac:	9200      	str	r2, [sp, #0]
 80243ae:	460a      	mov	r2, r1
 80243b0:	68b9      	ldr	r1, [r7, #8]
 80243b2:	68f8      	ldr	r0, [r7, #12]
 80243b4:	f001 fed4 	bl	8026160 <ethernet_output>
 80243b8:	4603      	mov	r3, r0
}
 80243ba:	4618      	mov	r0, r3
 80243bc:	3710      	adds	r7, #16
 80243be:	46bd      	mov	sp, r7
 80243c0:	bd80      	pop	{r7, pc}
 80243c2:	bf00      	nop
 80243c4:	20015d94 	.word	0x20015d94
 80243c8:	0802ce04 	.word	0x0802ce04
 80243cc:	0802cfb0 	.word	0x0802cfb0
 80243d0:	0802ceb8 	.word	0x0802ceb8

080243d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80243d4:	b580      	push	{r7, lr}
 80243d6:	b08a      	sub	sp, #40	; 0x28
 80243d8:	af02      	add	r7, sp, #8
 80243da:	60f8      	str	r0, [r7, #12]
 80243dc:	60b9      	str	r1, [r7, #8]
 80243de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80243e0:	687b      	ldr	r3, [r7, #4]
 80243e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80243e4:	68fb      	ldr	r3, [r7, #12]
 80243e6:	2b00      	cmp	r3, #0
 80243e8:	d106      	bne.n	80243f8 <etharp_output+0x24>
 80243ea:	4b73      	ldr	r3, [pc, #460]	; (80245b8 <etharp_output+0x1e4>)
 80243ec:	f240 321e 	movw	r2, #798	; 0x31e
 80243f0:	4972      	ldr	r1, [pc, #456]	; (80245bc <etharp_output+0x1e8>)
 80243f2:	4873      	ldr	r0, [pc, #460]	; (80245c0 <etharp_output+0x1ec>)
 80243f4:	f002 f850 	bl	8026498 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80243f8:	68bb      	ldr	r3, [r7, #8]
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	d106      	bne.n	802440c <etharp_output+0x38>
 80243fe:	4b6e      	ldr	r3, [pc, #440]	; (80245b8 <etharp_output+0x1e4>)
 8024400:	f240 321f 	movw	r2, #799	; 0x31f
 8024404:	496f      	ldr	r1, [pc, #444]	; (80245c4 <etharp_output+0x1f0>)
 8024406:	486e      	ldr	r0, [pc, #440]	; (80245c0 <etharp_output+0x1ec>)
 8024408:	f002 f846 	bl	8026498 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802440c:	687b      	ldr	r3, [r7, #4]
 802440e:	2b00      	cmp	r3, #0
 8024410:	d106      	bne.n	8024420 <etharp_output+0x4c>
 8024412:	4b69      	ldr	r3, [pc, #420]	; (80245b8 <etharp_output+0x1e4>)
 8024414:	f44f 7248 	mov.w	r2, #800	; 0x320
 8024418:	496b      	ldr	r1, [pc, #428]	; (80245c8 <etharp_output+0x1f4>)
 802441a:	4869      	ldr	r0, [pc, #420]	; (80245c0 <etharp_output+0x1ec>)
 802441c:	f002 f83c 	bl	8026498 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8024420:	687b      	ldr	r3, [r7, #4]
 8024422:	681b      	ldr	r3, [r3, #0]
 8024424:	68f9      	ldr	r1, [r7, #12]
 8024426:	4618      	mov	r0, r3
 8024428:	f000 fefc 	bl	8025224 <ip4_addr_isbroadcast_u32>
 802442c:	4603      	mov	r3, r0
 802442e:	2b00      	cmp	r3, #0
 8024430:	d002      	beq.n	8024438 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8024432:	4b66      	ldr	r3, [pc, #408]	; (80245cc <etharp_output+0x1f8>)
 8024434:	61fb      	str	r3, [r7, #28]
 8024436:	e0af      	b.n	8024598 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8024438:	687b      	ldr	r3, [r7, #4]
 802443a:	681b      	ldr	r3, [r3, #0]
 802443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024440:	2be0      	cmp	r3, #224	; 0xe0
 8024442:	d118      	bne.n	8024476 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8024444:	2301      	movs	r3, #1
 8024446:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8024448:	2300      	movs	r3, #0
 802444a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802444c:	235e      	movs	r3, #94	; 0x5e
 802444e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8024450:	687b      	ldr	r3, [r7, #4]
 8024452:	3301      	adds	r3, #1
 8024454:	781b      	ldrb	r3, [r3, #0]
 8024456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802445a:	b2db      	uxtb	r3, r3
 802445c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802445e:	687b      	ldr	r3, [r7, #4]
 8024460:	3302      	adds	r3, #2
 8024462:	781b      	ldrb	r3, [r3, #0]
 8024464:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8024466:	687b      	ldr	r3, [r7, #4]
 8024468:	3303      	adds	r3, #3
 802446a:	781b      	ldrb	r3, [r3, #0]
 802446c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802446e:	f107 0310 	add.w	r3, r7, #16
 8024472:	61fb      	str	r3, [r7, #28]
 8024474:	e090      	b.n	8024598 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8024476:	687b      	ldr	r3, [r7, #4]
 8024478:	681a      	ldr	r2, [r3, #0]
 802447a:	68fb      	ldr	r3, [r7, #12]
 802447c:	3304      	adds	r3, #4
 802447e:	681b      	ldr	r3, [r3, #0]
 8024480:	405a      	eors	r2, r3
 8024482:	68fb      	ldr	r3, [r7, #12]
 8024484:	3308      	adds	r3, #8
 8024486:	681b      	ldr	r3, [r3, #0]
 8024488:	4013      	ands	r3, r2
 802448a:	2b00      	cmp	r3, #0
 802448c:	d012      	beq.n	80244b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802448e:	687b      	ldr	r3, [r7, #4]
 8024490:	681b      	ldr	r3, [r3, #0]
 8024492:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8024494:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8024498:	4293      	cmp	r3, r2
 802449a:	d00b      	beq.n	80244b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 802449c:	68fb      	ldr	r3, [r7, #12]
 802449e:	330c      	adds	r3, #12
 80244a0:	681b      	ldr	r3, [r3, #0]
 80244a2:	2b00      	cmp	r3, #0
 80244a4:	d003      	beq.n	80244ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80244a6:	68fb      	ldr	r3, [r7, #12]
 80244a8:	330c      	adds	r3, #12
 80244aa:	61bb      	str	r3, [r7, #24]
 80244ac:	e002      	b.n	80244b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80244ae:	f06f 0303 	mvn.w	r3, #3
 80244b2:	e07d      	b.n	80245b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80244b4:	4b46      	ldr	r3, [pc, #280]	; (80245d0 <etharp_output+0x1fc>)
 80244b6:	781b      	ldrb	r3, [r3, #0]
 80244b8:	4619      	mov	r1, r3
 80244ba:	4a46      	ldr	r2, [pc, #280]	; (80245d4 <etharp_output+0x200>)
 80244bc:	460b      	mov	r3, r1
 80244be:	005b      	lsls	r3, r3, #1
 80244c0:	440b      	add	r3, r1
 80244c2:	00db      	lsls	r3, r3, #3
 80244c4:	4413      	add	r3, r2
 80244c6:	3314      	adds	r3, #20
 80244c8:	781b      	ldrb	r3, [r3, #0]
 80244ca:	2b01      	cmp	r3, #1
 80244cc:	d925      	bls.n	802451a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80244ce:	4b40      	ldr	r3, [pc, #256]	; (80245d0 <etharp_output+0x1fc>)
 80244d0:	781b      	ldrb	r3, [r3, #0]
 80244d2:	4619      	mov	r1, r3
 80244d4:	4a3f      	ldr	r2, [pc, #252]	; (80245d4 <etharp_output+0x200>)
 80244d6:	460b      	mov	r3, r1
 80244d8:	005b      	lsls	r3, r3, #1
 80244da:	440b      	add	r3, r1
 80244dc:	00db      	lsls	r3, r3, #3
 80244de:	4413      	add	r3, r2
 80244e0:	3308      	adds	r3, #8
 80244e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80244e4:	68fa      	ldr	r2, [r7, #12]
 80244e6:	429a      	cmp	r2, r3
 80244e8:	d117      	bne.n	802451a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80244ea:	69bb      	ldr	r3, [r7, #24]
 80244ec:	681a      	ldr	r2, [r3, #0]
 80244ee:	4b38      	ldr	r3, [pc, #224]	; (80245d0 <etharp_output+0x1fc>)
 80244f0:	781b      	ldrb	r3, [r3, #0]
 80244f2:	4618      	mov	r0, r3
 80244f4:	4937      	ldr	r1, [pc, #220]	; (80245d4 <etharp_output+0x200>)
 80244f6:	4603      	mov	r3, r0
 80244f8:	005b      	lsls	r3, r3, #1
 80244fa:	4403      	add	r3, r0
 80244fc:	00db      	lsls	r3, r3, #3
 80244fe:	440b      	add	r3, r1
 8024500:	3304      	adds	r3, #4
 8024502:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8024504:	429a      	cmp	r2, r3
 8024506:	d108      	bne.n	802451a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8024508:	4b31      	ldr	r3, [pc, #196]	; (80245d0 <etharp_output+0x1fc>)
 802450a:	781b      	ldrb	r3, [r3, #0]
 802450c:	461a      	mov	r2, r3
 802450e:	68b9      	ldr	r1, [r7, #8]
 8024510:	68f8      	ldr	r0, [r7, #12]
 8024512:	f7ff fec5 	bl	80242a0 <etharp_output_to_arp_index>
 8024516:	4603      	mov	r3, r0
 8024518:	e04a      	b.n	80245b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802451a:	2300      	movs	r3, #0
 802451c:	75fb      	strb	r3, [r7, #23]
 802451e:	e031      	b.n	8024584 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024520:	7dfa      	ldrb	r2, [r7, #23]
 8024522:	492c      	ldr	r1, [pc, #176]	; (80245d4 <etharp_output+0x200>)
 8024524:	4613      	mov	r3, r2
 8024526:	005b      	lsls	r3, r3, #1
 8024528:	4413      	add	r3, r2
 802452a:	00db      	lsls	r3, r3, #3
 802452c:	440b      	add	r3, r1
 802452e:	3314      	adds	r3, #20
 8024530:	781b      	ldrb	r3, [r3, #0]
 8024532:	2b01      	cmp	r3, #1
 8024534:	d923      	bls.n	802457e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8024536:	7dfa      	ldrb	r2, [r7, #23]
 8024538:	4926      	ldr	r1, [pc, #152]	; (80245d4 <etharp_output+0x200>)
 802453a:	4613      	mov	r3, r2
 802453c:	005b      	lsls	r3, r3, #1
 802453e:	4413      	add	r3, r2
 8024540:	00db      	lsls	r3, r3, #3
 8024542:	440b      	add	r3, r1
 8024544:	3308      	adds	r3, #8
 8024546:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024548:	68fa      	ldr	r2, [r7, #12]
 802454a:	429a      	cmp	r2, r3
 802454c:	d117      	bne.n	802457e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 802454e:	69bb      	ldr	r3, [r7, #24]
 8024550:	6819      	ldr	r1, [r3, #0]
 8024552:	7dfa      	ldrb	r2, [r7, #23]
 8024554:	481f      	ldr	r0, [pc, #124]	; (80245d4 <etharp_output+0x200>)
 8024556:	4613      	mov	r3, r2
 8024558:	005b      	lsls	r3, r3, #1
 802455a:	4413      	add	r3, r2
 802455c:	00db      	lsls	r3, r3, #3
 802455e:	4403      	add	r3, r0
 8024560:	3304      	adds	r3, #4
 8024562:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8024564:	4299      	cmp	r1, r3
 8024566:	d10a      	bne.n	802457e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8024568:	4a19      	ldr	r2, [pc, #100]	; (80245d0 <etharp_output+0x1fc>)
 802456a:	7dfb      	ldrb	r3, [r7, #23]
 802456c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 802456e:	7dfb      	ldrb	r3, [r7, #23]
 8024570:	461a      	mov	r2, r3
 8024572:	68b9      	ldr	r1, [r7, #8]
 8024574:	68f8      	ldr	r0, [r7, #12]
 8024576:	f7ff fe93 	bl	80242a0 <etharp_output_to_arp_index>
 802457a:	4603      	mov	r3, r0
 802457c:	e018      	b.n	80245b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802457e:	7dfb      	ldrb	r3, [r7, #23]
 8024580:	3301      	adds	r3, #1
 8024582:	75fb      	strb	r3, [r7, #23]
 8024584:	7dfb      	ldrb	r3, [r7, #23]
 8024586:	2b31      	cmp	r3, #49	; 0x31
 8024588:	d9ca      	bls.n	8024520 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 802458a:	68ba      	ldr	r2, [r7, #8]
 802458c:	69b9      	ldr	r1, [r7, #24]
 802458e:	68f8      	ldr	r0, [r7, #12]
 8024590:	f000 f822 	bl	80245d8 <etharp_query>
 8024594:	4603      	mov	r3, r0
 8024596:	e00b      	b.n	80245b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8024598:	68fb      	ldr	r3, [r7, #12]
 802459a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802459e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80245a2:	9300      	str	r3, [sp, #0]
 80245a4:	69fb      	ldr	r3, [r7, #28]
 80245a6:	68b9      	ldr	r1, [r7, #8]
 80245a8:	68f8      	ldr	r0, [r7, #12]
 80245aa:	f001 fdd9 	bl	8026160 <ethernet_output>
 80245ae:	4603      	mov	r3, r0
}
 80245b0:	4618      	mov	r0, r3
 80245b2:	3720      	adds	r7, #32
 80245b4:	46bd      	mov	sp, r7
 80245b6:	bd80      	pop	{r7, pc}
 80245b8:	0802ce04 	.word	0x0802ce04
 80245bc:	0802cf90 	.word	0x0802cf90
 80245c0:	0802ceb8 	.word	0x0802ceb8
 80245c4:	0802cfe0 	.word	0x0802cfe0
 80245c8:	0802cf80 	.word	0x0802cf80
 80245cc:	0802daa4 	.word	0x0802daa4
 80245d0:	20016244 	.word	0x20016244
 80245d4:	20015d94 	.word	0x20015d94

080245d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80245d8:	b580      	push	{r7, lr}
 80245da:	b08c      	sub	sp, #48	; 0x30
 80245dc:	af02      	add	r7, sp, #8
 80245de:	60f8      	str	r0, [r7, #12]
 80245e0:	60b9      	str	r1, [r7, #8]
 80245e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80245e4:	68fb      	ldr	r3, [r7, #12]
 80245e6:	332a      	adds	r3, #42	; 0x2a
 80245e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80245ea:	23ff      	movs	r3, #255	; 0xff
 80245ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80245f0:	2300      	movs	r3, #0
 80245f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80245f4:	68bb      	ldr	r3, [r7, #8]
 80245f6:	681b      	ldr	r3, [r3, #0]
 80245f8:	68f9      	ldr	r1, [r7, #12]
 80245fa:	4618      	mov	r0, r3
 80245fc:	f000 fe12 	bl	8025224 <ip4_addr_isbroadcast_u32>
 8024600:	4603      	mov	r3, r0
 8024602:	2b00      	cmp	r3, #0
 8024604:	d10c      	bne.n	8024620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024606:	68bb      	ldr	r3, [r7, #8]
 8024608:	681b      	ldr	r3, [r3, #0]
 802460a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802460e:	2be0      	cmp	r3, #224	; 0xe0
 8024610:	d006      	beq.n	8024620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024612:	68bb      	ldr	r3, [r7, #8]
 8024614:	2b00      	cmp	r3, #0
 8024616:	d003      	beq.n	8024620 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8024618:	68bb      	ldr	r3, [r7, #8]
 802461a:	681b      	ldr	r3, [r3, #0]
 802461c:	2b00      	cmp	r3, #0
 802461e:	d102      	bne.n	8024626 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024620:	f06f 030f 	mvn.w	r3, #15
 8024624:	e101      	b.n	802482a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8024626:	68fa      	ldr	r2, [r7, #12]
 8024628:	2101      	movs	r1, #1
 802462a:	68b8      	ldr	r0, [r7, #8]
 802462c:	f7ff fb60 	bl	8023cf0 <etharp_find_entry>
 8024630:	4603      	mov	r3, r0
 8024632:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8024634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8024638:	2b00      	cmp	r3, #0
 802463a:	da02      	bge.n	8024642 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 802463c:	8a7b      	ldrh	r3, [r7, #18]
 802463e:	b25b      	sxtb	r3, r3
 8024640:	e0f3      	b.n	802482a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8024642:	8a7b      	ldrh	r3, [r7, #18]
 8024644:	2b7e      	cmp	r3, #126	; 0x7e
 8024646:	d906      	bls.n	8024656 <etharp_query+0x7e>
 8024648:	4b7a      	ldr	r3, [pc, #488]	; (8024834 <etharp_query+0x25c>)
 802464a:	f240 32c1 	movw	r2, #961	; 0x3c1
 802464e:	497a      	ldr	r1, [pc, #488]	; (8024838 <etharp_query+0x260>)
 8024650:	487a      	ldr	r0, [pc, #488]	; (802483c <etharp_query+0x264>)
 8024652:	f001 ff21 	bl	8026498 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8024656:	8a7b      	ldrh	r3, [r7, #18]
 8024658:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 802465a:	7c7a      	ldrb	r2, [r7, #17]
 802465c:	4978      	ldr	r1, [pc, #480]	; (8024840 <etharp_query+0x268>)
 802465e:	4613      	mov	r3, r2
 8024660:	005b      	lsls	r3, r3, #1
 8024662:	4413      	add	r3, r2
 8024664:	00db      	lsls	r3, r3, #3
 8024666:	440b      	add	r3, r1
 8024668:	3314      	adds	r3, #20
 802466a:	781b      	ldrb	r3, [r3, #0]
 802466c:	2b00      	cmp	r3, #0
 802466e:	d115      	bne.n	802469c <etharp_query+0xc4>
    is_new_entry = 1;
 8024670:	2301      	movs	r3, #1
 8024672:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8024674:	7c7a      	ldrb	r2, [r7, #17]
 8024676:	4972      	ldr	r1, [pc, #456]	; (8024840 <etharp_query+0x268>)
 8024678:	4613      	mov	r3, r2
 802467a:	005b      	lsls	r3, r3, #1
 802467c:	4413      	add	r3, r2
 802467e:	00db      	lsls	r3, r3, #3
 8024680:	440b      	add	r3, r1
 8024682:	3314      	adds	r3, #20
 8024684:	2201      	movs	r2, #1
 8024686:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8024688:	7c7a      	ldrb	r2, [r7, #17]
 802468a:	496d      	ldr	r1, [pc, #436]	; (8024840 <etharp_query+0x268>)
 802468c:	4613      	mov	r3, r2
 802468e:	005b      	lsls	r3, r3, #1
 8024690:	4413      	add	r3, r2
 8024692:	00db      	lsls	r3, r3, #3
 8024694:	440b      	add	r3, r1
 8024696:	3308      	adds	r3, #8
 8024698:	68fa      	ldr	r2, [r7, #12]
 802469a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 802469c:	7c7a      	ldrb	r2, [r7, #17]
 802469e:	4968      	ldr	r1, [pc, #416]	; (8024840 <etharp_query+0x268>)
 80246a0:	4613      	mov	r3, r2
 80246a2:	005b      	lsls	r3, r3, #1
 80246a4:	4413      	add	r3, r2
 80246a6:	00db      	lsls	r3, r3, #3
 80246a8:	440b      	add	r3, r1
 80246aa:	3314      	adds	r3, #20
 80246ac:	781b      	ldrb	r3, [r3, #0]
 80246ae:	2b01      	cmp	r3, #1
 80246b0:	d011      	beq.n	80246d6 <etharp_query+0xfe>
 80246b2:	7c7a      	ldrb	r2, [r7, #17]
 80246b4:	4962      	ldr	r1, [pc, #392]	; (8024840 <etharp_query+0x268>)
 80246b6:	4613      	mov	r3, r2
 80246b8:	005b      	lsls	r3, r3, #1
 80246ba:	4413      	add	r3, r2
 80246bc:	00db      	lsls	r3, r3, #3
 80246be:	440b      	add	r3, r1
 80246c0:	3314      	adds	r3, #20
 80246c2:	781b      	ldrb	r3, [r3, #0]
 80246c4:	2b01      	cmp	r3, #1
 80246c6:	d806      	bhi.n	80246d6 <etharp_query+0xfe>
 80246c8:	4b5a      	ldr	r3, [pc, #360]	; (8024834 <etharp_query+0x25c>)
 80246ca:	f240 32cd 	movw	r2, #973	; 0x3cd
 80246ce:	495d      	ldr	r1, [pc, #372]	; (8024844 <etharp_query+0x26c>)
 80246d0:	485a      	ldr	r0, [pc, #360]	; (802483c <etharp_query+0x264>)
 80246d2:	f001 fee1 	bl	8026498 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80246d6:	6a3b      	ldr	r3, [r7, #32]
 80246d8:	2b00      	cmp	r3, #0
 80246da:	d102      	bne.n	80246e2 <etharp_query+0x10a>
 80246dc:	687b      	ldr	r3, [r7, #4]
 80246de:	2b00      	cmp	r3, #0
 80246e0:	d10c      	bne.n	80246fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80246e2:	68b9      	ldr	r1, [r7, #8]
 80246e4:	68f8      	ldr	r0, [r7, #12]
 80246e6:	f000 f963 	bl	80249b0 <etharp_request>
 80246ea:	4603      	mov	r3, r0
 80246ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	2b00      	cmp	r3, #0
 80246f4:	d102      	bne.n	80246fc <etharp_query+0x124>
      return result;
 80246f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80246fa:	e096      	b.n	802482a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80246fc:	687b      	ldr	r3, [r7, #4]
 80246fe:	2b00      	cmp	r3, #0
 8024700:	d106      	bne.n	8024710 <etharp_query+0x138>
 8024702:	4b4c      	ldr	r3, [pc, #304]	; (8024834 <etharp_query+0x25c>)
 8024704:	f240 32e1 	movw	r2, #993	; 0x3e1
 8024708:	494f      	ldr	r1, [pc, #316]	; (8024848 <etharp_query+0x270>)
 802470a:	484c      	ldr	r0, [pc, #304]	; (802483c <etharp_query+0x264>)
 802470c:	f001 fec4 	bl	8026498 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8024710:	7c7a      	ldrb	r2, [r7, #17]
 8024712:	494b      	ldr	r1, [pc, #300]	; (8024840 <etharp_query+0x268>)
 8024714:	4613      	mov	r3, r2
 8024716:	005b      	lsls	r3, r3, #1
 8024718:	4413      	add	r3, r2
 802471a:	00db      	lsls	r3, r3, #3
 802471c:	440b      	add	r3, r1
 802471e:	3314      	adds	r3, #20
 8024720:	781b      	ldrb	r3, [r3, #0]
 8024722:	2b01      	cmp	r3, #1
 8024724:	d917      	bls.n	8024756 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8024726:	4a49      	ldr	r2, [pc, #292]	; (802484c <etharp_query+0x274>)
 8024728:	7c7b      	ldrb	r3, [r7, #17]
 802472a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802472c:	7c7a      	ldrb	r2, [r7, #17]
 802472e:	4613      	mov	r3, r2
 8024730:	005b      	lsls	r3, r3, #1
 8024732:	4413      	add	r3, r2
 8024734:	00db      	lsls	r3, r3, #3
 8024736:	3308      	adds	r3, #8
 8024738:	4a41      	ldr	r2, [pc, #260]	; (8024840 <etharp_query+0x268>)
 802473a:	4413      	add	r3, r2
 802473c:	3304      	adds	r3, #4
 802473e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8024742:	9200      	str	r2, [sp, #0]
 8024744:	697a      	ldr	r2, [r7, #20]
 8024746:	6879      	ldr	r1, [r7, #4]
 8024748:	68f8      	ldr	r0, [r7, #12]
 802474a:	f001 fd09 	bl	8026160 <ethernet_output>
 802474e:	4603      	mov	r3, r0
 8024750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024754:	e067      	b.n	8024826 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8024756:	7c7a      	ldrb	r2, [r7, #17]
 8024758:	4939      	ldr	r1, [pc, #228]	; (8024840 <etharp_query+0x268>)
 802475a:	4613      	mov	r3, r2
 802475c:	005b      	lsls	r3, r3, #1
 802475e:	4413      	add	r3, r2
 8024760:	00db      	lsls	r3, r3, #3
 8024762:	440b      	add	r3, r1
 8024764:	3314      	adds	r3, #20
 8024766:	781b      	ldrb	r3, [r3, #0]
 8024768:	2b01      	cmp	r3, #1
 802476a:	d15c      	bne.n	8024826 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 802476c:	2300      	movs	r3, #0
 802476e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8024770:	687b      	ldr	r3, [r7, #4]
 8024772:	61fb      	str	r3, [r7, #28]
    while (p) {
 8024774:	e01c      	b.n	80247b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8024776:	69fb      	ldr	r3, [r7, #28]
 8024778:	895a      	ldrh	r2, [r3, #10]
 802477a:	69fb      	ldr	r3, [r7, #28]
 802477c:	891b      	ldrh	r3, [r3, #8]
 802477e:	429a      	cmp	r2, r3
 8024780:	d10a      	bne.n	8024798 <etharp_query+0x1c0>
 8024782:	69fb      	ldr	r3, [r7, #28]
 8024784:	681b      	ldr	r3, [r3, #0]
 8024786:	2b00      	cmp	r3, #0
 8024788:	d006      	beq.n	8024798 <etharp_query+0x1c0>
 802478a:	4b2a      	ldr	r3, [pc, #168]	; (8024834 <etharp_query+0x25c>)
 802478c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8024790:	492f      	ldr	r1, [pc, #188]	; (8024850 <etharp_query+0x278>)
 8024792:	482a      	ldr	r0, [pc, #168]	; (802483c <etharp_query+0x264>)
 8024794:	f001 fe80 	bl	8026498 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8024798:	69fb      	ldr	r3, [r7, #28]
 802479a:	7b1b      	ldrb	r3, [r3, #12]
 802479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	d002      	beq.n	80247aa <etharp_query+0x1d2>
        copy_needed = 1;
 80247a4:	2301      	movs	r3, #1
 80247a6:	61bb      	str	r3, [r7, #24]
        break;
 80247a8:	e005      	b.n	80247b6 <etharp_query+0x1de>
      }
      p = p->next;
 80247aa:	69fb      	ldr	r3, [r7, #28]
 80247ac:	681b      	ldr	r3, [r3, #0]
 80247ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80247b0:	69fb      	ldr	r3, [r7, #28]
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	d1df      	bne.n	8024776 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80247b6:	69bb      	ldr	r3, [r7, #24]
 80247b8:	2b00      	cmp	r3, #0
 80247ba:	d007      	beq.n	80247cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80247bc:	687a      	ldr	r2, [r7, #4]
 80247be:	f44f 7120 	mov.w	r1, #640	; 0x280
 80247c2:	200e      	movs	r0, #14
 80247c4:	f7fe fbbc 	bl	8022f40 <pbuf_clone>
 80247c8:	61f8      	str	r0, [r7, #28]
 80247ca:	e004      	b.n	80247d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80247cc:	687b      	ldr	r3, [r7, #4]
 80247ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80247d0:	69f8      	ldr	r0, [r7, #28]
 80247d2:	f7fe f9c9 	bl	8022b68 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80247d6:	69fb      	ldr	r3, [r7, #28]
 80247d8:	2b00      	cmp	r3, #0
 80247da:	d021      	beq.n	8024820 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80247dc:	7c7a      	ldrb	r2, [r7, #17]
 80247de:	4918      	ldr	r1, [pc, #96]	; (8024840 <etharp_query+0x268>)
 80247e0:	4613      	mov	r3, r2
 80247e2:	005b      	lsls	r3, r3, #1
 80247e4:	4413      	add	r3, r2
 80247e6:	00db      	lsls	r3, r3, #3
 80247e8:	440b      	add	r3, r1
 80247ea:	681b      	ldr	r3, [r3, #0]
 80247ec:	2b00      	cmp	r3, #0
 80247ee:	d00a      	beq.n	8024806 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80247f0:	7c7a      	ldrb	r2, [r7, #17]
 80247f2:	4913      	ldr	r1, [pc, #76]	; (8024840 <etharp_query+0x268>)
 80247f4:	4613      	mov	r3, r2
 80247f6:	005b      	lsls	r3, r3, #1
 80247f8:	4413      	add	r3, r2
 80247fa:	00db      	lsls	r3, r3, #3
 80247fc:	440b      	add	r3, r1
 80247fe:	681b      	ldr	r3, [r3, #0]
 8024800:	4618      	mov	r0, r3
 8024802:	f7fe f911 	bl	8022a28 <pbuf_free>
      }
      arp_table[i].q = p;
 8024806:	7c7a      	ldrb	r2, [r7, #17]
 8024808:	490d      	ldr	r1, [pc, #52]	; (8024840 <etharp_query+0x268>)
 802480a:	4613      	mov	r3, r2
 802480c:	005b      	lsls	r3, r3, #1
 802480e:	4413      	add	r3, r2
 8024810:	00db      	lsls	r3, r3, #3
 8024812:	440b      	add	r3, r1
 8024814:	69fa      	ldr	r2, [r7, #28]
 8024816:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8024818:	2300      	movs	r3, #0
 802481a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802481e:	e002      	b.n	8024826 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8024820:	23ff      	movs	r3, #255	; 0xff
 8024822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8024826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802482a:	4618      	mov	r0, r3
 802482c:	3728      	adds	r7, #40	; 0x28
 802482e:	46bd      	mov	sp, r7
 8024830:	bd80      	pop	{r7, pc}
 8024832:	bf00      	nop
 8024834:	0802ce04 	.word	0x0802ce04
 8024838:	0802cfec 	.word	0x0802cfec
 802483c:	0802ceb8 	.word	0x0802ceb8
 8024840:	20015d94 	.word	0x20015d94
 8024844:	0802cffc 	.word	0x0802cffc
 8024848:	0802cfe0 	.word	0x0802cfe0
 802484c:	20016244 	.word	0x20016244
 8024850:	0802d024 	.word	0x0802d024

08024854 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8024854:	b580      	push	{r7, lr}
 8024856:	b08a      	sub	sp, #40	; 0x28
 8024858:	af02      	add	r7, sp, #8
 802485a:	60f8      	str	r0, [r7, #12]
 802485c:	60b9      	str	r1, [r7, #8]
 802485e:	607a      	str	r2, [r7, #4]
 8024860:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8024862:	2300      	movs	r3, #0
 8024864:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8024866:	68fb      	ldr	r3, [r7, #12]
 8024868:	2b00      	cmp	r3, #0
 802486a:	d106      	bne.n	802487a <etharp_raw+0x26>
 802486c:	4b3a      	ldr	r3, [pc, #232]	; (8024958 <etharp_raw+0x104>)
 802486e:	f240 4257 	movw	r2, #1111	; 0x457
 8024872:	493a      	ldr	r1, [pc, #232]	; (802495c <etharp_raw+0x108>)
 8024874:	483a      	ldr	r0, [pc, #232]	; (8024960 <etharp_raw+0x10c>)
 8024876:	f001 fe0f 	bl	8026498 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 802487a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802487e:	211c      	movs	r1, #28
 8024880:	200e      	movs	r0, #14
 8024882:	f7fd fdef 	bl	8022464 <pbuf_alloc>
 8024886:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8024888:	69bb      	ldr	r3, [r7, #24]
 802488a:	2b00      	cmp	r3, #0
 802488c:	d102      	bne.n	8024894 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 802488e:	f04f 33ff 	mov.w	r3, #4294967295
 8024892:	e05d      	b.n	8024950 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8024894:	69bb      	ldr	r3, [r7, #24]
 8024896:	895b      	ldrh	r3, [r3, #10]
 8024898:	2b1b      	cmp	r3, #27
 802489a:	d806      	bhi.n	80248aa <etharp_raw+0x56>
 802489c:	4b2e      	ldr	r3, [pc, #184]	; (8024958 <etharp_raw+0x104>)
 802489e:	f240 4262 	movw	r2, #1122	; 0x462
 80248a2:	4930      	ldr	r1, [pc, #192]	; (8024964 <etharp_raw+0x110>)
 80248a4:	482e      	ldr	r0, [pc, #184]	; (8024960 <etharp_raw+0x10c>)
 80248a6:	f001 fdf7 	bl	8026498 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80248aa:	69bb      	ldr	r3, [r7, #24]
 80248ac:	685b      	ldr	r3, [r3, #4]
 80248ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80248b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80248b2:	4618      	mov	r0, r3
 80248b4:	f7fc fcdc 	bl	8021270 <lwip_htons>
 80248b8:	4603      	mov	r3, r0
 80248ba:	461a      	mov	r2, r3
 80248bc:	697b      	ldr	r3, [r7, #20]
 80248be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80248c0:	68fb      	ldr	r3, [r7, #12]
 80248c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80248c6:	2b06      	cmp	r3, #6
 80248c8:	d006      	beq.n	80248d8 <etharp_raw+0x84>
 80248ca:	4b23      	ldr	r3, [pc, #140]	; (8024958 <etharp_raw+0x104>)
 80248cc:	f240 4269 	movw	r2, #1129	; 0x469
 80248d0:	4925      	ldr	r1, [pc, #148]	; (8024968 <etharp_raw+0x114>)
 80248d2:	4823      	ldr	r0, [pc, #140]	; (8024960 <etharp_raw+0x10c>)
 80248d4:	f001 fde0 	bl	8026498 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80248d8:	697b      	ldr	r3, [r7, #20]
 80248da:	3308      	adds	r3, #8
 80248dc:	2206      	movs	r2, #6
 80248de:	6839      	ldr	r1, [r7, #0]
 80248e0:	4618      	mov	r0, r3
 80248e2:	f001 fcc9 	bl	8026278 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80248e6:	697b      	ldr	r3, [r7, #20]
 80248e8:	3312      	adds	r3, #18
 80248ea:	2206      	movs	r2, #6
 80248ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80248ee:	4618      	mov	r0, r3
 80248f0:	f001 fcc2 	bl	8026278 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80248f4:	697b      	ldr	r3, [r7, #20]
 80248f6:	330e      	adds	r3, #14
 80248f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80248fa:	6812      	ldr	r2, [r2, #0]
 80248fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80248fe:	697b      	ldr	r3, [r7, #20]
 8024900:	3318      	adds	r3, #24
 8024902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024904:	6812      	ldr	r2, [r2, #0]
 8024906:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8024908:	697b      	ldr	r3, [r7, #20]
 802490a:	2200      	movs	r2, #0
 802490c:	701a      	strb	r2, [r3, #0]
 802490e:	2200      	movs	r2, #0
 8024910:	f042 0201 	orr.w	r2, r2, #1
 8024914:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8024916:	697b      	ldr	r3, [r7, #20]
 8024918:	2200      	movs	r2, #0
 802491a:	f042 0208 	orr.w	r2, r2, #8
 802491e:	709a      	strb	r2, [r3, #2]
 8024920:	2200      	movs	r2, #0
 8024922:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8024924:	697b      	ldr	r3, [r7, #20]
 8024926:	2206      	movs	r2, #6
 8024928:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 802492a:	697b      	ldr	r3, [r7, #20]
 802492c:	2204      	movs	r2, #4
 802492e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8024930:	f640 0306 	movw	r3, #2054	; 0x806
 8024934:	9300      	str	r3, [sp, #0]
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	68ba      	ldr	r2, [r7, #8]
 802493a:	69b9      	ldr	r1, [r7, #24]
 802493c:	68f8      	ldr	r0, [r7, #12]
 802493e:	f001 fc0f 	bl	8026160 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8024942:	69b8      	ldr	r0, [r7, #24]
 8024944:	f7fe f870 	bl	8022a28 <pbuf_free>
  p = NULL;
 8024948:	2300      	movs	r3, #0
 802494a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 802494c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024950:	4618      	mov	r0, r3
 8024952:	3720      	adds	r7, #32
 8024954:	46bd      	mov	sp, r7
 8024956:	bd80      	pop	{r7, pc}
 8024958:	0802ce04 	.word	0x0802ce04
 802495c:	0802cf90 	.word	0x0802cf90
 8024960:	0802ceb8 	.word	0x0802ceb8
 8024964:	0802d040 	.word	0x0802d040
 8024968:	0802d074 	.word	0x0802d074

0802496c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 802496c:	b580      	push	{r7, lr}
 802496e:	b088      	sub	sp, #32
 8024970:	af04      	add	r7, sp, #16
 8024972:	60f8      	str	r0, [r7, #12]
 8024974:	60b9      	str	r1, [r7, #8]
 8024976:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8024978:	68fb      	ldr	r3, [r7, #12]
 802497a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802497e:	68fb      	ldr	r3, [r7, #12]
 8024980:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8024984:	68fb      	ldr	r3, [r7, #12]
 8024986:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8024988:	2201      	movs	r2, #1
 802498a:	9203      	str	r2, [sp, #12]
 802498c:	68ba      	ldr	r2, [r7, #8]
 802498e:	9202      	str	r2, [sp, #8]
 8024990:	4a06      	ldr	r2, [pc, #24]	; (80249ac <etharp_request_dst+0x40>)
 8024992:	9201      	str	r2, [sp, #4]
 8024994:	9300      	str	r3, [sp, #0]
 8024996:	4603      	mov	r3, r0
 8024998:	687a      	ldr	r2, [r7, #4]
 802499a:	68f8      	ldr	r0, [r7, #12]
 802499c:	f7ff ff5a 	bl	8024854 <etharp_raw>
 80249a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80249a2:	4618      	mov	r0, r3
 80249a4:	3710      	adds	r7, #16
 80249a6:	46bd      	mov	sp, r7
 80249a8:	bd80      	pop	{r7, pc}
 80249aa:	bf00      	nop
 80249ac:	0802daac 	.word	0x0802daac

080249b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80249b0:	b580      	push	{r7, lr}
 80249b2:	b082      	sub	sp, #8
 80249b4:	af00      	add	r7, sp, #0
 80249b6:	6078      	str	r0, [r7, #4]
 80249b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80249ba:	4a05      	ldr	r2, [pc, #20]	; (80249d0 <etharp_request+0x20>)
 80249bc:	6839      	ldr	r1, [r7, #0]
 80249be:	6878      	ldr	r0, [r7, #4]
 80249c0:	f7ff ffd4 	bl	802496c <etharp_request_dst>
 80249c4:	4603      	mov	r3, r0
}
 80249c6:	4618      	mov	r0, r3
 80249c8:	3708      	adds	r7, #8
 80249ca:	46bd      	mov	sp, r7
 80249cc:	bd80      	pop	{r7, pc}
 80249ce:	bf00      	nop
 80249d0:	0802daa4 	.word	0x0802daa4

080249d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80249d4:	b580      	push	{r7, lr}
 80249d6:	b08e      	sub	sp, #56	; 0x38
 80249d8:	af04      	add	r7, sp, #16
 80249da:	6078      	str	r0, [r7, #4]
 80249dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80249de:	4b79      	ldr	r3, [pc, #484]	; (8024bc4 <icmp_input+0x1f0>)
 80249e0:	689b      	ldr	r3, [r3, #8]
 80249e2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80249e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249e6:	781b      	ldrb	r3, [r3, #0]
 80249e8:	f003 030f 	and.w	r3, r3, #15
 80249ec:	b2db      	uxtb	r3, r3
 80249ee:	009b      	lsls	r3, r3, #2
 80249f0:	b2db      	uxtb	r3, r3
 80249f2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80249f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80249f6:	2b13      	cmp	r3, #19
 80249f8:	f240 80cd 	bls.w	8024b96 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80249fc:	687b      	ldr	r3, [r7, #4]
 80249fe:	895b      	ldrh	r3, [r3, #10]
 8024a00:	2b03      	cmp	r3, #3
 8024a02:	f240 80ca 	bls.w	8024b9a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	685b      	ldr	r3, [r3, #4]
 8024a0a:	781b      	ldrb	r3, [r3, #0]
 8024a0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8024a10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8024a14:	2b00      	cmp	r3, #0
 8024a16:	f000 80b7 	beq.w	8024b88 <icmp_input+0x1b4>
 8024a1a:	2b08      	cmp	r3, #8
 8024a1c:	f040 80b7 	bne.w	8024b8e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8024a20:	4b69      	ldr	r3, [pc, #420]	; (8024bc8 <icmp_input+0x1f4>)
 8024a22:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024a24:	4b67      	ldr	r3, [pc, #412]	; (8024bc4 <icmp_input+0x1f0>)
 8024a26:	695b      	ldr	r3, [r3, #20]
 8024a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024a2c:	2be0      	cmp	r3, #224	; 0xe0
 8024a2e:	f000 80bb 	beq.w	8024ba8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8024a32:	4b64      	ldr	r3, [pc, #400]	; (8024bc4 <icmp_input+0x1f0>)
 8024a34:	695b      	ldr	r3, [r3, #20]
 8024a36:	4a63      	ldr	r2, [pc, #396]	; (8024bc4 <icmp_input+0x1f0>)
 8024a38:	6812      	ldr	r2, [r2, #0]
 8024a3a:	4611      	mov	r1, r2
 8024a3c:	4618      	mov	r0, r3
 8024a3e:	f000 fbf1 	bl	8025224 <ip4_addr_isbroadcast_u32>
 8024a42:	4603      	mov	r3, r0
 8024a44:	2b00      	cmp	r3, #0
 8024a46:	f040 80b1 	bne.w	8024bac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8024a4a:	687b      	ldr	r3, [r7, #4]
 8024a4c:	891b      	ldrh	r3, [r3, #8]
 8024a4e:	2b07      	cmp	r3, #7
 8024a50:	f240 80a5 	bls.w	8024b9e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024a54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024a56:	330e      	adds	r3, #14
 8024a58:	4619      	mov	r1, r3
 8024a5a:	6878      	ldr	r0, [r7, #4]
 8024a5c:	f7fd ff4e 	bl	80228fc <pbuf_add_header>
 8024a60:	4603      	mov	r3, r0
 8024a62:	2b00      	cmp	r3, #0
 8024a64:	d04b      	beq.n	8024afe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8024a66:	687b      	ldr	r3, [r7, #4]
 8024a68:	891a      	ldrh	r2, [r3, #8]
 8024a6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024a6c:	4413      	add	r3, r2
 8024a6e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8024a70:	687b      	ldr	r3, [r7, #4]
 8024a72:	891b      	ldrh	r3, [r3, #8]
 8024a74:	8b7a      	ldrh	r2, [r7, #26]
 8024a76:	429a      	cmp	r2, r3
 8024a78:	f0c0 809a 	bcc.w	8024bb0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8024a7c:	8b7b      	ldrh	r3, [r7, #26]
 8024a7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024a82:	4619      	mov	r1, r3
 8024a84:	200e      	movs	r0, #14
 8024a86:	f7fd fced 	bl	8022464 <pbuf_alloc>
 8024a8a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8024a8c:	697b      	ldr	r3, [r7, #20]
 8024a8e:	2b00      	cmp	r3, #0
 8024a90:	f000 8090 	beq.w	8024bb4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8024a94:	697b      	ldr	r3, [r7, #20]
 8024a96:	895b      	ldrh	r3, [r3, #10]
 8024a98:	461a      	mov	r2, r3
 8024a9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024a9c:	3308      	adds	r3, #8
 8024a9e:	429a      	cmp	r2, r3
 8024aa0:	d203      	bcs.n	8024aaa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8024aa2:	6978      	ldr	r0, [r7, #20]
 8024aa4:	f7fd ffc0 	bl	8022a28 <pbuf_free>
          goto icmperr;
 8024aa8:	e085      	b.n	8024bb6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8024aaa:	697b      	ldr	r3, [r7, #20]
 8024aac:	685b      	ldr	r3, [r3, #4]
 8024aae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8024ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024ab2:	4618      	mov	r0, r3
 8024ab4:	f001 fbe0 	bl	8026278 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8024ab8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024aba:	4619      	mov	r1, r3
 8024abc:	6978      	ldr	r0, [r7, #20]
 8024abe:	f7fd ff2d 	bl	802291c <pbuf_remove_header>
 8024ac2:	4603      	mov	r3, r0
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	d009      	beq.n	8024adc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8024ac8:	4b40      	ldr	r3, [pc, #256]	; (8024bcc <icmp_input+0x1f8>)
 8024aca:	22b6      	movs	r2, #182	; 0xb6
 8024acc:	4940      	ldr	r1, [pc, #256]	; (8024bd0 <icmp_input+0x1fc>)
 8024ace:	4841      	ldr	r0, [pc, #260]	; (8024bd4 <icmp_input+0x200>)
 8024ad0:	f001 fce2 	bl	8026498 <iprintf>
          pbuf_free(r);
 8024ad4:	6978      	ldr	r0, [r7, #20]
 8024ad6:	f7fd ffa7 	bl	8022a28 <pbuf_free>
          goto icmperr;
 8024ada:	e06c      	b.n	8024bb6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8024adc:	6879      	ldr	r1, [r7, #4]
 8024ade:	6978      	ldr	r0, [r7, #20]
 8024ae0:	f7fe f8ca 	bl	8022c78 <pbuf_copy>
 8024ae4:	4603      	mov	r3, r0
 8024ae6:	2b00      	cmp	r3, #0
 8024ae8:	d003      	beq.n	8024af2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8024aea:	6978      	ldr	r0, [r7, #20]
 8024aec:	f7fd ff9c 	bl	8022a28 <pbuf_free>
          goto icmperr;
 8024af0:	e061      	b.n	8024bb6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8024af2:	6878      	ldr	r0, [r7, #4]
 8024af4:	f7fd ff98 	bl	8022a28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8024af8:	697b      	ldr	r3, [r7, #20]
 8024afa:	607b      	str	r3, [r7, #4]
 8024afc:	e00f      	b.n	8024b1e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024b00:	330e      	adds	r3, #14
 8024b02:	4619      	mov	r1, r3
 8024b04:	6878      	ldr	r0, [r7, #4]
 8024b06:	f7fd ff09 	bl	802291c <pbuf_remove_header>
 8024b0a:	4603      	mov	r3, r0
 8024b0c:	2b00      	cmp	r3, #0
 8024b0e:	d006      	beq.n	8024b1e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8024b10:	4b2e      	ldr	r3, [pc, #184]	; (8024bcc <icmp_input+0x1f8>)
 8024b12:	22c7      	movs	r2, #199	; 0xc7
 8024b14:	4930      	ldr	r1, [pc, #192]	; (8024bd8 <icmp_input+0x204>)
 8024b16:	482f      	ldr	r0, [pc, #188]	; (8024bd4 <icmp_input+0x200>)
 8024b18:	f001 fcbe 	bl	8026498 <iprintf>
          goto icmperr;
 8024b1c:	e04b      	b.n	8024bb6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8024b1e:	687b      	ldr	r3, [r7, #4]
 8024b20:	685b      	ldr	r3, [r3, #4]
 8024b22:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8024b24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024b26:	4619      	mov	r1, r3
 8024b28:	6878      	ldr	r0, [r7, #4]
 8024b2a:	f7fd fee7 	bl	80228fc <pbuf_add_header>
 8024b2e:	4603      	mov	r3, r0
 8024b30:	2b00      	cmp	r3, #0
 8024b32:	d12b      	bne.n	8024b8c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8024b34:	687b      	ldr	r3, [r7, #4]
 8024b36:	685b      	ldr	r3, [r3, #4]
 8024b38:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8024b3a:	69fb      	ldr	r3, [r7, #28]
 8024b3c:	681a      	ldr	r2, [r3, #0]
 8024b3e:	68fb      	ldr	r3, [r7, #12]
 8024b40:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8024b42:	4b20      	ldr	r3, [pc, #128]	; (8024bc4 <icmp_input+0x1f0>)
 8024b44:	691a      	ldr	r2, [r3, #16]
 8024b46:	68fb      	ldr	r3, [r7, #12]
 8024b48:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8024b4a:	693b      	ldr	r3, [r7, #16]
 8024b4c:	2200      	movs	r2, #0
 8024b4e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8024b50:	693b      	ldr	r3, [r7, #16]
 8024b52:	2200      	movs	r2, #0
 8024b54:	709a      	strb	r2, [r3, #2]
 8024b56:	2200      	movs	r2, #0
 8024b58:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8024b5a:	68fb      	ldr	r3, [r7, #12]
 8024b5c:	22ff      	movs	r2, #255	; 0xff
 8024b5e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8024b60:	68fb      	ldr	r3, [r7, #12]
 8024b62:	2200      	movs	r2, #0
 8024b64:	729a      	strb	r2, [r3, #10]
 8024b66:	2200      	movs	r2, #0
 8024b68:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8024b6a:	683b      	ldr	r3, [r7, #0]
 8024b6c:	9302      	str	r3, [sp, #8]
 8024b6e:	2301      	movs	r3, #1
 8024b70:	9301      	str	r3, [sp, #4]
 8024b72:	2300      	movs	r3, #0
 8024b74:	9300      	str	r3, [sp, #0]
 8024b76:	23ff      	movs	r3, #255	; 0xff
 8024b78:	2200      	movs	r2, #0
 8024b7a:	69f9      	ldr	r1, [r7, #28]
 8024b7c:	6878      	ldr	r0, [r7, #4]
 8024b7e:	f000 fa6b 	bl	8025058 <ip4_output_if>
 8024b82:	4603      	mov	r3, r0
 8024b84:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8024b86:	e001      	b.n	8024b8c <icmp_input+0x1b8>
      break;
 8024b88:	bf00      	nop
 8024b8a:	e000      	b.n	8024b8e <icmp_input+0x1ba>
      break;
 8024b8c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8024b8e:	6878      	ldr	r0, [r7, #4]
 8024b90:	f7fd ff4a 	bl	8022a28 <pbuf_free>
  return;
 8024b94:	e013      	b.n	8024bbe <icmp_input+0x1ea>
    goto lenerr;
 8024b96:	bf00      	nop
 8024b98:	e002      	b.n	8024ba0 <icmp_input+0x1cc>
    goto lenerr;
 8024b9a:	bf00      	nop
 8024b9c:	e000      	b.n	8024ba0 <icmp_input+0x1cc>
        goto lenerr;
 8024b9e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8024ba0:	6878      	ldr	r0, [r7, #4]
 8024ba2:	f7fd ff41 	bl	8022a28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8024ba6:	e00a      	b.n	8024bbe <icmp_input+0x1ea>
        goto icmperr;
 8024ba8:	bf00      	nop
 8024baa:	e004      	b.n	8024bb6 <icmp_input+0x1e2>
        goto icmperr;
 8024bac:	bf00      	nop
 8024bae:	e002      	b.n	8024bb6 <icmp_input+0x1e2>
          goto icmperr;
 8024bb0:	bf00      	nop
 8024bb2:	e000      	b.n	8024bb6 <icmp_input+0x1e2>
          goto icmperr;
 8024bb4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8024bb6:	6878      	ldr	r0, [r7, #4]
 8024bb8:	f7fd ff36 	bl	8022a28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8024bbc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8024bbe:	3728      	adds	r7, #40	; 0x28
 8024bc0:	46bd      	mov	sp, r7
 8024bc2:	bd80      	pop	{r7, pc}
 8024bc4:	2001272c 	.word	0x2001272c
 8024bc8:	20012740 	.word	0x20012740
 8024bcc:	0802d0b8 	.word	0x0802d0b8
 8024bd0:	0802d128 	.word	0x0802d128
 8024bd4:	0802d160 	.word	0x0802d160
 8024bd8:	0802d188 	.word	0x0802d188

08024bdc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8024bdc:	b580      	push	{r7, lr}
 8024bde:	b082      	sub	sp, #8
 8024be0:	af00      	add	r7, sp, #0
 8024be2:	6078      	str	r0, [r7, #4]
 8024be4:	460b      	mov	r3, r1
 8024be6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8024be8:	78fb      	ldrb	r3, [r7, #3]
 8024bea:	461a      	mov	r2, r3
 8024bec:	2103      	movs	r1, #3
 8024bee:	6878      	ldr	r0, [r7, #4]
 8024bf0:	f000 f814 	bl	8024c1c <icmp_send_response>
}
 8024bf4:	bf00      	nop
 8024bf6:	3708      	adds	r7, #8
 8024bf8:	46bd      	mov	sp, r7
 8024bfa:	bd80      	pop	{r7, pc}

08024bfc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8024bfc:	b580      	push	{r7, lr}
 8024bfe:	b082      	sub	sp, #8
 8024c00:	af00      	add	r7, sp, #0
 8024c02:	6078      	str	r0, [r7, #4]
 8024c04:	460b      	mov	r3, r1
 8024c06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8024c08:	78fb      	ldrb	r3, [r7, #3]
 8024c0a:	461a      	mov	r2, r3
 8024c0c:	210b      	movs	r1, #11
 8024c0e:	6878      	ldr	r0, [r7, #4]
 8024c10:	f000 f804 	bl	8024c1c <icmp_send_response>
}
 8024c14:	bf00      	nop
 8024c16:	3708      	adds	r7, #8
 8024c18:	46bd      	mov	sp, r7
 8024c1a:	bd80      	pop	{r7, pc}

08024c1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8024c1c:	b580      	push	{r7, lr}
 8024c1e:	b08c      	sub	sp, #48	; 0x30
 8024c20:	af04      	add	r7, sp, #16
 8024c22:	6078      	str	r0, [r7, #4]
 8024c24:	460b      	mov	r3, r1
 8024c26:	70fb      	strb	r3, [r7, #3]
 8024c28:	4613      	mov	r3, r2
 8024c2a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8024c2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024c30:	2124      	movs	r1, #36	; 0x24
 8024c32:	2022      	movs	r0, #34	; 0x22
 8024c34:	f7fd fc16 	bl	8022464 <pbuf_alloc>
 8024c38:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8024c3a:	69fb      	ldr	r3, [r7, #28]
 8024c3c:	2b00      	cmp	r3, #0
 8024c3e:	d04c      	beq.n	8024cda <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8024c40:	69fb      	ldr	r3, [r7, #28]
 8024c42:	895b      	ldrh	r3, [r3, #10]
 8024c44:	2b23      	cmp	r3, #35	; 0x23
 8024c46:	d806      	bhi.n	8024c56 <icmp_send_response+0x3a>
 8024c48:	4b26      	ldr	r3, [pc, #152]	; (8024ce4 <icmp_send_response+0xc8>)
 8024c4a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8024c4e:	4926      	ldr	r1, [pc, #152]	; (8024ce8 <icmp_send_response+0xcc>)
 8024c50:	4826      	ldr	r0, [pc, #152]	; (8024cec <icmp_send_response+0xd0>)
 8024c52:	f001 fc21 	bl	8026498 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	685b      	ldr	r3, [r3, #4]
 8024c5a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8024c5c:	69fb      	ldr	r3, [r7, #28]
 8024c5e:	685b      	ldr	r3, [r3, #4]
 8024c60:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8024c62:	697b      	ldr	r3, [r7, #20]
 8024c64:	78fa      	ldrb	r2, [r7, #3]
 8024c66:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8024c68:	697b      	ldr	r3, [r7, #20]
 8024c6a:	78ba      	ldrb	r2, [r7, #2]
 8024c6c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8024c6e:	697b      	ldr	r3, [r7, #20]
 8024c70:	2200      	movs	r2, #0
 8024c72:	711a      	strb	r2, [r3, #4]
 8024c74:	2200      	movs	r2, #0
 8024c76:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8024c78:	697b      	ldr	r3, [r7, #20]
 8024c7a:	2200      	movs	r2, #0
 8024c7c:	719a      	strb	r2, [r3, #6]
 8024c7e:	2200      	movs	r2, #0
 8024c80:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8024c82:	69fb      	ldr	r3, [r7, #28]
 8024c84:	685b      	ldr	r3, [r3, #4]
 8024c86:	f103 0008 	add.w	r0, r3, #8
 8024c8a:	687b      	ldr	r3, [r7, #4]
 8024c8c:	685b      	ldr	r3, [r3, #4]
 8024c8e:	221c      	movs	r2, #28
 8024c90:	4619      	mov	r1, r3
 8024c92:	f001 faf1 	bl	8026278 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8024c96:	69bb      	ldr	r3, [r7, #24]
 8024c98:	68db      	ldr	r3, [r3, #12]
 8024c9a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8024c9c:	f107 030c 	add.w	r3, r7, #12
 8024ca0:	4618      	mov	r0, r3
 8024ca2:	f000 f825 	bl	8024cf0 <ip4_route>
 8024ca6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8024ca8:	693b      	ldr	r3, [r7, #16]
 8024caa:	2b00      	cmp	r3, #0
 8024cac:	d011      	beq.n	8024cd2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8024cae:	697b      	ldr	r3, [r7, #20]
 8024cb0:	2200      	movs	r2, #0
 8024cb2:	709a      	strb	r2, [r3, #2]
 8024cb4:	2200      	movs	r2, #0
 8024cb6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8024cb8:	f107 020c 	add.w	r2, r7, #12
 8024cbc:	693b      	ldr	r3, [r7, #16]
 8024cbe:	9302      	str	r3, [sp, #8]
 8024cc0:	2301      	movs	r3, #1
 8024cc2:	9301      	str	r3, [sp, #4]
 8024cc4:	2300      	movs	r3, #0
 8024cc6:	9300      	str	r3, [sp, #0]
 8024cc8:	23ff      	movs	r3, #255	; 0xff
 8024cca:	2100      	movs	r1, #0
 8024ccc:	69f8      	ldr	r0, [r7, #28]
 8024cce:	f000 f9c3 	bl	8025058 <ip4_output_if>
  }
  pbuf_free(q);
 8024cd2:	69f8      	ldr	r0, [r7, #28]
 8024cd4:	f7fd fea8 	bl	8022a28 <pbuf_free>
 8024cd8:	e000      	b.n	8024cdc <icmp_send_response+0xc0>
    return;
 8024cda:	bf00      	nop
}
 8024cdc:	3720      	adds	r7, #32
 8024cde:	46bd      	mov	sp, r7
 8024ce0:	bd80      	pop	{r7, pc}
 8024ce2:	bf00      	nop
 8024ce4:	0802d0b8 	.word	0x0802d0b8
 8024ce8:	0802d1bc 	.word	0x0802d1bc
 8024cec:	0802d160 	.word	0x0802d160

08024cf0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8024cf0:	b480      	push	{r7}
 8024cf2:	b085      	sub	sp, #20
 8024cf4:	af00      	add	r7, sp, #0
 8024cf6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8024cf8:	4b33      	ldr	r3, [pc, #204]	; (8024dc8 <ip4_route+0xd8>)
 8024cfa:	681b      	ldr	r3, [r3, #0]
 8024cfc:	60fb      	str	r3, [r7, #12]
 8024cfe:	e036      	b.n	8024d6e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024d00:	68fb      	ldr	r3, [r7, #12]
 8024d02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024d06:	f003 0301 	and.w	r3, r3, #1
 8024d0a:	b2db      	uxtb	r3, r3
 8024d0c:	2b00      	cmp	r3, #0
 8024d0e:	d02b      	beq.n	8024d68 <ip4_route+0x78>
 8024d10:	68fb      	ldr	r3, [r7, #12]
 8024d12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024d16:	089b      	lsrs	r3, r3, #2
 8024d18:	f003 0301 	and.w	r3, r3, #1
 8024d1c:	b2db      	uxtb	r3, r3
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	d022      	beq.n	8024d68 <ip4_route+0x78>
 8024d22:	68fb      	ldr	r3, [r7, #12]
 8024d24:	3304      	adds	r3, #4
 8024d26:	681b      	ldr	r3, [r3, #0]
 8024d28:	2b00      	cmp	r3, #0
 8024d2a:	d01d      	beq.n	8024d68 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8024d2c:	687b      	ldr	r3, [r7, #4]
 8024d2e:	681a      	ldr	r2, [r3, #0]
 8024d30:	68fb      	ldr	r3, [r7, #12]
 8024d32:	3304      	adds	r3, #4
 8024d34:	681b      	ldr	r3, [r3, #0]
 8024d36:	405a      	eors	r2, r3
 8024d38:	68fb      	ldr	r3, [r7, #12]
 8024d3a:	3308      	adds	r3, #8
 8024d3c:	681b      	ldr	r3, [r3, #0]
 8024d3e:	4013      	ands	r3, r2
 8024d40:	2b00      	cmp	r3, #0
 8024d42:	d101      	bne.n	8024d48 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8024d44:	68fb      	ldr	r3, [r7, #12]
 8024d46:	e038      	b.n	8024dba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8024d48:	68fb      	ldr	r3, [r7, #12]
 8024d4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024d4e:	f003 0302 	and.w	r3, r3, #2
 8024d52:	2b00      	cmp	r3, #0
 8024d54:	d108      	bne.n	8024d68 <ip4_route+0x78>
 8024d56:	687b      	ldr	r3, [r7, #4]
 8024d58:	681a      	ldr	r2, [r3, #0]
 8024d5a:	68fb      	ldr	r3, [r7, #12]
 8024d5c:	330c      	adds	r3, #12
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	429a      	cmp	r2, r3
 8024d62:	d101      	bne.n	8024d68 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8024d64:	68fb      	ldr	r3, [r7, #12]
 8024d66:	e028      	b.n	8024dba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8024d68:	68fb      	ldr	r3, [r7, #12]
 8024d6a:	681b      	ldr	r3, [r3, #0]
 8024d6c:	60fb      	str	r3, [r7, #12]
 8024d6e:	68fb      	ldr	r3, [r7, #12]
 8024d70:	2b00      	cmp	r3, #0
 8024d72:	d1c5      	bne.n	8024d00 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8024d74:	4b15      	ldr	r3, [pc, #84]	; (8024dcc <ip4_route+0xdc>)
 8024d76:	681b      	ldr	r3, [r3, #0]
 8024d78:	2b00      	cmp	r3, #0
 8024d7a:	d01a      	beq.n	8024db2 <ip4_route+0xc2>
 8024d7c:	4b13      	ldr	r3, [pc, #76]	; (8024dcc <ip4_route+0xdc>)
 8024d7e:	681b      	ldr	r3, [r3, #0]
 8024d80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024d84:	f003 0301 	and.w	r3, r3, #1
 8024d88:	2b00      	cmp	r3, #0
 8024d8a:	d012      	beq.n	8024db2 <ip4_route+0xc2>
 8024d8c:	4b0f      	ldr	r3, [pc, #60]	; (8024dcc <ip4_route+0xdc>)
 8024d8e:	681b      	ldr	r3, [r3, #0]
 8024d90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024d94:	f003 0304 	and.w	r3, r3, #4
 8024d98:	2b00      	cmp	r3, #0
 8024d9a:	d00a      	beq.n	8024db2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024d9c:	4b0b      	ldr	r3, [pc, #44]	; (8024dcc <ip4_route+0xdc>)
 8024d9e:	681b      	ldr	r3, [r3, #0]
 8024da0:	3304      	adds	r3, #4
 8024da2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8024da4:	2b00      	cmp	r3, #0
 8024da6:	d004      	beq.n	8024db2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024da8:	687b      	ldr	r3, [r7, #4]
 8024daa:	681b      	ldr	r3, [r3, #0]
 8024dac:	b2db      	uxtb	r3, r3
 8024dae:	2b7f      	cmp	r3, #127	; 0x7f
 8024db0:	d101      	bne.n	8024db6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8024db2:	2300      	movs	r3, #0
 8024db4:	e001      	b.n	8024dba <ip4_route+0xca>
  }

  return netif_default;
 8024db6:	4b05      	ldr	r3, [pc, #20]	; (8024dcc <ip4_route+0xdc>)
 8024db8:	681b      	ldr	r3, [r3, #0]
}
 8024dba:	4618      	mov	r0, r3
 8024dbc:	3714      	adds	r7, #20
 8024dbe:	46bd      	mov	sp, r7
 8024dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dc4:	4770      	bx	lr
 8024dc6:	bf00      	nop
 8024dc8:	20015d3c 	.word	0x20015d3c
 8024dcc:	20015d40 	.word	0x20015d40

08024dd0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8024dd0:	b580      	push	{r7, lr}
 8024dd2:	b082      	sub	sp, #8
 8024dd4:	af00      	add	r7, sp, #0
 8024dd6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8024dd8:	687b      	ldr	r3, [r7, #4]
 8024dda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024dde:	f003 0301 	and.w	r3, r3, #1
 8024de2:	b2db      	uxtb	r3, r3
 8024de4:	2b00      	cmp	r3, #0
 8024de6:	d016      	beq.n	8024e16 <ip4_input_accept+0x46>
 8024de8:	687b      	ldr	r3, [r7, #4]
 8024dea:	3304      	adds	r3, #4
 8024dec:	681b      	ldr	r3, [r3, #0]
 8024dee:	2b00      	cmp	r3, #0
 8024df0:	d011      	beq.n	8024e16 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024df2:	4b0b      	ldr	r3, [pc, #44]	; (8024e20 <ip4_input_accept+0x50>)
 8024df4:	695a      	ldr	r2, [r3, #20]
 8024df6:	687b      	ldr	r3, [r7, #4]
 8024df8:	3304      	adds	r3, #4
 8024dfa:	681b      	ldr	r3, [r3, #0]
 8024dfc:	429a      	cmp	r2, r3
 8024dfe:	d008      	beq.n	8024e12 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8024e00:	4b07      	ldr	r3, [pc, #28]	; (8024e20 <ip4_input_accept+0x50>)
 8024e02:	695b      	ldr	r3, [r3, #20]
 8024e04:	6879      	ldr	r1, [r7, #4]
 8024e06:	4618      	mov	r0, r3
 8024e08:	f000 fa0c 	bl	8025224 <ip4_addr_isbroadcast_u32>
 8024e0c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	d001      	beq.n	8024e16 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8024e12:	2301      	movs	r3, #1
 8024e14:	e000      	b.n	8024e18 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8024e16:	2300      	movs	r3, #0
}
 8024e18:	4618      	mov	r0, r3
 8024e1a:	3708      	adds	r7, #8
 8024e1c:	46bd      	mov	sp, r7
 8024e1e:	bd80      	pop	{r7, pc}
 8024e20:	2001272c 	.word	0x2001272c

08024e24 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8024e24:	b580      	push	{r7, lr}
 8024e26:	b086      	sub	sp, #24
 8024e28:	af00      	add	r7, sp, #0
 8024e2a:	6078      	str	r0, [r7, #4]
 8024e2c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8024e2e:	687b      	ldr	r3, [r7, #4]
 8024e30:	685b      	ldr	r3, [r3, #4]
 8024e32:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8024e34:	697b      	ldr	r3, [r7, #20]
 8024e36:	781b      	ldrb	r3, [r3, #0]
 8024e38:	091b      	lsrs	r3, r3, #4
 8024e3a:	b2db      	uxtb	r3, r3
 8024e3c:	2b04      	cmp	r3, #4
 8024e3e:	d004      	beq.n	8024e4a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8024e40:	6878      	ldr	r0, [r7, #4]
 8024e42:	f7fd fdf1 	bl	8022a28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8024e46:	2300      	movs	r3, #0
 8024e48:	e0fd      	b.n	8025046 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8024e4a:	697b      	ldr	r3, [r7, #20]
 8024e4c:	781b      	ldrb	r3, [r3, #0]
 8024e4e:	f003 030f 	and.w	r3, r3, #15
 8024e52:	b2db      	uxtb	r3, r3
 8024e54:	009b      	lsls	r3, r3, #2
 8024e56:	b2db      	uxtb	r3, r3
 8024e58:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8024e5a:	697b      	ldr	r3, [r7, #20]
 8024e5c:	885b      	ldrh	r3, [r3, #2]
 8024e5e:	b29b      	uxth	r3, r3
 8024e60:	4618      	mov	r0, r3
 8024e62:	f7fc fa05 	bl	8021270 <lwip_htons>
 8024e66:	4603      	mov	r3, r0
 8024e68:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8024e6a:	687b      	ldr	r3, [r7, #4]
 8024e6c:	891b      	ldrh	r3, [r3, #8]
 8024e6e:	89ba      	ldrh	r2, [r7, #12]
 8024e70:	429a      	cmp	r2, r3
 8024e72:	d204      	bcs.n	8024e7e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8024e74:	89bb      	ldrh	r3, [r7, #12]
 8024e76:	4619      	mov	r1, r3
 8024e78:	6878      	ldr	r0, [r7, #4]
 8024e7a:	f7fd fc4f 	bl	802271c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8024e7e:	687b      	ldr	r3, [r7, #4]
 8024e80:	895b      	ldrh	r3, [r3, #10]
 8024e82:	89fa      	ldrh	r2, [r7, #14]
 8024e84:	429a      	cmp	r2, r3
 8024e86:	d807      	bhi.n	8024e98 <ip4_input+0x74>
 8024e88:	687b      	ldr	r3, [r7, #4]
 8024e8a:	891b      	ldrh	r3, [r3, #8]
 8024e8c:	89ba      	ldrh	r2, [r7, #12]
 8024e8e:	429a      	cmp	r2, r3
 8024e90:	d802      	bhi.n	8024e98 <ip4_input+0x74>
 8024e92:	89fb      	ldrh	r3, [r7, #14]
 8024e94:	2b13      	cmp	r3, #19
 8024e96:	d804      	bhi.n	8024ea2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8024e98:	6878      	ldr	r0, [r7, #4]
 8024e9a:	f7fd fdc5 	bl	8022a28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8024e9e:	2300      	movs	r3, #0
 8024ea0:	e0d1      	b.n	8025046 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8024ea2:	697b      	ldr	r3, [r7, #20]
 8024ea4:	691b      	ldr	r3, [r3, #16]
 8024ea6:	4a6a      	ldr	r2, [pc, #424]	; (8025050 <ip4_input+0x22c>)
 8024ea8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8024eaa:	697b      	ldr	r3, [r7, #20]
 8024eac:	68db      	ldr	r3, [r3, #12]
 8024eae:	4a68      	ldr	r2, [pc, #416]	; (8025050 <ip4_input+0x22c>)
 8024eb0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024eb2:	4b67      	ldr	r3, [pc, #412]	; (8025050 <ip4_input+0x22c>)
 8024eb4:	695b      	ldr	r3, [r3, #20]
 8024eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024eba:	2be0      	cmp	r3, #224	; 0xe0
 8024ebc:	d112      	bne.n	8024ee4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8024ebe:	683b      	ldr	r3, [r7, #0]
 8024ec0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024ec4:	f003 0301 	and.w	r3, r3, #1
 8024ec8:	b2db      	uxtb	r3, r3
 8024eca:	2b00      	cmp	r3, #0
 8024ecc:	d007      	beq.n	8024ede <ip4_input+0xba>
 8024ece:	683b      	ldr	r3, [r7, #0]
 8024ed0:	3304      	adds	r3, #4
 8024ed2:	681b      	ldr	r3, [r3, #0]
 8024ed4:	2b00      	cmp	r3, #0
 8024ed6:	d002      	beq.n	8024ede <ip4_input+0xba>
      netif = inp;
 8024ed8:	683b      	ldr	r3, [r7, #0]
 8024eda:	613b      	str	r3, [r7, #16]
 8024edc:	e02a      	b.n	8024f34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8024ede:	2300      	movs	r3, #0
 8024ee0:	613b      	str	r3, [r7, #16]
 8024ee2:	e027      	b.n	8024f34 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8024ee4:	6838      	ldr	r0, [r7, #0]
 8024ee6:	f7ff ff73 	bl	8024dd0 <ip4_input_accept>
 8024eea:	4603      	mov	r3, r0
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	d002      	beq.n	8024ef6 <ip4_input+0xd2>
      netif = inp;
 8024ef0:	683b      	ldr	r3, [r7, #0]
 8024ef2:	613b      	str	r3, [r7, #16]
 8024ef4:	e01e      	b.n	8024f34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8024ef6:	2300      	movs	r3, #0
 8024ef8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8024efa:	4b55      	ldr	r3, [pc, #340]	; (8025050 <ip4_input+0x22c>)
 8024efc:	695b      	ldr	r3, [r3, #20]
 8024efe:	b2db      	uxtb	r3, r3
 8024f00:	2b7f      	cmp	r3, #127	; 0x7f
 8024f02:	d017      	beq.n	8024f34 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8024f04:	4b53      	ldr	r3, [pc, #332]	; (8025054 <ip4_input+0x230>)
 8024f06:	681b      	ldr	r3, [r3, #0]
 8024f08:	613b      	str	r3, [r7, #16]
 8024f0a:	e00e      	b.n	8024f2a <ip4_input+0x106>
          if (netif == inp) {
 8024f0c:	693a      	ldr	r2, [r7, #16]
 8024f0e:	683b      	ldr	r3, [r7, #0]
 8024f10:	429a      	cmp	r2, r3
 8024f12:	d006      	beq.n	8024f22 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8024f14:	6938      	ldr	r0, [r7, #16]
 8024f16:	f7ff ff5b 	bl	8024dd0 <ip4_input_accept>
 8024f1a:	4603      	mov	r3, r0
 8024f1c:	2b00      	cmp	r3, #0
 8024f1e:	d108      	bne.n	8024f32 <ip4_input+0x10e>
 8024f20:	e000      	b.n	8024f24 <ip4_input+0x100>
            continue;
 8024f22:	bf00      	nop
        NETIF_FOREACH(netif) {
 8024f24:	693b      	ldr	r3, [r7, #16]
 8024f26:	681b      	ldr	r3, [r3, #0]
 8024f28:	613b      	str	r3, [r7, #16]
 8024f2a:	693b      	ldr	r3, [r7, #16]
 8024f2c:	2b00      	cmp	r3, #0
 8024f2e:	d1ed      	bne.n	8024f0c <ip4_input+0xe8>
 8024f30:	e000      	b.n	8024f34 <ip4_input+0x110>
            break;
 8024f32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8024f34:	4b46      	ldr	r3, [pc, #280]	; (8025050 <ip4_input+0x22c>)
 8024f36:	691b      	ldr	r3, [r3, #16]
 8024f38:	6839      	ldr	r1, [r7, #0]
 8024f3a:	4618      	mov	r0, r3
 8024f3c:	f000 f972 	bl	8025224 <ip4_addr_isbroadcast_u32>
 8024f40:	4603      	mov	r3, r0
 8024f42:	2b00      	cmp	r3, #0
 8024f44:	d105      	bne.n	8024f52 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8024f46:	4b42      	ldr	r3, [pc, #264]	; (8025050 <ip4_input+0x22c>)
 8024f48:	691b      	ldr	r3, [r3, #16]
 8024f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8024f4e:	2be0      	cmp	r3, #224	; 0xe0
 8024f50:	d104      	bne.n	8024f5c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8024f52:	6878      	ldr	r0, [r7, #4]
 8024f54:	f7fd fd68 	bl	8022a28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8024f58:	2300      	movs	r3, #0
 8024f5a:	e074      	b.n	8025046 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8024f5c:	693b      	ldr	r3, [r7, #16]
 8024f5e:	2b00      	cmp	r3, #0
 8024f60:	d104      	bne.n	8024f6c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8024f62:	6878      	ldr	r0, [r7, #4]
 8024f64:	f7fd fd60 	bl	8022a28 <pbuf_free>
    return ERR_OK;
 8024f68:	2300      	movs	r3, #0
 8024f6a:	e06c      	b.n	8025046 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8024f6c:	697b      	ldr	r3, [r7, #20]
 8024f6e:	88db      	ldrh	r3, [r3, #6]
 8024f70:	b29b      	uxth	r3, r3
 8024f72:	461a      	mov	r2, r3
 8024f74:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8024f78:	4013      	ands	r3, r2
 8024f7a:	2b00      	cmp	r3, #0
 8024f7c:	d00b      	beq.n	8024f96 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8024f7e:	6878      	ldr	r0, [r7, #4]
 8024f80:	f000 fd26 	bl	80259d0 <ip4_reass>
 8024f84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	2b00      	cmp	r3, #0
 8024f8a:	d101      	bne.n	8024f90 <ip4_input+0x16c>
      return ERR_OK;
 8024f8c:	2300      	movs	r3, #0
 8024f8e:	e05a      	b.n	8025046 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8024f90:	687b      	ldr	r3, [r7, #4]
 8024f92:	685b      	ldr	r3, [r3, #4]
 8024f94:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8024f96:	4a2e      	ldr	r2, [pc, #184]	; (8025050 <ip4_input+0x22c>)
 8024f98:	693b      	ldr	r3, [r7, #16]
 8024f9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8024f9c:	4a2c      	ldr	r2, [pc, #176]	; (8025050 <ip4_input+0x22c>)
 8024f9e:	683b      	ldr	r3, [r7, #0]
 8024fa0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8024fa2:	4a2b      	ldr	r2, [pc, #172]	; (8025050 <ip4_input+0x22c>)
 8024fa4:	697b      	ldr	r3, [r7, #20]
 8024fa6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8024fa8:	697b      	ldr	r3, [r7, #20]
 8024faa:	781b      	ldrb	r3, [r3, #0]
 8024fac:	f003 030f 	and.w	r3, r3, #15
 8024fb0:	b2db      	uxtb	r3, r3
 8024fb2:	009b      	lsls	r3, r3, #2
 8024fb4:	b2db      	uxtb	r3, r3
 8024fb6:	b29a      	uxth	r2, r3
 8024fb8:	4b25      	ldr	r3, [pc, #148]	; (8025050 <ip4_input+0x22c>)
 8024fba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8024fbc:	89fb      	ldrh	r3, [r7, #14]
 8024fbe:	4619      	mov	r1, r3
 8024fc0:	6878      	ldr	r0, [r7, #4]
 8024fc2:	f7fd fcab 	bl	802291c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8024fc6:	697b      	ldr	r3, [r7, #20]
 8024fc8:	7a5b      	ldrb	r3, [r3, #9]
 8024fca:	2b01      	cmp	r3, #1
 8024fcc:	d006      	beq.n	8024fdc <ip4_input+0x1b8>
 8024fce:	2b11      	cmp	r3, #17
 8024fd0:	d109      	bne.n	8024fe6 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8024fd2:	6839      	ldr	r1, [r7, #0]
 8024fd4:	6878      	ldr	r0, [r7, #4]
 8024fd6:	f7fe f9b5 	bl	8023344 <udp_input>
        break;
 8024fda:	e021      	b.n	8025020 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8024fdc:	6839      	ldr	r1, [r7, #0]
 8024fde:	6878      	ldr	r0, [r7, #4]
 8024fe0:	f7ff fcf8 	bl	80249d4 <icmp_input>
        break;
 8024fe4:	e01c      	b.n	8025020 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8024fe6:	4b1a      	ldr	r3, [pc, #104]	; (8025050 <ip4_input+0x22c>)
 8024fe8:	695b      	ldr	r3, [r3, #20]
 8024fea:	6939      	ldr	r1, [r7, #16]
 8024fec:	4618      	mov	r0, r3
 8024fee:	f000 f919 	bl	8025224 <ip4_addr_isbroadcast_u32>
 8024ff2:	4603      	mov	r3, r0
 8024ff4:	2b00      	cmp	r3, #0
 8024ff6:	d10f      	bne.n	8025018 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024ff8:	4b15      	ldr	r3, [pc, #84]	; (8025050 <ip4_input+0x22c>)
 8024ffa:	695b      	ldr	r3, [r3, #20]
 8024ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8025000:	2be0      	cmp	r3, #224	; 0xe0
 8025002:	d009      	beq.n	8025018 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8025004:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8025008:	4619      	mov	r1, r3
 802500a:	6878      	ldr	r0, [r7, #4]
 802500c:	f7fd fcf9 	bl	8022a02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8025010:	2102      	movs	r1, #2
 8025012:	6878      	ldr	r0, [r7, #4]
 8025014:	f7ff fde2 	bl	8024bdc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8025018:	6878      	ldr	r0, [r7, #4]
 802501a:	f7fd fd05 	bl	8022a28 <pbuf_free>
        break;
 802501e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8025020:	4b0b      	ldr	r3, [pc, #44]	; (8025050 <ip4_input+0x22c>)
 8025022:	2200      	movs	r2, #0
 8025024:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8025026:	4b0a      	ldr	r3, [pc, #40]	; (8025050 <ip4_input+0x22c>)
 8025028:	2200      	movs	r2, #0
 802502a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 802502c:	4b08      	ldr	r3, [pc, #32]	; (8025050 <ip4_input+0x22c>)
 802502e:	2200      	movs	r2, #0
 8025030:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8025032:	4b07      	ldr	r3, [pc, #28]	; (8025050 <ip4_input+0x22c>)
 8025034:	2200      	movs	r2, #0
 8025036:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8025038:	4b05      	ldr	r3, [pc, #20]	; (8025050 <ip4_input+0x22c>)
 802503a:	2200      	movs	r2, #0
 802503c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 802503e:	4b04      	ldr	r3, [pc, #16]	; (8025050 <ip4_input+0x22c>)
 8025040:	2200      	movs	r2, #0
 8025042:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8025044:	2300      	movs	r3, #0
}
 8025046:	4618      	mov	r0, r3
 8025048:	3718      	adds	r7, #24
 802504a:	46bd      	mov	sp, r7
 802504c:	bd80      	pop	{r7, pc}
 802504e:	bf00      	nop
 8025050:	2001272c 	.word	0x2001272c
 8025054:	20015d3c 	.word	0x20015d3c

08025058 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8025058:	b580      	push	{r7, lr}
 802505a:	b08a      	sub	sp, #40	; 0x28
 802505c:	af04      	add	r7, sp, #16
 802505e:	60f8      	str	r0, [r7, #12]
 8025060:	60b9      	str	r1, [r7, #8]
 8025062:	607a      	str	r2, [r7, #4]
 8025064:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8025066:	68bb      	ldr	r3, [r7, #8]
 8025068:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802506a:	687b      	ldr	r3, [r7, #4]
 802506c:	2b00      	cmp	r3, #0
 802506e:	d009      	beq.n	8025084 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8025070:	68bb      	ldr	r3, [r7, #8]
 8025072:	2b00      	cmp	r3, #0
 8025074:	d003      	beq.n	802507e <ip4_output_if+0x26>
 8025076:	68bb      	ldr	r3, [r7, #8]
 8025078:	681b      	ldr	r3, [r3, #0]
 802507a:	2b00      	cmp	r3, #0
 802507c:	d102      	bne.n	8025084 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025080:	3304      	adds	r3, #4
 8025082:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8025084:	78fa      	ldrb	r2, [r7, #3]
 8025086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025088:	9302      	str	r3, [sp, #8]
 802508a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802508e:	9301      	str	r3, [sp, #4]
 8025090:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025094:	9300      	str	r3, [sp, #0]
 8025096:	4613      	mov	r3, r2
 8025098:	687a      	ldr	r2, [r7, #4]
 802509a:	6979      	ldr	r1, [r7, #20]
 802509c:	68f8      	ldr	r0, [r7, #12]
 802509e:	f000 f805 	bl	80250ac <ip4_output_if_src>
 80250a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80250a4:	4618      	mov	r0, r3
 80250a6:	3718      	adds	r7, #24
 80250a8:	46bd      	mov	sp, r7
 80250aa:	bd80      	pop	{r7, pc}

080250ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80250ac:	b580      	push	{r7, lr}
 80250ae:	b088      	sub	sp, #32
 80250b0:	af00      	add	r7, sp, #0
 80250b2:	60f8      	str	r0, [r7, #12]
 80250b4:	60b9      	str	r1, [r7, #8]
 80250b6:	607a      	str	r2, [r7, #4]
 80250b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80250ba:	68fb      	ldr	r3, [r7, #12]
 80250bc:	7b9b      	ldrb	r3, [r3, #14]
 80250be:	2b01      	cmp	r3, #1
 80250c0:	d006      	beq.n	80250d0 <ip4_output_if_src+0x24>
 80250c2:	4b52      	ldr	r3, [pc, #328]	; (802520c <ip4_output_if_src+0x160>)
 80250c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80250c8:	4951      	ldr	r1, [pc, #324]	; (8025210 <ip4_output_if_src+0x164>)
 80250ca:	4852      	ldr	r0, [pc, #328]	; (8025214 <ip4_output_if_src+0x168>)
 80250cc:	f001 f9e4 	bl	8026498 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80250d0:	687b      	ldr	r3, [r7, #4]
 80250d2:	2b00      	cmp	r3, #0
 80250d4:	d060      	beq.n	8025198 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80250d6:	2314      	movs	r3, #20
 80250d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80250da:	2114      	movs	r1, #20
 80250dc:	68f8      	ldr	r0, [r7, #12]
 80250de:	f7fd fc0d 	bl	80228fc <pbuf_add_header>
 80250e2:	4603      	mov	r3, r0
 80250e4:	2b00      	cmp	r3, #0
 80250e6:	d002      	beq.n	80250ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80250e8:	f06f 0301 	mvn.w	r3, #1
 80250ec:	e089      	b.n	8025202 <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80250ee:	68fb      	ldr	r3, [r7, #12]
 80250f0:	685b      	ldr	r3, [r3, #4]
 80250f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80250f4:	68fb      	ldr	r3, [r7, #12]
 80250f6:	895b      	ldrh	r3, [r3, #10]
 80250f8:	2b13      	cmp	r3, #19
 80250fa:	d806      	bhi.n	802510a <ip4_output_if_src+0x5e>
 80250fc:	4b43      	ldr	r3, [pc, #268]	; (802520c <ip4_output_if_src+0x160>)
 80250fe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8025102:	4945      	ldr	r1, [pc, #276]	; (8025218 <ip4_output_if_src+0x16c>)
 8025104:	4843      	ldr	r0, [pc, #268]	; (8025214 <ip4_output_if_src+0x168>)
 8025106:	f001 f9c7 	bl	8026498 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802510a:	69fb      	ldr	r3, [r7, #28]
 802510c:	78fa      	ldrb	r2, [r7, #3]
 802510e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8025110:	69fb      	ldr	r3, [r7, #28]
 8025112:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8025116:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8025118:	687b      	ldr	r3, [r7, #4]
 802511a:	681a      	ldr	r2, [r3, #0]
 802511c:	69fb      	ldr	r3, [r7, #28]
 802511e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8025120:	8b7b      	ldrh	r3, [r7, #26]
 8025122:	089b      	lsrs	r3, r3, #2
 8025124:	b29b      	uxth	r3, r3
 8025126:	b2db      	uxtb	r3, r3
 8025128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802512c:	b2da      	uxtb	r2, r3
 802512e:	69fb      	ldr	r3, [r7, #28]
 8025130:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8025132:	69fb      	ldr	r3, [r7, #28]
 8025134:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8025138:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802513a:	68fb      	ldr	r3, [r7, #12]
 802513c:	891b      	ldrh	r3, [r3, #8]
 802513e:	4618      	mov	r0, r3
 8025140:	f7fc f896 	bl	8021270 <lwip_htons>
 8025144:	4603      	mov	r3, r0
 8025146:	461a      	mov	r2, r3
 8025148:	69fb      	ldr	r3, [r7, #28]
 802514a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 802514c:	69fb      	ldr	r3, [r7, #28]
 802514e:	2200      	movs	r2, #0
 8025150:	719a      	strb	r2, [r3, #6]
 8025152:	2200      	movs	r2, #0
 8025154:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8025156:	4b31      	ldr	r3, [pc, #196]	; (802521c <ip4_output_if_src+0x170>)
 8025158:	881b      	ldrh	r3, [r3, #0]
 802515a:	4618      	mov	r0, r3
 802515c:	f7fc f888 	bl	8021270 <lwip_htons>
 8025160:	4603      	mov	r3, r0
 8025162:	461a      	mov	r2, r3
 8025164:	69fb      	ldr	r3, [r7, #28]
 8025166:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8025168:	4b2c      	ldr	r3, [pc, #176]	; (802521c <ip4_output_if_src+0x170>)
 802516a:	881b      	ldrh	r3, [r3, #0]
 802516c:	3301      	adds	r3, #1
 802516e:	b29a      	uxth	r2, r3
 8025170:	4b2a      	ldr	r3, [pc, #168]	; (802521c <ip4_output_if_src+0x170>)
 8025172:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8025174:	68bb      	ldr	r3, [r7, #8]
 8025176:	2b00      	cmp	r3, #0
 8025178:	d104      	bne.n	8025184 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802517a:	4b29      	ldr	r3, [pc, #164]	; (8025220 <ip4_output_if_src+0x174>)
 802517c:	681a      	ldr	r2, [r3, #0]
 802517e:	69fb      	ldr	r3, [r7, #28]
 8025180:	60da      	str	r2, [r3, #12]
 8025182:	e003      	b.n	802518c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8025184:	68bb      	ldr	r3, [r7, #8]
 8025186:	681a      	ldr	r2, [r3, #0]
 8025188:	69fb      	ldr	r3, [r7, #28]
 802518a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 802518c:	69fb      	ldr	r3, [r7, #28]
 802518e:	2200      	movs	r2, #0
 8025190:	729a      	strb	r2, [r3, #10]
 8025192:	2200      	movs	r2, #0
 8025194:	72da      	strb	r2, [r3, #11]
 8025196:	e00f      	b.n	80251b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8025198:	68fb      	ldr	r3, [r7, #12]
 802519a:	895b      	ldrh	r3, [r3, #10]
 802519c:	2b13      	cmp	r3, #19
 802519e:	d802      	bhi.n	80251a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80251a0:	f06f 0301 	mvn.w	r3, #1
 80251a4:	e02d      	b.n	8025202 <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80251a6:	68fb      	ldr	r3, [r7, #12]
 80251a8:	685b      	ldr	r3, [r3, #4]
 80251aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80251ac:	69fb      	ldr	r3, [r7, #28]
 80251ae:	691b      	ldr	r3, [r3, #16]
 80251b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80251b2:	f107 0314 	add.w	r3, r7, #20
 80251b6:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 80251b8:	687b      	ldr	r3, [r7, #4]
 80251ba:	681a      	ldr	r2, [r3, #0]
 80251bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80251be:	3304      	adds	r3, #4
 80251c0:	681b      	ldr	r3, [r3, #0]
 80251c2:	429a      	cmp	r2, r3
 80251c4:	d105      	bne.n	80251d2 <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 80251c6:	68f9      	ldr	r1, [r7, #12]
 80251c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80251ca:	f7fd f86f 	bl	80222ac <netif_loop_output>
 80251ce:	4603      	mov	r3, r0
 80251d0:	e017      	b.n	8025202 <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80251d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80251d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80251d6:	2b00      	cmp	r3, #0
 80251d8:	d00c      	beq.n	80251f4 <ip4_output_if_src+0x148>
 80251da:	68fb      	ldr	r3, [r7, #12]
 80251dc:	891a      	ldrh	r2, [r3, #8]
 80251de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80251e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80251e2:	429a      	cmp	r2, r3
 80251e4:	d906      	bls.n	80251f4 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 80251e6:	687a      	ldr	r2, [r7, #4]
 80251e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80251ea:	68f8      	ldr	r0, [r7, #12]
 80251ec:	f000 fde4 	bl	8025db8 <ip4_frag>
 80251f0:	4603      	mov	r3, r0
 80251f2:	e006      	b.n	8025202 <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80251f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80251f6:	695b      	ldr	r3, [r3, #20]
 80251f8:	687a      	ldr	r2, [r7, #4]
 80251fa:	68f9      	ldr	r1, [r7, #12]
 80251fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80251fe:	4798      	blx	r3
 8025200:	4603      	mov	r3, r0
}
 8025202:	4618      	mov	r0, r3
 8025204:	3720      	adds	r7, #32
 8025206:	46bd      	mov	sp, r7
 8025208:	bd80      	pop	{r7, pc}
 802520a:	bf00      	nop
 802520c:	0802d1e8 	.word	0x0802d1e8
 8025210:	0802d258 	.word	0x0802d258
 8025214:	0802d264 	.word	0x0802d264
 8025218:	0802d28c 	.word	0x0802d28c
 802521c:	20016246 	.word	0x20016246
 8025220:	0802daa0 	.word	0x0802daa0

08025224 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8025224:	b480      	push	{r7}
 8025226:	b085      	sub	sp, #20
 8025228:	af00      	add	r7, sp, #0
 802522a:	6078      	str	r0, [r7, #4]
 802522c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8025232:	687b      	ldr	r3, [r7, #4]
 8025234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025238:	d002      	beq.n	8025240 <ip4_addr_isbroadcast_u32+0x1c>
 802523a:	687b      	ldr	r3, [r7, #4]
 802523c:	2b00      	cmp	r3, #0
 802523e:	d101      	bne.n	8025244 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8025240:	2301      	movs	r3, #1
 8025242:	e02a      	b.n	802529a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8025244:	683b      	ldr	r3, [r7, #0]
 8025246:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802524a:	f003 0302 	and.w	r3, r3, #2
 802524e:	2b00      	cmp	r3, #0
 8025250:	d101      	bne.n	8025256 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8025252:	2300      	movs	r3, #0
 8025254:	e021      	b.n	802529a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8025256:	683b      	ldr	r3, [r7, #0]
 8025258:	3304      	adds	r3, #4
 802525a:	681b      	ldr	r3, [r3, #0]
 802525c:	687a      	ldr	r2, [r7, #4]
 802525e:	429a      	cmp	r2, r3
 8025260:	d101      	bne.n	8025266 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8025262:	2300      	movs	r3, #0
 8025264:	e019      	b.n	802529a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8025266:	68fa      	ldr	r2, [r7, #12]
 8025268:	683b      	ldr	r3, [r7, #0]
 802526a:	3304      	adds	r3, #4
 802526c:	681b      	ldr	r3, [r3, #0]
 802526e:	405a      	eors	r2, r3
 8025270:	683b      	ldr	r3, [r7, #0]
 8025272:	3308      	adds	r3, #8
 8025274:	681b      	ldr	r3, [r3, #0]
 8025276:	4013      	ands	r3, r2
 8025278:	2b00      	cmp	r3, #0
 802527a:	d10d      	bne.n	8025298 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802527c:	683b      	ldr	r3, [r7, #0]
 802527e:	3308      	adds	r3, #8
 8025280:	681b      	ldr	r3, [r3, #0]
 8025282:	43da      	mvns	r2, r3
 8025284:	687b      	ldr	r3, [r7, #4]
 8025286:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8025288:	683b      	ldr	r3, [r7, #0]
 802528a:	3308      	adds	r3, #8
 802528c:	681b      	ldr	r3, [r3, #0]
 802528e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8025290:	429a      	cmp	r2, r3
 8025292:	d101      	bne.n	8025298 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8025294:	2301      	movs	r3, #1
 8025296:	e000      	b.n	802529a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8025298:	2300      	movs	r3, #0
  }
}
 802529a:	4618      	mov	r0, r3
 802529c:	3714      	adds	r7, #20
 802529e:	46bd      	mov	sp, r7
 80252a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252a4:	4770      	bx	lr
	...

080252a8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80252a8:	b580      	push	{r7, lr}
 80252aa:	b082      	sub	sp, #8
 80252ac:	af00      	add	r7, sp, #0
 80252ae:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80252b0:	2210      	movs	r2, #16
 80252b2:	4904      	ldr	r1, [pc, #16]	; (80252c4 <ip4addr_ntoa+0x1c>)
 80252b4:	6878      	ldr	r0, [r7, #4]
 80252b6:	f000 f807 	bl	80252c8 <ip4addr_ntoa_r>
 80252ba:	4603      	mov	r3, r0
}
 80252bc:	4618      	mov	r0, r3
 80252be:	3708      	adds	r7, #8
 80252c0:	46bd      	mov	sp, r7
 80252c2:	bd80      	pop	{r7, pc}
 80252c4:	20016248 	.word	0x20016248

080252c8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80252c8:	b480      	push	{r7}
 80252ca:	b08d      	sub	sp, #52	; 0x34
 80252cc:	af00      	add	r7, sp, #0
 80252ce:	60f8      	str	r0, [r7, #12]
 80252d0:	60b9      	str	r1, [r7, #8]
 80252d2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80252d4:	2300      	movs	r3, #0
 80252d6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80252d8:	68fb      	ldr	r3, [r7, #12]
 80252da:	681b      	ldr	r3, [r3, #0]
 80252dc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80252de:	68bb      	ldr	r3, [r7, #8]
 80252e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80252e2:	f107 0318 	add.w	r3, r7, #24
 80252e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80252e8:	2300      	movs	r3, #0
 80252ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80252ee:	e058      	b.n	80253a2 <ip4addr_ntoa_r+0xda>
    i = 0;
 80252f0:	2300      	movs	r3, #0
 80252f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80252f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80252f8:	781a      	ldrb	r2, [r3, #0]
 80252fa:	4b32      	ldr	r3, [pc, #200]	; (80253c4 <ip4addr_ntoa_r+0xfc>)
 80252fc:	fba3 1302 	umull	r1, r3, r3, r2
 8025300:	08d9      	lsrs	r1, r3, #3
 8025302:	460b      	mov	r3, r1
 8025304:	009b      	lsls	r3, r3, #2
 8025306:	440b      	add	r3, r1
 8025308:	005b      	lsls	r3, r3, #1
 802530a:	1ad3      	subs	r3, r2, r3
 802530c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 802530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025310:	781b      	ldrb	r3, [r3, #0]
 8025312:	4a2c      	ldr	r2, [pc, #176]	; (80253c4 <ip4addr_ntoa_r+0xfc>)
 8025314:	fba2 2303 	umull	r2, r3, r2, r3
 8025318:	08db      	lsrs	r3, r3, #3
 802531a:	b2da      	uxtb	r2, r3
 802531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802531e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8025320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8025324:	1c5a      	adds	r2, r3, #1
 8025326:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 802532a:	4619      	mov	r1, r3
 802532c:	7ffb      	ldrb	r3, [r7, #31]
 802532e:	3330      	adds	r3, #48	; 0x30
 8025330:	b2da      	uxtb	r2, r3
 8025332:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8025336:	443b      	add	r3, r7
 8025338:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 802533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802533e:	781b      	ldrb	r3, [r3, #0]
 8025340:	2b00      	cmp	r3, #0
 8025342:	d1d8      	bne.n	80252f6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8025344:	e011      	b.n	802536a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8025346:	6a3b      	ldr	r3, [r7, #32]
 8025348:	1c5a      	adds	r2, r3, #1
 802534a:	623a      	str	r2, [r7, #32]
 802534c:	687a      	ldr	r2, [r7, #4]
 802534e:	429a      	cmp	r2, r3
 8025350:	dc01      	bgt.n	8025356 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8025352:	2300      	movs	r3, #0
 8025354:	e030      	b.n	80253b8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8025356:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802535c:	1c59      	adds	r1, r3, #1
 802535e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8025360:	3230      	adds	r2, #48	; 0x30
 8025362:	443a      	add	r2, r7
 8025364:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8025368:	701a      	strb	r2, [r3, #0]
    while (i--) {
 802536a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802536e:	1e5a      	subs	r2, r3, #1
 8025370:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8025374:	2b00      	cmp	r3, #0
 8025376:	d1e6      	bne.n	8025346 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8025378:	6a3b      	ldr	r3, [r7, #32]
 802537a:	1c5a      	adds	r2, r3, #1
 802537c:	623a      	str	r2, [r7, #32]
 802537e:	687a      	ldr	r2, [r7, #4]
 8025380:	429a      	cmp	r2, r3
 8025382:	dc01      	bgt.n	8025388 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8025384:	2300      	movs	r3, #0
 8025386:	e017      	b.n	80253b8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8025388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802538a:	1c5a      	adds	r2, r3, #1
 802538c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802538e:	222e      	movs	r2, #46	; 0x2e
 8025390:	701a      	strb	r2, [r3, #0]
    ap++;
 8025392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025394:	3301      	adds	r3, #1
 8025396:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8025398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802539c:	3301      	adds	r3, #1
 802539e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80253a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80253a6:	2b03      	cmp	r3, #3
 80253a8:	d9a2      	bls.n	80252f0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80253aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253ac:	3b01      	subs	r3, #1
 80253ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80253b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253b2:	2200      	movs	r2, #0
 80253b4:	701a      	strb	r2, [r3, #0]
  return buf;
 80253b6:	68bb      	ldr	r3, [r7, #8]
}
 80253b8:	4618      	mov	r0, r3
 80253ba:	3734      	adds	r7, #52	; 0x34
 80253bc:	46bd      	mov	sp, r7
 80253be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253c2:	4770      	bx	lr
 80253c4:	cccccccd 	.word	0xcccccccd

080253c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80253c8:	b580      	push	{r7, lr}
 80253ca:	b084      	sub	sp, #16
 80253cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80253ce:	2300      	movs	r3, #0
 80253d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80253d2:	4b12      	ldr	r3, [pc, #72]	; (802541c <ip_reass_tmr+0x54>)
 80253d4:	681b      	ldr	r3, [r3, #0]
 80253d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80253d8:	e018      	b.n	802540c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80253da:	68fb      	ldr	r3, [r7, #12]
 80253dc:	7fdb      	ldrb	r3, [r3, #31]
 80253de:	2b00      	cmp	r3, #0
 80253e0:	d00b      	beq.n	80253fa <ip_reass_tmr+0x32>
      r->timer--;
 80253e2:	68fb      	ldr	r3, [r7, #12]
 80253e4:	7fdb      	ldrb	r3, [r3, #31]
 80253e6:	3b01      	subs	r3, #1
 80253e8:	b2da      	uxtb	r2, r3
 80253ea:	68fb      	ldr	r3, [r7, #12]
 80253ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80253ee:	68fb      	ldr	r3, [r7, #12]
 80253f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80253f2:	68fb      	ldr	r3, [r7, #12]
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	60fb      	str	r3, [r7, #12]
 80253f8:	e008      	b.n	802540c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80253fa:	68fb      	ldr	r3, [r7, #12]
 80253fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80253fe:	68fb      	ldr	r3, [r7, #12]
 8025400:	681b      	ldr	r3, [r3, #0]
 8025402:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8025404:	68b9      	ldr	r1, [r7, #8]
 8025406:	6878      	ldr	r0, [r7, #4]
 8025408:	f000 f80a 	bl	8025420 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 802540c:	68fb      	ldr	r3, [r7, #12]
 802540e:	2b00      	cmp	r3, #0
 8025410:	d1e3      	bne.n	80253da <ip_reass_tmr+0x12>
    }
  }
}
 8025412:	bf00      	nop
 8025414:	bf00      	nop
 8025416:	3710      	adds	r7, #16
 8025418:	46bd      	mov	sp, r7
 802541a:	bd80      	pop	{r7, pc}
 802541c:	20016258 	.word	0x20016258

08025420 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8025420:	b580      	push	{r7, lr}
 8025422:	b088      	sub	sp, #32
 8025424:	af00      	add	r7, sp, #0
 8025426:	6078      	str	r0, [r7, #4]
 8025428:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802542a:	2300      	movs	r3, #0
 802542c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802542e:	683a      	ldr	r2, [r7, #0]
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	429a      	cmp	r2, r3
 8025434:	d105      	bne.n	8025442 <ip_reass_free_complete_datagram+0x22>
 8025436:	4b45      	ldr	r3, [pc, #276]	; (802554c <ip_reass_free_complete_datagram+0x12c>)
 8025438:	22ab      	movs	r2, #171	; 0xab
 802543a:	4945      	ldr	r1, [pc, #276]	; (8025550 <ip_reass_free_complete_datagram+0x130>)
 802543c:	4845      	ldr	r0, [pc, #276]	; (8025554 <ip_reass_free_complete_datagram+0x134>)
 802543e:	f001 f82b 	bl	8026498 <iprintf>
  if (prev != NULL) {
 8025442:	683b      	ldr	r3, [r7, #0]
 8025444:	2b00      	cmp	r3, #0
 8025446:	d00a      	beq.n	802545e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8025448:	683b      	ldr	r3, [r7, #0]
 802544a:	681b      	ldr	r3, [r3, #0]
 802544c:	687a      	ldr	r2, [r7, #4]
 802544e:	429a      	cmp	r2, r3
 8025450:	d005      	beq.n	802545e <ip_reass_free_complete_datagram+0x3e>
 8025452:	4b3e      	ldr	r3, [pc, #248]	; (802554c <ip_reass_free_complete_datagram+0x12c>)
 8025454:	22ad      	movs	r2, #173	; 0xad
 8025456:	4940      	ldr	r1, [pc, #256]	; (8025558 <ip_reass_free_complete_datagram+0x138>)
 8025458:	483e      	ldr	r0, [pc, #248]	; (8025554 <ip_reass_free_complete_datagram+0x134>)
 802545a:	f001 f81d 	bl	8026498 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	685b      	ldr	r3, [r3, #4]
 8025462:	685b      	ldr	r3, [r3, #4]
 8025464:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8025466:	697b      	ldr	r3, [r7, #20]
 8025468:	889b      	ldrh	r3, [r3, #4]
 802546a:	b29b      	uxth	r3, r3
 802546c:	2b00      	cmp	r3, #0
 802546e:	d12a      	bne.n	80254c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8025470:	687b      	ldr	r3, [r7, #4]
 8025472:	685b      	ldr	r3, [r3, #4]
 8025474:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8025476:	697b      	ldr	r3, [r7, #20]
 8025478:	681a      	ldr	r2, [r3, #0]
 802547a:	687b      	ldr	r3, [r7, #4]
 802547c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802547e:	69bb      	ldr	r3, [r7, #24]
 8025480:	6858      	ldr	r0, [r3, #4]
 8025482:	687b      	ldr	r3, [r7, #4]
 8025484:	3308      	adds	r3, #8
 8025486:	2214      	movs	r2, #20
 8025488:	4619      	mov	r1, r3
 802548a:	f000 fef5 	bl	8026278 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802548e:	2101      	movs	r1, #1
 8025490:	69b8      	ldr	r0, [r7, #24]
 8025492:	f7ff fbb3 	bl	8024bfc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8025496:	69b8      	ldr	r0, [r7, #24]
 8025498:	f7fd fb4e 	bl	8022b38 <pbuf_clen>
 802549c:	4603      	mov	r3, r0
 802549e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80254a0:	8bfa      	ldrh	r2, [r7, #30]
 80254a2:	8a7b      	ldrh	r3, [r7, #18]
 80254a4:	4413      	add	r3, r2
 80254a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80254aa:	db05      	blt.n	80254b8 <ip_reass_free_complete_datagram+0x98>
 80254ac:	4b27      	ldr	r3, [pc, #156]	; (802554c <ip_reass_free_complete_datagram+0x12c>)
 80254ae:	22bc      	movs	r2, #188	; 0xbc
 80254b0:	492a      	ldr	r1, [pc, #168]	; (802555c <ip_reass_free_complete_datagram+0x13c>)
 80254b2:	4828      	ldr	r0, [pc, #160]	; (8025554 <ip_reass_free_complete_datagram+0x134>)
 80254b4:	f000 fff0 	bl	8026498 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80254b8:	8bfa      	ldrh	r2, [r7, #30]
 80254ba:	8a7b      	ldrh	r3, [r7, #18]
 80254bc:	4413      	add	r3, r2
 80254be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80254c0:	69b8      	ldr	r0, [r7, #24]
 80254c2:	f7fd fab1 	bl	8022a28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	685b      	ldr	r3, [r3, #4]
 80254ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80254cc:	e01f      	b.n	802550e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80254ce:	69bb      	ldr	r3, [r7, #24]
 80254d0:	685b      	ldr	r3, [r3, #4]
 80254d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80254d4:	69bb      	ldr	r3, [r7, #24]
 80254d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80254d8:	697b      	ldr	r3, [r7, #20]
 80254da:	681b      	ldr	r3, [r3, #0]
 80254dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80254de:	68f8      	ldr	r0, [r7, #12]
 80254e0:	f7fd fb2a 	bl	8022b38 <pbuf_clen>
 80254e4:	4603      	mov	r3, r0
 80254e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80254e8:	8bfa      	ldrh	r2, [r7, #30]
 80254ea:	8a7b      	ldrh	r3, [r7, #18]
 80254ec:	4413      	add	r3, r2
 80254ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80254f2:	db05      	blt.n	8025500 <ip_reass_free_complete_datagram+0xe0>
 80254f4:	4b15      	ldr	r3, [pc, #84]	; (802554c <ip_reass_free_complete_datagram+0x12c>)
 80254f6:	22cc      	movs	r2, #204	; 0xcc
 80254f8:	4918      	ldr	r1, [pc, #96]	; (802555c <ip_reass_free_complete_datagram+0x13c>)
 80254fa:	4816      	ldr	r0, [pc, #88]	; (8025554 <ip_reass_free_complete_datagram+0x134>)
 80254fc:	f000 ffcc 	bl	8026498 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025500:	8bfa      	ldrh	r2, [r7, #30]
 8025502:	8a7b      	ldrh	r3, [r7, #18]
 8025504:	4413      	add	r3, r2
 8025506:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8025508:	68f8      	ldr	r0, [r7, #12]
 802550a:	f7fd fa8d 	bl	8022a28 <pbuf_free>
  while (p != NULL) {
 802550e:	69bb      	ldr	r3, [r7, #24]
 8025510:	2b00      	cmp	r3, #0
 8025512:	d1dc      	bne.n	80254ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8025514:	6839      	ldr	r1, [r7, #0]
 8025516:	6878      	ldr	r0, [r7, #4]
 8025518:	f000 f8c2 	bl	80256a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 802551c:	4b10      	ldr	r3, [pc, #64]	; (8025560 <ip_reass_free_complete_datagram+0x140>)
 802551e:	881b      	ldrh	r3, [r3, #0]
 8025520:	8bfa      	ldrh	r2, [r7, #30]
 8025522:	429a      	cmp	r2, r3
 8025524:	d905      	bls.n	8025532 <ip_reass_free_complete_datagram+0x112>
 8025526:	4b09      	ldr	r3, [pc, #36]	; (802554c <ip_reass_free_complete_datagram+0x12c>)
 8025528:	22d2      	movs	r2, #210	; 0xd2
 802552a:	490e      	ldr	r1, [pc, #56]	; (8025564 <ip_reass_free_complete_datagram+0x144>)
 802552c:	4809      	ldr	r0, [pc, #36]	; (8025554 <ip_reass_free_complete_datagram+0x134>)
 802552e:	f000 ffb3 	bl	8026498 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8025532:	4b0b      	ldr	r3, [pc, #44]	; (8025560 <ip_reass_free_complete_datagram+0x140>)
 8025534:	881a      	ldrh	r2, [r3, #0]
 8025536:	8bfb      	ldrh	r3, [r7, #30]
 8025538:	1ad3      	subs	r3, r2, r3
 802553a:	b29a      	uxth	r2, r3
 802553c:	4b08      	ldr	r3, [pc, #32]	; (8025560 <ip_reass_free_complete_datagram+0x140>)
 802553e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8025540:	8bfb      	ldrh	r3, [r7, #30]
}
 8025542:	4618      	mov	r0, r3
 8025544:	3720      	adds	r7, #32
 8025546:	46bd      	mov	sp, r7
 8025548:	bd80      	pop	{r7, pc}
 802554a:	bf00      	nop
 802554c:	0802d2bc 	.word	0x0802d2bc
 8025550:	0802d330 	.word	0x0802d330
 8025554:	0802d33c 	.word	0x0802d33c
 8025558:	0802d364 	.word	0x0802d364
 802555c:	0802d378 	.word	0x0802d378
 8025560:	2001625c 	.word	0x2001625c
 8025564:	0802d398 	.word	0x0802d398

08025568 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8025568:	b580      	push	{r7, lr}
 802556a:	b08a      	sub	sp, #40	; 0x28
 802556c:	af00      	add	r7, sp, #0
 802556e:	6078      	str	r0, [r7, #4]
 8025570:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8025572:	2300      	movs	r3, #0
 8025574:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8025576:	2300      	movs	r3, #0
 8025578:	623b      	str	r3, [r7, #32]
    prev = NULL;
 802557a:	2300      	movs	r3, #0
 802557c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802557e:	2300      	movs	r3, #0
 8025580:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8025582:	2300      	movs	r3, #0
 8025584:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8025586:	4b28      	ldr	r3, [pc, #160]	; (8025628 <ip_reass_remove_oldest_datagram+0xc0>)
 8025588:	681b      	ldr	r3, [r3, #0]
 802558a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 802558c:	e030      	b.n	80255f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025590:	695a      	ldr	r2, [r3, #20]
 8025592:	687b      	ldr	r3, [r7, #4]
 8025594:	68db      	ldr	r3, [r3, #12]
 8025596:	429a      	cmp	r2, r3
 8025598:	d10c      	bne.n	80255b4 <ip_reass_remove_oldest_datagram+0x4c>
 802559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802559c:	699a      	ldr	r2, [r3, #24]
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	691b      	ldr	r3, [r3, #16]
 80255a2:	429a      	cmp	r2, r3
 80255a4:	d106      	bne.n	80255b4 <ip_reass_remove_oldest_datagram+0x4c>
 80255a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255a8:	899a      	ldrh	r2, [r3, #12]
 80255aa:	687b      	ldr	r3, [r7, #4]
 80255ac:	889b      	ldrh	r3, [r3, #4]
 80255ae:	b29b      	uxth	r3, r3
 80255b0:	429a      	cmp	r2, r3
 80255b2:	d014      	beq.n	80255de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80255b4:	693b      	ldr	r3, [r7, #16]
 80255b6:	3301      	adds	r3, #1
 80255b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80255ba:	6a3b      	ldr	r3, [r7, #32]
 80255bc:	2b00      	cmp	r3, #0
 80255be:	d104      	bne.n	80255ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80255c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80255c4:	69fb      	ldr	r3, [r7, #28]
 80255c6:	61bb      	str	r3, [r7, #24]
 80255c8:	e009      	b.n	80255de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80255ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255cc:	7fda      	ldrb	r2, [r3, #31]
 80255ce:	6a3b      	ldr	r3, [r7, #32]
 80255d0:	7fdb      	ldrb	r3, [r3, #31]
 80255d2:	429a      	cmp	r2, r3
 80255d4:	d803      	bhi.n	80255de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80255d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80255da:	69fb      	ldr	r3, [r7, #28]
 80255dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80255de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255e0:	681b      	ldr	r3, [r3, #0]
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d001      	beq.n	80255ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80255e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80255ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255ec:	681b      	ldr	r3, [r3, #0]
 80255ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80255f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80255f2:	2b00      	cmp	r3, #0
 80255f4:	d1cb      	bne.n	802558e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80255f6:	6a3b      	ldr	r3, [r7, #32]
 80255f8:	2b00      	cmp	r3, #0
 80255fa:	d008      	beq.n	802560e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80255fc:	69b9      	ldr	r1, [r7, #24]
 80255fe:	6a38      	ldr	r0, [r7, #32]
 8025600:	f7ff ff0e 	bl	8025420 <ip_reass_free_complete_datagram>
 8025604:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8025606:	697a      	ldr	r2, [r7, #20]
 8025608:	68fb      	ldr	r3, [r7, #12]
 802560a:	4413      	add	r3, r2
 802560c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802560e:	697a      	ldr	r2, [r7, #20]
 8025610:	683b      	ldr	r3, [r7, #0]
 8025612:	429a      	cmp	r2, r3
 8025614:	da02      	bge.n	802561c <ip_reass_remove_oldest_datagram+0xb4>
 8025616:	693b      	ldr	r3, [r7, #16]
 8025618:	2b01      	cmp	r3, #1
 802561a:	dcac      	bgt.n	8025576 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 802561c:	697b      	ldr	r3, [r7, #20]
}
 802561e:	4618      	mov	r0, r3
 8025620:	3728      	adds	r7, #40	; 0x28
 8025622:	46bd      	mov	sp, r7
 8025624:	bd80      	pop	{r7, pc}
 8025626:	bf00      	nop
 8025628:	20016258 	.word	0x20016258

0802562c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 802562c:	b580      	push	{r7, lr}
 802562e:	b084      	sub	sp, #16
 8025630:	af00      	add	r7, sp, #0
 8025632:	6078      	str	r0, [r7, #4]
 8025634:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025636:	2001      	movs	r0, #1
 8025638:	f7fc fa76 	bl	8021b28 <memp_malloc>
 802563c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802563e:	68fb      	ldr	r3, [r7, #12]
 8025640:	2b00      	cmp	r3, #0
 8025642:	d110      	bne.n	8025666 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8025644:	6839      	ldr	r1, [r7, #0]
 8025646:	6878      	ldr	r0, [r7, #4]
 8025648:	f7ff ff8e 	bl	8025568 <ip_reass_remove_oldest_datagram>
 802564c:	4602      	mov	r2, r0
 802564e:	683b      	ldr	r3, [r7, #0]
 8025650:	4293      	cmp	r3, r2
 8025652:	dc03      	bgt.n	802565c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025654:	2001      	movs	r0, #1
 8025656:	f7fc fa67 	bl	8021b28 <memp_malloc>
 802565a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 802565c:	68fb      	ldr	r3, [r7, #12]
 802565e:	2b00      	cmp	r3, #0
 8025660:	d101      	bne.n	8025666 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8025662:	2300      	movs	r3, #0
 8025664:	e016      	b.n	8025694 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8025666:	2220      	movs	r2, #32
 8025668:	2100      	movs	r1, #0
 802566a:	68f8      	ldr	r0, [r7, #12]
 802566c:	f000 fe2c 	bl	80262c8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8025670:	68fb      	ldr	r3, [r7, #12]
 8025672:	220f      	movs	r2, #15
 8025674:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8025676:	4b09      	ldr	r3, [pc, #36]	; (802569c <ip_reass_enqueue_new_datagram+0x70>)
 8025678:	681a      	ldr	r2, [r3, #0]
 802567a:	68fb      	ldr	r3, [r7, #12]
 802567c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802567e:	4a07      	ldr	r2, [pc, #28]	; (802569c <ip_reass_enqueue_new_datagram+0x70>)
 8025680:	68fb      	ldr	r3, [r7, #12]
 8025682:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8025684:	68fb      	ldr	r3, [r7, #12]
 8025686:	3308      	adds	r3, #8
 8025688:	2214      	movs	r2, #20
 802568a:	6879      	ldr	r1, [r7, #4]
 802568c:	4618      	mov	r0, r3
 802568e:	f000 fdf3 	bl	8026278 <memcpy>
  return ipr;
 8025692:	68fb      	ldr	r3, [r7, #12]
}
 8025694:	4618      	mov	r0, r3
 8025696:	3710      	adds	r7, #16
 8025698:	46bd      	mov	sp, r7
 802569a:	bd80      	pop	{r7, pc}
 802569c:	20016258 	.word	0x20016258

080256a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80256a0:	b580      	push	{r7, lr}
 80256a2:	b082      	sub	sp, #8
 80256a4:	af00      	add	r7, sp, #0
 80256a6:	6078      	str	r0, [r7, #4]
 80256a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80256aa:	4b10      	ldr	r3, [pc, #64]	; (80256ec <ip_reass_dequeue_datagram+0x4c>)
 80256ac:	681b      	ldr	r3, [r3, #0]
 80256ae:	687a      	ldr	r2, [r7, #4]
 80256b0:	429a      	cmp	r2, r3
 80256b2:	d104      	bne.n	80256be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80256b4:	687b      	ldr	r3, [r7, #4]
 80256b6:	681b      	ldr	r3, [r3, #0]
 80256b8:	4a0c      	ldr	r2, [pc, #48]	; (80256ec <ip_reass_dequeue_datagram+0x4c>)
 80256ba:	6013      	str	r3, [r2, #0]
 80256bc:	e00d      	b.n	80256da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80256be:	683b      	ldr	r3, [r7, #0]
 80256c0:	2b00      	cmp	r3, #0
 80256c2:	d106      	bne.n	80256d2 <ip_reass_dequeue_datagram+0x32>
 80256c4:	4b0a      	ldr	r3, [pc, #40]	; (80256f0 <ip_reass_dequeue_datagram+0x50>)
 80256c6:	f240 1245 	movw	r2, #325	; 0x145
 80256ca:	490a      	ldr	r1, [pc, #40]	; (80256f4 <ip_reass_dequeue_datagram+0x54>)
 80256cc:	480a      	ldr	r0, [pc, #40]	; (80256f8 <ip_reass_dequeue_datagram+0x58>)
 80256ce:	f000 fee3 	bl	8026498 <iprintf>
    prev->next = ipr->next;
 80256d2:	687b      	ldr	r3, [r7, #4]
 80256d4:	681a      	ldr	r2, [r3, #0]
 80256d6:	683b      	ldr	r3, [r7, #0]
 80256d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80256da:	6879      	ldr	r1, [r7, #4]
 80256dc:	2001      	movs	r0, #1
 80256de:	f7fc fa93 	bl	8021c08 <memp_free>
}
 80256e2:	bf00      	nop
 80256e4:	3708      	adds	r7, #8
 80256e6:	46bd      	mov	sp, r7
 80256e8:	bd80      	pop	{r7, pc}
 80256ea:	bf00      	nop
 80256ec:	20016258 	.word	0x20016258
 80256f0:	0802d2bc 	.word	0x0802d2bc
 80256f4:	0802d3bc 	.word	0x0802d3bc
 80256f8:	0802d33c 	.word	0x0802d33c

080256fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80256fc:	b580      	push	{r7, lr}
 80256fe:	b08c      	sub	sp, #48	; 0x30
 8025700:	af00      	add	r7, sp, #0
 8025702:	60f8      	str	r0, [r7, #12]
 8025704:	60b9      	str	r1, [r7, #8]
 8025706:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8025708:	2300      	movs	r3, #0
 802570a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 802570c:	2301      	movs	r3, #1
 802570e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8025710:	68bb      	ldr	r3, [r7, #8]
 8025712:	685b      	ldr	r3, [r3, #4]
 8025714:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025716:	69fb      	ldr	r3, [r7, #28]
 8025718:	885b      	ldrh	r3, [r3, #2]
 802571a:	b29b      	uxth	r3, r3
 802571c:	4618      	mov	r0, r3
 802571e:	f7fb fda7 	bl	8021270 <lwip_htons>
 8025722:	4603      	mov	r3, r0
 8025724:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8025726:	69fb      	ldr	r3, [r7, #28]
 8025728:	781b      	ldrb	r3, [r3, #0]
 802572a:	f003 030f 	and.w	r3, r3, #15
 802572e:	b2db      	uxtb	r3, r3
 8025730:	009b      	lsls	r3, r3, #2
 8025732:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8025734:	7e7b      	ldrb	r3, [r7, #25]
 8025736:	b29b      	uxth	r3, r3
 8025738:	8b7a      	ldrh	r2, [r7, #26]
 802573a:	429a      	cmp	r2, r3
 802573c:	d202      	bcs.n	8025744 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802573e:	f04f 33ff 	mov.w	r3, #4294967295
 8025742:	e135      	b.n	80259b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8025744:	7e7b      	ldrb	r3, [r7, #25]
 8025746:	b29b      	uxth	r3, r3
 8025748:	8b7a      	ldrh	r2, [r7, #26]
 802574a:	1ad3      	subs	r3, r2, r3
 802574c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802574e:	69fb      	ldr	r3, [r7, #28]
 8025750:	88db      	ldrh	r3, [r3, #6]
 8025752:	b29b      	uxth	r3, r3
 8025754:	4618      	mov	r0, r3
 8025756:	f7fb fd8b 	bl	8021270 <lwip_htons>
 802575a:	4603      	mov	r3, r0
 802575c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025760:	b29b      	uxth	r3, r3
 8025762:	00db      	lsls	r3, r3, #3
 8025764:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8025766:	68bb      	ldr	r3, [r7, #8]
 8025768:	685b      	ldr	r3, [r3, #4]
 802576a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 802576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802576e:	2200      	movs	r2, #0
 8025770:	701a      	strb	r2, [r3, #0]
 8025772:	2200      	movs	r2, #0
 8025774:	705a      	strb	r2, [r3, #1]
 8025776:	2200      	movs	r2, #0
 8025778:	709a      	strb	r2, [r3, #2]
 802577a:	2200      	movs	r2, #0
 802577c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025780:	8afa      	ldrh	r2, [r7, #22]
 8025782:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8025784:	8afa      	ldrh	r2, [r7, #22]
 8025786:	8b7b      	ldrh	r3, [r7, #26]
 8025788:	4413      	add	r3, r2
 802578a:	b29a      	uxth	r2, r3
 802578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802578e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8025790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025792:	88db      	ldrh	r3, [r3, #6]
 8025794:	b29b      	uxth	r3, r3
 8025796:	8afa      	ldrh	r2, [r7, #22]
 8025798:	429a      	cmp	r2, r3
 802579a:	d902      	bls.n	80257a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802579c:	f04f 33ff 	mov.w	r3, #4294967295
 80257a0:	e106      	b.n	80259b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80257a2:	68fb      	ldr	r3, [r7, #12]
 80257a4:	685b      	ldr	r3, [r3, #4]
 80257a6:	627b      	str	r3, [r7, #36]	; 0x24
 80257a8:	e068      	b.n	802587c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80257aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80257ac:	685b      	ldr	r3, [r3, #4]
 80257ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80257b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80257b2:	889b      	ldrh	r3, [r3, #4]
 80257b4:	b29a      	uxth	r2, r3
 80257b6:	693b      	ldr	r3, [r7, #16]
 80257b8:	889b      	ldrh	r3, [r3, #4]
 80257ba:	b29b      	uxth	r3, r3
 80257bc:	429a      	cmp	r2, r3
 80257be:	d235      	bcs.n	802582c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80257c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80257c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80257c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80257c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257c8:	2b00      	cmp	r3, #0
 80257ca:	d020      	beq.n	802580e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80257cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80257ce:	889b      	ldrh	r3, [r3, #4]
 80257d0:	b29a      	uxth	r2, r3
 80257d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257d4:	88db      	ldrh	r3, [r3, #6]
 80257d6:	b29b      	uxth	r3, r3
 80257d8:	429a      	cmp	r2, r3
 80257da:	d307      	bcc.n	80257ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80257dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80257de:	88db      	ldrh	r3, [r3, #6]
 80257e0:	b29a      	uxth	r2, r3
 80257e2:	693b      	ldr	r3, [r7, #16]
 80257e4:	889b      	ldrh	r3, [r3, #4]
 80257e6:	b29b      	uxth	r3, r3
 80257e8:	429a      	cmp	r2, r3
 80257ea:	d902      	bls.n	80257f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80257ec:	f04f 33ff 	mov.w	r3, #4294967295
 80257f0:	e0de      	b.n	80259b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80257f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257f4:	68ba      	ldr	r2, [r7, #8]
 80257f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80257f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80257fa:	88db      	ldrh	r3, [r3, #6]
 80257fc:	b29a      	uxth	r2, r3
 80257fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025800:	889b      	ldrh	r3, [r3, #4]
 8025802:	b29b      	uxth	r3, r3
 8025804:	429a      	cmp	r2, r3
 8025806:	d03d      	beq.n	8025884 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8025808:	2300      	movs	r3, #0
 802580a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 802580c:	e03a      	b.n	8025884 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 802580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025810:	88db      	ldrh	r3, [r3, #6]
 8025812:	b29a      	uxth	r2, r3
 8025814:	693b      	ldr	r3, [r7, #16]
 8025816:	889b      	ldrh	r3, [r3, #4]
 8025818:	b29b      	uxth	r3, r3
 802581a:	429a      	cmp	r2, r3
 802581c:	d902      	bls.n	8025824 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802581e:	f04f 33ff 	mov.w	r3, #4294967295
 8025822:	e0c5      	b.n	80259b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8025824:	68fb      	ldr	r3, [r7, #12]
 8025826:	68ba      	ldr	r2, [r7, #8]
 8025828:	605a      	str	r2, [r3, #4]
      break;
 802582a:	e02b      	b.n	8025884 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 802582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802582e:	889b      	ldrh	r3, [r3, #4]
 8025830:	b29a      	uxth	r2, r3
 8025832:	693b      	ldr	r3, [r7, #16]
 8025834:	889b      	ldrh	r3, [r3, #4]
 8025836:	b29b      	uxth	r3, r3
 8025838:	429a      	cmp	r2, r3
 802583a:	d102      	bne.n	8025842 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802583c:	f04f 33ff 	mov.w	r3, #4294967295
 8025840:	e0b6      	b.n	80259b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8025842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025844:	889b      	ldrh	r3, [r3, #4]
 8025846:	b29a      	uxth	r2, r3
 8025848:	693b      	ldr	r3, [r7, #16]
 802584a:	88db      	ldrh	r3, [r3, #6]
 802584c:	b29b      	uxth	r3, r3
 802584e:	429a      	cmp	r2, r3
 8025850:	d202      	bcs.n	8025858 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025852:	f04f 33ff 	mov.w	r3, #4294967295
 8025856:	e0ab      	b.n	80259b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8025858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802585a:	2b00      	cmp	r3, #0
 802585c:	d009      	beq.n	8025872 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025860:	88db      	ldrh	r3, [r3, #6]
 8025862:	b29a      	uxth	r2, r3
 8025864:	693b      	ldr	r3, [r7, #16]
 8025866:	889b      	ldrh	r3, [r3, #4]
 8025868:	b29b      	uxth	r3, r3
 802586a:	429a      	cmp	r2, r3
 802586c:	d001      	beq.n	8025872 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802586e:	2300      	movs	r3, #0
 8025870:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8025872:	693b      	ldr	r3, [r7, #16]
 8025874:	681b      	ldr	r3, [r3, #0]
 8025876:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8025878:	693b      	ldr	r3, [r7, #16]
 802587a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 802587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802587e:	2b00      	cmp	r3, #0
 8025880:	d193      	bne.n	80257aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8025882:	e000      	b.n	8025886 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8025884:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8025886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025888:	2b00      	cmp	r3, #0
 802588a:	d12d      	bne.n	80258e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 802588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802588e:	2b00      	cmp	r3, #0
 8025890:	d01c      	beq.n	80258cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8025892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025894:	88db      	ldrh	r3, [r3, #6]
 8025896:	b29a      	uxth	r2, r3
 8025898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802589a:	889b      	ldrh	r3, [r3, #4]
 802589c:	b29b      	uxth	r3, r3
 802589e:	429a      	cmp	r2, r3
 80258a0:	d906      	bls.n	80258b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80258a2:	4b45      	ldr	r3, [pc, #276]	; (80259b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80258a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80258a8:	4944      	ldr	r1, [pc, #272]	; (80259bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80258aa:	4845      	ldr	r0, [pc, #276]	; (80259c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80258ac:	f000 fdf4 	bl	8026498 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80258b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258b2:	68ba      	ldr	r2, [r7, #8]
 80258b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80258b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258b8:	88db      	ldrh	r3, [r3, #6]
 80258ba:	b29a      	uxth	r2, r3
 80258bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80258be:	889b      	ldrh	r3, [r3, #4]
 80258c0:	b29b      	uxth	r3, r3
 80258c2:	429a      	cmp	r2, r3
 80258c4:	d010      	beq.n	80258e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80258c6:	2300      	movs	r3, #0
 80258c8:	623b      	str	r3, [r7, #32]
 80258ca:	e00d      	b.n	80258e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80258cc:	68fb      	ldr	r3, [r7, #12]
 80258ce:	685b      	ldr	r3, [r3, #4]
 80258d0:	2b00      	cmp	r3, #0
 80258d2:	d006      	beq.n	80258e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80258d4:	4b38      	ldr	r3, [pc, #224]	; (80259b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80258d6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80258da:	493a      	ldr	r1, [pc, #232]	; (80259c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80258dc:	4838      	ldr	r0, [pc, #224]	; (80259c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80258de:	f000 fddb 	bl	8026498 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80258e2:	68fb      	ldr	r3, [r7, #12]
 80258e4:	68ba      	ldr	r2, [r7, #8]
 80258e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80258e8:	687b      	ldr	r3, [r7, #4]
 80258ea:	2b00      	cmp	r3, #0
 80258ec:	d105      	bne.n	80258fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80258ee:	68fb      	ldr	r3, [r7, #12]
 80258f0:	7f9b      	ldrb	r3, [r3, #30]
 80258f2:	f003 0301 	and.w	r3, r3, #1
 80258f6:	2b00      	cmp	r3, #0
 80258f8:	d059      	beq.n	80259ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80258fa:	6a3b      	ldr	r3, [r7, #32]
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	d04f      	beq.n	80259a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8025900:	68fb      	ldr	r3, [r7, #12]
 8025902:	685b      	ldr	r3, [r3, #4]
 8025904:	2b00      	cmp	r3, #0
 8025906:	d006      	beq.n	8025916 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8025908:	68fb      	ldr	r3, [r7, #12]
 802590a:	685b      	ldr	r3, [r3, #4]
 802590c:	685b      	ldr	r3, [r3, #4]
 802590e:	889b      	ldrh	r3, [r3, #4]
 8025910:	b29b      	uxth	r3, r3
 8025912:	2b00      	cmp	r3, #0
 8025914:	d002      	beq.n	802591c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8025916:	2300      	movs	r3, #0
 8025918:	623b      	str	r3, [r7, #32]
 802591a:	e041      	b.n	80259a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802591e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8025920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025922:	681b      	ldr	r3, [r3, #0]
 8025924:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8025926:	e012      	b.n	802594e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8025928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802592a:	685b      	ldr	r3, [r3, #4]
 802592c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025930:	88db      	ldrh	r3, [r3, #6]
 8025932:	b29a      	uxth	r2, r3
 8025934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025936:	889b      	ldrh	r3, [r3, #4]
 8025938:	b29b      	uxth	r3, r3
 802593a:	429a      	cmp	r2, r3
 802593c:	d002      	beq.n	8025944 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802593e:	2300      	movs	r3, #0
 8025940:	623b      	str	r3, [r7, #32]
            break;
 8025942:	e007      	b.n	8025954 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8025944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025946:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8025948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802594a:	681b      	ldr	r3, [r3, #0]
 802594c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025950:	2b00      	cmp	r3, #0
 8025952:	d1e9      	bne.n	8025928 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8025954:	6a3b      	ldr	r3, [r7, #32]
 8025956:	2b00      	cmp	r3, #0
 8025958:	d022      	beq.n	80259a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802595a:	68fb      	ldr	r3, [r7, #12]
 802595c:	685b      	ldr	r3, [r3, #4]
 802595e:	2b00      	cmp	r3, #0
 8025960:	d106      	bne.n	8025970 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8025962:	4b15      	ldr	r3, [pc, #84]	; (80259b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025964:	f240 12df 	movw	r2, #479	; 0x1df
 8025968:	4917      	ldr	r1, [pc, #92]	; (80259c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802596a:	4815      	ldr	r0, [pc, #84]	; (80259c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802596c:	f000 fd94 	bl	8026498 <iprintf>
          LWIP_ASSERT("sanity check",
 8025970:	68fb      	ldr	r3, [r7, #12]
 8025972:	685b      	ldr	r3, [r3, #4]
 8025974:	685b      	ldr	r3, [r3, #4]
 8025976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025978:	429a      	cmp	r2, r3
 802597a:	d106      	bne.n	802598a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 802597c:	4b0e      	ldr	r3, [pc, #56]	; (80259b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802597e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8025982:	4911      	ldr	r1, [pc, #68]	; (80259c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025984:	480e      	ldr	r0, [pc, #56]	; (80259c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025986:	f000 fd87 	bl	8026498 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802598c:	681b      	ldr	r3, [r3, #0]
 802598e:	2b00      	cmp	r3, #0
 8025990:	d006      	beq.n	80259a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8025992:	4b09      	ldr	r3, [pc, #36]	; (80259b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025994:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8025998:	490c      	ldr	r1, [pc, #48]	; (80259cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 802599a:	4809      	ldr	r0, [pc, #36]	; (80259c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802599c:	f000 fd7c 	bl	8026498 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80259a0:	6a3b      	ldr	r3, [r7, #32]
 80259a2:	2b00      	cmp	r3, #0
 80259a4:	bf14      	ite	ne
 80259a6:	2301      	movne	r3, #1
 80259a8:	2300      	moveq	r3, #0
 80259aa:	b2db      	uxtb	r3, r3
 80259ac:	e000      	b.n	80259b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80259ae:	2300      	movs	r3, #0
}
 80259b0:	4618      	mov	r0, r3
 80259b2:	3730      	adds	r7, #48	; 0x30
 80259b4:	46bd      	mov	sp, r7
 80259b6:	bd80      	pop	{r7, pc}
 80259b8:	0802d2bc 	.word	0x0802d2bc
 80259bc:	0802d3d8 	.word	0x0802d3d8
 80259c0:	0802d33c 	.word	0x0802d33c
 80259c4:	0802d3f8 	.word	0x0802d3f8
 80259c8:	0802d430 	.word	0x0802d430
 80259cc:	0802d440 	.word	0x0802d440

080259d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80259d0:	b580      	push	{r7, lr}
 80259d2:	b08e      	sub	sp, #56	; 0x38
 80259d4:	af00      	add	r7, sp, #0
 80259d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80259d8:	687b      	ldr	r3, [r7, #4]
 80259da:	685b      	ldr	r3, [r3, #4]
 80259dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80259de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80259e0:	781b      	ldrb	r3, [r3, #0]
 80259e2:	f003 030f 	and.w	r3, r3, #15
 80259e6:	b2db      	uxtb	r3, r3
 80259e8:	009b      	lsls	r3, r3, #2
 80259ea:	b2db      	uxtb	r3, r3
 80259ec:	2b14      	cmp	r3, #20
 80259ee:	f040 8171 	bne.w	8025cd4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80259f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80259f4:	88db      	ldrh	r3, [r3, #6]
 80259f6:	b29b      	uxth	r3, r3
 80259f8:	4618      	mov	r0, r3
 80259fa:	f7fb fc39 	bl	8021270 <lwip_htons>
 80259fe:	4603      	mov	r3, r0
 8025a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025a04:	b29b      	uxth	r3, r3
 8025a06:	00db      	lsls	r3, r3, #3
 8025a08:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a0c:	885b      	ldrh	r3, [r3, #2]
 8025a0e:	b29b      	uxth	r3, r3
 8025a10:	4618      	mov	r0, r3
 8025a12:	f7fb fc2d 	bl	8021270 <lwip_htons>
 8025a16:	4603      	mov	r3, r0
 8025a18:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8025a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a1c:	781b      	ldrb	r3, [r3, #0]
 8025a1e:	f003 030f 	and.w	r3, r3, #15
 8025a22:	b2db      	uxtb	r3, r3
 8025a24:	009b      	lsls	r3, r3, #2
 8025a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8025a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025a2e:	b29b      	uxth	r3, r3
 8025a30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025a32:	429a      	cmp	r2, r3
 8025a34:	f0c0 8150 	bcc.w	8025cd8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8025a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025a3c:	b29b      	uxth	r3, r3
 8025a3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025a40:	1ad3      	subs	r3, r2, r3
 8025a42:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8025a44:	6878      	ldr	r0, [r7, #4]
 8025a46:	f7fd f877 	bl	8022b38 <pbuf_clen>
 8025a4a:	4603      	mov	r3, r0
 8025a4c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8025a4e:	4b8c      	ldr	r3, [pc, #560]	; (8025c80 <ip4_reass+0x2b0>)
 8025a50:	881b      	ldrh	r3, [r3, #0]
 8025a52:	461a      	mov	r2, r3
 8025a54:	8c3b      	ldrh	r3, [r7, #32]
 8025a56:	4413      	add	r3, r2
 8025a58:	2b0a      	cmp	r3, #10
 8025a5a:	dd10      	ble.n	8025a7e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025a5c:	8c3b      	ldrh	r3, [r7, #32]
 8025a5e:	4619      	mov	r1, r3
 8025a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025a62:	f7ff fd81 	bl	8025568 <ip_reass_remove_oldest_datagram>
 8025a66:	4603      	mov	r3, r0
 8025a68:	2b00      	cmp	r3, #0
 8025a6a:	f000 8137 	beq.w	8025cdc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8025a6e:	4b84      	ldr	r3, [pc, #528]	; (8025c80 <ip4_reass+0x2b0>)
 8025a70:	881b      	ldrh	r3, [r3, #0]
 8025a72:	461a      	mov	r2, r3
 8025a74:	8c3b      	ldrh	r3, [r7, #32]
 8025a76:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025a78:	2b0a      	cmp	r3, #10
 8025a7a:	f300 812f 	bgt.w	8025cdc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8025a7e:	4b81      	ldr	r3, [pc, #516]	; (8025c84 <ip4_reass+0x2b4>)
 8025a80:	681b      	ldr	r3, [r3, #0]
 8025a82:	633b      	str	r3, [r7, #48]	; 0x30
 8025a84:	e015      	b.n	8025ab2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8025a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a88:	695a      	ldr	r2, [r3, #20]
 8025a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a8c:	68db      	ldr	r3, [r3, #12]
 8025a8e:	429a      	cmp	r2, r3
 8025a90:	d10c      	bne.n	8025aac <ip4_reass+0xdc>
 8025a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025a94:	699a      	ldr	r2, [r3, #24]
 8025a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025a98:	691b      	ldr	r3, [r3, #16]
 8025a9a:	429a      	cmp	r2, r3
 8025a9c:	d106      	bne.n	8025aac <ip4_reass+0xdc>
 8025a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025aa0:	899a      	ldrh	r2, [r3, #12]
 8025aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025aa4:	889b      	ldrh	r3, [r3, #4]
 8025aa6:	b29b      	uxth	r3, r3
 8025aa8:	429a      	cmp	r2, r3
 8025aaa:	d006      	beq.n	8025aba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8025aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025aae:	681b      	ldr	r3, [r3, #0]
 8025ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8025ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ab4:	2b00      	cmp	r3, #0
 8025ab6:	d1e6      	bne.n	8025a86 <ip4_reass+0xb6>
 8025ab8:	e000      	b.n	8025abc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8025aba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8025abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025abe:	2b00      	cmp	r3, #0
 8025ac0:	d109      	bne.n	8025ad6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8025ac2:	8c3b      	ldrh	r3, [r7, #32]
 8025ac4:	4619      	mov	r1, r3
 8025ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025ac8:	f7ff fdb0 	bl	802562c <ip_reass_enqueue_new_datagram>
 8025acc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8025ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ad0:	2b00      	cmp	r3, #0
 8025ad2:	d11c      	bne.n	8025b0e <ip4_reass+0x13e>
      goto nullreturn;
 8025ad4:	e105      	b.n	8025ce2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8025ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ad8:	88db      	ldrh	r3, [r3, #6]
 8025ada:	b29b      	uxth	r3, r3
 8025adc:	4618      	mov	r0, r3
 8025ade:	f7fb fbc7 	bl	8021270 <lwip_htons>
 8025ae2:	4603      	mov	r3, r0
 8025ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	d110      	bne.n	8025b0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8025aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025aee:	89db      	ldrh	r3, [r3, #14]
 8025af0:	4618      	mov	r0, r3
 8025af2:	f7fb fbbd 	bl	8021270 <lwip_htons>
 8025af6:	4603      	mov	r3, r0
 8025af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8025afc:	2b00      	cmp	r3, #0
 8025afe:	d006      	beq.n	8025b0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8025b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b02:	3308      	adds	r3, #8
 8025b04:	2214      	movs	r2, #20
 8025b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025b08:	4618      	mov	r0, r3
 8025b0a:	f000 fbb5 	bl	8026278 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8025b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b10:	88db      	ldrh	r3, [r3, #6]
 8025b12:	b29b      	uxth	r3, r3
 8025b14:	f003 0320 	and.w	r3, r3, #32
 8025b18:	2b00      	cmp	r3, #0
 8025b1a:	bf0c      	ite	eq
 8025b1c:	2301      	moveq	r3, #1
 8025b1e:	2300      	movne	r3, #0
 8025b20:	b2db      	uxtb	r3, r3
 8025b22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8025b24:	69fb      	ldr	r3, [r7, #28]
 8025b26:	2b00      	cmp	r3, #0
 8025b28:	d00e      	beq.n	8025b48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8025b2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025b2e:	4413      	add	r3, r2
 8025b30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8025b32:	8b7a      	ldrh	r2, [r7, #26]
 8025b34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8025b36:	429a      	cmp	r2, r3
 8025b38:	f0c0 80a0 	bcc.w	8025c7c <ip4_reass+0x2ac>
 8025b3c:	8b7b      	ldrh	r3, [r7, #26]
 8025b3e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8025b42:	4293      	cmp	r3, r2
 8025b44:	f200 809a 	bhi.w	8025c7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8025b48:	69fa      	ldr	r2, [r7, #28]
 8025b4a:	6879      	ldr	r1, [r7, #4]
 8025b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025b4e:	f7ff fdd5 	bl	80256fc <ip_reass_chain_frag_into_datagram_and_validate>
 8025b52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8025b54:	697b      	ldr	r3, [r7, #20]
 8025b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025b5a:	f000 809b 	beq.w	8025c94 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8025b5e:	4b48      	ldr	r3, [pc, #288]	; (8025c80 <ip4_reass+0x2b0>)
 8025b60:	881a      	ldrh	r2, [r3, #0]
 8025b62:	8c3b      	ldrh	r3, [r7, #32]
 8025b64:	4413      	add	r3, r2
 8025b66:	b29a      	uxth	r2, r3
 8025b68:	4b45      	ldr	r3, [pc, #276]	; (8025c80 <ip4_reass+0x2b0>)
 8025b6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8025b6c:	69fb      	ldr	r3, [r7, #28]
 8025b6e:	2b00      	cmp	r3, #0
 8025b70:	d00d      	beq.n	8025b8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8025b72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025b76:	4413      	add	r3, r2
 8025b78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8025b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b7c:	8a7a      	ldrh	r2, [r7, #18]
 8025b7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8025b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b82:	7f9b      	ldrb	r3, [r3, #30]
 8025b84:	f043 0301 	orr.w	r3, r3, #1
 8025b88:	b2da      	uxtb	r2, r3
 8025b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8025b8e:	697b      	ldr	r3, [r7, #20]
 8025b90:	2b01      	cmp	r3, #1
 8025b92:	d171      	bne.n	8025c78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8025b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b96:	8b9b      	ldrh	r3, [r3, #28]
 8025b98:	3314      	adds	r3, #20
 8025b9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8025b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b9e:	685b      	ldr	r3, [r3, #4]
 8025ba0:	685b      	ldr	r3, [r3, #4]
 8025ba2:	681b      	ldr	r3, [r3, #0]
 8025ba4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8025ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ba8:	685b      	ldr	r3, [r3, #4]
 8025baa:	685b      	ldr	r3, [r3, #4]
 8025bac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8025bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bb0:	3308      	adds	r3, #8
 8025bb2:	2214      	movs	r2, #20
 8025bb4:	4619      	mov	r1, r3
 8025bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025bb8:	f000 fb5e 	bl	8026278 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8025bbc:	8a3b      	ldrh	r3, [r7, #16]
 8025bbe:	4618      	mov	r0, r3
 8025bc0:	f7fb fb56 	bl	8021270 <lwip_htons>
 8025bc4:	4603      	mov	r3, r0
 8025bc6:	461a      	mov	r2, r3
 8025bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8025bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bce:	2200      	movs	r2, #0
 8025bd0:	719a      	strb	r2, [r3, #6]
 8025bd2:	2200      	movs	r2, #0
 8025bd4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8025bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025bd8:	2200      	movs	r2, #0
 8025bda:	729a      	strb	r2, [r3, #10]
 8025bdc:	2200      	movs	r2, #0
 8025bde:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8025be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025be2:	685b      	ldr	r3, [r3, #4]
 8025be4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8025be6:	e00d      	b.n	8025c04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8025be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025bea:	685b      	ldr	r3, [r3, #4]
 8025bec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8025bee:	2114      	movs	r1, #20
 8025bf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025bf2:	f7fc fe93 	bl	802291c <pbuf_remove_header>
      pbuf_cat(p, r);
 8025bf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025bf8:	6878      	ldr	r0, [r7, #4]
 8025bfa:	f7fc ffd7 	bl	8022bac <pbuf_cat>
      r = iprh->next_pbuf;
 8025bfe:	68fb      	ldr	r3, [r7, #12]
 8025c00:	681b      	ldr	r3, [r3, #0]
 8025c02:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8025c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025c06:	2b00      	cmp	r3, #0
 8025c08:	d1ee      	bne.n	8025be8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8025c0a:	4b1e      	ldr	r3, [pc, #120]	; (8025c84 <ip4_reass+0x2b4>)
 8025c0c:	681b      	ldr	r3, [r3, #0]
 8025c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025c10:	429a      	cmp	r2, r3
 8025c12:	d102      	bne.n	8025c1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8025c14:	2300      	movs	r3, #0
 8025c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025c18:	e010      	b.n	8025c3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8025c1a:	4b1a      	ldr	r3, [pc, #104]	; (8025c84 <ip4_reass+0x2b4>)
 8025c1c:	681b      	ldr	r3, [r3, #0]
 8025c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025c20:	e007      	b.n	8025c32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8025c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c24:	681b      	ldr	r3, [r3, #0]
 8025c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025c28:	429a      	cmp	r2, r3
 8025c2a:	d006      	beq.n	8025c3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8025c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c2e:	681b      	ldr	r3, [r3, #0]
 8025c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025c34:	2b00      	cmp	r3, #0
 8025c36:	d1f4      	bne.n	8025c22 <ip4_reass+0x252>
 8025c38:	e000      	b.n	8025c3c <ip4_reass+0x26c>
          break;
 8025c3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8025c3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8025c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025c40:	f7ff fd2e 	bl	80256a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8025c44:	6878      	ldr	r0, [r7, #4]
 8025c46:	f7fc ff77 	bl	8022b38 <pbuf_clen>
 8025c4a:	4603      	mov	r3, r0
 8025c4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8025c4e:	4b0c      	ldr	r3, [pc, #48]	; (8025c80 <ip4_reass+0x2b0>)
 8025c50:	881b      	ldrh	r3, [r3, #0]
 8025c52:	8c3a      	ldrh	r2, [r7, #32]
 8025c54:	429a      	cmp	r2, r3
 8025c56:	d906      	bls.n	8025c66 <ip4_reass+0x296>
 8025c58:	4b0b      	ldr	r3, [pc, #44]	; (8025c88 <ip4_reass+0x2b8>)
 8025c5a:	f240 229b 	movw	r2, #667	; 0x29b
 8025c5e:	490b      	ldr	r1, [pc, #44]	; (8025c8c <ip4_reass+0x2bc>)
 8025c60:	480b      	ldr	r0, [pc, #44]	; (8025c90 <ip4_reass+0x2c0>)
 8025c62:	f000 fc19 	bl	8026498 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8025c66:	4b06      	ldr	r3, [pc, #24]	; (8025c80 <ip4_reass+0x2b0>)
 8025c68:	881a      	ldrh	r2, [r3, #0]
 8025c6a:	8c3b      	ldrh	r3, [r7, #32]
 8025c6c:	1ad3      	subs	r3, r2, r3
 8025c6e:	b29a      	uxth	r2, r3
 8025c70:	4b03      	ldr	r3, [pc, #12]	; (8025c80 <ip4_reass+0x2b0>)
 8025c72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8025c74:	687b      	ldr	r3, [r7, #4]
 8025c76:	e038      	b.n	8025cea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8025c78:	2300      	movs	r3, #0
 8025c7a:	e036      	b.n	8025cea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8025c7c:	bf00      	nop
 8025c7e:	e00a      	b.n	8025c96 <ip4_reass+0x2c6>
 8025c80:	2001625c 	.word	0x2001625c
 8025c84:	20016258 	.word	0x20016258
 8025c88:	0802d2bc 	.word	0x0802d2bc
 8025c8c:	0802d464 	.word	0x0802d464
 8025c90:	0802d33c 	.word	0x0802d33c
    goto nullreturn_ipr;
 8025c94:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8025c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025c98:	2b00      	cmp	r3, #0
 8025c9a:	d106      	bne.n	8025caa <ip4_reass+0x2da>
 8025c9c:	4b15      	ldr	r3, [pc, #84]	; (8025cf4 <ip4_reass+0x324>)
 8025c9e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8025ca2:	4915      	ldr	r1, [pc, #84]	; (8025cf8 <ip4_reass+0x328>)
 8025ca4:	4815      	ldr	r0, [pc, #84]	; (8025cfc <ip4_reass+0x32c>)
 8025ca6:	f000 fbf7 	bl	8026498 <iprintf>
  if (ipr->p == NULL) {
 8025caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025cac:	685b      	ldr	r3, [r3, #4]
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	d116      	bne.n	8025ce0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8025cb2:	4b13      	ldr	r3, [pc, #76]	; (8025d00 <ip4_reass+0x330>)
 8025cb4:	681b      	ldr	r3, [r3, #0]
 8025cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025cb8:	429a      	cmp	r2, r3
 8025cba:	d006      	beq.n	8025cca <ip4_reass+0x2fa>
 8025cbc:	4b0d      	ldr	r3, [pc, #52]	; (8025cf4 <ip4_reass+0x324>)
 8025cbe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8025cc2:	4910      	ldr	r1, [pc, #64]	; (8025d04 <ip4_reass+0x334>)
 8025cc4:	480d      	ldr	r0, [pc, #52]	; (8025cfc <ip4_reass+0x32c>)
 8025cc6:	f000 fbe7 	bl	8026498 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8025cca:	2100      	movs	r1, #0
 8025ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025cce:	f7ff fce7 	bl	80256a0 <ip_reass_dequeue_datagram>
 8025cd2:	e006      	b.n	8025ce2 <ip4_reass+0x312>
    goto nullreturn;
 8025cd4:	bf00      	nop
 8025cd6:	e004      	b.n	8025ce2 <ip4_reass+0x312>
    goto nullreturn;
 8025cd8:	bf00      	nop
 8025cda:	e002      	b.n	8025ce2 <ip4_reass+0x312>
      goto nullreturn;
 8025cdc:	bf00      	nop
 8025cde:	e000      	b.n	8025ce2 <ip4_reass+0x312>
  }

nullreturn:
 8025ce0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8025ce2:	6878      	ldr	r0, [r7, #4]
 8025ce4:	f7fc fea0 	bl	8022a28 <pbuf_free>
  return NULL;
 8025ce8:	2300      	movs	r3, #0
}
 8025cea:	4618      	mov	r0, r3
 8025cec:	3738      	adds	r7, #56	; 0x38
 8025cee:	46bd      	mov	sp, r7
 8025cf0:	bd80      	pop	{r7, pc}
 8025cf2:	bf00      	nop
 8025cf4:	0802d2bc 	.word	0x0802d2bc
 8025cf8:	0802d480 	.word	0x0802d480
 8025cfc:	0802d33c 	.word	0x0802d33c
 8025d00:	20016258 	.word	0x20016258
 8025d04:	0802d48c 	.word	0x0802d48c

08025d08 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8025d08:	b580      	push	{r7, lr}
 8025d0a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8025d0c:	2002      	movs	r0, #2
 8025d0e:	f7fb ff0b 	bl	8021b28 <memp_malloc>
 8025d12:	4603      	mov	r3, r0
}
 8025d14:	4618      	mov	r0, r3
 8025d16:	bd80      	pop	{r7, pc}

08025d18 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8025d18:	b580      	push	{r7, lr}
 8025d1a:	b082      	sub	sp, #8
 8025d1c:	af00      	add	r7, sp, #0
 8025d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8025d20:	687b      	ldr	r3, [r7, #4]
 8025d22:	2b00      	cmp	r3, #0
 8025d24:	d106      	bne.n	8025d34 <ip_frag_free_pbuf_custom_ref+0x1c>
 8025d26:	4b07      	ldr	r3, [pc, #28]	; (8025d44 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8025d28:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8025d2c:	4906      	ldr	r1, [pc, #24]	; (8025d48 <ip_frag_free_pbuf_custom_ref+0x30>)
 8025d2e:	4807      	ldr	r0, [pc, #28]	; (8025d4c <ip_frag_free_pbuf_custom_ref+0x34>)
 8025d30:	f000 fbb2 	bl	8026498 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8025d34:	6879      	ldr	r1, [r7, #4]
 8025d36:	2002      	movs	r0, #2
 8025d38:	f7fb ff66 	bl	8021c08 <memp_free>
}
 8025d3c:	bf00      	nop
 8025d3e:	3708      	adds	r7, #8
 8025d40:	46bd      	mov	sp, r7
 8025d42:	bd80      	pop	{r7, pc}
 8025d44:	0802d2bc 	.word	0x0802d2bc
 8025d48:	0802d4ac 	.word	0x0802d4ac
 8025d4c:	0802d33c 	.word	0x0802d33c

08025d50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8025d50:	b580      	push	{r7, lr}
 8025d52:	b084      	sub	sp, #16
 8025d54:	af00      	add	r7, sp, #0
 8025d56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8025d58:	687b      	ldr	r3, [r7, #4]
 8025d5a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8025d5c:	68fb      	ldr	r3, [r7, #12]
 8025d5e:	2b00      	cmp	r3, #0
 8025d60:	d106      	bne.n	8025d70 <ipfrag_free_pbuf_custom+0x20>
 8025d62:	4b11      	ldr	r3, [pc, #68]	; (8025da8 <ipfrag_free_pbuf_custom+0x58>)
 8025d64:	f240 22ce 	movw	r2, #718	; 0x2ce
 8025d68:	4910      	ldr	r1, [pc, #64]	; (8025dac <ipfrag_free_pbuf_custom+0x5c>)
 8025d6a:	4811      	ldr	r0, [pc, #68]	; (8025db0 <ipfrag_free_pbuf_custom+0x60>)
 8025d6c:	f000 fb94 	bl	8026498 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8025d70:	68fa      	ldr	r2, [r7, #12]
 8025d72:	687b      	ldr	r3, [r7, #4]
 8025d74:	429a      	cmp	r2, r3
 8025d76:	d006      	beq.n	8025d86 <ipfrag_free_pbuf_custom+0x36>
 8025d78:	4b0b      	ldr	r3, [pc, #44]	; (8025da8 <ipfrag_free_pbuf_custom+0x58>)
 8025d7a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8025d7e:	490d      	ldr	r1, [pc, #52]	; (8025db4 <ipfrag_free_pbuf_custom+0x64>)
 8025d80:	480b      	ldr	r0, [pc, #44]	; (8025db0 <ipfrag_free_pbuf_custom+0x60>)
 8025d82:	f000 fb89 	bl	8026498 <iprintf>
  if (pcr->original != NULL) {
 8025d86:	68fb      	ldr	r3, [r7, #12]
 8025d88:	695b      	ldr	r3, [r3, #20]
 8025d8a:	2b00      	cmp	r3, #0
 8025d8c:	d004      	beq.n	8025d98 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8025d8e:	68fb      	ldr	r3, [r7, #12]
 8025d90:	695b      	ldr	r3, [r3, #20]
 8025d92:	4618      	mov	r0, r3
 8025d94:	f7fc fe48 	bl	8022a28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8025d98:	68f8      	ldr	r0, [r7, #12]
 8025d9a:	f7ff ffbd 	bl	8025d18 <ip_frag_free_pbuf_custom_ref>
}
 8025d9e:	bf00      	nop
 8025da0:	3710      	adds	r7, #16
 8025da2:	46bd      	mov	sp, r7
 8025da4:	bd80      	pop	{r7, pc}
 8025da6:	bf00      	nop
 8025da8:	0802d2bc 	.word	0x0802d2bc
 8025dac:	0802d4b8 	.word	0x0802d4b8
 8025db0:	0802d33c 	.word	0x0802d33c
 8025db4:	0802d4c4 	.word	0x0802d4c4

08025db8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8025db8:	b580      	push	{r7, lr}
 8025dba:	b094      	sub	sp, #80	; 0x50
 8025dbc:	af02      	add	r7, sp, #8
 8025dbe:	60f8      	str	r0, [r7, #12]
 8025dc0:	60b9      	str	r1, [r7, #8]
 8025dc2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8025dc4:	2300      	movs	r3, #0
 8025dc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8025dca:	68bb      	ldr	r3, [r7, #8]
 8025dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025dce:	3b14      	subs	r3, #20
 8025dd0:	2b00      	cmp	r3, #0
 8025dd2:	da00      	bge.n	8025dd6 <ip4_frag+0x1e>
 8025dd4:	3307      	adds	r3, #7
 8025dd6:	10db      	asrs	r3, r3, #3
 8025dd8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8025dda:	2314      	movs	r3, #20
 8025ddc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8025dde:	68fb      	ldr	r3, [r7, #12]
 8025de0:	685b      	ldr	r3, [r3, #4]
 8025de2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8025de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025de6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8025de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025dea:	781b      	ldrb	r3, [r3, #0]
 8025dec:	f003 030f 	and.w	r3, r3, #15
 8025df0:	b2db      	uxtb	r3, r3
 8025df2:	009b      	lsls	r3, r3, #2
 8025df4:	b2db      	uxtb	r3, r3
 8025df6:	2b14      	cmp	r3, #20
 8025df8:	d002      	beq.n	8025e00 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8025dfa:	f06f 0305 	mvn.w	r3, #5
 8025dfe:	e110      	b.n	8026022 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8025e00:	68fb      	ldr	r3, [r7, #12]
 8025e02:	895b      	ldrh	r3, [r3, #10]
 8025e04:	2b13      	cmp	r3, #19
 8025e06:	d809      	bhi.n	8025e1c <ip4_frag+0x64>
 8025e08:	4b88      	ldr	r3, [pc, #544]	; (802602c <ip4_frag+0x274>)
 8025e0a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8025e0e:	4988      	ldr	r1, [pc, #544]	; (8026030 <ip4_frag+0x278>)
 8025e10:	4888      	ldr	r0, [pc, #544]	; (8026034 <ip4_frag+0x27c>)
 8025e12:	f000 fb41 	bl	8026498 <iprintf>
 8025e16:	f06f 0305 	mvn.w	r3, #5
 8025e1a:	e102      	b.n	8026022 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8025e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e1e:	88db      	ldrh	r3, [r3, #6]
 8025e20:	b29b      	uxth	r3, r3
 8025e22:	4618      	mov	r0, r3
 8025e24:	f7fb fa24 	bl	8021270 <lwip_htons>
 8025e28:	4603      	mov	r3, r0
 8025e2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8025e2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025e2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025e32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8025e36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8025e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8025e3e:	68fb      	ldr	r3, [r7, #12]
 8025e40:	891b      	ldrh	r3, [r3, #8]
 8025e42:	3b14      	subs	r3, #20
 8025e44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8025e48:	e0e1      	b.n	802600e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8025e4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8025e4c:	00db      	lsls	r3, r3, #3
 8025e4e:	b29b      	uxth	r3, r3
 8025e50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8025e54:	4293      	cmp	r3, r2
 8025e56:	bf28      	it	cs
 8025e58:	4613      	movcs	r3, r2
 8025e5a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8025e5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8025e60:	2114      	movs	r1, #20
 8025e62:	200e      	movs	r0, #14
 8025e64:	f7fc fafe 	bl	8022464 <pbuf_alloc>
 8025e68:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8025e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e6c:	2b00      	cmp	r3, #0
 8025e6e:	f000 80d5 	beq.w	802601c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8025e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e74:	895b      	ldrh	r3, [r3, #10]
 8025e76:	2b13      	cmp	r3, #19
 8025e78:	d806      	bhi.n	8025e88 <ip4_frag+0xd0>
 8025e7a:	4b6c      	ldr	r3, [pc, #432]	; (802602c <ip4_frag+0x274>)
 8025e7c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8025e80:	496d      	ldr	r1, [pc, #436]	; (8026038 <ip4_frag+0x280>)
 8025e82:	486c      	ldr	r0, [pc, #432]	; (8026034 <ip4_frag+0x27c>)
 8025e84:	f000 fb08 	bl	8026498 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8025e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e8a:	685b      	ldr	r3, [r3, #4]
 8025e8c:	2214      	movs	r2, #20
 8025e8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025e90:	4618      	mov	r0, r3
 8025e92:	f000 f9f1 	bl	8026278 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8025e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e98:	685b      	ldr	r3, [r3, #4]
 8025e9a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8025e9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025e9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8025ea2:	e064      	b.n	8025f6e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8025ea4:	68fb      	ldr	r3, [r7, #12]
 8025ea6:	895a      	ldrh	r2, [r3, #10]
 8025ea8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8025eaa:	1ad3      	subs	r3, r2, r3
 8025eac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8025eae:	68fb      	ldr	r3, [r7, #12]
 8025eb0:	895b      	ldrh	r3, [r3, #10]
 8025eb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025eb4:	429a      	cmp	r2, r3
 8025eb6:	d906      	bls.n	8025ec6 <ip4_frag+0x10e>
 8025eb8:	4b5c      	ldr	r3, [pc, #368]	; (802602c <ip4_frag+0x274>)
 8025eba:	f240 322d 	movw	r2, #813	; 0x32d
 8025ebe:	495f      	ldr	r1, [pc, #380]	; (802603c <ip4_frag+0x284>)
 8025ec0:	485c      	ldr	r0, [pc, #368]	; (8026034 <ip4_frag+0x27c>)
 8025ec2:	f000 fae9 	bl	8026498 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8025ec6:	8bfa      	ldrh	r2, [r7, #30]
 8025ec8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025ecc:	4293      	cmp	r3, r2
 8025ece:	bf28      	it	cs
 8025ed0:	4613      	movcs	r3, r2
 8025ed2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8025ed6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025eda:	2b00      	cmp	r3, #0
 8025edc:	d105      	bne.n	8025eea <ip4_frag+0x132>
        poff = 0;
 8025ede:	2300      	movs	r3, #0
 8025ee0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025ee2:	68fb      	ldr	r3, [r7, #12]
 8025ee4:	681b      	ldr	r3, [r3, #0]
 8025ee6:	60fb      	str	r3, [r7, #12]
        continue;
 8025ee8:	e041      	b.n	8025f6e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8025eea:	f7ff ff0d 	bl	8025d08 <ip_frag_alloc_pbuf_custom_ref>
 8025eee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8025ef0:	69bb      	ldr	r3, [r7, #24]
 8025ef2:	2b00      	cmp	r3, #0
 8025ef4:	d103      	bne.n	8025efe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8025ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025ef8:	f7fc fd96 	bl	8022a28 <pbuf_free>
        goto memerr;
 8025efc:	e08f      	b.n	802601e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025efe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8025f00:	68fb      	ldr	r3, [r7, #12]
 8025f02:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025f04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8025f06:	4413      	add	r3, r2
 8025f08:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8025f0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8025f10:	9201      	str	r2, [sp, #4]
 8025f12:	9300      	str	r3, [sp, #0]
 8025f14:	4603      	mov	r3, r0
 8025f16:	2241      	movs	r2, #65	; 0x41
 8025f18:	2000      	movs	r0, #0
 8025f1a:	f7fc fbcb 	bl	80226b4 <pbuf_alloced_custom>
 8025f1e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8025f20:	697b      	ldr	r3, [r7, #20]
 8025f22:	2b00      	cmp	r3, #0
 8025f24:	d106      	bne.n	8025f34 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8025f26:	69b8      	ldr	r0, [r7, #24]
 8025f28:	f7ff fef6 	bl	8025d18 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8025f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025f2e:	f7fc fd7b 	bl	8022a28 <pbuf_free>
        goto memerr;
 8025f32:	e074      	b.n	802601e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8025f34:	68f8      	ldr	r0, [r7, #12]
 8025f36:	f7fc fe17 	bl	8022b68 <pbuf_ref>
      pcr->original = p;
 8025f3a:	69bb      	ldr	r3, [r7, #24]
 8025f3c:	68fa      	ldr	r2, [r7, #12]
 8025f3e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8025f40:	69bb      	ldr	r3, [r7, #24]
 8025f42:	4a3f      	ldr	r2, [pc, #252]	; (8026040 <ip4_frag+0x288>)
 8025f44:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8025f46:	6979      	ldr	r1, [r7, #20]
 8025f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025f4a:	f7fc fe2f 	bl	8022bac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8025f4e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8025f52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025f56:	1ad3      	subs	r3, r2, r3
 8025f58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8025f5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025f60:	2b00      	cmp	r3, #0
 8025f62:	d004      	beq.n	8025f6e <ip4_frag+0x1b6>
        poff = 0;
 8025f64:	2300      	movs	r3, #0
 8025f66:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025f68:	68fb      	ldr	r3, [r7, #12]
 8025f6a:	681b      	ldr	r3, [r3, #0]
 8025f6c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8025f6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025f72:	2b00      	cmp	r3, #0
 8025f74:	d196      	bne.n	8025ea4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8025f76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025f78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025f7c:	4413      	add	r3, r2
 8025f7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8025f80:	68bb      	ldr	r3, [r7, #8]
 8025f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025f84:	f1a3 0213 	sub.w	r2, r3, #19
 8025f88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025f8c:	429a      	cmp	r2, r3
 8025f8e:	bfcc      	ite	gt
 8025f90:	2301      	movgt	r3, #1
 8025f92:	2300      	movle	r3, #0
 8025f94:	b2db      	uxtb	r3, r3
 8025f96:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8025f98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8025f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025fa0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8025fa2:	6a3b      	ldr	r3, [r7, #32]
 8025fa4:	2b00      	cmp	r3, #0
 8025fa6:	d002      	beq.n	8025fae <ip4_frag+0x1f6>
 8025fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	d003      	beq.n	8025fb6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8025fae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025fb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025fb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8025fb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025fb8:	4618      	mov	r0, r3
 8025fba:	f7fb f959 	bl	8021270 <lwip_htons>
 8025fbe:	4603      	mov	r3, r0
 8025fc0:	461a      	mov	r2, r3
 8025fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fc4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8025fc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025fc8:	3314      	adds	r3, #20
 8025fca:	b29b      	uxth	r3, r3
 8025fcc:	4618      	mov	r0, r3
 8025fce:	f7fb f94f 	bl	8021270 <lwip_htons>
 8025fd2:	4603      	mov	r3, r0
 8025fd4:	461a      	mov	r2, r3
 8025fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fd8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8025fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fdc:	2200      	movs	r2, #0
 8025fde:	729a      	strb	r2, [r3, #10]
 8025fe0:	2200      	movs	r2, #0
 8025fe2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8025fe4:	68bb      	ldr	r3, [r7, #8]
 8025fe6:	695b      	ldr	r3, [r3, #20]
 8025fe8:	687a      	ldr	r2, [r7, #4]
 8025fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025fec:	68b8      	ldr	r0, [r7, #8]
 8025fee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8025ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025ff2:	f7fc fd19 	bl	8022a28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8025ff6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8025ffa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025ffc:	1ad3      	subs	r3, r2, r3
 8025ffe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8026002:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8026006:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8026008:	4413      	add	r3, r2
 802600a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 802600e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8026012:	2b00      	cmp	r3, #0
 8026014:	f47f af19 	bne.w	8025e4a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8026018:	2300      	movs	r3, #0
 802601a:	e002      	b.n	8026022 <ip4_frag+0x26a>
      goto memerr;
 802601c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802601e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8026022:	4618      	mov	r0, r3
 8026024:	3748      	adds	r7, #72	; 0x48
 8026026:	46bd      	mov	sp, r7
 8026028:	bd80      	pop	{r7, pc}
 802602a:	bf00      	nop
 802602c:	0802d2bc 	.word	0x0802d2bc
 8026030:	0802d4d0 	.word	0x0802d4d0
 8026034:	0802d33c 	.word	0x0802d33c
 8026038:	0802d4ec 	.word	0x0802d4ec
 802603c:	0802d50c 	.word	0x0802d50c
 8026040:	08025d51 	.word	0x08025d51

08026044 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8026044:	b580      	push	{r7, lr}
 8026046:	b086      	sub	sp, #24
 8026048:	af00      	add	r7, sp, #0
 802604a:	6078      	str	r0, [r7, #4]
 802604c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802604e:	230e      	movs	r3, #14
 8026050:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8026052:	687b      	ldr	r3, [r7, #4]
 8026054:	895b      	ldrh	r3, [r3, #10]
 8026056:	2b0e      	cmp	r3, #14
 8026058:	d96e      	bls.n	8026138 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802605a:	687b      	ldr	r3, [r7, #4]
 802605c:	7bdb      	ldrb	r3, [r3, #15]
 802605e:	2b00      	cmp	r3, #0
 8026060:	d106      	bne.n	8026070 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8026062:	683b      	ldr	r3, [r7, #0]
 8026064:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8026068:	3301      	adds	r3, #1
 802606a:	b2da      	uxtb	r2, r3
 802606c:	687b      	ldr	r3, [r7, #4]
 802606e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8026070:	687b      	ldr	r3, [r7, #4]
 8026072:	685b      	ldr	r3, [r3, #4]
 8026074:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8026076:	693b      	ldr	r3, [r7, #16]
 8026078:	7b1a      	ldrb	r2, [r3, #12]
 802607a:	7b5b      	ldrb	r3, [r3, #13]
 802607c:	021b      	lsls	r3, r3, #8
 802607e:	4313      	orrs	r3, r2
 8026080:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8026082:	693b      	ldr	r3, [r7, #16]
 8026084:	781b      	ldrb	r3, [r3, #0]
 8026086:	f003 0301 	and.w	r3, r3, #1
 802608a:	2b00      	cmp	r3, #0
 802608c:	d023      	beq.n	80260d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802608e:	693b      	ldr	r3, [r7, #16]
 8026090:	781b      	ldrb	r3, [r3, #0]
 8026092:	2b01      	cmp	r3, #1
 8026094:	d10f      	bne.n	80260b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8026096:	693b      	ldr	r3, [r7, #16]
 8026098:	785b      	ldrb	r3, [r3, #1]
 802609a:	2b00      	cmp	r3, #0
 802609c:	d11b      	bne.n	80260d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802609e:	693b      	ldr	r3, [r7, #16]
 80260a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80260a2:	2b5e      	cmp	r3, #94	; 0x5e
 80260a4:	d117      	bne.n	80260d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80260a6:	687b      	ldr	r3, [r7, #4]
 80260a8:	7b5b      	ldrb	r3, [r3, #13]
 80260aa:	f043 0310 	orr.w	r3, r3, #16
 80260ae:	b2da      	uxtb	r2, r3
 80260b0:	687b      	ldr	r3, [r7, #4]
 80260b2:	735a      	strb	r2, [r3, #13]
 80260b4:	e00f      	b.n	80260d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80260b6:	693b      	ldr	r3, [r7, #16]
 80260b8:	2206      	movs	r2, #6
 80260ba:	4928      	ldr	r1, [pc, #160]	; (802615c <ethernet_input+0x118>)
 80260bc:	4618      	mov	r0, r3
 80260be:	f000 f8cb 	bl	8026258 <memcmp>
 80260c2:	4603      	mov	r3, r0
 80260c4:	2b00      	cmp	r3, #0
 80260c6:	d106      	bne.n	80260d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80260c8:	687b      	ldr	r3, [r7, #4]
 80260ca:	7b5b      	ldrb	r3, [r3, #13]
 80260cc:	f043 0308 	orr.w	r3, r3, #8
 80260d0:	b2da      	uxtb	r2, r3
 80260d2:	687b      	ldr	r3, [r7, #4]
 80260d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80260d6:	89fb      	ldrh	r3, [r7, #14]
 80260d8:	2b08      	cmp	r3, #8
 80260da:	d003      	beq.n	80260e4 <ethernet_input+0xa0>
 80260dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80260e0:	d014      	beq.n	802610c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80260e2:	e032      	b.n	802614a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80260e4:	683b      	ldr	r3, [r7, #0]
 80260e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80260ea:	f003 0308 	and.w	r3, r3, #8
 80260ee:	2b00      	cmp	r3, #0
 80260f0:	d024      	beq.n	802613c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80260f2:	8afb      	ldrh	r3, [r7, #22]
 80260f4:	4619      	mov	r1, r3
 80260f6:	6878      	ldr	r0, [r7, #4]
 80260f8:	f7fc fc10 	bl	802291c <pbuf_remove_header>
 80260fc:	4603      	mov	r3, r0
 80260fe:	2b00      	cmp	r3, #0
 8026100:	d11e      	bne.n	8026140 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8026102:	6839      	ldr	r1, [r7, #0]
 8026104:	6878      	ldr	r0, [r7, #4]
 8026106:	f7fe fe8d 	bl	8024e24 <ip4_input>
      break;
 802610a:	e013      	b.n	8026134 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802610c:	683b      	ldr	r3, [r7, #0]
 802610e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026112:	f003 0308 	and.w	r3, r3, #8
 8026116:	2b00      	cmp	r3, #0
 8026118:	d014      	beq.n	8026144 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802611a:	8afb      	ldrh	r3, [r7, #22]
 802611c:	4619      	mov	r1, r3
 802611e:	6878      	ldr	r0, [r7, #4]
 8026120:	f7fc fbfc 	bl	802291c <pbuf_remove_header>
 8026124:	4603      	mov	r3, r0
 8026126:	2b00      	cmp	r3, #0
 8026128:	d10e      	bne.n	8026148 <ethernet_input+0x104>
        etharp_input(p, netif);
 802612a:	6839      	ldr	r1, [r7, #0]
 802612c:	6878      	ldr	r0, [r7, #4]
 802612e:	f7fe f82d 	bl	802418c <etharp_input>
      break;
 8026132:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8026134:	2300      	movs	r3, #0
 8026136:	e00c      	b.n	8026152 <ethernet_input+0x10e>
    goto free_and_return;
 8026138:	bf00      	nop
 802613a:	e006      	b.n	802614a <ethernet_input+0x106>
        goto free_and_return;
 802613c:	bf00      	nop
 802613e:	e004      	b.n	802614a <ethernet_input+0x106>
        goto free_and_return;
 8026140:	bf00      	nop
 8026142:	e002      	b.n	802614a <ethernet_input+0x106>
        goto free_and_return;
 8026144:	bf00      	nop
 8026146:	e000      	b.n	802614a <ethernet_input+0x106>
        goto free_and_return;
 8026148:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802614a:	6878      	ldr	r0, [r7, #4]
 802614c:	f7fc fc6c 	bl	8022a28 <pbuf_free>
  return ERR_OK;
 8026150:	2300      	movs	r3, #0
}
 8026152:	4618      	mov	r0, r3
 8026154:	3718      	adds	r7, #24
 8026156:	46bd      	mov	sp, r7
 8026158:	bd80      	pop	{r7, pc}
 802615a:	bf00      	nop
 802615c:	0802daa4 	.word	0x0802daa4

08026160 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8026160:	b580      	push	{r7, lr}
 8026162:	b086      	sub	sp, #24
 8026164:	af00      	add	r7, sp, #0
 8026166:	60f8      	str	r0, [r7, #12]
 8026168:	60b9      	str	r1, [r7, #8]
 802616a:	607a      	str	r2, [r7, #4]
 802616c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802616e:	8c3b      	ldrh	r3, [r7, #32]
 8026170:	4618      	mov	r0, r3
 8026172:	f7fb f87d 	bl	8021270 <lwip_htons>
 8026176:	4603      	mov	r3, r0
 8026178:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802617a:	210e      	movs	r1, #14
 802617c:	68b8      	ldr	r0, [r7, #8]
 802617e:	f7fc fbbd 	bl	80228fc <pbuf_add_header>
 8026182:	4603      	mov	r3, r0
 8026184:	2b00      	cmp	r3, #0
 8026186:	d125      	bne.n	80261d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8026188:	68bb      	ldr	r3, [r7, #8]
 802618a:	685b      	ldr	r3, [r3, #4]
 802618c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802618e:	693b      	ldr	r3, [r7, #16]
 8026190:	8afa      	ldrh	r2, [r7, #22]
 8026192:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8026194:	693b      	ldr	r3, [r7, #16]
 8026196:	2206      	movs	r2, #6
 8026198:	6839      	ldr	r1, [r7, #0]
 802619a:	4618      	mov	r0, r3
 802619c:	f000 f86c 	bl	8026278 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80261a0:	693b      	ldr	r3, [r7, #16]
 80261a2:	3306      	adds	r3, #6
 80261a4:	2206      	movs	r2, #6
 80261a6:	6879      	ldr	r1, [r7, #4]
 80261a8:	4618      	mov	r0, r3
 80261aa:	f000 f865 	bl	8026278 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80261ae:	68fb      	ldr	r3, [r7, #12]
 80261b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80261b4:	2b06      	cmp	r3, #6
 80261b6:	d006      	beq.n	80261c6 <ethernet_output+0x66>
 80261b8:	4b0a      	ldr	r3, [pc, #40]	; (80261e4 <ethernet_output+0x84>)
 80261ba:	f44f 7299 	mov.w	r2, #306	; 0x132
 80261be:	490a      	ldr	r1, [pc, #40]	; (80261e8 <ethernet_output+0x88>)
 80261c0:	480a      	ldr	r0, [pc, #40]	; (80261ec <ethernet_output+0x8c>)
 80261c2:	f000 f969 	bl	8026498 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80261c6:	68fb      	ldr	r3, [r7, #12]
 80261c8:	699b      	ldr	r3, [r3, #24]
 80261ca:	68b9      	ldr	r1, [r7, #8]
 80261cc:	68f8      	ldr	r0, [r7, #12]
 80261ce:	4798      	blx	r3
 80261d0:	4603      	mov	r3, r0
 80261d2:	e002      	b.n	80261da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80261d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80261d6:	f06f 0301 	mvn.w	r3, #1
}
 80261da:	4618      	mov	r0, r3
 80261dc:	3718      	adds	r7, #24
 80261de:	46bd      	mov	sp, r7
 80261e0:	bd80      	pop	{r7, pc}
 80261e2:	bf00      	nop
 80261e4:	0802d51c 	.word	0x0802d51c
 80261e8:	0802d58c 	.word	0x0802d58c
 80261ec:	0802d5c0 	.word	0x0802d5c0

080261f0 <__libc_init_array>:
 80261f0:	b570      	push	{r4, r5, r6, lr}
 80261f2:	4d0d      	ldr	r5, [pc, #52]	; (8026228 <__libc_init_array+0x38>)
 80261f4:	4c0d      	ldr	r4, [pc, #52]	; (802622c <__libc_init_array+0x3c>)
 80261f6:	1b64      	subs	r4, r4, r5
 80261f8:	10a4      	asrs	r4, r4, #2
 80261fa:	2600      	movs	r6, #0
 80261fc:	42a6      	cmp	r6, r4
 80261fe:	d109      	bne.n	8026214 <__libc_init_array+0x24>
 8026200:	4d0b      	ldr	r5, [pc, #44]	; (8026230 <__libc_init_array+0x40>)
 8026202:	4c0c      	ldr	r4, [pc, #48]	; (8026234 <__libc_init_array+0x44>)
 8026204:	f001 fbfe 	bl	8027a04 <_init>
 8026208:	1b64      	subs	r4, r4, r5
 802620a:	10a4      	asrs	r4, r4, #2
 802620c:	2600      	movs	r6, #0
 802620e:	42a6      	cmp	r6, r4
 8026210:	d105      	bne.n	802621e <__libc_init_array+0x2e>
 8026212:	bd70      	pop	{r4, r5, r6, pc}
 8026214:	f855 3b04 	ldr.w	r3, [r5], #4
 8026218:	4798      	blx	r3
 802621a:	3601      	adds	r6, #1
 802621c:	e7ee      	b.n	80261fc <__libc_init_array+0xc>
 802621e:	f855 3b04 	ldr.w	r3, [r5], #4
 8026222:	4798      	blx	r3
 8026224:	3601      	adds	r6, #1
 8026226:	e7f2      	b.n	802620e <__libc_init_array+0x1e>
 8026228:	0802dc04 	.word	0x0802dc04
 802622c:	0802dc04 	.word	0x0802dc04
 8026230:	0802dc04 	.word	0x0802dc04
 8026234:	0802dc08 	.word	0x0802dc08

08026238 <malloc>:
 8026238:	4b02      	ldr	r3, [pc, #8]	; (8026244 <malloc+0xc>)
 802623a:	4601      	mov	r1, r0
 802623c:	6818      	ldr	r0, [r3, #0]
 802623e:	f000 b8b7 	b.w	80263b0 <_malloc_r>
 8026242:	bf00      	nop
 8026244:	20000340 	.word	0x20000340

08026248 <free>:
 8026248:	4b02      	ldr	r3, [pc, #8]	; (8026254 <free+0xc>)
 802624a:	4601      	mov	r1, r0
 802624c:	6818      	ldr	r0, [r3, #0]
 802624e:	f000 b843 	b.w	80262d8 <_free_r>
 8026252:	bf00      	nop
 8026254:	20000340 	.word	0x20000340

08026258 <memcmp>:
 8026258:	b510      	push	{r4, lr}
 802625a:	3901      	subs	r1, #1
 802625c:	4402      	add	r2, r0
 802625e:	4290      	cmp	r0, r2
 8026260:	d101      	bne.n	8026266 <memcmp+0xe>
 8026262:	2000      	movs	r0, #0
 8026264:	e005      	b.n	8026272 <memcmp+0x1a>
 8026266:	7803      	ldrb	r3, [r0, #0]
 8026268:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802626c:	42a3      	cmp	r3, r4
 802626e:	d001      	beq.n	8026274 <memcmp+0x1c>
 8026270:	1b18      	subs	r0, r3, r4
 8026272:	bd10      	pop	{r4, pc}
 8026274:	3001      	adds	r0, #1
 8026276:	e7f2      	b.n	802625e <memcmp+0x6>

08026278 <memcpy>:
 8026278:	440a      	add	r2, r1
 802627a:	4291      	cmp	r1, r2
 802627c:	f100 33ff 	add.w	r3, r0, #4294967295
 8026280:	d100      	bne.n	8026284 <memcpy+0xc>
 8026282:	4770      	bx	lr
 8026284:	b510      	push	{r4, lr}
 8026286:	f811 4b01 	ldrb.w	r4, [r1], #1
 802628a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802628e:	4291      	cmp	r1, r2
 8026290:	d1f9      	bne.n	8026286 <memcpy+0xe>
 8026292:	bd10      	pop	{r4, pc}

08026294 <memmove>:
 8026294:	4288      	cmp	r0, r1
 8026296:	b510      	push	{r4, lr}
 8026298:	eb01 0402 	add.w	r4, r1, r2
 802629c:	d902      	bls.n	80262a4 <memmove+0x10>
 802629e:	4284      	cmp	r4, r0
 80262a0:	4623      	mov	r3, r4
 80262a2:	d807      	bhi.n	80262b4 <memmove+0x20>
 80262a4:	1e43      	subs	r3, r0, #1
 80262a6:	42a1      	cmp	r1, r4
 80262a8:	d008      	beq.n	80262bc <memmove+0x28>
 80262aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80262ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80262b2:	e7f8      	b.n	80262a6 <memmove+0x12>
 80262b4:	4402      	add	r2, r0
 80262b6:	4601      	mov	r1, r0
 80262b8:	428a      	cmp	r2, r1
 80262ba:	d100      	bne.n	80262be <memmove+0x2a>
 80262bc:	bd10      	pop	{r4, pc}
 80262be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80262c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80262c6:	e7f7      	b.n	80262b8 <memmove+0x24>

080262c8 <memset>:
 80262c8:	4402      	add	r2, r0
 80262ca:	4603      	mov	r3, r0
 80262cc:	4293      	cmp	r3, r2
 80262ce:	d100      	bne.n	80262d2 <memset+0xa>
 80262d0:	4770      	bx	lr
 80262d2:	f803 1b01 	strb.w	r1, [r3], #1
 80262d6:	e7f9      	b.n	80262cc <memset+0x4>

080262d8 <_free_r>:
 80262d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80262da:	2900      	cmp	r1, #0
 80262dc:	d044      	beq.n	8026368 <_free_r+0x90>
 80262de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80262e2:	9001      	str	r0, [sp, #4]
 80262e4:	2b00      	cmp	r3, #0
 80262e6:	f1a1 0404 	sub.w	r4, r1, #4
 80262ea:	bfb8      	it	lt
 80262ec:	18e4      	addlt	r4, r4, r3
 80262ee:	f000 fdbb 	bl	8026e68 <__malloc_lock>
 80262f2:	4a1e      	ldr	r2, [pc, #120]	; (802636c <_free_r+0x94>)
 80262f4:	9801      	ldr	r0, [sp, #4]
 80262f6:	6813      	ldr	r3, [r2, #0]
 80262f8:	b933      	cbnz	r3, 8026308 <_free_r+0x30>
 80262fa:	6063      	str	r3, [r4, #4]
 80262fc:	6014      	str	r4, [r2, #0]
 80262fe:	b003      	add	sp, #12
 8026300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026304:	f000 bdb6 	b.w	8026e74 <__malloc_unlock>
 8026308:	42a3      	cmp	r3, r4
 802630a:	d908      	bls.n	802631e <_free_r+0x46>
 802630c:	6825      	ldr	r5, [r4, #0]
 802630e:	1961      	adds	r1, r4, r5
 8026310:	428b      	cmp	r3, r1
 8026312:	bf01      	itttt	eq
 8026314:	6819      	ldreq	r1, [r3, #0]
 8026316:	685b      	ldreq	r3, [r3, #4]
 8026318:	1949      	addeq	r1, r1, r5
 802631a:	6021      	streq	r1, [r4, #0]
 802631c:	e7ed      	b.n	80262fa <_free_r+0x22>
 802631e:	461a      	mov	r2, r3
 8026320:	685b      	ldr	r3, [r3, #4]
 8026322:	b10b      	cbz	r3, 8026328 <_free_r+0x50>
 8026324:	42a3      	cmp	r3, r4
 8026326:	d9fa      	bls.n	802631e <_free_r+0x46>
 8026328:	6811      	ldr	r1, [r2, #0]
 802632a:	1855      	adds	r5, r2, r1
 802632c:	42a5      	cmp	r5, r4
 802632e:	d10b      	bne.n	8026348 <_free_r+0x70>
 8026330:	6824      	ldr	r4, [r4, #0]
 8026332:	4421      	add	r1, r4
 8026334:	1854      	adds	r4, r2, r1
 8026336:	42a3      	cmp	r3, r4
 8026338:	6011      	str	r1, [r2, #0]
 802633a:	d1e0      	bne.n	80262fe <_free_r+0x26>
 802633c:	681c      	ldr	r4, [r3, #0]
 802633e:	685b      	ldr	r3, [r3, #4]
 8026340:	6053      	str	r3, [r2, #4]
 8026342:	4421      	add	r1, r4
 8026344:	6011      	str	r1, [r2, #0]
 8026346:	e7da      	b.n	80262fe <_free_r+0x26>
 8026348:	d902      	bls.n	8026350 <_free_r+0x78>
 802634a:	230c      	movs	r3, #12
 802634c:	6003      	str	r3, [r0, #0]
 802634e:	e7d6      	b.n	80262fe <_free_r+0x26>
 8026350:	6825      	ldr	r5, [r4, #0]
 8026352:	1961      	adds	r1, r4, r5
 8026354:	428b      	cmp	r3, r1
 8026356:	bf04      	itt	eq
 8026358:	6819      	ldreq	r1, [r3, #0]
 802635a:	685b      	ldreq	r3, [r3, #4]
 802635c:	6063      	str	r3, [r4, #4]
 802635e:	bf04      	itt	eq
 8026360:	1949      	addeq	r1, r1, r5
 8026362:	6021      	streq	r1, [r4, #0]
 8026364:	6054      	str	r4, [r2, #4]
 8026366:	e7ca      	b.n	80262fe <_free_r+0x26>
 8026368:	b003      	add	sp, #12
 802636a:	bd30      	pop	{r4, r5, pc}
 802636c:	20016260 	.word	0x20016260

08026370 <sbrk_aligned>:
 8026370:	b570      	push	{r4, r5, r6, lr}
 8026372:	4e0e      	ldr	r6, [pc, #56]	; (80263ac <sbrk_aligned+0x3c>)
 8026374:	460c      	mov	r4, r1
 8026376:	6831      	ldr	r1, [r6, #0]
 8026378:	4605      	mov	r5, r0
 802637a:	b911      	cbnz	r1, 8026382 <sbrk_aligned+0x12>
 802637c:	f000 f96e 	bl	802665c <_sbrk_r>
 8026380:	6030      	str	r0, [r6, #0]
 8026382:	4621      	mov	r1, r4
 8026384:	4628      	mov	r0, r5
 8026386:	f000 f969 	bl	802665c <_sbrk_r>
 802638a:	1c43      	adds	r3, r0, #1
 802638c:	d00a      	beq.n	80263a4 <sbrk_aligned+0x34>
 802638e:	1cc4      	adds	r4, r0, #3
 8026390:	f024 0403 	bic.w	r4, r4, #3
 8026394:	42a0      	cmp	r0, r4
 8026396:	d007      	beq.n	80263a8 <sbrk_aligned+0x38>
 8026398:	1a21      	subs	r1, r4, r0
 802639a:	4628      	mov	r0, r5
 802639c:	f000 f95e 	bl	802665c <_sbrk_r>
 80263a0:	3001      	adds	r0, #1
 80263a2:	d101      	bne.n	80263a8 <sbrk_aligned+0x38>
 80263a4:	f04f 34ff 	mov.w	r4, #4294967295
 80263a8:	4620      	mov	r0, r4
 80263aa:	bd70      	pop	{r4, r5, r6, pc}
 80263ac:	20016264 	.word	0x20016264

080263b0 <_malloc_r>:
 80263b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80263b4:	1ccd      	adds	r5, r1, #3
 80263b6:	f025 0503 	bic.w	r5, r5, #3
 80263ba:	3508      	adds	r5, #8
 80263bc:	2d0c      	cmp	r5, #12
 80263be:	bf38      	it	cc
 80263c0:	250c      	movcc	r5, #12
 80263c2:	2d00      	cmp	r5, #0
 80263c4:	4607      	mov	r7, r0
 80263c6:	db01      	blt.n	80263cc <_malloc_r+0x1c>
 80263c8:	42a9      	cmp	r1, r5
 80263ca:	d905      	bls.n	80263d8 <_malloc_r+0x28>
 80263cc:	230c      	movs	r3, #12
 80263ce:	603b      	str	r3, [r7, #0]
 80263d0:	2600      	movs	r6, #0
 80263d2:	4630      	mov	r0, r6
 80263d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80263d8:	4e2e      	ldr	r6, [pc, #184]	; (8026494 <_malloc_r+0xe4>)
 80263da:	f000 fd45 	bl	8026e68 <__malloc_lock>
 80263de:	6833      	ldr	r3, [r6, #0]
 80263e0:	461c      	mov	r4, r3
 80263e2:	bb34      	cbnz	r4, 8026432 <_malloc_r+0x82>
 80263e4:	4629      	mov	r1, r5
 80263e6:	4638      	mov	r0, r7
 80263e8:	f7ff ffc2 	bl	8026370 <sbrk_aligned>
 80263ec:	1c43      	adds	r3, r0, #1
 80263ee:	4604      	mov	r4, r0
 80263f0:	d14d      	bne.n	802648e <_malloc_r+0xde>
 80263f2:	6834      	ldr	r4, [r6, #0]
 80263f4:	4626      	mov	r6, r4
 80263f6:	2e00      	cmp	r6, #0
 80263f8:	d140      	bne.n	802647c <_malloc_r+0xcc>
 80263fa:	6823      	ldr	r3, [r4, #0]
 80263fc:	4631      	mov	r1, r6
 80263fe:	4638      	mov	r0, r7
 8026400:	eb04 0803 	add.w	r8, r4, r3
 8026404:	f000 f92a 	bl	802665c <_sbrk_r>
 8026408:	4580      	cmp	r8, r0
 802640a:	d13a      	bne.n	8026482 <_malloc_r+0xd2>
 802640c:	6821      	ldr	r1, [r4, #0]
 802640e:	3503      	adds	r5, #3
 8026410:	1a6d      	subs	r5, r5, r1
 8026412:	f025 0503 	bic.w	r5, r5, #3
 8026416:	3508      	adds	r5, #8
 8026418:	2d0c      	cmp	r5, #12
 802641a:	bf38      	it	cc
 802641c:	250c      	movcc	r5, #12
 802641e:	4629      	mov	r1, r5
 8026420:	4638      	mov	r0, r7
 8026422:	f7ff ffa5 	bl	8026370 <sbrk_aligned>
 8026426:	3001      	adds	r0, #1
 8026428:	d02b      	beq.n	8026482 <_malloc_r+0xd2>
 802642a:	6823      	ldr	r3, [r4, #0]
 802642c:	442b      	add	r3, r5
 802642e:	6023      	str	r3, [r4, #0]
 8026430:	e00e      	b.n	8026450 <_malloc_r+0xa0>
 8026432:	6822      	ldr	r2, [r4, #0]
 8026434:	1b52      	subs	r2, r2, r5
 8026436:	d41e      	bmi.n	8026476 <_malloc_r+0xc6>
 8026438:	2a0b      	cmp	r2, #11
 802643a:	d916      	bls.n	802646a <_malloc_r+0xba>
 802643c:	1961      	adds	r1, r4, r5
 802643e:	42a3      	cmp	r3, r4
 8026440:	6025      	str	r5, [r4, #0]
 8026442:	bf18      	it	ne
 8026444:	6059      	strne	r1, [r3, #4]
 8026446:	6863      	ldr	r3, [r4, #4]
 8026448:	bf08      	it	eq
 802644a:	6031      	streq	r1, [r6, #0]
 802644c:	5162      	str	r2, [r4, r5]
 802644e:	604b      	str	r3, [r1, #4]
 8026450:	4638      	mov	r0, r7
 8026452:	f104 060b 	add.w	r6, r4, #11
 8026456:	f000 fd0d 	bl	8026e74 <__malloc_unlock>
 802645a:	f026 0607 	bic.w	r6, r6, #7
 802645e:	1d23      	adds	r3, r4, #4
 8026460:	1af2      	subs	r2, r6, r3
 8026462:	d0b6      	beq.n	80263d2 <_malloc_r+0x22>
 8026464:	1b9b      	subs	r3, r3, r6
 8026466:	50a3      	str	r3, [r4, r2]
 8026468:	e7b3      	b.n	80263d2 <_malloc_r+0x22>
 802646a:	6862      	ldr	r2, [r4, #4]
 802646c:	42a3      	cmp	r3, r4
 802646e:	bf0c      	ite	eq
 8026470:	6032      	streq	r2, [r6, #0]
 8026472:	605a      	strne	r2, [r3, #4]
 8026474:	e7ec      	b.n	8026450 <_malloc_r+0xa0>
 8026476:	4623      	mov	r3, r4
 8026478:	6864      	ldr	r4, [r4, #4]
 802647a:	e7b2      	b.n	80263e2 <_malloc_r+0x32>
 802647c:	4634      	mov	r4, r6
 802647e:	6876      	ldr	r6, [r6, #4]
 8026480:	e7b9      	b.n	80263f6 <_malloc_r+0x46>
 8026482:	230c      	movs	r3, #12
 8026484:	603b      	str	r3, [r7, #0]
 8026486:	4638      	mov	r0, r7
 8026488:	f000 fcf4 	bl	8026e74 <__malloc_unlock>
 802648c:	e7a1      	b.n	80263d2 <_malloc_r+0x22>
 802648e:	6025      	str	r5, [r4, #0]
 8026490:	e7de      	b.n	8026450 <_malloc_r+0xa0>
 8026492:	bf00      	nop
 8026494:	20016260 	.word	0x20016260

08026498 <iprintf>:
 8026498:	b40f      	push	{r0, r1, r2, r3}
 802649a:	4b0a      	ldr	r3, [pc, #40]	; (80264c4 <iprintf+0x2c>)
 802649c:	b513      	push	{r0, r1, r4, lr}
 802649e:	681c      	ldr	r4, [r3, #0]
 80264a0:	b124      	cbz	r4, 80264ac <iprintf+0x14>
 80264a2:	69a3      	ldr	r3, [r4, #24]
 80264a4:	b913      	cbnz	r3, 80264ac <iprintf+0x14>
 80264a6:	4620      	mov	r0, r4
 80264a8:	f000 fbc6 	bl	8026c38 <__sinit>
 80264ac:	ab05      	add	r3, sp, #20
 80264ae:	9a04      	ldr	r2, [sp, #16]
 80264b0:	68a1      	ldr	r1, [r4, #8]
 80264b2:	9301      	str	r3, [sp, #4]
 80264b4:	4620      	mov	r0, r4
 80264b6:	f000 fe69 	bl	802718c <_vfiprintf_r>
 80264ba:	b002      	add	sp, #8
 80264bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80264c0:	b004      	add	sp, #16
 80264c2:	4770      	bx	lr
 80264c4:	20000340 	.word	0x20000340

080264c8 <putchar>:
 80264c8:	4b09      	ldr	r3, [pc, #36]	; (80264f0 <putchar+0x28>)
 80264ca:	b513      	push	{r0, r1, r4, lr}
 80264cc:	681c      	ldr	r4, [r3, #0]
 80264ce:	4601      	mov	r1, r0
 80264d0:	b134      	cbz	r4, 80264e0 <putchar+0x18>
 80264d2:	69a3      	ldr	r3, [r4, #24]
 80264d4:	b923      	cbnz	r3, 80264e0 <putchar+0x18>
 80264d6:	9001      	str	r0, [sp, #4]
 80264d8:	4620      	mov	r0, r4
 80264da:	f000 fbad 	bl	8026c38 <__sinit>
 80264de:	9901      	ldr	r1, [sp, #4]
 80264e0:	68a2      	ldr	r2, [r4, #8]
 80264e2:	4620      	mov	r0, r4
 80264e4:	b002      	add	sp, #8
 80264e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80264ea:	f001 b913 	b.w	8027714 <_putc_r>
 80264ee:	bf00      	nop
 80264f0:	20000340 	.word	0x20000340

080264f4 <_puts_r>:
 80264f4:	b570      	push	{r4, r5, r6, lr}
 80264f6:	460e      	mov	r6, r1
 80264f8:	4605      	mov	r5, r0
 80264fa:	b118      	cbz	r0, 8026504 <_puts_r+0x10>
 80264fc:	6983      	ldr	r3, [r0, #24]
 80264fe:	b90b      	cbnz	r3, 8026504 <_puts_r+0x10>
 8026500:	f000 fb9a 	bl	8026c38 <__sinit>
 8026504:	69ab      	ldr	r3, [r5, #24]
 8026506:	68ac      	ldr	r4, [r5, #8]
 8026508:	b913      	cbnz	r3, 8026510 <_puts_r+0x1c>
 802650a:	4628      	mov	r0, r5
 802650c:	f000 fb94 	bl	8026c38 <__sinit>
 8026510:	4b2c      	ldr	r3, [pc, #176]	; (80265c4 <_puts_r+0xd0>)
 8026512:	429c      	cmp	r4, r3
 8026514:	d120      	bne.n	8026558 <_puts_r+0x64>
 8026516:	686c      	ldr	r4, [r5, #4]
 8026518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802651a:	07db      	lsls	r3, r3, #31
 802651c:	d405      	bmi.n	802652a <_puts_r+0x36>
 802651e:	89a3      	ldrh	r3, [r4, #12]
 8026520:	0598      	lsls	r0, r3, #22
 8026522:	d402      	bmi.n	802652a <_puts_r+0x36>
 8026524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026526:	f000 fc37 	bl	8026d98 <__retarget_lock_acquire_recursive>
 802652a:	89a3      	ldrh	r3, [r4, #12]
 802652c:	0719      	lsls	r1, r3, #28
 802652e:	d51d      	bpl.n	802656c <_puts_r+0x78>
 8026530:	6923      	ldr	r3, [r4, #16]
 8026532:	b1db      	cbz	r3, 802656c <_puts_r+0x78>
 8026534:	3e01      	subs	r6, #1
 8026536:	68a3      	ldr	r3, [r4, #8]
 8026538:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802653c:	3b01      	subs	r3, #1
 802653e:	60a3      	str	r3, [r4, #8]
 8026540:	bb39      	cbnz	r1, 8026592 <_puts_r+0x9e>
 8026542:	2b00      	cmp	r3, #0
 8026544:	da38      	bge.n	80265b8 <_puts_r+0xc4>
 8026546:	4622      	mov	r2, r4
 8026548:	210a      	movs	r1, #10
 802654a:	4628      	mov	r0, r5
 802654c:	f000 f97c 	bl	8026848 <__swbuf_r>
 8026550:	3001      	adds	r0, #1
 8026552:	d011      	beq.n	8026578 <_puts_r+0x84>
 8026554:	250a      	movs	r5, #10
 8026556:	e011      	b.n	802657c <_puts_r+0x88>
 8026558:	4b1b      	ldr	r3, [pc, #108]	; (80265c8 <_puts_r+0xd4>)
 802655a:	429c      	cmp	r4, r3
 802655c:	d101      	bne.n	8026562 <_puts_r+0x6e>
 802655e:	68ac      	ldr	r4, [r5, #8]
 8026560:	e7da      	b.n	8026518 <_puts_r+0x24>
 8026562:	4b1a      	ldr	r3, [pc, #104]	; (80265cc <_puts_r+0xd8>)
 8026564:	429c      	cmp	r4, r3
 8026566:	bf08      	it	eq
 8026568:	68ec      	ldreq	r4, [r5, #12]
 802656a:	e7d5      	b.n	8026518 <_puts_r+0x24>
 802656c:	4621      	mov	r1, r4
 802656e:	4628      	mov	r0, r5
 8026570:	f000 f9bc 	bl	80268ec <__swsetup_r>
 8026574:	2800      	cmp	r0, #0
 8026576:	d0dd      	beq.n	8026534 <_puts_r+0x40>
 8026578:	f04f 35ff 	mov.w	r5, #4294967295
 802657c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802657e:	07da      	lsls	r2, r3, #31
 8026580:	d405      	bmi.n	802658e <_puts_r+0x9a>
 8026582:	89a3      	ldrh	r3, [r4, #12]
 8026584:	059b      	lsls	r3, r3, #22
 8026586:	d402      	bmi.n	802658e <_puts_r+0x9a>
 8026588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802658a:	f000 fc06 	bl	8026d9a <__retarget_lock_release_recursive>
 802658e:	4628      	mov	r0, r5
 8026590:	bd70      	pop	{r4, r5, r6, pc}
 8026592:	2b00      	cmp	r3, #0
 8026594:	da04      	bge.n	80265a0 <_puts_r+0xac>
 8026596:	69a2      	ldr	r2, [r4, #24]
 8026598:	429a      	cmp	r2, r3
 802659a:	dc06      	bgt.n	80265aa <_puts_r+0xb6>
 802659c:	290a      	cmp	r1, #10
 802659e:	d004      	beq.n	80265aa <_puts_r+0xb6>
 80265a0:	6823      	ldr	r3, [r4, #0]
 80265a2:	1c5a      	adds	r2, r3, #1
 80265a4:	6022      	str	r2, [r4, #0]
 80265a6:	7019      	strb	r1, [r3, #0]
 80265a8:	e7c5      	b.n	8026536 <_puts_r+0x42>
 80265aa:	4622      	mov	r2, r4
 80265ac:	4628      	mov	r0, r5
 80265ae:	f000 f94b 	bl	8026848 <__swbuf_r>
 80265b2:	3001      	adds	r0, #1
 80265b4:	d1bf      	bne.n	8026536 <_puts_r+0x42>
 80265b6:	e7df      	b.n	8026578 <_puts_r+0x84>
 80265b8:	6823      	ldr	r3, [r4, #0]
 80265ba:	250a      	movs	r5, #10
 80265bc:	1c5a      	adds	r2, r3, #1
 80265be:	6022      	str	r2, [r4, #0]
 80265c0:	701d      	strb	r5, [r3, #0]
 80265c2:	e7db      	b.n	802657c <_puts_r+0x88>
 80265c4:	0802db88 	.word	0x0802db88
 80265c8:	0802dba8 	.word	0x0802dba8
 80265cc:	0802db68 	.word	0x0802db68

080265d0 <puts>:
 80265d0:	4b02      	ldr	r3, [pc, #8]	; (80265dc <puts+0xc>)
 80265d2:	4601      	mov	r1, r0
 80265d4:	6818      	ldr	r0, [r3, #0]
 80265d6:	f7ff bf8d 	b.w	80264f4 <_puts_r>
 80265da:	bf00      	nop
 80265dc:	20000340 	.word	0x20000340

080265e0 <rand>:
 80265e0:	4b16      	ldr	r3, [pc, #88]	; (802663c <rand+0x5c>)
 80265e2:	b510      	push	{r4, lr}
 80265e4:	681c      	ldr	r4, [r3, #0]
 80265e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80265e8:	b9b3      	cbnz	r3, 8026618 <rand+0x38>
 80265ea:	2018      	movs	r0, #24
 80265ec:	f7ff fe24 	bl	8026238 <malloc>
 80265f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80265f2:	b928      	cbnz	r0, 8026600 <rand+0x20>
 80265f4:	4602      	mov	r2, r0
 80265f6:	4b12      	ldr	r3, [pc, #72]	; (8026640 <rand+0x60>)
 80265f8:	4812      	ldr	r0, [pc, #72]	; (8026644 <rand+0x64>)
 80265fa:	214e      	movs	r1, #78	; 0x4e
 80265fc:	f000 f9e4 	bl	80269c8 <__assert_func>
 8026600:	4a11      	ldr	r2, [pc, #68]	; (8026648 <rand+0x68>)
 8026602:	4b12      	ldr	r3, [pc, #72]	; (802664c <rand+0x6c>)
 8026604:	e9c0 2300 	strd	r2, r3, [r0]
 8026608:	4b11      	ldr	r3, [pc, #68]	; (8026650 <rand+0x70>)
 802660a:	6083      	str	r3, [r0, #8]
 802660c:	230b      	movs	r3, #11
 802660e:	8183      	strh	r3, [r0, #12]
 8026610:	2201      	movs	r2, #1
 8026612:	2300      	movs	r3, #0
 8026614:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8026618:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802661a:	4a0e      	ldr	r2, [pc, #56]	; (8026654 <rand+0x74>)
 802661c:	6920      	ldr	r0, [r4, #16]
 802661e:	6963      	ldr	r3, [r4, #20]
 8026620:	490d      	ldr	r1, [pc, #52]	; (8026658 <rand+0x78>)
 8026622:	4342      	muls	r2, r0
 8026624:	fb01 2203 	mla	r2, r1, r3, r2
 8026628:	fba0 0101 	umull	r0, r1, r0, r1
 802662c:	1c43      	adds	r3, r0, #1
 802662e:	eb42 0001 	adc.w	r0, r2, r1
 8026632:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8026636:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802663a:	bd10      	pop	{r4, pc}
 802663c:	20000340 	.word	0x20000340
 8026640:	0802dab8 	.word	0x0802dab8
 8026644:	0802dacf 	.word	0x0802dacf
 8026648:	abcd330e 	.word	0xabcd330e
 802664c:	e66d1234 	.word	0xe66d1234
 8026650:	0005deec 	.word	0x0005deec
 8026654:	5851f42d 	.word	0x5851f42d
 8026658:	4c957f2d 	.word	0x4c957f2d

0802665c <_sbrk_r>:
 802665c:	b538      	push	{r3, r4, r5, lr}
 802665e:	4d06      	ldr	r5, [pc, #24]	; (8026678 <_sbrk_r+0x1c>)
 8026660:	2300      	movs	r3, #0
 8026662:	4604      	mov	r4, r0
 8026664:	4608      	mov	r0, r1
 8026666:	602b      	str	r3, [r5, #0]
 8026668:	f7f2 f840 	bl	80186ec <_sbrk>
 802666c:	1c43      	adds	r3, r0, #1
 802666e:	d102      	bne.n	8026676 <_sbrk_r+0x1a>
 8026670:	682b      	ldr	r3, [r5, #0]
 8026672:	b103      	cbz	r3, 8026676 <_sbrk_r+0x1a>
 8026674:	6023      	str	r3, [r4, #0]
 8026676:	bd38      	pop	{r3, r4, r5, pc}
 8026678:	20016268 	.word	0x20016268

0802667c <setvbuf>:
 802667c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026680:	461d      	mov	r5, r3
 8026682:	4b5d      	ldr	r3, [pc, #372]	; (80267f8 <setvbuf+0x17c>)
 8026684:	681f      	ldr	r7, [r3, #0]
 8026686:	4604      	mov	r4, r0
 8026688:	460e      	mov	r6, r1
 802668a:	4690      	mov	r8, r2
 802668c:	b127      	cbz	r7, 8026698 <setvbuf+0x1c>
 802668e:	69bb      	ldr	r3, [r7, #24]
 8026690:	b913      	cbnz	r3, 8026698 <setvbuf+0x1c>
 8026692:	4638      	mov	r0, r7
 8026694:	f000 fad0 	bl	8026c38 <__sinit>
 8026698:	4b58      	ldr	r3, [pc, #352]	; (80267fc <setvbuf+0x180>)
 802669a:	429c      	cmp	r4, r3
 802669c:	d167      	bne.n	802676e <setvbuf+0xf2>
 802669e:	687c      	ldr	r4, [r7, #4]
 80266a0:	f1b8 0f02 	cmp.w	r8, #2
 80266a4:	d006      	beq.n	80266b4 <setvbuf+0x38>
 80266a6:	f1b8 0f01 	cmp.w	r8, #1
 80266aa:	f200 809f 	bhi.w	80267ec <setvbuf+0x170>
 80266ae:	2d00      	cmp	r5, #0
 80266b0:	f2c0 809c 	blt.w	80267ec <setvbuf+0x170>
 80266b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80266b6:	07db      	lsls	r3, r3, #31
 80266b8:	d405      	bmi.n	80266c6 <setvbuf+0x4a>
 80266ba:	89a3      	ldrh	r3, [r4, #12]
 80266bc:	0598      	lsls	r0, r3, #22
 80266be:	d402      	bmi.n	80266c6 <setvbuf+0x4a>
 80266c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80266c2:	f000 fb69 	bl	8026d98 <__retarget_lock_acquire_recursive>
 80266c6:	4621      	mov	r1, r4
 80266c8:	4638      	mov	r0, r7
 80266ca:	f000 fa21 	bl	8026b10 <_fflush_r>
 80266ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80266d0:	b141      	cbz	r1, 80266e4 <setvbuf+0x68>
 80266d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80266d6:	4299      	cmp	r1, r3
 80266d8:	d002      	beq.n	80266e0 <setvbuf+0x64>
 80266da:	4638      	mov	r0, r7
 80266dc:	f7ff fdfc 	bl	80262d8 <_free_r>
 80266e0:	2300      	movs	r3, #0
 80266e2:	6363      	str	r3, [r4, #52]	; 0x34
 80266e4:	2300      	movs	r3, #0
 80266e6:	61a3      	str	r3, [r4, #24]
 80266e8:	6063      	str	r3, [r4, #4]
 80266ea:	89a3      	ldrh	r3, [r4, #12]
 80266ec:	0619      	lsls	r1, r3, #24
 80266ee:	d503      	bpl.n	80266f8 <setvbuf+0x7c>
 80266f0:	6921      	ldr	r1, [r4, #16]
 80266f2:	4638      	mov	r0, r7
 80266f4:	f7ff fdf0 	bl	80262d8 <_free_r>
 80266f8:	89a3      	ldrh	r3, [r4, #12]
 80266fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80266fe:	f023 0303 	bic.w	r3, r3, #3
 8026702:	f1b8 0f02 	cmp.w	r8, #2
 8026706:	81a3      	strh	r3, [r4, #12]
 8026708:	d06c      	beq.n	80267e4 <setvbuf+0x168>
 802670a:	ab01      	add	r3, sp, #4
 802670c:	466a      	mov	r2, sp
 802670e:	4621      	mov	r1, r4
 8026710:	4638      	mov	r0, r7
 8026712:	f000 fb43 	bl	8026d9c <__swhatbuf_r>
 8026716:	89a3      	ldrh	r3, [r4, #12]
 8026718:	4318      	orrs	r0, r3
 802671a:	81a0      	strh	r0, [r4, #12]
 802671c:	2d00      	cmp	r5, #0
 802671e:	d130      	bne.n	8026782 <setvbuf+0x106>
 8026720:	9d00      	ldr	r5, [sp, #0]
 8026722:	4628      	mov	r0, r5
 8026724:	f7ff fd88 	bl	8026238 <malloc>
 8026728:	4606      	mov	r6, r0
 802672a:	2800      	cmp	r0, #0
 802672c:	d155      	bne.n	80267da <setvbuf+0x15e>
 802672e:	f8dd 9000 	ldr.w	r9, [sp]
 8026732:	45a9      	cmp	r9, r5
 8026734:	d14a      	bne.n	80267cc <setvbuf+0x150>
 8026736:	f04f 35ff 	mov.w	r5, #4294967295
 802673a:	2200      	movs	r2, #0
 802673c:	60a2      	str	r2, [r4, #8]
 802673e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8026742:	6022      	str	r2, [r4, #0]
 8026744:	6122      	str	r2, [r4, #16]
 8026746:	2201      	movs	r2, #1
 8026748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802674c:	6162      	str	r2, [r4, #20]
 802674e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026750:	f043 0302 	orr.w	r3, r3, #2
 8026754:	07d2      	lsls	r2, r2, #31
 8026756:	81a3      	strh	r3, [r4, #12]
 8026758:	d405      	bmi.n	8026766 <setvbuf+0xea>
 802675a:	f413 7f00 	tst.w	r3, #512	; 0x200
 802675e:	d102      	bne.n	8026766 <setvbuf+0xea>
 8026760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026762:	f000 fb1a 	bl	8026d9a <__retarget_lock_release_recursive>
 8026766:	4628      	mov	r0, r5
 8026768:	b003      	add	sp, #12
 802676a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802676e:	4b24      	ldr	r3, [pc, #144]	; (8026800 <setvbuf+0x184>)
 8026770:	429c      	cmp	r4, r3
 8026772:	d101      	bne.n	8026778 <setvbuf+0xfc>
 8026774:	68bc      	ldr	r4, [r7, #8]
 8026776:	e793      	b.n	80266a0 <setvbuf+0x24>
 8026778:	4b22      	ldr	r3, [pc, #136]	; (8026804 <setvbuf+0x188>)
 802677a:	429c      	cmp	r4, r3
 802677c:	bf08      	it	eq
 802677e:	68fc      	ldreq	r4, [r7, #12]
 8026780:	e78e      	b.n	80266a0 <setvbuf+0x24>
 8026782:	2e00      	cmp	r6, #0
 8026784:	d0cd      	beq.n	8026722 <setvbuf+0xa6>
 8026786:	69bb      	ldr	r3, [r7, #24]
 8026788:	b913      	cbnz	r3, 8026790 <setvbuf+0x114>
 802678a:	4638      	mov	r0, r7
 802678c:	f000 fa54 	bl	8026c38 <__sinit>
 8026790:	f1b8 0f01 	cmp.w	r8, #1
 8026794:	bf08      	it	eq
 8026796:	89a3      	ldrheq	r3, [r4, #12]
 8026798:	6026      	str	r6, [r4, #0]
 802679a:	bf04      	itt	eq
 802679c:	f043 0301 	orreq.w	r3, r3, #1
 80267a0:	81a3      	strheq	r3, [r4, #12]
 80267a2:	89a2      	ldrh	r2, [r4, #12]
 80267a4:	f012 0308 	ands.w	r3, r2, #8
 80267a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80267ac:	d01c      	beq.n	80267e8 <setvbuf+0x16c>
 80267ae:	07d3      	lsls	r3, r2, #31
 80267b0:	bf41      	itttt	mi
 80267b2:	2300      	movmi	r3, #0
 80267b4:	426d      	negmi	r5, r5
 80267b6:	60a3      	strmi	r3, [r4, #8]
 80267b8:	61a5      	strmi	r5, [r4, #24]
 80267ba:	bf58      	it	pl
 80267bc:	60a5      	strpl	r5, [r4, #8]
 80267be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80267c0:	f015 0501 	ands.w	r5, r5, #1
 80267c4:	d115      	bne.n	80267f2 <setvbuf+0x176>
 80267c6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80267ca:	e7c8      	b.n	802675e <setvbuf+0xe2>
 80267cc:	4648      	mov	r0, r9
 80267ce:	f7ff fd33 	bl	8026238 <malloc>
 80267d2:	4606      	mov	r6, r0
 80267d4:	2800      	cmp	r0, #0
 80267d6:	d0ae      	beq.n	8026736 <setvbuf+0xba>
 80267d8:	464d      	mov	r5, r9
 80267da:	89a3      	ldrh	r3, [r4, #12]
 80267dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80267e0:	81a3      	strh	r3, [r4, #12]
 80267e2:	e7d0      	b.n	8026786 <setvbuf+0x10a>
 80267e4:	2500      	movs	r5, #0
 80267e6:	e7a8      	b.n	802673a <setvbuf+0xbe>
 80267e8:	60a3      	str	r3, [r4, #8]
 80267ea:	e7e8      	b.n	80267be <setvbuf+0x142>
 80267ec:	f04f 35ff 	mov.w	r5, #4294967295
 80267f0:	e7b9      	b.n	8026766 <setvbuf+0xea>
 80267f2:	2500      	movs	r5, #0
 80267f4:	e7b7      	b.n	8026766 <setvbuf+0xea>
 80267f6:	bf00      	nop
 80267f8:	20000340 	.word	0x20000340
 80267fc:	0802db88 	.word	0x0802db88
 8026800:	0802dba8 	.word	0x0802dba8
 8026804:	0802db68 	.word	0x0802db68

08026808 <siprintf>:
 8026808:	b40e      	push	{r1, r2, r3}
 802680a:	b500      	push	{lr}
 802680c:	b09c      	sub	sp, #112	; 0x70
 802680e:	ab1d      	add	r3, sp, #116	; 0x74
 8026810:	9002      	str	r0, [sp, #8]
 8026812:	9006      	str	r0, [sp, #24]
 8026814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026818:	4809      	ldr	r0, [pc, #36]	; (8026840 <siprintf+0x38>)
 802681a:	9107      	str	r1, [sp, #28]
 802681c:	9104      	str	r1, [sp, #16]
 802681e:	4909      	ldr	r1, [pc, #36]	; (8026844 <siprintf+0x3c>)
 8026820:	f853 2b04 	ldr.w	r2, [r3], #4
 8026824:	9105      	str	r1, [sp, #20]
 8026826:	6800      	ldr	r0, [r0, #0]
 8026828:	9301      	str	r3, [sp, #4]
 802682a:	a902      	add	r1, sp, #8
 802682c:	f000 fb84 	bl	8026f38 <_svfiprintf_r>
 8026830:	9b02      	ldr	r3, [sp, #8]
 8026832:	2200      	movs	r2, #0
 8026834:	701a      	strb	r2, [r3, #0]
 8026836:	b01c      	add	sp, #112	; 0x70
 8026838:	f85d eb04 	ldr.w	lr, [sp], #4
 802683c:	b003      	add	sp, #12
 802683e:	4770      	bx	lr
 8026840:	20000340 	.word	0x20000340
 8026844:	ffff0208 	.word	0xffff0208

08026848 <__swbuf_r>:
 8026848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802684a:	460e      	mov	r6, r1
 802684c:	4614      	mov	r4, r2
 802684e:	4605      	mov	r5, r0
 8026850:	b118      	cbz	r0, 802685a <__swbuf_r+0x12>
 8026852:	6983      	ldr	r3, [r0, #24]
 8026854:	b90b      	cbnz	r3, 802685a <__swbuf_r+0x12>
 8026856:	f000 f9ef 	bl	8026c38 <__sinit>
 802685a:	4b21      	ldr	r3, [pc, #132]	; (80268e0 <__swbuf_r+0x98>)
 802685c:	429c      	cmp	r4, r3
 802685e:	d12b      	bne.n	80268b8 <__swbuf_r+0x70>
 8026860:	686c      	ldr	r4, [r5, #4]
 8026862:	69a3      	ldr	r3, [r4, #24]
 8026864:	60a3      	str	r3, [r4, #8]
 8026866:	89a3      	ldrh	r3, [r4, #12]
 8026868:	071a      	lsls	r2, r3, #28
 802686a:	d52f      	bpl.n	80268cc <__swbuf_r+0x84>
 802686c:	6923      	ldr	r3, [r4, #16]
 802686e:	b36b      	cbz	r3, 80268cc <__swbuf_r+0x84>
 8026870:	6923      	ldr	r3, [r4, #16]
 8026872:	6820      	ldr	r0, [r4, #0]
 8026874:	1ac0      	subs	r0, r0, r3
 8026876:	6963      	ldr	r3, [r4, #20]
 8026878:	b2f6      	uxtb	r6, r6
 802687a:	4283      	cmp	r3, r0
 802687c:	4637      	mov	r7, r6
 802687e:	dc04      	bgt.n	802688a <__swbuf_r+0x42>
 8026880:	4621      	mov	r1, r4
 8026882:	4628      	mov	r0, r5
 8026884:	f000 f944 	bl	8026b10 <_fflush_r>
 8026888:	bb30      	cbnz	r0, 80268d8 <__swbuf_r+0x90>
 802688a:	68a3      	ldr	r3, [r4, #8]
 802688c:	3b01      	subs	r3, #1
 802688e:	60a3      	str	r3, [r4, #8]
 8026890:	6823      	ldr	r3, [r4, #0]
 8026892:	1c5a      	adds	r2, r3, #1
 8026894:	6022      	str	r2, [r4, #0]
 8026896:	701e      	strb	r6, [r3, #0]
 8026898:	6963      	ldr	r3, [r4, #20]
 802689a:	3001      	adds	r0, #1
 802689c:	4283      	cmp	r3, r0
 802689e:	d004      	beq.n	80268aa <__swbuf_r+0x62>
 80268a0:	89a3      	ldrh	r3, [r4, #12]
 80268a2:	07db      	lsls	r3, r3, #31
 80268a4:	d506      	bpl.n	80268b4 <__swbuf_r+0x6c>
 80268a6:	2e0a      	cmp	r6, #10
 80268a8:	d104      	bne.n	80268b4 <__swbuf_r+0x6c>
 80268aa:	4621      	mov	r1, r4
 80268ac:	4628      	mov	r0, r5
 80268ae:	f000 f92f 	bl	8026b10 <_fflush_r>
 80268b2:	b988      	cbnz	r0, 80268d8 <__swbuf_r+0x90>
 80268b4:	4638      	mov	r0, r7
 80268b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80268b8:	4b0a      	ldr	r3, [pc, #40]	; (80268e4 <__swbuf_r+0x9c>)
 80268ba:	429c      	cmp	r4, r3
 80268bc:	d101      	bne.n	80268c2 <__swbuf_r+0x7a>
 80268be:	68ac      	ldr	r4, [r5, #8]
 80268c0:	e7cf      	b.n	8026862 <__swbuf_r+0x1a>
 80268c2:	4b09      	ldr	r3, [pc, #36]	; (80268e8 <__swbuf_r+0xa0>)
 80268c4:	429c      	cmp	r4, r3
 80268c6:	bf08      	it	eq
 80268c8:	68ec      	ldreq	r4, [r5, #12]
 80268ca:	e7ca      	b.n	8026862 <__swbuf_r+0x1a>
 80268cc:	4621      	mov	r1, r4
 80268ce:	4628      	mov	r0, r5
 80268d0:	f000 f80c 	bl	80268ec <__swsetup_r>
 80268d4:	2800      	cmp	r0, #0
 80268d6:	d0cb      	beq.n	8026870 <__swbuf_r+0x28>
 80268d8:	f04f 37ff 	mov.w	r7, #4294967295
 80268dc:	e7ea      	b.n	80268b4 <__swbuf_r+0x6c>
 80268de:	bf00      	nop
 80268e0:	0802db88 	.word	0x0802db88
 80268e4:	0802dba8 	.word	0x0802dba8
 80268e8:	0802db68 	.word	0x0802db68

080268ec <__swsetup_r>:
 80268ec:	4b32      	ldr	r3, [pc, #200]	; (80269b8 <__swsetup_r+0xcc>)
 80268ee:	b570      	push	{r4, r5, r6, lr}
 80268f0:	681d      	ldr	r5, [r3, #0]
 80268f2:	4606      	mov	r6, r0
 80268f4:	460c      	mov	r4, r1
 80268f6:	b125      	cbz	r5, 8026902 <__swsetup_r+0x16>
 80268f8:	69ab      	ldr	r3, [r5, #24]
 80268fa:	b913      	cbnz	r3, 8026902 <__swsetup_r+0x16>
 80268fc:	4628      	mov	r0, r5
 80268fe:	f000 f99b 	bl	8026c38 <__sinit>
 8026902:	4b2e      	ldr	r3, [pc, #184]	; (80269bc <__swsetup_r+0xd0>)
 8026904:	429c      	cmp	r4, r3
 8026906:	d10f      	bne.n	8026928 <__swsetup_r+0x3c>
 8026908:	686c      	ldr	r4, [r5, #4]
 802690a:	89a3      	ldrh	r3, [r4, #12]
 802690c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026910:	0719      	lsls	r1, r3, #28
 8026912:	d42c      	bmi.n	802696e <__swsetup_r+0x82>
 8026914:	06dd      	lsls	r5, r3, #27
 8026916:	d411      	bmi.n	802693c <__swsetup_r+0x50>
 8026918:	2309      	movs	r3, #9
 802691a:	6033      	str	r3, [r6, #0]
 802691c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026920:	81a3      	strh	r3, [r4, #12]
 8026922:	f04f 30ff 	mov.w	r0, #4294967295
 8026926:	e03e      	b.n	80269a6 <__swsetup_r+0xba>
 8026928:	4b25      	ldr	r3, [pc, #148]	; (80269c0 <__swsetup_r+0xd4>)
 802692a:	429c      	cmp	r4, r3
 802692c:	d101      	bne.n	8026932 <__swsetup_r+0x46>
 802692e:	68ac      	ldr	r4, [r5, #8]
 8026930:	e7eb      	b.n	802690a <__swsetup_r+0x1e>
 8026932:	4b24      	ldr	r3, [pc, #144]	; (80269c4 <__swsetup_r+0xd8>)
 8026934:	429c      	cmp	r4, r3
 8026936:	bf08      	it	eq
 8026938:	68ec      	ldreq	r4, [r5, #12]
 802693a:	e7e6      	b.n	802690a <__swsetup_r+0x1e>
 802693c:	0758      	lsls	r0, r3, #29
 802693e:	d512      	bpl.n	8026966 <__swsetup_r+0x7a>
 8026940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026942:	b141      	cbz	r1, 8026956 <__swsetup_r+0x6a>
 8026944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026948:	4299      	cmp	r1, r3
 802694a:	d002      	beq.n	8026952 <__swsetup_r+0x66>
 802694c:	4630      	mov	r0, r6
 802694e:	f7ff fcc3 	bl	80262d8 <_free_r>
 8026952:	2300      	movs	r3, #0
 8026954:	6363      	str	r3, [r4, #52]	; 0x34
 8026956:	89a3      	ldrh	r3, [r4, #12]
 8026958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802695c:	81a3      	strh	r3, [r4, #12]
 802695e:	2300      	movs	r3, #0
 8026960:	6063      	str	r3, [r4, #4]
 8026962:	6923      	ldr	r3, [r4, #16]
 8026964:	6023      	str	r3, [r4, #0]
 8026966:	89a3      	ldrh	r3, [r4, #12]
 8026968:	f043 0308 	orr.w	r3, r3, #8
 802696c:	81a3      	strh	r3, [r4, #12]
 802696e:	6923      	ldr	r3, [r4, #16]
 8026970:	b94b      	cbnz	r3, 8026986 <__swsetup_r+0x9a>
 8026972:	89a3      	ldrh	r3, [r4, #12]
 8026974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802697c:	d003      	beq.n	8026986 <__swsetup_r+0x9a>
 802697e:	4621      	mov	r1, r4
 8026980:	4630      	mov	r0, r6
 8026982:	f000 fa31 	bl	8026de8 <__smakebuf_r>
 8026986:	89a0      	ldrh	r0, [r4, #12]
 8026988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802698c:	f010 0301 	ands.w	r3, r0, #1
 8026990:	d00a      	beq.n	80269a8 <__swsetup_r+0xbc>
 8026992:	2300      	movs	r3, #0
 8026994:	60a3      	str	r3, [r4, #8]
 8026996:	6963      	ldr	r3, [r4, #20]
 8026998:	425b      	negs	r3, r3
 802699a:	61a3      	str	r3, [r4, #24]
 802699c:	6923      	ldr	r3, [r4, #16]
 802699e:	b943      	cbnz	r3, 80269b2 <__swsetup_r+0xc6>
 80269a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80269a4:	d1ba      	bne.n	802691c <__swsetup_r+0x30>
 80269a6:	bd70      	pop	{r4, r5, r6, pc}
 80269a8:	0781      	lsls	r1, r0, #30
 80269aa:	bf58      	it	pl
 80269ac:	6963      	ldrpl	r3, [r4, #20]
 80269ae:	60a3      	str	r3, [r4, #8]
 80269b0:	e7f4      	b.n	802699c <__swsetup_r+0xb0>
 80269b2:	2000      	movs	r0, #0
 80269b4:	e7f7      	b.n	80269a6 <__swsetup_r+0xba>
 80269b6:	bf00      	nop
 80269b8:	20000340 	.word	0x20000340
 80269bc:	0802db88 	.word	0x0802db88
 80269c0:	0802dba8 	.word	0x0802dba8
 80269c4:	0802db68 	.word	0x0802db68

080269c8 <__assert_func>:
 80269c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80269ca:	4614      	mov	r4, r2
 80269cc:	461a      	mov	r2, r3
 80269ce:	4b09      	ldr	r3, [pc, #36]	; (80269f4 <__assert_func+0x2c>)
 80269d0:	681b      	ldr	r3, [r3, #0]
 80269d2:	4605      	mov	r5, r0
 80269d4:	68d8      	ldr	r0, [r3, #12]
 80269d6:	b14c      	cbz	r4, 80269ec <__assert_func+0x24>
 80269d8:	4b07      	ldr	r3, [pc, #28]	; (80269f8 <__assert_func+0x30>)
 80269da:	9100      	str	r1, [sp, #0]
 80269dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80269e0:	4906      	ldr	r1, [pc, #24]	; (80269fc <__assert_func+0x34>)
 80269e2:	462b      	mov	r3, r5
 80269e4:	f000 f9a6 	bl	8026d34 <fiprintf>
 80269e8:	f000 ff32 	bl	8027850 <abort>
 80269ec:	4b04      	ldr	r3, [pc, #16]	; (8026a00 <__assert_func+0x38>)
 80269ee:	461c      	mov	r4, r3
 80269f0:	e7f3      	b.n	80269da <__assert_func+0x12>
 80269f2:	bf00      	nop
 80269f4:	20000340 	.word	0x20000340
 80269f8:	0802db2a 	.word	0x0802db2a
 80269fc:	0802db37 	.word	0x0802db37
 8026a00:	0802db65 	.word	0x0802db65

08026a04 <__sflush_r>:
 8026a04:	898a      	ldrh	r2, [r1, #12]
 8026a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a0a:	4605      	mov	r5, r0
 8026a0c:	0710      	lsls	r0, r2, #28
 8026a0e:	460c      	mov	r4, r1
 8026a10:	d458      	bmi.n	8026ac4 <__sflush_r+0xc0>
 8026a12:	684b      	ldr	r3, [r1, #4]
 8026a14:	2b00      	cmp	r3, #0
 8026a16:	dc05      	bgt.n	8026a24 <__sflush_r+0x20>
 8026a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026a1a:	2b00      	cmp	r3, #0
 8026a1c:	dc02      	bgt.n	8026a24 <__sflush_r+0x20>
 8026a1e:	2000      	movs	r0, #0
 8026a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026a26:	2e00      	cmp	r6, #0
 8026a28:	d0f9      	beq.n	8026a1e <__sflush_r+0x1a>
 8026a2a:	2300      	movs	r3, #0
 8026a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026a30:	682f      	ldr	r7, [r5, #0]
 8026a32:	602b      	str	r3, [r5, #0]
 8026a34:	d032      	beq.n	8026a9c <__sflush_r+0x98>
 8026a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026a38:	89a3      	ldrh	r3, [r4, #12]
 8026a3a:	075a      	lsls	r2, r3, #29
 8026a3c:	d505      	bpl.n	8026a4a <__sflush_r+0x46>
 8026a3e:	6863      	ldr	r3, [r4, #4]
 8026a40:	1ac0      	subs	r0, r0, r3
 8026a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026a44:	b10b      	cbz	r3, 8026a4a <__sflush_r+0x46>
 8026a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026a48:	1ac0      	subs	r0, r0, r3
 8026a4a:	2300      	movs	r3, #0
 8026a4c:	4602      	mov	r2, r0
 8026a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026a50:	6a21      	ldr	r1, [r4, #32]
 8026a52:	4628      	mov	r0, r5
 8026a54:	47b0      	blx	r6
 8026a56:	1c43      	adds	r3, r0, #1
 8026a58:	89a3      	ldrh	r3, [r4, #12]
 8026a5a:	d106      	bne.n	8026a6a <__sflush_r+0x66>
 8026a5c:	6829      	ldr	r1, [r5, #0]
 8026a5e:	291d      	cmp	r1, #29
 8026a60:	d82c      	bhi.n	8026abc <__sflush_r+0xb8>
 8026a62:	4a2a      	ldr	r2, [pc, #168]	; (8026b0c <__sflush_r+0x108>)
 8026a64:	40ca      	lsrs	r2, r1
 8026a66:	07d6      	lsls	r6, r2, #31
 8026a68:	d528      	bpl.n	8026abc <__sflush_r+0xb8>
 8026a6a:	2200      	movs	r2, #0
 8026a6c:	6062      	str	r2, [r4, #4]
 8026a6e:	04d9      	lsls	r1, r3, #19
 8026a70:	6922      	ldr	r2, [r4, #16]
 8026a72:	6022      	str	r2, [r4, #0]
 8026a74:	d504      	bpl.n	8026a80 <__sflush_r+0x7c>
 8026a76:	1c42      	adds	r2, r0, #1
 8026a78:	d101      	bne.n	8026a7e <__sflush_r+0x7a>
 8026a7a:	682b      	ldr	r3, [r5, #0]
 8026a7c:	b903      	cbnz	r3, 8026a80 <__sflush_r+0x7c>
 8026a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8026a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026a82:	602f      	str	r7, [r5, #0]
 8026a84:	2900      	cmp	r1, #0
 8026a86:	d0ca      	beq.n	8026a1e <__sflush_r+0x1a>
 8026a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026a8c:	4299      	cmp	r1, r3
 8026a8e:	d002      	beq.n	8026a96 <__sflush_r+0x92>
 8026a90:	4628      	mov	r0, r5
 8026a92:	f7ff fc21 	bl	80262d8 <_free_r>
 8026a96:	2000      	movs	r0, #0
 8026a98:	6360      	str	r0, [r4, #52]	; 0x34
 8026a9a:	e7c1      	b.n	8026a20 <__sflush_r+0x1c>
 8026a9c:	6a21      	ldr	r1, [r4, #32]
 8026a9e:	2301      	movs	r3, #1
 8026aa0:	4628      	mov	r0, r5
 8026aa2:	47b0      	blx	r6
 8026aa4:	1c41      	adds	r1, r0, #1
 8026aa6:	d1c7      	bne.n	8026a38 <__sflush_r+0x34>
 8026aa8:	682b      	ldr	r3, [r5, #0]
 8026aaa:	2b00      	cmp	r3, #0
 8026aac:	d0c4      	beq.n	8026a38 <__sflush_r+0x34>
 8026aae:	2b1d      	cmp	r3, #29
 8026ab0:	d001      	beq.n	8026ab6 <__sflush_r+0xb2>
 8026ab2:	2b16      	cmp	r3, #22
 8026ab4:	d101      	bne.n	8026aba <__sflush_r+0xb6>
 8026ab6:	602f      	str	r7, [r5, #0]
 8026ab8:	e7b1      	b.n	8026a1e <__sflush_r+0x1a>
 8026aba:	89a3      	ldrh	r3, [r4, #12]
 8026abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026ac0:	81a3      	strh	r3, [r4, #12]
 8026ac2:	e7ad      	b.n	8026a20 <__sflush_r+0x1c>
 8026ac4:	690f      	ldr	r7, [r1, #16]
 8026ac6:	2f00      	cmp	r7, #0
 8026ac8:	d0a9      	beq.n	8026a1e <__sflush_r+0x1a>
 8026aca:	0793      	lsls	r3, r2, #30
 8026acc:	680e      	ldr	r6, [r1, #0]
 8026ace:	bf08      	it	eq
 8026ad0:	694b      	ldreq	r3, [r1, #20]
 8026ad2:	600f      	str	r7, [r1, #0]
 8026ad4:	bf18      	it	ne
 8026ad6:	2300      	movne	r3, #0
 8026ad8:	eba6 0807 	sub.w	r8, r6, r7
 8026adc:	608b      	str	r3, [r1, #8]
 8026ade:	f1b8 0f00 	cmp.w	r8, #0
 8026ae2:	dd9c      	ble.n	8026a1e <__sflush_r+0x1a>
 8026ae4:	6a21      	ldr	r1, [r4, #32]
 8026ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026ae8:	4643      	mov	r3, r8
 8026aea:	463a      	mov	r2, r7
 8026aec:	4628      	mov	r0, r5
 8026aee:	47b0      	blx	r6
 8026af0:	2800      	cmp	r0, #0
 8026af2:	dc06      	bgt.n	8026b02 <__sflush_r+0xfe>
 8026af4:	89a3      	ldrh	r3, [r4, #12]
 8026af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026afa:	81a3      	strh	r3, [r4, #12]
 8026afc:	f04f 30ff 	mov.w	r0, #4294967295
 8026b00:	e78e      	b.n	8026a20 <__sflush_r+0x1c>
 8026b02:	4407      	add	r7, r0
 8026b04:	eba8 0800 	sub.w	r8, r8, r0
 8026b08:	e7e9      	b.n	8026ade <__sflush_r+0xda>
 8026b0a:	bf00      	nop
 8026b0c:	20400001 	.word	0x20400001

08026b10 <_fflush_r>:
 8026b10:	b538      	push	{r3, r4, r5, lr}
 8026b12:	690b      	ldr	r3, [r1, #16]
 8026b14:	4605      	mov	r5, r0
 8026b16:	460c      	mov	r4, r1
 8026b18:	b913      	cbnz	r3, 8026b20 <_fflush_r+0x10>
 8026b1a:	2500      	movs	r5, #0
 8026b1c:	4628      	mov	r0, r5
 8026b1e:	bd38      	pop	{r3, r4, r5, pc}
 8026b20:	b118      	cbz	r0, 8026b2a <_fflush_r+0x1a>
 8026b22:	6983      	ldr	r3, [r0, #24]
 8026b24:	b90b      	cbnz	r3, 8026b2a <_fflush_r+0x1a>
 8026b26:	f000 f887 	bl	8026c38 <__sinit>
 8026b2a:	4b14      	ldr	r3, [pc, #80]	; (8026b7c <_fflush_r+0x6c>)
 8026b2c:	429c      	cmp	r4, r3
 8026b2e:	d11b      	bne.n	8026b68 <_fflush_r+0x58>
 8026b30:	686c      	ldr	r4, [r5, #4]
 8026b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	d0ef      	beq.n	8026b1a <_fflush_r+0xa>
 8026b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026b3c:	07d0      	lsls	r0, r2, #31
 8026b3e:	d404      	bmi.n	8026b4a <_fflush_r+0x3a>
 8026b40:	0599      	lsls	r1, r3, #22
 8026b42:	d402      	bmi.n	8026b4a <_fflush_r+0x3a>
 8026b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026b46:	f000 f927 	bl	8026d98 <__retarget_lock_acquire_recursive>
 8026b4a:	4628      	mov	r0, r5
 8026b4c:	4621      	mov	r1, r4
 8026b4e:	f7ff ff59 	bl	8026a04 <__sflush_r>
 8026b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026b54:	07da      	lsls	r2, r3, #31
 8026b56:	4605      	mov	r5, r0
 8026b58:	d4e0      	bmi.n	8026b1c <_fflush_r+0xc>
 8026b5a:	89a3      	ldrh	r3, [r4, #12]
 8026b5c:	059b      	lsls	r3, r3, #22
 8026b5e:	d4dd      	bmi.n	8026b1c <_fflush_r+0xc>
 8026b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026b62:	f000 f91a 	bl	8026d9a <__retarget_lock_release_recursive>
 8026b66:	e7d9      	b.n	8026b1c <_fflush_r+0xc>
 8026b68:	4b05      	ldr	r3, [pc, #20]	; (8026b80 <_fflush_r+0x70>)
 8026b6a:	429c      	cmp	r4, r3
 8026b6c:	d101      	bne.n	8026b72 <_fflush_r+0x62>
 8026b6e:	68ac      	ldr	r4, [r5, #8]
 8026b70:	e7df      	b.n	8026b32 <_fflush_r+0x22>
 8026b72:	4b04      	ldr	r3, [pc, #16]	; (8026b84 <_fflush_r+0x74>)
 8026b74:	429c      	cmp	r4, r3
 8026b76:	bf08      	it	eq
 8026b78:	68ec      	ldreq	r4, [r5, #12]
 8026b7a:	e7da      	b.n	8026b32 <_fflush_r+0x22>
 8026b7c:	0802db88 	.word	0x0802db88
 8026b80:	0802dba8 	.word	0x0802dba8
 8026b84:	0802db68 	.word	0x0802db68

08026b88 <std>:
 8026b88:	2300      	movs	r3, #0
 8026b8a:	b510      	push	{r4, lr}
 8026b8c:	4604      	mov	r4, r0
 8026b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8026b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026b96:	6083      	str	r3, [r0, #8]
 8026b98:	8181      	strh	r1, [r0, #12]
 8026b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8026b9c:	81c2      	strh	r2, [r0, #14]
 8026b9e:	6183      	str	r3, [r0, #24]
 8026ba0:	4619      	mov	r1, r3
 8026ba2:	2208      	movs	r2, #8
 8026ba4:	305c      	adds	r0, #92	; 0x5c
 8026ba6:	f7ff fb8f 	bl	80262c8 <memset>
 8026baa:	4b05      	ldr	r3, [pc, #20]	; (8026bc0 <std+0x38>)
 8026bac:	6263      	str	r3, [r4, #36]	; 0x24
 8026bae:	4b05      	ldr	r3, [pc, #20]	; (8026bc4 <std+0x3c>)
 8026bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8026bb2:	4b05      	ldr	r3, [pc, #20]	; (8026bc8 <std+0x40>)
 8026bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026bb6:	4b05      	ldr	r3, [pc, #20]	; (8026bcc <std+0x44>)
 8026bb8:	6224      	str	r4, [r4, #32]
 8026bba:	6323      	str	r3, [r4, #48]	; 0x30
 8026bbc:	bd10      	pop	{r4, pc}
 8026bbe:	bf00      	nop
 8026bc0:	080277a5 	.word	0x080277a5
 8026bc4:	080277c7 	.word	0x080277c7
 8026bc8:	080277ff 	.word	0x080277ff
 8026bcc:	08027823 	.word	0x08027823

08026bd0 <_cleanup_r>:
 8026bd0:	4901      	ldr	r1, [pc, #4]	; (8026bd8 <_cleanup_r+0x8>)
 8026bd2:	f000 b8c1 	b.w	8026d58 <_fwalk_reent>
 8026bd6:	bf00      	nop
 8026bd8:	08026b11 	.word	0x08026b11

08026bdc <__sfmoreglue>:
 8026bdc:	b570      	push	{r4, r5, r6, lr}
 8026bde:	2268      	movs	r2, #104	; 0x68
 8026be0:	1e4d      	subs	r5, r1, #1
 8026be2:	4355      	muls	r5, r2
 8026be4:	460e      	mov	r6, r1
 8026be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026bea:	f7ff fbe1 	bl	80263b0 <_malloc_r>
 8026bee:	4604      	mov	r4, r0
 8026bf0:	b140      	cbz	r0, 8026c04 <__sfmoreglue+0x28>
 8026bf2:	2100      	movs	r1, #0
 8026bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8026bf8:	300c      	adds	r0, #12
 8026bfa:	60a0      	str	r0, [r4, #8]
 8026bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026c00:	f7ff fb62 	bl	80262c8 <memset>
 8026c04:	4620      	mov	r0, r4
 8026c06:	bd70      	pop	{r4, r5, r6, pc}

08026c08 <__sfp_lock_acquire>:
 8026c08:	4801      	ldr	r0, [pc, #4]	; (8026c10 <__sfp_lock_acquire+0x8>)
 8026c0a:	f000 b8c5 	b.w	8026d98 <__retarget_lock_acquire_recursive>
 8026c0e:	bf00      	nop
 8026c10:	2001626d 	.word	0x2001626d

08026c14 <__sfp_lock_release>:
 8026c14:	4801      	ldr	r0, [pc, #4]	; (8026c1c <__sfp_lock_release+0x8>)
 8026c16:	f000 b8c0 	b.w	8026d9a <__retarget_lock_release_recursive>
 8026c1a:	bf00      	nop
 8026c1c:	2001626d 	.word	0x2001626d

08026c20 <__sinit_lock_acquire>:
 8026c20:	4801      	ldr	r0, [pc, #4]	; (8026c28 <__sinit_lock_acquire+0x8>)
 8026c22:	f000 b8b9 	b.w	8026d98 <__retarget_lock_acquire_recursive>
 8026c26:	bf00      	nop
 8026c28:	2001626e 	.word	0x2001626e

08026c2c <__sinit_lock_release>:
 8026c2c:	4801      	ldr	r0, [pc, #4]	; (8026c34 <__sinit_lock_release+0x8>)
 8026c2e:	f000 b8b4 	b.w	8026d9a <__retarget_lock_release_recursive>
 8026c32:	bf00      	nop
 8026c34:	2001626e 	.word	0x2001626e

08026c38 <__sinit>:
 8026c38:	b510      	push	{r4, lr}
 8026c3a:	4604      	mov	r4, r0
 8026c3c:	f7ff fff0 	bl	8026c20 <__sinit_lock_acquire>
 8026c40:	69a3      	ldr	r3, [r4, #24]
 8026c42:	b11b      	cbz	r3, 8026c4c <__sinit+0x14>
 8026c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026c48:	f7ff bff0 	b.w	8026c2c <__sinit_lock_release>
 8026c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026c50:	6523      	str	r3, [r4, #80]	; 0x50
 8026c52:	4b13      	ldr	r3, [pc, #76]	; (8026ca0 <__sinit+0x68>)
 8026c54:	4a13      	ldr	r2, [pc, #76]	; (8026ca4 <__sinit+0x6c>)
 8026c56:	681b      	ldr	r3, [r3, #0]
 8026c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8026c5a:	42a3      	cmp	r3, r4
 8026c5c:	bf04      	itt	eq
 8026c5e:	2301      	moveq	r3, #1
 8026c60:	61a3      	streq	r3, [r4, #24]
 8026c62:	4620      	mov	r0, r4
 8026c64:	f000 f820 	bl	8026ca8 <__sfp>
 8026c68:	6060      	str	r0, [r4, #4]
 8026c6a:	4620      	mov	r0, r4
 8026c6c:	f000 f81c 	bl	8026ca8 <__sfp>
 8026c70:	60a0      	str	r0, [r4, #8]
 8026c72:	4620      	mov	r0, r4
 8026c74:	f000 f818 	bl	8026ca8 <__sfp>
 8026c78:	2200      	movs	r2, #0
 8026c7a:	60e0      	str	r0, [r4, #12]
 8026c7c:	2104      	movs	r1, #4
 8026c7e:	6860      	ldr	r0, [r4, #4]
 8026c80:	f7ff ff82 	bl	8026b88 <std>
 8026c84:	68a0      	ldr	r0, [r4, #8]
 8026c86:	2201      	movs	r2, #1
 8026c88:	2109      	movs	r1, #9
 8026c8a:	f7ff ff7d 	bl	8026b88 <std>
 8026c8e:	68e0      	ldr	r0, [r4, #12]
 8026c90:	2202      	movs	r2, #2
 8026c92:	2112      	movs	r1, #18
 8026c94:	f7ff ff78 	bl	8026b88 <std>
 8026c98:	2301      	movs	r3, #1
 8026c9a:	61a3      	str	r3, [r4, #24]
 8026c9c:	e7d2      	b.n	8026c44 <__sinit+0xc>
 8026c9e:	bf00      	nop
 8026ca0:	0802dab4 	.word	0x0802dab4
 8026ca4:	08026bd1 	.word	0x08026bd1

08026ca8 <__sfp>:
 8026ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026caa:	4607      	mov	r7, r0
 8026cac:	f7ff ffac 	bl	8026c08 <__sfp_lock_acquire>
 8026cb0:	4b1e      	ldr	r3, [pc, #120]	; (8026d2c <__sfp+0x84>)
 8026cb2:	681e      	ldr	r6, [r3, #0]
 8026cb4:	69b3      	ldr	r3, [r6, #24]
 8026cb6:	b913      	cbnz	r3, 8026cbe <__sfp+0x16>
 8026cb8:	4630      	mov	r0, r6
 8026cba:	f7ff ffbd 	bl	8026c38 <__sinit>
 8026cbe:	3648      	adds	r6, #72	; 0x48
 8026cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026cc4:	3b01      	subs	r3, #1
 8026cc6:	d503      	bpl.n	8026cd0 <__sfp+0x28>
 8026cc8:	6833      	ldr	r3, [r6, #0]
 8026cca:	b30b      	cbz	r3, 8026d10 <__sfp+0x68>
 8026ccc:	6836      	ldr	r6, [r6, #0]
 8026cce:	e7f7      	b.n	8026cc0 <__sfp+0x18>
 8026cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026cd4:	b9d5      	cbnz	r5, 8026d0c <__sfp+0x64>
 8026cd6:	4b16      	ldr	r3, [pc, #88]	; (8026d30 <__sfp+0x88>)
 8026cd8:	60e3      	str	r3, [r4, #12]
 8026cda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026cde:	6665      	str	r5, [r4, #100]	; 0x64
 8026ce0:	f000 f859 	bl	8026d96 <__retarget_lock_init_recursive>
 8026ce4:	f7ff ff96 	bl	8026c14 <__sfp_lock_release>
 8026ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026cf0:	6025      	str	r5, [r4, #0]
 8026cf2:	61a5      	str	r5, [r4, #24]
 8026cf4:	2208      	movs	r2, #8
 8026cf6:	4629      	mov	r1, r5
 8026cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026cfc:	f7ff fae4 	bl	80262c8 <memset>
 8026d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026d08:	4620      	mov	r0, r4
 8026d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026d0c:	3468      	adds	r4, #104	; 0x68
 8026d0e:	e7d9      	b.n	8026cc4 <__sfp+0x1c>
 8026d10:	2104      	movs	r1, #4
 8026d12:	4638      	mov	r0, r7
 8026d14:	f7ff ff62 	bl	8026bdc <__sfmoreglue>
 8026d18:	4604      	mov	r4, r0
 8026d1a:	6030      	str	r0, [r6, #0]
 8026d1c:	2800      	cmp	r0, #0
 8026d1e:	d1d5      	bne.n	8026ccc <__sfp+0x24>
 8026d20:	f7ff ff78 	bl	8026c14 <__sfp_lock_release>
 8026d24:	230c      	movs	r3, #12
 8026d26:	603b      	str	r3, [r7, #0]
 8026d28:	e7ee      	b.n	8026d08 <__sfp+0x60>
 8026d2a:	bf00      	nop
 8026d2c:	0802dab4 	.word	0x0802dab4
 8026d30:	ffff0001 	.word	0xffff0001

08026d34 <fiprintf>:
 8026d34:	b40e      	push	{r1, r2, r3}
 8026d36:	b503      	push	{r0, r1, lr}
 8026d38:	4601      	mov	r1, r0
 8026d3a:	ab03      	add	r3, sp, #12
 8026d3c:	4805      	ldr	r0, [pc, #20]	; (8026d54 <fiprintf+0x20>)
 8026d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026d42:	6800      	ldr	r0, [r0, #0]
 8026d44:	9301      	str	r3, [sp, #4]
 8026d46:	f000 fa21 	bl	802718c <_vfiprintf_r>
 8026d4a:	b002      	add	sp, #8
 8026d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026d50:	b003      	add	sp, #12
 8026d52:	4770      	bx	lr
 8026d54:	20000340 	.word	0x20000340

08026d58 <_fwalk_reent>:
 8026d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026d5c:	4606      	mov	r6, r0
 8026d5e:	4688      	mov	r8, r1
 8026d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026d64:	2700      	movs	r7, #0
 8026d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8026d6e:	d505      	bpl.n	8026d7c <_fwalk_reent+0x24>
 8026d70:	6824      	ldr	r4, [r4, #0]
 8026d72:	2c00      	cmp	r4, #0
 8026d74:	d1f7      	bne.n	8026d66 <_fwalk_reent+0xe>
 8026d76:	4638      	mov	r0, r7
 8026d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026d7c:	89ab      	ldrh	r3, [r5, #12]
 8026d7e:	2b01      	cmp	r3, #1
 8026d80:	d907      	bls.n	8026d92 <_fwalk_reent+0x3a>
 8026d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026d86:	3301      	adds	r3, #1
 8026d88:	d003      	beq.n	8026d92 <_fwalk_reent+0x3a>
 8026d8a:	4629      	mov	r1, r5
 8026d8c:	4630      	mov	r0, r6
 8026d8e:	47c0      	blx	r8
 8026d90:	4307      	orrs	r7, r0
 8026d92:	3568      	adds	r5, #104	; 0x68
 8026d94:	e7e9      	b.n	8026d6a <_fwalk_reent+0x12>

08026d96 <__retarget_lock_init_recursive>:
 8026d96:	4770      	bx	lr

08026d98 <__retarget_lock_acquire_recursive>:
 8026d98:	4770      	bx	lr

08026d9a <__retarget_lock_release_recursive>:
 8026d9a:	4770      	bx	lr

08026d9c <__swhatbuf_r>:
 8026d9c:	b570      	push	{r4, r5, r6, lr}
 8026d9e:	460e      	mov	r6, r1
 8026da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026da4:	2900      	cmp	r1, #0
 8026da6:	b096      	sub	sp, #88	; 0x58
 8026da8:	4614      	mov	r4, r2
 8026daa:	461d      	mov	r5, r3
 8026dac:	da08      	bge.n	8026dc0 <__swhatbuf_r+0x24>
 8026dae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026db2:	2200      	movs	r2, #0
 8026db4:	602a      	str	r2, [r5, #0]
 8026db6:	061a      	lsls	r2, r3, #24
 8026db8:	d410      	bmi.n	8026ddc <__swhatbuf_r+0x40>
 8026dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026dbe:	e00e      	b.n	8026dde <__swhatbuf_r+0x42>
 8026dc0:	466a      	mov	r2, sp
 8026dc2:	f000 fd5d 	bl	8027880 <_fstat_r>
 8026dc6:	2800      	cmp	r0, #0
 8026dc8:	dbf1      	blt.n	8026dae <__swhatbuf_r+0x12>
 8026dca:	9a01      	ldr	r2, [sp, #4]
 8026dcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026dd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026dd4:	425a      	negs	r2, r3
 8026dd6:	415a      	adcs	r2, r3
 8026dd8:	602a      	str	r2, [r5, #0]
 8026dda:	e7ee      	b.n	8026dba <__swhatbuf_r+0x1e>
 8026ddc:	2340      	movs	r3, #64	; 0x40
 8026dde:	2000      	movs	r0, #0
 8026de0:	6023      	str	r3, [r4, #0]
 8026de2:	b016      	add	sp, #88	; 0x58
 8026de4:	bd70      	pop	{r4, r5, r6, pc}
	...

08026de8 <__smakebuf_r>:
 8026de8:	898b      	ldrh	r3, [r1, #12]
 8026dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026dec:	079d      	lsls	r5, r3, #30
 8026dee:	4606      	mov	r6, r0
 8026df0:	460c      	mov	r4, r1
 8026df2:	d507      	bpl.n	8026e04 <__smakebuf_r+0x1c>
 8026df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026df8:	6023      	str	r3, [r4, #0]
 8026dfa:	6123      	str	r3, [r4, #16]
 8026dfc:	2301      	movs	r3, #1
 8026dfe:	6163      	str	r3, [r4, #20]
 8026e00:	b002      	add	sp, #8
 8026e02:	bd70      	pop	{r4, r5, r6, pc}
 8026e04:	ab01      	add	r3, sp, #4
 8026e06:	466a      	mov	r2, sp
 8026e08:	f7ff ffc8 	bl	8026d9c <__swhatbuf_r>
 8026e0c:	9900      	ldr	r1, [sp, #0]
 8026e0e:	4605      	mov	r5, r0
 8026e10:	4630      	mov	r0, r6
 8026e12:	f7ff facd 	bl	80263b0 <_malloc_r>
 8026e16:	b948      	cbnz	r0, 8026e2c <__smakebuf_r+0x44>
 8026e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e1c:	059a      	lsls	r2, r3, #22
 8026e1e:	d4ef      	bmi.n	8026e00 <__smakebuf_r+0x18>
 8026e20:	f023 0303 	bic.w	r3, r3, #3
 8026e24:	f043 0302 	orr.w	r3, r3, #2
 8026e28:	81a3      	strh	r3, [r4, #12]
 8026e2a:	e7e3      	b.n	8026df4 <__smakebuf_r+0xc>
 8026e2c:	4b0d      	ldr	r3, [pc, #52]	; (8026e64 <__smakebuf_r+0x7c>)
 8026e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8026e30:	89a3      	ldrh	r3, [r4, #12]
 8026e32:	6020      	str	r0, [r4, #0]
 8026e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026e38:	81a3      	strh	r3, [r4, #12]
 8026e3a:	9b00      	ldr	r3, [sp, #0]
 8026e3c:	6163      	str	r3, [r4, #20]
 8026e3e:	9b01      	ldr	r3, [sp, #4]
 8026e40:	6120      	str	r0, [r4, #16]
 8026e42:	b15b      	cbz	r3, 8026e5c <__smakebuf_r+0x74>
 8026e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026e48:	4630      	mov	r0, r6
 8026e4a:	f000 fd2b 	bl	80278a4 <_isatty_r>
 8026e4e:	b128      	cbz	r0, 8026e5c <__smakebuf_r+0x74>
 8026e50:	89a3      	ldrh	r3, [r4, #12]
 8026e52:	f023 0303 	bic.w	r3, r3, #3
 8026e56:	f043 0301 	orr.w	r3, r3, #1
 8026e5a:	81a3      	strh	r3, [r4, #12]
 8026e5c:	89a0      	ldrh	r0, [r4, #12]
 8026e5e:	4305      	orrs	r5, r0
 8026e60:	81a5      	strh	r5, [r4, #12]
 8026e62:	e7cd      	b.n	8026e00 <__smakebuf_r+0x18>
 8026e64:	08026bd1 	.word	0x08026bd1

08026e68 <__malloc_lock>:
 8026e68:	4801      	ldr	r0, [pc, #4]	; (8026e70 <__malloc_lock+0x8>)
 8026e6a:	f7ff bf95 	b.w	8026d98 <__retarget_lock_acquire_recursive>
 8026e6e:	bf00      	nop
 8026e70:	2001626c 	.word	0x2001626c

08026e74 <__malloc_unlock>:
 8026e74:	4801      	ldr	r0, [pc, #4]	; (8026e7c <__malloc_unlock+0x8>)
 8026e76:	f7ff bf90 	b.w	8026d9a <__retarget_lock_release_recursive>
 8026e7a:	bf00      	nop
 8026e7c:	2001626c 	.word	0x2001626c

08026e80 <__ssputs_r>:
 8026e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e84:	688e      	ldr	r6, [r1, #8]
 8026e86:	429e      	cmp	r6, r3
 8026e88:	4682      	mov	sl, r0
 8026e8a:	460c      	mov	r4, r1
 8026e8c:	4690      	mov	r8, r2
 8026e8e:	461f      	mov	r7, r3
 8026e90:	d838      	bhi.n	8026f04 <__ssputs_r+0x84>
 8026e92:	898a      	ldrh	r2, [r1, #12]
 8026e94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026e98:	d032      	beq.n	8026f00 <__ssputs_r+0x80>
 8026e9a:	6825      	ldr	r5, [r4, #0]
 8026e9c:	6909      	ldr	r1, [r1, #16]
 8026e9e:	eba5 0901 	sub.w	r9, r5, r1
 8026ea2:	6965      	ldr	r5, [r4, #20]
 8026ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026ea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026eac:	3301      	adds	r3, #1
 8026eae:	444b      	add	r3, r9
 8026eb0:	106d      	asrs	r5, r5, #1
 8026eb2:	429d      	cmp	r5, r3
 8026eb4:	bf38      	it	cc
 8026eb6:	461d      	movcc	r5, r3
 8026eb8:	0553      	lsls	r3, r2, #21
 8026eba:	d531      	bpl.n	8026f20 <__ssputs_r+0xa0>
 8026ebc:	4629      	mov	r1, r5
 8026ebe:	f7ff fa77 	bl	80263b0 <_malloc_r>
 8026ec2:	4606      	mov	r6, r0
 8026ec4:	b950      	cbnz	r0, 8026edc <__ssputs_r+0x5c>
 8026ec6:	230c      	movs	r3, #12
 8026ec8:	f8ca 3000 	str.w	r3, [sl]
 8026ecc:	89a3      	ldrh	r3, [r4, #12]
 8026ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026ed2:	81a3      	strh	r3, [r4, #12]
 8026ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8026ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026edc:	6921      	ldr	r1, [r4, #16]
 8026ede:	464a      	mov	r2, r9
 8026ee0:	f7ff f9ca 	bl	8026278 <memcpy>
 8026ee4:	89a3      	ldrh	r3, [r4, #12]
 8026ee6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026eee:	81a3      	strh	r3, [r4, #12]
 8026ef0:	6126      	str	r6, [r4, #16]
 8026ef2:	6165      	str	r5, [r4, #20]
 8026ef4:	444e      	add	r6, r9
 8026ef6:	eba5 0509 	sub.w	r5, r5, r9
 8026efa:	6026      	str	r6, [r4, #0]
 8026efc:	60a5      	str	r5, [r4, #8]
 8026efe:	463e      	mov	r6, r7
 8026f00:	42be      	cmp	r6, r7
 8026f02:	d900      	bls.n	8026f06 <__ssputs_r+0x86>
 8026f04:	463e      	mov	r6, r7
 8026f06:	6820      	ldr	r0, [r4, #0]
 8026f08:	4632      	mov	r2, r6
 8026f0a:	4641      	mov	r1, r8
 8026f0c:	f7ff f9c2 	bl	8026294 <memmove>
 8026f10:	68a3      	ldr	r3, [r4, #8]
 8026f12:	1b9b      	subs	r3, r3, r6
 8026f14:	60a3      	str	r3, [r4, #8]
 8026f16:	6823      	ldr	r3, [r4, #0]
 8026f18:	4433      	add	r3, r6
 8026f1a:	6023      	str	r3, [r4, #0]
 8026f1c:	2000      	movs	r0, #0
 8026f1e:	e7db      	b.n	8026ed8 <__ssputs_r+0x58>
 8026f20:	462a      	mov	r2, r5
 8026f22:	f000 fce1 	bl	80278e8 <_realloc_r>
 8026f26:	4606      	mov	r6, r0
 8026f28:	2800      	cmp	r0, #0
 8026f2a:	d1e1      	bne.n	8026ef0 <__ssputs_r+0x70>
 8026f2c:	6921      	ldr	r1, [r4, #16]
 8026f2e:	4650      	mov	r0, sl
 8026f30:	f7ff f9d2 	bl	80262d8 <_free_r>
 8026f34:	e7c7      	b.n	8026ec6 <__ssputs_r+0x46>
	...

08026f38 <_svfiprintf_r>:
 8026f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f3c:	4698      	mov	r8, r3
 8026f3e:	898b      	ldrh	r3, [r1, #12]
 8026f40:	061b      	lsls	r3, r3, #24
 8026f42:	b09d      	sub	sp, #116	; 0x74
 8026f44:	4607      	mov	r7, r0
 8026f46:	460d      	mov	r5, r1
 8026f48:	4614      	mov	r4, r2
 8026f4a:	d50e      	bpl.n	8026f6a <_svfiprintf_r+0x32>
 8026f4c:	690b      	ldr	r3, [r1, #16]
 8026f4e:	b963      	cbnz	r3, 8026f6a <_svfiprintf_r+0x32>
 8026f50:	2140      	movs	r1, #64	; 0x40
 8026f52:	f7ff fa2d 	bl	80263b0 <_malloc_r>
 8026f56:	6028      	str	r0, [r5, #0]
 8026f58:	6128      	str	r0, [r5, #16]
 8026f5a:	b920      	cbnz	r0, 8026f66 <_svfiprintf_r+0x2e>
 8026f5c:	230c      	movs	r3, #12
 8026f5e:	603b      	str	r3, [r7, #0]
 8026f60:	f04f 30ff 	mov.w	r0, #4294967295
 8026f64:	e0d1      	b.n	802710a <_svfiprintf_r+0x1d2>
 8026f66:	2340      	movs	r3, #64	; 0x40
 8026f68:	616b      	str	r3, [r5, #20]
 8026f6a:	2300      	movs	r3, #0
 8026f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8026f6e:	2320      	movs	r3, #32
 8026f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8026f78:	2330      	movs	r3, #48	; 0x30
 8026f7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027124 <_svfiprintf_r+0x1ec>
 8026f7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026f82:	f04f 0901 	mov.w	r9, #1
 8026f86:	4623      	mov	r3, r4
 8026f88:	469a      	mov	sl, r3
 8026f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026f8e:	b10a      	cbz	r2, 8026f94 <_svfiprintf_r+0x5c>
 8026f90:	2a25      	cmp	r2, #37	; 0x25
 8026f92:	d1f9      	bne.n	8026f88 <_svfiprintf_r+0x50>
 8026f94:	ebba 0b04 	subs.w	fp, sl, r4
 8026f98:	d00b      	beq.n	8026fb2 <_svfiprintf_r+0x7a>
 8026f9a:	465b      	mov	r3, fp
 8026f9c:	4622      	mov	r2, r4
 8026f9e:	4629      	mov	r1, r5
 8026fa0:	4638      	mov	r0, r7
 8026fa2:	f7ff ff6d 	bl	8026e80 <__ssputs_r>
 8026fa6:	3001      	adds	r0, #1
 8026fa8:	f000 80aa 	beq.w	8027100 <_svfiprintf_r+0x1c8>
 8026fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026fae:	445a      	add	r2, fp
 8026fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8026fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8026fb6:	2b00      	cmp	r3, #0
 8026fb8:	f000 80a2 	beq.w	8027100 <_svfiprintf_r+0x1c8>
 8026fbc:	2300      	movs	r3, #0
 8026fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8026fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026fc6:	f10a 0a01 	add.w	sl, sl, #1
 8026fca:	9304      	str	r3, [sp, #16]
 8026fcc:	9307      	str	r3, [sp, #28]
 8026fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8026fd4:	4654      	mov	r4, sl
 8026fd6:	2205      	movs	r2, #5
 8026fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026fdc:	4851      	ldr	r0, [pc, #324]	; (8027124 <_svfiprintf_r+0x1ec>)
 8026fde:	f7d9 f947 	bl	8000270 <memchr>
 8026fe2:	9a04      	ldr	r2, [sp, #16]
 8026fe4:	b9d8      	cbnz	r0, 802701e <_svfiprintf_r+0xe6>
 8026fe6:	06d0      	lsls	r0, r2, #27
 8026fe8:	bf44      	itt	mi
 8026fea:	2320      	movmi	r3, #32
 8026fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026ff0:	0711      	lsls	r1, r2, #28
 8026ff2:	bf44      	itt	mi
 8026ff4:	232b      	movmi	r3, #43	; 0x2b
 8026ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8026ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8027000:	d015      	beq.n	802702e <_svfiprintf_r+0xf6>
 8027002:	9a07      	ldr	r2, [sp, #28]
 8027004:	4654      	mov	r4, sl
 8027006:	2000      	movs	r0, #0
 8027008:	f04f 0c0a 	mov.w	ip, #10
 802700c:	4621      	mov	r1, r4
 802700e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027012:	3b30      	subs	r3, #48	; 0x30
 8027014:	2b09      	cmp	r3, #9
 8027016:	d94e      	bls.n	80270b6 <_svfiprintf_r+0x17e>
 8027018:	b1b0      	cbz	r0, 8027048 <_svfiprintf_r+0x110>
 802701a:	9207      	str	r2, [sp, #28]
 802701c:	e014      	b.n	8027048 <_svfiprintf_r+0x110>
 802701e:	eba0 0308 	sub.w	r3, r0, r8
 8027022:	fa09 f303 	lsl.w	r3, r9, r3
 8027026:	4313      	orrs	r3, r2
 8027028:	9304      	str	r3, [sp, #16]
 802702a:	46a2      	mov	sl, r4
 802702c:	e7d2      	b.n	8026fd4 <_svfiprintf_r+0x9c>
 802702e:	9b03      	ldr	r3, [sp, #12]
 8027030:	1d19      	adds	r1, r3, #4
 8027032:	681b      	ldr	r3, [r3, #0]
 8027034:	9103      	str	r1, [sp, #12]
 8027036:	2b00      	cmp	r3, #0
 8027038:	bfbb      	ittet	lt
 802703a:	425b      	neglt	r3, r3
 802703c:	f042 0202 	orrlt.w	r2, r2, #2
 8027040:	9307      	strge	r3, [sp, #28]
 8027042:	9307      	strlt	r3, [sp, #28]
 8027044:	bfb8      	it	lt
 8027046:	9204      	strlt	r2, [sp, #16]
 8027048:	7823      	ldrb	r3, [r4, #0]
 802704a:	2b2e      	cmp	r3, #46	; 0x2e
 802704c:	d10c      	bne.n	8027068 <_svfiprintf_r+0x130>
 802704e:	7863      	ldrb	r3, [r4, #1]
 8027050:	2b2a      	cmp	r3, #42	; 0x2a
 8027052:	d135      	bne.n	80270c0 <_svfiprintf_r+0x188>
 8027054:	9b03      	ldr	r3, [sp, #12]
 8027056:	1d1a      	adds	r2, r3, #4
 8027058:	681b      	ldr	r3, [r3, #0]
 802705a:	9203      	str	r2, [sp, #12]
 802705c:	2b00      	cmp	r3, #0
 802705e:	bfb8      	it	lt
 8027060:	f04f 33ff 	movlt.w	r3, #4294967295
 8027064:	3402      	adds	r4, #2
 8027066:	9305      	str	r3, [sp, #20]
 8027068:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8027134 <_svfiprintf_r+0x1fc>
 802706c:	7821      	ldrb	r1, [r4, #0]
 802706e:	2203      	movs	r2, #3
 8027070:	4650      	mov	r0, sl
 8027072:	f7d9 f8fd 	bl	8000270 <memchr>
 8027076:	b140      	cbz	r0, 802708a <_svfiprintf_r+0x152>
 8027078:	2340      	movs	r3, #64	; 0x40
 802707a:	eba0 000a 	sub.w	r0, r0, sl
 802707e:	fa03 f000 	lsl.w	r0, r3, r0
 8027082:	9b04      	ldr	r3, [sp, #16]
 8027084:	4303      	orrs	r3, r0
 8027086:	3401      	adds	r4, #1
 8027088:	9304      	str	r3, [sp, #16]
 802708a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802708e:	4826      	ldr	r0, [pc, #152]	; (8027128 <_svfiprintf_r+0x1f0>)
 8027090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027094:	2206      	movs	r2, #6
 8027096:	f7d9 f8eb 	bl	8000270 <memchr>
 802709a:	2800      	cmp	r0, #0
 802709c:	d038      	beq.n	8027110 <_svfiprintf_r+0x1d8>
 802709e:	4b23      	ldr	r3, [pc, #140]	; (802712c <_svfiprintf_r+0x1f4>)
 80270a0:	bb1b      	cbnz	r3, 80270ea <_svfiprintf_r+0x1b2>
 80270a2:	9b03      	ldr	r3, [sp, #12]
 80270a4:	3307      	adds	r3, #7
 80270a6:	f023 0307 	bic.w	r3, r3, #7
 80270aa:	3308      	adds	r3, #8
 80270ac:	9303      	str	r3, [sp, #12]
 80270ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80270b0:	4433      	add	r3, r6
 80270b2:	9309      	str	r3, [sp, #36]	; 0x24
 80270b4:	e767      	b.n	8026f86 <_svfiprintf_r+0x4e>
 80270b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80270ba:	460c      	mov	r4, r1
 80270bc:	2001      	movs	r0, #1
 80270be:	e7a5      	b.n	802700c <_svfiprintf_r+0xd4>
 80270c0:	2300      	movs	r3, #0
 80270c2:	3401      	adds	r4, #1
 80270c4:	9305      	str	r3, [sp, #20]
 80270c6:	4619      	mov	r1, r3
 80270c8:	f04f 0c0a 	mov.w	ip, #10
 80270cc:	4620      	mov	r0, r4
 80270ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80270d2:	3a30      	subs	r2, #48	; 0x30
 80270d4:	2a09      	cmp	r2, #9
 80270d6:	d903      	bls.n	80270e0 <_svfiprintf_r+0x1a8>
 80270d8:	2b00      	cmp	r3, #0
 80270da:	d0c5      	beq.n	8027068 <_svfiprintf_r+0x130>
 80270dc:	9105      	str	r1, [sp, #20]
 80270de:	e7c3      	b.n	8027068 <_svfiprintf_r+0x130>
 80270e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80270e4:	4604      	mov	r4, r0
 80270e6:	2301      	movs	r3, #1
 80270e8:	e7f0      	b.n	80270cc <_svfiprintf_r+0x194>
 80270ea:	ab03      	add	r3, sp, #12
 80270ec:	9300      	str	r3, [sp, #0]
 80270ee:	462a      	mov	r2, r5
 80270f0:	4b0f      	ldr	r3, [pc, #60]	; (8027130 <_svfiprintf_r+0x1f8>)
 80270f2:	a904      	add	r1, sp, #16
 80270f4:	4638      	mov	r0, r7
 80270f6:	f3af 8000 	nop.w
 80270fa:	1c42      	adds	r2, r0, #1
 80270fc:	4606      	mov	r6, r0
 80270fe:	d1d6      	bne.n	80270ae <_svfiprintf_r+0x176>
 8027100:	89ab      	ldrh	r3, [r5, #12]
 8027102:	065b      	lsls	r3, r3, #25
 8027104:	f53f af2c 	bmi.w	8026f60 <_svfiprintf_r+0x28>
 8027108:	9809      	ldr	r0, [sp, #36]	; 0x24
 802710a:	b01d      	add	sp, #116	; 0x74
 802710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027110:	ab03      	add	r3, sp, #12
 8027112:	9300      	str	r3, [sp, #0]
 8027114:	462a      	mov	r2, r5
 8027116:	4b06      	ldr	r3, [pc, #24]	; (8027130 <_svfiprintf_r+0x1f8>)
 8027118:	a904      	add	r1, sp, #16
 802711a:	4638      	mov	r0, r7
 802711c:	f000 f9d4 	bl	80274c8 <_printf_i>
 8027120:	e7eb      	b.n	80270fa <_svfiprintf_r+0x1c2>
 8027122:	bf00      	nop
 8027124:	0802dbc8 	.word	0x0802dbc8
 8027128:	0802dbd2 	.word	0x0802dbd2
 802712c:	00000000 	.word	0x00000000
 8027130:	08026e81 	.word	0x08026e81
 8027134:	0802dbce 	.word	0x0802dbce

08027138 <__sfputc_r>:
 8027138:	6893      	ldr	r3, [r2, #8]
 802713a:	3b01      	subs	r3, #1
 802713c:	2b00      	cmp	r3, #0
 802713e:	b410      	push	{r4}
 8027140:	6093      	str	r3, [r2, #8]
 8027142:	da08      	bge.n	8027156 <__sfputc_r+0x1e>
 8027144:	6994      	ldr	r4, [r2, #24]
 8027146:	42a3      	cmp	r3, r4
 8027148:	db01      	blt.n	802714e <__sfputc_r+0x16>
 802714a:	290a      	cmp	r1, #10
 802714c:	d103      	bne.n	8027156 <__sfputc_r+0x1e>
 802714e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027152:	f7ff bb79 	b.w	8026848 <__swbuf_r>
 8027156:	6813      	ldr	r3, [r2, #0]
 8027158:	1c58      	adds	r0, r3, #1
 802715a:	6010      	str	r0, [r2, #0]
 802715c:	7019      	strb	r1, [r3, #0]
 802715e:	4608      	mov	r0, r1
 8027160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027164:	4770      	bx	lr

08027166 <__sfputs_r>:
 8027166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027168:	4606      	mov	r6, r0
 802716a:	460f      	mov	r7, r1
 802716c:	4614      	mov	r4, r2
 802716e:	18d5      	adds	r5, r2, r3
 8027170:	42ac      	cmp	r4, r5
 8027172:	d101      	bne.n	8027178 <__sfputs_r+0x12>
 8027174:	2000      	movs	r0, #0
 8027176:	e007      	b.n	8027188 <__sfputs_r+0x22>
 8027178:	f814 1b01 	ldrb.w	r1, [r4], #1
 802717c:	463a      	mov	r2, r7
 802717e:	4630      	mov	r0, r6
 8027180:	f7ff ffda 	bl	8027138 <__sfputc_r>
 8027184:	1c43      	adds	r3, r0, #1
 8027186:	d1f3      	bne.n	8027170 <__sfputs_r+0xa>
 8027188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802718c <_vfiprintf_r>:
 802718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027190:	460d      	mov	r5, r1
 8027192:	b09d      	sub	sp, #116	; 0x74
 8027194:	4614      	mov	r4, r2
 8027196:	4698      	mov	r8, r3
 8027198:	4606      	mov	r6, r0
 802719a:	b118      	cbz	r0, 80271a4 <_vfiprintf_r+0x18>
 802719c:	6983      	ldr	r3, [r0, #24]
 802719e:	b90b      	cbnz	r3, 80271a4 <_vfiprintf_r+0x18>
 80271a0:	f7ff fd4a 	bl	8026c38 <__sinit>
 80271a4:	4b89      	ldr	r3, [pc, #548]	; (80273cc <_vfiprintf_r+0x240>)
 80271a6:	429d      	cmp	r5, r3
 80271a8:	d11b      	bne.n	80271e2 <_vfiprintf_r+0x56>
 80271aa:	6875      	ldr	r5, [r6, #4]
 80271ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80271ae:	07d9      	lsls	r1, r3, #31
 80271b0:	d405      	bmi.n	80271be <_vfiprintf_r+0x32>
 80271b2:	89ab      	ldrh	r3, [r5, #12]
 80271b4:	059a      	lsls	r2, r3, #22
 80271b6:	d402      	bmi.n	80271be <_vfiprintf_r+0x32>
 80271b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80271ba:	f7ff fded 	bl	8026d98 <__retarget_lock_acquire_recursive>
 80271be:	89ab      	ldrh	r3, [r5, #12]
 80271c0:	071b      	lsls	r3, r3, #28
 80271c2:	d501      	bpl.n	80271c8 <_vfiprintf_r+0x3c>
 80271c4:	692b      	ldr	r3, [r5, #16]
 80271c6:	b9eb      	cbnz	r3, 8027204 <_vfiprintf_r+0x78>
 80271c8:	4629      	mov	r1, r5
 80271ca:	4630      	mov	r0, r6
 80271cc:	f7ff fb8e 	bl	80268ec <__swsetup_r>
 80271d0:	b1c0      	cbz	r0, 8027204 <_vfiprintf_r+0x78>
 80271d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80271d4:	07dc      	lsls	r4, r3, #31
 80271d6:	d50e      	bpl.n	80271f6 <_vfiprintf_r+0x6a>
 80271d8:	f04f 30ff 	mov.w	r0, #4294967295
 80271dc:	b01d      	add	sp, #116	; 0x74
 80271de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271e2:	4b7b      	ldr	r3, [pc, #492]	; (80273d0 <_vfiprintf_r+0x244>)
 80271e4:	429d      	cmp	r5, r3
 80271e6:	d101      	bne.n	80271ec <_vfiprintf_r+0x60>
 80271e8:	68b5      	ldr	r5, [r6, #8]
 80271ea:	e7df      	b.n	80271ac <_vfiprintf_r+0x20>
 80271ec:	4b79      	ldr	r3, [pc, #484]	; (80273d4 <_vfiprintf_r+0x248>)
 80271ee:	429d      	cmp	r5, r3
 80271f0:	bf08      	it	eq
 80271f2:	68f5      	ldreq	r5, [r6, #12]
 80271f4:	e7da      	b.n	80271ac <_vfiprintf_r+0x20>
 80271f6:	89ab      	ldrh	r3, [r5, #12]
 80271f8:	0598      	lsls	r0, r3, #22
 80271fa:	d4ed      	bmi.n	80271d8 <_vfiprintf_r+0x4c>
 80271fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80271fe:	f7ff fdcc 	bl	8026d9a <__retarget_lock_release_recursive>
 8027202:	e7e9      	b.n	80271d8 <_vfiprintf_r+0x4c>
 8027204:	2300      	movs	r3, #0
 8027206:	9309      	str	r3, [sp, #36]	; 0x24
 8027208:	2320      	movs	r3, #32
 802720a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802720e:	f8cd 800c 	str.w	r8, [sp, #12]
 8027212:	2330      	movs	r3, #48	; 0x30
 8027214:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80273d8 <_vfiprintf_r+0x24c>
 8027218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802721c:	f04f 0901 	mov.w	r9, #1
 8027220:	4623      	mov	r3, r4
 8027222:	469a      	mov	sl, r3
 8027224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027228:	b10a      	cbz	r2, 802722e <_vfiprintf_r+0xa2>
 802722a:	2a25      	cmp	r2, #37	; 0x25
 802722c:	d1f9      	bne.n	8027222 <_vfiprintf_r+0x96>
 802722e:	ebba 0b04 	subs.w	fp, sl, r4
 8027232:	d00b      	beq.n	802724c <_vfiprintf_r+0xc0>
 8027234:	465b      	mov	r3, fp
 8027236:	4622      	mov	r2, r4
 8027238:	4629      	mov	r1, r5
 802723a:	4630      	mov	r0, r6
 802723c:	f7ff ff93 	bl	8027166 <__sfputs_r>
 8027240:	3001      	adds	r0, #1
 8027242:	f000 80aa 	beq.w	802739a <_vfiprintf_r+0x20e>
 8027246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027248:	445a      	add	r2, fp
 802724a:	9209      	str	r2, [sp, #36]	; 0x24
 802724c:	f89a 3000 	ldrb.w	r3, [sl]
 8027250:	2b00      	cmp	r3, #0
 8027252:	f000 80a2 	beq.w	802739a <_vfiprintf_r+0x20e>
 8027256:	2300      	movs	r3, #0
 8027258:	f04f 32ff 	mov.w	r2, #4294967295
 802725c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027260:	f10a 0a01 	add.w	sl, sl, #1
 8027264:	9304      	str	r3, [sp, #16]
 8027266:	9307      	str	r3, [sp, #28]
 8027268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802726c:	931a      	str	r3, [sp, #104]	; 0x68
 802726e:	4654      	mov	r4, sl
 8027270:	2205      	movs	r2, #5
 8027272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027276:	4858      	ldr	r0, [pc, #352]	; (80273d8 <_vfiprintf_r+0x24c>)
 8027278:	f7d8 fffa 	bl	8000270 <memchr>
 802727c:	9a04      	ldr	r2, [sp, #16]
 802727e:	b9d8      	cbnz	r0, 80272b8 <_vfiprintf_r+0x12c>
 8027280:	06d1      	lsls	r1, r2, #27
 8027282:	bf44      	itt	mi
 8027284:	2320      	movmi	r3, #32
 8027286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802728a:	0713      	lsls	r3, r2, #28
 802728c:	bf44      	itt	mi
 802728e:	232b      	movmi	r3, #43	; 0x2b
 8027290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027294:	f89a 3000 	ldrb.w	r3, [sl]
 8027298:	2b2a      	cmp	r3, #42	; 0x2a
 802729a:	d015      	beq.n	80272c8 <_vfiprintf_r+0x13c>
 802729c:	9a07      	ldr	r2, [sp, #28]
 802729e:	4654      	mov	r4, sl
 80272a0:	2000      	movs	r0, #0
 80272a2:	f04f 0c0a 	mov.w	ip, #10
 80272a6:	4621      	mov	r1, r4
 80272a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80272ac:	3b30      	subs	r3, #48	; 0x30
 80272ae:	2b09      	cmp	r3, #9
 80272b0:	d94e      	bls.n	8027350 <_vfiprintf_r+0x1c4>
 80272b2:	b1b0      	cbz	r0, 80272e2 <_vfiprintf_r+0x156>
 80272b4:	9207      	str	r2, [sp, #28]
 80272b6:	e014      	b.n	80272e2 <_vfiprintf_r+0x156>
 80272b8:	eba0 0308 	sub.w	r3, r0, r8
 80272bc:	fa09 f303 	lsl.w	r3, r9, r3
 80272c0:	4313      	orrs	r3, r2
 80272c2:	9304      	str	r3, [sp, #16]
 80272c4:	46a2      	mov	sl, r4
 80272c6:	e7d2      	b.n	802726e <_vfiprintf_r+0xe2>
 80272c8:	9b03      	ldr	r3, [sp, #12]
 80272ca:	1d19      	adds	r1, r3, #4
 80272cc:	681b      	ldr	r3, [r3, #0]
 80272ce:	9103      	str	r1, [sp, #12]
 80272d0:	2b00      	cmp	r3, #0
 80272d2:	bfbb      	ittet	lt
 80272d4:	425b      	neglt	r3, r3
 80272d6:	f042 0202 	orrlt.w	r2, r2, #2
 80272da:	9307      	strge	r3, [sp, #28]
 80272dc:	9307      	strlt	r3, [sp, #28]
 80272de:	bfb8      	it	lt
 80272e0:	9204      	strlt	r2, [sp, #16]
 80272e2:	7823      	ldrb	r3, [r4, #0]
 80272e4:	2b2e      	cmp	r3, #46	; 0x2e
 80272e6:	d10c      	bne.n	8027302 <_vfiprintf_r+0x176>
 80272e8:	7863      	ldrb	r3, [r4, #1]
 80272ea:	2b2a      	cmp	r3, #42	; 0x2a
 80272ec:	d135      	bne.n	802735a <_vfiprintf_r+0x1ce>
 80272ee:	9b03      	ldr	r3, [sp, #12]
 80272f0:	1d1a      	adds	r2, r3, #4
 80272f2:	681b      	ldr	r3, [r3, #0]
 80272f4:	9203      	str	r2, [sp, #12]
 80272f6:	2b00      	cmp	r3, #0
 80272f8:	bfb8      	it	lt
 80272fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80272fe:	3402      	adds	r4, #2
 8027300:	9305      	str	r3, [sp, #20]
 8027302:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80273e8 <_vfiprintf_r+0x25c>
 8027306:	7821      	ldrb	r1, [r4, #0]
 8027308:	2203      	movs	r2, #3
 802730a:	4650      	mov	r0, sl
 802730c:	f7d8 ffb0 	bl	8000270 <memchr>
 8027310:	b140      	cbz	r0, 8027324 <_vfiprintf_r+0x198>
 8027312:	2340      	movs	r3, #64	; 0x40
 8027314:	eba0 000a 	sub.w	r0, r0, sl
 8027318:	fa03 f000 	lsl.w	r0, r3, r0
 802731c:	9b04      	ldr	r3, [sp, #16]
 802731e:	4303      	orrs	r3, r0
 8027320:	3401      	adds	r4, #1
 8027322:	9304      	str	r3, [sp, #16]
 8027324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027328:	482c      	ldr	r0, [pc, #176]	; (80273dc <_vfiprintf_r+0x250>)
 802732a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802732e:	2206      	movs	r2, #6
 8027330:	f7d8 ff9e 	bl	8000270 <memchr>
 8027334:	2800      	cmp	r0, #0
 8027336:	d03f      	beq.n	80273b8 <_vfiprintf_r+0x22c>
 8027338:	4b29      	ldr	r3, [pc, #164]	; (80273e0 <_vfiprintf_r+0x254>)
 802733a:	bb1b      	cbnz	r3, 8027384 <_vfiprintf_r+0x1f8>
 802733c:	9b03      	ldr	r3, [sp, #12]
 802733e:	3307      	adds	r3, #7
 8027340:	f023 0307 	bic.w	r3, r3, #7
 8027344:	3308      	adds	r3, #8
 8027346:	9303      	str	r3, [sp, #12]
 8027348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802734a:	443b      	add	r3, r7
 802734c:	9309      	str	r3, [sp, #36]	; 0x24
 802734e:	e767      	b.n	8027220 <_vfiprintf_r+0x94>
 8027350:	fb0c 3202 	mla	r2, ip, r2, r3
 8027354:	460c      	mov	r4, r1
 8027356:	2001      	movs	r0, #1
 8027358:	e7a5      	b.n	80272a6 <_vfiprintf_r+0x11a>
 802735a:	2300      	movs	r3, #0
 802735c:	3401      	adds	r4, #1
 802735e:	9305      	str	r3, [sp, #20]
 8027360:	4619      	mov	r1, r3
 8027362:	f04f 0c0a 	mov.w	ip, #10
 8027366:	4620      	mov	r0, r4
 8027368:	f810 2b01 	ldrb.w	r2, [r0], #1
 802736c:	3a30      	subs	r2, #48	; 0x30
 802736e:	2a09      	cmp	r2, #9
 8027370:	d903      	bls.n	802737a <_vfiprintf_r+0x1ee>
 8027372:	2b00      	cmp	r3, #0
 8027374:	d0c5      	beq.n	8027302 <_vfiprintf_r+0x176>
 8027376:	9105      	str	r1, [sp, #20]
 8027378:	e7c3      	b.n	8027302 <_vfiprintf_r+0x176>
 802737a:	fb0c 2101 	mla	r1, ip, r1, r2
 802737e:	4604      	mov	r4, r0
 8027380:	2301      	movs	r3, #1
 8027382:	e7f0      	b.n	8027366 <_vfiprintf_r+0x1da>
 8027384:	ab03      	add	r3, sp, #12
 8027386:	9300      	str	r3, [sp, #0]
 8027388:	462a      	mov	r2, r5
 802738a:	4b16      	ldr	r3, [pc, #88]	; (80273e4 <_vfiprintf_r+0x258>)
 802738c:	a904      	add	r1, sp, #16
 802738e:	4630      	mov	r0, r6
 8027390:	f3af 8000 	nop.w
 8027394:	4607      	mov	r7, r0
 8027396:	1c78      	adds	r0, r7, #1
 8027398:	d1d6      	bne.n	8027348 <_vfiprintf_r+0x1bc>
 802739a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802739c:	07d9      	lsls	r1, r3, #31
 802739e:	d405      	bmi.n	80273ac <_vfiprintf_r+0x220>
 80273a0:	89ab      	ldrh	r3, [r5, #12]
 80273a2:	059a      	lsls	r2, r3, #22
 80273a4:	d402      	bmi.n	80273ac <_vfiprintf_r+0x220>
 80273a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80273a8:	f7ff fcf7 	bl	8026d9a <__retarget_lock_release_recursive>
 80273ac:	89ab      	ldrh	r3, [r5, #12]
 80273ae:	065b      	lsls	r3, r3, #25
 80273b0:	f53f af12 	bmi.w	80271d8 <_vfiprintf_r+0x4c>
 80273b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80273b6:	e711      	b.n	80271dc <_vfiprintf_r+0x50>
 80273b8:	ab03      	add	r3, sp, #12
 80273ba:	9300      	str	r3, [sp, #0]
 80273bc:	462a      	mov	r2, r5
 80273be:	4b09      	ldr	r3, [pc, #36]	; (80273e4 <_vfiprintf_r+0x258>)
 80273c0:	a904      	add	r1, sp, #16
 80273c2:	4630      	mov	r0, r6
 80273c4:	f000 f880 	bl	80274c8 <_printf_i>
 80273c8:	e7e4      	b.n	8027394 <_vfiprintf_r+0x208>
 80273ca:	bf00      	nop
 80273cc:	0802db88 	.word	0x0802db88
 80273d0:	0802dba8 	.word	0x0802dba8
 80273d4:	0802db68 	.word	0x0802db68
 80273d8:	0802dbc8 	.word	0x0802dbc8
 80273dc:	0802dbd2 	.word	0x0802dbd2
 80273e0:	00000000 	.word	0x00000000
 80273e4:	08027167 	.word	0x08027167
 80273e8:	0802dbce 	.word	0x0802dbce

080273ec <_printf_common>:
 80273ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80273f0:	4616      	mov	r6, r2
 80273f2:	4699      	mov	r9, r3
 80273f4:	688a      	ldr	r2, [r1, #8]
 80273f6:	690b      	ldr	r3, [r1, #16]
 80273f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80273fc:	4293      	cmp	r3, r2
 80273fe:	bfb8      	it	lt
 8027400:	4613      	movlt	r3, r2
 8027402:	6033      	str	r3, [r6, #0]
 8027404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027408:	4607      	mov	r7, r0
 802740a:	460c      	mov	r4, r1
 802740c:	b10a      	cbz	r2, 8027412 <_printf_common+0x26>
 802740e:	3301      	adds	r3, #1
 8027410:	6033      	str	r3, [r6, #0]
 8027412:	6823      	ldr	r3, [r4, #0]
 8027414:	0699      	lsls	r1, r3, #26
 8027416:	bf42      	ittt	mi
 8027418:	6833      	ldrmi	r3, [r6, #0]
 802741a:	3302      	addmi	r3, #2
 802741c:	6033      	strmi	r3, [r6, #0]
 802741e:	6825      	ldr	r5, [r4, #0]
 8027420:	f015 0506 	ands.w	r5, r5, #6
 8027424:	d106      	bne.n	8027434 <_printf_common+0x48>
 8027426:	f104 0a19 	add.w	sl, r4, #25
 802742a:	68e3      	ldr	r3, [r4, #12]
 802742c:	6832      	ldr	r2, [r6, #0]
 802742e:	1a9b      	subs	r3, r3, r2
 8027430:	42ab      	cmp	r3, r5
 8027432:	dc26      	bgt.n	8027482 <_printf_common+0x96>
 8027434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8027438:	1e13      	subs	r3, r2, #0
 802743a:	6822      	ldr	r2, [r4, #0]
 802743c:	bf18      	it	ne
 802743e:	2301      	movne	r3, #1
 8027440:	0692      	lsls	r2, r2, #26
 8027442:	d42b      	bmi.n	802749c <_printf_common+0xb0>
 8027444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027448:	4649      	mov	r1, r9
 802744a:	4638      	mov	r0, r7
 802744c:	47c0      	blx	r8
 802744e:	3001      	adds	r0, #1
 8027450:	d01e      	beq.n	8027490 <_printf_common+0xa4>
 8027452:	6823      	ldr	r3, [r4, #0]
 8027454:	68e5      	ldr	r5, [r4, #12]
 8027456:	6832      	ldr	r2, [r6, #0]
 8027458:	f003 0306 	and.w	r3, r3, #6
 802745c:	2b04      	cmp	r3, #4
 802745e:	bf08      	it	eq
 8027460:	1aad      	subeq	r5, r5, r2
 8027462:	68a3      	ldr	r3, [r4, #8]
 8027464:	6922      	ldr	r2, [r4, #16]
 8027466:	bf0c      	ite	eq
 8027468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802746c:	2500      	movne	r5, #0
 802746e:	4293      	cmp	r3, r2
 8027470:	bfc4      	itt	gt
 8027472:	1a9b      	subgt	r3, r3, r2
 8027474:	18ed      	addgt	r5, r5, r3
 8027476:	2600      	movs	r6, #0
 8027478:	341a      	adds	r4, #26
 802747a:	42b5      	cmp	r5, r6
 802747c:	d11a      	bne.n	80274b4 <_printf_common+0xc8>
 802747e:	2000      	movs	r0, #0
 8027480:	e008      	b.n	8027494 <_printf_common+0xa8>
 8027482:	2301      	movs	r3, #1
 8027484:	4652      	mov	r2, sl
 8027486:	4649      	mov	r1, r9
 8027488:	4638      	mov	r0, r7
 802748a:	47c0      	blx	r8
 802748c:	3001      	adds	r0, #1
 802748e:	d103      	bne.n	8027498 <_printf_common+0xac>
 8027490:	f04f 30ff 	mov.w	r0, #4294967295
 8027494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027498:	3501      	adds	r5, #1
 802749a:	e7c6      	b.n	802742a <_printf_common+0x3e>
 802749c:	18e1      	adds	r1, r4, r3
 802749e:	1c5a      	adds	r2, r3, #1
 80274a0:	2030      	movs	r0, #48	; 0x30
 80274a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80274a6:	4422      	add	r2, r4
 80274a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80274ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80274b0:	3302      	adds	r3, #2
 80274b2:	e7c7      	b.n	8027444 <_printf_common+0x58>
 80274b4:	2301      	movs	r3, #1
 80274b6:	4622      	mov	r2, r4
 80274b8:	4649      	mov	r1, r9
 80274ba:	4638      	mov	r0, r7
 80274bc:	47c0      	blx	r8
 80274be:	3001      	adds	r0, #1
 80274c0:	d0e6      	beq.n	8027490 <_printf_common+0xa4>
 80274c2:	3601      	adds	r6, #1
 80274c4:	e7d9      	b.n	802747a <_printf_common+0x8e>
	...

080274c8 <_printf_i>:
 80274c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80274cc:	7e0f      	ldrb	r7, [r1, #24]
 80274ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80274d0:	2f78      	cmp	r7, #120	; 0x78
 80274d2:	4691      	mov	r9, r2
 80274d4:	4680      	mov	r8, r0
 80274d6:	460c      	mov	r4, r1
 80274d8:	469a      	mov	sl, r3
 80274da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80274de:	d807      	bhi.n	80274f0 <_printf_i+0x28>
 80274e0:	2f62      	cmp	r7, #98	; 0x62
 80274e2:	d80a      	bhi.n	80274fa <_printf_i+0x32>
 80274e4:	2f00      	cmp	r7, #0
 80274e6:	f000 80d8 	beq.w	802769a <_printf_i+0x1d2>
 80274ea:	2f58      	cmp	r7, #88	; 0x58
 80274ec:	f000 80a3 	beq.w	8027636 <_printf_i+0x16e>
 80274f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80274f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80274f8:	e03a      	b.n	8027570 <_printf_i+0xa8>
 80274fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80274fe:	2b15      	cmp	r3, #21
 8027500:	d8f6      	bhi.n	80274f0 <_printf_i+0x28>
 8027502:	a101      	add	r1, pc, #4	; (adr r1, 8027508 <_printf_i+0x40>)
 8027504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027508:	08027561 	.word	0x08027561
 802750c:	08027575 	.word	0x08027575
 8027510:	080274f1 	.word	0x080274f1
 8027514:	080274f1 	.word	0x080274f1
 8027518:	080274f1 	.word	0x080274f1
 802751c:	080274f1 	.word	0x080274f1
 8027520:	08027575 	.word	0x08027575
 8027524:	080274f1 	.word	0x080274f1
 8027528:	080274f1 	.word	0x080274f1
 802752c:	080274f1 	.word	0x080274f1
 8027530:	080274f1 	.word	0x080274f1
 8027534:	08027681 	.word	0x08027681
 8027538:	080275a5 	.word	0x080275a5
 802753c:	08027663 	.word	0x08027663
 8027540:	080274f1 	.word	0x080274f1
 8027544:	080274f1 	.word	0x080274f1
 8027548:	080276a3 	.word	0x080276a3
 802754c:	080274f1 	.word	0x080274f1
 8027550:	080275a5 	.word	0x080275a5
 8027554:	080274f1 	.word	0x080274f1
 8027558:	080274f1 	.word	0x080274f1
 802755c:	0802766b 	.word	0x0802766b
 8027560:	682b      	ldr	r3, [r5, #0]
 8027562:	1d1a      	adds	r2, r3, #4
 8027564:	681b      	ldr	r3, [r3, #0]
 8027566:	602a      	str	r2, [r5, #0]
 8027568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802756c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027570:	2301      	movs	r3, #1
 8027572:	e0a3      	b.n	80276bc <_printf_i+0x1f4>
 8027574:	6820      	ldr	r0, [r4, #0]
 8027576:	6829      	ldr	r1, [r5, #0]
 8027578:	0606      	lsls	r6, r0, #24
 802757a:	f101 0304 	add.w	r3, r1, #4
 802757e:	d50a      	bpl.n	8027596 <_printf_i+0xce>
 8027580:	680e      	ldr	r6, [r1, #0]
 8027582:	602b      	str	r3, [r5, #0]
 8027584:	2e00      	cmp	r6, #0
 8027586:	da03      	bge.n	8027590 <_printf_i+0xc8>
 8027588:	232d      	movs	r3, #45	; 0x2d
 802758a:	4276      	negs	r6, r6
 802758c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027590:	485e      	ldr	r0, [pc, #376]	; (802770c <_printf_i+0x244>)
 8027592:	230a      	movs	r3, #10
 8027594:	e019      	b.n	80275ca <_printf_i+0x102>
 8027596:	680e      	ldr	r6, [r1, #0]
 8027598:	602b      	str	r3, [r5, #0]
 802759a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802759e:	bf18      	it	ne
 80275a0:	b236      	sxthne	r6, r6
 80275a2:	e7ef      	b.n	8027584 <_printf_i+0xbc>
 80275a4:	682b      	ldr	r3, [r5, #0]
 80275a6:	6820      	ldr	r0, [r4, #0]
 80275a8:	1d19      	adds	r1, r3, #4
 80275aa:	6029      	str	r1, [r5, #0]
 80275ac:	0601      	lsls	r1, r0, #24
 80275ae:	d501      	bpl.n	80275b4 <_printf_i+0xec>
 80275b0:	681e      	ldr	r6, [r3, #0]
 80275b2:	e002      	b.n	80275ba <_printf_i+0xf2>
 80275b4:	0646      	lsls	r6, r0, #25
 80275b6:	d5fb      	bpl.n	80275b0 <_printf_i+0xe8>
 80275b8:	881e      	ldrh	r6, [r3, #0]
 80275ba:	4854      	ldr	r0, [pc, #336]	; (802770c <_printf_i+0x244>)
 80275bc:	2f6f      	cmp	r7, #111	; 0x6f
 80275be:	bf0c      	ite	eq
 80275c0:	2308      	moveq	r3, #8
 80275c2:	230a      	movne	r3, #10
 80275c4:	2100      	movs	r1, #0
 80275c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80275ca:	6865      	ldr	r5, [r4, #4]
 80275cc:	60a5      	str	r5, [r4, #8]
 80275ce:	2d00      	cmp	r5, #0
 80275d0:	bfa2      	ittt	ge
 80275d2:	6821      	ldrge	r1, [r4, #0]
 80275d4:	f021 0104 	bicge.w	r1, r1, #4
 80275d8:	6021      	strge	r1, [r4, #0]
 80275da:	b90e      	cbnz	r6, 80275e0 <_printf_i+0x118>
 80275dc:	2d00      	cmp	r5, #0
 80275de:	d04d      	beq.n	802767c <_printf_i+0x1b4>
 80275e0:	4615      	mov	r5, r2
 80275e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80275e6:	fb03 6711 	mls	r7, r3, r1, r6
 80275ea:	5dc7      	ldrb	r7, [r0, r7]
 80275ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80275f0:	4637      	mov	r7, r6
 80275f2:	42bb      	cmp	r3, r7
 80275f4:	460e      	mov	r6, r1
 80275f6:	d9f4      	bls.n	80275e2 <_printf_i+0x11a>
 80275f8:	2b08      	cmp	r3, #8
 80275fa:	d10b      	bne.n	8027614 <_printf_i+0x14c>
 80275fc:	6823      	ldr	r3, [r4, #0]
 80275fe:	07de      	lsls	r6, r3, #31
 8027600:	d508      	bpl.n	8027614 <_printf_i+0x14c>
 8027602:	6923      	ldr	r3, [r4, #16]
 8027604:	6861      	ldr	r1, [r4, #4]
 8027606:	4299      	cmp	r1, r3
 8027608:	bfde      	ittt	le
 802760a:	2330      	movle	r3, #48	; 0x30
 802760c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027614:	1b52      	subs	r2, r2, r5
 8027616:	6122      	str	r2, [r4, #16]
 8027618:	f8cd a000 	str.w	sl, [sp]
 802761c:	464b      	mov	r3, r9
 802761e:	aa03      	add	r2, sp, #12
 8027620:	4621      	mov	r1, r4
 8027622:	4640      	mov	r0, r8
 8027624:	f7ff fee2 	bl	80273ec <_printf_common>
 8027628:	3001      	adds	r0, #1
 802762a:	d14c      	bne.n	80276c6 <_printf_i+0x1fe>
 802762c:	f04f 30ff 	mov.w	r0, #4294967295
 8027630:	b004      	add	sp, #16
 8027632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027636:	4835      	ldr	r0, [pc, #212]	; (802770c <_printf_i+0x244>)
 8027638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802763c:	6829      	ldr	r1, [r5, #0]
 802763e:	6823      	ldr	r3, [r4, #0]
 8027640:	f851 6b04 	ldr.w	r6, [r1], #4
 8027644:	6029      	str	r1, [r5, #0]
 8027646:	061d      	lsls	r5, r3, #24
 8027648:	d514      	bpl.n	8027674 <_printf_i+0x1ac>
 802764a:	07df      	lsls	r7, r3, #31
 802764c:	bf44      	itt	mi
 802764e:	f043 0320 	orrmi.w	r3, r3, #32
 8027652:	6023      	strmi	r3, [r4, #0]
 8027654:	b91e      	cbnz	r6, 802765e <_printf_i+0x196>
 8027656:	6823      	ldr	r3, [r4, #0]
 8027658:	f023 0320 	bic.w	r3, r3, #32
 802765c:	6023      	str	r3, [r4, #0]
 802765e:	2310      	movs	r3, #16
 8027660:	e7b0      	b.n	80275c4 <_printf_i+0xfc>
 8027662:	6823      	ldr	r3, [r4, #0]
 8027664:	f043 0320 	orr.w	r3, r3, #32
 8027668:	6023      	str	r3, [r4, #0]
 802766a:	2378      	movs	r3, #120	; 0x78
 802766c:	4828      	ldr	r0, [pc, #160]	; (8027710 <_printf_i+0x248>)
 802766e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027672:	e7e3      	b.n	802763c <_printf_i+0x174>
 8027674:	0659      	lsls	r1, r3, #25
 8027676:	bf48      	it	mi
 8027678:	b2b6      	uxthmi	r6, r6
 802767a:	e7e6      	b.n	802764a <_printf_i+0x182>
 802767c:	4615      	mov	r5, r2
 802767e:	e7bb      	b.n	80275f8 <_printf_i+0x130>
 8027680:	682b      	ldr	r3, [r5, #0]
 8027682:	6826      	ldr	r6, [r4, #0]
 8027684:	6961      	ldr	r1, [r4, #20]
 8027686:	1d18      	adds	r0, r3, #4
 8027688:	6028      	str	r0, [r5, #0]
 802768a:	0635      	lsls	r5, r6, #24
 802768c:	681b      	ldr	r3, [r3, #0]
 802768e:	d501      	bpl.n	8027694 <_printf_i+0x1cc>
 8027690:	6019      	str	r1, [r3, #0]
 8027692:	e002      	b.n	802769a <_printf_i+0x1d2>
 8027694:	0670      	lsls	r0, r6, #25
 8027696:	d5fb      	bpl.n	8027690 <_printf_i+0x1c8>
 8027698:	8019      	strh	r1, [r3, #0]
 802769a:	2300      	movs	r3, #0
 802769c:	6123      	str	r3, [r4, #16]
 802769e:	4615      	mov	r5, r2
 80276a0:	e7ba      	b.n	8027618 <_printf_i+0x150>
 80276a2:	682b      	ldr	r3, [r5, #0]
 80276a4:	1d1a      	adds	r2, r3, #4
 80276a6:	602a      	str	r2, [r5, #0]
 80276a8:	681d      	ldr	r5, [r3, #0]
 80276aa:	6862      	ldr	r2, [r4, #4]
 80276ac:	2100      	movs	r1, #0
 80276ae:	4628      	mov	r0, r5
 80276b0:	f7d8 fdde 	bl	8000270 <memchr>
 80276b4:	b108      	cbz	r0, 80276ba <_printf_i+0x1f2>
 80276b6:	1b40      	subs	r0, r0, r5
 80276b8:	6060      	str	r0, [r4, #4]
 80276ba:	6863      	ldr	r3, [r4, #4]
 80276bc:	6123      	str	r3, [r4, #16]
 80276be:	2300      	movs	r3, #0
 80276c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80276c4:	e7a8      	b.n	8027618 <_printf_i+0x150>
 80276c6:	6923      	ldr	r3, [r4, #16]
 80276c8:	462a      	mov	r2, r5
 80276ca:	4649      	mov	r1, r9
 80276cc:	4640      	mov	r0, r8
 80276ce:	47d0      	blx	sl
 80276d0:	3001      	adds	r0, #1
 80276d2:	d0ab      	beq.n	802762c <_printf_i+0x164>
 80276d4:	6823      	ldr	r3, [r4, #0]
 80276d6:	079b      	lsls	r3, r3, #30
 80276d8:	d413      	bmi.n	8027702 <_printf_i+0x23a>
 80276da:	68e0      	ldr	r0, [r4, #12]
 80276dc:	9b03      	ldr	r3, [sp, #12]
 80276de:	4298      	cmp	r0, r3
 80276e0:	bfb8      	it	lt
 80276e2:	4618      	movlt	r0, r3
 80276e4:	e7a4      	b.n	8027630 <_printf_i+0x168>
 80276e6:	2301      	movs	r3, #1
 80276e8:	4632      	mov	r2, r6
 80276ea:	4649      	mov	r1, r9
 80276ec:	4640      	mov	r0, r8
 80276ee:	47d0      	blx	sl
 80276f0:	3001      	adds	r0, #1
 80276f2:	d09b      	beq.n	802762c <_printf_i+0x164>
 80276f4:	3501      	adds	r5, #1
 80276f6:	68e3      	ldr	r3, [r4, #12]
 80276f8:	9903      	ldr	r1, [sp, #12]
 80276fa:	1a5b      	subs	r3, r3, r1
 80276fc:	42ab      	cmp	r3, r5
 80276fe:	dcf2      	bgt.n	80276e6 <_printf_i+0x21e>
 8027700:	e7eb      	b.n	80276da <_printf_i+0x212>
 8027702:	2500      	movs	r5, #0
 8027704:	f104 0619 	add.w	r6, r4, #25
 8027708:	e7f5      	b.n	80276f6 <_printf_i+0x22e>
 802770a:	bf00      	nop
 802770c:	0802dbd9 	.word	0x0802dbd9
 8027710:	0802dbea 	.word	0x0802dbea

08027714 <_putc_r>:
 8027714:	b570      	push	{r4, r5, r6, lr}
 8027716:	460d      	mov	r5, r1
 8027718:	4614      	mov	r4, r2
 802771a:	4606      	mov	r6, r0
 802771c:	b118      	cbz	r0, 8027726 <_putc_r+0x12>
 802771e:	6983      	ldr	r3, [r0, #24]
 8027720:	b90b      	cbnz	r3, 8027726 <_putc_r+0x12>
 8027722:	f7ff fa89 	bl	8026c38 <__sinit>
 8027726:	4b1c      	ldr	r3, [pc, #112]	; (8027798 <_putc_r+0x84>)
 8027728:	429c      	cmp	r4, r3
 802772a:	d124      	bne.n	8027776 <_putc_r+0x62>
 802772c:	6874      	ldr	r4, [r6, #4]
 802772e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027730:	07d8      	lsls	r0, r3, #31
 8027732:	d405      	bmi.n	8027740 <_putc_r+0x2c>
 8027734:	89a3      	ldrh	r3, [r4, #12]
 8027736:	0599      	lsls	r1, r3, #22
 8027738:	d402      	bmi.n	8027740 <_putc_r+0x2c>
 802773a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802773c:	f7ff fb2c 	bl	8026d98 <__retarget_lock_acquire_recursive>
 8027740:	68a3      	ldr	r3, [r4, #8]
 8027742:	3b01      	subs	r3, #1
 8027744:	2b00      	cmp	r3, #0
 8027746:	60a3      	str	r3, [r4, #8]
 8027748:	da05      	bge.n	8027756 <_putc_r+0x42>
 802774a:	69a2      	ldr	r2, [r4, #24]
 802774c:	4293      	cmp	r3, r2
 802774e:	db1c      	blt.n	802778a <_putc_r+0x76>
 8027750:	b2eb      	uxtb	r3, r5
 8027752:	2b0a      	cmp	r3, #10
 8027754:	d019      	beq.n	802778a <_putc_r+0x76>
 8027756:	6823      	ldr	r3, [r4, #0]
 8027758:	1c5a      	adds	r2, r3, #1
 802775a:	6022      	str	r2, [r4, #0]
 802775c:	701d      	strb	r5, [r3, #0]
 802775e:	b2ed      	uxtb	r5, r5
 8027760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027762:	07da      	lsls	r2, r3, #31
 8027764:	d405      	bmi.n	8027772 <_putc_r+0x5e>
 8027766:	89a3      	ldrh	r3, [r4, #12]
 8027768:	059b      	lsls	r3, r3, #22
 802776a:	d402      	bmi.n	8027772 <_putc_r+0x5e>
 802776c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802776e:	f7ff fb14 	bl	8026d9a <__retarget_lock_release_recursive>
 8027772:	4628      	mov	r0, r5
 8027774:	bd70      	pop	{r4, r5, r6, pc}
 8027776:	4b09      	ldr	r3, [pc, #36]	; (802779c <_putc_r+0x88>)
 8027778:	429c      	cmp	r4, r3
 802777a:	d101      	bne.n	8027780 <_putc_r+0x6c>
 802777c:	68b4      	ldr	r4, [r6, #8]
 802777e:	e7d6      	b.n	802772e <_putc_r+0x1a>
 8027780:	4b07      	ldr	r3, [pc, #28]	; (80277a0 <_putc_r+0x8c>)
 8027782:	429c      	cmp	r4, r3
 8027784:	bf08      	it	eq
 8027786:	68f4      	ldreq	r4, [r6, #12]
 8027788:	e7d1      	b.n	802772e <_putc_r+0x1a>
 802778a:	4629      	mov	r1, r5
 802778c:	4622      	mov	r2, r4
 802778e:	4630      	mov	r0, r6
 8027790:	f7ff f85a 	bl	8026848 <__swbuf_r>
 8027794:	4605      	mov	r5, r0
 8027796:	e7e3      	b.n	8027760 <_putc_r+0x4c>
 8027798:	0802db88 	.word	0x0802db88
 802779c:	0802dba8 	.word	0x0802dba8
 80277a0:	0802db68 	.word	0x0802db68

080277a4 <__sread>:
 80277a4:	b510      	push	{r4, lr}
 80277a6:	460c      	mov	r4, r1
 80277a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80277ac:	f000 f8cc 	bl	8027948 <_read_r>
 80277b0:	2800      	cmp	r0, #0
 80277b2:	bfab      	itete	ge
 80277b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80277b6:	89a3      	ldrhlt	r3, [r4, #12]
 80277b8:	181b      	addge	r3, r3, r0
 80277ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80277be:	bfac      	ite	ge
 80277c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80277c2:	81a3      	strhlt	r3, [r4, #12]
 80277c4:	bd10      	pop	{r4, pc}

080277c6 <__swrite>:
 80277c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80277ca:	461f      	mov	r7, r3
 80277cc:	898b      	ldrh	r3, [r1, #12]
 80277ce:	05db      	lsls	r3, r3, #23
 80277d0:	4605      	mov	r5, r0
 80277d2:	460c      	mov	r4, r1
 80277d4:	4616      	mov	r6, r2
 80277d6:	d505      	bpl.n	80277e4 <__swrite+0x1e>
 80277d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80277dc:	2302      	movs	r3, #2
 80277de:	2200      	movs	r2, #0
 80277e0:	f000 f870 	bl	80278c4 <_lseek_r>
 80277e4:	89a3      	ldrh	r3, [r4, #12]
 80277e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80277ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80277ee:	81a3      	strh	r3, [r4, #12]
 80277f0:	4632      	mov	r2, r6
 80277f2:	463b      	mov	r3, r7
 80277f4:	4628      	mov	r0, r5
 80277f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80277fa:	f000 b817 	b.w	802782c <_write_r>

080277fe <__sseek>:
 80277fe:	b510      	push	{r4, lr}
 8027800:	460c      	mov	r4, r1
 8027802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027806:	f000 f85d 	bl	80278c4 <_lseek_r>
 802780a:	1c43      	adds	r3, r0, #1
 802780c:	89a3      	ldrh	r3, [r4, #12]
 802780e:	bf15      	itete	ne
 8027810:	6560      	strne	r0, [r4, #84]	; 0x54
 8027812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802781a:	81a3      	strheq	r3, [r4, #12]
 802781c:	bf18      	it	ne
 802781e:	81a3      	strhne	r3, [r4, #12]
 8027820:	bd10      	pop	{r4, pc}

08027822 <__sclose>:
 8027822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027826:	f000 b81b 	b.w	8027860 <_close_r>
	...

0802782c <_write_r>:
 802782c:	b538      	push	{r3, r4, r5, lr}
 802782e:	4d07      	ldr	r5, [pc, #28]	; (802784c <_write_r+0x20>)
 8027830:	4604      	mov	r4, r0
 8027832:	4608      	mov	r0, r1
 8027834:	4611      	mov	r1, r2
 8027836:	2200      	movs	r2, #0
 8027838:	602a      	str	r2, [r5, #0]
 802783a:	461a      	mov	r2, r3
 802783c:	f7f0 ff05 	bl	801864a <_write>
 8027840:	1c43      	adds	r3, r0, #1
 8027842:	d102      	bne.n	802784a <_write_r+0x1e>
 8027844:	682b      	ldr	r3, [r5, #0]
 8027846:	b103      	cbz	r3, 802784a <_write_r+0x1e>
 8027848:	6023      	str	r3, [r4, #0]
 802784a:	bd38      	pop	{r3, r4, r5, pc}
 802784c:	20016268 	.word	0x20016268

08027850 <abort>:
 8027850:	b508      	push	{r3, lr}
 8027852:	2006      	movs	r0, #6
 8027854:	f000 f8b2 	bl	80279bc <raise>
 8027858:	2001      	movs	r0, #1
 802785a:	f7f0 fecf 	bl	80185fc <_exit>
	...

08027860 <_close_r>:
 8027860:	b538      	push	{r3, r4, r5, lr}
 8027862:	4d06      	ldr	r5, [pc, #24]	; (802787c <_close_r+0x1c>)
 8027864:	2300      	movs	r3, #0
 8027866:	4604      	mov	r4, r0
 8027868:	4608      	mov	r0, r1
 802786a:	602b      	str	r3, [r5, #0]
 802786c:	f7f0 ff09 	bl	8018682 <_close>
 8027870:	1c43      	adds	r3, r0, #1
 8027872:	d102      	bne.n	802787a <_close_r+0x1a>
 8027874:	682b      	ldr	r3, [r5, #0]
 8027876:	b103      	cbz	r3, 802787a <_close_r+0x1a>
 8027878:	6023      	str	r3, [r4, #0]
 802787a:	bd38      	pop	{r3, r4, r5, pc}
 802787c:	20016268 	.word	0x20016268

08027880 <_fstat_r>:
 8027880:	b538      	push	{r3, r4, r5, lr}
 8027882:	4d07      	ldr	r5, [pc, #28]	; (80278a0 <_fstat_r+0x20>)
 8027884:	2300      	movs	r3, #0
 8027886:	4604      	mov	r4, r0
 8027888:	4608      	mov	r0, r1
 802788a:	4611      	mov	r1, r2
 802788c:	602b      	str	r3, [r5, #0]
 802788e:	f7f0 ff04 	bl	801869a <_fstat>
 8027892:	1c43      	adds	r3, r0, #1
 8027894:	d102      	bne.n	802789c <_fstat_r+0x1c>
 8027896:	682b      	ldr	r3, [r5, #0]
 8027898:	b103      	cbz	r3, 802789c <_fstat_r+0x1c>
 802789a:	6023      	str	r3, [r4, #0]
 802789c:	bd38      	pop	{r3, r4, r5, pc}
 802789e:	bf00      	nop
 80278a0:	20016268 	.word	0x20016268

080278a4 <_isatty_r>:
 80278a4:	b538      	push	{r3, r4, r5, lr}
 80278a6:	4d06      	ldr	r5, [pc, #24]	; (80278c0 <_isatty_r+0x1c>)
 80278a8:	2300      	movs	r3, #0
 80278aa:	4604      	mov	r4, r0
 80278ac:	4608      	mov	r0, r1
 80278ae:	602b      	str	r3, [r5, #0]
 80278b0:	f7f0 ff03 	bl	80186ba <_isatty>
 80278b4:	1c43      	adds	r3, r0, #1
 80278b6:	d102      	bne.n	80278be <_isatty_r+0x1a>
 80278b8:	682b      	ldr	r3, [r5, #0]
 80278ba:	b103      	cbz	r3, 80278be <_isatty_r+0x1a>
 80278bc:	6023      	str	r3, [r4, #0]
 80278be:	bd38      	pop	{r3, r4, r5, pc}
 80278c0:	20016268 	.word	0x20016268

080278c4 <_lseek_r>:
 80278c4:	b538      	push	{r3, r4, r5, lr}
 80278c6:	4d07      	ldr	r5, [pc, #28]	; (80278e4 <_lseek_r+0x20>)
 80278c8:	4604      	mov	r4, r0
 80278ca:	4608      	mov	r0, r1
 80278cc:	4611      	mov	r1, r2
 80278ce:	2200      	movs	r2, #0
 80278d0:	602a      	str	r2, [r5, #0]
 80278d2:	461a      	mov	r2, r3
 80278d4:	f7f0 fefc 	bl	80186d0 <_lseek>
 80278d8:	1c43      	adds	r3, r0, #1
 80278da:	d102      	bne.n	80278e2 <_lseek_r+0x1e>
 80278dc:	682b      	ldr	r3, [r5, #0]
 80278de:	b103      	cbz	r3, 80278e2 <_lseek_r+0x1e>
 80278e0:	6023      	str	r3, [r4, #0]
 80278e2:	bd38      	pop	{r3, r4, r5, pc}
 80278e4:	20016268 	.word	0x20016268

080278e8 <_realloc_r>:
 80278e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80278ec:	4680      	mov	r8, r0
 80278ee:	4614      	mov	r4, r2
 80278f0:	460e      	mov	r6, r1
 80278f2:	b921      	cbnz	r1, 80278fe <_realloc_r+0x16>
 80278f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80278f8:	4611      	mov	r1, r2
 80278fa:	f7fe bd59 	b.w	80263b0 <_malloc_r>
 80278fe:	b92a      	cbnz	r2, 802790c <_realloc_r+0x24>
 8027900:	f7fe fcea 	bl	80262d8 <_free_r>
 8027904:	4625      	mov	r5, r4
 8027906:	4628      	mov	r0, r5
 8027908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802790c:	f000 f872 	bl	80279f4 <_malloc_usable_size_r>
 8027910:	4284      	cmp	r4, r0
 8027912:	4607      	mov	r7, r0
 8027914:	d802      	bhi.n	802791c <_realloc_r+0x34>
 8027916:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802791a:	d812      	bhi.n	8027942 <_realloc_r+0x5a>
 802791c:	4621      	mov	r1, r4
 802791e:	4640      	mov	r0, r8
 8027920:	f7fe fd46 	bl	80263b0 <_malloc_r>
 8027924:	4605      	mov	r5, r0
 8027926:	2800      	cmp	r0, #0
 8027928:	d0ed      	beq.n	8027906 <_realloc_r+0x1e>
 802792a:	42bc      	cmp	r4, r7
 802792c:	4622      	mov	r2, r4
 802792e:	4631      	mov	r1, r6
 8027930:	bf28      	it	cs
 8027932:	463a      	movcs	r2, r7
 8027934:	f7fe fca0 	bl	8026278 <memcpy>
 8027938:	4631      	mov	r1, r6
 802793a:	4640      	mov	r0, r8
 802793c:	f7fe fccc 	bl	80262d8 <_free_r>
 8027940:	e7e1      	b.n	8027906 <_realloc_r+0x1e>
 8027942:	4635      	mov	r5, r6
 8027944:	e7df      	b.n	8027906 <_realloc_r+0x1e>
	...

08027948 <_read_r>:
 8027948:	b538      	push	{r3, r4, r5, lr}
 802794a:	4d07      	ldr	r5, [pc, #28]	; (8027968 <_read_r+0x20>)
 802794c:	4604      	mov	r4, r0
 802794e:	4608      	mov	r0, r1
 8027950:	4611      	mov	r1, r2
 8027952:	2200      	movs	r2, #0
 8027954:	602a      	str	r2, [r5, #0]
 8027956:	461a      	mov	r2, r3
 8027958:	f7f0 fe5a 	bl	8018610 <_read>
 802795c:	1c43      	adds	r3, r0, #1
 802795e:	d102      	bne.n	8027966 <_read_r+0x1e>
 8027960:	682b      	ldr	r3, [r5, #0]
 8027962:	b103      	cbz	r3, 8027966 <_read_r+0x1e>
 8027964:	6023      	str	r3, [r4, #0]
 8027966:	bd38      	pop	{r3, r4, r5, pc}
 8027968:	20016268 	.word	0x20016268

0802796c <_raise_r>:
 802796c:	291f      	cmp	r1, #31
 802796e:	b538      	push	{r3, r4, r5, lr}
 8027970:	4604      	mov	r4, r0
 8027972:	460d      	mov	r5, r1
 8027974:	d904      	bls.n	8027980 <_raise_r+0x14>
 8027976:	2316      	movs	r3, #22
 8027978:	6003      	str	r3, [r0, #0]
 802797a:	f04f 30ff 	mov.w	r0, #4294967295
 802797e:	bd38      	pop	{r3, r4, r5, pc}
 8027980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027982:	b112      	cbz	r2, 802798a <_raise_r+0x1e>
 8027984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027988:	b94b      	cbnz	r3, 802799e <_raise_r+0x32>
 802798a:	4620      	mov	r0, r4
 802798c:	f000 f830 	bl	80279f0 <_getpid_r>
 8027990:	462a      	mov	r2, r5
 8027992:	4601      	mov	r1, r0
 8027994:	4620      	mov	r0, r4
 8027996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802799a:	f000 b817 	b.w	80279cc <_kill_r>
 802799e:	2b01      	cmp	r3, #1
 80279a0:	d00a      	beq.n	80279b8 <_raise_r+0x4c>
 80279a2:	1c59      	adds	r1, r3, #1
 80279a4:	d103      	bne.n	80279ae <_raise_r+0x42>
 80279a6:	2316      	movs	r3, #22
 80279a8:	6003      	str	r3, [r0, #0]
 80279aa:	2001      	movs	r0, #1
 80279ac:	e7e7      	b.n	802797e <_raise_r+0x12>
 80279ae:	2400      	movs	r4, #0
 80279b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80279b4:	4628      	mov	r0, r5
 80279b6:	4798      	blx	r3
 80279b8:	2000      	movs	r0, #0
 80279ba:	e7e0      	b.n	802797e <_raise_r+0x12>

080279bc <raise>:
 80279bc:	4b02      	ldr	r3, [pc, #8]	; (80279c8 <raise+0xc>)
 80279be:	4601      	mov	r1, r0
 80279c0:	6818      	ldr	r0, [r3, #0]
 80279c2:	f7ff bfd3 	b.w	802796c <_raise_r>
 80279c6:	bf00      	nop
 80279c8:	20000340 	.word	0x20000340

080279cc <_kill_r>:
 80279cc:	b538      	push	{r3, r4, r5, lr}
 80279ce:	4d07      	ldr	r5, [pc, #28]	; (80279ec <_kill_r+0x20>)
 80279d0:	2300      	movs	r3, #0
 80279d2:	4604      	mov	r4, r0
 80279d4:	4608      	mov	r0, r1
 80279d6:	4611      	mov	r1, r2
 80279d8:	602b      	str	r3, [r5, #0]
 80279da:	f7f0 fdfd 	bl	80185d8 <_kill>
 80279de:	1c43      	adds	r3, r0, #1
 80279e0:	d102      	bne.n	80279e8 <_kill_r+0x1c>
 80279e2:	682b      	ldr	r3, [r5, #0]
 80279e4:	b103      	cbz	r3, 80279e8 <_kill_r+0x1c>
 80279e6:	6023      	str	r3, [r4, #0]
 80279e8:	bd38      	pop	{r3, r4, r5, pc}
 80279ea:	bf00      	nop
 80279ec:	20016268 	.word	0x20016268

080279f0 <_getpid_r>:
 80279f0:	f7f0 bdea 	b.w	80185c8 <_getpid>

080279f4 <_malloc_usable_size_r>:
 80279f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80279f8:	1f18      	subs	r0, r3, #4
 80279fa:	2b00      	cmp	r3, #0
 80279fc:	bfbc      	itt	lt
 80279fe:	580b      	ldrlt	r3, [r1, r0]
 8027a00:	18c0      	addlt	r0, r0, r3
 8027a02:	4770      	bx	lr

08027a04 <_init>:
 8027a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a06:	bf00      	nop
 8027a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027a0a:	bc08      	pop	{r3}
 8027a0c:	469e      	mov	lr, r3
 8027a0e:	4770      	bx	lr

08027a10 <_fini>:
 8027a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a12:	bf00      	nop
 8027a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027a16:	bc08      	pop	{r3}
 8027a18:	469e      	mov	lr, r3
 8027a1a:	4770      	bx	lr
