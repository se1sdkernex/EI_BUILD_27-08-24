
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021580  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000538c  08021780  08021780  00031780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026b0c  08026b0c  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  08026b0c  08026b0c  00036b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026b14  08026b14  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026b14  08026b14  00036b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026b18  08026b18  00036b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08026b1c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  08026cc0  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  08026d60  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000133cc  200002e4  08026e00  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200136b0  08026e00  000436b0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037ff4  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000082f8  00000000  00000000  00078306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002478  00000000  00000000  00080600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002190  00000000  00000000  00082a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043070  00000000  00000000  00084c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045cbc  00000000  00000000  000c7c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013ba11  00000000  00000000  0010d934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00249345  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a01c  00000000  00000000  00249398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08021768 	.word	0x08021768

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	08021768 	.word	0x08021768

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a50 	.word	0x20000a50
 8000a70:	08021780 	.word	0x08021780
 8000a74:	0802178c 	.word	0x0802178c
 8000a78:	0802179c 	.word	0x0802179c
 8000a7c:	080217ac 	.word	0x080217ac
 8000a80:	080217c0 	.word	0x080217c0
 8000a84:	080217d4 	.word	0x080217d4
 8000a88:	080217e8 	.word	0x080217e8
 8000a8c:	080217f4 	.word	0x080217f4
 8000a90:	20000e38 	.word	0x20000e38

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f018 f967 	bl	8018d78 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f01f fc93 	bl	80203e0 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000b050 	.word	0x2000b050
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f015 f83b 	bl	8015b58 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f015 f82b 	bl	8015b58 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f015 f81a 	bl	8015b58 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a48 	.word	0x20000a48
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f01f fa56 	bl	802002c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00b fcad 	bl	800c4e4 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f011 ffff 	bl	8012b98 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f011 ffae 	bl	8012b18 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f01f fb0c 	bl	80201fc <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f01f fb80 	bl	8020334 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f01f fad6 	bl	80201fc <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f01f fb51 	bl	8020334 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f01f faa4 	bl	80201fc <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f01f fb3d 	bl	8020334 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f01f fa87 	bl	80201fc <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f01f fa79 	bl	80201fc <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f01f fb12 	bl	8020334 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f01f fa59 	bl	80201fc <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f01f fa4b 	bl	80201fc <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f01f fae4 	bl	8020334 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f01f fa26 	bl	80201fc <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f01f fa04 	bl	80201fc <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f01f f9eb 	bl	80201fc <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f01f f9dd 	bl	80201fc <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f01f f9cf 	bl	80201fc <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f01f fa67 	bl	8020334 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00c f8f5 	bl	800d064 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20009410 	.word	0x20009410
 8000e88:	080217fc 	.word	0x080217fc
 8000e8c:	20000644 	.word	0x20000644
 8000e90:	08021814 	.word	0x08021814
 8000e94:	20000a82 	.word	0x20000a82
 8000e98:	08021854 	.word	0x08021854
 8000e9c:	20000645 	.word	0x20000645
 8000ea0:	08021868 	.word	0x08021868
 8000ea4:	20000ab4 	.word	0x20000ab4
 8000ea8:	08021884 	.word	0x08021884
 8000eac:	080218a0 	.word	0x080218a0
 8000eb0:	2000195c 	.word	0x2000195c
 8000eb4:	080218b0 	.word	0x080218b0
 8000eb8:	20000ae6 	.word	0x20000ae6
 8000ebc:	080218c4 	.word	0x080218c4
 8000ec0:	20000b18 	.word	0x20000b18
 8000ec4:	080218d4 	.word	0x080218d4
 8000ec8:	20000b4a 	.word	0x20000b4a
 8000ecc:	20000b7c 	.word	0x20000b7c
 8000ed0:	20000bae 	.word	0x20000bae
 8000ed4:	080218f0 	.word	0x080218f0
 8000ed8:	20000be0 	.word	0x20000be0
 8000edc:	08021900 	.word	0x08021900
 8000ee0:	20000c12 	.word	0x20000c12

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f01f f84e 	bl	801ffbc <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a50 	.word	0x20000a50
 8000f48:	20000e38 	.word	0x20000e38

08000f4c <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	227c      	movs	r2, #124	; 0x7c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f01f f861 	bl	802002c <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8000f76:	e03a      	b.n	8000fee <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8000f78:	f00b fe82 	bl	800cc80 <Get_Eth_Byte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8000f82:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f86:	2bf4      	cmp	r3, #244	; 0xf4
 8000f88:	d002      	beq.n	8000f90 <Process_Hitachi_Packets_Eth+0x44>
 8000f8a:	2bf6      	cmp	r3, #246	; 0xf6
 8000f8c:	d00c      	beq.n	8000fa8 <Process_Hitachi_Packets_Eth+0x5c>
 8000f8e:	e01b      	b.n	8000fc8 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8000f90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000f9a:	3388      	adds	r3, #136	; 0x88
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fa2:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8000fa6:	e01e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8000fa8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fb2:	3388      	adds	r3, #136	; 0x88
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fba:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 8000fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fc2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 8000fc6:	e00e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 8000fc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 8000fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fda:	3388      	adds	r3, #136	; 0x88
 8000fdc:	443b      	add	r3, r7
 8000fde:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fe2:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8000fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 8000fee:	f00b fe33 	bl	800cc58 <Is_There_EI_Data>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1bf      	bne.n	8000f78 <Process_Hitachi_Packets_Eth+0x2c>
 8000ff8:	e000      	b.n	8000ffc <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 8000ffa:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8000ffc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00d      	beq.n	8001020 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 8001004:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d906      	bls.n	800101a <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 800100c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8a3 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001020:	bf00      	nop
 8001022:	3788      	adds	r7, #136	; 0x88
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	; 0x88
 800102c:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	227c      	movs	r2, #124	; 0x7c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f01e fff3 	bl	802002c <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <Process_Hitachi_Packets_Com+0x12c>)
 8001054:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001058:	2b00      	cmp	r3, #0
 800105a:	d074      	beq.n	8001146 <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <Process_Hitachi_Packets_Com+0x130>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00b fa3f 	bl	800c4e4 <HAL_Elaps_Ticks>
 8001066:	4603      	mov	r3, r0
 8001068:	2b13      	cmp	r3, #19
 800106a:	d96e      	bls.n	800114a <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 800106c:	e04a      	b.n	8001104 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 800106e:	2003      	movs	r0, #3
 8001070:	f011 fd92 	bl	8012b98 <Com_Get_Byte>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800107a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800107e:	2b7e      	cmp	r3, #126	; 0x7e
 8001080:	d90a      	bls.n	8001098 <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001082:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	4619      	mov	r1, r3
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <Process_Hitachi_Packets_Com+0x134>)
 800108c:	f01f f8b6 	bl	80201fc <iprintf>
			Traverser = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 8001096:	e03d      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 8001098:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800109c:	2bf4      	cmp	r3, #244	; 0xf4
 800109e:	d002      	beq.n	80010a6 <Process_Hitachi_Packets_Com+0x7e>
 80010a0:	2bf6      	cmp	r3, #246	; 0xf6
 80010a2:	d00c      	beq.n	80010be <Process_Hitachi_Packets_Com+0x96>
 80010a4:	e01b      	b.n	80010de <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80010a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010b0:	3388      	adds	r3, #136	; 0x88
 80010b2:	443b      	add	r3, r7
 80010b4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010b8:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80010bc:	e01e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80010be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010c8:	3388      	adds	r3, #136	; 0x88
 80010ca:	443b      	add	r3, r7
 80010cc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010dc:	e00e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80010de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80010e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010f0:	3388      	adds	r3, #136	; 0x88
 80010f2:	443b      	add	r3, r7
 80010f4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010f8:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 8001104:	2003      	movs	r0, #3
 8001106:	f011 fd07 	bl	8012b18 <Com_DataReady>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ae      	bne.n	800106e <Process_Hitachi_Packets_Com+0x46>
 8001110:	e000      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 8001112:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001114:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001118:	2b00      	cmp	r3, #0
 800111a:	d017      	beq.n	800114c <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 800111c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d906      	bls.n	8001132 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001124:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f817 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f01e ff74 	bl	802002c <memset>
 8001144:	e002      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 800114a:	bf00      	nop
	}
}
 800114c:	3788      	adds	r7, #136	; 0x88
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000304 	.word	0x20000304
 8001158:	2000940c 	.word	0x2000940c
 800115c:	0802193c 	.word	0x0802193c

08001160 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	227c      	movs	r2, #124	; 0x7c
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f01e ff57 	bl	802002c <memset>
	uint16_t des_index=0,src_index=0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001196:	e034      	b.n	8001202 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 8001198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bf0      	cmp	r3, #240	; 0xf0
 80011a4:	d118      	bne.n	80011d8 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80011a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011b4:	3301      	adds	r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011c0:	430a      	orrs	r2, r1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	3390      	adds	r3, #144	; 0x90
 80011c6:	443b      	add	r3, r7
 80011c8:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80011cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011d6:	e00a      	b.n	80011ee <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80011d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	441a      	add	r2, r3
 80011e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3390      	adds	r3, #144	; 0x90
 80011e8:	443b      	add	r3, r7
 80011ea:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80011ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80011f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800120a:	429a      	cmp	r2, r3
 800120c:	d3c4      	bcc.n	8001198 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 800120e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f805 	bl	8001228 <EI_Data_Analyzer>
}
 800121e:	bf00      	nop
 8001220:	3790      	adds	r7, #144	; 0x90
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	2300      	movs	r3, #0
 800123e:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001248:	f011 ffce 	bl	80131e8 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 800124e:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <EI_Data_Analyzer+0x2c4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <EI_Data_Analyzer+0x52>
 8001256:	f011 ffc7 	bl	80131e8 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	4293      	cmp	r3, r2
 8001262:	d90a      	bls.n	800127a <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001264:	48a2      	ldr	r0, [pc, #648]	; (80014f0 <EI_Data_Analyzer+0x2c8>)
 8001266:	f01f f865 	bl	8020334 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800126a:	49a2      	ldr	r1, [pc, #648]	; (80014f4 <EI_Data_Analyzer+0x2cc>)
 800126c:	48a2      	ldr	r0, [pc, #648]	; (80014f8 <EI_Data_Analyzer+0x2d0>)
 800126e:	f7fe ffe7 	bl	8000240 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 81a1 	bne.w	80015bc <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3303      	adds	r3, #3
 800127e:	461a      	mov	r2, r3
 8001280:	2110      	movs	r1, #16
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff f9c6 	bl	8000614 <ExtractBits>
 8001288:	4603      	mov	r3, r0
 800128a:	b29b      	uxth	r3, r3
 800128c:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800128e:	e00b      	b.n	80012a8 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	4a9a      	ldr	r2, [pc, #616]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001294:	3366      	adds	r3, #102	; 0x66
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d009      	beq.n	80012b6 <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	4b94      	ldr	r3, [pc, #592]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	7ffa      	ldrb	r2, [r7, #31]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3ed      	bcc.n	8001290 <EI_Data_Analyzer+0x68>
 80012b4:	e000      	b.n	80012b8 <EI_Data_Analyzer+0x90>
		{
			break;
 80012b6:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	7ffa      	ldrb	r2, [r7, #31]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d309      	bcc.n	80012d8 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80012c4:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8179 	bne.w	80015c0 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	488c      	ldr	r0, [pc, #560]	; (8001504 <EI_Data_Analyzer+0x2dc>)
 80012d2:	f01e ff93 	bl	80201fc <iprintf>
		}
		return;
 80012d6:	e173      	b.n	80015c0 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	2110      	movs	r1, #16
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff f997 	bl	8000614 <ExtractBits>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	4a83      	ldr	r2, [pc, #524]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012f0:	3370      	adds	r3, #112	; 0x70
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d012      	beq.n	8001324 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80012fe:	4882      	ldr	r0, [pc, #520]	; (8001508 <EI_Data_Analyzer+0x2e0>)
 8001300:	f01f f818 	bl	8020334 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	4881      	ldr	r0, [pc, #516]	; (800150c <EI_Data_Analyzer+0x2e4>)
 8001308:	f01e ff78 	bl	80201fc <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001310:	3370      	adds	r3, #112	; 0x70
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	487c      	ldr	r0, [pc, #496]	; (8001510 <EI_Data_Analyzer+0x2e8>)
 800131e:	f01e ff6d 	bl	80201fc <iprintf>
		return;
 8001322:	e14e      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	7fba      	ldrb	r2, [r7, #30]
 800133c:	429a      	cmp	r2, r3
 800133e:	d111      	bne.n	8001364 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001340:	4875      	ldr	r0, [pc, #468]	; (8001518 <EI_Data_Analyzer+0x2f0>)
 8001342:	f01e fff7 	bl	8020334 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	4874      	ldr	r0, [pc, #464]	; (800151c <EI_Data_Analyzer+0x2f4>)
 800134a:	f01e ff57 	bl	80201fc <iprintf>
			Destin_Address = 333;
 800134e:	f240 134d 	movw	r3, #333	; 0x14d
 8001352:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	4870      	ldr	r0, [pc, #448]	; (8001520 <EI_Data_Analyzer+0x2f8>)
 8001360:	f01e ff4c 	bl	80201fc <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	7fba      	ldrb	r2, [r7, #30]
 800136c:	429a      	cmp	r2, r3
 800136e:	d307      	bcc.n	8001380 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001370:	486c      	ldr	r0, [pc, #432]	; (8001524 <EI_Data_Analyzer+0x2fc>)
 8001372:	f01e ffdf 	bl	8020334 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	486b      	ldr	r0, [pc, #428]	; (8001528 <EI_Data_Analyzer+0x300>)
 800137a:	f01e ff3f 	bl	80201fc <iprintf>
		return;
 800137e:	e120      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d121      	bne.n	80013cc <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <EI_Data_Analyzer+0x304>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <EI_Data_Analyzer+0x170>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <EI_Data_Analyzer+0x178>
 8001396:	e007      	b.n	80013a8 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001398:	4865      	ldr	r0, [pc, #404]	; (8001530 <EI_Data_Analyzer+0x308>)
 800139a:	f01e ffcb 	bl	8020334 <puts>
			break;
 800139e:	e015      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 80013a0:	4864      	ldr	r0, [pc, #400]	; (8001534 <EI_Data_Analyzer+0x30c>)
 80013a2:	f01e ffc7 	bl	8020334 <puts>
			break;
 80013a6:	e011      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80013ac:	4413      	add	r3, r2
 80013ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <EI_Data_Analyzer+0x310>)
 80013b8:	f01e ffbc 	bl	8020334 <puts>
 80013bc:	e006      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	4a5a      	ldr	r2, [pc, #360]	; (800152c <EI_Data_Analyzer+0x304>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485d      	ldr	r0, [pc, #372]	; (800153c <EI_Data_Analyzer+0x314>)
 80013c8:	f01e ff18 	bl	80201fc <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	7ffa      	ldrb	r2, [r7, #31]
 80013d6:	4955      	ldr	r1, [pc, #340]	; (800152c <EI_Data_Analyzer+0x304>)
 80013d8:	5c8a      	ldrb	r2, [r1, r2]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d014      	beq.n	8001408 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <EI_Data_Analyzer+0x31c>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	4957      	ldr	r1, [pc, #348]	; (8001548 <EI_Data_Analyzer+0x320>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <EI_Data_Analyzer+0x304>)
 80013f6:	5cd2      	ldrb	r2, [r2, r3]
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <EI_Data_Analyzer+0x324>)
 8001404:	f01e ff96 	bl	8020334 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	4947      	ldr	r1, [pc, #284]	; (800152c <EI_Data_Analyzer+0x304>)
 800140e:	5c89      	ldrb	r1, [r1, r2]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <EI_Data_Analyzer+0x328>)
 8001412:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	4618      	mov	r0, r3
 800141e:	f00b f861 	bl	800c4e4 <HAL_Elaps_Ticks>
 8001422:	4602      	mov	r2, r0
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001428:	338a      	adds	r3, #138	; 0x8a
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d318      	bcc.n	8001464 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	4947      	ldr	r1, [pc, #284]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <EI_Data_Analyzer+0x31c>)
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	493f      	ldr	r1, [pc, #252]	; (8001548 <EI_Data_Analyzer+0x320>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001454:	3366      	adds	r3, #102	; 0x66
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4619      	mov	r1, r3
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <EI_Data_Analyzer+0x330>)
 8001460:	f01e fecc 	bl	80201fc <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	493b      	ldr	r1, [pc, #236]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 800146e:	2281      	movs	r2, #129	; 0x81
 8001470:	2100      	movs	r1, #0
 8001472:	483a      	ldr	r0, [pc, #232]	; (800155c <EI_Data_Analyzer+0x334>)
 8001474:	f01e fdda 	bl	802002c <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <EI_Data_Analyzer+0x334>)
 8001480:	f01e fdac 	bl	801ffdc <memcpy>
	Rx_Print_st.Size = Size;
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <EI_Data_Analyzer+0x334>)
 800148a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3307      	adds	r3, #7
 8001492:	461a      	mov	r2, r3
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff f8bc 	bl	8000614 <ExtractBits>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 80014a0:	7ffa      	ldrb	r2, [r7, #31]
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <EI_Data_Analyzer+0x338>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3303      	adds	r3, #3
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	492b      	ldr	r1, [pc, #172]	; (8001564 <EI_Data_Analyzer+0x33c>)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fc15 	bl	8007cf0 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d870      	bhi.n	80015b0 <EI_Data_Analyzer+0x388>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <EI_Data_Analyzer+0x2ac>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	08001569 	.word	0x08001569
 80014d8:	08001579 	.word	0x08001579
 80014dc:	08001589 	.word	0x08001589
 80014e0:	08001591 	.word	0x08001591
 80014e4:	080015b1 	.word	0x080015b1
 80014e8:	080015a1 	.word	0x080015a1
 80014ec:	20000108 	.word	0x20000108
 80014f0:	08021968 	.word	0x08021968
 80014f4:	080219a8 	.word	0x080219a8
 80014f8:	20000305 	.word	0x20000305
 80014fc:	20000304 	.word	0x20000304
 8001500:	20000645 	.word	0x20000645
 8001504:	080219b4 	.word	0x080219b4
 8001508:	080219f0 	.word	0x080219f0
 800150c:	08021a0c 	.word	0x08021a0c
 8001510:	08021a30 	.word	0x08021a30
 8001514:	2000195c 	.word	0x2000195c
 8001518:	08021a68 	.word	0x08021a68
 800151c:	08021a8c 	.word	0x08021a8c
 8001520:	08021a9c 	.word	0x08021a9c
 8001524:	08021aac 	.word	0x08021aac
 8001528:	08021ae0 	.word	0x08021ae0
 800152c:	20001080 	.word	0x20001080
 8001530:	08021b00 	.word	0x08021b00
 8001534:	08021b10 	.word	0x08021b10
 8001538:	08021b20 	.word	0x08021b20
 800153c:	08021b38 	.word	0x08021b38
 8001540:	20000f7c 	.word	0x20000f7c
 8001544:	20000fa4 	.word	0x20000fa4
 8001548:	20000fcc 	.word	0x20000fcc
 800154c:	08021b5c 	.word	0x08021b5c
 8001550:	20001024 	.word	0x20001024
 8001554:	20001030 	.word	0x20001030
 8001558:	08021b74 	.word	0x08021b74
 800155c:	20001c10 	.word	0x20001c10
 8001560:	20001674 	.word	0x20001674
 8001564:	20000e74 	.word	0x20000e74
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f82d 	bl	80015d0 <Init_Msg_extr>
		break;
 8001576:	e024      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	7ffa      	ldrb	r2, [r7, #31]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fbc3 	bl	8002d0c <Vital_Msg_extr>
		break;
 8001586:	e01c      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <EI_Data_Analyzer+0x3a0>)
 800158a:	f01e fed3 	bl	8020334 <puts>
		break;
 800158e:	e018      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	7ffa      	ldrb	r2, [r7, #31]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f003 fe61 	bl	8005260 <Status_Msg_Extr>
		break;
 800159e:	e010      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	7ffa      	ldrb	r2, [r7, #31]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 f861 	bl	8006670 <Service_Msg_Extr>
		break;
 80015ae:	e008      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <EI_Data_Analyzer+0x3a4>)
 80015b6:	f01e fe21 	bl	80201fc <iprintf>
		break;
 80015ba:	e002      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
			return;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
		return;
 80015c0:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08021b90 	.word	0x08021b90
 80015cc:	08021bb4 	.word	0x08021bb4

080015d0 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80015fa:	f011 fdf5 	bl	80131e8 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	83fb      	strh	r3, [r7, #30]
 8001604:	2300      	movs	r3, #0
 8001606:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b05      	subs	r3, #5
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f00f f9c4 	bl	80109a0 <CalculateDirectReverseCrc>
 8001618:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	3b05      	subs	r3, #5
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	441a      	add	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	2120      	movs	r1, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fff4 	bl	8000614 <ExtractBits>
 800162c:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d013      	beq.n	800165e <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <Init_Msg_extr+0x110>)
 800163a:	3366      	adds	r3, #102	; 0x66
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <Init_Msg_extr+0x114>)
 8001646:	f01e fdd9 	bl	80201fc <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <Init_Msg_extr+0x118>)
 800164e:	f01e fdd5 	bl	80201fc <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <Init_Msg_extr+0x11c>)
 8001656:	f01e fdd1 	bl	80201fc <iprintf>
		return;
 800165a:	f000 be32 	b.w	80022c2 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <Init_Msg_extr+0x120>)
 8001662:	2101      	movs	r1, #1
 8001664:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <Init_Msg_extr+0x124>)
 800166a:	2101      	movs	r1, #1
 800166c:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 021d 	add.w	r2, r3, #29
 8001674:	8bbb      	ldrh	r3, [r7, #28]
 8001676:	2110      	movs	r1, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffcb 	bl	8000614 <ExtractBits>
 800167e:	4603      	mov	r3, r0
 8001680:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <Init_Msg_extr+0x110>)
 8001686:	33f4      	adds	r3, #244	; 0xf4
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	8b7a      	ldrh	r2, [r7, #26]
 8001690:	429a      	cmp	r2, r3
 8001692:	d03d      	beq.n	8001710 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <Init_Msg_extr+0x128>)
 8001698:	2101      	movs	r1, #1
 800169a:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <Init_Msg_extr+0x110>)
 80016a0:	3366      	adds	r3, #102	; 0x66
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <Init_Msg_extr+0x12c>)
 80016ac:	f01e fda6 	bl	80201fc <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 80016b0:	8b7b      	ldrh	r3, [r7, #26]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <Init_Msg_extr+0x130>)
 80016b6:	f01e fda1 	bl	80201fc <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 80016ba:	78bb      	ldrb	r3, [r7, #2]
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <Init_Msg_extr+0x110>)
 80016be:	33f4      	adds	r3, #244	; 0xf4
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <Init_Msg_extr+0x134>)
 80016ca:	f01e fd97 	bl	80201fc <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <Init_Msg_extr+0x138>)
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <Init_Msg_extr+0x13c>)
 80016d2:	f7fe fdb5 	bl	8000240 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01d      	beq.n	8001718 <Init_Msg_extr+0x148>
		{
			return;
 80016dc:	f000 bdf1 	b.w	80022c2 <Init_Msg_extr+0xcf2>
 80016e0:	20000304 	.word	0x20000304
 80016e4:	08021bd0 	.word	0x08021bd0
 80016e8:	08021bec 	.word	0x08021bec
 80016ec:	08021bfc 	.word	0x08021bfc
 80016f0:	20000ff4 	.word	0x20000ff4
 80016f4:	2000100c 	.word	0x2000100c
 80016f8:	20001000 	.word	0x20001000
 80016fc:	08021c0c 	.word	0x08021c0c
 8001700:	08021c44 	.word	0x08021c44
 8001704:	08021c68 	.word	0x08021c68
 8001708:	080219a8 	.word	0x080219a8
 800170c:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001710:	78bb      	ldrb	r3, [r7, #2]
 8001712:	4aab      	ldr	r2, [pc, #684]	; (80019c0 <Init_Msg_extr+0x3f0>)
 8001714:	2100      	movs	r1, #0
 8001716:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800171e:	8bbb      	ldrh	r3, [r7, #28]
 8001720:	2108      	movs	r1, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff76 	bl	8000614 <ExtractBits>
 8001728:	4603      	mov	r3, r0
 800172a:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	4aa5      	ldr	r2, [pc, #660]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001730:	4413      	add	r3, r2
 8001732:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001736:	7e7a      	ldrb	r2, [r7, #25]
 8001738:	429a      	cmp	r2, r3
 800173a:	d01f      	beq.n	800177c <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001740:	3366      	adds	r3, #102	; 0x66
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4619      	mov	r1, r3
 800174a:	489f      	ldr	r0, [pc, #636]	; (80019c8 <Init_Msg_extr+0x3f8>)
 800174c:	f01e fd56 	bl	80201fc <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001754:	4413      	add	r3, r2
 8001756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800175a:	4619      	mov	r1, r3
 800175c:	489b      	ldr	r0, [pc, #620]	; (80019cc <Init_Msg_extr+0x3fc>)
 800175e:	f01e fd4d 	bl	80201fc <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001762:	7e7b      	ldrb	r3, [r7, #25]
 8001764:	4619      	mov	r1, r3
 8001766:	489a      	ldr	r0, [pc, #616]	; (80019d0 <Init_Msg_extr+0x400>)
 8001768:	f01e fd48 	bl	80201fc <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800176c:	4999      	ldr	r1, [pc, #612]	; (80019d4 <Init_Msg_extr+0x404>)
 800176e:	489a      	ldr	r0, [pc, #616]	; (80019d8 <Init_Msg_extr+0x408>)
 8001770:	f7fe fd66 	bl	8000240 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 85a2 	bne.w	80022c0 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	4997      	ldr	r1, [pc, #604]	; (80019dc <Init_Msg_extr+0x40c>)
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	4a95      	ldr	r2, [pc, #596]	; (80019e0 <Init_Msg_extr+0x410>)
 800178a:	2101      	movs	r1, #1
 800178c:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <Init_Msg_extr+0x414>)
 8001792:	2100      	movs	r1, #0
 8001794:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	4993      	ldr	r1, [pc, #588]	; (80019e8 <Init_Msg_extr+0x418>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 80017a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017a4:	3308      	adds	r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <Init_Msg_extr+0x1dc>
 80017aa:	3307      	adds	r3, #7
 80017ac:	10db      	asrs	r3, r3, #3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	4413      	add	r3, r2
 80017b4:	83fb      	strh	r3, [r7, #30]
 80017b6:	8bbb      	ldrh	r3, [r7, #28]
 80017b8:	3308      	adds	r3, #8
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	425a      	negs	r2, r3
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	f002 0207 	and.w	r2, r2, #7
 80017c8:	bf58      	it	pl
 80017ca:	4253      	negpl	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80017d0:	8bfb      	ldrh	r3, [r7, #30]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	441a      	add	r2, r3
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	2110      	movs	r1, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff1a 	bl	8000614 <ExtractBits>
 80017e0:	4602      	mov	r2, r0
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	b291      	uxth	r1, r2
 80017e6:	4a81      	ldr	r2, [pc, #516]	; (80019ec <Init_Msg_extr+0x41c>)
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4413      	add	r3, r2
 80017ec:	3310      	adds	r3, #16
 80017ee:	460a      	mov	r2, r1
 80017f0:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	4a7d      	ldr	r2, [pc, #500]	; (80019ec <Init_Msg_extr+0x41c>)
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	4413      	add	r3, r2
 80017fa:	3310      	adds	r3, #16
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <Init_Msg_extr+0x420>)
 8001802:	f01e fcfb 	bl	80201fc <iprintf>
	BITSTUFFINC(16);
 8001806:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800180a:	3310      	adds	r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <Init_Msg_extr+0x242>
 8001810:	3307      	adds	r3, #7
 8001812:	10db      	asrs	r3, r3, #3
 8001814:	b29a      	uxth	r2, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4413      	add	r3, r2
 800181a:	83fb      	strh	r3, [r7, #30]
 800181c:	8bbb      	ldrh	r3, [r7, #28]
 800181e:	3310      	adds	r3, #16
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	425a      	negs	r2, r3
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	f002 0207 	and.w	r2, r2, #7
 800182e:	bf58      	it	pl
 8001830:	4253      	negpl	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	441a      	add	r2, r3
 800183c:	8bbb      	ldrh	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fee7 	bl	8000614 <ExtractBits>
 8001846:	4602      	mov	r2, r0
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	b291      	uxth	r1, r2
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <Init_Msg_extr+0x41c>)
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	4413      	add	r3, r2
 8001852:	330e      	adds	r3, #14
 8001854:	460a      	mov	r2, r1
 8001856:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <Init_Msg_extr+0x41c>)
 800185c:	015b      	lsls	r3, r3, #5
 800185e:	4413      	add	r3, r2
 8001860:	330e      	adds	r3, #14
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <Init_Msg_extr+0x424>)
 8001868:	f01e fcc8 	bl	80201fc <iprintf>
	BITSTUFFINC(16);
 800186c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001870:	3310      	adds	r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	da00      	bge.n	8001878 <Init_Msg_extr+0x2a8>
 8001876:	3307      	adds	r3, #7
 8001878:	10db      	asrs	r3, r3, #3
 800187a:	b29a      	uxth	r2, r3
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	4413      	add	r3, r2
 8001880:	83fb      	strh	r3, [r7, #30]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	3310      	adds	r3, #16
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	f002 0207 	and.w	r2, r2, #7
 8001894:	bf58      	it	pl
 8001896:	4253      	negpl	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	441a      	add	r2, r3
 80018a2:	8bbb      	ldrh	r3, [r7, #28]
 80018a4:	2108      	movs	r1, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe feb4 	bl	8000614 <ExtractBits>
 80018ac:	4602      	mov	r2, r0
 80018ae:	78bb      	ldrb	r3, [r7, #2]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <Init_Msg_extr+0x41c>)
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	4413      	add	r3, r2
 80018b8:	460a      	mov	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80018bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018c0:	3308      	adds	r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <Init_Msg_extr+0x2f8>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	8bfb      	ldrh	r3, [r7, #30]
 80018ce:	4413      	add	r3, r2
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	8bbb      	ldrh	r3, [r7, #28]
 80018d4:	3308      	adds	r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b21b      	sxth	r3, r3
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	f002 0207 	and.w	r2, r2, #7
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	441a      	add	r2, r3
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	2108      	movs	r1, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe8c 	bl	8000614 <ExtractBits>
 80018fc:	4602      	mov	r2, r0
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <Init_Msg_extr+0x41c>)
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	4413      	add	r3, r2
 8001908:	3301      	adds	r3, #1
 800190a:	460a      	mov	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800190e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001912:	3308      	adds	r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	da00      	bge.n	800191a <Init_Msg_extr+0x34a>
 8001918:	3307      	adds	r3, #7
 800191a:	10db      	asrs	r3, r3, #3
 800191c:	b29a      	uxth	r2, r3
 800191e:	8bfb      	ldrh	r3, [r7, #30]
 8001920:	4413      	add	r3, r2
 8001922:	83fb      	strh	r3, [r7, #30]
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	425a      	negs	r2, r3
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f002 0207 	and.w	r2, r2, #7
 8001936:	bf58      	it	pl
 8001938:	4253      	negpl	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	441a      	add	r2, r3
 8001944:	8bbb      	ldrh	r3, [r7, #28]
 8001946:	2108      	movs	r1, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe63 	bl	8000614 <ExtractBits>
 800194e:	4602      	mov	r2, r0
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <Init_Msg_extr+0x41c>)
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	460a      	mov	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001964:	3308      	adds	r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <Init_Msg_extr+0x39c>
 800196a:	3307      	adds	r3, #7
 800196c:	10db      	asrs	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21b      	sxth	r3, r3
 800197e:	425a      	negs	r2, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f002 0207 	and.w	r2, r2, #7
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	441a      	add	r2, r3
 8001996:	8bbb      	ldrh	r3, [r7, #28]
 8001998:	2110      	movs	r1, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe3a 	bl	8000614 <ExtractBits>
 80019a0:	4602      	mov	r2, r0
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	b291      	uxth	r1, r2
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <Init_Msg_extr+0x428>)
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	460a      	mov	r2, r1
 80019b0:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80019b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b6:	3310      	adds	r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da1f      	bge.n	80019fc <Init_Msg_extr+0x42c>
 80019bc:	3307      	adds	r3, #7
 80019be:	e01d      	b.n	80019fc <Init_Msg_extr+0x42c>
 80019c0:	20001000 	.word	0x20001000
 80019c4:	20000304 	.word	0x20000304
 80019c8:	08021c8c 	.word	0x08021c8c
 80019cc:	08021cb4 	.word	0x08021cb4
 80019d0:	08021cc8 	.word	0x08021cc8
 80019d4:	080219a8 	.word	0x080219a8
 80019d8:	20000305 	.word	0x20000305
 80019dc:	20000fa4 	.word	0x20000fa4
 80019e0:	2000100c 	.word	0x2000100c
 80019e4:	2000108c 	.word	0x2000108c
 80019e8:	20001098 	.word	0x20001098
 80019ec:	20001264 	.word	0x20001264
 80019f0:	08021cdc 	.word	0x08021cdc
 80019f4:	08021ce4 	.word	0x08021ce4
 80019f8:	200011c4 	.word	0x200011c4
 80019fc:	10db      	asrs	r3, r3, #3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8bfb      	ldrh	r3, [r7, #30]
 8001a02:	4413      	add	r3, r2
 8001a04:	83fb      	strh	r3, [r7, #30]
 8001a06:	8bbb      	ldrh	r3, [r7, #28]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	425a      	negs	r2, r3
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f002 0207 	and.w	r2, r2, #7
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <Init_Msg_extr+0x68c>)
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 811d 	beq.w	8001c70 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8bbb      	ldrh	r3, [r7, #28]
 8001a3e:	2108      	movs	r1, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fde7 	bl	8000614 <ExtractBits>
 8001a46:	4603      	mov	r3, r0
 8001a48:	78ba      	ldrb	r2, [r7, #2]
 8001a4a:	b2d8      	uxtb	r0, r3
 8001a4c:	4984      	ldr	r1, [pc, #528]	; (8001c60 <Init_Msg_extr+0x690>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001a5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a62:	3308      	adds	r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <Init_Msg_extr+0x49a>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	4413      	add	r3, r2
 8001a72:	83fb      	strh	r3, [r7, #30]
 8001a74:	8bbb      	ldrh	r3, [r7, #28]
 8001a76:	3308      	adds	r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	425a      	negs	r2, r3
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	f002 0207 	and.w	r2, r2, #7
 8001a86:	bf58      	it	pl
 8001a88:	4253      	negpl	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	441a      	add	r2, r3
 8001a94:	8bbb      	ldrh	r3, [r7, #28]
 8001a96:	2108      	movs	r1, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fdbb 	bl	8000614 <ExtractBits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	78ba      	ldrb	r2, [r7, #2]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	496e      	ldr	r1, [pc, #440]	; (8001c60 <Init_Msg_extr+0x690>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001ab6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aba:	3308      	adds	r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <Init_Msg_extr+0x4f2>
 8001ac0:	3307      	adds	r3, #7
 8001ac2:	10db      	asrs	r3, r3, #3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	4413      	add	r3, r2
 8001aca:	83fb      	strh	r3, [r7, #30]
 8001acc:	8bbb      	ldrh	r3, [r7, #28]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	f002 0207 	and.w	r2, r2, #7
 8001ade:	bf58      	it	pl
 8001ae0:	4253      	negpl	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	441a      	add	r2, r3
 8001aec:	8bbb      	ldrh	r3, [r7, #28]
 8001aee:	2108      	movs	r1, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd8f 	bl	8000614 <ExtractBits>
 8001af6:	4603      	mov	r3, r0
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4958      	ldr	r1, [pc, #352]	; (8001c60 <Init_Msg_extr+0x690>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	3303      	adds	r3, #3
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001b0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b12:	3308      	adds	r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <Init_Msg_extr+0x54a>
 8001b18:	3307      	adds	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8bfb      	ldrh	r3, [r7, #30]
 8001b20:	4413      	add	r3, r2
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	8bbb      	ldrh	r3, [r7, #28]
 8001b26:	3308      	adds	r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	f002 0207 	and.w	r2, r2, #7
 8001b36:	bf58      	it	pl
 8001b38:	4253      	negpl	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	441a      	add	r2, r3
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	2108      	movs	r1, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd63 	bl	8000614 <ExtractBits>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	78ba      	ldrb	r2, [r7, #2]
 8001b52:	b2d8      	uxtb	r0, r3
 8001b54:	4942      	ldr	r1, [pc, #264]	; (8001c60 <Init_Msg_extr+0x690>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001b64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <Init_Msg_extr+0x5a0>
 8001b6e:	3307      	adds	r3, #7
 8001b70:	10db      	asrs	r3, r3, #3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8bfb      	ldrh	r3, [r7, #30]
 8001b76:	4413      	add	r3, r2
 8001b78:	83fb      	strh	r3, [r7, #30]
 8001b7a:	8bbb      	ldrh	r3, [r7, #28]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	425a      	negs	r2, r3
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	f002 0207 	and.w	r2, r2, #7
 8001b8c:	bf58      	it	pl
 8001b8e:	4253      	negpl	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b94:	8bfb      	ldrh	r3, [r7, #30]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	441a      	add	r2, r3
 8001b9a:	8bbb      	ldrh	r3, [r7, #28]
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	b2d8      	uxtb	r0, r3
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <Init_Msg_extr+0x690>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da00      	bge.n	8001bc8 <Init_Msg_extr+0x5f8>
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	10db      	asrs	r3, r3, #3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	4413      	add	r3, r2
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	8bbb      	ldrh	r3, [r7, #28]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	425a      	negs	r2, r3
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	f002 0207 	and.w	r2, r2, #7
 8001be4:	bf58      	it	pl
 8001be6:	4253      	negpl	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bec:	8bfb      	ldrh	r3, [r7, #30]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	8bbb      	ldrh	r3, [r7, #28]
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd0c 	bl	8000614 <ExtractBits>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	78ba      	ldrb	r2, [r7, #2]
 8001c00:	b2d8      	uxtb	r0, r3
 8001c02:	4917      	ldr	r1, [pc, #92]	; (8001c60 <Init_Msg_extr+0x690>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3302      	adds	r3, #2
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001c14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da00      	bge.n	8001c20 <Init_Msg_extr+0x650>
 8001c1e:	3307      	adds	r3, #7
 8001c20:	10db      	asrs	r3, r3, #3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	4413      	add	r3, r2
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	425a      	negs	r2, r3
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	f002 0207 	and.w	r2, r2, #7
 8001c3c:	bf58      	it	pl
 8001c3e:	4253      	negpl	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 f860 	bl	8008d0c <IS_MLK_EIPC_TIME_MATCHING>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <Init_Msg_extr+0x698>
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <Init_Msg_extr+0x694>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	54d1      	strb	r1, [r2, r3]
 8001c5a:	e009      	b.n	8001c70 <Init_Msg_extr+0x6a0>
 8001c5c:	200011c4 	.word	0x200011c4
 8001c60:	20001188 	.word	0x20001188
 8001c64:	200010d8 	.word	0x200010d8
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	4aa4      	ldr	r2, [pc, #656]	; (8001efc <Init_Msg_extr+0x92c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c70:	8bfb      	ldrh	r3, [r7, #30]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fcca 	bl	8000614 <ExtractBits>
 8001c80:	4602      	mov	r2, r0
 8001c82:	78bb      	ldrb	r3, [r7, #2]
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	4a9e      	ldr	r2, [pc, #632]	; (8001f00 <Init_Msg_extr+0x930>)
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	460a      	mov	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001c92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c96:	3308      	adds	r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da00      	bge.n	8001c9e <Init_Msg_extr+0x6ce>
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	10db      	asrs	r3, r3, #3
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	83fb      	strh	r3, [r7, #30]
 8001ca8:	8bbb      	ldrh	r3, [r7, #28]
 8001caa:	3308      	adds	r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	425a      	negs	r2, r3
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	f002 0207 	and.w	r2, r2, #7
 8001cba:	bf58      	it	pl
 8001cbc:	4253      	negpl	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	8bbb      	ldrh	r3, [r7, #28]
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fca1 	bl	8000614 <ExtractBits>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	b291      	uxth	r1, r2
 8001cd8:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <Init_Msg_extr+0x930>)
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	4413      	add	r3, r2
 8001cde:	3312      	adds	r3, #18
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001ce4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce8:	3310      	adds	r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da00      	bge.n	8001cf0 <Init_Msg_extr+0x720>
 8001cee:	3307      	adds	r3, #7
 8001cf0:	10db      	asrs	r3, r3, #3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	f002 0207 	and.w	r2, r2, #7
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <Init_Msg_extr+0x930>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1d18      	adds	r0, r3, #4
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2206      	movs	r2, #6
 8001d26:	4619      	mov	r1, r3
 8001d28:	f01e f958 	bl	801ffdc <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001d2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d30:	3310      	adds	r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <Init_Msg_extr+0x768>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8bfb      	ldrh	r3, [r7, #30]
 8001d3e:	4413      	add	r3, r2
 8001d40:	83fb      	strh	r3, [r7, #30]
 8001d42:	8bbb      	ldrh	r3, [r7, #28]
 8001d44:	3310      	adds	r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	f002 0207 	and.w	r2, r2, #7
 8001d54:	bf58      	it	pl
 8001d56:	4253      	negpl	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d60:	3310      	adds	r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da00      	bge.n	8001d68 <Init_Msg_extr+0x798>
 8001d66:	3307      	adds	r3, #7
 8001d68:	10db      	asrs	r3, r3, #3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	4413      	add	r3, r2
 8001d70:	83fb      	strh	r3, [r7, #30]
 8001d72:	8bbb      	ldrh	r3, [r7, #28]
 8001d74:	3310      	adds	r3, #16
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	f002 0207 	and.w	r2, r2, #7
 8001d84:	bf58      	it	pl
 8001d86:	4253      	negpl	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d90:	3310      	adds	r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <Init_Msg_extr+0x7c8>
 8001d96:	3307      	adds	r3, #7
 8001d98:	10db      	asrs	r3, r3, #3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	8bfb      	ldrh	r3, [r7, #30]
 8001d9e:	4413      	add	r3, r2
 8001da0:	83fb      	strh	r3, [r7, #30]
 8001da2:	8bbb      	ldrh	r3, [r7, #28]
 8001da4:	3310      	adds	r3, #16
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	f002 0207 	and.w	r2, r2, #7
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001dbc:	8bfb      	ldrh	r3, [r7, #30]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	8bbb      	ldrh	r3, [r7, #28]
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fc24 	bl	8000614 <ExtractBits>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	b291      	uxth	r1, r2
 8001dd2:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <Init_Msg_extr+0x930>)
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3314      	adds	r3, #20
 8001dda:	460a      	mov	r2, r1
 8001ddc:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001dde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001de2:	3310      	adds	r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da00      	bge.n	8001dea <Init_Msg_extr+0x81a>
 8001de8:	3307      	adds	r3, #7
 8001dea:	10db      	asrs	r3, r3, #3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	4413      	add	r3, r2
 8001df2:	83fb      	strh	r3, [r7, #30]
 8001df4:	8bbb      	ldrh	r3, [r7, #28]
 8001df6:	3310      	adds	r3, #16
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	425a      	negs	r2, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	f002 0207 	and.w	r2, r2, #7
 8001e06:	bf58      	it	pl
 8001e08:	4253      	negpl	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	441a      	add	r2, r3
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	2110      	movs	r1, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbfb 	bl	8000614 <ExtractBits>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	b291      	uxth	r1, r2
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	4413      	add	r3, r2
 8001e2a:	3316      	adds	r3, #22
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001e30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e34:	3310      	adds	r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da00      	bge.n	8001e3c <Init_Msg_extr+0x86c>
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	10db      	asrs	r3, r3, #3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	4413      	add	r3, r2
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	8bbb      	ldrh	r3, [r7, #28]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	f002 0207 	and.w	r2, r2, #7
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	441a      	add	r2, r3
 8001e66:	8bbb      	ldrh	r3, [r7, #28]
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbd2 	bl	8000614 <ExtractBits>
 8001e70:	4602      	mov	r2, r0
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	b291      	uxth	r1, r2
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	460a      	mov	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001e82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e86:	3310      	adds	r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da00      	bge.n	8001e8e <Init_Msg_extr+0x8be>
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	10db      	asrs	r3, r3, #3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	4413      	add	r3, r2
 8001e96:	83fb      	strh	r3, [r7, #30]
 8001e98:	8bbb      	ldrh	r3, [r7, #28]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f002 0207 	and.w	r2, r2, #7
 8001eaa:	bf58      	it	pl
 8001eac:	4253      	negpl	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	78bc      	ldrb	r4, [r7, #2]
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fba8 	bl	8000614 <ExtractBits>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	490f      	ldr	r1, [pc, #60]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ec8:	0123      	lsls	r3, r4, #4
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <Init_Msg_extr+0x938>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4403      	add	r3, r0
 8001eea:	3308      	adds	r3, #8
 8001eec:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001eee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da09      	bge.n	8001f0c <Init_Msg_extr+0x93c>
 8001ef8:	3307      	adds	r3, #7
 8001efa:	e007      	b.n	8001f0c <Init_Msg_extr+0x93c>
 8001efc:	200010d8 	.word	0x200010d8
 8001f00:	20001264 	.word	0x20001264
 8001f04:	200011c4 	.word	0x200011c4
 8001f08:	20001674 	.word	0x20001674
 8001f0c:	10db      	asrs	r3, r3, #3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	4413      	add	r3, r2
 8001f14:	83fb      	strh	r3, [r7, #30]
 8001f16:	8bbb      	ldrh	r3, [r7, #28]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	425a      	negs	r2, r3
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	f002 0207 	and.w	r2, r2, #7
 8001f28:	bf58      	it	pl
 8001f2a:	4253      	negpl	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f30:	8bfb      	ldrh	r3, [r7, #30]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	8bbb      	ldrh	r3, [r7, #28]
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb6a 	bl	8000614 <ExtractBits>
 8001f40:	4602      	mov	r2, r0
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	b2d1      	uxtb	r1, r2
 8001f46:	4ab1      	ldr	r2, [pc, #708]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	49ad      	ldr	r1, [pc, #692]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	440a      	add	r2, r1
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4aab      	ldr	r2, [pc, #684]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	460a      	mov	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8001f68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da00      	bge.n	8001f74 <Init_Msg_extr+0x9a4>
 8001f72:	3307      	adds	r3, #7
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	83fb      	strh	r3, [r7, #30]
 8001f7e:	8bbb      	ldrh	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	425a      	negs	r2, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	f002 0207 	and.w	r2, r2, #7
 8001f90:	bf58      	it	pl
 8001f92:	4253      	negpl	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f98:	8bfb      	ldrh	r3, [r7, #30]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	b2d1      	uxtb	r1, r2
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <Init_Msg_extr+0xc40>)
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 8001fba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <Init_Msg_extr+0x9f6>
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	10db      	asrs	r3, r3, #3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	4413      	add	r3, r2
 8001fce:	83fb      	strh	r3, [r7, #30]
 8001fd0:	8bbb      	ldrh	r3, [r7, #28]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	425a      	negs	r2, r3
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	f002 0207 	and.w	r2, r2, #7
 8001fe2:	bf58      	it	pl
 8001fe4:	4253      	negpl	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	441a      	add	r2, r3
 8001ff0:	8bbb      	ldrh	r3, [r7, #28]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fb0d 	bl	8000614 <ExtractBits>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	4a82      	ldr	r2, [pc, #520]	; (800220c <Init_Msg_extr+0xc3c>)
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3303      	adds	r3, #3
 8002008:	460a      	mov	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 800200c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002010:	3308      	adds	r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	da00      	bge.n	8002018 <Init_Msg_extr+0xa48>
 8002016:	3307      	adds	r3, #7
 8002018:	10db      	asrs	r3, r3, #3
 800201a:	b29a      	uxth	r2, r3
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	83fb      	strh	r3, [r7, #30]
 8002022:	8bbb      	ldrh	r3, [r7, #28]
 8002024:	3308      	adds	r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21b      	sxth	r3, r3
 800202a:	425a      	negs	r2, r3
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	f002 0207 	and.w	r2, r2, #7
 8002034:	bf58      	it	pl
 8002036:	4253      	negpl	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	4a73      	ldr	r2, [pc, #460]	; (800220c <Init_Msg_extr+0xc3c>)
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	3303      	adds	r3, #3
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	78bb      	ldrb	r3, [r7, #2]
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <Init_Msg_extr+0xc44>)
 800204c:	440b      	add	r3, r1
 800204e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002052:	429a      	cmp	r2, r3
 8002054:	d015      	beq.n	8002082 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 8002056:	4870      	ldr	r0, [pc, #448]	; (8002218 <Init_Msg_extr+0xc48>)
 8002058:	f01e f96c 	bl	8020334 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	4a6d      	ldr	r2, [pc, #436]	; (8002214 <Init_Msg_extr+0xc44>)
 8002060:	4413      	add	r3, r2
 8002062:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002066:	4619      	mov	r1, r3
 8002068:	486c      	ldr	r0, [pc, #432]	; (800221c <Init_Msg_extr+0xc4c>)
 800206a:	f01e f8c7 	bl	80201fc <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	4a66      	ldr	r2, [pc, #408]	; (800220c <Init_Msg_extr+0xc3c>)
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3303      	adds	r3, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <Init_Msg_extr+0xc50>)
 800207e:	f01e f8bd 	bl	80201fc <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	441a      	add	r2, r3
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	2108      	movs	r1, #8
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fac1 	bl	8000614 <ExtractBits>
 8002092:	4602      	mov	r2, r0
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	b2d1      	uxtb	r1, r2
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <Init_Msg_extr+0xc40>)
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	4413      	add	r3, r2
 800209e:	330b      	adds	r3, #11
 80020a0:	460a      	mov	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80020a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a8:	3308      	adds	r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da00      	bge.n	80020b0 <Init_Msg_extr+0xae0>
 80020ae:	3307      	adds	r3, #7
 80020b0:	10db      	asrs	r3, r3, #3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	8bfb      	ldrh	r3, [r7, #30]
 80020b6:	4413      	add	r3, r2
 80020b8:	83fb      	strh	r3, [r7, #30]
 80020ba:	8bbb      	ldrh	r3, [r7, #28]
 80020bc:	3308      	adds	r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	f002 0207 	and.w	r2, r2, #7
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	2108      	movs	r1, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa98 	bl	8000614 <ExtractBits>
 80020e4:	4602      	mov	r2, r0
 80020e6:	78bb      	ldrb	r3, [r7, #2]
 80020e8:	b2d1      	uxtb	r1, r2
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <Init_Msg_extr+0xc40>)
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	4413      	add	r3, r2
 80020f0:	330c      	adds	r3, #12
 80020f2:	460a      	mov	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80020f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020fa:	3308      	adds	r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da00      	bge.n	8002102 <Init_Msg_extr+0xb32>
 8002100:	3307      	adds	r3, #7
 8002102:	10db      	asrs	r3, r3, #3
 8002104:	b29a      	uxth	r2, r3
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	4413      	add	r3, r2
 800210a:	83fb      	strh	r3, [r7, #30]
 800210c:	8bbb      	ldrh	r3, [r7, #28]
 800210e:	3308      	adds	r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b21b      	sxth	r3, r3
 8002114:	425a      	negs	r2, r3
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	f002 0207 	and.w	r2, r2, #7
 800211e:	bf58      	it	pl
 8002120:	4253      	negpl	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 8002126:	78bb      	ldrb	r3, [r7, #2]
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <Init_Msg_extr+0xc40>)
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	4413      	add	r3, r2
 800212e:	330c      	adds	r3, #12
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00c      	beq.n	8002150 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <Init_Msg_extr+0xc40>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	4413      	add	r3, r2
 800213e:	330c      	adds	r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4837      	ldr	r0, [pc, #220]	; (8002224 <Init_Msg_extr+0xc54>)
 8002146:	f01e f859 	bl	80201fc <iprintf>
		printf("This Value has to be \"1\"\n");
 800214a:	4837      	ldr	r0, [pc, #220]	; (8002228 <Init_Msg_extr+0xc58>)
 800214c:	f01e f8f2 	bl	8020334 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	441a      	add	r2, r3
 8002156:	8bbb      	ldrh	r3, [r7, #28]
 8002158:	2108      	movs	r1, #8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa5a 	bl	8000614 <ExtractBits>
 8002160:	4602      	mov	r2, r0
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b2d1      	uxtb	r1, r2
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <Init_Msg_extr+0xc40>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4413      	add	r3, r2
 800216c:	330d      	adds	r3, #13
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002172:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002176:	3308      	adds	r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <Init_Msg_extr+0xbae>
 800217c:	3307      	adds	r3, #7
 800217e:	10db      	asrs	r3, r3, #3
 8002180:	b29a      	uxth	r2, r3
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	4413      	add	r3, r2
 8002186:	83fb      	strh	r3, [r7, #30]
 8002188:	8bbb      	ldrh	r3, [r7, #28]
 800218a:	3308      	adds	r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b21b      	sxth	r3, r3
 8002190:	425a      	negs	r2, r3
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	f002 0207 	and.w	r2, r2, #7
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80021a2:	8bfb      	ldrh	r3, [r7, #30]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	441a      	add	r2, r3
 80021a8:	78bc      	ldrb	r4, [r7, #2]
 80021aa:	8bbb      	ldrh	r3, [r7, #28]
 80021ac:	2120      	movs	r1, #32
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fa30 	bl	8000614 <ExtractBits>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4916      	ldr	r1, [pc, #88]	; (8002210 <Init_Msg_extr+0xc40>)
 80021b8:	0163      	lsls	r3, r4, #5
 80021ba:	440b      	add	r3, r1
 80021bc:	331c      	adds	r3, #28
 80021be:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80021c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c4:	3320      	adds	r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da00      	bge.n	80021cc <Init_Msg_extr+0xbfc>
 80021ca:	3307      	adds	r3, #7
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	4413      	add	r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
 80021d6:	8bbb      	ldrh	r3, [r7, #28]
 80021d8:	3320      	adds	r3, #32
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21b      	sxth	r3, r3
 80021de:	425a      	negs	r2, r3
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	f002 0207 	and.w	r2, r2, #7
 80021e8:	bf58      	it	pl
 80021ea:	4253      	negpl	r3, r2
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80021f0:	787a      	ldrb	r2, [r7, #1]
 80021f2:	78bb      	ldrb	r3, [r7, #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f86c 	bl	80022d4 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80021fc:	78ba      	ldrb	r2, [r7, #2]
 80021fe:	490b      	ldr	r1, [pc, #44]	; (800222c <Init_Msg_extr+0xc5c>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	e012      	b.n	8002230 <Init_Msg_extr+0xc60>
 800220a:	bf00      	nop
 800220c:	200011c4 	.word	0x200011c4
 8002210:	20001264 	.word	0x20001264
 8002214:	20000304 	.word	0x20000304
 8002218:	08021cec 	.word	0x08021cec
 800221c:	08021cb4 	.word	0x08021cb4
 8002220:	08021cc8 	.word	0x08021cc8
 8002224:	08021d08 	.word	0x08021d08
 8002228:	08021d34 	.word	0x08021d34
 800222c:	20001674 	.word	0x20001674
 8002230:	440b      	add	r3, r1
 8002232:	3314      	adds	r3, #20
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002238:	78ba      	ldrb	r2, [r7, #2]
 800223a:	4923      	ldr	r1, [pc, #140]	; (80022c8 <Init_Msg_extr+0xcf8>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3305      	adds	r3, #5
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800224c:	78ba      	ldrb	r2, [r7, #2]
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800225e:	78ba      	ldrb	r2, [r7, #2]
 8002260:	4919      	ldr	r1, [pc, #100]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3301      	adds	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002272:	2218      	movs	r2, #24
 8002274:	2100      	movs	r1, #0
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002278:	f01d fed8 	bl	802002c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800227c:	78ba      	ldrb	r2, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002288:	4413      	add	r3, r2
 800228a:	2218      	movs	r2, #24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002290:	f01d fea4 	bl	801ffdc <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002294:	f240 2001 	movw	r0, #513	; 0x201
 8002298:	f00a fee4 	bl	800d064 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <Init_Msg_extr+0xcf8>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3301      	adds	r3, #1
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80022b0:	78bc      	ldrb	r4, [r7, #2]
 80022b2:	f010 ff99 	bl	80131e8 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <Init_Msg_extr+0xd00>)
 80022ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80022be:	e000      	b.n	80022c2 <Init_Msg_extr+0xcf2>
			return;
 80022c0:	bf00      	nop
}
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	20001674 	.word	0x20001674
 80022cc:	20001854 	.word	0x20001854
 80022d0:	20000e44 	.word	0x20000e44

080022d4 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b097      	sub	sp, #92	; 0x5c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f01d fe9b 	bl	802002c <memset>
	uint32_t Calc_CRC = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002300:	2300      	movs	r3, #0
 8002302:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	441a      	add	r2, r3
 8002310:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002314:	23f4      	movs	r3, #244	; 0xf4
 8002316:	2108      	movs	r1, #8
 8002318:	f7fe fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800231c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Send_Init_Msg+0x54>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	4413      	add	r3, r2
 8002332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002336:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800233a:	3308      	adds	r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21b      	sxth	r3, r3
 8002340:	425a      	negs	r2, r3
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	f002 0207 	and.w	r2, r2, #7
 800234a:	bf58      	it	pl
 800234c:	4253      	negpl	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	441a      	add	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4977      	ldr	r1, [pc, #476]	; (8002540 <Send_Init_Msg+0x26c>)
 8002362:	3366      	adds	r3, #102	; 0x66
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800236e:	2110      	movs	r1, #16
 8002370:	f7fe f9dc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002374:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002378:	3310      	adds	r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	da00      	bge.n	8002380 <Send_Init_Msg+0xac>
 800237e:	3307      	adds	r3, #7
 8002380:	10db      	asrs	r3, r3, #3
 8002382:	b29a      	uxth	r2, r3
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	4413      	add	r3, r2
 800238a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800238e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002392:	3310      	adds	r3, #16
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21b      	sxth	r3, r3
 8002398:	425a      	negs	r2, r3
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	f002 0207 	and.w	r2, r2, #7
 80023a2:	bf58      	it	pl
 80023a4:	4253      	negpl	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80023ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	441a      	add	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4961      	ldr	r1, [pc, #388]	; (8002540 <Send_Init_Msg+0x26c>)
 80023ba:	3370      	adds	r3, #112	; 0x70
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023c6:	2110      	movs	r1, #16
 80023c8:	f7fe f9b0 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80023cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80023d0:	3310      	adds	r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da00      	bge.n	80023d8 <Send_Init_Msg+0x104>
 80023d6:	3307      	adds	r3, #7
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	4413      	add	r3, r2
 80023e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023ea:	3310      	adds	r3, #16
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f002 0207 	and.w	r2, r2, #7
 80023fa:	bf58      	it	pl
 80023fc:	4253      	negpl	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Send_Init_Msg+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d031      	beq.n	8002476 <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <Send_Init_Msg+0x270>)
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d137      	bne.n	800248c <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002422:	4849      	ldr	r0, [pc, #292]	; (8002548 <Send_Init_Msg+0x274>)
 8002424:	f015 fb92 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8002428:	4602      	mov	r2, r0
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <Send_Init_Msg+0x278>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	21c8      	movs	r1, #200	; 0xc8
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002442:	4843      	ldr	r0, [pc, #268]	; (8002550 <Send_Init_Msg+0x27c>)
 8002444:	f01d ff76 	bl	8020334 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002448:	2100      	movs	r1, #0
 800244a:	4842      	ldr	r0, [pc, #264]	; (8002554 <Send_Init_Msg+0x280>)
 800244c:	f01d fed6 	bl	80201fc <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002450:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002454:	4619      	mov	r1, r3
 8002456:	4840      	ldr	r0, [pc, #256]	; (8002558 <Send_Init_Msg+0x284>)
 8002458:	f01d fed0 	bl	80201fc <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800245c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	441a      	add	r2, r3
 8002466:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800246a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800246e:	2108      	movs	r1, #8
 8002470:	f7fe f95c 	bl	800072c <InsertBits>
 8002474:	e00a      	b.n	800248c <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	441a      	add	r2, r3
 8002480:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002484:	2300      	movs	r3, #0
 8002486:	2108      	movs	r1, #8
 8002488:	f7fe f950 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800248c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002490:	3308      	adds	r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	da00      	bge.n	8002498 <Send_Init_Msg+0x1c4>
 8002496:	3307      	adds	r3, #7
 8002498:	10db      	asrs	r3, r3, #3
 800249a:	b29a      	uxth	r2, r3
 800249c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a0:	4413      	add	r3, r2
 80024a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024aa:	3308      	adds	r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	425a      	negs	r2, r3
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	f002 0207 	and.w	r2, r2, #7
 80024ba:	bf58      	it	pl
 80024bc:	4253      	negpl	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <Send_Init_Msg+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <Send_Init_Msg+0x270>)
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	79fa      	ldrb	r2, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d165      	bne.n	80025a8 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80024e2:	4819      	ldr	r0, [pc, #100]	; (8002548 <Send_Init_Msg+0x274>)
 80024e4:	f015 fb32 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <Send_Init_Msg+0x278>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	21c8      	movs	r1, #200	; 0xc8
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <Send_Init_Msg+0x288>)
 8002500:	f01d ff18 	bl	8020334 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <Send_Init_Msg+0x28c>)
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4814      	ldr	r0, [pc, #80]	; (8002564 <Send_Init_Msg+0x290>)
 8002514:	f01d fe72 	bl	80201fc <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002518:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800251c:	4619      	mov	r1, r3
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <Send_Init_Msg+0x294>)
 8002520:	f01d fe6c 	bl	80201fc <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	441a      	add	r2, r3
 800252e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002532:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002536:	2108      	movs	r1, #8
 8002538:	f7fe f8f8 	bl	800072c <InsertBits>
 800253c:	e034      	b.n	80025a8 <Send_Init_Msg+0x2d4>
 800253e:	bf00      	nop
 8002540:	20000304 	.word	0x20000304
 8002544:	2000195c 	.word	0x2000195c
 8002548:	20009088 	.word	0x20009088
 800254c:	51eb851f 	.word	0x51eb851f
 8002550:	08021d50 	.word	0x08021d50
 8002554:	08021d74 	.word	0x08021d74
 8002558:	08021d94 	.word	0x08021d94
 800255c:	08021db4 	.word	0x08021db4
 8002560:	200011c4 	.word	0x200011c4
 8002564:	08021dd8 	.word	0x08021dd8
 8002568:	08021df8 	.word	0x08021df8

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	48c4      	ldr	r0, [pc, #784]	; (800288c <Send_Init_Msg+0x5b8>)
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	4402      	add	r2, r0
 800257e:	3202      	adds	r2, #2
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	3201      	adds	r2, #1
 8002584:	b2d4      	uxtb	r4, r2
 8002586:	48c1      	ldr	r0, [pc, #772]	; (800288c <Send_Init_Msg+0x5b8>)
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	4402      	add	r2, r0
 800258c:	3202      	adds	r2, #2
 800258e:	4620      	mov	r0, r4
 8002590:	7010      	strb	r0, [r2, #0]
 8002592:	4abe      	ldr	r2, [pc, #760]	; (800288c <Send_Init_Msg+0x5b8>)
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025a0:	460a      	mov	r2, r1
 80025a2:	2108      	movs	r1, #8
 80025a4:	f7fe f8c2 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80025a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025ac:	3308      	adds	r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da00      	bge.n	80025b4 <Send_Init_Msg+0x2e0>
 80025b2:	3307      	adds	r3, #7
 80025b4:	10db      	asrs	r3, r3, #3
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025bc:	4413      	add	r3, r2
 80025be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025c6:	3308      	adds	r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	425a      	negs	r2, r3
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	f002 0207 	and.w	r2, r2, #7
 80025d6:	bf58      	it	pl
 80025d8:	4253      	negpl	r3, r2
 80025da:	b21b      	sxth	r3, r3
 80025dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	441a      	add	r2, r3
 80025ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025ee:	2301      	movs	r3, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	f7fe f89b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80025f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025fa:	3308      	adds	r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <Send_Init_Msg+0x32e>
 8002600:	3307      	adds	r3, #7
 8002602:	10db      	asrs	r3, r3, #3
 8002604:	b29a      	uxth	r2, r3
 8002606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260a:	4413      	add	r3, r2
 800260c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002614:	3308      	adds	r3, #8
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21b      	sxth	r3, r3
 800261a:	425a      	negs	r2, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	f002 0207 	and.w	r2, r2, #7
 8002624:	bf58      	it	pl
 8002626:	4253      	negpl	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a96      	ldr	r2, [pc, #600]	; (800288c <Send_Init_Msg+0x5b8>)
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	3306      	adds	r3, #6
 8002638:	2205      	movs	r2, #5
 800263a:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 800263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	441a      	add	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4990      	ldr	r1, [pc, #576]	; (800288c <Send_Init_Msg+0x5b8>)
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3306      	adds	r3, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002656:	2110      	movs	r1, #16
 8002658:	f7fe f868 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800265c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002660:	3310      	adds	r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	da00      	bge.n	8002668 <Send_Init_Msg+0x394>
 8002666:	3307      	adds	r3, #7
 8002668:	10db      	asrs	r3, r3, #3
 800266a:	b29a      	uxth	r2, r3
 800266c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002670:	4413      	add	r3, r2
 8002672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800267a:	3310      	adds	r3, #16
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21b      	sxth	r3, r3
 8002680:	425a      	negs	r2, r3
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	f002 0207 	and.w	r2, r2, #7
 800268a:	bf58      	it	pl
 800268c:	4253      	negpl	r3, r2
 800268e:	b21b      	sxth	r3, r3
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	441a      	add	r2, r3
 800269e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026a2:	2317      	movs	r3, #23
 80026a4:	2108      	movs	r1, #8
 80026a6:	f7fe f841 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026ae:	3308      	adds	r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da00      	bge.n	80026b6 <Send_Init_Msg+0x3e2>
 80026b4:	3307      	adds	r3, #7
 80026b6:	10db      	asrs	r3, r3, #3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026be:	4413      	add	r3, r2
 80026c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026c8:	3308      	adds	r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	425a      	negs	r2, r3
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	f002 0207 	and.w	r2, r2, #7
 80026d8:	bf58      	it	pl
 80026da:	4253      	negpl	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80026e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e6:	f107 020c 	add.w	r2, r7, #12
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026f0:	2301      	movs	r3, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	f7fe f81a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80026f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026fc:	3310      	adds	r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da00      	bge.n	8002704 <Send_Init_Msg+0x430>
 8002702:	3307      	adds	r3, #7
 8002704:	10db      	asrs	r3, r3, #3
 8002706:	b29a      	uxth	r2, r3
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	4413      	add	r3, r2
 800270e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002716:	3310      	adds	r3, #16
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	425a      	negs	r2, r3
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	f002 0207 	and.w	r2, r2, #7
 8002726:	bf58      	it	pl
 8002728:	4253      	negpl	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002734:	f107 020c 	add.w	r2, r7, #12
 8002738:	441a      	add	r2, r3
 800273a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <Send_Init_Msg+0x5bc>)
 8002740:	2120      	movs	r1, #32
 8002742:	f7fd fff3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002746:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800274a:	3320      	adds	r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <Send_Init_Msg+0x47e>
 8002750:	3307      	adds	r3, #7
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	b29a      	uxth	r2, r3
 8002756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800275a:	4413      	add	r3, r2
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002760:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002764:	3320      	adds	r3, #32
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21b      	sxth	r3, r3
 800276a:	425a      	negs	r2, r3
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	f002 0207 	and.w	r2, r2, #7
 8002774:	bf58      	it	pl
 8002776:	4253      	negpl	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 800277e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	441a      	add	r2, r3
 8002788:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800278c:	2300      	movs	r3, #0
 800278e:	2110      	movs	r1, #16
 8002790:	f7fd ffcc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002798:	3310      	adds	r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	da00      	bge.n	80027a0 <Send_Init_Msg+0x4cc>
 800279e:	3307      	adds	r3, #7
 80027a0:	10db      	asrs	r3, r3, #3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	4413      	add	r3, r2
 80027aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027b2:	3310      	adds	r3, #16
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	425a      	negs	r2, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	f002 0207 	and.w	r2, r2, #7
 80027c2:	bf58      	it	pl
 80027c4:	4253      	negpl	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80027cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027da:	2300      	movs	r3, #0
 80027dc:	2110      	movs	r1, #16
 80027de:	f7fd ffa5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e6:	3310      	adds	r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <Send_Init_Msg+0x51a>
 80027ec:	3307      	adds	r3, #7
 80027ee:	10db      	asrs	r3, r3, #3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f6:	4413      	add	r3, r2
 80027f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002800:	3310      	adds	r3, #16
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21b      	sxth	r3, r3
 8002806:	425a      	negs	r2, r3
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	f002 0207 	and.w	r2, r2, #7
 8002810:	bf58      	it	pl
 8002812:	4253      	negpl	r3, r2
 8002814:	b21b      	sxth	r3, r3
 8002816:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	f107 020c 	add.w	r2, r7, #12
 8002822:	441a      	add	r2, r3
 8002824:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002828:	2300      	movs	r3, #0
 800282a:	2110      	movs	r1, #16
 800282c:	f7fd ff7e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002830:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002834:	3310      	adds	r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	da00      	bge.n	800283c <Send_Init_Msg+0x568>
 800283a:	3307      	adds	r3, #7
 800283c:	10db      	asrs	r3, r3, #3
 800283e:	b29a      	uxth	r2, r3
 8002840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002844:	4413      	add	r3, r2
 8002846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800284a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800284e:	3310      	adds	r3, #16
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21b      	sxth	r3, r3
 8002854:	425a      	negs	r2, r3
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	f002 0207 	and.w	r2, r2, #7
 800285e:	bf58      	it	pl
 8002860:	4253      	negpl	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002876:	2300      	movs	r3, #0
 8002878:	2110      	movs	r1, #16
 800287a:	f7fd ff57 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800287e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002882:	3310      	adds	r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	da05      	bge.n	8002894 <Send_Init_Msg+0x5c0>
 8002888:	3307      	adds	r3, #7
 800288a:	e003      	b.n	8002894 <Send_Init_Msg+0x5c0>
 800288c:	200011c4 	.word	0x200011c4
 8002890:	33e232af 	.word	0x33e232af
 8002894:	10db      	asrs	r3, r3, #3
 8002896:	b29a      	uxth	r2, r3
 8002898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800289c:	4413      	add	r3, r2
 800289e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028a6:	3310      	adds	r3, #16
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	425a      	negs	r2, r3
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	f002 0207 	and.w	r2, r2, #7
 80028b6:	bf58      	it	pl
 80028b8:	4253      	negpl	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4ab2      	ldr	r2, [pc, #712]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4ab0      	ldr	r2, [pc, #704]	; (8002b90 <Send_Init_Msg+0x8bc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d90d      	bls.n	80028ee <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4aad      	ldr	r2, [pc, #692]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	3a01      	subs	r2, #1
 80028e2:	49aa      	ldr	r1, [pc, #680]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e00c      	b.n	8002908 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4aa6      	ldr	r2, [pc, #664]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	3308      	adds	r3, #8
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	3201      	adds	r2, #1
 80028fe:	49a3      	ldr	r1, [pc, #652]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	330c      	adds	r3, #12
 8002906:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	441a      	add	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	440b      	add	r3, r1
 800291a:	330c      	adds	r3, #12
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002922:	2118      	movs	r1, #24
 8002924:	f7fd ff02 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	4997      	ldr	r1, [pc, #604]	; (8002b8c <Send_Init_Msg+0x8b8>)
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	330c      	adds	r3, #12
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	4897      	ldr	r0, [pc, #604]	; (8002b94 <Send_Init_Msg+0x8c0>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4403      	add	r3, r0
 8002942:	330c      	adds	r3, #12
 8002944:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002946:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800294a:	3318      	adds	r3, #24
 800294c:	2b00      	cmp	r3, #0
 800294e:	da00      	bge.n	8002952 <Send_Init_Msg+0x67e>
 8002950:	3307      	adds	r3, #7
 8002952:	10db      	asrs	r3, r3, #3
 8002954:	b29a      	uxth	r2, r3
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295a:	4413      	add	r3, r2
 800295c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002960:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002964:	3318      	adds	r3, #24
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	425a      	negs	r2, r3
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	f002 0207 	and.w	r2, r2, #7
 8002974:	bf58      	it	pl
 8002976:	4253      	negpl	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a85      	ldr	r2, [pc, #532]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002982:	5cd2      	ldrb	r2, [r2, r3]
 8002984:	3201      	adds	r2, #1
 8002986:	b2d1      	uxtb	r1, r2
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800298a:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	2bb3      	cmp	r3, #179	; 0xb3
 8002994:	d804      	bhi.n	80029a0 <Send_Init_Msg+0x6cc>
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a7d      	ldr	r2, [pc, #500]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029a4:	210a      	movs	r1, #10
 80029a6:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	441a      	add	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4978      	ldr	r1, [pc, #480]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029bc:	2108      	movs	r1, #8
 80029be:	f7fd feb5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80029c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <Send_Init_Msg+0x6fa>
 80029cc:	3307      	adds	r3, #7
 80029ce:	10db      	asrs	r3, r3, #3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d6:	4413      	add	r3, r2
 80029d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029e0:	3308      	adds	r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	425a      	negs	r2, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	f002 0207 	and.w	r2, r2, #7
 80029f0:	bf58      	it	pl
 80029f2:	4253      	negpl	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	f107 020c 	add.w	r2, r7, #12
 8002a02:	441a      	add	r2, r3
 8002a04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	f7fd fe8e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a14:	3308      	adds	r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da00      	bge.n	8002a1c <Send_Init_Msg+0x748>
 8002a1a:	3307      	adds	r3, #7
 8002a1c:	10db      	asrs	r3, r3, #3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a24:	4413      	add	r3, r2
 8002a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3308      	adds	r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	425a      	negs	r2, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	f002 0207 	and.w	r2, r2, #7
 8002a3e:	bf58      	it	pl
 8002a40:	4253      	negpl	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a56:	2301      	movs	r3, #1
 8002a58:	2108      	movs	r1, #8
 8002a5a:	f7fd fe67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a62:	3308      	adds	r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da00      	bge.n	8002a6a <Send_Init_Msg+0x796>
 8002a68:	3307      	adds	r3, #7
 8002a6a:	10db      	asrs	r3, r3, #3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	4413      	add	r3, r2
 8002a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	425a      	negs	r2, r3
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	f002 0207 	and.w	r2, r2, #7
 8002a8c:	bf58      	it	pl
 8002a8e:	4253      	negpl	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	441a      	add	r2, r3
 8002aa0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	f7fd fe40 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <Send_Init_Msg+0x7e4>
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aca:	3308      	adds	r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	f002 0207 	and.w	r2, r2, #7
 8002ada:	bf58      	it	pl
 8002adc:	4253      	negpl	r3, r2
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <Send_Init_Msg+0x8e0>
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d15b      	bne.n	8002bb4 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002afc:	230c      	movs	r3, #12
 8002afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002b02:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <Send_Init_Msg+0x8cc>)
 8002b04:	f015 f822 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <Send_Init_Msg+0x8d0>)
 8002b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	4613      	mov	r3, r2
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1aca      	subs	r2, r1, r3
 8002b1e:	b2d3      	uxtb	r3, r2
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <Send_Init_Msg+0x8d4>)
 8002b28:	f01d fc04 	bl	8020334 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481c      	ldr	r0, [pc, #112]	; (8002bac <Send_Init_Msg+0x8d8>)
 8002b3c:	f01d fb5e 	bl	80201fc <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d108      	bne.n	8002b66 <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3b02      	subs	r3, #2
 8002b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <Send_Init_Msg+0x8dc>)
 8002b6e:	f01d fb45 	bl	80201fc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b84:	2108      	movs	r1, #8
 8002b86:	f7fd fdd1 	bl	800072c <InsertBits>
	{
 8002b8a:	e022      	b.n	8002bd2 <Send_Init_Msg+0x8fe>
 8002b8c:	200011c4 	.word	0x200011c4
 8002b90:	00ffffef 	.word	0x00ffffef
 8002b94:	20001674 	.word	0x20001674
 8002b98:	2000010c 	.word	0x2000010c
 8002b9c:	2000195c 	.word	0x2000195c
 8002ba0:	20009088 	.word	0x20009088
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	08021e18 	.word	0x08021e18
 8002bac:	08021e48 	.word	0x08021e48
 8002bb0:	08021e64 	.word	0x08021e64
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	f107 020c 	add.w	r2, r7, #12
 8002bbc:	441a      	add	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	494e      	ldr	r1, [pc, #312]	; (8002cfc <Send_Init_Msg+0xa28>)
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002bc8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002bcc:	2108      	movs	r1, #8
 8002bce:	f7fd fdad 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002bd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <Send_Init_Msg+0x90a>
 8002bdc:	3307      	adds	r3, #7
 8002bde:	10db      	asrs	r3, r3, #3
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002be6:	4413      	add	r3, r2
 8002be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	bf58      	it	pl
 8002c02:	4253      	negpl	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	441a      	add	r2, r3
 8002c14:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f7fd fd86 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002c20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c24:	3308      	adds	r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da00      	bge.n	8002c2c <Send_Init_Msg+0x958>
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	10db      	asrs	r3, r3, #3
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c34:	4413      	add	r3, r2
 8002c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	3308      	adds	r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	425a      	negs	r2, r3
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	f002 0207 	and.w	r2, r2, #7
 8002c4e:	bf58      	it	pl
 8002c50:	4253      	negpl	r3, r2
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002c58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00d fe9c 	bl	80109a0 <CalculateDirectReverseCrc>
 8002c68:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	441a      	add	r2, r3
 8002c74:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	f7fd fd56 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002c80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c84:	3320      	adds	r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da00      	bge.n	8002c8c <Send_Init_Msg+0x9b8>
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	10db      	asrs	r3, r3, #3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	4413      	add	r3, r2
 8002c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f002 0207 	and.w	r2, r2, #7
 8002cae:	bf58      	it	pl
 8002cb0:	4253      	negpl	r3, r2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <Send_Init_Msg+0xa0a>
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	79fa      	ldrb	r2, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <Send_Init_Msg+0xa30>)
 8002cd2:	f01d fb2f 	bl	8020334 <puts>
		printf("Not Sending Reply");
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <Send_Init_Msg+0xa34>)
 8002cd8:	f01d fa90 	bl	80201fc <iprintf>
 8002cdc:	e009      	b.n	8002cf2 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fc68 	bl	80075c0 <Process_Sending_Reply>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	375c      	adds	r7, #92	; 0x5c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	2000195c 	.word	0x2000195c
 8002d04:	08021e80 	.word	0x08021e80
 8002d08:	08021e98 	.word	0x08021e98

08002d0c <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b099      	sub	sp, #100	; 0x64
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	70fb      	strb	r3, [r7, #3]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70bb      	strb	r3, [r7, #2]
 8002d22:	4613      	mov	r3, r2
 8002d24:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t Calc_CRC = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Recv_CRC = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t Ticks = HAL_GetTick();
 8002d34:	f010 fa58 	bl	80131e8 <HAL_GetTick>
 8002d38:	64b8      	str	r0, [r7, #72]	; 0x48
	uint8_t noofIP = 0, uc_index = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t LinkEstablishFlag = CLEAR;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f01d f967 	bl	802002c <memset>
	BITSTUFFINIT(0, 0);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002d6a:	49a1      	ldr	r1, [pc, #644]	; (8002ff0 <Vital_Msg_extr+0x2e4>)
 8002d6c:	48a1      	ldr	r0, [pc, #644]	; (8002ff4 <Vital_Msg_extr+0x2e8>)
 8002d6e:	f7fd fa67 	bl	8000240 <strcmp>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8138 	beq.w	8002fea <Vital_Msg_extr+0x2de>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d7a:	4b9f      	ldr	r3, [pc, #636]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02d      	beq.n	8002de2 <Vital_Msg_extr+0xd6>
 8002d86:	4b9c      	ldr	r3, [pc, #624]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	78ba      	ldrb	r2, [r7, #2]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d128      	bne.n	8002de2 <Vital_Msg_extr+0xd6>
	{
		uint32_t Rand_Number = 22;
 8002d90:	2316      	movs	r3, #22
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002d94:	4899      	ldr	r0, [pc, #612]	; (8002ffc <Vital_Msg_extr+0x2f0>)
 8002d96:	f014 fed9 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b98      	ldr	r3, [pc, #608]	; (8003000 <Vital_Msg_extr+0x2f4>)
 8002d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002da2:	0dd9      	lsrs	r1, r3, #23
 8002da4:	460b      	mov	r3, r1
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	1a5b      	subs	r3, r3, r1
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002db0:	4894      	ldr	r0, [pc, #592]	; (8003004 <Vital_Msg_extr+0x2f8>)
 8002db2:	f01d fabf 	bl	8020334 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002db6:	78bb      	ldrb	r3, [r7, #2]
 8002db8:	4a93      	ldr	r2, [pc, #588]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4891      	ldr	r0, [pc, #580]	; (800300c <Vital_Msg_extr+0x300>)
 8002dc6:	f01d fa19 	bl	80201fc <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dcc:	4890      	ldr	r0, [pc, #576]	; (8003010 <Vital_Msg_extr+0x304>)
 8002dce:	f01d fa15 	bl	80201fc <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002dd2:	f107 0208 	add.w	r2, r7, #8
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd8:	2118      	movs	r1, #24
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fca6 	bl	800072c <InsertBits>
	{
 8002de0:	e00b      	b.n	8002dfa <Vital_Msg_extr+0xee>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002de2:	78bb      	ldrb	r3, [r7, #2]
 8002de4:	4a88      	ldr	r2, [pc, #544]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	3308      	adds	r3, #8
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f107 0208 	add.w	r2, r7, #8
 8002df2:	2118      	movs	r1, #24
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd fc99 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e00:	e010      	b.n	8002e24 <Vital_Msg_extr+0x118>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002e02:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	441a      	add	r2, r3
 8002e0a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e0e:	3303      	adds	r3, #3
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	443b      	add	r3, r7
 8002e16:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e1a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e24:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b05      	subs	r3, #5
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dbe8      	blt.n	8002e02 <Vital_Msg_extr+0xf6>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002e30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3303      	adds	r3, #3
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f00d fdad 	bl	80109a0 <CalculateDirectReverseCrc>
 8002e46:	64f8      	str	r0, [r7, #76]	; 0x4c
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	441a      	add	r2, r3
 8002e50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e54:	2120      	movs	r1, #32
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fbdc 	bl	8000614 <ExtractBits>
 8002e5c:	65b8      	str	r0, [r7, #88]	; 0x58

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e62:	429a      	cmp	r2, r3
 8002e64:	f000 80ec 	beq.w	8003040 <Vital_Msg_extr+0x334>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3305      	adds	r3, #5
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2108      	movs	r1, #8
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fbcf 	bl	8000614 <ExtractBits>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <Vital_Msg_extr+0x186>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3305      	adds	r3, #5
 8002e80:	461a      	mov	r2, r3
 8002e82:	2108      	movs	r1, #8
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fd fbc5 	bl	8000614 <ExtractBits>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 8098 	bne.w	8002fc2 <Vital_Msg_extr+0x2b6>
		{
			printf("Tx seq Roll over Detected\n");
 8002e92:	4860      	ldr	r0, [pc, #384]	; (8003014 <Vital_Msg_extr+0x308>)
 8002e94:	f01d fa4e 	bl	8020334 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	223c      	movs	r2, #60	; 0x3c
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f01d f8c3 	bl	802002c <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002ea6:	78bb      	ldrb	r3, [r7, #2]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	3308      	adds	r3, #8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f107 0208 	add.w	r2, r7, #8
 8002eb8:	2118      	movs	r1, #24
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fc36 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002ec6:	e010      	b.n	8002eea <Vital_Msg_extr+0x1de>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ec8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	441a      	add	r2, r3
 8002ed0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	443b      	add	r3, r7
 8002edc:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ee0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002eea:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	3b05      	subs	r3, #5
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbe8      	blt.n	8002ec8 <Vital_Msg_extr+0x1bc>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002ef6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3303      	adds	r3, #3
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00d fd4a 	bl	80109a0 <CalculateDirectReverseCrc>
 8002f0c:	64f8      	str	r0, [r7, #76]	; 0x4c
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	3b05      	subs	r3, #5
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	441a      	add	r2, r3
 8002f16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb79 	bl	8000614 <ExtractBits>
 8002f22:	65b8      	str	r0, [r7, #88]	; 0x58

			if(Calc_CRC == Recv_CRC)
 8002f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d136      	bne.n	8002f9a <Vital_Msg_extr+0x28e>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8002f2c:	483a      	ldr	r0, [pc, #232]	; (8003018 <Vital_Msg_extr+0x30c>)
 8002f2e:	f01d fa01 	bl	8020334 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8002f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f34:	4839      	ldr	r0, [pc, #228]	; (800301c <Vital_Msg_extr+0x310>)
 8002f36:	f01d f961 	bl	80201fc <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f3a:	78bb      	ldrb	r3, [r7, #2]
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4413      	add	r3, r2
 8002f42:	3308      	adds	r3, #8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4835      	ldr	r0, [pc, #212]	; (8003020 <Vital_Msg_extr+0x314>)
 8002f4a:	f01d f957 	bl	80201fc <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f4e:	78bb      	ldrb	r3, [r7, #2]
 8002f50:	492d      	ldr	r1, [pc, #180]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f52:	011a      	lsls	r2, r3, #4
 8002f54:	440a      	add	r2, r1
 8002f56:	3208      	adds	r2, #8
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	492a      	ldr	r1, [pc, #168]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	440b      	add	r3, r1
 8002f62:	3308      	adds	r3, #8
 8002f64:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	482b      	ldr	r0, [pc, #172]	; (8003024 <Vital_Msg_extr+0x318>)
 8002f76:	f01d f941 	bl	80201fc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f7a:	78bb      	ldrb	r3, [r7, #2]
 8002f7c:	78ba      	ldrb	r2, [r7, #2]
 8002f7e:	4922      	ldr	r1, [pc, #136]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	3308      	adds	r3, #8
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	4827      	ldr	r0, [pc, #156]	; (8003028 <Vital_Msg_extr+0x31c>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4403      	add	r3, r0
 8002f94:	3308      	adds	r3, #8
 8002f96:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 8002f98:	e053      	b.n	8003042 <Vital_Msg_extr+0x336>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <Vital_Msg_extr+0x320>)
 8002f9e:	3366      	adds	r3, #102	; 0x66
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4821      	ldr	r0, [pc, #132]	; (8003030 <Vital_Msg_extr+0x324>)
 8002faa:	f01d f927 	bl	80201fc <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fb0:	4820      	ldr	r0, [pc, #128]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fb2:	f01d f923 	bl	80201fc <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fba:	f01d f91f 	bl	80201fc <iprintf>
				return;
 8002fbe:	f000 beac 	b.w	8003d1a <Vital_Msg_extr+0x100e>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fc2:	78bb      	ldrb	r3, [r7, #2]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <Vital_Msg_extr+0x320>)
 8002fc6:	3366      	adds	r3, #102	; 0x66
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481a      	ldr	r0, [pc, #104]	; (800303c <Vital_Msg_extr+0x330>)
 8002fd2:	f01d f913 	bl	80201fc <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fd8:	4816      	ldr	r0, [pc, #88]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fda:	f01d f90f 	bl	80201fc <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fe2:	f01d f90b 	bl	80201fc <iprintf>
			return;
 8002fe6:	f000 be98 	b.w	8003d1a <Vital_Msg_extr+0x100e>
		goto ROLLOVER_VITAL;
 8002fea:	bf00      	nop
 8002fec:	e029      	b.n	8003042 <Vital_Msg_extr+0x336>
 8002fee:	bf00      	nop
 8002ff0:	080219a8 	.word	0x080219a8
 8002ff4:	20000305 	.word	0x20000305
 8002ff8:	2000195c 	.word	0x2000195c
 8002ffc:	20009088 	.word	0x20009088
 8003000:	80008001 	.word	0x80008001
 8003004:	08021eac 	.word	0x08021eac
 8003008:	200011c4 	.word	0x200011c4
 800300c:	08021ecc 	.word	0x08021ecc
 8003010:	08021ef4 	.word	0x08021ef4
 8003014:	08021f1c 	.word	0x08021f1c
 8003018:	08021f38 	.word	0x08021f38
 800301c:	08021f50 	.word	0x08021f50
 8003020:	08021f70 	.word	0x08021f70
 8003024:	08021f90 	.word	0x08021f90
 8003028:	20001674 	.word	0x20001674
 800302c:	20000304 	.word	0x20000304
 8003030:	08021fbc 	.word	0x08021fbc
 8003034:	08021bec 	.word	0x08021bec
 8003038:	08021bfc 	.word	0x08021bfc
 800303c:	08021fdc 	.word	0x08021fdc
		}
	}

	ROLLOVER_VITAL:
 8003040:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003042:	78bb      	ldrb	r3, [r7, #2]
 8003044:	49c3      	ldr	r1, [pc, #780]	; (8003354 <Vital_Msg_extr+0x648>)
 8003046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	49c2      	ldr	r1, [pc, #776]	; (8003358 <Vital_Msg_extr+0x64c>)
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 8003056:	78bb      	ldrb	r3, [r7, #2]
 8003058:	4ac0      	ldr	r2, [pc, #768]	; (800335c <Vital_Msg_extr+0x650>)
 800305a:	2101      	movs	r1, #1
 800305c:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 800305e:	78ba      	ldrb	r2, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4abd      	ldr	r2, [pc, #756]	; (8003360 <Vital_Msg_extr+0x654>)
 800306a:	4413      	add	r3, r2
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f01c ffdb 	bl	802002c <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 8003076:	78ba      	ldrb	r2, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4ab7      	ldr	r2, [pc, #732]	; (8003360 <Vital_Msg_extr+0x654>)
 8003082:	4413      	add	r3, r2
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f01c ffa7 	bl	801ffdc <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 800308e:	78ba      	ldrb	r2, [r7, #2]
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	b298      	uxth	r0, r3
 8003094:	49b2      	ldr	r1, [pc, #712]	; (8003360 <Vital_Msg_extr+0x654>)
 8003096:	4613      	mov	r3, r2
 8003098:	015b      	lsls	r3, r3, #5
 800309a:	4413      	add	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	3340      	adds	r3, #64	; 0x40
 80030a2:	4602      	mov	r2, r0
 80030a4:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80030a6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80030aa:	3308      	adds	r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <Vital_Msg_extr+0x3a6>
 80030b0:	3307      	adds	r3, #7
 80030b2:	10db      	asrs	r3, r3, #3
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030ba:	4413      	add	r3, r2
 80030bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80030c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030c4:	3308      	adds	r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	425a      	negs	r2, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	f002 0207 	and.w	r2, r2, #7
 80030d4:	bf58      	it	pl
 80030d6:	4253      	negpl	r3, r2
 80030d8:	b21b      	sxth	r3, r3
 80030da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80030de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	441a      	add	r2, r3
 80030e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030ea:	2110      	movs	r1, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa91 	bl	8000614 <ExtractBits>
 80030f2:	4603      	mov	r3, r0
 80030f4:	78ba      	ldrb	r2, [r7, #2]
 80030f6:	b298      	uxth	r0, r3
 80030f8:	499a      	ldr	r1, [pc, #616]	; (8003364 <Vital_Msg_extr+0x658>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	440b      	add	r3, r1
 8003104:	3328      	adds	r3, #40	; 0x28
 8003106:	4602      	mov	r2, r0
 8003108:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800310a:	78ba      	ldrb	r2, [r7, #2]
 800310c:	4995      	ldr	r1, [pc, #596]	; (8003364 <Vital_Msg_extr+0x658>)
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	440b      	add	r3, r1
 8003118:	3328      	adds	r3, #40	; 0x28
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4892      	ldr	r0, [pc, #584]	; (8003368 <Vital_Msg_extr+0x65c>)
 8003120:	f01d f86c 	bl	80201fc <iprintf>
	BITSTUFFINC(16);
 8003124:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003128:	3310      	adds	r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	da00      	bge.n	8003130 <Vital_Msg_extr+0x424>
 800312e:	3307      	adds	r3, #7
 8003130:	10db      	asrs	r3, r3, #3
 8003132:	b29a      	uxth	r2, r3
 8003134:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003138:	4413      	add	r3, r2
 800313a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800313e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003142:	3310      	adds	r3, #16
 8003144:	b29b      	uxth	r3, r3
 8003146:	b21b      	sxth	r3, r3
 8003148:	425a      	negs	r2, r3
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	f002 0207 	and.w	r2, r2, #7
 8003152:	bf58      	it	pl
 8003154:	4253      	negpl	r3, r2
 8003156:	b21b      	sxth	r3, r3
 8003158:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800315c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	441a      	add	r2, r3
 8003164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003168:	2110      	movs	r1, #16
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fa52 	bl	8000614 <ExtractBits>
 8003170:	4603      	mov	r3, r0
 8003172:	78ba      	ldrb	r2, [r7, #2]
 8003174:	b298      	uxth	r0, r3
 8003176:	497b      	ldr	r1, [pc, #492]	; (8003364 <Vital_Msg_extr+0x658>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	440b      	add	r3, r1
 8003182:	3326      	adds	r3, #38	; 0x26
 8003184:	4602      	mov	r2, r0
 8003186:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 8003188:	78ba      	ldrb	r2, [r7, #2]
 800318a:	4976      	ldr	r1, [pc, #472]	; (8003364 <Vital_Msg_extr+0x658>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	440b      	add	r3, r1
 8003196:	3326      	adds	r3, #38	; 0x26
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4873      	ldr	r0, [pc, #460]	; (800336c <Vital_Msg_extr+0x660>)
 800319e:	f01d f82d 	bl	80201fc <iprintf>
	BITSTUFFINC(16);
 80031a2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80031a6:	3310      	adds	r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da00      	bge.n	80031ae <Vital_Msg_extr+0x4a2>
 80031ac:	3307      	adds	r3, #7
 80031ae:	10db      	asrs	r3, r3, #3
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031b6:	4413      	add	r3, r2
 80031b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031c0:	3310      	adds	r3, #16
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	425a      	negs	r2, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	f002 0207 	and.w	r2, r2, #7
 80031d0:	bf58      	it	pl
 80031d2:	4253      	negpl	r3, r2
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80031da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	441a      	add	r2, r3
 80031e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031e6:	2108      	movs	r1, #8
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fa13 	bl	8000614 <ExtractBits>
 80031ee:	4602      	mov	r2, r0
 80031f0:	78bb      	ldrb	r3, [r7, #2]
 80031f2:	b2d1      	uxtb	r1, r2
 80031f4:	4a5e      	ldr	r2, [pc, #376]	; (8003370 <Vital_Msg_extr+0x664>)
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4413      	add	r3, r2
 80031fa:	3302      	adds	r3, #2
 80031fc:	460a      	mov	r2, r1
 80031fe:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003200:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003204:	3308      	adds	r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	da00      	bge.n	800320c <Vital_Msg_extr+0x500>
 800320a:	3307      	adds	r3, #7
 800320c:	10db      	asrs	r3, r3, #3
 800320e:	b29a      	uxth	r2, r3
 8003210:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003214:	4413      	add	r3, r2
 8003216:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800321a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800321e:	3308      	adds	r3, #8
 8003220:	b29b      	uxth	r3, r3
 8003222:	b21b      	sxth	r3, r3
 8003224:	425a      	negs	r2, r3
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	f002 0207 	and.w	r2, r2, #7
 800322e:	bf58      	it	pl
 8003230:	4253      	negpl	r3, r2
 8003232:	b21b      	sxth	r3, r3
 8003234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003238:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003244:	2108      	movs	r1, #8
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f9e4 	bl	8000614 <ExtractBits>
 800324c:	4602      	mov	r2, r0
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	b2d1      	uxtb	r1, r2
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <Vital_Msg_extr+0x664>)
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	3301      	adds	r3, #1
 800325a:	460a      	mov	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800325e:	78bb      	ldrb	r3, [r7, #2]
 8003260:	4a43      	ldr	r2, [pc, #268]	; (8003370 <Vital_Msg_extr+0x664>)
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3301      	adds	r3, #1
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d138      	bne.n	80032e0 <Vital_Msg_extr+0x5d4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800326e:	78bb      	ldrb	r3, [r7, #2]
 8003270:	4a40      	ldr	r2, [pc, #256]	; (8003374 <Vital_Msg_extr+0x668>)
 8003272:	3366      	adds	r3, #102	; 0x66
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4619      	mov	r1, r3
 800327c:	483e      	ldr	r0, [pc, #248]	; (8003378 <Vital_Msg_extr+0x66c>)
 800327e:	f01c ffbd 	bl	80201fc <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003282:	78bb      	ldrb	r3, [r7, #2]
 8003284:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <Vital_Msg_extr+0x664>)
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	330c      	adds	r3, #12
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	483a      	ldr	r0, [pc, #232]	; (800337c <Vital_Msg_extr+0x670>)
 8003292:	f01c ffb3 	bl	80201fc <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	4935      	ldr	r1, [pc, #212]	; (8003370 <Vital_Msg_extr+0x664>)
 800329a:	011a      	lsls	r2, r3, #4
 800329c:	440a      	add	r2, r1
 800329e:	320c      	adds	r2, #12
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	3201      	adds	r2, #1
 80032a4:	4932      	ldr	r1, [pc, #200]	; (8003370 <Vital_Msg_extr+0x664>)
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	330c      	adds	r3, #12
 80032ac:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <Vital_Msg_extr+0x664>)
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	330c      	adds	r3, #12
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4830      	ldr	r0, [pc, #192]	; (8003380 <Vital_Msg_extr+0x674>)
 80032be:	f01c ff9d 	bl	80201fc <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	78ba      	ldrb	r2, [r7, #2]
 80032c6:	492a      	ldr	r1, [pc, #168]	; (8003370 <Vital_Msg_extr+0x664>)
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	440b      	add	r3, r1
 80032cc:	330c      	adds	r3, #12
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	482c      	ldr	r0, [pc, #176]	; (8003384 <Vital_Msg_extr+0x678>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4403      	add	r3, r0
 80032dc:	330c      	adds	r3, #12
 80032de:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80032e0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032e4:	3308      	adds	r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da00      	bge.n	80032ec <Vital_Msg_extr+0x5e0>
 80032ea:	3307      	adds	r3, #7
 80032ec:	10db      	asrs	r3, r3, #3
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032f4:	4413      	add	r3, r2
 80032f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032fe:	3308      	adds	r3, #8
 8003300:	b29b      	uxth	r3, r3
 8003302:	b21b      	sxth	r3, r3
 8003304:	425a      	negs	r2, r3
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	f002 0207 	and.w	r2, r2, #7
 800330e:	bf58      	it	pl
 8003310:	4253      	negpl	r3, r2
 8003312:	b21b      	sxth	r3, r3
 8003314:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003318:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	441a      	add	r2, r3
 8003320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003324:	2108      	movs	r1, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f974 	bl	8000614 <ExtractBits>
 800332c:	4603      	mov	r3, r0
 800332e:	78ba      	ldrb	r2, [r7, #2]
 8003330:	b2d8      	uxtb	r0, r3
 8003332:	490c      	ldr	r1, [pc, #48]	; (8003364 <Vital_Msg_extr+0x658>)
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	3302      	adds	r3, #2
 8003340:	4602      	mov	r2, r0
 8003342:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003344:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003348:	3308      	adds	r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	da1c      	bge.n	8003388 <Vital_Msg_extr+0x67c>
 800334e:	3307      	adds	r3, #7
 8003350:	e01a      	b.n	8003388 <Vital_Msg_extr+0x67c>
 8003352:	bf00      	nop
 8003354:	20000fa4 	.word	0x20000fa4
 8003358:	20000fcc 	.word	0x20000fcc
 800335c:	20001018 	.word	0x20001018
 8003360:	2000197c 	.word	0x2000197c
 8003364:	200013a4 	.word	0x200013a4
 8003368:	08021cdc 	.word	0x08021cdc
 800336c:	08021ce4 	.word	0x08021ce4
 8003370:	200011c4 	.word	0x200011c4
 8003374:	20000304 	.word	0x20000304
 8003378:	08021ff0 	.word	0x08021ff0
 800337c:	08022034 	.word	0x08022034
 8003380:	08022044 	.word	0x08022044
 8003384:	20001674 	.word	0x20001674
 8003388:	10db      	asrs	r3, r3, #3
 800338a:	b29a      	uxth	r2, r3
 800338c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003390:	4413      	add	r3, r2
 8003392:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003396:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800339a:	3308      	adds	r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b21b      	sxth	r3, r3
 80033a0:	425a      	negs	r2, r3
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	f002 0207 	and.w	r2, r2, #7
 80033aa:	bf58      	it	pl
 80033ac:	4253      	negpl	r3, r2
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80033b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	441a      	add	r2, r3
 80033bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033c0:	2110      	movs	r1, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f926 	bl	8000614 <ExtractBits>
 80033c8:	4602      	mov	r2, r0
 80033ca:	78bb      	ldrb	r3, [r7, #2]
 80033cc:	b291      	uxth	r1, r2
 80033ce:	4abd      	ldr	r2, [pc, #756]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	460a      	mov	r2, r1
 80033d8:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80033da:	49bb      	ldr	r1, [pc, #748]	; (80036c8 <Vital_Msg_extr+0x9bc>)
 80033dc:	48bb      	ldr	r0, [pc, #748]	; (80036cc <Vital_Msg_extr+0x9c0>)
 80033de:	f7fc ff2f 	bl	8000240 <strcmp>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <Vital_Msg_extr+0x6fc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80033e8:	78bb      	ldrb	r3, [r7, #2]
 80033ea:	4ab6      	ldr	r2, [pc, #728]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	b291      	uxth	r1, r2
 80033fc:	4ab1      	ldr	r2, [pc, #708]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	460a      	mov	r2, r1
 8003406:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003408:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800340c:	3310      	adds	r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	da00      	bge.n	8003414 <Vital_Msg_extr+0x708>
 8003412:	3307      	adds	r3, #7
 8003414:	10db      	asrs	r3, r3, #3
 8003416:	b29a      	uxth	r2, r3
 8003418:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800341c:	4413      	add	r3, r2
 800341e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003422:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003426:	3310      	adds	r3, #16
 8003428:	b29b      	uxth	r3, r3
 800342a:	b21b      	sxth	r3, r3
 800342c:	425a      	negs	r2, r3
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	f002 0207 	and.w	r2, r2, #7
 8003436:	bf58      	it	pl
 8003438:	4253      	negpl	r3, r2
 800343a:	b21b      	sxth	r3, r3
 800343c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003440:	78bb      	ldrb	r3, [r7, #2]
 8003442:	4aa0      	ldr	r2, [pc, #640]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8145 	beq.w	80036e0 <Vital_Msg_extr+0x9d4>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	441a      	add	r2, r3
 800345e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003462:	2108      	movs	r1, #8
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f8d5 	bl	8000614 <ExtractBits>
 800346a:	4603      	mov	r3, r0
 800346c:	78ba      	ldrb	r2, [r7, #2]
 800346e:	b2d8      	uxtb	r0, r3
 8003470:	4997      	ldr	r1, [pc, #604]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	440b      	add	r3, r1
 800347c:	3305      	adds	r3, #5
 800347e:	4602      	mov	r2, r0
 8003480:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003482:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003486:	3308      	adds	r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	da00      	bge.n	800348e <Vital_Msg_extr+0x782>
 800348c:	3307      	adds	r3, #7
 800348e:	10db      	asrs	r3, r3, #3
 8003490:	b29a      	uxth	r2, r3
 8003492:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003496:	4413      	add	r3, r2
 8003498:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800349c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034a0:	3308      	adds	r3, #8
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	425a      	negs	r2, r3
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	f002 0207 	and.w	r2, r2, #7
 80034b0:	bf58      	it	pl
 80034b2:	4253      	negpl	r3, r2
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80034ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	441a      	add	r2, r3
 80034c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034c6:	2108      	movs	r1, #8
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f8a3 	bl	8000614 <ExtractBits>
 80034ce:	4603      	mov	r3, r0
 80034d0:	78ba      	ldrb	r2, [r7, #2]
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	497e      	ldr	r1, [pc, #504]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	4602      	mov	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80034e6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80034ea:	3308      	adds	r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da00      	bge.n	80034f2 <Vital_Msg_extr+0x7e6>
 80034f0:	3307      	adds	r3, #7
 80034f2:	10db      	asrs	r3, r3, #3
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034fa:	4413      	add	r3, r2
 80034fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003500:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003504:	3308      	adds	r3, #8
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21b      	sxth	r3, r3
 800350a:	425a      	negs	r2, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	f002 0207 	and.w	r2, r2, #7
 8003514:	bf58      	it	pl
 8003516:	4253      	negpl	r3, r2
 8003518:	b21b      	sxth	r3, r3
 800351a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800351e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	441a      	add	r2, r3
 8003526:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800352a:	2108      	movs	r1, #8
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f871 	bl	8000614 <ExtractBits>
 8003532:	4603      	mov	r3, r0
 8003534:	78ba      	ldrb	r2, [r7, #2]
 8003536:	b2d8      	uxtb	r0, r3
 8003538:	4965      	ldr	r1, [pc, #404]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	3303      	adds	r3, #3
 8003546:	4602      	mov	r2, r0
 8003548:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 800354a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800354e:	3308      	adds	r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	da00      	bge.n	8003556 <Vital_Msg_extr+0x84a>
 8003554:	3307      	adds	r3, #7
 8003556:	10db      	asrs	r3, r3, #3
 8003558:	b29a      	uxth	r2, r3
 800355a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800355e:	4413      	add	r3, r2
 8003560:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003564:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003568:	3308      	adds	r3, #8
 800356a:	b29b      	uxth	r3, r3
 800356c:	b21b      	sxth	r3, r3
 800356e:	425a      	negs	r2, r3
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	f002 0207 	and.w	r2, r2, #7
 8003578:	bf58      	it	pl
 800357a:	4253      	negpl	r3, r2
 800357c:	b21b      	sxth	r3, r3
 800357e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003582:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	441a      	add	r2, r3
 800358a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800358e:	2108      	movs	r1, #8
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd f83f 	bl	8000614 <ExtractBits>
 8003596:	4603      	mov	r3, r0
 8003598:	78ba      	ldrb	r2, [r7, #2]
 800359a:	b2d8      	uxtb	r0, r3
 800359c:	494c      	ldr	r1, [pc, #304]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	4602      	mov	r2, r0
 80035aa:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 80035ac:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80035b0:	3308      	adds	r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da00      	bge.n	80035b8 <Vital_Msg_extr+0x8ac>
 80035b6:	3307      	adds	r3, #7
 80035b8:	10db      	asrs	r3, r3, #3
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035c0:	4413      	add	r3, r2
 80035c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ca:	3308      	adds	r3, #8
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	425a      	negs	r2, r3
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	f002 0207 	and.w	r2, r2, #7
 80035da:	bf58      	it	pl
 80035dc:	4253      	negpl	r3, r2
 80035de:	b21b      	sxth	r3, r3
 80035e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80035e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	441a      	add	r2, r3
 80035ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035f0:	2108      	movs	r1, #8
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd f80e 	bl	8000614 <ExtractBits>
 80035f8:	4603      	mov	r3, r0
 80035fa:	78ba      	ldrb	r2, [r7, #2]
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	4934      	ldr	r1, [pc, #208]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	3301      	adds	r3, #1
 800360c:	4602      	mov	r2, r0
 800360e:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003610:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003614:	3308      	adds	r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	da00      	bge.n	800361c <Vital_Msg_extr+0x910>
 800361a:	3307      	adds	r3, #7
 800361c:	10db      	asrs	r3, r3, #3
 800361e:	b29a      	uxth	r2, r3
 8003620:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003624:	4413      	add	r3, r2
 8003626:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800362a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800362e:	3308      	adds	r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21b      	sxth	r3, r3
 8003634:	425a      	negs	r2, r3
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	f002 0207 	and.w	r2, r2, #7
 800363e:	bf58      	it	pl
 8003640:	4253      	negpl	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003648:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	441a      	add	r2, r3
 8003650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003654:	2108      	movs	r1, #8
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc ffdc 	bl	8000614 <ExtractBits>
 800365c:	4603      	mov	r3, r0
 800365e:	78ba      	ldrb	r2, [r7, #2]
 8003660:	b2d8      	uxtb	r0, r3
 8003662:	491b      	ldr	r1, [pc, #108]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	440b      	add	r3, r1
 800366e:	3302      	adds	r3, #2
 8003670:	4602      	mov	r2, r0
 8003672:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003674:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003678:	3308      	adds	r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	da00      	bge.n	8003680 <Vital_Msg_extr+0x974>
 800367e:	3307      	adds	r3, #7
 8003680:	10db      	asrs	r3, r3, #3
 8003682:	b29a      	uxth	r2, r3
 8003684:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003688:	4413      	add	r3, r2
 800368a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800368e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003692:	3308      	adds	r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b21b      	sxth	r3, r3
 8003698:	425a      	negs	r2, r3
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	f002 0207 	and.w	r2, r2, #7
 80036a2:	bf58      	it	pl
 80036a4:	4253      	negpl	r3, r2
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80036ac:	78bb      	ldrb	r3, [r7, #2]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f005 fb2c 	bl	8008d0c <IS_MLK_EIPC_TIME_MATCHING>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <Vital_Msg_extr+0x9cc>
 80036ba:	78bb      	ldrb	r3, [r7, #2]
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <Vital_Msg_extr+0x9c8>)
 80036be:	2100      	movs	r1, #0
 80036c0:	54d1      	strb	r1, [r2, r3]
 80036c2:	e00d      	b.n	80036e0 <Vital_Msg_extr+0x9d4>
 80036c4:	200011c4 	.word	0x200011c4
 80036c8:	080219a8 	.word	0x080219a8
 80036cc:	20000305 	.word	0x20000305
 80036d0:	20001188 	.word	0x20001188
 80036d4:	200010d8 	.word	0x200010d8
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	4a86      	ldr	r2, [pc, #536]	; (80038f4 <Vital_Msg_extr+0xbe8>)
 80036dc:	2101      	movs	r1, #1
 80036de:	54d1      	strb	r1, [r2, r3]


	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 80036e0:	78bb      	ldrb	r3, [r7, #2]
 80036e2:	4a85      	ldr	r2, [pc, #532]	; (80038f8 <Vital_Msg_extr+0xbec>)
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <Vital_Msg_extr+0x9ee>
	{
		LinkEstablishFlag = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80036fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	441a      	add	r2, r3
 8003702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003706:	2108      	movs	r1, #8
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff83 	bl	8000614 <ExtractBits>
 800370e:	4603      	mov	r3, r0
 8003710:	78ba      	ldrb	r2, [r7, #2]
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	4979      	ldr	r1, [pc, #484]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	440b      	add	r3, r1
 8003720:	3303      	adds	r3, #3
 8003722:	4602      	mov	r2, r0
 8003724:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003726:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800372a:	3308      	adds	r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	da00      	bge.n	8003732 <Vital_Msg_extr+0xa26>
 8003730:	3307      	adds	r3, #7
 8003732:	10db      	asrs	r3, r3, #3
 8003734:	b29a      	uxth	r2, r3
 8003736:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800373a:	4413      	add	r3, r2
 800373c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003744:	3308      	adds	r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b21b      	sxth	r3, r3
 800374a:	425a      	negs	r2, r3
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	f002 0207 	and.w	r2, r2, #7
 8003754:	bf58      	it	pl
 8003756:	4253      	negpl	r3, r2
 8003758:	b21b      	sxth	r3, r3
 800375a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 800375e:	78ba      	ldrb	r2, [r7, #2]
 8003760:	4966      	ldr	r1, [pc, #408]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	440b      	add	r3, r1
 800376c:	3303      	adds	r3, #3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	4863      	ldr	r0, [pc, #396]	; (8003900 <Vital_Msg_extr+0xbf4>)
 8003774:	f01c fd42 	bl	80201fc <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003778:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	441a      	add	r2, r3
 8003780:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003784:	2108      	movs	r1, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f7fc ff44 	bl	8000614 <ExtractBits>
 800378c:	4603      	mov	r3, r0
 800378e:	78ba      	ldrb	r2, [r7, #2]
 8003790:	b2d8      	uxtb	r0, r3
 8003792:	495a      	ldr	r1, [pc, #360]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	440b      	add	r3, r1
 800379e:	3304      	adds	r3, #4
 80037a0:	4602      	mov	r2, r0
 80037a2:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 80037a4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80037a8:	3308      	adds	r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da00      	bge.n	80037b0 <Vital_Msg_extr+0xaa4>
 80037ae:	3307      	adds	r3, #7
 80037b0:	10db      	asrs	r3, r3, #3
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037b8:	4413      	add	r3, r2
 80037ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80037be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037c2:	3308      	adds	r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	f002 0207 	and.w	r2, r2, #7
 80037d2:	bf58      	it	pl
 80037d4:	4253      	negpl	r3, r2
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 80037dc:	78ba      	ldrb	r2, [r7, #2]
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <Vital_Msg_extr+0xbf0>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	440b      	add	r3, r1
 80037ea:	3303      	adds	r3, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (noofIP != 0)
 80037f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <Vital_Msg_extr+0xb10>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 80037fe:	78ba      	ldrb	r2, [r7, #2]
 8003800:	493e      	ldr	r1, [pc, #248]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	440b      	add	r3, r1
 800380c:	3303      	adds	r3, #3
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800381a:	e00b      	b.n	8003834 <Vital_Msg_extr+0xb28>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 800381c:	78ba      	ldrb	r2, [r7, #2]
 800381e:	4937      	ldr	r1, [pc, #220]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	440b      	add	r3, r1
 800382a:	3303      	adds	r3, #3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003834:	2300      	movs	r3, #0
 8003836:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800383a:	e04c      	b.n	80038d6 <Vital_Msg_extr+0xbca>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800383c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	441a      	add	r2, r3
 8003844:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003848:	2108      	movs	r1, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fee2 	bl	8000614 <ExtractBits>
 8003850:	4603      	mov	r3, r0
 8003852:	78ba      	ldrb	r2, [r7, #2]
 8003854:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003858:	b2dc      	uxtb	r4, r3
 800385a:	4828      	ldr	r0, [pc, #160]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4403      	add	r3, r0
 8003866:	440b      	add	r3, r1
 8003868:	3305      	adds	r3, #5
 800386a:	4622      	mov	r2, r4
 800386c:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 800386e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003878:	4c20      	ldr	r4, [pc, #128]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4423      	add	r3, r4
 8003884:	440b      	add	r3, r1
 8003886:	3305      	adds	r3, #5
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4601      	mov	r1, r0
 800388e:	481d      	ldr	r0, [pc, #116]	; (8003904 <Vital_Msg_extr+0xbf8>)
 8003890:	f01c fcb4 	bl	80201fc <iprintf>
		BITSTUFFINC(8);
 8003894:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003898:	3308      	adds	r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	da00      	bge.n	80038a0 <Vital_Msg_extr+0xb94>
 800389e:	3307      	adds	r3, #7
 80038a0:	10db      	asrs	r3, r3, #3
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038a8:	4413      	add	r3, r2
 80038aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038b2:	3308      	adds	r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	425a      	negs	r2, r3
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	f002 0207 	and.w	r2, r2, #7
 80038c2:	bf58      	it	pl
 80038c4:	4253      	negpl	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80038cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038d0:	3301      	adds	r3, #1
 80038d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3ab      	bcc.n	800383c <Vital_Msg_extr+0xb30>
	}
	printf("\n");
 80038e4:	200a      	movs	r0, #10
 80038e6:	f01c fca1 	bl	802022c <putchar>

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038f0:	e044      	b.n	800397c <Vital_Msg_extr+0xc70>
 80038f2:	bf00      	nop
 80038f4:	200010d8 	.word	0x200010d8
 80038f8:	200011c4 	.word	0x200011c4
 80038fc:	200013a4 	.word	0x200013a4
 8003900:	08022054 	.word	0x08022054
 8003904:	0802205c 	.word	0x0802205c
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003908:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	441a      	add	r2, r3
 8003910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003914:	2108      	movs	r1, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fc fe7c 	bl	8000614 <ExtractBits>
 800391c:	4603      	mov	r3, r0
 800391e:	78ba      	ldrb	r2, [r7, #2]
 8003920:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003924:	b2dc      	uxtb	r4, r3
 8003926:	48c4      	ldr	r0, [pc, #784]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4403      	add	r3, r0
 8003932:	440b      	add	r3, r1
 8003934:	3315      	adds	r3, #21
 8003936:	4622      	mov	r2, r4
 8003938:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800393a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800393e:	3308      	adds	r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	da00      	bge.n	8003946 <Vital_Msg_extr+0xc3a>
 8003944:	3307      	adds	r3, #7
 8003946:	10db      	asrs	r3, r3, #3
 8003948:	b29a      	uxth	r2, r3
 800394a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800394e:	4413      	add	r3, r2
 8003950:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003954:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003958:	3308      	adds	r3, #8
 800395a:	b29b      	uxth	r3, r3
 800395c:	b21b      	sxth	r3, r3
 800395e:	425a      	negs	r2, r3
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	f002 0207 	and.w	r2, r2, #7
 8003968:	bf58      	it	pl
 800396a:	4253      	negpl	r3, r2
 800396c:	b21b      	sxth	r3, r3
 800396e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003972:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003976:	3301      	adds	r3, #1
 8003978:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800397c:	78ba      	ldrb	r2, [r7, #2]
 800397e:	49ae      	ldr	r1, [pc, #696]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	440b      	add	r3, r1
 800398a:	3304      	adds	r3, #4
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003994:	429a      	cmp	r2, r3
 8003996:	d3b7      	bcc.n	8003908 <Vital_Msg_extr+0xbfc>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8003998:	787a      	ldrb	r2, [r7, #1]
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fa6e 	bl	8006e80 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 80039a4:	78bb      	ldrb	r3, [r7, #2]
 80039a6:	4aa5      	ldr	r2, [pc, #660]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039a8:	2101      	movs	r1, #1
 80039aa:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 80039ac:	78bb      	ldrb	r3, [r7, #2]
 80039ae:	4aa3      	ldr	r2, [pc, #652]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039b0:	3302      	adds	r3, #2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b8:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	49a0      	ldr	r1, [pc, #640]	; (8003c40 <Vital_Msg_extr+0xf34>)
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3304      	adds	r3, #4
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d116      	bne.n	80039fe <Vital_Msg_extr+0xcf2>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80039d0:	2246      	movs	r2, #70	; 0x46
 80039d2:	2100      	movs	r1, #0
 80039d4:	489b      	ldr	r0, [pc, #620]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039d6:	f01c fb29 	bl	802002c <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b99      	ldr	r3, [pc, #612]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e0:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e8:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4895      	ldr	r0, [pc, #596]	; (8003c48 <Vital_Msg_extr+0xf3c>)
 80039f2:	f01c faf3 	bl	801ffdc <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 80039f6:	f240 2003 	movw	r0, #515	; 0x203
 80039fa:	f009 fb33 	bl	800d064 <TransmitCanPkt>




	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 80039fe:	78ba      	ldrb	r2, [r7, #2]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4a90      	ldr	r2, [pc, #576]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	2210      	movs	r2, #16
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f01c fb0a 	bl	802002c <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003a18:	78ba      	ldrb	r2, [r7, #2]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a8a      	ldr	r2, [pc, #552]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a24:	4413      	add	r3, r2
 8003a26:	1c58      	adds	r0, r3, #1
 8003a28:	78ba      	ldrb	r2, [r7, #2]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4a81      	ldr	r2, [pc, #516]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003a34:	4413      	add	r3, r2
 8003a36:	3305      	adds	r3, #5
 8003a38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f01c facd 	bl	801ffdc <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003a42:	78ba      	ldrb	r2, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	3301      	adds	r3, #1
 8003a52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a56:	b212      	sxth	r2, r2
 8003a58:	78bc      	ldrb	r4, [r7, #2]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f00c fee5 	bl	801082c <GetCRC16>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4619      	mov	r1, r3
 8003a66:	4a79      	ldr	r2, [pc, #484]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a68:	4623      	mov	r3, r4
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4423      	add	r3, r4
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	3312      	adds	r3, #18
 8003a74:	460a      	mov	r2, r1
 8003a76:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003a78:	78ba      	ldrb	r2, [r7, #2]
 8003a7a:	4974      	ldr	r1, [pc, #464]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3311      	adds	r3, #17
 8003a88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a8c:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003a8e:	78ba      	ldrb	r2, [r7, #2]
 8003a90:	496e      	ldr	r1, [pc, #440]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	78ba      	ldrb	r2, [r7, #2]
 8003a9e:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003aa0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d172      	bne.n	8003b8e <Vital_Msg_extr+0xe82>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003aa8:	78ba      	ldrb	r2, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	2210      	movs	r2, #16
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f01c fab5 	bl	802002c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003ac2:	78ba      	ldrb	r2, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ace:	1898      	adds	r0, r3, r2
 8003ad0:	78ba      	ldrb	r2, [r7, #2]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a5c      	ldr	r2, [pc, #368]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003adc:	4413      	add	r3, r2
 8003ade:	2214      	movs	r2, #20
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f01c fa7b 	bl	801ffdc <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003ae6:	78bb      	ldrb	r3, [r7, #2]
 8003ae8:	495a      	ldr	r1, [pc, #360]	; (8003c54 <Vital_Msg_extr+0xf48>)
 8003aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003af0:	78bb      	ldrb	r3, [r7, #2]
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003af4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003af8:	78ba      	ldrb	r2, [r7, #2]
 8003afa:	4855      	ldr	r0, [pc, #340]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4403      	add	r3, r0
 8003b06:	3312      	adds	r3, #18
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d03f      	beq.n	8003b8e <Vital_Msg_extr+0xe82>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b0e:	78ba      	ldrb	r2, [r7, #2]
 8003b10:	78b9      	ldrb	r1, [r7, #2]
 8003b12:	484f      	ldr	r0, [pc, #316]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3312      	adds	r3, #18
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003b24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003b28:	2214      	movs	r2, #20
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	484b      	ldr	r0, [pc, #300]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b2e:	f01c fa7d 	bl	802002c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003b32:	78ba      	ldrb	r2, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	2214      	movs	r2, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	4845      	ldr	r0, [pc, #276]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b46:	f01c fa49 	bl	801ffdc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8003b4a:	f240 2007 	movw	r0, #519	; 0x207
 8003b4e:	f009 fa89 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <Vital_Msg_extr+0xf54>)
 8003b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d117      	bne.n	8003b8e <Vital_Msg_extr+0xe82>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003b5e:	78bb      	ldrb	r3, [r7, #2]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <Vital_Msg_extr+0xf58>)
 8003b64:	4413      	add	r3, r2
 8003b66:	1c98      	adds	r0, r3, #2
 8003b68:	78ba      	ldrb	r2, [r7, #2]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b74:	4413      	add	r3, r2
 8003b76:	3301      	adds	r3, #1
 8003b78:	2210      	movs	r2, #16
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f01c fa2e 	bl	801ffdc <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8003b80:	f240 1019 	movw	r0, #281	; 0x119
 8003b84:	f009 fa6e 	bl	800d064 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8003b88:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <Vital_Msg_extr+0xf5c>)
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	6013      	str	r3, [r2, #0]

		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b8e:	78b9      	ldrb	r1, [r7, #2]
 8003b90:	78ba      	ldrb	r2, [r7, #2]
 8003b92:	482f      	ldr	r0, [pc, #188]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4403      	add	r3, r0
 8003b9e:	3312      	adds	r3, #18
 8003ba0:	8818      	ldrh	r0, [r3, #0]
 8003ba2:	4927      	ldr	r1, [pc, #156]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	3306      	adds	r3, #6
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003bb4:	78ba      	ldrb	r2, [r7, #2]
 8003bb6:	4922      	ldr	r1, [pc, #136]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc6:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003bc8:	78ba      	ldrb	r2, [r7, #2]
 8003bca:	491d      	ldr	r1, [pc, #116]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3305      	adds	r3, #5
 8003bd8:	2202      	movs	r2, #2
 8003bda:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	4918      	ldr	r1, [pc, #96]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	78ba      	ldrb	r2, [r7, #2]
 8003bec:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003bee:	78ba      	ldrb	r2, [r7, #2]
 8003bf0:	4913      	ldr	r1, [pc, #76]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003c02:	78ba      	ldrb	r2, [r7, #2]
 8003c04:	490e      	ldr	r1, [pc, #56]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	3302      	adds	r3, #2
 8003c12:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003c16:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003c18:	2218      	movs	r2, #24
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4813      	ldr	r0, [pc, #76]	; (8003c6c <Vital_Msg_extr+0xf60>)
 8003c1e:	f01c fa05 	bl	802002c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003c22:	78ba      	ldrb	r2, [r7, #2]
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003c2e:	4413      	add	r3, r2
 8003c30:	2218      	movs	r2, #24
 8003c32:	4619      	mov	r1, r3
 8003c34:	e01c      	b.n	8003c70 <Vital_Msg_extr+0xf64>
 8003c36:	bf00      	nop
 8003c38:	200013a4 	.word	0x200013a4
 8003c3c:	20001c94 	.word	0x20001c94
 8003c40:	20001674 	.word	0x20001674
 8003c44:	20001884 	.word	0x20001884
 8003c48:	2000188a 	.word	0x2000188a
 8003c4c:	20001db8 	.word	0x20001db8
 8003c50:	20001e80 	.word	0x20001e80
 8003c54:	20000ed8 	.word	0x20000ed8
 8003c58:	20000f00 	.word	0x20000f00
 8003c5c:	20002010 	.word	0x20002010
 8003c60:	20000ec4 	.word	0x20000ec4
 8003c64:	200010e4 	.word	0x200010e4
 8003c68:	20000e70 	.word	0x20000e70
 8003c6c:	20001854 	.word	0x20001854
 8003c70:	482b      	ldr	r0, [pc, #172]	; (8003d20 <Vital_Msg_extr+0x1014>)
 8003c72:	f01c f9b3 	bl	801ffdc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8003c76:	f240 2001 	movw	r0, #513	; 0x201
 8003c7a:	f009 f9f3 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003c7e:	78ba      	ldrb	r2, [r7, #2]
 8003c80:	4928      	ldr	r1, [pc, #160]	; (8003d24 <Vital_Msg_extr+0x1018>)
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003c92:	78bb      	ldrb	r3, [r7, #2]
 8003c94:	4924      	ldr	r1, [pc, #144]	; (8003d28 <Vital_Msg_extr+0x101c>)
 8003c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003c9c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d11d      	bne.n	8003ce0 <Vital_Msg_extr+0xfd4>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003ca4:	78bb      	ldrb	r3, [r7, #2]
 8003ca6:	4921      	ldr	r1, [pc, #132]	; (8003d2c <Vital_Msg_extr+0x1020>)
 8003ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003cae:	78ba      	ldrb	r2, [r7, #2]
 8003cb0:	491f      	ldr	r1, [pc, #124]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc0:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003cc2:	78ba      	ldrb	r2, [r7, #2]
 8003cc4:	491a      	ldr	r1, [pc, #104]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8003cd6:	78bb      	ldrb	r3, [r7, #2]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <Vital_Msg_extr+0x1028>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	54d1      	strb	r1, [r2, r3]
 8003cde:	e017      	b.n	8003d10 <Vital_Msg_extr+0x1004>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8003ce0:	78bb      	ldrb	r3, [r7, #2]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <Vital_Msg_extr+0x1028>)
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	4911      	ldr	r1, [pc, #68]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfa:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8003cfc:	78ba      	ldrb	r2, [r7, #2]
 8003cfe:	490c      	ldr	r1, [pc, #48]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d14:	4808      	ldr	r0, [pc, #32]	; (8003d38 <Vital_Msg_extr+0x102c>)
 8003d16:	f011 ff50 	bl	8015bba <HAL_GPIO_TogglePin>

}
 8003d1a:	3764      	adds	r7, #100	; 0x64
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	20001854 	.word	0x20001854
 8003d24:	20001674 	.word	0x20001674
 8003d28:	20000e44 	.word	0x20000e44
 8003d2c:	20000f14 	.word	0x20000f14
 8003d30:	20001cc8 	.word	0x20001cc8
 8003d34:	20000f64 	.word	0x20000f64
 8003d38:	40021c00 	.word	0x40021c00

08003d3c <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b0a5      	sub	sp, #148	; 0x94
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	460a      	mov	r2, r1
 8003d46:	71fb      	strb	r3, [r7, #7]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d54:	2238      	movs	r2, #56	; 0x38
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f01c f967 	bl	802002c <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	f107 0310 	add.w	r3, r7, #16
 8003d66:	2238      	movs	r2, #56	; 0x38
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f01c f95e 	bl	802002c <memset>
	uint8_t uc_index = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d86:	223c      	movs	r2, #60	; 0x3c
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f01c f94e 	bl	802002c <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003d90:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003d94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d98:	441a      	add	r2, r3
 8003d9a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003d9e:	23f4      	movs	r3, #244	; 0xf4
 8003da0:	2108      	movs	r1, #8
 8003da2:	f7fc fcc3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003da6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003daa:	3308      	adds	r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da00      	bge.n	8003db2 <Send_Vital_Data_Message+0x76>
 8003db0:	3307      	adds	r3, #7
 8003db2:	10db      	asrs	r3, r3, #3
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dba:	4413      	add	r3, r2
 8003dbc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003dc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	425a      	negs	r2, r3
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	f002 0207 	and.w	r2, r2, #7
 8003dd4:	bf58      	it	pl
 8003dd6:	4253      	negpl	r3, r2
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003dde:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003de2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003de6:	441a      	add	r2, r3
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	49c6      	ldr	r1, [pc, #792]	; (8004104 <Send_Vital_Data_Message+0x3c8>)
 8003dec:	3366      	adds	r3, #102	; 0x66
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003df8:	2110      	movs	r1, #16
 8003dfa:	f7fc fc97 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003dfe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e02:	3310      	adds	r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da00      	bge.n	8003e0a <Send_Vital_Data_Message+0xce>
 8003e08:	3307      	adds	r3, #7
 8003e0a:	10db      	asrs	r3, r3, #3
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e12:	4413      	add	r3, r2
 8003e14:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	425a      	negs	r2, r3
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	f002 0207 	and.w	r2, r2, #7
 8003e2c:	bf58      	it	pl
 8003e2e:	4253      	negpl	r3, r2
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003e36:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e3e:	441a      	add	r2, r3
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	49b0      	ldr	r1, [pc, #704]	; (8004104 <Send_Vital_Data_Message+0x3c8>)
 8003e44:	3370      	adds	r3, #112	; 0x70
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e50:	2110      	movs	r1, #16
 8003e52:	f7fc fc6b 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003e56:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e5a:	3310      	adds	r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da00      	bge.n	8003e62 <Send_Vital_Data_Message+0x126>
 8003e60:	3307      	adds	r3, #7
 8003e62:	10db      	asrs	r3, r3, #3
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e74:	3310      	adds	r3, #16
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	425a      	negs	r2, r3
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	f002 0207 	and.w	r2, r2, #7
 8003e84:	bf58      	it	pl
 8003e86:	4253      	negpl	r3, r2
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003e8e:	4b9e      	ldr	r3, [pc, #632]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d035      	beq.n	8003f08 <Send_Vital_Data_Message+0x1cc>
 8003e9c:	4b9a      	ldr	r3, [pc, #616]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003e9e:	791b      	ldrb	r3, [r3, #4]
 8003ea0:	79fa      	ldrb	r2, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d130      	bne.n	8003f08 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8003eac:	4897      	ldr	r0, [pc, #604]	; (800410c <Send_Vital_Data_Message+0x3d0>)
 8003eae:	f013 fe4d 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b96      	ldr	r3, [pc, #600]	; (8004110 <Send_Vital_Data_Message+0x3d4>)
 8003eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	21c8      	movs	r1, #200	; 0xc8
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8003ec8:	4892      	ldr	r0, [pc, #584]	; (8004114 <Send_Vital_Data_Message+0x3d8>)
 8003eca:	f01c fa33 	bl	8020334 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	4a91      	ldr	r2, [pc, #580]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	488f      	ldr	r0, [pc, #572]	; (800411c <Send_Vital_Data_Message+0x3e0>)
 8003ede:	f01c f98d 	bl	80201fc <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8003ee2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	488d      	ldr	r0, [pc, #564]	; (8004120 <Send_Vital_Data_Message+0x3e4>)
 8003eea:	f01c f987 	bl	80201fc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003eee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ef2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ef6:	441a      	add	r2, r3
 8003ef8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003efc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f00:	2108      	movs	r1, #8
 8003f02:	f7fc fc13 	bl	800072c <InsertBits>
	{
 8003f06:	e00f      	b.n	8003f28 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8003f08:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f10:	441a      	add	r2, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4980      	ldr	r1, [pc, #512]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	440b      	add	r3, r1
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f22:	2108      	movs	r1, #8
 8003f24:	f7fc fc02 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8003f28:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	da00      	bge.n	8003f34 <Send_Vital_Data_Message+0x1f8>
 8003f32:	3307      	adds	r3, #7
 8003f34:	10db      	asrs	r3, r3, #3
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f46:	3308      	adds	r3, #8
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	425a      	negs	r2, r3
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	f002 0207 	and.w	r2, r2, #7
 8003f56:	bf58      	it	pl
 8003f58:	4253      	negpl	r3, r2
 8003f5a:	b21b      	sxth	r3, r3
 8003f5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003f60:	4b69      	ldr	r3, [pc, #420]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	08db      	lsrs	r3, r3, #3
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d035      	beq.n	8003fda <Send_Vital_Data_Message+0x29e>
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003f70:	791b      	ldrb	r3, [r3, #4]
 8003f72:	79fa      	ldrb	r2, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d130      	bne.n	8003fda <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8003f7e:	4863      	ldr	r0, [pc, #396]	; (800410c <Send_Vital_Data_Message+0x3d0>)
 8003f80:	f013 fde4 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b62      	ldr	r3, [pc, #392]	; (8004110 <Send_Vital_Data_Message+0x3d4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	21c8      	movs	r1, #200	; 0xc8
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8003f9a:	4862      	ldr	r0, [pc, #392]	; (8004124 <Send_Vital_Data_Message+0x3e8>)
 8003f9c:	f01c f9ca 	bl	8020334 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	4a5d      	ldr	r2, [pc, #372]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	485e      	ldr	r0, [pc, #376]	; (8004128 <Send_Vital_Data_Message+0x3ec>)
 8003fb0:	f01c f924 	bl	80201fc <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8003fb4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fb8:	4619      	mov	r1, r3
 8003fba:	485c      	ldr	r0, [pc, #368]	; (800412c <Send_Vital_Data_Message+0x3f0>)
 8003fbc:	f01c f91e 	bl	80201fc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8003fc0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fc8:	441a      	add	r2, r3
 8003fca:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fce:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fd2:	2108      	movs	r1, #8
 8003fd4:	f7fc fbaa 	bl	800072c <InsertBits>
	{
 8003fd8:	e00f      	b.n	8003ffa <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8003fda:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fe2:	441a      	add	r2, r3
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	494c      	ldr	r1, [pc, #304]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	440b      	add	r3, r1
 8003fec:	3302      	adds	r3, #2
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003ff4:	2108      	movs	r1, #8
 8003ff6:	f7fc fb99 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 8003ffa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003ffe:	3308      	adds	r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	da00      	bge.n	8004006 <Send_Vital_Data_Message+0x2ca>
 8004004:	3307      	adds	r3, #7
 8004006:	10db      	asrs	r3, r3, #3
 8004008:	b29a      	uxth	r2, r3
 800400a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800400e:	4413      	add	r3, r2
 8004010:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004014:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004018:	3308      	adds	r3, #8
 800401a:	b29b      	uxth	r3, r3
 800401c:	b21b      	sxth	r3, r3
 800401e:	425a      	negs	r2, r3
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	f002 0207 	and.w	r2, r2, #7
 8004028:	bf58      	it	pl
 800402a:	4253      	negpl	r3, r2
 800402c:	b21b      	sxth	r3, r3
 800402e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 8004032:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004036:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800403a:	441a      	add	r2, r3
 800403c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004040:	2302      	movs	r3, #2
 8004042:	2108      	movs	r1, #8
 8004044:	f7fc fb72 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004048:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800404c:	3308      	adds	r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	da00      	bge.n	8004054 <Send_Vital_Data_Message+0x318>
 8004052:	3307      	adds	r3, #7
 8004054:	10db      	asrs	r3, r3, #3
 8004056:	b29a      	uxth	r2, r3
 8004058:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800405c:	4413      	add	r3, r2
 800405e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004062:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004066:	3308      	adds	r3, #8
 8004068:	b29b      	uxth	r3, r3
 800406a:	b21b      	sxth	r3, r3
 800406c:	425a      	negs	r2, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	f002 0207 	and.w	r2, r2, #7
 8004076:	bf58      	it	pl
 8004078:	4253      	negpl	r3, r2
 800407a:	b21b      	sxth	r3, r3
 800407c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <Send_Vital_Data_Message+0x3f4>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d15a      	bne.n	8004140 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 800408a:	f007 fa4d 	bl	800b528 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800408e:	79fa      	ldrb	r2, [r7, #7]
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4a26      	ldr	r2, [pc, #152]	; (8004134 <Send_Vital_Data_Message+0x3f8>)
 800409a:	4413      	add	r3, r2
 800409c:	4a26      	ldr	r2, [pc, #152]	; (8004138 <Send_Vital_Data_Message+0x3fc>)
 800409e:	6811      	ldr	r1, [r2, #0]
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	8892      	ldrh	r2, [r2, #4]
 80040a4:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80040a6:	4825      	ldr	r0, [pc, #148]	; (800413c <Send_Vital_Data_Message+0x400>)
 80040a8:	f01c f944 	bl	8020334 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <Send_Vital_Data_Message+0x3f4>)
 80040b0:	2100      	movs	r1, #0
 80040b2:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 80040b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040bc:	441a      	add	r2, r3
 80040be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040c2:	2368      	movs	r3, #104	; 0x68
 80040c4:	2110      	movs	r1, #16
 80040c6:	f7fc fb31 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80040ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040ce:	3310      	adds	r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da00      	bge.n	80040d6 <Send_Vital_Data_Message+0x39a>
 80040d4:	3307      	adds	r3, #7
 80040d6:	10db      	asrs	r3, r3, #3
 80040d8:	b29a      	uxth	r2, r3
 80040da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040de:	4413      	add	r3, r2
 80040e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040e8:	3310      	adds	r3, #16
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	b21b      	sxth	r3, r3
 80040ee:	425a      	negs	r2, r3
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	f002 0207 	and.w	r2, r2, #7
 80040f8:	bf58      	it	pl
 80040fa:	4253      	negpl	r3, r2
 80040fc:	b21b      	sxth	r3, r3
 80040fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004102:	e044      	b.n	800418e <Send_Vital_Data_Message+0x452>
 8004104:	20000304 	.word	0x20000304
 8004108:	2000195c 	.word	0x2000195c
 800410c:	20009088 	.word	0x20009088
 8004110:	51eb851f 	.word	0x51eb851f
 8004114:	0802206c 	.word	0x0802206c
 8004118:	200011c4 	.word	0x200011c4
 800411c:	08022090 	.word	0x08022090
 8004120:	080220b0 	.word	0x080220b0
 8004124:	08021db4 	.word	0x08021db4
 8004128:	08021dd8 	.word	0x08021dd8
 800412c:	08021df8 	.word	0x08021df8
 8004130:	200010d8 	.word	0x200010d8
 8004134:	20001188 	.word	0x20001188
 8004138:	20002890 	.word	0x20002890
 800413c:	080220d0 	.word	0x080220d0
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 8004140:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004148:	441a      	add	r2, r3
 800414a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800414e:	2328      	movs	r3, #40	; 0x28
 8004150:	2110      	movs	r1, #16
 8004152:	f7fc faeb 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004156:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800415a:	3310      	adds	r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	da00      	bge.n	8004162 <Send_Vital_Data_Message+0x426>
 8004160:	3307      	adds	r3, #7
 8004162:	10db      	asrs	r3, r3, #3
 8004164:	b29a      	uxth	r2, r3
 8004166:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800416a:	4413      	add	r3, r2
 800416c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004170:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004174:	3310      	adds	r3, #16
 8004176:	b29b      	uxth	r3, r3
 8004178:	b21b      	sxth	r3, r3
 800417a:	425a      	negs	r2, r3
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	f002 0207 	and.w	r2, r2, #7
 8004184:	bf58      	it	pl
 8004186:	4253      	negpl	r3, r2
 8004188:	b21b      	sxth	r3, r3
 800418a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800418e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004192:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004196:	18d1      	adds	r1, r2, r3
 8004198:	79fa      	ldrb	r2, [r7, #7]
 800419a:	48cd      	ldr	r0, [pc, #820]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4403      	add	r3, r0
 80041a6:	3305      	adds	r3, #5
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041ae:	460a      	mov	r2, r1
 80041b0:	2108      	movs	r1, #8
 80041b2:	f7fc fabb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80041b6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041ba:	3308      	adds	r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da00      	bge.n	80041c2 <Send_Vital_Data_Message+0x486>
 80041c0:	3307      	adds	r3, #7
 80041c2:	10db      	asrs	r3, r3, #3
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041ca:	4413      	add	r3, r2
 80041cc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041d4:	3308      	adds	r3, #8
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	b21b      	sxth	r3, r3
 80041da:	425a      	negs	r2, r3
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	f002 0207 	and.w	r2, r2, #7
 80041e4:	bf58      	it	pl
 80041e6:	4253      	negpl	r3, r2
 80041e8:	b21b      	sxth	r3, r3
 80041ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80041ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041f6:	18d1      	adds	r1, r2, r3
 80041f8:	79fa      	ldrb	r2, [r7, #7]
 80041fa:	48b5      	ldr	r0, [pc, #724]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4403      	add	r3, r0
 8004206:	3304      	adds	r3, #4
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800420e:	460a      	mov	r2, r1
 8004210:	2108      	movs	r1, #8
 8004212:	f7fc fa8b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004216:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800421a:	3308      	adds	r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	da00      	bge.n	8004222 <Send_Vital_Data_Message+0x4e6>
 8004220:	3307      	adds	r3, #7
 8004222:	10db      	asrs	r3, r3, #3
 8004224:	b29a      	uxth	r2, r3
 8004226:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800422a:	4413      	add	r3, r2
 800422c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004230:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004234:	3308      	adds	r3, #8
 8004236:	b29b      	uxth	r3, r3
 8004238:	b21b      	sxth	r3, r3
 800423a:	425a      	negs	r2, r3
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	f002 0207 	and.w	r2, r2, #7
 8004244:	bf58      	it	pl
 8004246:	4253      	negpl	r3, r2
 8004248:	b21b      	sxth	r3, r3
 800424a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800424e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004252:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004256:	18d1      	adds	r1, r2, r3
 8004258:	79fa      	ldrb	r2, [r7, #7]
 800425a:	489d      	ldr	r0, [pc, #628]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4403      	add	r3, r0
 8004266:	3303      	adds	r3, #3
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800426e:	460a      	mov	r2, r1
 8004270:	2108      	movs	r1, #8
 8004272:	f7fc fa5b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004276:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800427a:	3308      	adds	r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	da00      	bge.n	8004282 <Send_Vital_Data_Message+0x546>
 8004280:	3307      	adds	r3, #7
 8004282:	10db      	asrs	r3, r3, #3
 8004284:	b29a      	uxth	r2, r3
 8004286:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800428a:	4413      	add	r3, r2
 800428c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004294:	3308      	adds	r3, #8
 8004296:	b29b      	uxth	r3, r3
 8004298:	b21b      	sxth	r3, r3
 800429a:	425a      	negs	r2, r3
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	f002 0207 	and.w	r2, r2, #7
 80042a4:	bf58      	it	pl
 80042a6:	4253      	negpl	r3, r2
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80042ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042b6:	18d1      	adds	r1, r2, r3
 80042b8:	79fa      	ldrb	r2, [r7, #7]
 80042ba:	4885      	ldr	r0, [pc, #532]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	4403      	add	r3, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042cc:	460a      	mov	r2, r1
 80042ce:	2108      	movs	r1, #8
 80042d0:	f7fc fa2c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80042d4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80042d8:	3308      	adds	r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	da00      	bge.n	80042e0 <Send_Vital_Data_Message+0x5a4>
 80042de:	3307      	adds	r3, #7
 80042e0:	10db      	asrs	r3, r3, #3
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042e8:	4413      	add	r3, r2
 80042ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80042ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042f2:	3308      	adds	r3, #8
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	b21b      	sxth	r3, r3
 80042f8:	425a      	negs	r2, r3
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	f002 0207 	and.w	r2, r2, #7
 8004302:	bf58      	it	pl
 8004304:	4253      	negpl	r3, r2
 8004306:	b21b      	sxth	r3, r3
 8004308:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 800430c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004310:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004314:	18d1      	adds	r1, r2, r3
 8004316:	79fa      	ldrb	r2, [r7, #7]
 8004318:	486d      	ldr	r0, [pc, #436]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4403      	add	r3, r0
 8004324:	3301      	adds	r3, #1
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800432c:	460a      	mov	r2, r1
 800432e:	2108      	movs	r1, #8
 8004330:	f7fc f9fc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004334:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004338:	3308      	adds	r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	da00      	bge.n	8004340 <Send_Vital_Data_Message+0x604>
 800433e:	3307      	adds	r3, #7
 8004340:	10db      	asrs	r3, r3, #3
 8004342:	b29a      	uxth	r2, r3
 8004344:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004348:	4413      	add	r3, r2
 800434a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800434e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004352:	3308      	adds	r3, #8
 8004354:	b29b      	uxth	r3, r3
 8004356:	b21b      	sxth	r3, r3
 8004358:	425a      	negs	r2, r3
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	f002 0207 	and.w	r2, r2, #7
 8004362:	bf58      	it	pl
 8004364:	4253      	negpl	r3, r2
 8004366:	b21b      	sxth	r3, r3
 8004368:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 800436c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004370:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004374:	18d1      	adds	r1, r2, r3
 8004376:	79fa      	ldrb	r2, [r7, #7]
 8004378:	4855      	ldr	r0, [pc, #340]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4403      	add	r3, r0
 8004384:	3302      	adds	r3, #2
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800438c:	460a      	mov	r2, r1
 800438e:	2108      	movs	r1, #8
 8004390:	f7fc f9cc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004394:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004398:	3308      	adds	r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	da00      	bge.n	80043a0 <Send_Vital_Data_Message+0x664>
 800439e:	3307      	adds	r3, #7
 80043a0:	10db      	asrs	r3, r3, #3
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043a8:	4413      	add	r3, r2
 80043aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043b2:	3308      	adds	r3, #8
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	425a      	negs	r2, r3
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	f002 0207 	and.w	r2, r2, #7
 80043c2:	bf58      	it	pl
 80043c4:	4253      	negpl	r3, r2
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 80043cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043d4:	441a      	add	r2, r3
 80043d6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043da:	2301      	movs	r3, #1
 80043dc:	2108      	movs	r1, #8
 80043de:	f7fc f9a5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043e2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043e6:	3308      	adds	r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	da00      	bge.n	80043ee <Send_Vital_Data_Message+0x6b2>
 80043ec:	3307      	adds	r3, #7
 80043ee:	10db      	asrs	r3, r3, #3
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043f6:	4413      	add	r3, r2
 80043f8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004400:	3308      	adds	r3, #8
 8004402:	b29b      	uxth	r3, r3
 8004404:	b21b      	sxth	r3, r3
 8004406:	425a      	negs	r2, r3
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	f002 0207 	and.w	r2, r2, #7
 8004410:	bf58      	it	pl
 8004412:	4253      	negpl	r3, r2
 8004414:	b21b      	sxth	r3, r3
 8004416:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 800441a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800441e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004422:	441a      	add	r2, r3
 8004424:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004428:	2300      	movs	r3, #0
 800442a:	2108      	movs	r1, #8
 800442c:	f7fc f97e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004430:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004434:	3308      	adds	r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	da00      	bge.n	800443c <Send_Vital_Data_Message+0x700>
 800443a:	3307      	adds	r3, #7
 800443c:	10db      	asrs	r3, r3, #3
 800443e:	b29a      	uxth	r2, r3
 8004440:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004444:	4413      	add	r3, r2
 8004446:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800444a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800444e:	3308      	adds	r3, #8
 8004450:	b29b      	uxth	r3, r3
 8004452:	b21b      	sxth	r3, r3
 8004454:	425a      	negs	r2, r3
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	f002 0207 	and.w	r2, r2, #7
 800445e:	bf58      	it	pl
 8004460:	4253      	negpl	r3, r2
 8004462:	b21b      	sxth	r3, r3
 8004464:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004468:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800446c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004470:	441a      	add	r2, r3
 8004472:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004476:	2301      	movs	r3, #1
 8004478:	2108      	movs	r1, #8
 800447a:	f7fc f957 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800447e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004482:	3308      	adds	r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	da00      	bge.n	800448a <Send_Vital_Data_Message+0x74e>
 8004488:	3307      	adds	r3, #7
 800448a:	10db      	asrs	r3, r3, #3
 800448c:	b29a      	uxth	r2, r3
 800448e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004492:	4413      	add	r3, r2
 8004494:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800449c:	3308      	adds	r3, #8
 800449e:	b29b      	uxth	r3, r3
 80044a0:	b21b      	sxth	r3, r3
 80044a2:	425a      	negs	r2, r3
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	f002 0207 	and.w	r2, r2, #7
 80044ac:	bf58      	it	pl
 80044ae:	4253      	negpl	r3, r2
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <Send_Vital_Data_Message+0x798>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d02c      	beq.n	800451e <Send_Vital_Data_Message+0x7e2>
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <Send_Vital_Data_Message+0x798>)
 80044c6:	791b      	ldrb	r3, [r3, #4]
 80044c8:	79fa      	ldrb	r2, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d127      	bne.n	800451e <Send_Vital_Data_Message+0x7e2>
 80044ce:	e003      	b.n	80044d8 <Send_Vital_Data_Message+0x79c>
 80044d0:	20001188 	.word	0x20001188
 80044d4:	2000195c 	.word	0x2000195c
	{
		uint32_t Rand_Number = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 80044de:	484e      	ldr	r0, [pc, #312]	; (8004618 <Send_Vital_Data_Message+0x8dc>)
 80044e0:	f013 fb34 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 80044e4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80044e8:	484c      	ldr	r0, [pc, #304]	; (800461c <Send_Vital_Data_Message+0x8e0>)
 80044ea:	f01b ff23 	bl	8020334 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	4a4b      	ldr	r2, [pc, #300]	; (8004620 <Send_Vital_Data_Message+0x8e4>)
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	4413      	add	r3, r2
 80044f6:	330c      	adds	r3, #12
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4619      	mov	r1, r3
 80044fc:	4849      	ldr	r0, [pc, #292]	; (8004624 <Send_Vital_Data_Message+0x8e8>)
 80044fe:	f01b fe7d 	bl	80201fc <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004502:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004506:	4848      	ldr	r0, [pc, #288]	; (8004628 <Send_Vital_Data_Message+0x8ec>)
 8004508:	f01b fe78 	bl	80201fc <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 800450c:	f107 020c 	add.w	r2, r7, #12
 8004510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004514:	2118      	movs	r1, #24
 8004516:	2000      	movs	r0, #0
 8004518:	f7fc f908 	bl	800072c <InsertBits>
	{
 800451c:	e00b      	b.n	8004536 <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4a3f      	ldr	r2, [pc, #252]	; (8004620 <Send_Vital_Data_Message+0x8e4>)
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	4413      	add	r3, r2
 8004526:	330c      	adds	r3, #12
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f107 020c 	add.w	r2, r7, #12
 800452e:	2118      	movs	r1, #24
 8004530:	2000      	movs	r0, #0
 8004532:	f7fc f8fb 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004536:	2300      	movs	r3, #0
 8004538:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800453c:	e011      	b.n	8004562 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 800453e:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004542:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004546:	3303      	adds	r3, #3
 8004548:	3290      	adds	r2, #144	; 0x90
 800454a:	443a      	add	r2, r7
 800454c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004550:	3390      	adds	r3, #144	; 0x90
 8004552:	443b      	add	r3, r7
 8004554:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004558:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800455c:	3301      	adds	r3, #1
 800455e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004562:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004566:	b29b      	uxth	r3, r3
 8004568:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800456c:	429a      	cmp	r2, r3
 800456e:	d8e6      	bhi.n	800453e <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004570:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004574:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004578:	18d4      	adds	r4, r2, r3
 800457a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800457e:	b29b      	uxth	r3, r3
 8004580:	3303      	adds	r3, #3
 8004582:	b29a      	uxth	r2, r3
 8004584:	f107 030c 	add.w	r3, r7, #12
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f00c fa08 	bl	80109a0 <CalculateDirectReverseCrc>
 8004590:	4603      	mov	r3, r0
 8004592:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004596:	4622      	mov	r2, r4
 8004598:	2120      	movs	r1, #32
 800459a:	f7fc f8c7 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800459e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80045a2:	3320      	adds	r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da00      	bge.n	80045aa <Send_Vital_Data_Message+0x86e>
 80045a8:	3307      	adds	r3, #7
 80045aa:	10db      	asrs	r3, r3, #3
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045b2:	4413      	add	r3, r2
 80045b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045bc:	3320      	adds	r3, #32
 80045be:	b29b      	uxth	r3, r3
 80045c0:	b21b      	sxth	r3, r3
 80045c2:	425a      	negs	r2, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	f002 0207 	and.w	r2, r2, #7
 80045cc:	bf58      	it	pl
 80045ce:	4253      	negpl	r3, r2
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <Send_Vital_Data_Message+0x8f0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <Send_Vital_Data_Message+0x8c0>
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <Send_Vital_Data_Message+0x8f0>)
 80045e6:	791b      	ldrb	r3, [r3, #4]
 80045e8:	79fa      	ldrb	r2, [r7, #7]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d106      	bne.n	80045fc <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 80045ee:	4810      	ldr	r0, [pc, #64]	; (8004630 <Send_Vital_Data_Message+0x8f4>)
 80045f0:	f01b fea0 	bl	8020334 <puts>
		printf("Not Sending Reply");
 80045f4:	480f      	ldr	r0, [pc, #60]	; (8004634 <Send_Vital_Data_Message+0x8f8>)
 80045f6:	f01b fe01 	bl	80201fc <iprintf>
 80045fa:	e009      	b.n	8004610 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80045fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004600:	b2d9      	uxtb	r1, r3
 8004602:	79fa      	ldrb	r2, [r7, #7]
 8004604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004608:	4618      	mov	r0, r3
 800460a:	f002 ffd9 	bl	80075c0 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	3794      	adds	r7, #148	; 0x94
 8004614:	46bd      	mov	sp, r7
 8004616:	bd90      	pop	{r4, r7, pc}
 8004618:	20009088 	.word	0x20009088
 800461c:	080220e8 	.word	0x080220e8
 8004620:	200011c4 	.word	0x200011c4
 8004624:	0802210c 	.word	0x0802210c
 8004628:	08022130 	.word	0x08022130
 800462c:	2000195c 	.word	0x2000195c
 8004630:	08021e80 	.word	0x08021e80
 8004634:	08021e98 	.word	0x08021e98

08004638 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0c0      	sub	sp, #256	; 0x100
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	4603      	mov	r3, r0
 8004648:	70fb      	strb	r3, [r7, #3]
 800464a:	460b      	mov	r3, r1
 800464c:	70bb      	strb	r3, [r7, #2]
 800464e:	4613      	mov	r3, r2
 8004650:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004664:	f00e fdc0 	bl	80131e8 <HAL_GetTick>
 8004668:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004672:	2300      	movs	r3, #0
 8004674:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 800467e:	2300      	movs	r3, #0
 8004680:	667b      	str	r3, [r7, #100]	; 0x64
 8004682:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004686:	227c      	movs	r2, #124	; 0x7c
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f01b fcce 	bl	802002c <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004690:	2300      	movs	r3, #0
 8004692:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004696:	2300      	movs	r3, #0
 8004698:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	b299      	uxth	r1, r3
 80046a0:	78ba      	ldrb	r2, [r7, #2]
 80046a2:	48c3      	ldr	r0, [pc, #780]	; (80049b0 <Vital_Msg_extr_from_CAN+0x378>)
 80046a4:	4613      	mov	r3, r2
 80046a6:	015b      	lsls	r3, r3, #5
 80046a8:	4413      	add	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4403      	add	r3, r0
 80046ae:	3340      	adds	r3, #64	; 0x40
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	4299      	cmp	r1, r3
 80046b4:	d11a      	bne.n	80046ec <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 80046b6:	78ba      	ldrb	r2, [r7, #2]
 80046b8:	4613      	mov	r3, r2
 80046ba:	015b      	lsls	r3, r3, #5
 80046bc:	4413      	add	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4abb      	ldr	r2, [pc, #748]	; (80049b0 <Vital_Msg_extr_from_CAN+0x378>)
 80046c2:	4413      	add	r3, r2
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f01b fc77 	bl	801ffbc <memcmp>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80046d4:	78bb      	ldrb	r3, [r7, #2]
 80046d6:	4ab7      	ldr	r2, [pc, #732]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 80046d8:	3366      	adds	r3, #102	; 0x66
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4619      	mov	r1, r3
 80046e2:	48b5      	ldr	r0, [pc, #724]	; (80049b8 <Vital_Msg_extr_from_CAN+0x380>)
 80046e4:	f01b fd8a 	bl	80201fc <iprintf>
			return;
 80046e8:	f000 bda0 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	3b05      	subs	r3, #5
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	441a      	add	r2, r3
 80046f4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80046f8:	2120      	movs	r1, #32
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb ff8a 	bl	8000614 <ExtractBits>
 8004700:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004704:	4bad      	ldr	r3, [pc, #692]	; (80049bc <Vital_Msg_extr_from_CAN+0x384>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d034      	beq.n	800477a <Vital_Msg_extr_from_CAN+0x142>
 8004710:	4baa      	ldr	r3, [pc, #680]	; (80049bc <Vital_Msg_extr_from_CAN+0x384>)
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	78ba      	ldrb	r2, [r7, #2]
 8004716:	429a      	cmp	r2, r3
 8004718:	d12f      	bne.n	800477a <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 800471a:	2316      	movs	r3, #22
 800471c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004720:	48a7      	ldr	r0, [pc, #668]	; (80049c0 <Vital_Msg_extr_from_CAN+0x388>)
 8004722:	f013 fa13 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8004726:	4602      	mov	r2, r0
 8004728:	4ba6      	ldr	r3, [pc, #664]	; (80049c4 <Vital_Msg_extr_from_CAN+0x38c>)
 800472a:	fba3 1302 	umull	r1, r3, r3, r2
 800472e:	0dd9      	lsrs	r1, r3, #23
 8004730:	460b      	mov	r3, r1
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	1a5b      	subs	r3, r3, r1
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 800473e:	48a2      	ldr	r0, [pc, #648]	; (80049c8 <Vital_Msg_extr_from_CAN+0x390>)
 8004740:	f01b fdf8 	bl	8020334 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004744:	78ba      	ldrb	r2, [r7, #2]
 8004746:	49a1      	ldr	r1, [pc, #644]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	3308      	adds	r3, #8
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	489d      	ldr	r0, [pc, #628]	; (80049d0 <Vital_Msg_extr_from_CAN+0x398>)
 800475a:	f01b fd4f 	bl	80201fc <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 800475e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004762:	489c      	ldr	r0, [pc, #624]	; (80049d4 <Vital_Msg_extr_from_CAN+0x39c>)
 8004764:	f01b fd4a 	bl	80201fc <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8004768:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004770:	2118      	movs	r1, #24
 8004772:	2000      	movs	r0, #0
 8004774:	f7fb ffda 	bl	800072c <InsertBits>
	{
 8004778:	e00e      	b.n	8004798 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800477a:	78ba      	ldrb	r2, [r7, #2]
 800477c:	4993      	ldr	r1, [pc, #588]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	440b      	add	r3, r1
 8004788:	3308      	adds	r3, #8
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004790:	2118      	movs	r1, #24
 8004792:	2000      	movs	r0, #0
 8004794:	f7fb ffca 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004798:	2300      	movs	r3, #0
 800479a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800479e:	e011      	b.n	80047c4 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80047a0:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	441a      	add	r2, r3
 80047a8:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047ac:	3303      	adds	r3, #3
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047b4:	443b      	add	r3, r7
 80047b6:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80047ba:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047be:	3301      	adds	r3, #1
 80047c0:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80047c4:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	3b05      	subs	r3, #5
 80047cc:	429a      	cmp	r2, r3
 80047ce:	dbe7      	blt.n	80047a0 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80047d0:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3303      	adds	r3, #3
 80047d8:	b29a      	uxth	r2, r3
 80047da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f00c f8dd 	bl	80109a0 <CalculateDirectReverseCrc>
 80047e6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80047ea:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80047ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047f2:	429a      	cmp	r2, r3
 80047f4:	f000 8104 	beq.w	8004a00 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3305      	adds	r3, #5
 80047fc:	461a      	mov	r2, r3
 80047fe:	2108      	movs	r1, #8
 8004800:	2000      	movs	r0, #0
 8004802:	f7fb ff07 	bl	8000614 <ExtractBits>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 80ba 	bne.w	8004982 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 800480e:	4872      	ldr	r0, [pc, #456]	; (80049d8 <Vital_Msg_extr_from_CAN+0x3a0>)
 8004810:	f01b fd90 	bl	8020334 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8004814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004818:	2280      	movs	r2, #128	; 0x80
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f01b fc05 	bl	802002c <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 8004822:	78ba      	ldrb	r2, [r7, #2]
 8004824:	4969      	ldr	r1, [pc, #420]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	3308      	adds	r3, #8
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800483a:	2118      	movs	r1, #24
 800483c:	2000      	movs	r0, #0
 800483e:	f7fb ff75 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004842:	2300      	movs	r3, #0
 8004844:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004848:	e011      	b.n	800486e <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 800484a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	441a      	add	r2, r3
 8004852:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004856:	3303      	adds	r3, #3
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800485e:	443b      	add	r3, r7
 8004860:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004864:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004868:	3301      	adds	r3, #1
 800486a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800486e:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	3b05      	subs	r3, #5
 8004876:	429a      	cmp	r2, r3
 8004878:	dbe7      	blt.n	800484a <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800487a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800487e:	b29b      	uxth	r3, r3
 8004880:	3303      	adds	r3, #3
 8004882:	b29a      	uxth	r2, r3
 8004884:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f00c f888 	bl	80109a0 <CalculateDirectReverseCrc>
 8004890:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	3b05      	subs	r3, #5
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	441a      	add	r2, r3
 800489c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80048a0:	2120      	movs	r1, #32
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fb feb6 	bl	8000614 <ExtractBits>
 80048a8:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 80048ac:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80048b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d14e      	bne.n	8004956 <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 80048b8:	4848      	ldr	r0, [pc, #288]	; (80049dc <Vital_Msg_extr_from_CAN+0x3a4>)
 80048ba:	f01b fd3b 	bl	8020334 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 80048be:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80048c2:	4847      	ldr	r0, [pc, #284]	; (80049e0 <Vital_Msg_extr_from_CAN+0x3a8>)
 80048c4:	f01b fc9a 	bl	80201fc <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80048c8:	78ba      	ldrb	r2, [r7, #2]
 80048ca:	4940      	ldr	r1, [pc, #256]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	440b      	add	r3, r1
 80048d6:	3308      	adds	r3, #8
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	4841      	ldr	r0, [pc, #260]	; (80049e4 <Vital_Msg_extr_from_CAN+0x3ac>)
 80048de:	f01b fc8d 	bl	80201fc <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80048e2:	78ba      	ldrb	r2, [r7, #2]
 80048e4:	4939      	ldr	r1, [pc, #228]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3308      	adds	r3, #8
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	1c59      	adds	r1, r3, #1
 80048f6:	4835      	ldr	r0, [pc, #212]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4403      	add	r3, r0
 8004902:	3308      	adds	r3, #8
 8004904:	6019      	str	r1, [r3, #0]
 8004906:	78b9      	ldrb	r1, [r7, #2]
 8004908:	4830      	ldr	r0, [pc, #192]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4403      	add	r3, r0
 8004914:	3308      	adds	r3, #8
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4833      	ldr	r0, [pc, #204]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 800491a:	010b      	lsls	r3, r1, #4
 800491c:	4403      	add	r3, r0
 800491e:	3308      	adds	r3, #8
 8004920:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8004922:	78bb      	ldrb	r3, [r7, #2]
 8004924:	4a30      	ldr	r2, [pc, #192]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	4413      	add	r3, r2
 800492a:	3308      	adds	r3, #8
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	482e      	ldr	r0, [pc, #184]	; (80049ec <Vital_Msg_extr_from_CAN+0x3b4>)
 8004932:	f01b fc63 	bl	80201fc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8004936:	78bb      	ldrb	r3, [r7, #2]
 8004938:	78ba      	ldrb	r2, [r7, #2]
 800493a:	492b      	ldr	r1, [pc, #172]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	440b      	add	r3, r1
 8004940:	3308      	adds	r3, #8
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	482a      	ldr	r0, [pc, #168]	; (80049f0 <Vital_Msg_extr_from_CAN+0x3b8>)
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4403      	add	r3, r0
 8004950:	3308      	adds	r3, #8
 8004952:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004954:	e055      	b.n	8004a02 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004956:	78bb      	ldrb	r3, [r7, #2]
 8004958:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 800495a:	3366      	adds	r3, #102	; 0x66
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4619      	mov	r1, r3
 8004964:	4823      	ldr	r0, [pc, #140]	; (80049f4 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004966:	f01b fc49 	bl	80201fc <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 800496a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800496e:	4822      	ldr	r0, [pc, #136]	; (80049f8 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004970:	f01b fc44 	bl	80201fc <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004974:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004978:	4820      	ldr	r0, [pc, #128]	; (80049fc <Vital_Msg_extr_from_CAN+0x3c4>)
 800497a:	f01b fc3f 	bl	80201fc <iprintf>
				return;
 800497e:	f000 bc55 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004982:	78bb      	ldrb	r3, [r7, #2]
 8004984:	4a0b      	ldr	r2, [pc, #44]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 8004986:	3366      	adds	r3, #102	; 0x66
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4619      	mov	r1, r3
 8004990:	4818      	ldr	r0, [pc, #96]	; (80049f4 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004992:	f01b fc33 	bl	80201fc <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004996:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800499a:	4817      	ldr	r0, [pc, #92]	; (80049f8 <Vital_Msg_extr_from_CAN+0x3c0>)
 800499c:	f01b fc2e 	bl	80201fc <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 80049a0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80049a4:	4815      	ldr	r0, [pc, #84]	; (80049fc <Vital_Msg_extr_from_CAN+0x3c4>)
 80049a6:	f01b fc29 	bl	80201fc <iprintf>
			return;
 80049aa:	f000 bc3f 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
 80049ae:	bf00      	nop
 80049b0:	2000197c 	.word	0x2000197c
 80049b4:	20000304 	.word	0x20000304
 80049b8:	08022154 	.word	0x08022154
 80049bc:	2000195c 	.word	0x2000195c
 80049c0:	20009088 	.word	0x20009088
 80049c4:	80008001 	.word	0x80008001
 80049c8:	08021eac 	.word	0x08021eac
 80049cc:	20001764 	.word	0x20001764
 80049d0:	08021ecc 	.word	0x08021ecc
 80049d4:	08021ef4 	.word	0x08021ef4
 80049d8:	08021f1c 	.word	0x08021f1c
 80049dc:	08022198 	.word	0x08022198
 80049e0:	08021f50 	.word	0x08021f50
 80049e4:	080221bc 	.word	0x080221bc
 80049e8:	200011c4 	.word	0x200011c4
 80049ec:	08021f90 	.word	0x08021f90
 80049f0:	20001674 	.word	0x20001674
 80049f4:	080221d8 	.word	0x080221d8
 80049f8:	08021bec 	.word	0x08021bec
 80049fc:	08021bfc 	.word	0x08021bfc
		}
	}
	ROLLOVER_VITAL_CAN:
 8004a00:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8004a02:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a06:	3308      	adds	r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da00      	bge.n	8004a0e <Vital_Msg_extr_from_CAN+0x3d6>
 8004a0c:	3307      	adds	r3, #7
 8004a0e:	10db      	asrs	r3, r3, #3
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a16:	4413      	add	r3, r2
 8004a18:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a1c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a20:	3308      	adds	r3, #8
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	425a      	negs	r2, r3
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	f002 0207 	and.w	r2, r2, #7
 8004a30:	bf58      	it	pl
 8004a32:	4253      	negpl	r3, r2
 8004a34:	b21b      	sxth	r3, r3
 8004a36:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a3a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	441a      	add	r2, r3
 8004a42:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a46:	2110      	movs	r1, #16
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fde3 	bl	8000614 <ExtractBits>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004a56:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	48c6      	ldr	r0, [pc, #792]	; (8004d78 <Vital_Msg_extr_from_CAN+0x740>)
 8004a5e:	f01b fbcd 	bl	80201fc <iprintf>
	BITSTUFFINC(16);
 8004a62:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a66:	3310      	adds	r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	da00      	bge.n	8004a6e <Vital_Msg_extr_from_CAN+0x436>
 8004a6c:	3307      	adds	r3, #7
 8004a6e:	10db      	asrs	r3, r3, #3
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a76:	4413      	add	r3, r2
 8004a78:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a7c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a80:	3310      	adds	r3, #16
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	425a      	negs	r2, r3
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	f002 0207 	and.w	r2, r2, #7
 8004a90:	bf58      	it	pl
 8004a92:	4253      	negpl	r3, r2
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a9a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004aa6:	2110      	movs	r1, #16
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fdb3 	bl	8000614 <ExtractBits>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004ab6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004aba:	4619      	mov	r1, r3
 8004abc:	48af      	ldr	r0, [pc, #700]	; (8004d7c <Vital_Msg_extr_from_CAN+0x744>)
 8004abe:	f01b fb9d 	bl	80201fc <iprintf>
	BITSTUFFINC(16);
 8004ac2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ac6:	3310      	adds	r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da00      	bge.n	8004ace <Vital_Msg_extr_from_CAN+0x496>
 8004acc:	3307      	adds	r3, #7
 8004ace:	10db      	asrs	r3, r3, #3
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004adc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b21b      	sxth	r3, r3
 8004ae6:	425a      	negs	r2, r3
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	f002 0207 	and.w	r2, r2, #7
 8004af0:	bf58      	it	pl
 8004af2:	4253      	negpl	r3, r2
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004afa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b06:	2108      	movs	r1, #8
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fd83 	bl	8000614 <ExtractBits>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004b16:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da00      	bge.n	8004b22 <Vital_Msg_extr_from_CAN+0x4ea>
 8004b20:	3307      	adds	r3, #7
 8004b22:	10db      	asrs	r3, r3, #3
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b30:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b34:	3308      	adds	r3, #8
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	b21b      	sxth	r3, r3
 8004b3a:	425a      	negs	r2, r3
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	f002 0207 	and.w	r2, r2, #7
 8004b44:	bf58      	it	pl
 8004b46:	4253      	negpl	r3, r2
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	441a      	add	r2, r3
 8004b56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fb fd59 	bl	8000614 <ExtractBits>
 8004b62:	4603      	mov	r3, r0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004b6a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	da00      	bge.n	8004b76 <Vital_Msg_extr_from_CAN+0x53e>
 8004b74:	3307      	adds	r3, #7
 8004b76:	10db      	asrs	r3, r3, #3
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b7e:	4413      	add	r3, r2
 8004b80:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b84:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b88:	3308      	adds	r3, #8
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	b21b      	sxth	r3, r3
 8004b8e:	425a      	negs	r2, r3
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	f002 0207 	and.w	r2, r2, #7
 8004b98:	bf58      	it	pl
 8004b9a:	4253      	negpl	r3, r2
 8004b9c:	b21b      	sxth	r3, r3
 8004b9e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ba2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bae:	2108      	movs	r1, #8
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fb fd2f 	bl	8000614 <ExtractBits>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004bbe:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	da00      	bge.n	8004bca <Vital_Msg_extr_from_CAN+0x592>
 8004bc8:	3307      	adds	r3, #7
 8004bca:	10db      	asrs	r3, r3, #3
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bd8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bdc:	3308      	adds	r3, #8
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	425a      	negs	r2, r3
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	f002 0207 	and.w	r2, r2, #7
 8004bec:	bf58      	it	pl
 8004bee:	4253      	negpl	r3, r2
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004bf6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c02:	2110      	movs	r1, #16
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fd05 	bl	8000614 <ExtractBits>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004c10:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c14:	3310      	adds	r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da00      	bge.n	8004c1c <Vital_Msg_extr_from_CAN+0x5e4>
 8004c1a:	3307      	adds	r3, #7
 8004c1c:	10db      	asrs	r3, r3, #3
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c24:	4413      	add	r3, r2
 8004c26:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c2a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c2e:	3310      	adds	r3, #16
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	b21b      	sxth	r3, r3
 8004c34:	425a      	negs	r2, r3
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	f002 0207 	and.w	r2, r2, #7
 8004c3e:	bf58      	it	pl
 8004c40:	4253      	negpl	r3, r2
 8004c42:	b21b      	sxth	r3, r3
 8004c44:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004c48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80fe 	beq.w	8004e50 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c54:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c60:	2108      	movs	r1, #8
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fcd6 	bl	8000614 <ExtractBits>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004c70:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c74:	3308      	adds	r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da00      	bge.n	8004c7c <Vital_Msg_extr_from_CAN+0x644>
 8004c7a:	3307      	adds	r3, #7
 8004c7c:	10db      	asrs	r3, r3, #3
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c84:	4413      	add	r3, r2
 8004c86:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c8a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c8e:	3308      	adds	r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b21b      	sxth	r3, r3
 8004c94:	425a      	negs	r2, r3
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	f002 0207 	and.w	r2, r2, #7
 8004c9e:	bf58      	it	pl
 8004ca0:	4253      	negpl	r3, r2
 8004ca2:	b21b      	sxth	r3, r3
 8004ca4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ca8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	441a      	add	r2, r3
 8004cb0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cb4:	2108      	movs	r1, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb fcac 	bl	8000614 <ExtractBits>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004cc4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004cc8:	3308      	adds	r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da00      	bge.n	8004cd0 <Vital_Msg_extr_from_CAN+0x698>
 8004cce:	3307      	adds	r3, #7
 8004cd0:	10db      	asrs	r3, r3, #3
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cd8:	4413      	add	r3, r2
 8004cda:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004cde:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	425a      	negs	r2, r3
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	f002 0207 	and.w	r2, r2, #7
 8004cf2:	bf58      	it	pl
 8004cf4:	4253      	negpl	r3, r2
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004cfc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	441a      	add	r2, r3
 8004d04:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d08:	2108      	movs	r1, #8
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fc82 	bl	8000614 <ExtractBits>
 8004d10:	4603      	mov	r3, r0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004d16:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da00      	bge.n	8004d22 <Vital_Msg_extr_from_CAN+0x6ea>
 8004d20:	3307      	adds	r3, #7
 8004d22:	10db      	asrs	r3, r3, #3
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d30:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d34:	3308      	adds	r3, #8
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	425a      	negs	r2, r3
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	f002 0207 	and.w	r2, r2, #7
 8004d44:	bf58      	it	pl
 8004d46:	4253      	negpl	r3, r2
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	441a      	add	r2, r3
 8004d56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d5a:	2108      	movs	r1, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fb fc59 	bl	8000614 <ExtractBits>
 8004d62:	4603      	mov	r3, r0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004d68:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da06      	bge.n	8004d80 <Vital_Msg_extr_from_CAN+0x748>
 8004d72:	3307      	adds	r3, #7
 8004d74:	e004      	b.n	8004d80 <Vital_Msg_extr_from_CAN+0x748>
 8004d76:	bf00      	nop
 8004d78:	08021cdc 	.word	0x08021cdc
 8004d7c:	08021ce4 	.word	0x08021ce4
 8004d80:	10db      	asrs	r3, r3, #3
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d88:	4413      	add	r3, r2
 8004d8a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d8e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d92:	3308      	adds	r3, #8
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	b21b      	sxth	r3, r3
 8004d98:	425a      	negs	r2, r3
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	f002 0207 	and.w	r2, r2, #7
 8004da2:	bf58      	it	pl
 8004da4:	4253      	negpl	r3, r2
 8004da6:	b21b      	sxth	r3, r3
 8004da8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004dac:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	441a      	add	r2, r3
 8004db4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004db8:	2108      	movs	r1, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fc2a 	bl	8000614 <ExtractBits>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004dc6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004dca:	3308      	adds	r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da00      	bge.n	8004dd2 <Vital_Msg_extr_from_CAN+0x79a>
 8004dd0:	3307      	adds	r3, #7
 8004dd2:	10db      	asrs	r3, r3, #3
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dda:	4413      	add	r3, r2
 8004ddc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004de0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004de4:	3308      	adds	r3, #8
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b21b      	sxth	r3, r3
 8004dea:	425a      	negs	r2, r3
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	f002 0207 	and.w	r2, r2, #7
 8004df4:	bf58      	it	pl
 8004df6:	4253      	negpl	r3, r2
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004dfe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	441a      	add	r2, r3
 8004e06:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e0a:	2108      	movs	r1, #8
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fb fc01 	bl	8000614 <ExtractBits>
 8004e12:	4603      	mov	r3, r0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004e18:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da00      	bge.n	8004e24 <Vital_Msg_extr_from_CAN+0x7ec>
 8004e22:	3307      	adds	r3, #7
 8004e24:	10db      	asrs	r3, r3, #3
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e32:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e36:	3308      	adds	r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	425a      	negs	r2, r3
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	f002 0207 	and.w	r2, r2, #7
 8004e46:	bf58      	it	pl
 8004e48:	4253      	negpl	r3, r2
 8004e4a:	b21b      	sxth	r3, r3
 8004e4c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8004e50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e60:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	441a      	add	r2, r3
 8004e68:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e6c:	2108      	movs	r1, #8
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb fbd0 	bl	8000614 <ExtractBits>
 8004e74:	4603      	mov	r3, r0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8004e7c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e80:	3308      	adds	r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da00      	bge.n	8004e88 <Vital_Msg_extr_from_CAN+0x850>
 8004e86:	3307      	adds	r3, #7
 8004e88:	10db      	asrs	r3, r3, #3
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e90:	4413      	add	r3, r2
 8004e92:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e96:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b21b      	sxth	r3, r3
 8004ea0:	425a      	negs	r2, r3
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	f002 0207 	and.w	r2, r2, #7
 8004eaa:	bf58      	it	pl
 8004eac:	4253      	negpl	r3, r2
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8004eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004eb8:	4619      	mov	r1, r3
 8004eba:	484b      	ldr	r0, [pc, #300]	; (8004fe8 <Vital_Msg_extr_from_CAN+0x9b0>)
 8004ebc:	f01b f99e 	bl	80201fc <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ec0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	441a      	add	r2, r3
 8004ec8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ecc:	2108      	movs	r1, #8
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fb fba0 	bl	8000614 <ExtractBits>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8004edc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	da00      	bge.n	8004ee8 <Vital_Msg_extr_from_CAN+0x8b0>
 8004ee6:	3307      	adds	r3, #7
 8004ee8:	10db      	asrs	r3, r3, #3
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ef6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004efa:	3308      	adds	r3, #8
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	425a      	negs	r2, r3
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	f002 0207 	and.w	r2, r2, #7
 8004f0a:	bf58      	it	pl
 8004f0c:	4253      	negpl	r3, r2
 8004f0e:	b21b      	sxth	r3, r3
 8004f10:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8004f14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 8004f20:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 8004f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f36:	e004      	b.n	8004f42 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 8004f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004f42:	2300      	movs	r3, #0
 8004f44:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004f48:	e040      	b.n	8004fcc <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f4a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	441a      	add	r2, r3
 8004f52:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f56:	2108      	movs	r1, #8
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb fb5b 	bl	8000614 <ExtractBits>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f6a:	443b      	add	r3, r7
 8004f6c:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8004f70:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8004f74:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f7c:	443b      	add	r3, r7
 8004f7e:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8004f82:	461a      	mov	r2, r3
 8004f84:	4819      	ldr	r0, [pc, #100]	; (8004fec <Vital_Msg_extr_from_CAN+0x9b4>)
 8004f86:	f01b f939 	bl	80201fc <iprintf>
		BITSTUFFINC(8);
 8004f8a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f8e:	3308      	adds	r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da00      	bge.n	8004f96 <Vital_Msg_extr_from_CAN+0x95e>
 8004f94:	3307      	adds	r3, #7
 8004f96:	10db      	asrs	r3, r3, #3
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004fa4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fa8:	3308      	adds	r3, #8
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	425a      	negs	r2, r3
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	f002 0207 	and.w	r2, r2, #7
 8004fb8:	bf58      	it	pl
 8004fba:	4253      	negpl	r3, r2
 8004fbc:	b21b      	sxth	r3, r3
 8004fbe:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004fc2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fcc:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d3b7      	bcc.n	8004f4a <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 8004fda:	200a      	movs	r0, #10
 8004fdc:	f01b f926 	bl	802022c <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fe6:	e037      	b.n	8005058 <Vital_Msg_extr_from_CAN+0xa20>
 8004fe8:	080221f4 	.word	0x080221f4
 8004fec:	080221fc 	.word	0x080221fc
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ff0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	441a      	add	r2, r3
 8004ff8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ffc:	2108      	movs	r1, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fb08 	bl	8000614 <ExtractBits>
 8005004:	4602      	mov	r2, r0
 8005006:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005010:	443b      	add	r3, r7
 8005012:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 8005016:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800501a:	3308      	adds	r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	da00      	bge.n	8005022 <Vital_Msg_extr_from_CAN+0x9ea>
 8005020:	3307      	adds	r3, #7
 8005022:	10db      	asrs	r3, r3, #3
 8005024:	b29a      	uxth	r2, r3
 8005026:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800502a:	4413      	add	r3, r2
 800502c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005030:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005034:	3308      	adds	r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	b21b      	sxth	r3, r3
 800503a:	425a      	negs	r2, r3
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	f002 0207 	and.w	r2, r2, #7
 8005044:	bf58      	it	pl
 8005046:	4253      	negpl	r3, r2
 8005048:	b21b      	sxth	r3, r3
 800504a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 800504e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005052:	3301      	adds	r3, #1
 8005054:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005058:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800505c:	b29b      	uxth	r3, r3
 800505e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005062:	429a      	cmp	r2, r3
 8005064:	d3c4      	bcc.n	8004ff0 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 8005066:	f107 0308 	add.w	r3, r7, #8
 800506a:	3301      	adds	r3, #1
 800506c:	2210      	movs	r2, #16
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f01a ffdb 	bl	802002c <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 8005076:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800507a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800507e:	1d59      	adds	r1, r3, #5
 8005080:	f107 0308 	add.w	r3, r7, #8
 8005084:	3301      	adds	r3, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f01a ffa8 	bl	801ffdc <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 800508c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005090:	b21a      	sxth	r2, r3
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	3301      	adds	r3, #1
 8005098:	4619      	mov	r1, r3
 800509a:	2000      	movs	r0, #0
 800509c:	f00b fbc6 	bl	801082c <GetCRC16>
 80050a0:	4603      	mov	r3, r0
 80050a2:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 80050a4:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80050a8:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 80050aa:	78bb      	ldrb	r3, [r7, #2]
 80050ac:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 80050ae:	78bb      	ldrb	r3, [r7, #2]
 80050b0:	4a60      	ldr	r2, [pc, #384]	; (8005234 <Vital_Msg_extr_from_CAN+0xbfc>)
 80050b2:	4413      	add	r3, r2
 80050b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d17f      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
 80050bc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d17b      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
 80050c4:	8b79      	ldrh	r1, [r7, #26]
 80050c6:	78ba      	ldrb	r2, [r7, #2]
 80050c8:	485b      	ldr	r0, [pc, #364]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4403      	add	r3, r0
 80050d4:	3312      	adds	r3, #18
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	4299      	cmp	r1, r3
 80050da:	d06f      	beq.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80050dc:	78ba      	ldrb	r2, [r7, #2]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4a54      	ldr	r2, [pc, #336]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80050e8:	4413      	add	r3, r2
 80050ea:	3301      	adds	r3, #1
 80050ec:	2210      	movs	r2, #16
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f01a ff9b 	bl	802002c <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80050f6:	78ba      	ldrb	r2, [r7, #2]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a4d      	ldr	r2, [pc, #308]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005102:	4413      	add	r3, r2
 8005104:	f107 0108 	add.w	r1, r7, #8
 8005108:	2214      	movs	r2, #20
 800510a:	4618      	mov	r0, r3
 800510c:	f01a ff66 	bl	801ffdc <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8005110:	78bb      	ldrb	r3, [r7, #2]
 8005112:	494a      	ldr	r1, [pc, #296]	; (800523c <Vital_Msg_extr_from_CAN+0xc04>)
 8005114:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 800511c:	78bb      	ldrb	r3, [r7, #2]
 800511e:	4a48      	ldr	r2, [pc, #288]	; (8005240 <Vital_Msg_extr_from_CAN+0xc08>)
 8005120:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005124:	78ba      	ldrb	r2, [r7, #2]
 8005126:	4844      	ldr	r0, [pc, #272]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4403      	add	r3, r0
 8005132:	3312      	adds	r3, #18
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	4299      	cmp	r1, r3
 8005138:	d040      	beq.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800513a:	78ba      	ldrb	r2, [r7, #2]
 800513c:	78b9      	ldrb	r1, [r7, #2]
 800513e:	483e      	ldr	r0, [pc, #248]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4403      	add	r3, r0
 800514a:	3312      	adds	r3, #18
 800514c:	881a      	ldrh	r2, [r3, #0]
 800514e:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <Vital_Msg_extr_from_CAN+0xc08>)
 8005150:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005154:	2214      	movs	r2, #20
 8005156:	2100      	movs	r1, #0
 8005158:	483a      	ldr	r0, [pc, #232]	; (8005244 <Vital_Msg_extr_from_CAN+0xc0c>)
 800515a:	f01a ff67 	bl	802002c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800515e:	78ba      	ldrb	r2, [r7, #2]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4a33      	ldr	r2, [pc, #204]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 800516a:	4413      	add	r3, r2
 800516c:	2214      	movs	r2, #20
 800516e:	4619      	mov	r1, r3
 8005170:	4834      	ldr	r0, [pc, #208]	; (8005244 <Vital_Msg_extr_from_CAN+0xc0c>)
 8005172:	f01a ff33 	bl	801ffdc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005176:	f240 2007 	movw	r0, #519	; 0x207
 800517a:	f007 ff73 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 800517e:	78bb      	ldrb	r3, [r7, #2]
 8005180:	4a31      	ldr	r2, [pc, #196]	; (8005248 <Vital_Msg_extr_from_CAN+0xc10>)
 8005182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d118      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800518a:	78bb      	ldrb	r3, [r7, #2]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <Vital_Msg_extr_from_CAN+0xc14>)
 8005190:	4413      	add	r3, r2
 8005192:	1c98      	adds	r0, r3, #2
 8005194:	78ba      	ldrb	r2, [r7, #2]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4a26      	ldr	r2, [pc, #152]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80051a0:	4413      	add	r3, r2
 80051a2:	3301      	adds	r3, #1
 80051a4:	2210      	movs	r2, #16
 80051a6:	4619      	mov	r1, r3
 80051a8:	f01a ff18 	bl	801ffdc <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 80051ac:	f240 1019 	movw	r0, #281	; 0x119
 80051b0:	f007 ff58 	bl	800d064 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 80051b4:	4a26      	ldr	r2, [pc, #152]	; (8005250 <Vital_Msg_extr_from_CAN+0xc18>)
 80051b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ba:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80051bc:	78ba      	ldrb	r2, [r7, #2]
 80051be:	4925      	ldr	r1, [pc, #148]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	78ba      	ldrb	r2, [r7, #2]
 80051cc:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80051ce:	78ba      	ldrb	r2, [r7, #2]
 80051d0:	4920      	ldr	r1, [pc, #128]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	3301      	adds	r3, #1
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80051e2:	2218      	movs	r2, #24
 80051e4:	2100      	movs	r1, #0
 80051e6:	481c      	ldr	r0, [pc, #112]	; (8005258 <Vital_Msg_extr_from_CAN+0xc20>)
 80051e8:	f01a ff20 	bl	802002c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80051ec:	78ba      	ldrb	r2, [r7, #2]
 80051ee:	4613      	mov	r3, r2
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051f8:	4413      	add	r3, r2
 80051fa:	2218      	movs	r2, #24
 80051fc:	4619      	mov	r1, r3
 80051fe:	4816      	ldr	r0, [pc, #88]	; (8005258 <Vital_Msg_extr_from_CAN+0xc20>)
 8005200:	f01a feec 	bl	801ffdc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005204:	f240 2001 	movw	r0, #513	; 0x201
 8005208:	f007 ff2c 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800520c:	78ba      	ldrb	r2, [r7, #2]
 800520e:	4911      	ldr	r1, [pc, #68]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	3301      	adds	r3, #1
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005220:	78bb      	ldrb	r3, [r7, #2]
 8005222:	490e      	ldr	r1, [pc, #56]	; (800525c <Vital_Msg_extr_from_CAN+0xc24>)
 8005224:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 800522c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000304 	.word	0x20000304
 8005238:	20001e80 	.word	0x20001e80
 800523c:	20000ed8 	.word	0x20000ed8
 8005240:	20000f00 	.word	0x20000f00
 8005244:	20002010 	.word	0x20002010
 8005248:	20000ec4 	.word	0x20000ec4
 800524c:	200010e4 	.word	0x200010e4
 8005250:	20000e70 	.word	0x20000e70
 8005254:	20001674 	.word	0x20001674
 8005258:	20001854 	.word	0x20001854
 800525c:	20000e44 	.word	0x20000e44

08005260 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b095      	sub	sp, #84	; 0x54
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	70fb      	strb	r3, [r7, #3]
 8005272:	460b      	mov	r3, r1
 8005274:	70bb      	strb	r3, [r7, #2]
 8005276:	4613      	mov	r3, r2
 8005278:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	2224      	movs	r2, #36	; 0x24
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f01a fed0 	bl	802002c <memset>
	uint8_t uc_index = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = CLEAR;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 80052a0:	f00d ffa2 	bl	80131e8 <HAL_GetTick>
 80052a4:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 80052ac:	2300      	movs	r3, #0
 80052ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80052b0:	2300      	movs	r3, #0
 80052b2:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80052b4:	499a      	ldr	r1, [pc, #616]	; (8005520 <Status_Msg_Extr+0x2c0>)
 80052b6:	489b      	ldr	r0, [pc, #620]	; (8005524 <Status_Msg_Extr+0x2c4>)
 80052b8:	f7fa ffc2 	bl	8000240 <strcmp>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 812c 	beq.w	800551c <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80052c4:	4b98      	ldr	r3, [pc, #608]	; (8005528 <Status_Msg_Extr+0x2c8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02c      	beq.n	800532a <Status_Msg_Extr+0xca>
 80052d0:	4b95      	ldr	r3, [pc, #596]	; (8005528 <Status_Msg_Extr+0x2c8>)
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	78ba      	ldrb	r2, [r7, #2]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d127      	bne.n	800532a <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 80052de:	4893      	ldr	r0, [pc, #588]	; (800552c <Status_Msg_Extr+0x2cc>)
 80052e0:	f012 fc34 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b92      	ldr	r3, [pc, #584]	; (8005530 <Status_Msg_Extr+0x2d0>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	0bd9      	lsrs	r1, r3, #15
 80052ee:	460b      	mov	r3, r1
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80052f8:	488e      	ldr	r0, [pc, #568]	; (8005534 <Status_Msg_Extr+0x2d4>)
 80052fa:	f01b f81b 	bl	8020334 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80052fe:	78bb      	ldrb	r3, [r7, #2]
 8005300:	4a8d      	ldr	r2, [pc, #564]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	4413      	add	r3, r2
 8005306:	3308      	adds	r3, #8
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	488b      	ldr	r0, [pc, #556]	; (800553c <Status_Msg_Extr+0x2dc>)
 800530e:	f01a ff75 	bl	80201fc <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005314:	488a      	ldr	r0, [pc, #552]	; (8005540 <Status_Msg_Extr+0x2e0>)
 8005316:	f01a ff71 	bl	80201fc <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 800531a:	f107 0208 	add.w	r2, r7, #8
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2118      	movs	r1, #24
 8005322:	2000      	movs	r0, #0
 8005324:	f7fb fa02 	bl	800072c <InsertBits>
	{
 8005328:	e00b      	b.n	8005342 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800532a:	78bb      	ldrb	r3, [r7, #2]
 800532c:	4a82      	ldr	r2, [pc, #520]	; (8005538 <Status_Msg_Extr+0x2d8>)
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	4413      	add	r3, r2
 8005332:	3308      	adds	r3, #8
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	2118      	movs	r1, #24
 800533c:	2000      	movs	r0, #0
 800533e:	f7fb f9f5 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005342:	2300      	movs	r3, #0
 8005344:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005348:	e010      	b.n	800536c <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 800534a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	441a      	add	r2, r3
 8005352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005356:	3303      	adds	r3, #3
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	3350      	adds	r3, #80	; 0x50
 800535c:	443b      	add	r3, r7
 800535e:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005362:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005366:	3301      	adds	r3, #1
 8005368:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800536c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	3b05      	subs	r3, #5
 8005374:	429a      	cmp	r2, r3
 8005376:	dbe8      	blt.n	800534a <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005378:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800537c:	b29b      	uxth	r3, r3
 800537e:	3303      	adds	r3, #3
 8005380:	b29a      	uxth	r2, r3
 8005382:	f107 0308 	add.w	r3, r7, #8
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f00b fb09 	bl	80109a0 <CalculateDirectReverseCrc>
 800538e:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	3b05      	subs	r3, #5
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	441a      	add	r2, r3
 8005398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800539a:	2120      	movs	r1, #32
 800539c:	4618      	mov	r0, r3
 800539e:	f7fb f939 	bl	8000614 <ExtractBits>
 80053a2:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 80053a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a8:	429a      	cmp	r2, r3
 80053aa:	f000 80df 	beq.w	800556c <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3305      	adds	r3, #5
 80053b2:	461a      	mov	r2, r3
 80053b4:	2108      	movs	r1, #8
 80053b6:	2000      	movs	r0, #0
 80053b8:	f7fb f92c 	bl	8000614 <ExtractBits>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 80053c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <Status_Msg_Extr+0x174>
 80053ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 8090 	bne.w	80054f4 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80053d4:	78bb      	ldrb	r3, [r7, #2]
 80053d6:	4a5b      	ldr	r2, [pc, #364]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80053d8:	3366      	adds	r3, #102	; 0x66
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4619      	mov	r1, r3
 80053e2:	4859      	ldr	r0, [pc, #356]	; (8005548 <Status_Msg_Extr+0x2e8>)
 80053e4:	f01a ff0a 	bl	80201fc <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	2228      	movs	r2, #40	; 0x28
 80053ee:	2100      	movs	r1, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f01a fe1b 	bl	802002c <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80053f6:	78bb      	ldrb	r3, [r7, #2]
 80053f8:	4a4f      	ldr	r2, [pc, #316]	; (8005538 <Status_Msg_Extr+0x2d8>)
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	4413      	add	r3, r2
 80053fe:	3308      	adds	r3, #8
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	f107 0208 	add.w	r2, r7, #8
 8005408:	2118      	movs	r1, #24
 800540a:	2000      	movs	r0, #0
 800540c:	f7fb f98e 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005410:	2300      	movs	r3, #0
 8005412:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005416:	e010      	b.n	800543a <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005418:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	441a      	add	r2, r3
 8005420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005424:	3303      	adds	r3, #3
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	3350      	adds	r3, #80	; 0x50
 800542a:	443b      	add	r3, r7
 800542c:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005430:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005434:	3301      	adds	r3, #1
 8005436:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800543a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	3b05      	subs	r3, #5
 8005442:	429a      	cmp	r2, r3
 8005444:	dbe8      	blt.n	8005418 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800544a:	b29b      	uxth	r3, r3
 800544c:	3303      	adds	r3, #3
 800544e:	b29a      	uxth	r2, r3
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f00b faa2 	bl	80109a0 <CalculateDirectReverseCrc>
 800545c:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 800545e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005462:	429a      	cmp	r2, r3
 8005464:	d132      	bne.n	80054cc <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005466:	4839      	ldr	r0, [pc, #228]	; (800554c <Status_Msg_Extr+0x2ec>)
 8005468:	f01a ff64 	bl	8020334 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800546c:	78bb      	ldrb	r3, [r7, #2]
 800546e:	4a32      	ldr	r2, [pc, #200]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	4413      	add	r3, r2
 8005474:	3308      	adds	r3, #8
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4619      	mov	r1, r3
 800547a:	4835      	ldr	r0, [pc, #212]	; (8005550 <Status_Msg_Extr+0x2f0>)
 800547c:	f01a febe 	bl	80201fc <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005480:	78bb      	ldrb	r3, [r7, #2]
 8005482:	492d      	ldr	r1, [pc, #180]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005484:	011a      	lsls	r2, r3, #4
 8005486:	440a      	add	r2, r1
 8005488:	3208      	adds	r2, #8
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	3201      	adds	r2, #1
 800548e:	492a      	ldr	r1, [pc, #168]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	440b      	add	r3, r1
 8005494:	3308      	adds	r3, #8
 8005496:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005498:	78bb      	ldrb	r3, [r7, #2]
 800549a:	4a27      	ldr	r2, [pc, #156]	; (8005538 <Status_Msg_Extr+0x2d8>)
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4413      	add	r3, r2
 80054a0:	3308      	adds	r3, #8
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4619      	mov	r1, r3
 80054a6:	482b      	ldr	r0, [pc, #172]	; (8005554 <Status_Msg_Extr+0x2f4>)
 80054a8:	f01a fea8 	bl	80201fc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80054ac:	78bb      	ldrb	r3, [r7, #2]
 80054ae:	78ba      	ldrb	r2, [r7, #2]
 80054b0:	4921      	ldr	r1, [pc, #132]	; (8005538 <Status_Msg_Extr+0x2d8>)
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	440b      	add	r3, r1
 80054b6:	3308      	adds	r3, #8
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	4827      	ldr	r0, [pc, #156]	; (8005558 <Status_Msg_Extr+0x2f8>)
 80054bc:	4613      	mov	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4403      	add	r3, r0
 80054c6:	3308      	adds	r3, #8
 80054c8:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 80054ca:	e050      	b.n	800556e <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054cc:	78bb      	ldrb	r3, [r7, #2]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80054d0:	3366      	adds	r3, #102	; 0x66
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4619      	mov	r1, r3
 80054da:	4820      	ldr	r0, [pc, #128]	; (800555c <Status_Msg_Extr+0x2fc>)
 80054dc:	f01a fe8e 	bl	80201fc <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80054e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054e2:	481f      	ldr	r0, [pc, #124]	; (8005560 <Status_Msg_Extr+0x300>)
 80054e4:	f01a fe8a 	bl	80201fc <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80054e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054ea:	481e      	ldr	r0, [pc, #120]	; (8005564 <Status_Msg_Extr+0x304>)
 80054ec:	f01a fe86 	bl	80201fc <iprintf>
				return;
 80054f0:	f000 bc33 	b.w	8005d5a <Status_Msg_Extr+0xafa>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054f4:	78bb      	ldrb	r3, [r7, #2]
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80054f8:	3366      	adds	r3, #102	; 0x66
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4619      	mov	r1, r3
 8005502:	4819      	ldr	r0, [pc, #100]	; (8005568 <Status_Msg_Extr+0x308>)
 8005504:	f01a fe7a 	bl	80201fc <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005508:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800550a:	4815      	ldr	r0, [pc, #84]	; (8005560 <Status_Msg_Extr+0x300>)
 800550c:	f01a fe76 	bl	80201fc <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005510:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005512:	4814      	ldr	r0, [pc, #80]	; (8005564 <Status_Msg_Extr+0x304>)
 8005514:	f01a fe72 	bl	80201fc <iprintf>
			return;
 8005518:	f000 bc1f 	b.w	8005d5a <Status_Msg_Extr+0xafa>
		goto ROLLOVER_STATUS;
 800551c:	bf00      	nop
 800551e:	e026      	b.n	800556e <Status_Msg_Extr+0x30e>
 8005520:	080219a8 	.word	0x080219a8
 8005524:	20000305 	.word	0x20000305
 8005528:	2000195c 	.word	0x2000195c
 800552c:	20009088 	.word	0x20009088
 8005530:	80008001 	.word	0x80008001
 8005534:	0802220c 	.word	0x0802220c
 8005538:	200011c4 	.word	0x200011c4
 800553c:	0802222c 	.word	0x0802222c
 8005540:	08021ef4 	.word	0x08021ef4
 8005544:	20000304 	.word	0x20000304
 8005548:	08022250 	.word	0x08022250
 800554c:	08021f38 	.word	0x08021f38
 8005550:	08022274 	.word	0x08022274
 8005554:	0802228c 	.word	0x0802228c
 8005558:	20001674 	.word	0x20001674
 800555c:	080222a4 	.word	0x080222a4
 8005560:	08021bec 	.word	0x08021bec
 8005564:	08021bfc 	.word	0x08021bfc
 8005568:	080222c4 	.word	0x080222c4
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 800556c:	bf00      	nop

	BITSTUFFINC(8);
 800556e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005572:	3308      	adds	r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	da00      	bge.n	800557a <Status_Msg_Extr+0x31a>
 8005578:	3307      	adds	r3, #7
 800557a:	10db      	asrs	r3, r3, #3
 800557c:	b29a      	uxth	r2, r3
 800557e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005580:	4413      	add	r3, r2
 8005582:	873b      	strh	r3, [r7, #56]	; 0x38
 8005584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005586:	3308      	adds	r3, #8
 8005588:	b29b      	uxth	r3, r3
 800558a:	b21b      	sxth	r3, r3
 800558c:	425a      	negs	r2, r3
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	f002 0207 	and.w	r2, r2, #7
 8005596:	bf58      	it	pl
 8005598:	4253      	negpl	r3, r2
 800559a:	b21b      	sxth	r3, r3
 800559c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800559e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	441a      	add	r2, r3
 80055a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055a6:	2110      	movs	r1, #16
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fb f833 	bl	8000614 <ExtractBits>
 80055ae:	4603      	mov	r3, r0
 80055b0:	78ba      	ldrb	r2, [r7, #2]
 80055b2:	b298      	uxth	r0, r3
 80055b4:	49ab      	ldr	r1, [pc, #684]	; (8005864 <Status_Msg_Extr+0x604>)
 80055b6:	4613      	mov	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3306      	adds	r3, #6
 80055c2:	4602      	mov	r2, r0
 80055c4:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 80055c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80055ca:	3310      	adds	r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	da00      	bge.n	80055d2 <Status_Msg_Extr+0x372>
 80055d0:	3307      	adds	r3, #7
 80055d2:	10db      	asrs	r3, r3, #3
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055d8:	4413      	add	r3, r2
 80055da:	873b      	strh	r3, [r7, #56]	; 0x38
 80055dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055de:	3310      	adds	r3, #16
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	b21b      	sxth	r3, r3
 80055e4:	425a      	negs	r2, r3
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	f002 0207 	and.w	r2, r2, #7
 80055ee:	bf58      	it	pl
 80055f0:	4253      	negpl	r3, r2
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80055f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	441a      	add	r2, r3
 80055fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055fe:	2110      	movs	r1, #16
 8005600:	4618      	mov	r0, r3
 8005602:	f7fb f807 	bl	8000614 <ExtractBits>
 8005606:	4603      	mov	r3, r0
 8005608:	78ba      	ldrb	r2, [r7, #2]
 800560a:	b298      	uxth	r0, r3
 800560c:	4995      	ldr	r1, [pc, #596]	; (8005864 <Status_Msg_Extr+0x604>)
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3304      	adds	r3, #4
 800561a:	4602      	mov	r2, r0
 800561c:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 800561e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005622:	3310      	adds	r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	da00      	bge.n	800562a <Status_Msg_Extr+0x3ca>
 8005628:	3307      	adds	r3, #7
 800562a:	10db      	asrs	r3, r3, #3
 800562c:	b29a      	uxth	r2, r3
 800562e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005630:	4413      	add	r3, r2
 8005632:	873b      	strh	r3, [r7, #56]	; 0x38
 8005634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005636:	3310      	adds	r3, #16
 8005638:	b29b      	uxth	r3, r3
 800563a:	b21b      	sxth	r3, r3
 800563c:	425a      	negs	r2, r3
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	f002 0207 	and.w	r2, r2, #7
 8005646:	bf58      	it	pl
 8005648:	4253      	negpl	r3, r2
 800564a:	b21b      	sxth	r3, r3
 800564c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800564e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	441a      	add	r2, r3
 8005654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005656:	2108      	movs	r1, #8
 8005658:	4618      	mov	r0, r3
 800565a:	f7fa ffdb 	bl	8000614 <ExtractBits>
 800565e:	4602      	mov	r2, r0
 8005660:	78bb      	ldrb	r3, [r7, #2]
 8005662:	b2d1      	uxtb	r1, r2
 8005664:	4a80      	ldr	r2, [pc, #512]	; (8005868 <Status_Msg_Extr+0x608>)
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	4413      	add	r3, r2
 800566a:	3302      	adds	r3, #2
 800566c:	460a      	mov	r2, r1
 800566e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005670:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005674:	3308      	adds	r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	da00      	bge.n	800567c <Status_Msg_Extr+0x41c>
 800567a:	3307      	adds	r3, #7
 800567c:	10db      	asrs	r3, r3, #3
 800567e:	b29a      	uxth	r2, r3
 8005680:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005682:	4413      	add	r3, r2
 8005684:	873b      	strh	r3, [r7, #56]	; 0x38
 8005686:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005688:	3308      	adds	r3, #8
 800568a:	b29b      	uxth	r3, r3
 800568c:	b21b      	sxth	r3, r3
 800568e:	425a      	negs	r2, r3
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	f002 0207 	and.w	r2, r2, #7
 8005698:	bf58      	it	pl
 800569a:	4253      	negpl	r3, r2
 800569c:	b21b      	sxth	r3, r3
 800569e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80056a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056a8:	2108      	movs	r1, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fa ffb2 	bl	8000614 <ExtractBits>
 80056b0:	4602      	mov	r2, r0
 80056b2:	78bb      	ldrb	r3, [r7, #2]
 80056b4:	b2d1      	uxtb	r1, r2
 80056b6:	4a6c      	ldr	r2, [pc, #432]	; (8005868 <Status_Msg_Extr+0x608>)
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	4413      	add	r3, r2
 80056bc:	3301      	adds	r3, #1
 80056be:	460a      	mov	r2, r1
 80056c0:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 80056c2:	78bb      	ldrb	r3, [r7, #2]
 80056c4:	4a68      	ldr	r2, [pc, #416]	; (8005868 <Status_Msg_Extr+0x608>)
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	4413      	add	r3, r2
 80056ca:	3301      	adds	r3, #1
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d138      	bne.n	8005744 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80056d2:	78bb      	ldrb	r3, [r7, #2]
 80056d4:	4a65      	ldr	r2, [pc, #404]	; (800586c <Status_Msg_Extr+0x60c>)
 80056d6:	3366      	adds	r3, #102	; 0x66
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4619      	mov	r1, r3
 80056e0:	4863      	ldr	r0, [pc, #396]	; (8005870 <Status_Msg_Extr+0x610>)
 80056e2:	f01a fd8b 	bl	80201fc <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80056e6:	78bb      	ldrb	r3, [r7, #2]
 80056e8:	4a5f      	ldr	r2, [pc, #380]	; (8005868 <Status_Msg_Extr+0x608>)
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	330c      	adds	r3, #12
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4619      	mov	r1, r3
 80056f4:	485f      	ldr	r0, [pc, #380]	; (8005874 <Status_Msg_Extr+0x614>)
 80056f6:	f01a fd81 	bl	80201fc <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80056fa:	78bb      	ldrb	r3, [r7, #2]
 80056fc:	495a      	ldr	r1, [pc, #360]	; (8005868 <Status_Msg_Extr+0x608>)
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	440a      	add	r2, r1
 8005702:	320c      	adds	r2, #12
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	3201      	adds	r2, #1
 8005708:	4957      	ldr	r1, [pc, #348]	; (8005868 <Status_Msg_Extr+0x608>)
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	440b      	add	r3, r1
 800570e:	330c      	adds	r3, #12
 8005710:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005712:	78bb      	ldrb	r3, [r7, #2]
 8005714:	4a54      	ldr	r2, [pc, #336]	; (8005868 <Status_Msg_Extr+0x608>)
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	4413      	add	r3, r2
 800571a:	330c      	adds	r3, #12
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	4855      	ldr	r0, [pc, #340]	; (8005878 <Status_Msg_Extr+0x618>)
 8005722:	f01a fd6b 	bl	80201fc <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005726:	78bb      	ldrb	r3, [r7, #2]
 8005728:	78ba      	ldrb	r2, [r7, #2]
 800572a:	494f      	ldr	r1, [pc, #316]	; (8005868 <Status_Msg_Extr+0x608>)
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	440b      	add	r3, r1
 8005730:	330c      	adds	r3, #12
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	4851      	ldr	r0, [pc, #324]	; (800587c <Status_Msg_Extr+0x61c>)
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4403      	add	r3, r0
 8005740:	330c      	adds	r3, #12
 8005742:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005744:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005748:	3308      	adds	r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	da00      	bge.n	8005750 <Status_Msg_Extr+0x4f0>
 800574e:	3307      	adds	r3, #7
 8005750:	10db      	asrs	r3, r3, #3
 8005752:	b29a      	uxth	r2, r3
 8005754:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005756:	4413      	add	r3, r2
 8005758:	873b      	strh	r3, [r7, #56]	; 0x38
 800575a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800575c:	3308      	adds	r3, #8
 800575e:	b29b      	uxth	r3, r3
 8005760:	b21b      	sxth	r3, r3
 8005762:	425a      	negs	r2, r3
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	f002 0207 	and.w	r2, r2, #7
 800576c:	bf58      	it	pl
 800576e:	4253      	negpl	r3, r2
 8005770:	b21b      	sxth	r3, r3
 8005772:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005774:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	441a      	add	r2, r3
 800577a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800577c:	2108      	movs	r1, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa ff48 	bl	8000614 <ExtractBits>
 8005784:	4603      	mov	r3, r0
 8005786:	78ba      	ldrb	r2, [r7, #2]
 8005788:	b2d8      	uxtb	r0, r3
 800578a:	4936      	ldr	r1, [pc, #216]	; (8005864 <Status_Msg_Extr+0x604>)
 800578c:	4613      	mov	r3, r2
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	3302      	adds	r3, #2
 8005798:	4602      	mov	r2, r0
 800579a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800579c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057a0:	3308      	adds	r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da00      	bge.n	80057a8 <Status_Msg_Extr+0x548>
 80057a6:	3307      	adds	r3, #7
 80057a8:	10db      	asrs	r3, r3, #3
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ae:	4413      	add	r3, r2
 80057b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80057b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057b4:	3308      	adds	r3, #8
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	425a      	negs	r2, r3
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	f002 0207 	and.w	r2, r2, #7
 80057c4:	bf58      	it	pl
 80057c6:	4253      	negpl	r3, r2
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80057cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	441a      	add	r2, r3
 80057d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057d4:	2110      	movs	r1, #16
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fa ff1c 	bl	8000614 <ExtractBits>
 80057dc:	4602      	mov	r2, r0
 80057de:	78bb      	ldrb	r3, [r7, #2]
 80057e0:	b291      	uxth	r1, r2
 80057e2:	4a21      	ldr	r2, [pc, #132]	; (8005868 <Status_Msg_Extr+0x608>)
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	460a      	mov	r2, r1
 80057ec:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80057ee:	4924      	ldr	r1, [pc, #144]	; (8005880 <Status_Msg_Extr+0x620>)
 80057f0:	4824      	ldr	r0, [pc, #144]	; (8005884 <Status_Msg_Extr+0x624>)
 80057f2:	f7fa fd25 	bl	8000240 <strcmp>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80057fc:	78bb      	ldrb	r3, [r7, #2]
 80057fe:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <Status_Msg_Extr+0x608>)
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	4413      	add	r3, r2
 8005804:	3304      	adds	r3, #4
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	78bb      	ldrb	r3, [r7, #2]
 800580a:	f042 0208 	orr.w	r2, r2, #8
 800580e:	b291      	uxth	r1, r2
 8005810:	4a15      	ldr	r2, [pc, #84]	; (8005868 <Status_Msg_Extr+0x608>)
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	4413      	add	r3, r2
 8005816:	3304      	adds	r3, #4
 8005818:	460a      	mov	r2, r1
 800581a:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 800581c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005820:	3310      	adds	r3, #16
 8005822:	2b00      	cmp	r3, #0
 8005824:	da00      	bge.n	8005828 <Status_Msg_Extr+0x5c8>
 8005826:	3307      	adds	r3, #7
 8005828:	10db      	asrs	r3, r3, #3
 800582a:	b29a      	uxth	r2, r3
 800582c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800582e:	4413      	add	r3, r2
 8005830:	873b      	strh	r3, [r7, #56]	; 0x38
 8005832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005834:	3310      	adds	r3, #16
 8005836:	b29b      	uxth	r3, r3
 8005838:	b21b      	sxth	r3, r3
 800583a:	425a      	negs	r2, r3
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	f002 0207 	and.w	r2, r2, #7
 8005844:	bf58      	it	pl
 8005846:	4253      	negpl	r3, r2
 8005848:	b21b      	sxth	r3, r3
 800584a:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 800584c:	78bb      	ldrb	r3, [r7, #2]
 800584e:	4a06      	ldr	r2, [pc, #24]	; (8005868 <Status_Msg_Extr+0x608>)
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 812f 	beq.w	8005ac0 <Status_Msg_Extr+0x860>
 8005862:	e011      	b.n	8005888 <Status_Msg_Extr+0x628>
 8005864:	200015fc 	.word	0x200015fc
 8005868:	200011c4 	.word	0x200011c4
 800586c:	20000304 	.word	0x20000304
 8005870:	08021ff0 	.word	0x08021ff0
 8005874:	080222dc 	.word	0x080222dc
 8005878:	080222e8 	.word	0x080222e8
 800587c:	20001674 	.word	0x20001674
 8005880:	080219a8 	.word	0x080219a8
 8005884:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005888:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	441a      	add	r2, r3
 800588e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005890:	2108      	movs	r1, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f7fa febe 	bl	8000614 <ExtractBits>
 8005898:	4603      	mov	r3, r0
 800589a:	78ba      	ldrb	r2, [r7, #2]
 800589c:	b2d8      	uxtb	r0, r3
 800589e:	4984      	ldr	r1, [pc, #528]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	440b      	add	r3, r1
 80058aa:	3305      	adds	r3, #5
 80058ac:	4602      	mov	r2, r0
 80058ae:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80058b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058b4:	3308      	adds	r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da00      	bge.n	80058bc <Status_Msg_Extr+0x65c>
 80058ba:	3307      	adds	r3, #7
 80058bc:	10db      	asrs	r3, r3, #3
 80058be:	b29a      	uxth	r2, r3
 80058c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058c2:	4413      	add	r3, r2
 80058c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80058c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058c8:	3308      	adds	r3, #8
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	425a      	negs	r2, r3
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	f002 0207 	and.w	r2, r2, #7
 80058d8:	bf58      	it	pl
 80058da:	4253      	negpl	r3, r2
 80058dc:	b21b      	sxth	r3, r3
 80058de:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80058e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	441a      	add	r2, r3
 80058e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058e8:	2108      	movs	r1, #8
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fe92 	bl	8000614 <ExtractBits>
 80058f0:	4603      	mov	r3, r0
 80058f2:	78ba      	ldrb	r2, [r7, #2]
 80058f4:	b2d8      	uxtb	r0, r3
 80058f6:	496e      	ldr	r1, [pc, #440]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	440b      	add	r3, r1
 8005902:	3304      	adds	r3, #4
 8005904:	4602      	mov	r2, r0
 8005906:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005908:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800590c:	3308      	adds	r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	da00      	bge.n	8005914 <Status_Msg_Extr+0x6b4>
 8005912:	3307      	adds	r3, #7
 8005914:	10db      	asrs	r3, r3, #3
 8005916:	b29a      	uxth	r2, r3
 8005918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800591a:	4413      	add	r3, r2
 800591c:	873b      	strh	r3, [r7, #56]	; 0x38
 800591e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005920:	3308      	adds	r3, #8
 8005922:	b29b      	uxth	r3, r3
 8005924:	b21b      	sxth	r3, r3
 8005926:	425a      	negs	r2, r3
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	f002 0207 	and.w	r2, r2, #7
 8005930:	bf58      	it	pl
 8005932:	4253      	negpl	r3, r2
 8005934:	b21b      	sxth	r3, r3
 8005936:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005938:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	441a      	add	r2, r3
 800593e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005940:	2108      	movs	r1, #8
 8005942:	4618      	mov	r0, r3
 8005944:	f7fa fe66 	bl	8000614 <ExtractBits>
 8005948:	4603      	mov	r3, r0
 800594a:	78ba      	ldrb	r2, [r7, #2]
 800594c:	b2d8      	uxtb	r0, r3
 800594e:	4958      	ldr	r1, [pc, #352]	; (8005ab0 <Status_Msg_Extr+0x850>)
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	440b      	add	r3, r1
 800595a:	3303      	adds	r3, #3
 800595c:	4602      	mov	r2, r0
 800595e:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005960:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005964:	3308      	adds	r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	da00      	bge.n	800596c <Status_Msg_Extr+0x70c>
 800596a:	3307      	adds	r3, #7
 800596c:	10db      	asrs	r3, r3, #3
 800596e:	b29a      	uxth	r2, r3
 8005970:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005972:	4413      	add	r3, r2
 8005974:	873b      	strh	r3, [r7, #56]	; 0x38
 8005976:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005978:	3308      	adds	r3, #8
 800597a:	b29b      	uxth	r3, r3
 800597c:	b21b      	sxth	r3, r3
 800597e:	425a      	negs	r2, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	f002 0207 	and.w	r2, r2, #7
 8005988:	bf58      	it	pl
 800598a:	4253      	negpl	r3, r2
 800598c:	b21b      	sxth	r3, r3
 800598e:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005990:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	441a      	add	r2, r3
 8005996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005998:	2108      	movs	r1, #8
 800599a:	4618      	mov	r0, r3
 800599c:	f7fa fe3a 	bl	8000614 <ExtractBits>
 80059a0:	4603      	mov	r3, r0
 80059a2:	78ba      	ldrb	r2, [r7, #2]
 80059a4:	b2d8      	uxtb	r0, r3
 80059a6:	4942      	ldr	r1, [pc, #264]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80059a8:	4613      	mov	r3, r2
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	4413      	add	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	440b      	add	r3, r1
 80059b2:	4602      	mov	r2, r0
 80059b4:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80059b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059ba:	3308      	adds	r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	da00      	bge.n	80059c2 <Status_Msg_Extr+0x762>
 80059c0:	3307      	adds	r3, #7
 80059c2:	10db      	asrs	r3, r3, #3
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059c8:	4413      	add	r3, r2
 80059ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80059cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ce:	3308      	adds	r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	425a      	negs	r2, r3
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	f002 0207 	and.w	r2, r2, #7
 80059de:	bf58      	it	pl
 80059e0:	4253      	negpl	r3, r2
 80059e2:	b21b      	sxth	r3, r3
 80059e4:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	441a      	add	r2, r3
 80059ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ee:	2108      	movs	r1, #8
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fa fe0f 	bl	8000614 <ExtractBits>
 80059f6:	4603      	mov	r3, r0
 80059f8:	78ba      	ldrb	r2, [r7, #2]
 80059fa:	b2d8      	uxtb	r0, r3
 80059fc:	492c      	ldr	r1, [pc, #176]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	440b      	add	r3, r1
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a0e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a12:	3308      	adds	r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da00      	bge.n	8005a1a <Status_Msg_Extr+0x7ba>
 8005a18:	3307      	adds	r3, #7
 8005a1a:	10db      	asrs	r3, r3, #3
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a20:	4413      	add	r3, r2
 8005a22:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a26:	3308      	adds	r3, #8
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b21b      	sxth	r3, r3
 8005a2c:	425a      	negs	r2, r3
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	f002 0207 	and.w	r2, r2, #7
 8005a36:	bf58      	it	pl
 8005a38:	4253      	negpl	r3, r2
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	441a      	add	r2, r3
 8005a44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a46:	2108      	movs	r1, #8
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fa fde3 	bl	8000614 <ExtractBits>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	78ba      	ldrb	r2, [r7, #2]
 8005a52:	b2d8      	uxtb	r0, r3
 8005a54:	4916      	ldr	r1, [pc, #88]	; (8005ab0 <Status_Msg_Extr+0x850>)
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	440b      	add	r3, r1
 8005a60:	3302      	adds	r3, #2
 8005a62:	4602      	mov	r2, r0
 8005a64:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a66:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	da00      	bge.n	8005a72 <Status_Msg_Extr+0x812>
 8005a70:	3307      	adds	r3, #7
 8005a72:	10db      	asrs	r3, r3, #3
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a78:	4413      	add	r3, r2
 8005a7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a7e:	3308      	adds	r3, #8
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	425a      	negs	r2, r3
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	f002 0207 	and.w	r2, r2, #7
 8005a8e:	bf58      	it	pl
 8005a90:	4253      	negpl	r3, r2
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005a96:	78bb      	ldrb	r3, [r7, #2]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f003 f937 	bl	8008d0c <IS_MLK_EIPC_TIME_MATCHING>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d009      	beq.n	8005ab8 <Status_Msg_Extr+0x858>
 8005aa4:	78bb      	ldrb	r3, [r7, #2]
 8005aa6:	4a03      	ldr	r2, [pc, #12]	; (8005ab4 <Status_Msg_Extr+0x854>)
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	54d1      	strb	r1, [r2, r3]
 8005aac:	e008      	b.n	8005ac0 <Status_Msg_Extr+0x860>
 8005aae:	bf00      	nop
 8005ab0:	20001188 	.word	0x20001188
 8005ab4:	200010d8 	.word	0x200010d8
 8005ab8:	78bb      	ldrb	r3, [r7, #2]
 8005aba:	4aa9      	ldr	r2, [pc, #676]	; (8005d60 <Status_Msg_Extr+0xb00>)
 8005abc:	2101      	movs	r1, #1
 8005abe:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005ac0:	78bb      	ldrb	r3, [r7, #2]
 8005ac2:	4aa8      	ldr	r2, [pc, #672]	; (8005d64 <Status_Msg_Extr+0xb04>)
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3304      	adds	r3, #4
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <Status_Msg_Extr+0x87a>
	{
		LinkEstablishFlag = SET;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005ada:	787a      	ldrb	r2, [r7, #1]
 8005adc:	78bb      	ldrb	r3, [r7, #2]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f961 	bl	8005da8 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005ae6:	78bb      	ldrb	r3, [r7, #2]
 8005ae8:	499f      	ldr	r1, [pc, #636]	; (8005d68 <Status_Msg_Extr+0xb08>)
 8005aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005af0:	78bb      	ldrb	r3, [r7, #2]
 8005af2:	499e      	ldr	r1, [pc, #632]	; (8005d6c <Status_Msg_Extr+0xb0c>)
 8005af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005afa:	78ba      	ldrb	r2, [r7, #2]
 8005afc:	499c      	ldr	r1, [pc, #624]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005afe:	4613      	mov	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	4413      	add	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	440b      	add	r3, r1
 8005b08:	3310      	adds	r3, #16
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	78bc      	ldrb	r4, [r7, #2]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f006 fce8 	bl	800c4e4 <HAL_Elaps_Ticks>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4996      	ldr	r1, [pc, #600]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005b18:	4623      	mov	r3, r4
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4423      	add	r3, r4
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	440b      	add	r3, r1
 8005b22:	3310      	adds	r3, #16
 8005b24:	601a      	str	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d16d      	bne.n	8005c0a <Status_Msg_Extr+0x9aa>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005b2e:	78ba      	ldrb	r2, [r7, #2]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4a8e      	ldr	r2, [pc, #568]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	2210      	movs	r2, #16
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f01a fa72 	bl	802002c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005b48:	78ba      	ldrb	r2, [r7, #2]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a88      	ldr	r2, [pc, #544]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b54:	1898      	adds	r0, r3, r2
 8005b56:	78ba      	ldrb	r2, [r7, #2]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4a85      	ldr	r2, [pc, #532]	; (8005d78 <Status_Msg_Extr+0xb18>)
 8005b62:	4413      	add	r3, r2
 8005b64:	2214      	movs	r2, #20
 8005b66:	4619      	mov	r1, r3
 8005b68:	f01a fa38 	bl	801ffdc <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005b6c:	78bb      	ldrb	r3, [r7, #2]
 8005b6e:	4a83      	ldr	r2, [pc, #524]	; (8005d7c <Status_Msg_Extr+0xb1c>)
 8005b70:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b74:	78ba      	ldrb	r2, [r7, #2]
 8005b76:	487f      	ldr	r0, [pc, #508]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4403      	add	r3, r0
 8005b82:	3312      	adds	r3, #18
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	4299      	cmp	r1, r3
 8005b88:	d03f      	beq.n	8005c0a <Status_Msg_Extr+0x9aa>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005b8a:	78ba      	ldrb	r2, [r7, #2]
 8005b8c:	78b9      	ldrb	r1, [r7, #2]
 8005b8e:	4879      	ldr	r0, [pc, #484]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4403      	add	r3, r0
 8005b9a:	3312      	adds	r3, #18
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	4b77      	ldr	r3, [pc, #476]	; (8005d7c <Status_Msg_Extr+0xb1c>)
 8005ba0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005ba4:	2214      	movs	r2, #20
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4875      	ldr	r0, [pc, #468]	; (8005d80 <Status_Msg_Extr+0xb20>)
 8005baa:	f01a fa3f 	bl	802002c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005bae:	78ba      	ldrb	r2, [r7, #2]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4a6e      	ldr	r2, [pc, #440]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005bba:	4413      	add	r3, r2
 8005bbc:	2214      	movs	r2, #20
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	486f      	ldr	r0, [pc, #444]	; (8005d80 <Status_Msg_Extr+0xb20>)
 8005bc2:	f01a fa0b 	bl	801ffdc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005bc6:	f240 2007 	movw	r0, #519	; 0x207
 8005bca:	f007 fa4b 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005bce:	78bb      	ldrb	r3, [r7, #2]
 8005bd0:	4a6c      	ldr	r2, [pc, #432]	; (8005d84 <Status_Msg_Extr+0xb24>)
 8005bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d117      	bne.n	8005c0a <Status_Msg_Extr+0x9aa>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005bda:	78bb      	ldrb	r3, [r7, #2]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4a6a      	ldr	r2, [pc, #424]	; (8005d88 <Status_Msg_Extr+0xb28>)
 8005be0:	4413      	add	r3, r2
 8005be2:	1c98      	adds	r0, r3, #2
 8005be4:	78ba      	ldrb	r2, [r7, #2]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4a61      	ldr	r2, [pc, #388]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f01a f9f0 	bl	801ffdc <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8005bfc:	f240 1019 	movw	r0, #281	; 0x119
 8005c00:	f007 fa30 	bl	800d064 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005c04:	4a61      	ldr	r2, [pc, #388]	; (8005d8c <Status_Msg_Extr+0xb2c>)
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c08:	6013      	str	r3, [r2, #0]
		}
	}


	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005c0a:	78b9      	ldrb	r1, [r7, #2]
 8005c0c:	78ba      	ldrb	r2, [r7, #2]
 8005c0e:	4859      	ldr	r0, [pc, #356]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005c10:	460b      	mov	r3, r1
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4403      	add	r3, r0
 8005c1a:	3312      	adds	r3, #18
 8005c1c:	8818      	ldrh	r0, [r3, #0]
 8005c1e:	4954      	ldr	r1, [pc, #336]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	440b      	add	r3, r1
 8005c2a:	3306      	adds	r3, #6
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005c30:	78ba      	ldrb	r2, [r7, #2]
 8005c32:	494f      	ldr	r1, [pc, #316]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3314      	adds	r3, #20
 8005c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c42:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005c44:	78ba      	ldrb	r2, [r7, #2]
 8005c46:	494a      	ldr	r1, [pc, #296]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	440b      	add	r3, r1
 8005c52:	3305      	adds	r3, #5
 8005c54:	2204      	movs	r2, #4
 8005c56:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005c58:	78ba      	ldrb	r2, [r7, #2]
 8005c5a:	4945      	ldr	r1, [pc, #276]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	440b      	add	r3, r1
 8005c66:	78ba      	ldrb	r2, [r7, #2]
 8005c68:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005c6a:	78ba      	ldrb	r2, [r7, #2]
 8005c6c:	4940      	ldr	r1, [pc, #256]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c6e:	4613      	mov	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	3301      	adds	r3, #1
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005c7e:	78ba      	ldrb	r2, [r7, #2]
 8005c80:	493b      	ldr	r1, [pc, #236]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005c92:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005c94:	2218      	movs	r2, #24
 8005c96:	2100      	movs	r1, #0
 8005c98:	483d      	ldr	r0, [pc, #244]	; (8005d90 <Status_Msg_Extr+0xb30>)
 8005c9a:	f01a f9c7 	bl	802002c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005c9e:	78ba      	ldrb	r2, [r7, #2]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005caa:	4413      	add	r3, r2
 8005cac:	2218      	movs	r2, #24
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4837      	ldr	r0, [pc, #220]	; (8005d90 <Status_Msg_Extr+0xb30>)
 8005cb2:	f01a f993 	bl	801ffdc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005cb6:	f240 2001 	movw	r0, #513	; 0x201
 8005cba:	f007 f9d3 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005cbe:	78ba      	ldrb	r2, [r7, #2]
 8005cc0:	492b      	ldr	r1, [pc, #172]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	3301      	adds	r3, #1
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005cd2:	78bb      	ldrb	r3, [r7, #2]
 8005cd4:	492f      	ldr	r1, [pc, #188]	; (8005d94 <Status_Msg_Extr+0xb34>)
 8005cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d11d      	bne.n	8005d20 <Status_Msg_Extr+0xac0>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005ce4:	78bb      	ldrb	r3, [r7, #2]
 8005ce6:	492c      	ldr	r1, [pc, #176]	; (8005d98 <Status_Msg_Extr+0xb38>)
 8005ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005cee:	78ba      	ldrb	r2, [r7, #2]
 8005cf0:	492a      	ldr	r1, [pc, #168]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d00:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005d02:	78ba      	ldrb	r2, [r7, #2]
 8005d04:	4925      	ldr	r1, [pc, #148]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3301      	adds	r3, #1
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8005d16:	78bb      	ldrb	r3, [r7, #2]
 8005d18:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <Status_Msg_Extr+0xb40>)
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	54d1      	strb	r1, [r2, r3]
 8005d1e:	e017      	b.n	8005d50 <Status_Msg_Extr+0xaf0>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8005d20:	78bb      	ldrb	r3, [r7, #2]
 8005d22:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <Status_Msg_Extr+0xb40>)
 8005d24:	2100      	movs	r1, #0
 8005d26:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005d28:	78ba      	ldrb	r2, [r7, #2]
 8005d2a:	491c      	ldr	r1, [pc, #112]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3308      	adds	r3, #8
 8005d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d3a:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8005d3c:	78ba      	ldrb	r2, [r7, #2]
 8005d3e:	4917      	ldr	r1, [pc, #92]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d54:	4813      	ldr	r0, [pc, #76]	; (8005da4 <Status_Msg_Extr+0xb44>)
 8005d56:	f00f ff30 	bl	8015bba <HAL_GPIO_TogglePin>

}
 8005d5a:	3754      	adds	r7, #84	; 0x54
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd90      	pop	{r4, r7, pc}
 8005d60:	200010d8 	.word	0x200010d8
 8005d64:	200011c4 	.word	0x200011c4
 8005d68:	20000fa4 	.word	0x20000fa4
 8005d6c:	20000fcc 	.word	0x20000fcc
 8005d70:	20001674 	.word	0x20001674
 8005d74:	20001e80 	.word	0x20001e80
 8005d78:	20001db8 	.word	0x20001db8
 8005d7c:	20000f00 	.word	0x20000f00
 8005d80:	20002010 	.word	0x20002010
 8005d84:	20000ec4 	.word	0x20000ec4
 8005d88:	200010e4 	.word	0x200010e4
 8005d8c:	20000e70 	.word	0x20000e70
 8005d90:	20001854 	.word	0x20001854
 8005d94:	20000e44 	.word	0x20000e44
 8005d98:	20000f14 	.word	0x20000f14
 8005d9c:	20001cc8 	.word	0x20001cc8
 8005da0:	20000f64 	.word	0x20000f64
 8005da4:	40021c00 	.word	0x40021c00

08005da8 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b0a5      	sub	sp, #148	; 0x94
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	460a      	mov	r2, r1
 8005db2:	71fb      	strb	r3, [r7, #7]
 8005db4:	4613      	mov	r3, r2
 8005db6:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8005db8:	2300      	movs	r3, #0
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005dc0:	2238      	movs	r2, #56	; 0x38
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f01a f931 	bl	802002c <memset>
	uint8_t Temp_Buff[60] = {0,};
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	f107 0310 	add.w	r3, r7, #16
 8005dd2:	2238      	movs	r2, #56	; 0x38
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f01a f928 	bl	802002c <memset>
	uint8_t uc_index = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8005dee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005df2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005df6:	441a      	add	r2, r3
 8005df8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005dfc:	23f4      	movs	r3, #244	; 0xf4
 8005dfe:	2108      	movs	r1, #8
 8005e00:	f7fa fc94 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8005e04:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e08:	3308      	adds	r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da00      	bge.n	8005e10 <Send_Status_Message+0x68>
 8005e0e:	3307      	adds	r3, #7
 8005e10:	10db      	asrs	r3, r3, #3
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e18:	4413      	add	r3, r2
 8005e1a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e22:	3308      	adds	r3, #8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	425a      	negs	r2, r3
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	f002 0207 	and.w	r2, r2, #7
 8005e32:	bf58      	it	pl
 8005e34:	4253      	negpl	r3, r2
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005e3c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e44:	441a      	add	r2, r3
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	49bc      	ldr	r1, [pc, #752]	; (800613c <Send_Status_Message+0x394>)
 8005e4a:	3366      	adds	r3, #102	; 0x66
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e56:	2110      	movs	r1, #16
 8005e58:	f7fa fc68 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005e5c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e60:	3310      	adds	r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da00      	bge.n	8005e68 <Send_Status_Message+0xc0>
 8005e66:	3307      	adds	r3, #7
 8005e68:	10db      	asrs	r3, r3, #3
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e70:	4413      	add	r3, r2
 8005e72:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e7a:	3310      	adds	r3, #16
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	425a      	negs	r2, r3
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	f002 0207 	and.w	r2, r2, #7
 8005e8a:	bf58      	it	pl
 8005e8c:	4253      	negpl	r3, r2
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8005e94:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e9c:	441a      	add	r2, r3
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	49a6      	ldr	r1, [pc, #664]	; (800613c <Send_Status_Message+0x394>)
 8005ea2:	3370      	adds	r3, #112	; 0x70
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005eae:	2110      	movs	r1, #16
 8005eb0:	f7fa fc3c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005eb4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005eb8:	3310      	adds	r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da00      	bge.n	8005ec0 <Send_Status_Message+0x118>
 8005ebe:	3307      	adds	r3, #7
 8005ec0:	10db      	asrs	r3, r3, #3
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ec8:	4413      	add	r3, r2
 8005eca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005ece:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	b21b      	sxth	r3, r3
 8005ed8:	425a      	negs	r2, r3
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	f002 0207 	and.w	r2, r2, #7
 8005ee2:	bf58      	it	pl
 8005ee4:	4253      	negpl	r3, r2
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005eec:	4b94      	ldr	r3, [pc, #592]	; (8006140 <Send_Status_Message+0x398>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d035      	beq.n	8005f66 <Send_Status_Message+0x1be>
 8005efa:	4b91      	ldr	r3, [pc, #580]	; (8006140 <Send_Status_Message+0x398>)
 8005efc:	791b      	ldrb	r3, [r3, #4]
 8005efe:	79fa      	ldrb	r2, [r7, #7]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d130      	bne.n	8005f66 <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 8005f0a:	488e      	ldr	r0, [pc, #568]	; (8006144 <Send_Status_Message+0x39c>)
 8005f0c:	f011 fe1e 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8005f10:	4602      	mov	r2, r0
 8005f12:	4b8d      	ldr	r3, [pc, #564]	; (8006148 <Send_Status_Message+0x3a0>)
 8005f14:	fba3 1302 	umull	r1, r3, r3, r2
 8005f18:	099b      	lsrs	r3, r3, #6
 8005f1a:	21c8      	movs	r1, #200	; 0xc8
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 8005f26:	4889      	ldr	r0, [pc, #548]	; (800614c <Send_Status_Message+0x3a4>)
 8005f28:	f01a fa04 	bl	8020334 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	4a88      	ldr	r2, [pc, #544]	; (8006150 <Send_Status_Message+0x3a8>)
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	4413      	add	r3, r2
 8005f34:	3301      	adds	r3, #1
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4886      	ldr	r0, [pc, #536]	; (8006154 <Send_Status_Message+0x3ac>)
 8005f3c:	f01a f95e 	bl	80201fc <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8005f40:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f44:	4619      	mov	r1, r3
 8005f46:	4884      	ldr	r0, [pc, #528]	; (8006158 <Send_Status_Message+0x3b0>)
 8005f48:	f01a f958 	bl	80201fc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8005f4c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f54:	441a      	add	r2, r3
 8005f56:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f5a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f5e:	2108      	movs	r1, #8
 8005f60:	f7fa fbe4 	bl	800072c <InsertBits>
	{
 8005f64:	e00f      	b.n	8005f86 <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8005f66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f6e:	441a      	add	r2, r3
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	4977      	ldr	r1, [pc, #476]	; (8006150 <Send_Status_Message+0x3a8>)
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	440b      	add	r3, r1
 8005f78:	3301      	adds	r3, #1
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f80:	2108      	movs	r1, #8
 8005f82:	f7fa fbd3 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8005f86:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	da00      	bge.n	8005f92 <Send_Status_Message+0x1ea>
 8005f90:	3307      	adds	r3, #7
 8005f92:	10db      	asrs	r3, r3, #3
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005fa0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	425a      	negs	r2, r3
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	f002 0207 	and.w	r2, r2, #7
 8005fb4:	bf58      	it	pl
 8005fb6:	4253      	negpl	r3, r2
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005fbe:	4b60      	ldr	r3, [pc, #384]	; (8006140 <Send_Status_Message+0x398>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d038      	beq.n	800603e <Send_Status_Message+0x296>
 8005fcc:	4b5c      	ldr	r3, [pc, #368]	; (8006140 <Send_Status_Message+0x398>)
 8005fce:	791b      	ldrb	r3, [r3, #4]
 8005fd0:	79fa      	ldrb	r2, [r7, #7]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d133      	bne.n	800603e <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8005fdc:	4859      	ldr	r0, [pc, #356]	; (8006144 <Send_Status_Message+0x39c>)
 8005fde:	f011 fdb5 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b58      	ldr	r3, [pc, #352]	; (8006148 <Send_Status_Message+0x3a0>)
 8005fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	21c8      	movs	r1, #200	; 0xc8
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8005ff8:	4858      	ldr	r0, [pc, #352]	; (800615c <Send_Status_Message+0x3b4>)
 8005ffa:	f01a f99b 	bl	8020334 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	4a53      	ldr	r2, [pc, #332]	; (8006150 <Send_Status_Message+0x3a8>)
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	4413      	add	r3, r2
 8006006:	3302      	adds	r3, #2
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	4854      	ldr	r0, [pc, #336]	; (8006160 <Send_Status_Message+0x3b8>)
 800600e:	f01a f8f5 	bl	80201fc <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8006012:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006016:	4619      	mov	r1, r3
 8006018:	4852      	ldr	r0, [pc, #328]	; (8006164 <Send_Status_Message+0x3bc>)
 800601a:	f01a f8ef 	bl	80201fc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 800601e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006022:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006026:	441a      	add	r2, r3
 8006028:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800602c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006030:	2108      	movs	r1, #8
 8006032:	f7fa fb7b 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 8006036:	4b4c      	ldr	r3, [pc, #304]	; (8006168 <Send_Status_Message+0x3c0>)
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
	{
 800603c:	e020      	b.n	8006080 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 800603e:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <Send_Status_Message+0x3c0>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8006044:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006048:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800604c:	18d1      	adds	r1, r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	483f      	ldr	r0, [pc, #252]	; (8006150 <Send_Status_Message+0x3a8>)
 8006052:	011a      	lsls	r2, r3, #4
 8006054:	4402      	add	r2, r0
 8006056:	3202      	adds	r2, #2
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	3201      	adds	r2, #1
 800605c:	b2d4      	uxtb	r4, r2
 800605e:	483c      	ldr	r0, [pc, #240]	; (8006150 <Send_Status_Message+0x3a8>)
 8006060:	011a      	lsls	r2, r3, #4
 8006062:	4402      	add	r2, r0
 8006064:	3202      	adds	r2, #2
 8006066:	4620      	mov	r0, r4
 8006068:	7010      	strb	r0, [r2, #0]
 800606a:	4a39      	ldr	r2, [pc, #228]	; (8006150 <Send_Status_Message+0x3a8>)
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	4413      	add	r3, r2
 8006070:	3302      	adds	r3, #2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006078:	460a      	mov	r2, r1
 800607a:	2108      	movs	r1, #8
 800607c:	f7fa fb56 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006080:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006084:	3308      	adds	r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	da00      	bge.n	800608c <Send_Status_Message+0x2e4>
 800608a:	3307      	adds	r3, #7
 800608c:	10db      	asrs	r3, r3, #3
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006094:	4413      	add	r3, r2
 8006096:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800609a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800609e:	3308      	adds	r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b21b      	sxth	r3, r3
 80060a4:	425a      	negs	r2, r3
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	f002 0207 	and.w	r2, r2, #7
 80060ae:	bf58      	it	pl
 80060b0:	4253      	negpl	r3, r2
 80060b2:	b21b      	sxth	r3, r3
 80060b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 80060b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060c0:	441a      	add	r2, r3
 80060c2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060c6:	2304      	movs	r3, #4
 80060c8:	2108      	movs	r1, #8
 80060ca:	f7fa fb2f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80060ce:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80060d2:	3308      	adds	r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da00      	bge.n	80060da <Send_Status_Message+0x332>
 80060d8:	3307      	adds	r3, #7
 80060da:	10db      	asrs	r3, r3, #3
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060e2:	4413      	add	r3, r2
 80060e4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060ec:	3308      	adds	r3, #8
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	425a      	negs	r2, r3
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	f002 0207 	and.w	r2, r2, #7
 80060fc:	bf58      	it	pl
 80060fe:	4253      	negpl	r3, r2
 8006100:	b21b      	sxth	r3, r3
 8006102:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	4a11      	ldr	r2, [pc, #68]	; (8006150 <Send_Status_Message+0x3a8>)
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d052      	beq.n	80061c0 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <Send_Status_Message+0x3c4>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d125      	bne.n	8006170 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006124:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006128:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800612c:	441a      	add	r2, r3
 800612e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006132:	2368      	movs	r3, #104	; 0x68
 8006134:	2110      	movs	r1, #16
 8006136:	f7fa faf9 	bl	800072c <InsertBits>
 800613a:	e024      	b.n	8006186 <Send_Status_Message+0x3de>
 800613c:	20000304 	.word	0x20000304
 8006140:	2000195c 	.word	0x2000195c
 8006144:	20009088 	.word	0x20009088
 8006148:	51eb851f 	.word	0x51eb851f
 800614c:	08021d50 	.word	0x08021d50
 8006150:	200011c4 	.word	0x200011c4
 8006154:	080222f4 	.word	0x080222f4
 8006158:	08022314 	.word	0x08022314
 800615c:	08021db4 	.word	0x08021db4
 8006160:	08022334 	.word	0x08022334
 8006164:	08022354 	.word	0x08022354
 8006168:	20000e39 	.word	0x20000e39
 800616c:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006170:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006174:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006178:	441a      	add	r2, r3
 800617a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800617e:	2328      	movs	r3, #40	; 0x28
 8006180:	2110      	movs	r1, #16
 8006182:	f7fa fad3 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006186:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800618a:	3310      	adds	r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	da00      	bge.n	8006192 <Send_Status_Message+0x3ea>
 8006190:	3307      	adds	r3, #7
 8006192:	10db      	asrs	r3, r3, #3
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800619a:	4413      	add	r3, r2
 800619c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80061a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061a4:	3310      	adds	r3, #16
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	425a      	negs	r2, r3
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	f002 0207 	and.w	r2, r2, #7
 80061b4:	bf58      	it	pl
 80061b6:	4253      	negpl	r3, r2
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061be:	e03a      	b.n	8006236 <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <Send_Status_Message+0x43c>)
 80061c4:	5cd3      	ldrb	r3, [r2, r3]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10e      	bne.n	80061e8 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 80061ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061d2:	441a      	add	r2, r3
 80061d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061d8:	2364      	movs	r3, #100	; 0x64
 80061da:	2110      	movs	r1, #16
 80061dc:	f7fa faa6 	bl	800072c <InsertBits>
 80061e0:	e00d      	b.n	80061fe <Send_Status_Message+0x456>
 80061e2:	bf00      	nop
 80061e4:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 80061e8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061f0:	441a      	add	r2, r3
 80061f2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061f6:	2324      	movs	r3, #36	; 0x24
 80061f8:	2110      	movs	r1, #16
 80061fa:	f7fa fa97 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 80061fe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006202:	3310      	adds	r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	da00      	bge.n	800620a <Send_Status_Message+0x462>
 8006208:	3307      	adds	r3, #7
 800620a:	10db      	asrs	r3, r3, #3
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006212:	4413      	add	r3, r2
 8006214:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006218:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800621c:	3310      	adds	r3, #16
 800621e:	b29b      	uxth	r3, r3
 8006220:	b21b      	sxth	r3, r3
 8006222:	425a      	negs	r2, r3
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	f002 0207 	and.w	r2, r2, #7
 800622c:	bf58      	it	pl
 800622e:	4253      	negpl	r3, r2
 8006230:	b21b      	sxth	r3, r3
 8006232:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	4ac6      	ldr	r2, [pc, #792]	; (8006554 <Send_Status_Message+0x7ac>)
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4413      	add	r3, r2
 800623e:	3304      	adds	r3, #4
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	b29b      	uxth	r3, r3
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8139 	beq.w	80064c2 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	4ac1      	ldr	r2, [pc, #772]	; (8006558 <Send_Status_Message+0x7b0>)
 8006254:	5cd3      	ldrb	r3, [r2, r3]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d114      	bne.n	8006284 <Send_Status_Message+0x4dc>
		{
			Get_time();
 800625a:	f005 f965 	bl	800b528 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800625e:	79fa      	ldrb	r2, [r7, #7]
 8006260:	4613      	mov	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	4abc      	ldr	r2, [pc, #752]	; (800655c <Send_Status_Message+0x7b4>)
 800626a:	4413      	add	r3, r2
 800626c:	4abc      	ldr	r2, [pc, #752]	; (8006560 <Send_Status_Message+0x7b8>)
 800626e:	6811      	ldr	r1, [r2, #0]
 8006270:	6019      	str	r1, [r3, #0]
 8006272:	8892      	ldrh	r2, [r2, #4]
 8006274:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006276:	48bb      	ldr	r0, [pc, #748]	; (8006564 <Send_Status_Message+0x7bc>)
 8006278:	f01a f85c 	bl	8020334 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	4ab6      	ldr	r2, [pc, #728]	; (8006558 <Send_Status_Message+0x7b0>)
 8006280:	2100      	movs	r1, #0
 8006282:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006284:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006288:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800628c:	18d1      	adds	r1, r2, r3
 800628e:	79fa      	ldrb	r2, [r7, #7]
 8006290:	48b2      	ldr	r0, [pc, #712]	; (800655c <Send_Status_Message+0x7b4>)
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4403      	add	r3, r0
 800629c:	3305      	adds	r3, #5
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062a4:	460a      	mov	r2, r1
 80062a6:	2108      	movs	r1, #8
 80062a8:	f7fa fa40 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80062ac:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80062b0:	3308      	adds	r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da00      	bge.n	80062b8 <Send_Status_Message+0x510>
 80062b6:	3307      	adds	r3, #7
 80062b8:	10db      	asrs	r3, r3, #3
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062c0:	4413      	add	r3, r2
 80062c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80062c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062ca:	3308      	adds	r3, #8
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	b21b      	sxth	r3, r3
 80062d0:	425a      	negs	r2, r3
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	f002 0207 	and.w	r2, r2, #7
 80062da:	bf58      	it	pl
 80062dc:	4253      	negpl	r3, r2
 80062de:	b21b      	sxth	r3, r3
 80062e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80062e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062ec:	18d1      	adds	r1, r2, r3
 80062ee:	79fa      	ldrb	r2, [r7, #7]
 80062f0:	489a      	ldr	r0, [pc, #616]	; (800655c <Send_Status_Message+0x7b4>)
 80062f2:	4613      	mov	r3, r2
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4413      	add	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4403      	add	r3, r0
 80062fc:	3304      	adds	r3, #4
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006304:	460a      	mov	r2, r1
 8006306:	2108      	movs	r1, #8
 8006308:	f7fa fa10 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800630c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006310:	3308      	adds	r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	da00      	bge.n	8006318 <Send_Status_Message+0x570>
 8006316:	3307      	adds	r3, #7
 8006318:	10db      	asrs	r3, r3, #3
 800631a:	b29a      	uxth	r2, r3
 800631c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006320:	4413      	add	r3, r2
 8006322:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006326:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800632a:	3308      	adds	r3, #8
 800632c:	b29b      	uxth	r3, r3
 800632e:	b21b      	sxth	r3, r3
 8006330:	425a      	negs	r2, r3
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	f002 0207 	and.w	r2, r2, #7
 800633a:	bf58      	it	pl
 800633c:	4253      	negpl	r3, r2
 800633e:	b21b      	sxth	r3, r3
 8006340:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006344:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006348:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800634c:	18d1      	adds	r1, r2, r3
 800634e:	79fa      	ldrb	r2, [r7, #7]
 8006350:	4882      	ldr	r0, [pc, #520]	; (800655c <Send_Status_Message+0x7b4>)
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4403      	add	r3, r0
 800635c:	3303      	adds	r3, #3
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006364:	460a      	mov	r2, r1
 8006366:	2108      	movs	r1, #8
 8006368:	f7fa f9e0 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800636c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006370:	3308      	adds	r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	da00      	bge.n	8006378 <Send_Status_Message+0x5d0>
 8006376:	3307      	adds	r3, #7
 8006378:	10db      	asrs	r3, r3, #3
 800637a:	b29a      	uxth	r2, r3
 800637c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006380:	4413      	add	r3, r2
 8006382:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006386:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800638a:	3308      	adds	r3, #8
 800638c:	b29b      	uxth	r3, r3
 800638e:	b21b      	sxth	r3, r3
 8006390:	425a      	negs	r2, r3
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	f002 0207 	and.w	r2, r2, #7
 800639a:	bf58      	it	pl
 800639c:	4253      	negpl	r3, r2
 800639e:	b21b      	sxth	r3, r3
 80063a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80063a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063ac:	18d1      	adds	r1, r2, r3
 80063ae:	79fa      	ldrb	r2, [r7, #7]
 80063b0:	486a      	ldr	r0, [pc, #424]	; (800655c <Send_Status_Message+0x7b4>)
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4403      	add	r3, r0
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063c2:	460a      	mov	r2, r1
 80063c4:	2108      	movs	r1, #8
 80063c6:	f7fa f9b1 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80063ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80063ce:	3308      	adds	r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da00      	bge.n	80063d6 <Send_Status_Message+0x62e>
 80063d4:	3307      	adds	r3, #7
 80063d6:	10db      	asrs	r3, r3, #3
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063de:	4413      	add	r3, r2
 80063e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80063e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063e8:	3308      	adds	r3, #8
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	b21b      	sxth	r3, r3
 80063ee:	425a      	negs	r2, r3
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	f002 0207 	and.w	r2, r2, #7
 80063f8:	bf58      	it	pl
 80063fa:	4253      	negpl	r3, r2
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006402:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006406:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800640a:	18d1      	adds	r1, r2, r3
 800640c:	79fa      	ldrb	r2, [r7, #7]
 800640e:	4853      	ldr	r0, [pc, #332]	; (800655c <Send_Status_Message+0x7b4>)
 8006410:	4613      	mov	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	4413      	add	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4403      	add	r3, r0
 800641a:	3301      	adds	r3, #1
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006422:	460a      	mov	r2, r1
 8006424:	2108      	movs	r1, #8
 8006426:	f7fa f981 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800642a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800642e:	3308      	adds	r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	da00      	bge.n	8006436 <Send_Status_Message+0x68e>
 8006434:	3307      	adds	r3, #7
 8006436:	10db      	asrs	r3, r3, #3
 8006438:	b29a      	uxth	r2, r3
 800643a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800643e:	4413      	add	r3, r2
 8006440:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006448:	3308      	adds	r3, #8
 800644a:	b29b      	uxth	r3, r3
 800644c:	b21b      	sxth	r3, r3
 800644e:	425a      	negs	r2, r3
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	f002 0207 	and.w	r2, r2, #7
 8006458:	bf58      	it	pl
 800645a:	4253      	negpl	r3, r2
 800645c:	b21b      	sxth	r3, r3
 800645e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006462:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006466:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800646a:	18d1      	adds	r1, r2, r3
 800646c:	79fa      	ldrb	r2, [r7, #7]
 800646e:	483b      	ldr	r0, [pc, #236]	; (800655c <Send_Status_Message+0x7b4>)
 8006470:	4613      	mov	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	4413      	add	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4403      	add	r3, r0
 800647a:	3302      	adds	r3, #2
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006482:	460a      	mov	r2, r1
 8006484:	2108      	movs	r1, #8
 8006486:	f7fa f951 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800648a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800648e:	3308      	adds	r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	da00      	bge.n	8006496 <Send_Status_Message+0x6ee>
 8006494:	3307      	adds	r3, #7
 8006496:	10db      	asrs	r3, r3, #3
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800649e:	4413      	add	r3, r2
 80064a0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80064a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064a8:	3308      	adds	r3, #8
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	b21b      	sxth	r3, r3
 80064ae:	425a      	negs	r2, r3
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	f002 0207 	and.w	r2, r2, #7
 80064b8:	bf58      	it	pl
 80064ba:	4253      	negpl	r3, r2
 80064bc:	b21b      	sxth	r3, r3
 80064be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80064c2:	4b29      	ldr	r3, [pc, #164]	; (8006568 <Send_Status_Message+0x7c0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <Send_Status_Message+0x78c>
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <Send_Status_Message+0x7c0>)
 80064d2:	791b      	ldrb	r3, [r3, #4]
 80064d4:	79fa      	ldrb	r2, [r7, #7]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d12c      	bne.n	8006534 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 80064e0:	4822      	ldr	r0, [pc, #136]	; (800656c <Send_Status_Message+0x7c4>)
 80064e2:	f011 fb33 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b21      	ldr	r3, [pc, #132]	; (8006570 <Send_Status_Message+0x7c8>)
 80064ea:	fba3 1302 	umull	r1, r3, r3, r2
 80064ee:	0dd9      	lsrs	r1, r3, #23
 80064f0:	460b      	mov	r3, r1
 80064f2:	041b      	lsls	r3, r3, #16
 80064f4:	1a5b      	subs	r3, r3, r1
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80064fe:	481d      	ldr	r0, [pc, #116]	; (8006574 <Send_Status_Message+0x7cc>)
 8006500:	f019 ff18 	bl	8020334 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	4a13      	ldr	r2, [pc, #76]	; (8006554 <Send_Status_Message+0x7ac>)
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	4413      	add	r3, r2
 800650c:	330c      	adds	r3, #12
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	4819      	ldr	r0, [pc, #100]	; (8006578 <Send_Status_Message+0x7d0>)
 8006514:	f019 fe72 	bl	80201fc <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 8006518:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800651c:	4817      	ldr	r0, [pc, #92]	; (800657c <Send_Status_Message+0x7d4>)
 800651e:	f019 fe6d 	bl	80201fc <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006522:	f107 020c 	add.w	r2, r7, #12
 8006526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800652a:	2118      	movs	r1, #24
 800652c:	2000      	movs	r0, #0
 800652e:	f7fa f8fd 	bl	800072c <InsertBits>
	{
 8006532:	e00b      	b.n	800654c <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <Send_Status_Message+0x7ac>)
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	4413      	add	r3, r2
 800653c:	330c      	adds	r3, #12
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f107 020c 	add.w	r2, r7, #12
 8006544:	2118      	movs	r1, #24
 8006546:	2000      	movs	r0, #0
 8006548:	f7fa f8f0 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800654c:	2300      	movs	r3, #0
 800654e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006552:	e027      	b.n	80065a4 <Send_Status_Message+0x7fc>
 8006554:	200011c4 	.word	0x200011c4
 8006558:	200010d8 	.word	0x200010d8
 800655c:	20001188 	.word	0x20001188
 8006560:	20002890 	.word	0x20002890
 8006564:	080220d0 	.word	0x080220d0
 8006568:	2000195c 	.word	0x2000195c
 800656c:	20009088 	.word	0x20009088
 8006570:	80008001 	.word	0x80008001
 8006574:	080220e8 	.word	0x080220e8
 8006578:	0802210c 	.word	0x0802210c
 800657c:	08022130 	.word	0x08022130
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006580:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006584:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006588:	3303      	adds	r3, #3
 800658a:	3290      	adds	r2, #144	; 0x90
 800658c:	443a      	add	r2, r7
 800658e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006592:	3390      	adds	r3, #144	; 0x90
 8006594:	443b      	add	r3, r7
 8006596:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800659a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800659e:	3301      	adds	r3, #1
 80065a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80065a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d8e6      	bhi.n	8006580 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 80065b2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80065ba:	18d4      	adds	r4, r2, r3
 80065bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3303      	adds	r3, #3
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f107 030c 	add.w	r3, r7, #12
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f00a f9e7 	bl	80109a0 <CalculateDirectReverseCrc>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80065d8:	4622      	mov	r2, r4
 80065da:	2120      	movs	r1, #32
 80065dc:	f7fa f8a6 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 80065e0:	4b1f      	ldr	r3, [pc, #124]	; (8006660 <Send_Status_Message+0x8b8>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 80065e6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065ea:	3320      	adds	r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da00      	bge.n	80065f2 <Send_Status_Message+0x84a>
 80065f0:	3307      	adds	r3, #7
 80065f2:	10db      	asrs	r3, r3, #3
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065fa:	4413      	add	r3, r2
 80065fc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006600:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006604:	3320      	adds	r3, #32
 8006606:	b29b      	uxth	r3, r3
 8006608:	b21b      	sxth	r3, r3
 800660a:	425a      	negs	r2, r3
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	f002 0207 	and.w	r2, r2, #7
 8006614:	bf58      	it	pl
 8006616:	4253      	negpl	r3, r2
 8006618:	b21b      	sxth	r3, r3
 800661a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <Send_Status_Message+0x8bc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	0a5b      	lsrs	r3, r3, #9
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <Send_Status_Message+0x89c>
 800662c:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <Send_Status_Message+0x8bc>)
 800662e:	791b      	ldrb	r3, [r3, #4]
 8006630:	79fa      	ldrb	r2, [r7, #7]
 8006632:	429a      	cmp	r2, r3
 8006634:	d106      	bne.n	8006644 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 8006636:	480c      	ldr	r0, [pc, #48]	; (8006668 <Send_Status_Message+0x8c0>)
 8006638:	f019 fe7c 	bl	8020334 <puts>
		printf("Not Sending Reply");
 800663c:	480b      	ldr	r0, [pc, #44]	; (800666c <Send_Status_Message+0x8c4>)
 800663e:	f019 fddd 	bl	80201fc <iprintf>
 8006642:	e009      	b.n	8006658 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006644:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006648:	b2d9      	uxtb	r1, r3
 800664a:	79fa      	ldrb	r2, [r7, #7]
 800664c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006650:	4618      	mov	r0, r3
 8006652:	f000 ffb5 	bl	80075c0 <Process_Sending_Reply>
	}
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	3794      	adds	r7, #148	; 0x94
 800665c:	46bd      	mov	sp, r7
 800665e:	bd90      	pop	{r4, r7, pc}
 8006660:	20000e39 	.word	0x20000e39
 8006664:	2000195c 	.word	0x2000195c
 8006668:	08021e80 	.word	0x08021e80
 800666c:	08021e98 	.word	0x08021e98

08006670 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	461a      	mov	r2, r3
 800667e:	4603      	mov	r3, r0
 8006680:	70fb      	strb	r3, [r7, #3]
 8006682:	460b      	mov	r3, r1
 8006684:	70bb      	strb	r3, [r7, #2]
 8006686:	4613      	mov	r3, r2
 8006688:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = CLEAR;
 8006692:	2300      	movs	r3, #0
 8006694:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8006696:	f00c fda7 	bl	80131e8 <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 800669c:	2300      	movs	r3, #0
 800669e:	81fb      	strh	r3, [r7, #14]
 80066a0:	2300      	movs	r3, #0
 80066a2:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b05      	subs	r3, #5
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f00a f976 	bl	80109a0 <CalculateDirectReverseCrc>
 80066b4:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	3b05      	subs	r3, #5
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	441a      	add	r2, r3
 80066be:	89bb      	ldrh	r3, [r7, #12]
 80066c0:	2120      	movs	r1, #32
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7f9 ffa6 	bl	8000614 <ExtractBits>
 80066c8:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d01a      	beq.n	8006708 <Service_Msg_Extr+0x98>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80066d2:	78bb      	ldrb	r3, [r7, #2]
 80066d4:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <Service_Msg_Extr+0x88>)
 80066d6:	3366      	adds	r3, #102	; 0x66
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4619      	mov	r1, r3
 80066e0:	4806      	ldr	r0, [pc, #24]	; (80066fc <Service_Msg_Extr+0x8c>)
 80066e2:	f019 fd8b 	bl	80201fc <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	4805      	ldr	r0, [pc, #20]	; (8006700 <Service_Msg_Extr+0x90>)
 80066ea:	f019 fd87 	bl	80201fc <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 80066ee:	69b9      	ldr	r1, [r7, #24]
 80066f0:	4804      	ldr	r0, [pc, #16]	; (8006704 <Service_Msg_Extr+0x94>)
 80066f2:	f019 fd83 	bl	80201fc <iprintf>
		return;
 80066f6:	e39f      	b.n	8006e38 <Service_Msg_Extr+0x7c8>
 80066f8:	20000304 	.word	0x20000304
 80066fc:	08022378 	.word	0x08022378
 8006700:	08021bec 	.word	0x08021bec
 8006704:	08021bfc 	.word	0x08021bfc
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 8006708:	78bb      	ldrb	r3, [r7, #2]
 800670a:	49ae      	ldr	r1, [pc, #696]	; (80069c4 <Service_Msg_Extr+0x354>)
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8006712:	78bb      	ldrb	r3, [r7, #2]
 8006714:	49ac      	ldr	r1, [pc, #688]	; (80069c8 <Service_Msg_Extr+0x358>)
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 800671c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006720:	3308      	adds	r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	da00      	bge.n	8006728 <Service_Msg_Extr+0xb8>
 8006726:	3307      	adds	r3, #7
 8006728:	10db      	asrs	r3, r3, #3
 800672a:	b29a      	uxth	r2, r3
 800672c:	89fb      	ldrh	r3, [r7, #14]
 800672e:	4413      	add	r3, r2
 8006730:	81fb      	strh	r3, [r7, #14]
 8006732:	89bb      	ldrh	r3, [r7, #12]
 8006734:	3308      	adds	r3, #8
 8006736:	b29b      	uxth	r3, r3
 8006738:	b21b      	sxth	r3, r3
 800673a:	425a      	negs	r2, r3
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	f002 0207 	and.w	r2, r2, #7
 8006744:	bf58      	it	pl
 8006746:	4253      	negpl	r3, r2
 8006748:	b21b      	sxth	r3, r3
 800674a:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800674c:	89fb      	ldrh	r3, [r7, #14]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	441a      	add	r2, r3
 8006752:	89bb      	ldrh	r3, [r7, #12]
 8006754:	2110      	movs	r1, #16
 8006756:	4618      	mov	r0, r3
 8006758:	f7f9 ff5c 	bl	8000614 <ExtractBits>
 800675c:	4603      	mov	r3, r0
 800675e:	78ba      	ldrb	r2, [r7, #2]
 8006760:	b298      	uxth	r0, r3
 8006762:	499a      	ldr	r1, [pc, #616]	; (80069cc <Service_Msg_Extr+0x35c>)
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3306      	adds	r3, #6
 8006770:	4602      	mov	r2, r0
 8006772:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006774:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006778:	3310      	adds	r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	da00      	bge.n	8006780 <Service_Msg_Extr+0x110>
 800677e:	3307      	adds	r3, #7
 8006780:	10db      	asrs	r3, r3, #3
 8006782:	b29a      	uxth	r2, r3
 8006784:	89fb      	ldrh	r3, [r7, #14]
 8006786:	4413      	add	r3, r2
 8006788:	81fb      	strh	r3, [r7, #14]
 800678a:	89bb      	ldrh	r3, [r7, #12]
 800678c:	3310      	adds	r3, #16
 800678e:	b29b      	uxth	r3, r3
 8006790:	b21b      	sxth	r3, r3
 8006792:	425a      	negs	r2, r3
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	f002 0207 	and.w	r2, r2, #7
 800679c:	bf58      	it	pl
 800679e:	4253      	negpl	r3, r2
 80067a0:	b21b      	sxth	r3, r3
 80067a2:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80067a4:	89fb      	ldrh	r3, [r7, #14]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	441a      	add	r2, r3
 80067aa:	89bb      	ldrh	r3, [r7, #12]
 80067ac:	2110      	movs	r1, #16
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7f9 ff30 	bl	8000614 <ExtractBits>
 80067b4:	4603      	mov	r3, r0
 80067b6:	78ba      	ldrb	r2, [r7, #2]
 80067b8:	b298      	uxth	r0, r3
 80067ba:	4984      	ldr	r1, [pc, #528]	; (80069cc <Service_Msg_Extr+0x35c>)
 80067bc:	4613      	mov	r3, r2
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	3304      	adds	r3, #4
 80067c8:	4602      	mov	r2, r0
 80067ca:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80067cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067d0:	3310      	adds	r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da00      	bge.n	80067d8 <Service_Msg_Extr+0x168>
 80067d6:	3307      	adds	r3, #7
 80067d8:	10db      	asrs	r3, r3, #3
 80067da:	b29a      	uxth	r2, r3
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	4413      	add	r3, r2
 80067e0:	81fb      	strh	r3, [r7, #14]
 80067e2:	89bb      	ldrh	r3, [r7, #12]
 80067e4:	3310      	adds	r3, #16
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b21b      	sxth	r3, r3
 80067ea:	425a      	negs	r2, r3
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	f002 0207 	and.w	r2, r2, #7
 80067f4:	bf58      	it	pl
 80067f6:	4253      	negpl	r3, r2
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80067fc:	89fb      	ldrh	r3, [r7, #14]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	441a      	add	r2, r3
 8006802:	89bb      	ldrh	r3, [r7, #12]
 8006804:	2108      	movs	r1, #8
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 ff04 	bl	8000614 <ExtractBits>
 800680c:	4602      	mov	r2, r0
 800680e:	78bb      	ldrb	r3, [r7, #2]
 8006810:	b2d1      	uxtb	r1, r2
 8006812:	4a6f      	ldr	r2, [pc, #444]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	4413      	add	r3, r2
 8006818:	3302      	adds	r3, #2
 800681a:	460a      	mov	r2, r1
 800681c:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800681e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006822:	3308      	adds	r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	da00      	bge.n	800682a <Service_Msg_Extr+0x1ba>
 8006828:	3307      	adds	r3, #7
 800682a:	10db      	asrs	r3, r3, #3
 800682c:	b29a      	uxth	r2, r3
 800682e:	89fb      	ldrh	r3, [r7, #14]
 8006830:	4413      	add	r3, r2
 8006832:	81fb      	strh	r3, [r7, #14]
 8006834:	89bb      	ldrh	r3, [r7, #12]
 8006836:	3308      	adds	r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	b21b      	sxth	r3, r3
 800683c:	425a      	negs	r2, r3
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	f002 0207 	and.w	r2, r2, #7
 8006846:	bf58      	it	pl
 8006848:	4253      	negpl	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800684e:	89fb      	ldrh	r3, [r7, #14]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	441a      	add	r2, r3
 8006854:	89bb      	ldrh	r3, [r7, #12]
 8006856:	2108      	movs	r1, #8
 8006858:	4618      	mov	r0, r3
 800685a:	f7f9 fedb 	bl	8000614 <ExtractBits>
 800685e:	4602      	mov	r2, r0
 8006860:	78bb      	ldrb	r3, [r7, #2]
 8006862:	b2d1      	uxtb	r1, r2
 8006864:	4a5a      	ldr	r2, [pc, #360]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	4413      	add	r3, r2
 800686a:	3301      	adds	r3, #1
 800686c:	460a      	mov	r2, r1
 800686e:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006870:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006874:	3308      	adds	r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	da00      	bge.n	800687c <Service_Msg_Extr+0x20c>
 800687a:	3307      	adds	r3, #7
 800687c:	10db      	asrs	r3, r3, #3
 800687e:	b29a      	uxth	r2, r3
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	4413      	add	r3, r2
 8006884:	81fb      	strh	r3, [r7, #14]
 8006886:	89bb      	ldrh	r3, [r7, #12]
 8006888:	3308      	adds	r3, #8
 800688a:	b29b      	uxth	r3, r3
 800688c:	b21b      	sxth	r3, r3
 800688e:	425a      	negs	r2, r3
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	f002 0207 	and.w	r2, r2, #7
 8006898:	bf58      	it	pl
 800689a:	4253      	negpl	r3, r2
 800689c:	b21b      	sxth	r3, r3
 800689e:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80068a0:	89fb      	ldrh	r3, [r7, #14]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	441a      	add	r2, r3
 80068a6:	89bb      	ldrh	r3, [r7, #12]
 80068a8:	2108      	movs	r1, #8
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7f9 feb2 	bl	8000614 <ExtractBits>
 80068b0:	4603      	mov	r3, r0
 80068b2:	78ba      	ldrb	r2, [r7, #2]
 80068b4:	b2d8      	uxtb	r0, r3
 80068b6:	4945      	ldr	r1, [pc, #276]	; (80069cc <Service_Msg_Extr+0x35c>)
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	3302      	adds	r3, #2
 80068c4:	4602      	mov	r2, r0
 80068c6:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 80068c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068cc:	3308      	adds	r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	da00      	bge.n	80068d4 <Service_Msg_Extr+0x264>
 80068d2:	3307      	adds	r3, #7
 80068d4:	10db      	asrs	r3, r3, #3
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	89fb      	ldrh	r3, [r7, #14]
 80068da:	4413      	add	r3, r2
 80068dc:	81fb      	strh	r3, [r7, #14]
 80068de:	89bb      	ldrh	r3, [r7, #12]
 80068e0:	3308      	adds	r3, #8
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	b21b      	sxth	r3, r3
 80068e6:	425a      	negs	r2, r3
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	f002 0207 	and.w	r2, r2, #7
 80068f0:	bf58      	it	pl
 80068f2:	4253      	negpl	r3, r2
 80068f4:	b21b      	sxth	r3, r3
 80068f6:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	441a      	add	r2, r3
 80068fe:	89bb      	ldrh	r3, [r7, #12]
 8006900:	2110      	movs	r1, #16
 8006902:	4618      	mov	r0, r3
 8006904:	f7f9 fe86 	bl	8000614 <ExtractBits>
 8006908:	4602      	mov	r2, r0
 800690a:	78bb      	ldrb	r3, [r7, #2]
 800690c:	b291      	uxth	r1, r2
 800690e:	4a30      	ldr	r2, [pc, #192]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	4413      	add	r3, r2
 8006914:	3304      	adds	r3, #4
 8006916:	460a      	mov	r2, r1
 8006918:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800691a:	492e      	ldr	r1, [pc, #184]	; (80069d4 <Service_Msg_Extr+0x364>)
 800691c:	482e      	ldr	r0, [pc, #184]	; (80069d8 <Service_Msg_Extr+0x368>)
 800691e:	f7f9 fc8f 	bl	8000240 <strcmp>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10f      	bne.n	8006948 <Service_Msg_Extr+0x2d8>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8006928:	78bb      	ldrb	r3, [r7, #2]
 800692a:	4a29      	ldr	r2, [pc, #164]	; (80069d0 <Service_Msg_Extr+0x360>)
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	881a      	ldrh	r2, [r3, #0]
 8006934:	78bb      	ldrb	r3, [r7, #2]
 8006936:	f042 0208 	orr.w	r2, r2, #8
 800693a:	b291      	uxth	r1, r2
 800693c:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <Service_Msg_Extr+0x360>)
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	4413      	add	r3, r2
 8006942:	3304      	adds	r3, #4
 8006944:	460a      	mov	r2, r1
 8006946:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8006948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800694c:	3310      	adds	r3, #16
 800694e:	2b00      	cmp	r3, #0
 8006950:	da00      	bge.n	8006954 <Service_Msg_Extr+0x2e4>
 8006952:	3307      	adds	r3, #7
 8006954:	10db      	asrs	r3, r3, #3
 8006956:	b29a      	uxth	r2, r3
 8006958:	89fb      	ldrh	r3, [r7, #14]
 800695a:	4413      	add	r3, r2
 800695c:	81fb      	strh	r3, [r7, #14]
 800695e:	89bb      	ldrh	r3, [r7, #12]
 8006960:	3310      	adds	r3, #16
 8006962:	b29b      	uxth	r3, r3
 8006964:	b21b      	sxth	r3, r3
 8006966:	425a      	negs	r2, r3
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	f002 0207 	and.w	r2, r2, #7
 8006970:	bf58      	it	pl
 8006972:	4253      	negpl	r3, r2
 8006974:	b21b      	sxth	r3, r3
 8006976:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8006978:	78bb      	ldrb	r3, [r7, #2]
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <Service_Msg_Extr+0x360>)
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 812b 	beq.w	8006be4 <Service_Msg_Extr+0x574>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800698e:	89fb      	ldrh	r3, [r7, #14]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	441a      	add	r2, r3
 8006994:	89bb      	ldrh	r3, [r7, #12]
 8006996:	2108      	movs	r1, #8
 8006998:	4618      	mov	r0, r3
 800699a:	f7f9 fe3b 	bl	8000614 <ExtractBits>
 800699e:	4603      	mov	r3, r0
 80069a0:	78ba      	ldrb	r2, [r7, #2]
 80069a2:	b2d8      	uxtb	r0, r3
 80069a4:	490d      	ldr	r1, [pc, #52]	; (80069dc <Service_Msg_Extr+0x36c>)
 80069a6:	4613      	mov	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	440b      	add	r3, r1
 80069b0:	3305      	adds	r3, #5
 80069b2:	4602      	mov	r2, r0
 80069b4:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80069b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069ba:	3308      	adds	r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	da0f      	bge.n	80069e0 <Service_Msg_Extr+0x370>
 80069c0:	3307      	adds	r3, #7
 80069c2:	e00d      	b.n	80069e0 <Service_Msg_Extr+0x370>
 80069c4:	20000fa4 	.word	0x20000fa4
 80069c8:	20000fcc 	.word	0x20000fcc
 80069cc:	20001584 	.word	0x20001584
 80069d0:	200011c4 	.word	0x200011c4
 80069d4:	080219a8 	.word	0x080219a8
 80069d8:	20000305 	.word	0x20000305
 80069dc:	20001188 	.word	0x20001188
 80069e0:	10db      	asrs	r3, r3, #3
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	4413      	add	r3, r2
 80069e8:	81fb      	strh	r3, [r7, #14]
 80069ea:	89bb      	ldrh	r3, [r7, #12]
 80069ec:	3308      	adds	r3, #8
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	425a      	negs	r2, r3
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	f002 0207 	and.w	r2, r2, #7
 80069fc:	bf58      	it	pl
 80069fe:	4253      	negpl	r3, r2
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	441a      	add	r2, r3
 8006a0a:	89bb      	ldrh	r3, [r7, #12]
 8006a0c:	2108      	movs	r1, #8
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7f9 fe00 	bl	8000614 <ExtractBits>
 8006a14:	4603      	mov	r3, r0
 8006a16:	78ba      	ldrb	r2, [r7, #2]
 8006a18:	b2d8      	uxtb	r0, r3
 8006a1a:	496e      	ldr	r1, [pc, #440]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	440b      	add	r3, r1
 8006a26:	3304      	adds	r3, #4
 8006a28:	4602      	mov	r2, r0
 8006a2a:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8006a2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a30:	3308      	adds	r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da00      	bge.n	8006a38 <Service_Msg_Extr+0x3c8>
 8006a36:	3307      	adds	r3, #7
 8006a38:	10db      	asrs	r3, r3, #3
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	89fb      	ldrh	r3, [r7, #14]
 8006a3e:	4413      	add	r3, r2
 8006a40:	81fb      	strh	r3, [r7, #14]
 8006a42:	89bb      	ldrh	r3, [r7, #12]
 8006a44:	3308      	adds	r3, #8
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	b21b      	sxth	r3, r3
 8006a4a:	425a      	negs	r2, r3
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	f002 0207 	and.w	r2, r2, #7
 8006a54:	bf58      	it	pl
 8006a56:	4253      	negpl	r3, r2
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	441a      	add	r2, r3
 8006a62:	89bb      	ldrh	r3, [r7, #12]
 8006a64:	2108      	movs	r1, #8
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7f9 fdd4 	bl	8000614 <ExtractBits>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	78ba      	ldrb	r2, [r7, #2]
 8006a70:	b2d8      	uxtb	r0, r3
 8006a72:	4958      	ldr	r1, [pc, #352]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006a74:	4613      	mov	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4413      	add	r3, r2
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	440b      	add	r3, r1
 8006a7e:	3303      	adds	r3, #3
 8006a80:	4602      	mov	r2, r0
 8006a82:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006a84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da00      	bge.n	8006a90 <Service_Msg_Extr+0x420>
 8006a8e:	3307      	adds	r3, #7
 8006a90:	10db      	asrs	r3, r3, #3
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	89fb      	ldrh	r3, [r7, #14]
 8006a96:	4413      	add	r3, r2
 8006a98:	81fb      	strh	r3, [r7, #14]
 8006a9a:	89bb      	ldrh	r3, [r7, #12]
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	b21b      	sxth	r3, r3
 8006aa2:	425a      	negs	r2, r3
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	f002 0207 	and.w	r2, r2, #7
 8006aac:	bf58      	it	pl
 8006aae:	4253      	negpl	r3, r2
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	441a      	add	r2, r3
 8006aba:	89bb      	ldrh	r3, [r7, #12]
 8006abc:	2108      	movs	r1, #8
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7f9 fda8 	bl	8000614 <ExtractBits>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	78ba      	ldrb	r2, [r7, #2]
 8006ac8:	b2d8      	uxtb	r0, r3
 8006aca:	4942      	ldr	r1, [pc, #264]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006acc:	4613      	mov	r3, r2
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	4413      	add	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	440b      	add	r3, r1
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da00      	bge.n	8006ae6 <Service_Msg_Extr+0x476>
 8006ae4:	3307      	adds	r3, #7
 8006ae6:	10db      	asrs	r3, r3, #3
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	89fb      	ldrh	r3, [r7, #14]
 8006aec:	4413      	add	r3, r2
 8006aee:	81fb      	strh	r3, [r7, #14]
 8006af0:	89bb      	ldrh	r3, [r7, #12]
 8006af2:	3308      	adds	r3, #8
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	b21b      	sxth	r3, r3
 8006af8:	425a      	negs	r2, r3
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	f002 0207 	and.w	r2, r2, #7
 8006b02:	bf58      	it	pl
 8006b04:	4253      	negpl	r3, r2
 8006b06:	b21b      	sxth	r3, r3
 8006b08:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	441a      	add	r2, r3
 8006b10:	89bb      	ldrh	r3, [r7, #12]
 8006b12:	2108      	movs	r1, #8
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7f9 fd7d 	bl	8000614 <ExtractBits>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	78ba      	ldrb	r2, [r7, #2]
 8006b1e:	b2d8      	uxtb	r0, r3
 8006b20:	492c      	ldr	r1, [pc, #176]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	4602      	mov	r2, r0
 8006b30:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006b32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b36:	3308      	adds	r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	da00      	bge.n	8006b3e <Service_Msg_Extr+0x4ce>
 8006b3c:	3307      	adds	r3, #7
 8006b3e:	10db      	asrs	r3, r3, #3
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	89fb      	ldrh	r3, [r7, #14]
 8006b44:	4413      	add	r3, r2
 8006b46:	81fb      	strh	r3, [r7, #14]
 8006b48:	89bb      	ldrh	r3, [r7, #12]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b21b      	sxth	r3, r3
 8006b50:	425a      	negs	r2, r3
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	f002 0207 	and.w	r2, r2, #7
 8006b5a:	bf58      	it	pl
 8006b5c:	4253      	negpl	r3, r2
 8006b5e:	b21b      	sxth	r3, r3
 8006b60:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b62:	89fb      	ldrh	r3, [r7, #14]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	441a      	add	r2, r3
 8006b68:	89bb      	ldrh	r3, [r7, #12]
 8006b6a:	2108      	movs	r1, #8
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7f9 fd51 	bl	8000614 <ExtractBits>
 8006b72:	4603      	mov	r3, r0
 8006b74:	78ba      	ldrb	r2, [r7, #2]
 8006b76:	b2d8      	uxtb	r0, r3
 8006b78:	4916      	ldr	r1, [pc, #88]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	440b      	add	r3, r1
 8006b84:	3302      	adds	r3, #2
 8006b86:	4602      	mov	r2, r0
 8006b88:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006b8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da00      	bge.n	8006b96 <Service_Msg_Extr+0x526>
 8006b94:	3307      	adds	r3, #7
 8006b96:	10db      	asrs	r3, r3, #3
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	89fb      	ldrh	r3, [r7, #14]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	81fb      	strh	r3, [r7, #14]
 8006ba0:	89bb      	ldrh	r3, [r7, #12]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	b21b      	sxth	r3, r3
 8006ba8:	425a      	negs	r2, r3
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	f002 0207 	and.w	r2, r2, #7
 8006bb2:	bf58      	it	pl
 8006bb4:	4253      	negpl	r3, r2
 8006bb6:	b21b      	sxth	r3, r3
 8006bb8:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006bba:	78bb      	ldrb	r3, [r7, #2]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 f8a5 	bl	8008d0c <IS_MLK_EIPC_TIME_MATCHING>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <Service_Msg_Extr+0x56c>
 8006bc8:	78bb      	ldrb	r3, [r7, #2]
 8006bca:	4a03      	ldr	r2, [pc, #12]	; (8006bd8 <Service_Msg_Extr+0x568>)
 8006bcc:	2100      	movs	r1, #0
 8006bce:	54d1      	strb	r1, [r2, r3]
 8006bd0:	e008      	b.n	8006be4 <Service_Msg_Extr+0x574>
 8006bd2:	bf00      	nop
 8006bd4:	20001188 	.word	0x20001188
 8006bd8:	200010d8 	.word	0x200010d8
 8006bdc:	78bb      	ldrb	r3, [r7, #2]
 8006bde:	4a98      	ldr	r2, [pc, #608]	; (8006e40 <Service_Msg_Extr+0x7d0>)
 8006be0:	2101      	movs	r1, #1
 8006be2:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006be4:	78bb      	ldrb	r3, [r7, #2]
 8006be6:	4a97      	ldr	r2, [pc, #604]	; (8006e44 <Service_Msg_Extr+0x7d4>)
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	4413      	add	r3, r2
 8006bec:	3304      	adds	r3, #4
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <Service_Msg_Extr+0x58c>
	{
		LinkEstablishFlag = SET;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006bfc:	787a      	ldrb	r2, [r7, #1]
 8006bfe:	78bb      	ldrb	r3, [r7, #2]
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff f8d0 	bl	8005da8 <Send_Status_Message>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	f040 8081 	bne.w	8006d12 <Service_Msg_Extr+0x6a2>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006c10:	78ba      	ldrb	r2, [r7, #2]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a8b      	ldr	r2, [pc, #556]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3301      	adds	r3, #1
 8006c20:	2210      	movs	r2, #16
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f019 fa01 	bl	802002c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006c2a:	78ba      	ldrb	r2, [r7, #2]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4a84      	ldr	r2, [pc, #528]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c36:	1898      	adds	r0, r3, r2
 8006c38:	78ba      	ldrb	r2, [r7, #2]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4a82      	ldr	r2, [pc, #520]	; (8006e4c <Service_Msg_Extr+0x7dc>)
 8006c44:	4413      	add	r3, r2
 8006c46:	2214      	movs	r2, #20
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f019 f9c7 	bl	801ffdc <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006c4e:	78bb      	ldrb	r3, [r7, #2]
 8006c50:	4a7f      	ldr	r2, [pc, #508]	; (8006e50 <Service_Msg_Extr+0x7e0>)
 8006c52:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006c56:	78ba      	ldrb	r2, [r7, #2]
 8006c58:	487b      	ldr	r0, [pc, #492]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4403      	add	r3, r0
 8006c64:	3312      	adds	r3, #18
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	4299      	cmp	r1, r3
 8006c6a:	d052      	beq.n	8006d12 <Service_Msg_Extr+0x6a2>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006c6c:	78ba      	ldrb	r2, [r7, #2]
 8006c6e:	78b9      	ldrb	r1, [r7, #2]
 8006c70:	4875      	ldr	r0, [pc, #468]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4403      	add	r3, r0
 8006c7c:	3312      	adds	r3, #18
 8006c7e:	881a      	ldrh	r2, [r3, #0]
 8006c80:	4b73      	ldr	r3, [pc, #460]	; (8006e50 <Service_Msg_Extr+0x7e0>)
 8006c82:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006c86:	2214      	movs	r2, #20
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4872      	ldr	r0, [pc, #456]	; (8006e54 <Service_Msg_Extr+0x7e4>)
 8006c8c:	f019 f9ce 	bl	802002c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006c90:	78ba      	ldrb	r2, [r7, #2]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a6b      	ldr	r2, [pc, #428]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2214      	movs	r2, #20
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	486c      	ldr	r0, [pc, #432]	; (8006e54 <Service_Msg_Extr+0x7e4>)
 8006ca4:	f019 f99a 	bl	801ffdc <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006ca8:	f240 2007 	movw	r0, #519	; 0x207
 8006cac:	f006 f9da 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006cb0:	78b9      	ldrb	r1, [r7, #2]
 8006cb2:	78ba      	ldrb	r2, [r7, #2]
 8006cb4:	4864      	ldr	r0, [pc, #400]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4403      	add	r3, r0
 8006cc0:	3312      	adds	r3, #18
 8006cc2:	8818      	ldrh	r0, [r3, #0]
 8006cc4:	4964      	ldr	r1, [pc, #400]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	440b      	add	r3, r1
 8006cd0:	3306      	adds	r3, #6
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8006cd6:	78bb      	ldrb	r3, [r7, #2]
 8006cd8:	4a60      	ldr	r2, [pc, #384]	; (8006e5c <Service_Msg_Extr+0x7ec>)
 8006cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d117      	bne.n	8006d12 <Service_Msg_Extr+0x6a2>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006ce2:	78bb      	ldrb	r3, [r7, #2]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	4a5e      	ldr	r2, [pc, #376]	; (8006e60 <Service_Msg_Extr+0x7f0>)
 8006ce8:	4413      	add	r3, r2
 8006cea:	1c98      	adds	r0, r3, #2
 8006cec:	78ba      	ldrb	r2, [r7, #2]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4a54      	ldr	r2, [pc, #336]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	2210      	movs	r2, #16
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f019 f96c 	bl	801ffdc <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8006d04:	f240 1019 	movw	r0, #281	; 0x119
 8006d08:	f006 f9ac 	bl	800d064 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8006d0c:	4a55      	ldr	r2, [pc, #340]	; (8006e64 <Service_Msg_Extr+0x7f4>)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006d12:	78ba      	ldrb	r2, [r7, #2]
 8006d14:	4950      	ldr	r1, [pc, #320]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	440b      	add	r3, r1
 8006d20:	3314      	adds	r3, #20
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8006d26:	78ba      	ldrb	r2, [r7, #2]
 8006d28:	494b      	ldr	r1, [pc, #300]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	440b      	add	r3, r1
 8006d34:	3305      	adds	r3, #5
 8006d36:	2206      	movs	r2, #6
 8006d38:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006d3a:	78ba      	ldrb	r2, [r7, #2]
 8006d3c:	4946      	ldr	r1, [pc, #280]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	440b      	add	r3, r1
 8006d48:	78ba      	ldrb	r2, [r7, #2]
 8006d4a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006d4c:	78ba      	ldrb	r2, [r7, #2]
 8006d4e:	4942      	ldr	r1, [pc, #264]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d50:	4613      	mov	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4413      	add	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	440b      	add	r3, r1
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006d60:	78ba      	ldrb	r2, [r7, #2]
 8006d62:	493d      	ldr	r1, [pc, #244]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3302      	adds	r3, #2
 8006d70:	7ffa      	ldrb	r2, [r7, #31]
 8006d72:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006d74:	2218      	movs	r2, #24
 8006d76:	2100      	movs	r1, #0
 8006d78:	483b      	ldr	r0, [pc, #236]	; (8006e68 <Service_Msg_Extr+0x7f8>)
 8006d7a:	f019 f957 	bl	802002c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006d7e:	78ba      	ldrb	r2, [r7, #2]
 8006d80:	4613      	mov	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4a33      	ldr	r2, [pc, #204]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d8a:	4413      	add	r3, r2
 8006d8c:	2218      	movs	r2, #24
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4835      	ldr	r0, [pc, #212]	; (8006e68 <Service_Msg_Extr+0x7f8>)
 8006d92:	f019 f923 	bl	801ffdc <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8006d96:	f240 2001 	movw	r0, #513	; 0x201
 8006d9a:	f006 f963 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006d9e:	78ba      	ldrb	r2, [r7, #2]
 8006da0:	492d      	ldr	r1, [pc, #180]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	440b      	add	r3, r1
 8006dac:	3301      	adds	r3, #1
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006db2:	78bb      	ldrb	r3, [r7, #2]
 8006db4:	492d      	ldr	r1, [pc, #180]	; (8006e6c <Service_Msg_Extr+0x7fc>)
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8006dbc:	7ffb      	ldrb	r3, [r7, #31]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11d      	bne.n	8006dfe <Service_Msg_Extr+0x78e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006dc2:	78bb      	ldrb	r3, [r7, #2]
 8006dc4:	492a      	ldr	r1, [pc, #168]	; (8006e70 <Service_Msg_Extr+0x800>)
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Link_Flag[Source_Index] = SET;
 8006dcc:	78bb      	ldrb	r3, [r7, #2]
 8006dce:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <Service_Msg_Extr+0x804>)
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006dd4:	78ba      	ldrb	r2, [r7, #2]
 8006dd6:	4928      	ldr	r1, [pc, #160]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006dd8:	4613      	mov	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	3301      	adds	r3, #1
 8006de4:	2201      	movs	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006de8:	78ba      	ldrb	r2, [r7, #2]
 8006dea:	4923      	ldr	r1, [pc, #140]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006dec:	4613      	mov	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	3304      	adds	r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e017      	b.n	8006e2e <Service_Msg_Extr+0x7be>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8006dfe:	78bb      	ldrb	r3, [r7, #2]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <Service_Msg_Extr+0x804>)
 8006e02:	2100      	movs	r1, #0
 8006e04:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006e06:	78ba      	ldrb	r2, [r7, #2]
 8006e08:	491b      	ldr	r1, [pc, #108]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	3308      	adds	r3, #8
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8006e1a:	78ba      	ldrb	r2, [r7, #2]
 8006e1c:	4916      	ldr	r1, [pc, #88]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3301      	adds	r3, #1
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e32:	4812      	ldr	r0, [pc, #72]	; (8006e7c <Service_Msg_Extr+0x80c>)
 8006e34:	f00e fec1 	bl	8015bba <HAL_GPIO_TogglePin>

}
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200010d8 	.word	0x200010d8
 8006e44:	200011c4 	.word	0x200011c4
 8006e48:	20001e80 	.word	0x20001e80
 8006e4c:	20001db8 	.word	0x20001db8
 8006e50:	20000f00 	.word	0x20000f00
 8006e54:	20002010 	.word	0x20002010
 8006e58:	20001674 	.word	0x20001674
 8006e5c:	20000ec4 	.word	0x20000ec4
 8006e60:	200010e4 	.word	0x200010e4
 8006e64:	20000e70 	.word	0x20000e70
 8006e68:	20001854 	.word	0x20001854
 8006e6c:	20000e44 	.word	0x20000e44
 8006e70:	20000f14 	.word	0x20000f14
 8006e74:	20000f64 	.word	0x20000f64
 8006e78:	20001cc8 	.word	0x20001cc8
 8006e7c:	40021c00 	.word	0x40021c00

08006e80 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b095      	sub	sp, #84	; 0x54
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	460a      	mov	r2, r1
 8006e8a:	71fb      	strb	r3, [r7, #7]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	f107 0310 	add.w	r3, r7, #16
 8006e98:	2238      	movs	r2, #56	; 0x38
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f019 f8c5 	bl	802002c <memset>

	BITSTUFFINIT(0, 0);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8006eae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eb2:	f107 020c 	add.w	r2, r7, #12
 8006eb6:	441a      	add	r2, r3
 8006eb8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006ebc:	23f4      	movs	r3, #244	; 0xf4
 8006ebe:	2108      	movs	r1, #8
 8006ec0:	f7f9 fc34 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006ec4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006ec8:	3308      	adds	r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da00      	bge.n	8006ed0 <Send_Service_Signal_Message+0x50>
 8006ece:	3307      	adds	r3, #7
 8006ed0:	10db      	asrs	r3, r3, #3
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ed8:	4413      	add	r3, r2
 8006eda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ede:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	b21b      	sxth	r3, r3
 8006ee8:	425a      	negs	r2, r3
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	f002 0207 	and.w	r2, r2, #7
 8006ef2:	bf58      	it	pl
 8006ef4:	4253      	negpl	r3, r2
 8006ef6:	b21b      	sxth	r3, r3
 8006ef8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8006efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f00:	f107 020c 	add.w	r2, r7, #12
 8006f04:	441a      	add	r2, r3
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	497b      	ldr	r1, [pc, #492]	; (80070f8 <Send_Service_Signal_Message+0x278>)
 8006f0a:	3366      	adds	r3, #102	; 0x66
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f16:	2110      	movs	r1, #16
 8006f18:	f7f9 fc08 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f20:	3310      	adds	r3, #16
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da00      	bge.n	8006f28 <Send_Service_Signal_Message+0xa8>
 8006f26:	3307      	adds	r3, #7
 8006f28:	10db      	asrs	r3, r3, #3
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f30:	4413      	add	r3, r2
 8006f32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f3a:	3310      	adds	r3, #16
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	425a      	negs	r2, r3
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	f002 0207 	and.w	r2, r2, #7
 8006f4a:	bf58      	it	pl
 8006f4c:	4253      	negpl	r3, r2
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8006f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f58:	f107 020c 	add.w	r2, r7, #12
 8006f5c:	441a      	add	r2, r3
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	4965      	ldr	r1, [pc, #404]	; (80070f8 <Send_Service_Signal_Message+0x278>)
 8006f62:	3370      	adds	r3, #112	; 0x70
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f6e:	2110      	movs	r1, #16
 8006f70:	f7f9 fbdc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f78:	3310      	adds	r3, #16
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da00      	bge.n	8006f80 <Send_Service_Signal_Message+0x100>
 8006f7e:	3307      	adds	r3, #7
 8006f80:	10db      	asrs	r3, r3, #3
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f88:	4413      	add	r3, r2
 8006f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f92:	3310      	adds	r3, #16
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	425a      	negs	r2, r3
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	f002 0207 	and.w	r2, r2, #7
 8006fa2:	bf58      	it	pl
 8006fa4:	4253      	negpl	r3, r2
 8006fa6:	b21b      	sxth	r3, r3
 8006fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006fac:	4b53      	ldr	r3, [pc, #332]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	089b      	lsrs	r3, r3, #2
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d035      	beq.n	8007026 <Send_Service_Signal_Message+0x1a6>
 8006fba:	4b50      	ldr	r3, [pc, #320]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	79fa      	ldrb	r2, [r7, #7]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d130      	bne.n	8007026 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006fca:	484d      	ldr	r0, [pc, #308]	; (8007100 <Send_Service_Signal_Message+0x280>)
 8006fcc:	f010 fdbe 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b4c      	ldr	r3, [pc, #304]	; (8007104 <Send_Service_Signal_Message+0x284>)
 8006fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	21c8      	movs	r1, #200	; 0xc8
 8006fdc:	fb01 f303 	mul.w	r3, r1, r3
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8006fe6:	4848      	ldr	r0, [pc, #288]	; (8007108 <Send_Service_Signal_Message+0x288>)
 8006fe8:	f019 f9a4 	bl	8020334 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	4a47      	ldr	r2, [pc, #284]	; (800710c <Send_Service_Signal_Message+0x28c>)
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	4413      	add	r3, r2
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4845      	ldr	r0, [pc, #276]	; (8007110 <Send_Service_Signal_Message+0x290>)
 8006ffc:	f019 f8fe 	bl	80201fc <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007000:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007004:	4619      	mov	r1, r3
 8007006:	4843      	ldr	r0, [pc, #268]	; (8007114 <Send_Service_Signal_Message+0x294>)
 8007008:	f019 f8f8 	bl	80201fc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 800700c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007010:	f107 020c 	add.w	r2, r7, #12
 8007014:	441a      	add	r2, r3
 8007016:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800701a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800701e:	2108      	movs	r1, #8
 8007020:	f7f9 fb84 	bl	800072c <InsertBits>
	{
 8007024:	e00f      	b.n	8007046 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8007026:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800702a:	f107 020c 	add.w	r2, r7, #12
 800702e:	441a      	add	r2, r3
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	4936      	ldr	r1, [pc, #216]	; (800710c <Send_Service_Signal_Message+0x28c>)
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	440b      	add	r3, r1
 8007038:	3301      	adds	r3, #1
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007040:	2108      	movs	r1, #8
 8007042:	f7f9 fb73 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8007046:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800704a:	3308      	adds	r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	da00      	bge.n	8007052 <Send_Service_Signal_Message+0x1d2>
 8007050:	3307      	adds	r3, #7
 8007052:	10db      	asrs	r3, r3, #3
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800705a:	4413      	add	r3, r2
 800705c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007060:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007064:	3308      	adds	r3, #8
 8007066:	b29b      	uxth	r3, r3
 8007068:	b21b      	sxth	r3, r3
 800706a:	425a      	negs	r2, r3
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	f002 0207 	and.w	r2, r2, #7
 8007074:	bf58      	it	pl
 8007076:	4253      	negpl	r3, r2
 8007078:	b21b      	sxth	r3, r3
 800707a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	08db      	lsrs	r3, r3, #3
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d04b      	beq.n	8007124 <Send_Service_Signal_Message+0x2a4>
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 800708e:	791b      	ldrb	r3, [r3, #4]
 8007090:	79fa      	ldrb	r2, [r7, #7]
 8007092:	429a      	cmp	r2, r3
 8007094:	d146      	bne.n	8007124 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800709c:	4818      	ldr	r0, [pc, #96]	; (8007100 <Send_Service_Signal_Message+0x280>)
 800709e:	f010 fd55 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <Send_Service_Signal_Message+0x284>)
 80070a6:	fba3 1302 	umull	r1, r3, r3, r2
 80070aa:	099b      	lsrs	r3, r3, #6
 80070ac:	21c8      	movs	r1, #200	; 0xc8
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 80070b8:	4817      	ldr	r0, [pc, #92]	; (8007118 <Send_Service_Signal_Message+0x298>)
 80070ba:	f019 f93b 	bl	8020334 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	4a12      	ldr	r2, [pc, #72]	; (800710c <Send_Service_Signal_Message+0x28c>)
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	4413      	add	r3, r2
 80070c6:	3302      	adds	r3, #2
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	4813      	ldr	r0, [pc, #76]	; (800711c <Send_Service_Signal_Message+0x29c>)
 80070ce:	f019 f895 	bl	80201fc <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80070d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80070d6:	4619      	mov	r1, r3
 80070d8:	4811      	ldr	r0, [pc, #68]	; (8007120 <Send_Service_Signal_Message+0x2a0>)
 80070da:	f019 f88f 	bl	80201fc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80070de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070e2:	f107 020c 	add.w	r2, r7, #12
 80070e6:	441a      	add	r2, r3
 80070e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80070ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80070f0:	2108      	movs	r1, #8
 80070f2:	f7f9 fb1b 	bl	800072c <InsertBits>
	{
 80070f6:	e033      	b.n	8007160 <Send_Service_Signal_Message+0x2e0>
 80070f8:	20000304 	.word	0x20000304
 80070fc:	2000195c 	.word	0x2000195c
 8007100:	20009088 	.word	0x20009088
 8007104:	51eb851f 	.word	0x51eb851f
 8007108:	08021d50 	.word	0x08021d50
 800710c:	200011c4 	.word	0x200011c4
 8007110:	080222f4 	.word	0x080222f4
 8007114:	08022314 	.word	0x08022314
 8007118:	08021db4 	.word	0x08021db4
 800711c:	08022334 	.word	0x08022334
 8007120:	08022354 	.word	0x08022354
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007124:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007128:	f107 020c 	add.w	r2, r7, #12
 800712c:	18d1      	adds	r1, r2, r3
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	484e      	ldr	r0, [pc, #312]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 8007132:	011a      	lsls	r2, r3, #4
 8007134:	4402      	add	r2, r0
 8007136:	3202      	adds	r2, #2
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	3201      	adds	r2, #1
 800713c:	b2d4      	uxtb	r4, r2
 800713e:	484b      	ldr	r0, [pc, #300]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 8007140:	011a      	lsls	r2, r3, #4
 8007142:	4402      	add	r2, r0
 8007144:	3202      	adds	r2, #2
 8007146:	4620      	mov	r0, r4
 8007148:	7010      	strb	r0, [r2, #0]
 800714a:	4a48      	ldr	r2, [pc, #288]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	4413      	add	r3, r2
 8007150:	3302      	adds	r3, #2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007158:	460a      	mov	r2, r1
 800715a:	2108      	movs	r1, #8
 800715c:	f7f9 fae6 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007160:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007164:	3308      	adds	r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	da00      	bge.n	800716c <Send_Service_Signal_Message+0x2ec>
 800716a:	3307      	adds	r3, #7
 800716c:	10db      	asrs	r3, r3, #3
 800716e:	b29a      	uxth	r2, r3
 8007170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007174:	4413      	add	r3, r2
 8007176:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800717a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800717e:	3308      	adds	r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	b21b      	sxth	r3, r3
 8007184:	425a      	negs	r2, r3
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	f002 0207 	and.w	r2, r2, #7
 800718e:	bf58      	it	pl
 8007190:	4253      	negpl	r3, r2
 8007192:	b21b      	sxth	r3, r3
 8007194:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800719c:	f107 020c 	add.w	r2, r7, #12
 80071a0:	441a      	add	r2, r3
 80071a2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80071a6:	2306      	movs	r3, #6
 80071a8:	2108      	movs	r1, #8
 80071aa:	f7f9 fabf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80071ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80071b2:	3308      	adds	r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	da00      	bge.n	80071ba <Send_Service_Signal_Message+0x33a>
 80071b8:	3307      	adds	r3, #7
 80071ba:	10db      	asrs	r3, r3, #3
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071c2:	4413      	add	r3, r2
 80071c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071cc:	3308      	adds	r3, #8
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	425a      	negs	r2, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	f002 0207 	and.w	r2, r2, #7
 80071dc:	bf58      	it	pl
 80071de:	4253      	negpl	r3, r2
 80071e0:	b21b      	sxth	r3, r3
 80071e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	4a21      	ldr	r2, [pc, #132]	; (8007270 <Send_Service_Signal_Message+0x3f0>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d147      	bne.n	8007280 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 80071f0:	f004 f99a 	bl	800b528 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 80071f4:	79fa      	ldrb	r2, [r7, #7]
 80071f6:	4613      	mov	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <Send_Service_Signal_Message+0x3f4>)
 8007200:	4413      	add	r3, r2
 8007202:	4a1d      	ldr	r2, [pc, #116]	; (8007278 <Send_Service_Signal_Message+0x3f8>)
 8007204:	6811      	ldr	r1, [r2, #0]
 8007206:	6019      	str	r1, [r3, #0]
 8007208:	8892      	ldrh	r2, [r2, #4]
 800720a:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800720c:	481b      	ldr	r0, [pc, #108]	; (800727c <Send_Service_Signal_Message+0x3fc>)
 800720e:	f019 f891 	bl	8020334 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	4a16      	ldr	r2, [pc, #88]	; (8007270 <Send_Service_Signal_Message+0x3f0>)
 8007216:	2100      	movs	r1, #0
 8007218:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 800721a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800721e:	f107 020c 	add.w	r2, r7, #12
 8007222:	441a      	add	r2, r3
 8007224:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007228:	2369      	movs	r3, #105	; 0x69
 800722a:	2110      	movs	r1, #16
 800722c:	f7f9 fa7e 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007230:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007234:	3310      	adds	r3, #16
 8007236:	2b00      	cmp	r3, #0
 8007238:	da00      	bge.n	800723c <Send_Service_Signal_Message+0x3bc>
 800723a:	3307      	adds	r3, #7
 800723c:	10db      	asrs	r3, r3, #3
 800723e:	b29a      	uxth	r2, r3
 8007240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007244:	4413      	add	r3, r2
 8007246:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800724a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800724e:	3310      	adds	r3, #16
 8007250:	b29b      	uxth	r3, r3
 8007252:	b21b      	sxth	r3, r3
 8007254:	425a      	negs	r2, r3
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	f002 0207 	and.w	r2, r2, #7
 800725e:	bf58      	it	pl
 8007260:	4253      	negpl	r3, r2
 8007262:	b21b      	sxth	r3, r3
 8007264:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007268:	e031      	b.n	80072ce <Send_Service_Signal_Message+0x44e>
 800726a:	bf00      	nop
 800726c:	200011c4 	.word	0x200011c4
 8007270:	200010d8 	.word	0x200010d8
 8007274:	20001188 	.word	0x20001188
 8007278:	20002890 	.word	0x20002890
 800727c:	080220d0 	.word	0x080220d0
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007284:	f107 020c 	add.w	r2, r7, #12
 8007288:	441a      	add	r2, r3
 800728a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800728e:	2329      	movs	r3, #41	; 0x29
 8007290:	2110      	movs	r1, #16
 8007292:	f7f9 fa4b 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007296:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800729a:	3310      	adds	r3, #16
 800729c:	2b00      	cmp	r3, #0
 800729e:	da00      	bge.n	80072a2 <Send_Service_Signal_Message+0x422>
 80072a0:	3307      	adds	r3, #7
 80072a2:	10db      	asrs	r3, r3, #3
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072aa:	4413      	add	r3, r2
 80072ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072b4:	3310      	adds	r3, #16
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b21b      	sxth	r3, r3
 80072ba:	425a      	negs	r2, r3
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	f002 0207 	and.w	r2, r2, #7
 80072c4:	bf58      	it	pl
 80072c6:	4253      	negpl	r3, r2
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 80072ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072d2:	f107 020c 	add.w	r2, r7, #12
 80072d6:	18d1      	adds	r1, r2, r3
 80072d8:	79fa      	ldrb	r2, [r7, #7]
 80072da:	48b5      	ldr	r0, [pc, #724]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4403      	add	r3, r0
 80072e6:	3305      	adds	r3, #5
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072ee:	460a      	mov	r2, r1
 80072f0:	2108      	movs	r1, #8
 80072f2:	f7f9 fa1b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80072f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072fa:	3308      	adds	r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	da00      	bge.n	8007302 <Send_Service_Signal_Message+0x482>
 8007300:	3307      	adds	r3, #7
 8007302:	10db      	asrs	r3, r3, #3
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800730a:	4413      	add	r3, r2
 800730c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007310:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007314:	3308      	adds	r3, #8
 8007316:	b29b      	uxth	r3, r3
 8007318:	b21b      	sxth	r3, r3
 800731a:	425a      	negs	r2, r3
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	f002 0207 	and.w	r2, r2, #7
 8007324:	bf58      	it	pl
 8007326:	4253      	negpl	r3, r2
 8007328:	b21b      	sxth	r3, r3
 800732a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 800732e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007332:	f107 020c 	add.w	r2, r7, #12
 8007336:	18d1      	adds	r1, r2, r3
 8007338:	79fa      	ldrb	r2, [r7, #7]
 800733a:	489d      	ldr	r0, [pc, #628]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	4403      	add	r3, r0
 8007346:	3304      	adds	r3, #4
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800734e:	460a      	mov	r2, r1
 8007350:	2108      	movs	r1, #8
 8007352:	f7f9 f9eb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007356:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800735a:	3308      	adds	r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	da00      	bge.n	8007362 <Send_Service_Signal_Message+0x4e2>
 8007360:	3307      	adds	r3, #7
 8007362:	10db      	asrs	r3, r3, #3
 8007364:	b29a      	uxth	r2, r3
 8007366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800736a:	4413      	add	r3, r2
 800736c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007370:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007374:	3308      	adds	r3, #8
 8007376:	b29b      	uxth	r3, r3
 8007378:	b21b      	sxth	r3, r3
 800737a:	425a      	negs	r2, r3
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	f002 0207 	and.w	r2, r2, #7
 8007384:	bf58      	it	pl
 8007386:	4253      	negpl	r3, r2
 8007388:	b21b      	sxth	r3, r3
 800738a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800738e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007392:	f107 020c 	add.w	r2, r7, #12
 8007396:	18d1      	adds	r1, r2, r3
 8007398:	79fa      	ldrb	r2, [r7, #7]
 800739a:	4885      	ldr	r0, [pc, #532]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800739c:	4613      	mov	r3, r2
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	4413      	add	r3, r2
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	4403      	add	r3, r0
 80073a6:	3303      	adds	r3, #3
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073ae:	460a      	mov	r2, r1
 80073b0:	2108      	movs	r1, #8
 80073b2:	f7f9 f9bb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80073b6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073ba:	3308      	adds	r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	da00      	bge.n	80073c2 <Send_Service_Signal_Message+0x542>
 80073c0:	3307      	adds	r3, #7
 80073c2:	10db      	asrs	r3, r3, #3
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073ca:	4413      	add	r3, r2
 80073cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073d4:	3308      	adds	r3, #8
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b21b      	sxth	r3, r3
 80073da:	425a      	negs	r2, r3
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	f002 0207 	and.w	r2, r2, #7
 80073e4:	bf58      	it	pl
 80073e6:	4253      	negpl	r3, r2
 80073e8:	b21b      	sxth	r3, r3
 80073ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80073ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073f2:	f107 020c 	add.w	r2, r7, #12
 80073f6:	18d1      	adds	r1, r2, r3
 80073f8:	79fa      	ldrb	r2, [r7, #7]
 80073fa:	486d      	ldr	r0, [pc, #436]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80073fc:	4613      	mov	r3, r2
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	4403      	add	r3, r0
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800740c:	460a      	mov	r2, r1
 800740e:	2108      	movs	r1, #8
 8007410:	f7f9 f98c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007414:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007418:	3308      	adds	r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	da00      	bge.n	8007420 <Send_Service_Signal_Message+0x5a0>
 800741e:	3307      	adds	r3, #7
 8007420:	10db      	asrs	r3, r3, #3
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007428:	4413      	add	r3, r2
 800742a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800742e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007432:	3308      	adds	r3, #8
 8007434:	b29b      	uxth	r3, r3
 8007436:	b21b      	sxth	r3, r3
 8007438:	425a      	negs	r2, r3
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	f002 0207 	and.w	r2, r2, #7
 8007442:	bf58      	it	pl
 8007444:	4253      	negpl	r3, r2
 8007446:	b21b      	sxth	r3, r3
 8007448:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 800744c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007450:	f107 020c 	add.w	r2, r7, #12
 8007454:	18d1      	adds	r1, r2, r3
 8007456:	79fa      	ldrb	r2, [r7, #7]
 8007458:	4855      	ldr	r0, [pc, #340]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	4403      	add	r3, r0
 8007464:	3301      	adds	r3, #1
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800746c:	460a      	mov	r2, r1
 800746e:	2108      	movs	r1, #8
 8007470:	f7f9 f95c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007474:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007478:	3308      	adds	r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	da00      	bge.n	8007480 <Send_Service_Signal_Message+0x600>
 800747e:	3307      	adds	r3, #7
 8007480:	10db      	asrs	r3, r3, #3
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007488:	4413      	add	r3, r2
 800748a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800748e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007492:	3308      	adds	r3, #8
 8007494:	b29b      	uxth	r3, r3
 8007496:	b21b      	sxth	r3, r3
 8007498:	425a      	negs	r2, r3
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	f002 0207 	and.w	r2, r2, #7
 80074a2:	bf58      	it	pl
 80074a4:	4253      	negpl	r3, r2
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 80074ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074b0:	f107 020c 	add.w	r2, r7, #12
 80074b4:	18d1      	adds	r1, r2, r3
 80074b6:	79fa      	ldrb	r2, [r7, #7]
 80074b8:	483d      	ldr	r0, [pc, #244]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80074ba:	4613      	mov	r3, r2
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4403      	add	r3, r0
 80074c4:	3302      	adds	r3, #2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074cc:	460a      	mov	r2, r1
 80074ce:	2108      	movs	r1, #8
 80074d0:	f7f9 f92c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80074d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074d8:	3308      	adds	r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da00      	bge.n	80074e0 <Send_Service_Signal_Message+0x660>
 80074de:	3307      	adds	r3, #7
 80074e0:	10db      	asrs	r3, r3, #3
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074e8:	4413      	add	r3, r2
 80074ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074f2:	3308      	adds	r3, #8
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	b21b      	sxth	r3, r3
 80074f8:	425a      	negs	r2, r3
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	f002 0207 	and.w	r2, r2, #7
 8007502:	bf58      	it	pl
 8007504:	4253      	negpl	r3, r2
 8007506:	b21b      	sxth	r3, r3
 8007508:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 800750c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007510:	f107 020c 	add.w	r2, r7, #12
 8007514:	18d4      	adds	r4, r2, r3
 8007516:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800751a:	f107 030c 	add.w	r3, r7, #12
 800751e:	4611      	mov	r1, r2
 8007520:	4618      	mov	r0, r3
 8007522:	f009 fa3d 	bl	80109a0 <CalculateDirectReverseCrc>
 8007526:	4603      	mov	r3, r0
 8007528:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800752c:	4622      	mov	r2, r4
 800752e:	2120      	movs	r1, #32
 8007530:	f7f9 f8fc 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007534:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007538:	3320      	adds	r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	da00      	bge.n	8007540 <Send_Service_Signal_Message+0x6c0>
 800753e:	3307      	adds	r3, #7
 8007540:	10db      	asrs	r3, r3, #3
 8007542:	b29a      	uxth	r2, r3
 8007544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007548:	4413      	add	r3, r2
 800754a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800754e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007552:	3320      	adds	r3, #32
 8007554:	b29b      	uxth	r3, r3
 8007556:	b21b      	sxth	r3, r3
 8007558:	425a      	negs	r2, r3
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	f002 0207 	and.w	r2, r2, #7
 8007562:	bf58      	it	pl
 8007564:	4253      	negpl	r3, r2
 8007566:	b21b      	sxth	r3, r3
 8007568:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800756c:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <Send_Service_Signal_Message+0x734>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	0a5b      	lsrs	r3, r3, #9
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <Send_Service_Signal_Message+0x712>
 800757a:	4b0e      	ldr	r3, [pc, #56]	; (80075b4 <Send_Service_Signal_Message+0x734>)
 800757c:	791b      	ldrb	r3, [r3, #4]
 800757e:	79fa      	ldrb	r2, [r7, #7]
 8007580:	429a      	cmp	r2, r3
 8007582:	d106      	bne.n	8007592 <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007584:	480c      	ldr	r0, [pc, #48]	; (80075b8 <Send_Service_Signal_Message+0x738>)
 8007586:	f018 fed5 	bl	8020334 <puts>
		printf("Not Sending Reply");
 800758a:	480c      	ldr	r0, [pc, #48]	; (80075bc <Send_Service_Signal_Message+0x73c>)
 800758c:	f018 fe36 	bl	80201fc <iprintf>
 8007590:	e009      	b.n	80075a6 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007596:	b2d9      	uxtb	r1, r3
 8007598:	79fa      	ldrb	r2, [r7, #7]
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f80e 	bl	80075c0 <Process_Sending_Reply>
	}
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	3754      	adds	r7, #84	; 0x54
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd90      	pop	{r4, r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20001188 	.word	0x20001188
 80075b4:	2000195c 	.word	0x2000195c
 80075b8:	08021e80 	.word	0x08021e80
 80075bc:	08021e98 	.word	0x08021e98

080075c0 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b09c      	sub	sp, #112	; 0x70
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
 80075cc:	4613      	mov	r3, r2
 80075ce:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 80075d0:	2300      	movs	r3, #0
 80075d2:	60bb      	str	r3, [r7, #8]
 80075d4:	f107 030c 	add.w	r3, r7, #12
 80075d8:	2260      	movs	r2, #96	; 0x60
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f018 fd25 	bl	802002c <memset>
	uint8_t uc_index = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 80075ee:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80075f8:	4619      	mov	r1, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8007602:	443b      	add	r3, r7
 8007604:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007608:	2301      	movs	r3, #1
 800760a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800760e:	e03c      	b.n	800768a <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 8007610:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4413      	add	r3, r2
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2bef      	cmp	r3, #239	; 0xef
 800761c:	d922      	bls.n	8007664 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 800761e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	781a      	ldrb	r2, [r3, #0]
 8007628:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800762c:	1c59      	adds	r1, r3, #1
 800762e:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007632:	f022 020f 	bic.w	r2, r2, #15
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	3370      	adds	r3, #112	; 0x70
 800763a:	443b      	add	r3, r7
 800763c:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 8007640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800764e:	1c59      	adds	r1, r3, #1
 8007650:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007654:	f002 020f 	and.w	r2, r2, #15
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	3370      	adds	r3, #112	; 0x70
 800765c:	443b      	add	r3, r7
 800765e:	f803 2c68 	strb.w	r2, [r3, #-104]
 8007662:	e00d      	b.n	8007680 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 8007664:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	441a      	add	r2, r3
 800766c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007670:	1c59      	adds	r1, r3, #1
 8007672:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	3370      	adds	r3, #112	; 0x70
 800767a:	443b      	add	r3, r7
 800767c:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007680:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007684:	3301      	adds	r3, #1
 8007686:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800768a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3bd      	bcc.n	8007610 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007694:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 800769e:	3370      	adds	r3, #112	; 0x70
 80076a0:	443b      	add	r3, r7
 80076a2:	22f6      	movs	r2, #246	; 0xf6
 80076a4:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 80076a8:	78bb      	ldrb	r3, [r7, #2]
 80076aa:	4a37      	ldr	r2, [pc, #220]	; (8007788 <Process_Sending_Reply+0x1c8>)
 80076ac:	5cd3      	ldrb	r3, [r2, r3]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d10b      	bne.n	80076ca <Process_Sending_Reply+0x10a>
 80076b2:	4b36      	ldr	r3, [pc, #216]	; (800778c <Process_Sending_Reply+0x1cc>)
 80076b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <Process_Sending_Reply+0x10a>
 80076bc:	4b34      	ldr	r3, [pc, #208]	; (8007790 <Process_Sending_Reply+0x1d0>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d102      	bne.n	80076ca <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80076c4:	4833      	ldr	r0, [pc, #204]	; (8007794 <Process_Sending_Reply+0x1d4>)
 80076c6:	f001 f875 	bl	80087b4 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 80076ca:	78bb      	ldrb	r3, [r7, #2]
 80076cc:	4a32      	ldr	r2, [pc, #200]	; (8007798 <Process_Sending_Reply+0x1d8>)
 80076ce:	4413      	add	r3, r2
 80076d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d10d      	bne.n	80076f4 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 80076d8:	78bb      	ldrb	r3, [r7, #2]
 80076da:	4a30      	ldr	r2, [pc, #192]	; (800779c <Process_Sending_Reply+0x1dc>)
 80076dc:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80076e0:	f107 0008 	add.w	r0, r7, #8
 80076e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076e8:	f005 fa74 	bl	800cbd4 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = CLEAR;
 80076ec:	78bb      	ldrb	r3, [r7, #2]
 80076ee:	4a26      	ldr	r2, [pc, #152]	; (8007788 <Process_Sending_Reply+0x1c8>)
 80076f0:	2100      	movs	r1, #0
 80076f2:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80076f4:	78bb      	ldrb	r3, [r7, #2]
 80076f6:	4a28      	ldr	r2, [pc, #160]	; (8007798 <Process_Sending_Reply+0x1d8>)
 80076f8:	4413      	add	r3, r2
 80076fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d119      	bne.n	8007736 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 8007702:	2300      	movs	r3, #0
 8007704:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007708:	e00e      	b.n	8007728 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 800770a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800770e:	3370      	adds	r3, #112	; 0x70
 8007710:	443b      	add	r3, r7
 8007712:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8007716:	4619      	mov	r1, r3
 8007718:	2003      	movs	r0, #3
 800771a:	f00b fb0d 	bl	8012d38 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 800771e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007722:	3301      	adds	r3, #1
 8007724:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007728:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800772c:	b29b      	uxth	r3, r3
 800772e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007732:	429a      	cmp	r2, r3
 8007734:	d3e9      	bcc.n	800770a <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 8007736:	4b16      	ldr	r3, [pc, #88]	; (8007790 <Process_Sending_Reply+0x1d0>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d102      	bne.n	8007744 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 800773e:	4815      	ldr	r0, [pc, #84]	; (8007794 <Process_Sending_Reply+0x1d4>)
 8007740:	f001 f838 	bl	80087b4 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007750:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007754:	461a      	mov	r2, r3
 8007756:	2101      	movs	r1, #1
 8007758:	480c      	ldr	r0, [pc, #48]	; (800778c <Process_Sending_Reply+0x1cc>)
 800775a:	f000 fe85 	bl	8008468 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	461a      	mov	r2, r3
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fe7b 	bl	8008468 <Print_EI_DATA>

	if(Debug_flag == 1)
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <Process_Sending_Reply+0x1d0>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d102      	bne.n	8007780 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 800777a:	4809      	ldr	r0, [pc, #36]	; (80077a0 <Process_Sending_Reply+0x1e0>)
 800777c:	f001 f81a 	bl	80087b4 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007780:	bf00      	nop
 8007782:	3770      	adds	r7, #112	; 0x70
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	200010cc 	.word	0x200010cc
 800778c:	20001c10 	.word	0x20001c10
 8007790:	20000645 	.word	0x20000645
 8007794:	08022398 	.word	0x08022398
 8007798:	20000304 	.word	0x20000304
 800779c:	20001058 	.word	0x20001058
 80077a0:	080223f8 	.word	0x080223f8

080077a4 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 80077ae:	f00b fd1b 	bl	80131e8 <HAL_GetTick>
 80077b2:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	4a86      	ldr	r2, [pc, #536]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 80077b8:	4413      	add	r3, r2
 80077ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077be:	2b02      	cmp	r3, #2
 80077c0:	f000 8102 	beq.w	80079c8 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80077c4:	79fa      	ldrb	r2, [r7, #7]
 80077c6:	4983      	ldr	r1, [pc, #524]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80077c8:	4613      	mov	r3, r2
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4413      	add	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	440b      	add	r3, r1
 80077d2:	3303      	adds	r3, #3
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d12b      	bne.n	8007832 <Check_Primary_r_Secondary+0x8e>
 80077da:	79fa      	ldrb	r2, [r7, #7]
 80077dc:	497e      	ldr	r1, [pc, #504]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 80077de:	4613      	mov	r3, r2
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	4413      	add	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	440b      	add	r3, r1
 80077e8:	3303      	adds	r3, #3
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d120      	bne.n	8007832 <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80077f0:	79fa      	ldrb	r2, [r7, #7]
 80077f2:	4978      	ldr	r1, [pc, #480]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80077f4:	4613      	mov	r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	440b      	add	r3, r1
 80077fe:	3304      	adds	r3, #4
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 80e1 	beq.w	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	4a71      	ldr	r2, [pc, #452]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800780c:	3366      	adds	r3, #102	; 0x66
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4619      	mov	r1, r3
 8007816:	4871      	ldr	r0, [pc, #452]	; (80079dc <Check_Primary_r_Secondary+0x238>)
 8007818:	f018 fcf0 	bl	80201fc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800781c:	79fa      	ldrb	r2, [r7, #7]
 800781e:	496d      	ldr	r1, [pc, #436]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007820:	4613      	mov	r3, r2
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	4413      	add	r3, r2
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	440b      	add	r3, r1
 800782a:	3304      	adds	r3, #4
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007830:	e0cb      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007832:	79fa      	ldrb	r2, [r7, #7]
 8007834:	4967      	ldr	r1, [pc, #412]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007836:	4613      	mov	r3, r2
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	4413      	add	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	440b      	add	r3, r1
 8007840:	3303      	adds	r3, #3
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d12b      	bne.n	80078a0 <Check_Primary_r_Secondary+0xfc>
 8007848:	79fa      	ldrb	r2, [r7, #7]
 800784a:	4963      	ldr	r1, [pc, #396]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 800784c:	4613      	mov	r3, r2
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	4413      	add	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	440b      	add	r3, r1
 8007856:	3303      	adds	r3, #3
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d120      	bne.n	80078a0 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800785e:	79fa      	ldrb	r2, [r7, #7]
 8007860:	495c      	ldr	r1, [pc, #368]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007862:	4613      	mov	r3, r2
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	4413      	add	r3, r2
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	440b      	add	r3, r1
 800786c:	3304      	adds	r3, #4
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80aa 	beq.w	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	4a55      	ldr	r2, [pc, #340]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800787a:	3366      	adds	r3, #102	; 0x66
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	4619      	mov	r1, r3
 8007884:	4856      	ldr	r0, [pc, #344]	; (80079e0 <Check_Primary_r_Secondary+0x23c>)
 8007886:	f018 fcb9 	bl	80201fc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800788a:	79fa      	ldrb	r2, [r7, #7]
 800788c:	4951      	ldr	r1, [pc, #324]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 800788e:	4613      	mov	r3, r2
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	4413      	add	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	440b      	add	r3, r1
 8007898:	3304      	adds	r3, #4
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800789e:	e094      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80078a0:	79fa      	ldrb	r2, [r7, #7]
 80078a2:	494c      	ldr	r1, [pc, #304]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80078a4:	4613      	mov	r3, r2
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	4413      	add	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	440b      	add	r3, r1
 80078ae:	3303      	adds	r3, #3
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d13e      	bne.n	8007934 <Check_Primary_r_Secondary+0x190>
 80078b6:	79fa      	ldrb	r2, [r7, #7]
 80078b8:	4947      	ldr	r1, [pc, #284]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 80078ba:	4613      	mov	r3, r2
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	4413      	add	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	440b      	add	r3, r1
 80078c4:	3303      	adds	r3, #3
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d133      	bne.n	8007934 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	4941      	ldr	r1, [pc, #260]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80078d0:	4613      	mov	r3, r2
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	4413      	add	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	440b      	add	r3, r1
 80078da:	3304      	adds	r3, #4
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d073      	beq.n	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	4a3a      	ldr	r2, [pc, #232]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 80078e6:	3366      	adds	r3, #102	; 0x66
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	4619      	mov	r1, r3
 80078f0:	483c      	ldr	r0, [pc, #240]	; (80079e4 <Check_Primary_r_Secondary+0x240>)
 80078f2:	f018 fc83 	bl	80201fc <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	493b      	ldr	r1, [pc, #236]	; (80079e8 <Check_Primary_r_Secondary+0x244>)
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	493a      	ldr	r1, [pc, #232]	; (80079ec <Check_Primary_r_Secondary+0x248>)
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 800790a:	79fa      	ldrb	r2, [r7, #7]
 800790c:	4931      	ldr	r1, [pc, #196]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 800790e:	4613      	mov	r3, r2
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	4413      	add	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	440b      	add	r3, r1
 8007918:	3310      	adds	r3, #16
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 800791e:	79fa      	ldrb	r2, [r7, #7]
 8007920:	492c      	ldr	r1, [pc, #176]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007922:	4613      	mov	r3, r2
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	4413      	add	r3, r2
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	440b      	add	r3, r1
 800792c:	3304      	adds	r3, #4
 800792e:	2201      	movs	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007932:	e04a      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007934:	79fa      	ldrb	r2, [r7, #7]
 8007936:	4927      	ldr	r1, [pc, #156]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007938:	4613      	mov	r3, r2
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	440b      	add	r3, r1
 8007942:	3303      	adds	r3, #3
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d13f      	bne.n	80079ca <Check_Primary_r_Secondary+0x226>
 800794a:	79fa      	ldrb	r2, [r7, #7]
 800794c:	4922      	ldr	r1, [pc, #136]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 800794e:	4613      	mov	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4413      	add	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	440b      	add	r3, r1
 8007958:	3303      	adds	r3, #3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d134      	bne.n	80079ca <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007960:	79fa      	ldrb	r2, [r7, #7]
 8007962:	491c      	ldr	r1, [pc, #112]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007964:	4613      	mov	r3, r2
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	4413      	add	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	440b      	add	r3, r1
 800796e:	3304      	adds	r3, #4
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d029      	beq.n	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800797a:	3366      	adds	r3, #102	; 0x66
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4619      	mov	r1, r3
 8007984:	481a      	ldr	r0, [pc, #104]	; (80079f0 <Check_Primary_r_Secondary+0x24c>)
 8007986:	f018 fc39 	bl	80201fc <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	4916      	ldr	r1, [pc, #88]	; (80079e8 <Check_Primary_r_Secondary+0x244>)
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	4915      	ldr	r1, [pc, #84]	; (80079ec <Check_Primary_r_Secondary+0x248>)
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 800799e:	79fa      	ldrb	r2, [r7, #7]
 80079a0:	490c      	ldr	r1, [pc, #48]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80079a2:	4613      	mov	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4413      	add	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	440b      	add	r3, r1
 80079ac:	3310      	adds	r3, #16
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80079b2:	79fa      	ldrb	r2, [r7, #7]
 80079b4:	4907      	ldr	r1, [pc, #28]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	440b      	add	r3, r1
 80079c0:	3304      	adds	r3, #4
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e000      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
		return;
 80079c8:	bf00      	nop
			//			}
#endif

		}
	}
}
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000304 	.word	0x20000304
 80079d4:	20001674 	.word	0x20001674
 80079d8:	20001764 	.word	0x20001764
 80079dc:	080225b0 	.word	0x080225b0
 80079e0:	080225ec 	.word	0x080225ec
 80079e4:	08022628 	.word	0x08022628
 80079e8:	20000fa4 	.word	0x20000fa4
 80079ec:	20000fcc 	.word	0x20000fcc
 80079f0:	08022660 	.word	0x08022660

080079f4 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	4aac      	ldr	r2, [pc, #688]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007a02:	4413      	add	r3, r2
 8007a04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	f000 814f 	beq.w	8007cac <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007a0e:	79fa      	ldrb	r2, [r7, #7]
 8007a10:	49a9      	ldr	r1, [pc, #676]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	440b      	add	r3, r1
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	79fa      	ldrb	r2, [r7, #7]
 8007a22:	48a6      	ldr	r0, [pc, #664]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a24:	4613      	mov	r3, r2
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	4413      	add	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4403      	add	r3, r0
 8007a2e:	3308      	adds	r3, #8
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4299      	cmp	r1, r3
 8007a34:	f000 8092 	beq.w	8007b5c <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8007a38:	79fa      	ldrb	r2, [r7, #7]
 8007a3a:	49a0      	ldr	r1, [pc, #640]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	440b      	add	r3, r1
 8007a46:	3308      	adds	r3, #8
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8086 	beq.w	8007b5c <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007a50:	79fa      	ldrb	r2, [r7, #7]
 8007a52:	4999      	ldr	r1, [pc, #612]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a54:	4613      	mov	r3, r2
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3304      	adds	r3, #4
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d104      	bne.n	8007a70 <Check_Vital_CRC+0x7c>
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	4a95      	ldr	r2, [pc, #596]	; (8007cc0 <Check_Vital_CRC+0x2cc>)
 8007a6a:	5cd3      	ldrb	r3, [r2, r3]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d175      	bne.n	8007b5c <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007a70:	79fa      	ldrb	r2, [r7, #7]
 8007a72:	4991      	ldr	r1, [pc, #580]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a74:	4613      	mov	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4413      	add	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3308      	adds	r3, #8
 8007a80:	6819      	ldr	r1, [r3, #0]
 8007a82:	79fa      	ldrb	r2, [r7, #7]
 8007a84:	488d      	ldr	r0, [pc, #564]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	4403      	add	r3, r0
 8007a90:	3308      	adds	r3, #8
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1acb      	subs	r3, r1, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bfb8      	it	lt
 8007a9a:	425b      	neglt	r3, r3
 8007a9c:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d104      	bne.n	8007aae <Check_Vital_CRC+0xba>
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	4a87      	ldr	r2, [pc, #540]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007aa8:	5cd3      	ldrb	r3, [r2, r3]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d14c      	bne.n	8007b48 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	4a84      	ldr	r2, [pc, #528]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	4a7e      	ldr	r2, [pc, #504]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007aba:	3366      	adds	r3, #102	; 0x66
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4880      	ldr	r0, [pc, #512]	; (8007cc8 <Check_Vital_CRC+0x2d4>)
 8007ac6:	f018 fb99 	bl	80201fc <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007aca:	79fa      	ldrb	r2, [r7, #7]
 8007acc:	497a      	ldr	r1, [pc, #488]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007ace:	4613      	mov	r3, r2
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	4413      	add	r3, r2
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	440b      	add	r3, r1
 8007ad8:	3308      	adds	r3, #8
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	487b      	ldr	r0, [pc, #492]	; (8007ccc <Check_Vital_CRC+0x2d8>)
 8007ae0:	f018 fb8c 	bl	80201fc <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007ae4:	79fa      	ldrb	r2, [r7, #7]
 8007ae6:	4975      	ldr	r1, [pc, #468]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007ae8:	4613      	mov	r3, r2
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	440b      	add	r3, r1
 8007af2:	3308      	adds	r3, #8
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	4875      	ldr	r0, [pc, #468]	; (8007cd0 <Check_Vital_CRC+0x2dc>)
 8007afa:	f018 fb7f 	bl	80201fc <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007afe:	4875      	ldr	r0, [pc, #468]	; (8007cd4 <Check_Vital_CRC+0x2e0>)
 8007b00:	f018 fc18 	bl	8020334 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b04:	79fa      	ldrb	r2, [r7, #7]
 8007b06:	79f9      	ldrb	r1, [r7, #7]
 8007b08:	486c      	ldr	r0, [pc, #432]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	4413      	add	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4403      	add	r3, r0
 8007b14:	3308      	adds	r3, #8
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	486f      	ldr	r0, [pc, #444]	; (8007cd8 <Check_Vital_CRC+0x2e4>)
 8007b1a:	010b      	lsls	r3, r1, #4
 8007b1c:	4403      	add	r3, r0
 8007b1e:	3308      	adds	r3, #8
 8007b20:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b22:	79f9      	ldrb	r1, [r7, #7]
 8007b24:	79fa      	ldrb	r2, [r7, #7]
 8007b26:	4865      	ldr	r0, [pc, #404]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b28:	460b      	mov	r3, r1
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	440b      	add	r3, r1
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4403      	add	r3, r0
 8007b32:	3308      	adds	r3, #8
 8007b34:	6819      	ldr	r1, [r3, #0]
 8007b36:	4860      	ldr	r0, [pc, #384]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007b38:	4613      	mov	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	4413      	add	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	4403      	add	r3, r0
 8007b42:	3308      	adds	r3, #8
 8007b44:	6019      	str	r1, [r3, #0]
 8007b46:	e009      	b.n	8007b5c <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d106      	bne.n	8007b5c <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	4a5c      	ldr	r2, [pc, #368]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007b52:	5cd2      	ldrb	r2, [r2, r3]
 8007b54:	3201      	adds	r2, #1
 8007b56:	b2d1      	uxtb	r1, r2
 8007b58:	4a5a      	ldr	r2, [pc, #360]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007b5a:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007b5c:	79fa      	ldrb	r2, [r7, #7]
 8007b5e:	4956      	ldr	r1, [pc, #344]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007b60:	4613      	mov	r3, r2
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	4413      	add	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	440b      	add	r3, r1
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	79fa      	ldrb	r2, [r7, #7]
 8007b70:	4852      	ldr	r0, [pc, #328]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b72:	4613      	mov	r3, r2
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	4413      	add	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4403      	add	r3, r0
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4299      	cmp	r1, r3
 8007b82:	f000 8094 	beq.w	8007cae <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007b86:	79fa      	ldrb	r2, [r7, #7]
 8007b88:	494c      	ldr	r1, [pc, #304]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	4413      	add	r3, r2
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	440b      	add	r3, r1
 8007b94:	330c      	adds	r3, #12
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8088 	beq.w	8007cae <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007b9e:	79fa      	ldrb	r2, [r7, #7]
 8007ba0:	4945      	ldr	r1, [pc, #276]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	4413      	add	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	440b      	add	r3, r1
 8007bac:	3304      	adds	r3, #4
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d104      	bne.n	8007bbe <Check_Vital_CRC+0x1ca>
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	4a42      	ldr	r2, [pc, #264]	; (8007cc0 <Check_Vital_CRC+0x2cc>)
 8007bb8:	5cd3      	ldrb	r3, [r2, r3]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d177      	bne.n	8007cae <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007bbe:	79fa      	ldrb	r2, [r7, #7]
 8007bc0:	493d      	ldr	r1, [pc, #244]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	440b      	add	r3, r1
 8007bcc:	330c      	adds	r3, #12
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	79fa      	ldrb	r2, [r7, #7]
 8007bd2:	483a      	ldr	r0, [pc, #232]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	4413      	add	r3, r2
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	4403      	add	r3, r0
 8007bde:	330c      	adds	r3, #12
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	1acb      	subs	r3, r1, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfb8      	it	lt
 8007be8:	425b      	neglt	r3, r3
 8007bea:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d104      	bne.n	8007bfc <Check_Vital_CRC+0x208>
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	4a39      	ldr	r2, [pc, #228]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007bf6:	5cd3      	ldrb	r3, [r2, r3]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d14c      	bne.n	8007c96 <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	4a37      	ldr	r2, [pc, #220]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007c00:	2100      	movs	r1, #0
 8007c02:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	4a2b      	ldr	r2, [pc, #172]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007c08:	3366      	adds	r3, #102	; 0x66
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4619      	mov	r1, r3
 8007c12:	4833      	ldr	r0, [pc, #204]	; (8007ce0 <Check_Vital_CRC+0x2ec>)
 8007c14:	f018 faf2 	bl	80201fc <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c18:	79fa      	ldrb	r2, [r7, #7]
 8007c1a:	4927      	ldr	r1, [pc, #156]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	4413      	add	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	440b      	add	r3, r1
 8007c26:	330c      	adds	r3, #12
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	482d      	ldr	r0, [pc, #180]	; (8007ce4 <Check_Vital_CRC+0x2f0>)
 8007c2e:	f018 fae5 	bl	80201fc <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c32:	79fa      	ldrb	r2, [r7, #7]
 8007c34:	4921      	ldr	r1, [pc, #132]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c36:	4613      	mov	r3, r2
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4413      	add	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	440b      	add	r3, r1
 8007c40:	330c      	adds	r3, #12
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4619      	mov	r1, r3
 8007c46:	4828      	ldr	r0, [pc, #160]	; (8007ce8 <Check_Vital_CRC+0x2f4>)
 8007c48:	f018 fad8 	bl	80201fc <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007c4c:	4827      	ldr	r0, [pc, #156]	; (8007cec <Check_Vital_CRC+0x2f8>)
 8007c4e:	f018 fb71 	bl	8020334 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007c52:	79fa      	ldrb	r2, [r7, #7]
 8007c54:	79f9      	ldrb	r1, [r7, #7]
 8007c56:	4819      	ldr	r0, [pc, #100]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c58:	4613      	mov	r3, r2
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	4413      	add	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4403      	add	r3, r0
 8007c62:	330c      	adds	r3, #12
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	481c      	ldr	r0, [pc, #112]	; (8007cd8 <Check_Vital_CRC+0x2e4>)
 8007c68:	010b      	lsls	r3, r1, #4
 8007c6a:	4403      	add	r3, r0
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007c70:	79f9      	ldrb	r1, [r7, #7]
 8007c72:	79fa      	ldrb	r2, [r7, #7]
 8007c74:	4811      	ldr	r0, [pc, #68]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c76:	460b      	mov	r3, r1
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	440b      	add	r3, r1
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4403      	add	r3, r0
 8007c80:	330c      	adds	r3, #12
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	480c      	ldr	r0, [pc, #48]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4403      	add	r3, r0
 8007c90:	330c      	adds	r3, #12
 8007c92:	6019      	str	r1, [r3, #0]
 8007c94:	e00b      	b.n	8007cae <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d108      	bne.n	8007cae <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	4a0f      	ldr	r2, [pc, #60]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007ca0:	5cd2      	ldrb	r2, [r2, r3]
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	b2d1      	uxtb	r1, r2
 8007ca6:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007ca8:	54d1      	strb	r1, [r2, r3]
 8007caa:	e000      	b.n	8007cae <Check_Vital_CRC+0x2ba>
		return;
 8007cac:	bf00      	nop
				}
			}
		}
	}
}
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000304 	.word	0x20000304
 8007cb8:	20001674 	.word	0x20001674
 8007cbc:	20001764 	.word	0x20001764
 8007cc0:	20000ff4 	.word	0x20000ff4
 8007cc4:	20002038 	.word	0x20002038
 8007cc8:	0802269c 	.word	0x0802269c
 8007ccc:	080226e0 	.word	0x080226e0
 8007cd0:	08022704 	.word	0x08022704
 8007cd4:	08022728 	.word	0x08022728
 8007cd8:	200011c4 	.word	0x200011c4
 8007cdc:	20002044 	.word	0x20002044
 8007ce0:	08022750 	.word	0x08022750
 8007ce4:	08022794 	.word	0x08022794
 8007ce8:	080227b8 	.word	0x080227b8
 8007cec:	080227dc 	.word	0x080227dc

08007cf0 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	4a0a      	ldr	r2, [pc, #40]	; (8007d28 <Check_Other_EiPC_Packet+0x38>)
 8007cfe:	4413      	add	r3, r2
 8007d00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d007      	beq.n	8007d18 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fd4a 	bl	80077a4 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff fe6e 	bl	80079f4 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 f98e 	bl	800903c <CheckOtherLinkStatus>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000304 	.word	0x20000304

08007d2c <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8007d2c:	b590      	push	{r4, r7, lr}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007d36:	4930      	ldr	r1, [pc, #192]	; (8007df8 <CheckLinkEstablishTimeout+0xcc>)
 8007d38:	4830      	ldr	r0, [pc, #192]	; (8007dfc <CheckLinkEstablishTimeout+0xd0>)
 8007d3a:	f7f8 fa81 	bl	8000240 <strcmp>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d055      	beq.n	8007df0 <CheckLinkEstablishTimeout+0xc4>
		return;
	}



	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007d44:	2300      	movs	r3, #0
 8007d46:	71fb      	strb	r3, [r7, #7]
 8007d48:	e04b      	b.n	8007de2 <CheckLinkEstablishTimeout+0xb6>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	4a2c      	ldr	r2, [pc, #176]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f004 fbc6 	bl	800c4e4 <HAL_Elaps_Ticks>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	4929      	ldr	r1, [pc, #164]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007d5e:	339e      	adds	r3, #158	; 0x9e
 8007d60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d939      	bls.n	8007ddc <CheckLinkEstablishTimeout+0xb0>
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <CheckLinkEstablishTimeout+0xdc>)
 8007d6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	4923      	ldr	r1, [pc, #140]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d02f      	beq.n	8007ddc <CheckLinkEstablishTimeout+0xb0>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8007d7c:	79fa      	ldrb	r2, [r7, #7]
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	491f      	ldr	r1, [pc, #124]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d86:	4920      	ldr	r1, [pc, #128]	; (8007e08 <CheckLinkEstablishTimeout+0xdc>)
 8007d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007d90:	3366      	adds	r3, #102	; 0x66
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	481c      	ldr	r0, [pc, #112]	; (8007e0c <CheckLinkEstablishTimeout+0xe0>)
 8007d9c:	f018 fa2e 	bl	80201fc <iprintf>
			Link_Flag[Traverser] = CLEAR;
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <CheckLinkEstablishTimeout+0xe4>)
 8007da4:	2100      	movs	r1, #0
 8007da6:	54d1      	strb	r1, [r2, r3]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8007da8:	79fa      	ldrb	r2, [r7, #7]
 8007daa:	491a      	ldr	r1, [pc, #104]	; (8007e14 <CheckLinkEstablishTimeout+0xe8>)
 8007dac:	4613      	mov	r3, r2
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	4413      	add	r3, r2
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	440b      	add	r3, r1
 8007db6:	3310      	adds	r3, #16
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	79fc      	ldrb	r4, [r7, #7]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f004 fb91 	bl	800c4e4 <HAL_Elaps_Ticks>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4913      	ldr	r1, [pc, #76]	; (8007e14 <CheckLinkEstablishTimeout+0xe8>)
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	4423      	add	r3, r4
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	440b      	add	r3, r1
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 f930 	bl	800903c <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	3301      	adds	r3, #1
 8007de0:	71fb      	strb	r3, [r7, #7]
 8007de2:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007de8:	79fa      	ldrb	r2, [r7, #7]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d3ad      	bcc.n	8007d4a <CheckLinkEstablishTimeout+0x1e>
 8007dee:	e000      	b.n	8007df2 <CheckLinkEstablishTimeout+0xc6>
		return;
 8007df0:	bf00      	nop
		}
	}
}
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd90      	pop	{r4, r7, pc}
 8007df8:	080219a8 	.word	0x080219a8
 8007dfc:	20000305 	.word	0x20000305
 8007e00:	20000f14 	.word	0x20000f14
 8007e04:	20000304 	.word	0x20000304
 8007e08:	20002050 	.word	0x20002050
 8007e0c:	08022804 	.word	0x08022804
 8007e10:	20000f64 	.word	0x20000f64
 8007e14:	20001674 	.word	0x20001674

08007e18 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	71fb      	strb	r3, [r7, #7]
 8007e22:	e049      	b.n	8007eb8 <Send_Self_Sharing+0xa0>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	4a29      	ldr	r2, [pc, #164]	; (8007ecc <Send_Self_Sharing+0xb4>)
 8007e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f004 fb59 	bl	800c4e4 <HAL_Elaps_Ticks>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b26      	ldr	r3, [pc, #152]	; (8007ed0 <Send_Self_Sharing+0xb8>)
 8007e36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d939      	bls.n	8007eb2 <Send_Self_Sharing+0x9a>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8007e3e:	79fa      	ldrb	r2, [r7, #7]
 8007e40:	4924      	ldr	r1, [pc, #144]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e42:	4613      	mov	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8007e52:	79f9      	ldrb	r1, [r7, #7]
 8007e54:	79fa      	ldrb	r2, [r7, #7]
 8007e56:	4820      	ldr	r0, [pc, #128]	; (8007ed8 <Send_Self_Sharing+0xc0>)
 8007e58:	460b      	mov	r3, r1
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	440b      	add	r3, r1
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4403      	add	r3, r0
 8007e62:	3301      	adds	r3, #1
 8007e64:	7818      	ldrb	r0, [r3, #0]
 8007e66:	491b      	ldr	r1, [pc, #108]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	440b      	add	r3, r1
 8007e72:	3302      	adds	r3, #2
 8007e74:	4602      	mov	r2, r0
 8007e76:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007e78:	2218      	movs	r2, #24
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4817      	ldr	r0, [pc, #92]	; (8007edc <Send_Self_Sharing+0xc4>)
 8007e7e:	f018 f8d5 	bl	802002c <memset>
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8007e82:	79fa      	ldrb	r2, [r7, #7]
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	4a11      	ldr	r2, [pc, #68]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e8e:	4413      	add	r3, r2
 8007e90:	2218      	movs	r2, #24
 8007e92:	4619      	mov	r1, r3
 8007e94:	4811      	ldr	r0, [pc, #68]	; (8007edc <Send_Self_Sharing+0xc4>)
 8007e96:	f018 f8a1 	bl	801ffdc <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8007e9a:	f240 2001 	movw	r0, #513	; 0x201
 8007e9e:	f005 f8e1 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8007ea2:	79fc      	ldrb	r4, [r7, #7]
 8007ea4:	f00b f9a0 	bl	80131e8 <HAL_GetTick>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4a08      	ldr	r2, [pc, #32]	; (8007ecc <Send_Self_Sharing+0xb4>)
 8007eac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8007eb0:	e008      	b.n	8007ec4 <Send_Self_Sharing+0xac>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	71fb      	strb	r3, [r7, #7]
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <Send_Self_Sharing+0xb8>)
 8007eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ebe:	79fa      	ldrb	r2, [r7, #7]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d3af      	bcc.n	8007e24 <Send_Self_Sharing+0xc>
		}
	}
}
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd90      	pop	{r4, r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000e44 	.word	0x20000e44
 8007ed0:	20000304 	.word	0x20000304
 8007ed4:	20001674 	.word	0x20001674
 8007ed8:	20001cc8 	.word	0x20001cc8
 8007edc:	20001854 	.word	0x20001854

08007ee0 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8007ee4:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8007eec:	f009 f808 	bl	8010f00 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007ef0:	4922      	ldr	r1, [pc, #136]	; (8007f7c <Detect_CAN_Xchange_Failure+0x9c>)
 8007ef2:	4823      	ldr	r0, [pc, #140]	; (8007f80 <Detect_CAN_Xchange_Failure+0xa0>)
 8007ef4:	f7f8 f9a4 	bl	8000240 <strcmp>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8007efe:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
		return;
 8007f04:	e036      	b.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 8007f06:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f004 faea 	bl	800c4e4 <HAL_Elaps_Ticks>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <Detect_CAN_Xchange_Failure+0xa8>)
 8007f14:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d32b      	bcc.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8007f1c:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <Detect_CAN_Xchange_Failure+0xac>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d025      	beq.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
		{
			Is_CAN_Exchange_happening = NO;
 8007f28:	4b13      	ldr	r3, [pc, #76]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8007f2e:	4b15      	ldr	r3, [pc, #84]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a16      	ldr	r2, [pc, #88]	; (8007f8c <Detect_CAN_Xchange_Failure+0xac>)
 8007f34:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8007f36:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f004 fad2 	bl	800c4e4 <HAL_Elaps_Ticks>
 8007f40:	4603      	mov	r3, r0
 8007f42:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <Detect_CAN_Xchange_Failure+0xb0>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	099b      	lsrs	r3, r3, #6
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4811      	ldr	r0, [pc, #68]	; (8007f94 <Detect_CAN_Xchange_Failure+0xb4>)
 8007f4e:	f018 f955 	bl	80201fc <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8007f52:	4811      	ldr	r0, [pc, #68]	; (8007f98 <Detect_CAN_Xchange_Failure+0xb8>)
 8007f54:	f018 f9ee 	bl	8020334 <puts>
			memset(&Rx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007f58:	2218      	movs	r2, #24
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	480f      	ldr	r0, [pc, #60]	; (8007f9c <Detect_CAN_Xchange_Failure+0xbc>)
 8007f5e:	f018 f865 	bl	802002c <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8007f62:	22a2      	movs	r2, #162	; 0xa2
 8007f64:	2100      	movs	r1, #0
 8007f66:	480e      	ldr	r0, [pc, #56]	; (8007fa0 <Detect_CAN_Xchange_Failure+0xc0>)
 8007f68:	f018 f860 	bl	802002c <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007f6c:	f240 1019 	movw	r0, #281	; 0x119
 8007f70:	f005 f878 	bl	800d064 <TransmitCanPkt>
		}
	}
}
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000108 	.word	0x20000108
 8007f7c:	080219a8 	.word	0x080219a8
 8007f80:	20000305 	.word	0x20000305
 8007f84:	20000e40 	.word	0x20000e40
 8007f88:	20000304 	.word	0x20000304
 8007f8c:	20002078 	.word	0x20002078
 8007f90:	10624dd3 	.word	0x10624dd3
 8007f94:	08022824 	.word	0x08022824
 8007f98:	08022854 	.word	0x08022854
 8007f9c:	20001764 	.word	0x20001764
 8007fa0:	200010e4 	.word	0x200010e4

08007fa4 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b0ae      	sub	sp, #184	; 0xb8
 8007fa8:	af00      	add	r7, sp, #0

#ifdef EI_1

	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 8007faa:	2300      	movs	r3, #0
 8007fac:	607b      	str	r3, [r7, #4]
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	22a6      	movs	r2, #166	; 0xa6
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f018 f838 	bl	802002c <memset>
	uint16_t Serial_Byte=0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8007fc2:	4bc8      	ldr	r3, [pc, #800]	; (80082e4 <Process_Send_Signals_2_MIE+0x340>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f004 fa8c 	bl	800c4e4 <HAL_Elaps_Ticks>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4bc6      	ldr	r3, [pc, #792]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8007fd0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	f240 8234 	bls.w	8008442 <Process_Send_Signals_2_MIE+0x49e>
	{
		uint8_t Traverser = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8007fec:	e08f      	b.n	800810e <Process_Send_Signals_2_MIE+0x16a>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8007fee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8007ff2:	4abe      	ldr	r2, [pc, #760]	; (80082ec <Process_Send_Signals_2_MIE+0x348>)
 8007ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d11d      	bne.n	8008038 <Process_Send_Signals_2_MIE+0x94>
 8007ffc:	49bc      	ldr	r1, [pc, #752]	; (80082f0 <Process_Send_Signals_2_MIE+0x34c>)
 8007ffe:	48bd      	ldr	r0, [pc, #756]	; (80082f4 <Process_Send_Signals_2_MIE+0x350>)
 8008000:	f7f8 f91e 	bl	8000240 <strcmp>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d016      	beq.n	8008038 <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800800a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800800e:	4ab6      	ldr	r2, [pc, #728]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8008010:	3366      	adds	r3, #102	; 0x66
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	4619      	mov	r1, r3
 800801a:	48b7      	ldr	r0, [pc, #732]	; (80082f8 <Process_Send_Signals_2_MIE+0x354>)
 800801c:	f018 f8ee 	bl	80201fc <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008020:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	4ab5      	ldr	r2, [pc, #724]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008028:	4413      	add	r3, r2
 800802a:	3302      	adds	r3, #2
 800802c:	2210      	movs	r2, #16
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f017 fffb 	bl	802002c <memset>
				continue;
 8008036:	e065      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>
			}
			Choice = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 800803e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008042:	4aaf      	ldr	r2, [pc, #700]	; (8008300 <Process_Send_Signals_2_MIE+0x35c>)
 8008044:	5cd3      	ldrb	r3, [r2, r3]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d106      	bne.n	8008058 <Process_Send_Signals_2_MIE+0xb4>
 800804a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008056:	e005      	b.n	8008064 <Process_Send_Signals_2_MIE+0xc0>
 8008058:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(Link_Flag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008064:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008068:	4aa6      	ldr	r2, [pc, #664]	; (8008304 <Process_Send_Signals_2_MIE+0x360>)
 800806a:	5cd3      	ldrb	r3, [r2, r3]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d106      	bne.n	800807e <Process_Send_Signals_2_MIE+0xda>
 8008070:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008074:	f043 0302 	orr.w	r3, r3, #2
 8008078:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800807c:	e005      	b.n	800808a <Process_Send_Signals_2_MIE+0xe6>
 800807e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008082:	f023 0302 	bic.w	r3, r3, #2
 8008086:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			switch(Choice)
 800808a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800808e:	2b01      	cmp	r3, #1
 8008090:	d005      	beq.n	800809e <Process_Send_Signals_2_MIE+0xfa>
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd2b      	ble.n	80080ee <Process_Send_Signals_2_MIE+0x14a>
 8008096:	3b02      	subs	r3, #2
 8008098:	2b01      	cmp	r3, #1
 800809a:	d828      	bhi.n	80080ee <Process_Send_Signals_2_MIE+0x14a>
 800809c:	e013      	b.n	80080c6 <Process_Send_Signals_2_MIE+0x122>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 800809e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	4a95      	ldr	r2, [pc, #596]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 80080a6:	4413      	add	r3, r2
 80080a8:	1c98      	adds	r0, r3, #2
 80080aa:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4a94      	ldr	r2, [pc, #592]	; (8008308 <Process_Send_Signals_2_MIE+0x364>)
 80080b8:	4413      	add	r3, r2
 80080ba:	3301      	adds	r3, #1
 80080bc:	2210      	movs	r2, #16
 80080be:	4619      	mov	r1, r3
 80080c0:	f017 ff8c 	bl	801ffdc <memcpy>
				break;
 80080c4:	e01e      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80080c6:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	4a8b      	ldr	r2, [pc, #556]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 80080ce:	4413      	add	r3, r2
 80080d0:	1c98      	adds	r0, r3, #2
 80080d2:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a8b      	ldr	r2, [pc, #556]	; (800830c <Process_Send_Signals_2_MIE+0x368>)
 80080e0:	4413      	add	r3, r2
 80080e2:	3301      	adds	r3, #1
 80080e4:	2210      	movs	r2, #16
 80080e6:	4619      	mov	r1, r3
 80080e8:	f017 ff78 	bl	801ffdc <memcpy>
				break;
 80080ec:	e00a      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 80080ee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	4a81      	ldr	r2, [pc, #516]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 80080f6:	4413      	add	r3, r2
 80080f8:	3302      	adds	r3, #2
 80080fa:	2210      	movs	r2, #16
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f017 ff94 	bl	802002c <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008104:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008108:	3301      	adds	r3, #1
 800810a:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800810e:	4b76      	ldr	r3, [pc, #472]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8008110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008114:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008118:	429a      	cmp	r2, r3
 800811a:	f4ff af68 	bcc.w	8007fee <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800811e:	4974      	ldr	r1, [pc, #464]	; (80082f0 <Process_Send_Signals_2_MIE+0x34c>)
 8008120:	4874      	ldr	r0, [pc, #464]	; (80082f4 <Process_Send_Signals_2_MIE+0x350>)
 8008122:	f7f8 f88d 	bl	8000240 <strcmp>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <Process_Send_Signals_2_MIE+0x18e>
		{
			Is_CAN_Exchange_happening = YES;
 800812c:	4b78      	ldr	r3, [pc, #480]	; (8008310 <Process_Send_Signals_2_MIE+0x36c>)
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 8008132:	4b77      	ldr	r3, [pc, #476]	; (8008310 <Process_Send_Signals_2_MIE+0x36c>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <Process_Send_Signals_2_MIE+0x1ac>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 800813a:	4876      	ldr	r0, [pc, #472]	; (8008314 <Process_Send_Signals_2_MIE+0x370>)
 800813c:	f018 f8fa 	bl	8020334 <puts>
			printf("Sending Blank Relay statuses\n");
 8008140:	4875      	ldr	r0, [pc, #468]	; (8008318 <Process_Send_Signals_2_MIE+0x374>)
 8008142:	f018 f8f7 	bl	8020334 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008146:	22a2      	movs	r2, #162	; 0xa2
 8008148:	2100      	movs	r1, #0
 800814a:	486c      	ldr	r0, [pc, #432]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 800814c:	f017 ff6e 	bl	802002c <memset>
		}


		if(Debug_flag == 1)
 8008150:	4b72      	ldr	r3, [pc, #456]	; (800831c <Process_Send_Signals_2_MIE+0x378>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d133      	bne.n	80081c0 <Process_Send_Signals_2_MIE+0x21c>
		{
			Get_time();
 8008158:	f003 f9e6 	bl	800b528 <Get_time>
			//		printf("\n_________________________________________\n");
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 800815c:	4b70      	ldr	r3, [pc, #448]	; (8008320 <Process_Send_Signals_2_MIE+0x37c>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	4619      	mov	r1, r3
 8008162:	4b6f      	ldr	r3, [pc, #444]	; (8008320 <Process_Send_Signals_2_MIE+0x37c>)
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	461a      	mov	r2, r3
 8008168:	4b6d      	ldr	r3, [pc, #436]	; (8008320 <Process_Send_Signals_2_MIE+0x37c>)
 800816a:	789b      	ldrb	r3, [r3, #2]
 800816c:	486d      	ldr	r0, [pc, #436]	; (8008324 <Process_Send_Signals_2_MIE+0x380>)
 800816e:	f018 f845 	bl	80201fc <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008172:	2300      	movs	r3, #0
 8008174:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008178:	e017      	b.n	80081aa <Process_Send_Signals_2_MIE+0x206>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 800817a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800817e:	4a5f      	ldr	r2, [pc, #380]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008180:	4413      	add	r3, r2
 8008182:	789b      	ldrb	r3, [r3, #2]
 8008184:	4619      	mov	r1, r3
 8008186:	4868      	ldr	r0, [pc, #416]	; (8008328 <Process_Send_Signals_2_MIE+0x384>)
 8008188:	f018 f838 	bl	80201fc <iprintf>
				if(((Byte+1)%16)==0)
 800818c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008190:	3301      	adds	r3, #1
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <Process_Send_Signals_2_MIE+0x1fc>
				{
					printf("\n");
 800819a:	200a      	movs	r0, #10
 800819c:	f018 f846 	bl	802022c <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80081a0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80081a4:	3301      	adds	r3, #1
 80081a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80081aa:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80081ae:	4b4e      	ldr	r3, [pc, #312]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 80081b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	429a      	cmp	r2, r3
 80081b8:	dbdf      	blt.n	800817a <Process_Send_Signals_2_MIE+0x1d6>
				}
			}
			printf("\n");
 80081ba:	200a      	movs	r0, #10
 80081bc:	f018 f836 	bl	802022c <putchar>
			//		printf("\n_________________________________________\n");
		}
		TransmitCanPkt(EI_PROCESS_DATA);
 80081c0:	f240 1019 	movw	r0, #281	; 0x119
 80081c4:	f004 ff4e 	bl	800d064 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80081c8:	4949      	ldr	r1, [pc, #292]	; (80082f0 <Process_Send_Signals_2_MIE+0x34c>)
 80081ca:	484a      	ldr	r0, [pc, #296]	; (80082f4 <Process_Send_Signals_2_MIE+0x350>)
 80081cc:	f7f8 f838 	bl	8000240 <strcmp>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8130 	bne.w	8008438 <Process_Send_Signals_2_MIE+0x494>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 80081d8:	4b54      	ldr	r3, [pc, #336]	; (800832c <Process_Send_Signals_2_MIE+0x388>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f004 f981 	bl	800c4e4 <HAL_Elaps_Ticks>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081e8:	f0c0 80a8 	bcc.w	800833c <Process_Send_Signals_2_MIE+0x398>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 80081ec:	4a50      	ldr	r2, [pc, #320]	; (8008330 <Process_Send_Signals_2_MIE+0x38c>)
 80081ee:	4b43      	ldr	r3, [pc, #268]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 80081f0:	4610      	mov	r0, r2
 80081f2:	3302      	adds	r3, #2
 80081f4:	22a0      	movs	r2, #160	; 0xa0
 80081f6:	4619      	mov	r1, r3
 80081f8:	f017 fef0 	bl	801ffdc <memcpy>
				Serial_Byte = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008202:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800820c:	33b8      	adds	r3, #184	; 0xb8
 800820e:	443b      	add	r3, r7
 8008210:	227e      	movs	r2, #126	; 0x7e
 8008212:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008216:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008220:	33b8      	adds	r3, #184	; 0xb8
 8008222:	443b      	add	r3, r7
 8008224:	227e      	movs	r2, #126	; 0x7e
 8008226:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800822a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008234:	33b8      	adds	r3, #184	; 0xb8
 8008236:	443b      	add	r3, r7
 8008238:	227e      	movs	r2, #126	; 0x7e
 800823a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 800823e:	4b37      	ldr	r3, [pc, #220]	; (800831c <Process_Send_Signals_2_MIE+0x378>)
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d102      	bne.n	800824c <Process_Send_Signals_2_MIE+0x2a8>
				{
					printf("Sending Signals over Ethernet:\n");
 8008246:	483b      	ldr	r0, [pc, #236]	; (8008334 <Process_Send_Signals_2_MIE+0x390>)
 8008248:	f018 f874 	bl	8020334 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 800824c:	2300      	movs	r3, #0
 800824e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008252:	e014      	b.n	800827e <Process_Send_Signals_2_MIE+0x2da>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008254:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008258:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800825c:	1c59      	adds	r1, r3, #1
 800825e:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008262:	4619      	mov	r1, r3
 8008264:	4b25      	ldr	r3, [pc, #148]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008266:	4413      	add	r3, r2
 8008268:	789a      	ldrb	r2, [r3, #2]
 800826a:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 800826e:	443b      	add	r3, r7
 8008270:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008274:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008278:	3301      	adds	r3, #1
 800827a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800827e:	4b1f      	ldr	r3, [pc, #124]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008286:	429a      	cmp	r2, r3
 8008288:	d3e4      	bcc.n	8008254 <Process_Send_Signals_2_MIE+0x2b0>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800828a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008294:	33b8      	adds	r3, #184	; 0xb8
 8008296:	443b      	add	r3, r7
 8008298:	227f      	movs	r2, #127	; 0x7f
 800829a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800829e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80082a8:	33b8      	adds	r3, #184	; 0xb8
 80082aa:	443b      	add	r3, r7
 80082ac:	227f      	movs	r2, #127	; 0x7f
 80082ae:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80082b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80082bc:	33b8      	adds	r3, #184	; 0xb8
 80082be:	443b      	add	r3, r7
 80082c0:	227f      	movs	r2, #127	; 0x7f
 80082c2:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 80082c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082ca:	b2d9      	uxtb	r1, r3
 80082cc:	4a1a      	ldr	r2, [pc, #104]	; (8008338 <Process_Send_Signals_2_MIE+0x394>)
 80082ce:	1d3b      	adds	r3, r7, #4
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f004 fd04 	bl	800cce0 <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 80082d8:	f00a ff86 	bl	80131e8 <HAL_GetTick>
 80082dc:	4603      	mov	r3, r0
 80082de:	4a13      	ldr	r2, [pc, #76]	; (800832c <Process_Send_Signals_2_MIE+0x388>)
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	e0a9      	b.n	8008438 <Process_Send_Signals_2_MIE+0x494>
 80082e4:	20000e70 	.word	0x20000e70
 80082e8:	20000304 	.word	0x20000304
 80082ec:	20000ec4 	.word	0x20000ec4
 80082f0:	080219a8 	.word	0x080219a8
 80082f4:	20000305 	.word	0x20000305
 80082f8:	08022878 	.word	0x08022878
 80082fc:	200010e4 	.word	0x200010e4
 8008300:	20000f70 	.word	0x20000f70
 8008304:	20000f64 	.word	0x20000f64
 8008308:	20001f48 	.word	0x20001f48
 800830c:	20001e80 	.word	0x20001e80
 8008310:	20000108 	.word	0x20000108
 8008314:	0802288c 	.word	0x0802288c
 8008318:	080228b0 	.word	0x080228b0
 800831c:	20000645 	.word	0x20000645
 8008320:	20002888 	.word	0x20002888
 8008324:	080228d0 	.word	0x080228d0
 8008328:	080228f8 	.word	0x080228f8
 800832c:	2000207c 	.word	0x2000207c
 8008330:	20002080 	.word	0x20002080
 8008334:	08022900 	.word	0x08022900
 8008338:	20001058 	.word	0x20001058
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 800833c:	22a0      	movs	r2, #160	; 0xa0
 800833e:	4943      	ldr	r1, [pc, #268]	; (800844c <Process_Send_Signals_2_MIE+0x4a8>)
 8008340:	4843      	ldr	r0, [pc, #268]	; (8008450 <Process_Send_Signals_2_MIE+0x4ac>)
 8008342:	f017 fe3b 	bl	801ffbc <memcmp>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d075      	beq.n	8008438 <Process_Send_Signals_2_MIE+0x494>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 800834c:	4a40      	ldr	r2, [pc, #256]	; (8008450 <Process_Send_Signals_2_MIE+0x4ac>)
 800834e:	4b41      	ldr	r3, [pc, #260]	; (8008454 <Process_Send_Signals_2_MIE+0x4b0>)
 8008350:	4610      	mov	r0, r2
 8008352:	3302      	adds	r3, #2
 8008354:	22a0      	movs	r2, #160	; 0xa0
 8008356:	4619      	mov	r1, r3
 8008358:	f017 fe40 	bl	801ffdc <memcpy>
				Serial_Byte = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008362:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800836c:	33b8      	adds	r3, #184	; 0xb8
 800836e:	443b      	add	r3, r7
 8008370:	227e      	movs	r2, #126	; 0x7e
 8008372:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008376:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008380:	33b8      	adds	r3, #184	; 0xb8
 8008382:	443b      	add	r3, r7
 8008384:	227e      	movs	r2, #126	; 0x7e
 8008386:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800838a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008394:	33b8      	adds	r3, #184	; 0xb8
 8008396:	443b      	add	r3, r7
 8008398:	227e      	movs	r2, #126	; 0x7e
 800839a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 800839e:	4b2e      	ldr	r3, [pc, #184]	; (8008458 <Process_Send_Signals_2_MIE+0x4b4>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d102      	bne.n	80083ac <Process_Send_Signals_2_MIE+0x408>
				{
					printf("Sending Signals over Ethernet:\n");
 80083a6:	482d      	ldr	r0, [pc, #180]	; (800845c <Process_Send_Signals_2_MIE+0x4b8>)
 80083a8:	f017 ffc4 	bl	8020334 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80083ac:	2300      	movs	r3, #0
 80083ae:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80083b2:	e014      	b.n	80083de <Process_Send_Signals_2_MIE+0x43a>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 80083b4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80083b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083bc:	1c59      	adds	r1, r3, #1
 80083be:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 80083c2:	4619      	mov	r1, r3
 80083c4:	4b23      	ldr	r3, [pc, #140]	; (8008454 <Process_Send_Signals_2_MIE+0x4b0>)
 80083c6:	4413      	add	r3, r2
 80083c8:	789a      	ldrb	r2, [r3, #2]
 80083ca:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 80083ce:	443b      	add	r3, r7
 80083d0:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80083d4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80083d8:	3301      	adds	r3, #1
 80083da:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80083de:	4b1d      	ldr	r3, [pc, #116]	; (8008454 <Process_Send_Signals_2_MIE+0x4b0>)
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d3e4      	bcc.n	80083b4 <Process_Send_Signals_2_MIE+0x410>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80083ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80083f4:	33b8      	adds	r3, #184	; 0xb8
 80083f6:	443b      	add	r3, r7
 80083f8:	227f      	movs	r2, #127	; 0x7f
 80083fa:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80083fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008408:	33b8      	adds	r3, #184	; 0xb8
 800840a:	443b      	add	r3, r7
 800840c:	227f      	movs	r2, #127	; 0x7f
 800840e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008412:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800841c:	33b8      	adds	r3, #184	; 0xb8
 800841e:	443b      	add	r3, r7
 8008420:	227f      	movs	r2, #127	; 0x7f
 8008422:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008426:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800842a:	b2d9      	uxtb	r1, r3
 800842c:	4a0c      	ldr	r2, [pc, #48]	; (8008460 <Process_Send_Signals_2_MIE+0x4bc>)
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f004 fc54 	bl	800cce0 <Udp_Send_SigInfo>
			}
			printf("\n");
		}

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008438:	f00a fed6 	bl	80131e8 <HAL_GetTick>
 800843c:	4603      	mov	r3, r0
 800843e:	4a09      	ldr	r2, [pc, #36]	; (8008464 <Process_Send_Signals_2_MIE+0x4c0>)
 8008440:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008442:	bf00      	nop
 8008444:	37b8      	adds	r7, #184	; 0xb8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	200010e6 	.word	0x200010e6
 8008450:	20002080 	.word	0x20002080
 8008454:	200010e4 	.word	0x200010e4
 8008458:	20000645 	.word	0x20000645
 800845c:	08022900 	.word	0x08022900
 8008460:	20001058 	.word	0x20001058
 8008464:	20000e70 	.word	0x20000e70

08008468 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800846e:	af04      	add	r7, sp, #16
 8008470:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008474:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008478:	6018      	str	r0, [r3, #0]
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008482:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008486:	4602      	mov	r2, r0
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800848e:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008492:	460a      	mov	r2, r1
 8008494:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 8008496:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800849a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	3304      	adds	r3, #4
 80084a4:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80084a8:	2100      	movs	r1, #0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f017 fdbe 	bl	802002c <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80084b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084ba:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <Print_EI_DATA+0x64>
 80084c4:	48a8      	ldr	r0, [pc, #672]	; (8008768 <Print_EI_DATA+0x300>)
 80084c6:	f000 f975 	bl	80087b4 <Display>
 80084ca:	e002      	b.n	80084d2 <Print_EI_DATA+0x6a>
 80084cc:	48a7      	ldr	r0, [pc, #668]	; (800876c <Print_EI_DATA+0x304>)
 80084ce:	f000 f971 	bl	80087b4 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80084d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084d6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3301      	adds	r3, #1
 80084de:	461a      	mov	r2, r3
 80084e0:	2110      	movs	r1, #16
 80084e2:	2000      	movs	r0, #0
 80084e4:	f7f8 f896 	bl	8000614 <ExtractBits>
 80084e8:	4602      	mov	r2, r0
 80084ea:	f107 030c 	add.w	r3, r7, #12
 80084ee:	49a0      	ldr	r1, [pc, #640]	; (8008770 <Print_EI_DATA+0x308>)
 80084f0:	4618      	mov	r0, r3
 80084f2:	f018 f83b 	bl	802056c <siprintf>
	Display(Print_buff);
 80084f6:	f107 030c 	add.w	r3, r7, #12
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 f95a 	bl	80087b4 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8008500:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008504:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3303      	adds	r3, #3
 800850c:	461a      	mov	r2, r3
 800850e:	2110      	movs	r1, #16
 8008510:	2000      	movs	r0, #0
 8008512:	f7f8 f87f 	bl	8000614 <ExtractBits>
 8008516:	4602      	mov	r2, r0
 8008518:	f107 030c 	add.w	r3, r7, #12
 800851c:	4995      	ldr	r1, [pc, #596]	; (8008774 <Print_EI_DATA+0x30c>)
 800851e:	4618      	mov	r0, r3
 8008520:	f018 f824 	bl	802056c <siprintf>
	Display(Print_buff);
 8008524:	f107 030c 	add.w	r3, r7, #12
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f943 	bl	80087b4 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 800852e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008532:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3307      	adds	r3, #7
 800853a:	461a      	mov	r2, r3
 800853c:	2108      	movs	r1, #8
 800853e:	2000      	movs	r0, #0
 8008540:	f7f8 f868 	bl	8000614 <ExtractBits>
 8008544:	4603      	mov	r3, r0
 8008546:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 800854a:	488b      	ldr	r0, [pc, #556]	; (8008778 <Print_EI_DATA+0x310>)
 800854c:	f000 f932 	bl	80087b4 <Display>
	switch(Msg_type)
 8008550:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008554:	3b01      	subs	r3, #1
 8008556:	2b05      	cmp	r3, #5
 8008558:	d829      	bhi.n	80085ae <Print_EI_DATA+0x146>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <Print_EI_DATA+0xf8>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008579 	.word	0x08008579
 8008564:	08008597 	.word	0x08008597
 8008568:	080085af 	.word	0x080085af
 800856c:	0800859f 	.word	0x0800859f
 8008570:	080085af 	.word	0x080085af
 8008574:	080085a7 	.word	0x080085a7
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008578:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800857c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <Print_EI_DATA+0x126>
 8008586:	487d      	ldr	r0, [pc, #500]	; (800877c <Print_EI_DATA+0x314>)
 8008588:	f000 f914 	bl	80087b4 <Display>
		//Display("INIT     ");
		break;
 800858c:	e012      	b.n	80085b4 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 800858e:	487c      	ldr	r0, [pc, #496]	; (8008780 <Print_EI_DATA+0x318>)
 8008590:	f000 f910 	bl	80087b4 <Display>
		break;
 8008594:	e00e      	b.n	80085b4 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8008596:	487b      	ldr	r0, [pc, #492]	; (8008784 <Print_EI_DATA+0x31c>)
 8008598:	f000 f90c 	bl	80087b4 <Display>
		break;
 800859c:	e00a      	b.n	80085b4 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 800859e:	487a      	ldr	r0, [pc, #488]	; (8008788 <Print_EI_DATA+0x320>)
 80085a0:	f000 f908 	bl	80087b4 <Display>
		break;
 80085a4:	e006      	b.n	80085b4 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 80085a6:	4879      	ldr	r0, [pc, #484]	; (800878c <Print_EI_DATA+0x324>)
 80085a8:	f000 f904 	bl	80087b4 <Display>
		break;
 80085ac:	e002      	b.n	80085b4 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 80085ae:	4878      	ldr	r0, [pc, #480]	; (8008790 <Print_EI_DATA+0x328>)
 80085b0:	f000 f900 	bl	80087b4 <Display>
	}
	Display("|");
 80085b4:	4877      	ldr	r0, [pc, #476]	; (8008794 <Print_EI_DATA+0x32c>)
 80085b6:	f000 f8fd 	bl	80087b4 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80085ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085be:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3305      	adds	r3, #5
 80085c6:	461a      	mov	r2, r3
 80085c8:	2108      	movs	r1, #8
 80085ca:	2000      	movs	r0, #0
 80085cc:	f7f8 f822 	bl	8000614 <ExtractBits>
 80085d0:	4602      	mov	r2, r0
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	4970      	ldr	r1, [pc, #448]	; (8008798 <Print_EI_DATA+0x330>)
 80085d8:	4618      	mov	r0, r3
 80085da:	f017 ffc7 	bl	802056c <siprintf>
	Display(Print_buff);
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f8e6 	bl	80087b4 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 80085e8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085ec:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3306      	adds	r3, #6
 80085f4:	461a      	mov	r2, r3
 80085f6:	2108      	movs	r1, #8
 80085f8:	2000      	movs	r0, #0
 80085fa:	f7f8 f80b 	bl	8000614 <ExtractBits>
 80085fe:	4602      	mov	r2, r0
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	4965      	ldr	r1, [pc, #404]	; (800879c <Print_EI_DATA+0x334>)
 8008606:	4618      	mov	r0, r3
 8008608:	f017 ffb0 	bl	802056c <siprintf>
	Display(Print_buff);
 800860c:	f107 030c 	add.w	r3, r7, #12
 8008610:	4618      	mov	r0, r3
 8008612:	f000 f8cf 	bl	80087b4 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8008616:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800861a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	461a      	mov	r2, r3
 8008624:	2110      	movs	r1, #16
 8008626:	2000      	movs	r0, #0
 8008628:	f7f7 fff4 	bl	8000614 <ExtractBits>
 800862c:	4603      	mov	r3, r0
 800862e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 8008632:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8008636:	f107 030c 	add.w	r3, r7, #12
 800863a:	4959      	ldr	r1, [pc, #356]	; (80087a0 <Print_EI_DATA+0x338>)
 800863c:	4618      	mov	r0, r3
 800863e:	f017 ff95 	bl	802056c <siprintf>
	Display(Print_buff);
 8008642:	f107 030c 	add.w	r3, r7, #12
 8008646:	4618      	mov	r0, r3
 8008648:	f000 f8b4 	bl	80087b4 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 800864c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	b29b      	uxth	r3, r3
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d03f      	beq.n	80086dc <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 800865c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008660:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	330a      	adds	r3, #10
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	461d      	mov	r5, r3
 800866c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008670:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	330b      	adds	r3, #11
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	461e      	mov	r6, r3
 800867c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008680:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008690:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	330d      	adds	r3, #13
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	4619      	mov	r1, r3
 800869c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	330e      	adds	r3, #14
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461c      	mov	r4, r3
 80086ac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330f      	adds	r3, #15
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f107 000c 	add.w	r0, r7, #12
 80086be:	9303      	str	r3, [sp, #12]
 80086c0:	9402      	str	r4, [sp, #8]
 80086c2:	9101      	str	r1, [sp, #4]
 80086c4:	9200      	str	r2, [sp, #0]
 80086c6:	4633      	mov	r3, r6
 80086c8:	462a      	mov	r2, r5
 80086ca:	4936      	ldr	r1, [pc, #216]	; (80087a4 <Print_EI_DATA+0x33c>)
 80086cc:	f017 ff4e 	bl	802056c <siprintf>
		Display(Print_buff);
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 f86d 	bl	80087b4 <Display>
 80086da:	e002      	b.n	80086e2 <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 80086dc:	4832      	ldr	r0, [pc, #200]	; (80087a8 <Print_EI_DATA+0x340>)
 80086de:	f000 f869 	bl	80087b4 <Display>
	}
	if(Debug_flag == 1)
 80086e2:	4b32      	ldr	r3, [pc, #200]	; (80087ac <Print_EI_DATA+0x344>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d139      	bne.n	800875e <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 80086ea:	2300      	movs	r3, #0
 80086ec:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80086f0:	e019      	b.n	8008726 <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 80086f2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80086f6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80086fa:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80086fe:	6812      	ldr	r2, [r2, #0]
 8008700:	4413      	add	r3, r2
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	f107 030c 	add.w	r3, r7, #12
 800870a:	4929      	ldr	r1, [pc, #164]	; (80087b0 <Print_EI_DATA+0x348>)
 800870c:	4618      	mov	r0, r3
 800870e:	f017 ff2d 	bl	802056c <siprintf>
			Display(Print_buff);
 8008712:	f107 030c 	add.w	r3, r7, #12
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f84c 	bl	80087b4 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 800871c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008720:	3301      	adds	r3, #1
 8008722:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008726:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800872a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800872e:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d3dc      	bcc.n	80086f2 <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008738:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800873c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10b      	bne.n	800875e <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8008746:	f107 030c 	add.w	r3, r7, #12
 800874a:	22f6      	movs	r2, #246	; 0xf6
 800874c:	4918      	ldr	r1, [pc, #96]	; (80087b0 <Print_EI_DATA+0x348>)
 800874e:	4618      	mov	r0, r3
 8008750:	f017 ff0c 	bl	802056c <siprintf>
			Display(Print_buff);
 8008754:	f107 030c 	add.w	r3, r7, #12
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f82b 	bl	80087b4 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 800875e:	bf00      	nop
 8008760:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008764:	46bd      	mov	sp, r7
 8008766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008768:	08022920 	.word	0x08022920
 800876c:	08022924 	.word	0x08022924
 8008770:	08022928 	.word	0x08022928
 8008774:	08022930 	.word	0x08022930
 8008778:	08022938 	.word	0x08022938
 800877c:	0802293c 	.word	0x0802293c
 8008780:	08022944 	.word	0x08022944
 8008784:	0802294c 	.word	0x0802294c
 8008788:	08022950 	.word	0x08022950
 800878c:	08022954 	.word	0x08022954
 8008790:	08022958 	.word	0x08022958
 8008794:	0802296c 	.word	0x0802296c
 8008798:	08022970 	.word	0x08022970
 800879c:	0802297c 	.word	0x0802297c
 80087a0:	08022988 	.word	0x08022988
 80087a4:	08022994 	.word	0x08022994
 80087a8:	080229b8 	.word	0x080229b8
 80087ac:	20000645 	.word	0x20000645
 80087b0:	080228f8 	.word	0x080228f8

080087b4 <Display>:

void Display(char *Data)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80087c0:	e00a      	b.n	80087d8 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	4413      	add	r3, r2
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	4619      	mov	r1, r3
 80087cc:	2000      	movs	r0, #0
 80087ce:	f00a fab3 	bl	8012d38 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	3301      	adds	r3, #1
 80087d6:	73fb      	strb	r3, [r7, #15]
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1ee      	bne.n	80087c2 <Display+0xe>
	}
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <print_self_Details>:
	}

}

void print_self_Details(void)
{
 80087f0:	b5b0      	push	{r4, r5, r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 80087fa:	4890      	ldr	r0, [pc, #576]	; (8008a3c <print_self_Details+0x24c>)
 80087fc:	f017 fd9a 	bl	8020334 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008800:	4b8f      	ldr	r3, [pc, #572]	; (8008a40 <print_self_Details+0x250>)
 8008802:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008806:	4619      	mov	r1, r3
 8008808:	488e      	ldr	r0, [pc, #568]	; (8008a44 <print_self_Details+0x254>)
 800880a:	f017 fcf7 	bl	80201fc <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 800880e:	4b8c      	ldr	r3, [pc, #560]	; (8008a40 <print_self_Details+0x250>)
 8008810:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008814:	4619      	mov	r1, r3
 8008816:	488c      	ldr	r0, [pc, #560]	; (8008a48 <print_self_Details+0x258>)
 8008818:	f017 fcf0 	bl	80201fc <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 800881c:	4b88      	ldr	r3, [pc, #544]	; (8008a40 <print_self_Details+0x250>)
 800881e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008822:	4619      	mov	r1, r3
 8008824:	4889      	ldr	r0, [pc, #548]	; (8008a4c <print_self_Details+0x25c>)
 8008826:	f017 fce9 	bl	80201fc <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 800882a:	4b85      	ldr	r3, [pc, #532]	; (8008a40 <print_self_Details+0x250>)
 800882c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008830:	4619      	mov	r1, r3
 8008832:	4887      	ldr	r0, [pc, #540]	; (8008a50 <print_self_Details+0x260>)
 8008834:	f017 fce2 	bl	80201fc <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008838:	4b81      	ldr	r3, [pc, #516]	; (8008a40 <print_self_Details+0x250>)
 800883a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800883e:	4619      	mov	r1, r3
 8008840:	4884      	ldr	r0, [pc, #528]	; (8008a54 <print_self_Details+0x264>)
 8008842:	f017 fcdb 	bl	80201fc <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008846:	4b7e      	ldr	r3, [pc, #504]	; (8008a40 <print_self_Details+0x250>)
 8008848:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800884c:	4619      	mov	r1, r3
 800884e:	4882      	ldr	r0, [pc, #520]	; (8008a58 <print_self_Details+0x268>)
 8008850:	f017 fcd4 	bl	80201fc <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008854:	4b7a      	ldr	r3, [pc, #488]	; (8008a40 <print_self_Details+0x250>)
 8008856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800885a:	4619      	mov	r1, r3
 800885c:	4879      	ldr	r0, [pc, #484]	; (8008a44 <print_self_Details+0x254>)
 800885e:	f017 fccd 	bl	80201fc <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008862:	2300      	movs	r3, #0
 8008864:	71fb      	strb	r3, [r7, #7]
 8008866:	e03b      	b.n	80088e0 <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8008868:	79f9      	ldrb	r1, [r7, #7]
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	4a74      	ldr	r2, [pc, #464]	; (8008a40 <print_self_Details+0x250>)
 800886e:	3312      	adds	r3, #18
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	78db      	ldrb	r3, [r3, #3]
 8008876:	461c      	mov	r4, r3
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	4a71      	ldr	r2, [pc, #452]	; (8008a40 <print_self_Details+0x250>)
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008884:	461d      	mov	r5, r3
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	4a6d      	ldr	r2, [pc, #436]	; (8008a40 <print_self_Details+0x250>)
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008892:	4618      	mov	r0, r3
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	4a6a      	ldr	r2, [pc, #424]	; (8008a40 <print_self_Details+0x250>)
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	9000      	str	r0, [sp, #0]
 80088a4:	462b      	mov	r3, r5
 80088a6:	4622      	mov	r2, r4
 80088a8:	486c      	ldr	r0, [pc, #432]	; (8008a5c <print_self_Details+0x26c>)
 80088aa:	f017 fca7 	bl	80201fc <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80088ae:	79f9      	ldrb	r1, [r7, #7]
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	4a63      	ldr	r2, [pc, #396]	; (8008a40 <print_self_Details+0x250>)
 80088b4:	333e      	adds	r3, #62	; 0x3e
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	885b      	ldrh	r3, [r3, #2]
 80088bc:	461a      	mov	r2, r3
 80088be:	4868      	ldr	r0, [pc, #416]	; (8008a60 <print_self_Details+0x270>)
 80088c0:	f017 fc9c 	bl	80201fc <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80088c4:	79f9      	ldrb	r1, [r7, #7]
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	4a5d      	ldr	r2, [pc, #372]	; (8008a40 <print_self_Details+0x250>)
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80088d2:	461a      	mov	r2, r3
 80088d4:	4863      	ldr	r0, [pc, #396]	; (8008a64 <print_self_Details+0x274>)
 80088d6:	f017 fc91 	bl	80201fc <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	3301      	adds	r3, #1
 80088de:	71fb      	strb	r3, [r7, #7]
 80088e0:	4b57      	ldr	r3, [pc, #348]	; (8008a40 <print_self_Details+0x250>)
 80088e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088e6:	79fa      	ldrb	r2, [r7, #7]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d3bd      	bcc.n	8008868 <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80088ec:	4b54      	ldr	r3, [pc, #336]	; (8008a40 <print_self_Details+0x250>)
 80088ee:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80088f2:	4619      	mov	r1, r3
 80088f4:	4b52      	ldr	r3, [pc, #328]	; (8008a40 <print_self_Details+0x250>)
 80088f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088fa:	461a      	mov	r2, r3
 80088fc:	4b50      	ldr	r3, [pc, #320]	; (8008a40 <print_self_Details+0x250>)
 80088fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008902:	4618      	mov	r0, r3
 8008904:	4b4e      	ldr	r3, [pc, #312]	; (8008a40 <print_self_Details+0x250>)
 8008906:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	4603      	mov	r3, r0
 800890e:	4856      	ldr	r0, [pc, #344]	; (8008a68 <print_self_Details+0x278>)
 8008910:	f017 fc74 	bl	80201fc <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8008914:	4b4a      	ldr	r3, [pc, #296]	; (8008a40 <print_self_Details+0x250>)
 8008916:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800891a:	4618      	mov	r0, r3
 800891c:	4b48      	ldr	r3, [pc, #288]	; (8008a40 <print_self_Details+0x250>)
 800891e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008922:	461c      	mov	r4, r3
 8008924:	4b46      	ldr	r3, [pc, #280]	; (8008a40 <print_self_Details+0x250>)
 8008926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800892a:	461d      	mov	r5, r3
 800892c:	4b44      	ldr	r3, [pc, #272]	; (8008a40 <print_self_Details+0x250>)
 800892e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008932:	461a      	mov	r2, r3
 8008934:	4b42      	ldr	r3, [pc, #264]	; (8008a40 <print_self_Details+0x250>)
 8008936:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800893a:	4619      	mov	r1, r3
 800893c:	4b40      	ldr	r3, [pc, #256]	; (8008a40 <print_self_Details+0x250>)
 800893e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008942:	9302      	str	r3, [sp, #8]
 8008944:	9101      	str	r1, [sp, #4]
 8008946:	9200      	str	r2, [sp, #0]
 8008948:	462b      	mov	r3, r5
 800894a:	4622      	mov	r2, r4
 800894c:	4601      	mov	r1, r0
 800894e:	4847      	ldr	r0, [pc, #284]	; (8008a6c <print_self_Details+0x27c>)
 8008950:	f017 fc54 	bl	80201fc <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008954:	4b3a      	ldr	r3, [pc, #232]	; (8008a40 <print_self_Details+0x250>)
 8008956:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800895a:	4619      	mov	r1, r3
 800895c:	4844      	ldr	r0, [pc, #272]	; (8008a70 <print_self_Details+0x280>)
 800895e:	f017 fc4d 	bl	80201fc <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008962:	2300      	movs	r3, #0
 8008964:	71fb      	strb	r3, [r7, #7]
 8008966:	e05c      	b.n	8008a22 <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	3301      	adds	r3, #1
 800896c:	4619      	mov	r1, r3
 800896e:	4841      	ldr	r0, [pc, #260]	; (8008a74 <print_self_Details+0x284>)
 8008970:	f017 fc44 	bl	80201fc <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	4a32      	ldr	r2, [pc, #200]	; (8008a40 <print_self_Details+0x250>)
 8008978:	3366      	adds	r3, #102	; 0x66
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	4619      	mov	r1, r3
 8008982:	483d      	ldr	r0, [pc, #244]	; (8008a78 <print_self_Details+0x288>)
 8008984:	f017 fc3a 	bl	80201fc <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	4a2d      	ldr	r2, [pc, #180]	; (8008a40 <print_self_Details+0x250>)
 800898c:	3370      	adds	r3, #112	; 0x70
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	4619      	mov	r1, r3
 8008996:	4839      	ldr	r0, [pc, #228]	; (8008a7c <print_self_Details+0x28c>)
 8008998:	f017 fc30 	bl	80201fc <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	4a28      	ldr	r2, [pc, #160]	; (8008a40 <print_self_Details+0x250>)
 80089a0:	33f4      	adds	r3, #244	; 0xf4
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	4413      	add	r3, r2
 80089a6:	889b      	ldrh	r3, [r3, #4]
 80089a8:	4619      	mov	r1, r3
 80089aa:	4835      	ldr	r0, [pc, #212]	; (8008a80 <print_self_Details+0x290>)
 80089ac:	f017 fc26 	bl	80201fc <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	4a23      	ldr	r2, [pc, #140]	; (8008a40 <print_self_Details+0x250>)
 80089b4:	4413      	add	r3, r2
 80089b6:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80089ba:	4619      	mov	r1, r3
 80089bc:	4831      	ldr	r0, [pc, #196]	; (8008a84 <print_self_Details+0x294>)
 80089be:	f017 fc1d 	bl	80201fc <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	4a1e      	ldr	r2, [pc, #120]	; (8008a40 <print_self_Details+0x250>)
 80089c6:	4413      	add	r3, r2
 80089c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80089cc:	4619      	mov	r1, r3
 80089ce:	482e      	ldr	r0, [pc, #184]	; (8008a88 <print_self_Details+0x298>)
 80089d0:	f017 fc14 	bl	80201fc <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	4a1a      	ldr	r2, [pc, #104]	; (8008a40 <print_self_Details+0x250>)
 80089d8:	4413      	add	r3, r2
 80089da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089de:	4619      	mov	r1, r3
 80089e0:	482a      	ldr	r0, [pc, #168]	; (8008a8c <print_self_Details+0x29c>)
 80089e2:	f017 fc0b 	bl	80201fc <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <print_self_Details+0x250>)
 80089ea:	338a      	adds	r3, #138	; 0x8a
 80089ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f0:	4619      	mov	r1, r3
 80089f2:	4827      	ldr	r0, [pc, #156]	; (8008a90 <print_self_Details+0x2a0>)
 80089f4:	f017 fc02 	bl	80201fc <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	4a11      	ldr	r2, [pc, #68]	; (8008a40 <print_self_Details+0x250>)
 80089fc:	3394      	adds	r3, #148	; 0x94
 80089fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a02:	4619      	mov	r1, r3
 8008a04:	4823      	ldr	r0, [pc, #140]	; (8008a94 <print_self_Details+0x2a4>)
 8008a06:	f017 fbf9 	bl	80201fc <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	4a0c      	ldr	r2, [pc, #48]	; (8008a40 <print_self_Details+0x250>)
 8008a0e:	339e      	adds	r3, #158	; 0x9e
 8008a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a14:	4619      	mov	r1, r3
 8008a16:	4820      	ldr	r0, [pc, #128]	; (8008a98 <print_self_Details+0x2a8>)
 8008a18:	f017 fbf0 	bl	80201fc <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <print_self_Details+0x250>)
 8008a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a28:	79fa      	ldrb	r2, [r7, #7]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d39c      	bcc.n	8008968 <print_self_Details+0x178>

	}

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008a2e:	4803      	ldr	r0, [pc, #12]	; (8008a3c <print_self_Details+0x24c>)
 8008a30:	f017 fc80 	bl	8020334 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3c:	08022a2c 	.word	0x08022a2c
 8008a40:	20000304 	.word	0x20000304
 8008a44:	08022a80 	.word	0x08022a80
 8008a48:	08022aa4 	.word	0x08022aa4
 8008a4c:	08022ac8 	.word	0x08022ac8
 8008a50:	08022af4 	.word	0x08022af4
 8008a54:	08022b20 	.word	0x08022b20
 8008a58:	08022b4c 	.word	0x08022b4c
 8008a5c:	08022b78 	.word	0x08022b78
 8008a60:	08022b98 	.word	0x08022b98
 8008a64:	08022ba8 	.word	0x08022ba8
 8008a68:	08022bb8 	.word	0x08022bb8
 8008a6c:	08022bd4 	.word	0x08022bd4
 8008a70:	08022c04 	.word	0x08022c04
 8008a74:	08022c18 	.word	0x08022c18
 8008a78:	08022c2c 	.word	0x08022c2c
 8008a7c:	08022c48 	.word	0x08022c48
 8008a80:	08022c64 	.word	0x08022c64
 8008a84:	08022c80 	.word	0x08022c80
 8008a88:	08022c98 	.word	0x08022c98
 8008a8c:	08022cac 	.word	0x08022cac
 8008a90:	08022cc0 	.word	0x08022cc0
 8008a94:	08022cdc 	.word	0x08022cdc
 8008a98:	08022cf8 	.word	0x08022cf8

08008a9c <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	71fb      	strb	r3, [r7, #7]
 8008aaa:	e054      	b.n	8008b56 <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	4a2f      	ldr	r2, [pc, #188]	; (8008b6c <Send_Init_After_Timeout+0xd0>)
 8008ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d04b      	beq.n	8008b50 <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	4a2c      	ldr	r2, [pc, #176]	; (8008b6c <Send_Init_After_Timeout+0xd0>)
 8008abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f003 fd0f 	bl	800c4e4 <HAL_Elaps_Ticks>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	4929      	ldr	r1, [pc, #164]	; (8008b70 <Send_Init_After_Timeout+0xd4>)
 8008acc:	3394      	adds	r3, #148	; 0x94
 8008ace:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d93c      	bls.n	8008b50 <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	4a26      	ldr	r2, [pc, #152]	; (8008b74 <Send_Init_After_Timeout+0xd8>)
 8008ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f003 fd00 	bl	800c4e4 <HAL_Elaps_Ticks>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	4921      	ldr	r1, [pc, #132]	; (8008b70 <Send_Init_After_Timeout+0xd4>)
 8008aea:	3394      	adds	r3, #148	; 0x94
 8008aec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d92d      	bls.n	8008b50 <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	4a20      	ldr	r2, [pc, #128]	; (8008b78 <Send_Init_After_Timeout+0xdc>)
 8008af8:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d028      	beq.n	8008b50 <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4a1e      	ldr	r2, [pc, #120]	; (8008b7c <Send_Init_After_Timeout+0xe0>)
 8008b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b0a:	d921      	bls.n	8008b50 <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	4a17      	ldr	r2, [pc, #92]	; (8008b6c <Send_Init_After_Timeout+0xd0>)
 8008b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f003 fce5 	bl	800c4e4 <HAL_Elaps_Ticks>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	4a18      	ldr	r2, [pc, #96]	; (8008b80 <Send_Init_After_Timeout+0xe4>)
 8008b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b22:	099b      	lsrs	r3, r3, #6
 8008b24:	4619      	mov	r1, r3
 8008b26:	4817      	ldr	r0, [pc, #92]	; (8008b84 <Send_Init_After_Timeout+0xe8>)
 8008b28:	f017 fb68 	bl	80201fc <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	4a16      	ldr	r2, [pc, #88]	; (8008b88 <Send_Init_After_Timeout+0xec>)
 8008b30:	2101      	movs	r1, #1
 8008b32:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008b34:	79fa      	ldrb	r2, [r7, #7]
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f9 fbca 	bl	80022d4 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	4a0d      	ldr	r2, [pc, #52]	; (8008b78 <Send_Init_After_Timeout+0xdc>)
 8008b44:	2101      	movs	r1, #1
 8008b46:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <Send_Init_After_Timeout+0xf0>)
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	3301      	adds	r3, #1
 8008b54:	71fb      	strb	r3, [r7, #7]
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <Send_Init_After_Timeout+0xd4>)
 8008b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b5c:	79fa      	ldrb	r2, [r7, #7]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d3a4      	bcc.n	8008aac <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000fa4 	.word	0x20000fa4
 8008b70:	20000304 	.word	0x20000304
 8008b74:	20000e9c 	.word	0x20000e9c
 8008b78:	2000108c 	.word	0x2000108c
 8008b7c:	20001098 	.word	0x20001098
 8008b80:	10624dd3 	.word	0x10624dd3
 8008b84:	08022d14 	.word	0x08022d14
 8008b88:	200010cc 	.word	0x200010cc
 8008b8c:	200010c0 	.word	0x200010c0

08008b90 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b9a:	e037      	b.n	8008c0c <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008b9c:	79fa      	ldrb	r2, [r7, #7]
 8008b9e:	4921      	ldr	r1, [pc, #132]	; (8008c24 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	00db      	lsls	r3, r3, #3
 8008ba8:	440b      	add	r3, r1
 8008baa:	3304      	adds	r3, #4
 8008bac:	781b      	ldrb	r3, [r3, #0]
		if(
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d006      	beq.n	8008bc0 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d122      	bne.n	8008c06 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	4a1a      	ldr	r2, [pc, #104]	; (8008c2c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bc4:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d11d      	bne.n	8008c06 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	4a17      	ldr	r2, [pc, #92]	; (8008c2c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bce:	3302      	adds	r3, #2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f003 fc84 	bl	800c4e4 <HAL_Elaps_Ticks>
 8008bdc:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008bde:	2b32      	cmp	r3, #50	; 0x32
 8008be0:	d911      	bls.n	8008c06 <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 8008be2:	79fa      	ldrb	r2, [r7, #7]
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fb f8a7 	bl	8003d3c <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	4a0e      	ldr	r2, [pc, #56]	; (8008c2c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	4a0c      	ldr	r2, [pc, #48]	; (8008c2c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008bfa:	3302      	adds	r3, #2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	f04f 32ff 	mov.w	r2, #4294967295
 8008c04:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	71fb      	strb	r3, [r7, #7]
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c12:	79fa      	ldrb	r2, [r7, #7]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d3c1      	bcc.n	8008b9c <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20001674 	.word	0x20001674
 8008c28:	20000304 	.word	0x20000304
 8008c2c:	20001c94 	.word	0x20001c94

08008c30 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c36:	2300      	movs	r3, #0
 8008c38:	71fb      	strb	r3, [r7, #7]
 8008c3a:	e04e      	b.n	8008cda <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	4a2c      	ldr	r2, [pc, #176]	; (8008cf0 <Check_Recv_Status_fail+0xc0>)
 8008c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d045      	beq.n	8008cd4 <Check_Recv_Status_fail+0xa4>
 8008c48:	79fa      	ldrb	r2, [r7, #7]
 8008c4a:	492a      	ldr	r1, [pc, #168]	; (8008cf4 <Check_Recv_Status_fail+0xc4>)
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	4413      	add	r3, r2
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	440b      	add	r3, r1
 8008c56:	3303      	adds	r3, #3
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d03a      	beq.n	8008cd4 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	4a23      	ldr	r2, [pc, #140]	; (8008cf0 <Check_Recv_Status_fail+0xc0>)
 8008c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f003 fc3c 	bl	800c4e4 <HAL_Elaps_Ticks>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	79fb      	ldrb	r3, [r7, #7]
 8008c70:	4921      	ldr	r1, [pc, #132]	; (8008cf8 <Check_Recv_Status_fail+0xc8>)
 8008c72:	338a      	adds	r3, #138	; 0x8a
 8008c74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d92b      	bls.n	8008cd4 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	4a1e      	ldr	r2, [pc, #120]	; (8008cf8 <Check_Recv_Status_fail+0xc8>)
 8008c80:	3366      	adds	r3, #102	; 0x66
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <Check_Recv_Status_fail+0xc8>)
 8008c8c:	338a      	adds	r3, #138	; 0x8a
 8008c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c92:	4a1a      	ldr	r2, [pc, #104]	; (8008cfc <Check_Recv_Status_fail+0xcc>)
 8008c94:	fba2 2303 	umull	r2, r3, r2, r3
 8008c98:	099b      	lsrs	r3, r3, #6
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4818      	ldr	r0, [pc, #96]	; (8008d00 <Check_Recv_Status_fail+0xd0>)
 8008c9e:	f017 faad 	bl	80201fc <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	4a12      	ldr	r2, [pc, #72]	; (8008cf0 <Check_Recv_Status_fail+0xc0>)
 8008ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008caa:	4619      	mov	r1, r3
 8008cac:	4815      	ldr	r0, [pc, #84]	; (8008d04 <Check_Recv_Status_fail+0xd4>)
 8008cae:	f017 faa5 	bl	80201fc <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 8008cb2:	f00a fa99 	bl	80131e8 <HAL_GetTick>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4813      	ldr	r0, [pc, #76]	; (8008d08 <Check_Recv_Status_fail+0xd8>)
 8008cbc:	f017 fa9e 	bl	80201fc <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8008cc0:	79fa      	ldrb	r2, [r7, #7]
 8008cc2:	490c      	ldr	r1, [pc, #48]	; (8008cf4 <Check_Recv_Status_fail+0xc4>)
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	4413      	add	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	440b      	add	r3, r1
 8008cce:	3303      	adds	r3, #3
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	71fb      	strb	r3, [r7, #7]
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <Check_Recv_Status_fail+0xc8>)
 8008cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ce0:	79fa      	ldrb	r2, [r7, #7]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d3aa      	bcc.n	8008c3c <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000fcc 	.word	0x20000fcc
 8008cf4:	20001674 	.word	0x20001674
 8008cf8:	20000304 	.word	0x20000304
 8008cfc:	10624dd3 	.word	0x10624dd3
 8008d00:	08022d40 	.word	0x08022d40
 8008d04:	08022d74 	.word	0x08022d74
 8008d08:	08022da4 	.word	0x08022da4

08008d0c <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8008d0c:	b590      	push	{r4, r7, lr}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	4a39      	ldr	r2, [pc, #228]	; (8008e0c <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008d26:	4413      	add	r3, r2
 8008d28:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d168      	bne.n	8008e02 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8008d30:	4b37      	ldr	r3, [pc, #220]	; (8008e10 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d164      	bne.n	8008e02 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d38:	79fa      	ldrb	r2, [r7, #7]
 8008d3a:	4936      	ldr	r1, [pc, #216]	; (8008e14 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	4413      	add	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	440b      	add	r3, r1
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f002 faf1 	bl	800b330 <bcdToDec>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008d56:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008d5a:	79fa      	ldrb	r2, [r7, #7]
 8008d5c:	492d      	ldr	r1, [pc, #180]	; (8008e14 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d5e:	4613      	mov	r3, r2
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	4413      	add	r3, r2
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	440b      	add	r3, r1
 8008d68:	3301      	adds	r3, #1
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f002 fadf 	bl	800b330 <bcdToDec>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	4613      	mov	r3, r2
 8008d78:	011b      	lsls	r3, r3, #4
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d7e:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008d80:	79fa      	ldrb	r2, [r7, #7]
 8008d82:	4924      	ldr	r1, [pc, #144]	; (8008e14 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d84:	4613      	mov	r3, r2
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	4413      	add	r3, r2
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	440b      	add	r3, r1
 8008d8e:	3302      	adds	r3, #2
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f002 facc 	bl	800b330 <bcdToDec>
 8008d98:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008d9a:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008d9c:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d9e:	613b      	str	r3, [r7, #16]

		Get_time();
 8008da0:	f002 fbc2 	bl	800b528 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008da4:	4b1c      	ldr	r3, [pc, #112]	; (8008e18 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008dae:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008db2:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	4619      	mov	r1, r3
 8008db8:	460b      	mov	r3, r1
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	1a5b      	subs	r3, r3, r1
 8008dbe:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008dc0:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008dc2:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008dc4:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008dc6:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008dc8:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008dca:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	bfb8      	it	lt
 8008dd6:	425b      	neglt	r3, r3
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	dd12      	ble.n	8008e02 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8008de6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	4a07      	ldr	r2, [pc, #28]	; (8008e0c <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008dee:	3366      	adds	r3, #102	; 0x66
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	461a      	mov	r2, r3
 8008df8:	4808      	ldr	r0, [pc, #32]	; (8008e1c <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8008dfa:	f017 f9ff 	bl	80201fc <iprintf>
			Return_Value  = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd90      	pop	{r4, r7, pc}
 8008e0c:	20000304 	.word	0x20000304
 8008e10:	20000e6c 	.word	0x20000e6c
 8008e14:	20001188 	.word	0x20001188
 8008e18:	20002888 	.word	0x20002888
 8008e1c:	08022db0 	.word	0x08022db0

08008e20 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008e26:	2300      	movs	r3, #0
 8008e28:	71fb      	strb	r3, [r7, #7]
 8008e2a:	e045      	b.n	8008eb8 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fde0 	bl	80079f4 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008e34:	79fa      	ldrb	r2, [r7, #7]
 8008e36:	4926      	ldr	r1, [pc, #152]	; (8008ed0 <Check_All_Peers+0xb0>)
 8008e38:	4613      	mov	r3, r2
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	3304      	adds	r3, #4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f003 fb4c 	bl	800c4e4 <HAL_Elaps_Ticks>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	4920      	ldr	r1, [pc, #128]	; (8008ed4 <Check_All_Peers+0xb4>)
 8008e52:	338a      	adds	r3, #138	; 0x8a
 8008e54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d92a      	bls.n	8008eb2 <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8008e5c:	79fa      	ldrb	r2, [r7, #7]
 8008e5e:	491c      	ldr	r1, [pc, #112]	; (8008ed0 <Check_All_Peers+0xb0>)
 8008e60:	4613      	mov	r3, r2
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d11f      	bne.n	8008eb2 <Check_All_Peers+0x92>
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <Check_All_Peers+0xb8>)
 8008e76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e7a:	79fa      	ldrb	r2, [r7, #7]
 8008e7c:	4814      	ldr	r0, [pc, #80]	; (8008ed0 <Check_All_Peers+0xb0>)
 8008e7e:	4613      	mov	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4403      	add	r3, r0
 8008e88:	3304      	adds	r3, #4
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4299      	cmp	r1, r3
 8008e8e:	d010      	beq.n	8008eb2 <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = CLEAR;
 8008e90:	79fa      	ldrb	r2, [r7, #7]
 8008e92:	490f      	ldr	r1, [pc, #60]	; (8008ed0 <Check_All_Peers+0xb0>)
 8008e94:	4613      	mov	r3, r2
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	440b      	add	r3, r1
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8008ea4:	79fc      	ldrb	r4, [r7, #7]
 8008ea6:	f00a f99f 	bl	80131e8 <HAL_GetTick>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <Check_All_Peers+0xb8>)
 8008eae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	71fb      	strb	r3, [r7, #7]
 8008eb8:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <Check_All_Peers+0xb4>)
 8008eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ebe:	79fa      	ldrb	r2, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d3b3      	bcc.n	8008e2c <Check_All_Peers+0xc>
			}
		}
	}
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd90      	pop	{r4, r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20001cc8 	.word	0x20001cc8
 8008ed4:	20000304 	.word	0x20000304
 8008ed8:	20002120 	.word	0x20002120

08008edc <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk = 0;

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008ee2:	4949      	ldr	r1, [pc, #292]	; (8009008 <Check_for_RelayMisMatch+0x12c>)
 8008ee4:	4849      	ldr	r0, [pc, #292]	; (800900c <Check_for_RelayMisMatch+0x130>)
 8008ee6:	f7f7 f9ab 	bl	8000240 <strcmp>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8086 	beq.w	8008ffe <Check_for_RelayMisMatch+0x122>
	{
		return;
	}


	if(HAL_Elaps_Ticks(Check_Clk) > TWO_HUNDRED_MS )
 8008ef2:	4b47      	ldr	r3, [pc, #284]	; (8009010 <Check_for_RelayMisMatch+0x134>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f003 faf4 	bl	800c4e4 <HAL_Elaps_Ticks>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2bc8      	cmp	r3, #200	; 0xc8
 8008f00:	d97e      	bls.n	8009000 <Check_for_RelayMisMatch+0x124>
	{
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008f02:	2300      	movs	r3, #0
 8008f04:	71fb      	strb	r3, [r7, #7]
 8008f06:	e06e      	b.n	8008fe6 <Check_for_RelayMisMatch+0x10a>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (Link_Flag[Traverser] == CLEAR))
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	4a42      	ldr	r2, [pc, #264]	; (8009014 <Check_for_RelayMisMatch+0x138>)
 8008f0c:	5cd3      	ldrb	r3, [r2, r3]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d116      	bne.n	8008f40 <Check_for_RelayMisMatch+0x64>
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4a40      	ldr	r2, [pc, #256]	; (8009018 <Check_for_RelayMisMatch+0x13c>)
 8008f16:	5cd3      	ldrb	r3, [r2, r3]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d111      	bne.n	8008f40 <Check_for_RelayMisMatch+0x64>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8008f1c:	79fa      	ldrb	r2, [r7, #7]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4a3d      	ldr	r2, [pc, #244]	; (800901c <Check_for_RelayMisMatch+0x140>)
 8008f28:	1898      	adds	r0, r3, r2
 8008f2a:	79fa      	ldrb	r2, [r7, #7]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4a3a      	ldr	r2, [pc, #232]	; (8009020 <Check_for_RelayMisMatch+0x144>)
 8008f36:	4413      	add	r3, r2
 8008f38:	2214      	movs	r2, #20
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f017 f84e 	bl	801ffdc <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8008f40:	79fa      	ldrb	r2, [r7, #7]
 8008f42:	4936      	ldr	r1, [pc, #216]	; (800901c <Check_for_RelayMisMatch+0x140>)
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	3312      	adds	r3, #18
 8008f50:	8819      	ldrh	r1, [r3, #0]
 8008f52:	79fa      	ldrb	r2, [r7, #7]
 8008f54:	4832      	ldr	r0, [pc, #200]	; (8009020 <Check_for_RelayMisMatch+0x144>)
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4403      	add	r3, r0
 8008f60:	3312      	adds	r3, #18
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d034      	beq.n	8008fd2 <Check_for_RelayMisMatch+0xf6>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	4a2e      	ldr	r2, [pc, #184]	; (8009024 <Check_for_RelayMisMatch+0x148>)
 8008f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f003 fab7 	bl	800c4e4 <HAL_Elaps_Ticks>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f7c:	d32f      	bcc.n	8008fde <Check_for_RelayMisMatch+0x102>
				{
					continue;
				}
				else
				{
					printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	4a29      	ldr	r2, [pc, #164]	; (8009028 <Check_for_RelayMisMatch+0x14c>)
 8008f82:	3366      	adds	r3, #102	; 0x66
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4827      	ldr	r0, [pc, #156]	; (800902c <Check_for_RelayMisMatch+0x150>)
 8008f8e:	f017 f935 	bl	80201fc <iprintf>
					printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8008f92:	79fa      	ldrb	r2, [r7, #7]
 8008f94:	4921      	ldr	r1, [pc, #132]	; (800901c <Check_for_RelayMisMatch+0x140>)
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	3312      	adds	r3, #18
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4822      	ldr	r0, [pc, #136]	; (8009030 <Check_for_RelayMisMatch+0x154>)
 8008fa8:	f017 f928 	bl	80201fc <iprintf>
					printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8008fac:	79fa      	ldrb	r2, [r7, #7]
 8008fae:	491c      	ldr	r1, [pc, #112]	; (8009020 <Check_for_RelayMisMatch+0x144>)
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	3312      	adds	r3, #18
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	481c      	ldr	r0, [pc, #112]	; (8009034 <Check_for_RelayMisMatch+0x158>)
 8008fc2:	f017 f91b 	bl	80201fc <iprintf>

					MisMatchFlag[Traverser] = SET;
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	4a1b      	ldr	r2, [pc, #108]	; (8009038 <Check_for_RelayMisMatch+0x15c>)
 8008fca:	2101      	movs	r1, #1
 8008fcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008fd0:	e006      	b.n	8008fe0 <Check_for_RelayMisMatch+0x104>
					//					Tx_Peer_Index_To_SignalReq = 0xff;
				}
			}
			else
			{
				MisMatchFlag[Traverser] = CLEAR; /* If both Relay CRC is Matching MisMatch will be CLEAR */
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	4a18      	ldr	r2, [pc, #96]	; (8009038 <Check_for_RelayMisMatch+0x15c>)
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008fdc:	e000      	b.n	8008fe0 <Check_for_RelayMisMatch+0x104>
					continue;
 8008fde:	bf00      	nop
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	71fb      	strb	r3, [r7, #7]
 8008fe6:	4b10      	ldr	r3, [pc, #64]	; (8009028 <Check_for_RelayMisMatch+0x14c>)
 8008fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fec:	79fa      	ldrb	r2, [r7, #7]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d38a      	bcc.n	8008f08 <Check_for_RelayMisMatch+0x2c>
			}
		}
		Check_Clk = HAL_GetTick();
 8008ff2:	f00a f8f9 	bl	80131e8 <HAL_GetTick>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	4a05      	ldr	r2, [pc, #20]	; (8009010 <Check_for_RelayMisMatch+0x134>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	e000      	b.n	8009000 <Check_for_RelayMisMatch+0x124>
		return;
 8008ffe:	bf00      	nop
	}
}
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	080219a8 	.word	0x080219a8
 800900c:	20000305 	.word	0x20000305
 8009010:	20002148 	.word	0x20002148
 8009014:	20000f70 	.word	0x20000f70
 8009018:	20000f64 	.word	0x20000f64
 800901c:	20001e80 	.word	0x20001e80
 8009020:	20001f48 	.word	0x20001f48
 8009024:	20000ed8 	.word	0x20000ed8
 8009028:	20000304 	.word	0x20000304
 800902c:	08022df0 	.word	0x08022df0
 8009030:	08022dfc 	.word	0x08022dfc
 8009034:	08022e0c 	.word	0x08022e0c
 8009038:	20000ec4 	.word	0x20000ec4

0800903c <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8009046:	f00a f8cf 	bl	80131e8 <HAL_GetTick>
 800904a:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 800904c:	79fa      	ldrb	r2, [r7, #7]
 800904e:	492a      	ldr	r1, [pc, #168]	; (80090f8 <CheckOtherLinkStatus+0xbc>)
 8009050:	4613      	mov	r3, r2
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	440b      	add	r3, r1
 800905a:	3302      	adds	r3, #2
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d11d      	bne.n	800909e <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	4925      	ldr	r1, [pc, #148]	; (80090fc <CheckOtherLinkStatus+0xc0>)
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 800906c:	79fa      	ldrb	r2, [r7, #7]
 800906e:	4924      	ldr	r1, [pc, #144]	; (8009100 <CheckOtherLinkStatus+0xc4>)
 8009070:	4613      	mov	r3, r2
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	440b      	add	r3, r1
 800907a:	3304      	adds	r3, #4
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009080:	79fa      	ldrb	r2, [r7, #7]
 8009082:	491f      	ldr	r1, [pc, #124]	; (8009100 <CheckOtherLinkStatus+0xc4>)
 8009084:	4613      	mov	r3, r2
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	3301      	adds	r3, #1
 8009090:	2201      	movs	r2, #1
 8009092:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	4a1b      	ldr	r2, [pc, #108]	; (8009104 <CheckOtherLinkStatus+0xc8>)
 8009098:	2101      	movs	r1, #1
 800909a:	54d1      	strb	r1, [r2, r3]
 800909c:	e017      	b.n	80090ce <CheckOtherLinkStatus+0x92>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = CLEAR;
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	4a18      	ldr	r2, [pc, #96]	; (8009104 <CheckOtherLinkStatus+0xc8>)
 80090a2:	2100      	movs	r1, #0
 80090a4:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 80090a6:	79fa      	ldrb	r2, [r7, #7]
 80090a8:	4915      	ldr	r1, [pc, #84]	; (8009100 <CheckOtherLinkStatus+0xc4>)
 80090aa:	4613      	mov	r3, r2
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	3308      	adds	r3, #8
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = CLEAR;
 80090ba:	79fa      	ldrb	r2, [r7, #7]
 80090bc:	4910      	ldr	r1, [pc, #64]	; (8009100 <CheckOtherLinkStatus+0xc4>)
 80090be:	4613      	mov	r3, r2
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	3301      	adds	r3, #1
 80090ca:	2200      	movs	r2, #0
 80090cc:	701a      	strb	r2, [r3, #0]
	}


	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 80090ce:	79fa      	ldrb	r2, [r7, #7]
 80090d0:	4909      	ldr	r1, [pc, #36]	; (80090f8 <CheckOtherLinkStatus+0xbc>)
 80090d2:	4613      	mov	r3, r2
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	4413      	add	r3, r2
 80090d8:	00db      	lsls	r3, r3, #3
 80090da:	440b      	add	r3, r1
 80090dc:	3301      	adds	r3, #1
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d104      	bne.n	80090ee <CheckOtherLinkStatus+0xb2>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	4908      	ldr	r1, [pc, #32]	; (8009108 <CheckOtherLinkStatus+0xcc>)
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}


}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001764 	.word	0x20001764
 80090fc:	20000f3c 	.word	0x20000f3c
 8009100:	20001d40 	.word	0x20001d40
 8009104:	20000f70 	.word	0x20000f70
 8009108:	20000e9c 	.word	0x20000e9c

0800910c <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009110:	4b1a      	ldr	r3, [pc, #104]	; (800917c <SendRelay2_Other+0x70>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f003 f9e5 	bl	800c4e4 <HAL_Elaps_Ticks>
 800911a:	4603      	mov	r3, r0
 800911c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009120:	d92a      	bls.n	8009178 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8009122:	2214      	movs	r2, #20
 8009124:	2100      	movs	r1, #0
 8009126:	4816      	ldr	r0, [pc, #88]	; (8009180 <SendRelay2_Other+0x74>)
 8009128:	f016 ff80 	bl	802002c <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 800912c:	4b15      	ldr	r3, [pc, #84]	; (8009184 <SendRelay2_Other+0x78>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a13      	ldr	r2, [pc, #76]	; (8009188 <SendRelay2_Other+0x7c>)
 800913a:	4413      	add	r3, r2
 800913c:	2214      	movs	r2, #20
 800913e:	4619      	mov	r1, r3
 8009140:	480f      	ldr	r0, [pc, #60]	; (8009180 <SendRelay2_Other+0x74>)
 8009142:	f016 ff4b 	bl	801ffdc <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009146:	f240 2007 	movw	r0, #519	; 0x207
 800914a:	f003 ff8b 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 800914e:	4b0d      	ldr	r3, [pc, #52]	; (8009184 <SendRelay2_Other+0x78>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a0b      	ldr	r2, [pc, #44]	; (8009184 <SendRelay2_Other+0x78>)
 8009156:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <SendRelay2_Other+0x80>)
 800915a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800915e:	461a      	mov	r2, r3
 8009160:	4b08      	ldr	r3, [pc, #32]	; (8009184 <SendRelay2_Other+0x78>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d102      	bne.n	800916e <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009168:	4b06      	ldr	r3, [pc, #24]	; (8009184 <SendRelay2_Other+0x78>)
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 800916e:	f00a f83b 	bl	80131e8 <HAL_GetTick>
 8009172:	4603      	mov	r3, r0
 8009174:	4a01      	ldr	r2, [pc, #4]	; (800917c <SendRelay2_Other+0x70>)
 8009176:	6013      	str	r3, [r2, #0]
	}
}
 8009178:	bf00      	nop
 800917a:	bd80      	pop	{r7, pc}
 800917c:	2000214c 	.word	0x2000214c
 8009180:	20002010 	.word	0x20002010
 8009184:	20002150 	.word	0x20002150
 8009188:	20001e80 	.word	0x20001e80
 800918c:	20000304 	.word	0x20000304

08009190 <Process_HitachiEI>:

void Process_HitachiEI(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009194:	f011 fb16 	bl	801a7c4 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8009198:	481a      	ldr	r0, [pc, #104]	; (8009204 <Process_HitachiEI+0x74>)
 800919a:	f00d fb8b 	bl	80168b4 <HAL_IWDG_Refresh>

		Feed_wdt();
 800919e:	f007 fe93 	bl	8010ec8 <Feed_wdt>

		readCanToStructs();
 80091a2:	f004 fc05 	bl	800d9b0 <readCanToStructs>

		Check_for_cmd();
 80091a6:	f7f7 fcd7 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 80091aa:	f7f7 fecf 	bl	8000f4c <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 80091ae:	f7f7 ff3b 	bl	8001028 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 80091b2:	f7fe fef7 	bl	8007fa4 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 80091b6:	f7fe fe2f 	bl	8007e18 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 80091ba:	f7fe fe91 	bl	8007ee0 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 80091be:	f7fe fdb5 	bl	8007d2c <CheckLinkEstablishTimeout>

		Check_All_Peers();
 80091c2:	f7ff fe2d 	bl	8008e20 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 80091c6:	f7ff fce3 	bl	8008b90 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 80091ca:	f7ff fc67 	bl	8008a9c <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 80091ce:	f7ff fd2f 	bl	8008c30 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 80091d2:	f002 fa0b 	bl	800b5ec <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 80091d6:	f7ff fe81 	bl	8008edc <Check_for_RelayMisMatch>

		SendRelay2_Other();
 80091da:	f7ff ff97 	bl	800910c <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 80091de:	f008 ffd1 	bl	8012184 <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <Process_HitachiEI+0x78>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <Process_HitachiEI+0x62>
		{
			gucFlagUpdate = 3;
 80091ea:	4b08      	ldr	r3, [pc, #32]	; (800920c <Process_HitachiEI+0x7c>)
 80091ec:	2203      	movs	r2, #3
 80091ee:	701a      	strb	r2, [r3, #0]
			break;
 80091f0:	e002      	b.n	80091f8 <Process_HitachiEI+0x68>
		}

		Enable_UART_Interrupts();
 80091f2:	f009 fde7 	bl	8012dc4 <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 80091f6:	e7cd      	b.n	8009194 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 80091f8:	f008 fec2 	bl	8011f80 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <Process_HitachiEI+0x74>)
 80091fe:	f00d fb59 	bl	80168b4 <HAL_IWDG_Refresh>
		Data_Processing();
 8009202:	e7f9      	b.n	80091f8 <Process_HitachiEI+0x68>
 8009204:	20009078 	.word	0x20009078
 8009208:	20000644 	.word	0x20000644
 800920c:	20000a49 	.word	0x20000a49

08009210 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8009216:	4b26      	ldr	r3, [pc, #152]	; (80092b0 <reset_cause_get+0xa0>)
 8009218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921a:	2b00      	cmp	r3, #0
 800921c:	da02      	bge.n	8009224 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800921e:	2301      	movs	r3, #1
 8009220:	71fb      	strb	r3, [r7, #7]
 8009222:	e037      	b.n	8009294 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8009224:	4b22      	ldr	r3, [pc, #136]	; (80092b0 <reset_cause_get+0xa0>)
 8009226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009228:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8009230:	2302      	movs	r3, #2
 8009232:	71fb      	strb	r3, [r7, #7]
 8009234:	e02e      	b.n	8009294 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8009236:	4b1e      	ldr	r3, [pc, #120]	; (80092b0 <reset_cause_get+0xa0>)
 8009238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8009242:	2303      	movs	r3, #3
 8009244:	71fb      	strb	r3, [r7, #7]
 8009246:	e025      	b.n	8009294 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8009248:	4b19      	ldr	r3, [pc, #100]	; (80092b0 <reset_cause_get+0xa0>)
 800924a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8009254:	2304      	movs	r3, #4
 8009256:	71fb      	strb	r3, [r7, #7]
 8009258:	e01c      	b.n	8009294 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800925a:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <reset_cause_get+0xa0>)
 800925c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8009266:	2305      	movs	r3, #5
 8009268:	71fb      	strb	r3, [r7, #7]
 800926a:	e013      	b.n	8009294 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800926c:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <reset_cause_get+0xa0>)
 800926e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8009278:	2306      	movs	r3, #6
 800927a:	71fb      	strb	r3, [r7, #7]
 800927c:	e00a      	b.n	8009294 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800927e:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <reset_cause_get+0xa0>)
 8009280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800928a:	2307      	movs	r3, #7
 800928c:	71fb      	strb	r3, [r7, #7]
 800928e:	e001      	b.n	8009294 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 8009290:	2300      	movs	r3, #0
 8009292:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8009294:	4b06      	ldr	r3, [pc, #24]	; (80092b0 <reset_cause_get+0xa0>)
 8009296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009298:	4a05      	ldr	r2, [pc, #20]	; (80092b0 <reset_cause_get+0xa0>)
 800929a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800929e:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 80092a0:	79fb      	ldrb	r3, [r7, #7]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	40023800 	.word	0x40023800

080092b4 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 80092be:	4b1c      	ldr	r3, [pc, #112]	; (8009330 <reset_cause_get_name+0x7c>)
 80092c0:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	2b07      	cmp	r3, #7
 80092c6:	d82b      	bhi.n	8009320 <reset_cause_get_name+0x6c>
 80092c8:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <reset_cause_get_name+0x1c>)
 80092ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ce:	bf00      	nop
 80092d0:	080092f1 	.word	0x080092f1
 80092d4:	080092f7 	.word	0x080092f7
 80092d8:	080092fd 	.word	0x080092fd
 80092dc:	08009303 	.word	0x08009303
 80092e0:	08009309 	.word	0x08009309
 80092e4:	0800930f 	.word	0x0800930f
 80092e8:	08009315 	.word	0x08009315
 80092ec:	0800931b 	.word	0x0800931b
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 80092f0:	4b10      	ldr	r3, [pc, #64]	; (8009334 <reset_cause_get_name+0x80>)
 80092f2:	60fb      	str	r3, [r7, #12]
            break;
 80092f4:	e014      	b.n	8009320 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 80092f6:	4b10      	ldr	r3, [pc, #64]	; (8009338 <reset_cause_get_name+0x84>)
 80092f8:	60fb      	str	r3, [r7, #12]
            break;
 80092fa:	e011      	b.n	8009320 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 80092fc:	4b0f      	ldr	r3, [pc, #60]	; (800933c <reset_cause_get_name+0x88>)
 80092fe:	60fb      	str	r3, [r7, #12]
            break;
 8009300:	e00e      	b.n	8009320 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8009302:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <reset_cause_get_name+0x8c>)
 8009304:	60fb      	str	r3, [r7, #12]
            break;
 8009306:	e00b      	b.n	8009320 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8009308:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <reset_cause_get_name+0x90>)
 800930a:	60fb      	str	r3, [r7, #12]
            break;
 800930c:	e008      	b.n	8009320 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800930e:	4b0e      	ldr	r3, [pc, #56]	; (8009348 <reset_cause_get_name+0x94>)
 8009310:	60fb      	str	r3, [r7, #12]
            break;
 8009312:	e005      	b.n	8009320 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8009314:	4b0d      	ldr	r3, [pc, #52]	; (800934c <reset_cause_get_name+0x98>)
 8009316:	60fb      	str	r3, [r7, #12]
            break;
 8009318:	e002      	b.n	8009320 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800931a:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <reset_cause_get_name+0x9c>)
 800931c:	60fb      	str	r3, [r7, #12]
            break;
 800931e:	bf00      	nop
    }

    return reset_cause_name;
 8009320:	68fb      	ldr	r3, [r7, #12]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	08022e1c 	.word	0x08022e1c
 8009334:	08022e20 	.word	0x08022e20
 8009338:	08022e28 	.word	0x08022e28
 800933c:	08022e38 	.word	0x08022e38
 8009340:	08022e50 	.word	0x08022e50
 8009344:	08022e6c 	.word	0x08022e6c
 8009348:	08022e7c 	.word	0x08022e7c
 800934c:	08022eac 	.word	0x08022eac
 8009350:	08022ec8 	.word	0x08022ec8

08009354 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 8009358:	f008 ff14 	bl	8012184 <Print_BuildDat_Details>

		readCanToStructs();
 800935c:	f004 fb28 	bl	800d9b0 <readCanToStructs>

		Feed_wdt();
 8009360:	f007 fdb2 	bl	8010ec8 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 8009364:	480f      	ldr	r0, [pc, #60]	; (80093a4 <Process_Medha_EI+0x50>)
 8009366:	f00d faa5 	bl	80168b4 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800936a:	f000 f91d 	bl	80095a8 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 800936e:	f000 fee1 	bl	800a134 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 8009372:	f000 ff49 	bl	800a208 <Process_Clear_Relays>

		Send_Data_to_Other();
 8009376:	f001 f82d 	bl	800a3d4 <Send_Data_to_Other>

		Process_Data_from_Other();
 800937a:	f001 f885 	bl	800a488 <Process_Data_from_Other>

		CheckforMedhaCMD();
 800937e:	f001 fa59 	bl	800a834 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 8009382:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <Process_Medha_EI+0x54>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 800938a:	4b08      	ldr	r3, [pc, #32]	; (80093ac <Process_Medha_EI+0x58>)
 800938c:	2203      	movs	r2, #3
 800938e:	701a      	strb	r2, [r3, #0]
			break;
 8009390:	e002      	b.n	8009398 <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 8009392:	f009 fd17 	bl	8012dc4 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 8009396:	e7df      	b.n	8009358 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8009398:	4802      	ldr	r0, [pc, #8]	; (80093a4 <Process_Medha_EI+0x50>)
 800939a:	f00d fa8b 	bl	80168b4 <HAL_IWDG_Refresh>
		Data_Processing();
 800939e:	f008 fdef 	bl	8011f80 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 80093a2:	e7f9      	b.n	8009398 <Process_Medha_EI+0x44>
 80093a4:	20009078 	.word	0x20009078
 80093a8:	20000644 	.word	0x20000644
 80093ac:	20000a49 	.word	0x20000a49

080093b0 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	4603      	mov	r3, r0
 80093b8:	6039      	str	r1, [r7, #0]
 80093ba:	71fb      	strb	r3, [r7, #7]
 80093bc:	4613      	mov	r3, r2
 80093be:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 80093c4:	2300      	movs	r3, #0
 80093c6:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 80093c8:	e0d0      	b.n	800956c <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f009 fbe3 	bl	8012b98 <Com_Get_Byte>
 80093d2:	4603      	mov	r3, r0
 80093d4:	461a      	mov	r2, r3
 80093d6:	4b6c      	ldr	r3, [pc, #432]	; (8009588 <Get_Medha_EI_Message+0x1d8>)
 80093d8:	701a      	strb	r2, [r3, #0]
//		printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 80093da:	4b6c      	ldr	r3, [pc, #432]	; (800958c <Get_Medha_EI_Message+0x1dc>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	3b01      	subs	r3, #1
 80093e0:	2b04      	cmp	r3, #4
 80093e2:	f200 80c2 	bhi.w	800956a <Get_Medha_EI_Message+0x1ba>
 80093e6:	a201      	add	r2, pc, #4	; (adr r2, 80093ec <Get_Medha_EI_Message+0x3c>)
 80093e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ec:	08009401 	.word	0x08009401
 80093f0:	08009419 	.word	0x08009419
 80093f4:	0800956b 	.word	0x0800956b
 80093f8:	08009465 	.word	0x08009465
 80093fc:	080094bd 	.word	0x080094bd
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 8009400:	4b61      	ldr	r3, [pc, #388]	; (8009588 <Get_Medha_EI_Message+0x1d8>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b53      	cmp	r3, #83	; 0x53
 8009406:	f040 80b1 	bne.w	800956c <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 800940a:	4b61      	ldr	r3, [pc, #388]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 800940c:	2201      	movs	r2, #1
 800940e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 8009410:	4b5e      	ldr	r3, [pc, #376]	; (800958c <Get_Medha_EI_Message+0x1dc>)
 8009412:	2202      	movs	r2, #2
 8009414:	701a      	strb	r2, [r3, #0]
			}
			break;
 8009416:	e0a9      	b.n	800956c <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 8009418:	4b5d      	ldr	r3, [pc, #372]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	2b08      	cmp	r3, #8
 800941e:	d111      	bne.n	8009444 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 8009420:	4b5b      	ldr	r3, [pc, #364]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	4413      	add	r3, r2
 800942a:	4a57      	ldr	r2, [pc, #348]	; (8009588 <Get_Medha_EI_Message+0x1d8>)
 800942c:	7812      	ldrb	r2, [r2, #0]
 800942e:	701a      	strb	r2, [r3, #0]
					i++;
 8009430:	4b57      	ldr	r3, [pc, #348]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	b29a      	uxth	r2, r3
 8009438:	4b55      	ldr	r3, [pc, #340]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 800943a:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 800943c:	4b53      	ldr	r3, [pc, #332]	; (800958c <Get_Medha_EI_Message+0x1dc>)
 800943e:	2204      	movs	r2, #4
 8009440:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 8009442:	e00d      	b.n	8009460 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 8009444:	4b52      	ldr	r3, [pc, #328]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	4413      	add	r3, r2
 800944e:	4a4e      	ldr	r2, [pc, #312]	; (8009588 <Get_Medha_EI_Message+0x1d8>)
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	701a      	strb	r2, [r3, #0]
					i++;
 8009454:	4b4e      	ldr	r3, [pc, #312]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	3301      	adds	r3, #1
 800945a:	b29a      	uxth	r2, r3
 800945c:	4b4c      	ldr	r3, [pc, #304]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 800945e:	801a      	strh	r2, [r3, #0]
				break;
 8009460:	bf00      	nop
			}
			break;
 8009462:	e083      	b.n	800956c <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 8009464:	4b4a      	ldr	r3, [pc, #296]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	3b02      	subs	r3, #2
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	4413      	add	r3, r2
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	b29b      	uxth	r3, r3
 8009472:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 8009474:	4b47      	ldr	r3, [pc, #284]	; (8009594 <Get_Medha_EI_Message+0x1e4>)
 8009476:	2200      	movs	r2, #0
 8009478:	801a      	strh	r2, [r3, #0]
				j=1;
 800947a:	4b47      	ldr	r3, [pc, #284]	; (8009598 <Get_Medha_EI_Message+0x1e8>)
 800947c:	2201      	movs	r2, #1
 800947e:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 8009480:	4b43      	ldr	r3, [pc, #268]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	461a      	mov	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	4413      	add	r3, r2
 800948a:	4a3f      	ldr	r2, [pc, #252]	; (8009588 <Get_Medha_EI_Message+0x1d8>)
 800948c:	7812      	ldrb	r2, [r2, #0]
 800948e:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 8009490:	4b40      	ldr	r3, [pc, #256]	; (8009594 <Get_Medha_EI_Message+0x1e4>)
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	3301      	adds	r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	4b3e      	ldr	r3, [pc, #248]	; (8009594 <Get_Medha_EI_Message+0x1e4>)
 800949a:	801a      	strh	r2, [r3, #0]
				i++;
 800949c:	4b3c      	ldr	r3, [pc, #240]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	3301      	adds	r3, #1
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	4b3a      	ldr	r3, [pc, #232]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 80094a6:	801a      	strh	r2, [r3, #0]
				j++;
 80094a8:	4b3b      	ldr	r3, [pc, #236]	; (8009598 <Get_Medha_EI_Message+0x1e8>)
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	4b39      	ldr	r3, [pc, #228]	; (8009598 <Get_Medha_EI_Message+0x1e8>)
 80094b2:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 80094b4:	4b35      	ldr	r3, [pc, #212]	; (800958c <Get_Medha_EI_Message+0x1dc>)
 80094b6:	2205      	movs	r2, #5
 80094b8:	701a      	strb	r2, [r3, #0]
				break;
 80094ba:	e057      	b.n	800956c <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 80094bc:	4b34      	ldr	r3, [pc, #208]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 80094be:	881b      	ldrh	r3, [r3, #0]
 80094c0:	461a      	mov	r2, r3
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	4413      	add	r3, r2
 80094c6:	4a30      	ldr	r2, [pc, #192]	; (8009588 <Get_Medha_EI_Message+0x1d8>)
 80094c8:	7812      	ldrb	r2, [r2, #0]
 80094ca:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 80094cc:	89ba      	ldrh	r2, [r7, #12]
 80094ce:	4b31      	ldr	r3, [pc, #196]	; (8009594 <Get_Medha_EI_Message+0x1e4>)
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d940      	bls.n	8009558 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 80094d6:	4b2f      	ldr	r3, [pc, #188]	; (8009594 <Get_Medha_EI_Message+0x1e4>)
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	3301      	adds	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	4b2d      	ldr	r3, [pc, #180]	; (8009594 <Get_Medha_EI_Message+0x1e4>)
 80094e0:	801a      	strh	r2, [r3, #0]
					i++;
 80094e2:	4b2b      	ldr	r3, [pc, #172]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	3301      	adds	r3, #1
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	4b29      	ldr	r3, [pc, #164]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 80094ec:	801a      	strh	r2, [r3, #0]
					j++;
 80094ee:	4b2a      	ldr	r3, [pc, #168]	; (8009598 <Get_Medha_EI_Message+0x1e8>)
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	4b28      	ldr	r3, [pc, #160]	; (8009598 <Get_Medha_EI_Message+0x1e8>)
 80094f8:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 80094fa:	89ba      	ldrh	r2, [r7, #12]
 80094fc:	4b25      	ldr	r3, [pc, #148]	; (8009594 <Get_Medha_EI_Message+0x1e4>)
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d133      	bne.n	800956c <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 8009504:	4b22      	ldr	r3, [pc, #136]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	3b04      	subs	r3, #4
 800950a:	b29a      	uxth	r2, r3
 800950c:	4b23      	ldr	r3, [pc, #140]	; (800959c <Get_Medha_EI_Message+0x1ec>)
 800950e:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 8009510:	4b22      	ldr	r3, [pc, #136]	; (800959c <Get_Medha_EI_Message+0x1ec>)
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	81fb      	strh	r3, [r7, #14]
						i = 0;
 8009516:	4b1e      	ldr	r3, [pc, #120]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 8009518:	2200      	movs	r2, #0
 800951a:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 800951c:	4b1b      	ldr	r3, [pc, #108]	; (800958c <Get_Medha_EI_Message+0x1dc>)
 800951e:	2201      	movs	r2, #1
 8009520:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 8009526:	89fb      	ldrh	r3, [r7, #14]
 8009528:	2b04      	cmp	r3, #4
 800952a:	d804      	bhi.n	8009536 <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 800952c:	481c      	ldr	r0, [pc, #112]	; (80095a0 <Get_Medha_EI_Message+0x1f0>)
 800952e:	f016 ff01 	bl	8020334 <puts>
							return ZERO;
 8009532:	2300      	movs	r3, #0
 8009534:	e023      	b.n	800957e <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 8009536:	4b19      	ldr	r3, [pc, #100]	; (800959c <Get_Medha_EI_Message+0x1ec>)
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	2000      	movs	r0, #0
 8009540:	f001 fc3a 	bl	800adb8 <CheckCRC32>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800954a:	89fb      	ldrh	r3, [r7, #14]
 800954c:	e017      	b.n	800957e <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800954e:	4815      	ldr	r0, [pc, #84]	; (80095a4 <Get_Medha_EI_Message+0x1f4>)
 8009550:	f016 fef0 	bl	8020334 <puts>
							return ZERO;
 8009554:	2300      	movs	r3, #0
 8009556:	e012      	b.n	800957e <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 8009558:	4b0d      	ldr	r3, [pc, #52]	; (8009590 <Get_Medha_EI_Message+0x1e0>)
 800955a:	2200      	movs	r2, #0
 800955c:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800955e:	4b0b      	ldr	r3, [pc, #44]	; (800958c <Get_Medha_EI_Message+0x1dc>)
 8009560:	2201      	movs	r2, #1
 8009562:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	81bb      	strh	r3, [r7, #12]
				}
				break;
 8009568:	e000      	b.n	800956c <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800956a:	bf00      	nop
	while(Com_DataReady(ComPort))
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	4618      	mov	r0, r3
 8009570:	f009 fad2 	bl	8012b18 <Com_DataReady>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	f47f af27 	bne.w	80093ca <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20002854 	.word	0x20002854
 800958c:	20000116 	.word	0x20000116
 8009590:	20002856 	.word	0x20002856
 8009594:	20002858 	.word	0x20002858
 8009598:	2000285a 	.word	0x2000285a
 800959c:	2000285c 	.word	0x2000285c
 80095a0:	08022ee0 	.word	0x08022ee0
 80095a4:	08022ee8 	.word	0x08022ee8

080095a8 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 80095a8:	b5b0      	push	{r4, r5, r7, lr}
 80095aa:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80095ae:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 80095b6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80095ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80095be:	2200      	movs	r2, #0
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	3304      	adds	r3, #4
 80095c4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80095c8:	2100      	movs	r1, #0
 80095ca:	4618      	mov	r0, r3
 80095cc:	f016 fd2e 	bl	802002c <memset>
	uint16_t NoOfInputs 		= 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 80095dc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80095e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	3304      	adds	r3, #4
 80095ea:	227c      	movs	r2, #124	; 0x7c
 80095ec:	2100      	movs	r1, #0
 80095ee:	4618      	mov	r0, r3
 80095f0:	f016 fd1c 	bl	802002c <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 8009600:	4bd1      	ldr	r3, [pc, #836]	; (8009948 <Medha_EI_Analyser+0x3a0>)
 8009602:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009606:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800960a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff fece 	bl	80093b0 <Get_Medha_EI_Message>
 8009614:	4603      	mov	r3, r0
 8009616:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800961a:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800961e:	2b05      	cmp	r3, #5
 8009620:	d939      	bls.n	8009696 <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8009622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009626:	48c9      	ldr	r0, [pc, #804]	; (800994c <Medha_EI_Analyser+0x3a4>)
 8009628:	f00c fac7 	bl	8015bba <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 800962c:	48c8      	ldr	r0, [pc, #800]	; (8009950 <Medha_EI_Analyser+0x3a8>)
 800962e:	f016 fe81 	bl	8020334 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009632:	2300      	movs	r3, #0
 8009634:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009638:	e024      	b.n	8009684 <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 800963a:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800963e:	2b00      	cmp	r3, #0
 8009640:	d010      	beq.n	8009664 <Medha_EI_Analyser+0xbc>
 8009642:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009646:	4bc3      	ldr	r3, [pc, #780]	; (8009954 <Medha_EI_Analyser+0x3ac>)
 8009648:	fba3 1302 	umull	r1, r3, r3, r2
 800964c:	08d9      	lsrs	r1, r3, #3
 800964e:	460b      	mov	r3, r1
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	b29b      	uxth	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 800965e:	200a      	movs	r0, #10
 8009660:	f016 fde4 	bl	802022c <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 8009664:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009668:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800966c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8009670:	5cd3      	ldrb	r3, [r2, r3]
 8009672:	4619      	mov	r1, r3
 8009674:	48b8      	ldr	r0, [pc, #736]	; (8009958 <Medha_EI_Analyser+0x3b0>)
 8009676:	f016 fdc1 	bl	80201fc <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800967a:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800967e:	3301      	adds	r3, #1
 8009680:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009684:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009688:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800968c:	429a      	cmp	r2, r3
 800968e:	d3d4      	bcc.n	800963a <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 8009690:	200a      	movs	r0, #10
 8009692:	f016 fdcb 	bl	802022c <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 8009696:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 83c5 	beq.w	8009e2a <Medha_EI_Analyser+0x882>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 80096a0:	463b      	mov	r3, r7
 80096a2:	f44f 7292 	mov.w	r2, #292	; 0x124
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f016 fcbf 	bl	802002c <memset>

		BYTEINIT(0);
 80096ae:	2300      	movs	r3, #0
 80096b0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 80096b4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096b8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80096bc:	4413      	add	r3, r2
 80096be:	781a      	ldrb	r2, [r3, #0]
 80096c0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096c4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096c8:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 80096ca:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096ce:	3301      	adds	r3, #1
 80096d0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 80096d4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096d8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80096dc:	4413      	add	r3, r2
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096e6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096ea:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 80096ec:	4b96      	ldr	r3, [pc, #600]	; (8009948 <Medha_EI_Analyser+0x3a0>)
 80096ee:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 80096f2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096f6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096fa:	889b      	ldrh	r3, [r3, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d010      	beq.n	8009722 <Medha_EI_Analyser+0x17a>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 8009700:	4896      	ldr	r0, [pc, #600]	; (800995c <Medha_EI_Analyser+0x3b4>)
 8009702:	f016 fe17 	bl	8020334 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 8009706:	4b90      	ldr	r3, [pc, #576]	; (8009948 <Medha_EI_Analyser+0x3a0>)
 8009708:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800970c:	4619      	mov	r1, r3
 800970e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009712:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009716:	889b      	ldrh	r3, [r3, #4]
 8009718:	461a      	mov	r2, r3
 800971a:	4891      	ldr	r0, [pc, #580]	; (8009960 <Medha_EI_Analyser+0x3b8>)
 800971c:	f016 fd6e 	bl	80201fc <iprintf>
			return;
 8009720:	e384      	b.n	8009e2c <Medha_EI_Analyser+0x884>
		}
		BYTEINC(2);
 8009722:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009726:	3302      	adds	r3, #2
 8009728:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800972c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009730:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009734:	4413      	add	r3, r2
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	b29a      	uxth	r2, r3
 800973a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800973e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009742:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 8009744:	4b80      	ldr	r3, [pc, #512]	; (8009948 <Medha_EI_Analyser+0x3a0>)
 8009746:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800974a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800974e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009752:	885b      	ldrh	r3, [r3, #2]
 8009754:	429a      	cmp	r2, r3
 8009756:	d010      	beq.n	800977a <Medha_EI_Analyser+0x1d2>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 8009758:	4882      	ldr	r0, [pc, #520]	; (8009964 <Medha_EI_Analyser+0x3bc>)
 800975a:	f016 fdeb 	bl	8020334 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800975e:	4b7a      	ldr	r3, [pc, #488]	; (8009948 <Medha_EI_Analyser+0x3a0>)
 8009760:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8009764:	4619      	mov	r1, r3
 8009766:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800976a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800976e:	885b      	ldrh	r3, [r3, #2]
 8009770:	461a      	mov	r2, r3
 8009772:	487b      	ldr	r0, [pc, #492]	; (8009960 <Medha_EI_Analyser+0x3b8>)
 8009774:	f016 fd42 	bl	80201fc <iprintf>
			return;
 8009778:	e358      	b.n	8009e2c <Medha_EI_Analyser+0x884>
		}
		BYTEINC(2);
 800977a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800977e:	3302      	adds	r3, #2
 8009780:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 8009784:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009788:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800978c:	4413      	add	r3, r2
 800978e:	781a      	ldrb	r2, [r3, #0]
 8009790:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009794:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009798:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 800979a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800979e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097a2:	799b      	ldrb	r3, [r3, #6]
 80097a4:	2baa      	cmp	r3, #170	; 0xaa
 80097a6:	d010      	beq.n	80097ca <Medha_EI_Analyser+0x222>
 80097a8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097ac:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097b0:	799b      	ldrb	r3, [r3, #6]
 80097b2:	2bbb      	cmp	r3, #187	; 0xbb
 80097b4:	d009      	beq.n	80097ca <Medha_EI_Analyser+0x222>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 80097b6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097ba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097be:	799b      	ldrb	r3, [r3, #6]
 80097c0:	4619      	mov	r1, r3
 80097c2:	4869      	ldr	r0, [pc, #420]	; (8009968 <Medha_EI_Analyser+0x3c0>)
 80097c4:	f016 fd1a 	bl	80201fc <iprintf>
			return;
 80097c8:	e330      	b.n	8009e2c <Medha_EI_Analyser+0x884>
		}
		BYTEINC(1);
 80097ca:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097ce:	3301      	adds	r3, #1
 80097d0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 80097d4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097d8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80097dc:	4413      	add	r3, r2
 80097de:	781a      	ldrb	r2, [r3, #0]
 80097e0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097e4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097e8:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 80097ea:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097ee:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097f2:	79db      	ldrb	r3, [r3, #7]
 80097f4:	2be1      	cmp	r3, #225	; 0xe1
 80097f6:	d009      	beq.n	800980c <Medha_EI_Analyser+0x264>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 80097f8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097fc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009800:	79db      	ldrb	r3, [r3, #7]
 8009802:	4619      	mov	r1, r3
 8009804:	4859      	ldr	r0, [pc, #356]	; (800996c <Medha_EI_Analyser+0x3c4>)
 8009806:	f016 fcf9 	bl	80201fc <iprintf>
			return;
 800980a:	e30f      	b.n	8009e2c <Medha_EI_Analyser+0x884>
		}

		BYTEINC(1);
 800980c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009810:	3301      	adds	r3, #1
 8009812:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 8009816:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800981a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800981e:	4413      	add	r3, r2
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29a      	uxth	r2, r3
 8009824:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009828:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800982c:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800982e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009832:	3302      	adds	r3, #2
 8009834:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 8009838:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800983c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009840:	4413      	add	r3, r2
 8009842:	781a      	ldrb	r2, [r3, #0]
 8009844:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009848:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800984c:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800984e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009852:	3301      	adds	r3, #1
 8009854:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 8009858:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800985c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009860:	441a      	add	r2, r3
 8009862:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009866:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800986a:	330b      	adds	r3, #11
 800986c:	6811      	ldr	r1, [r2, #0]
 800986e:	6019      	str	r1, [r3, #0]
 8009870:	8891      	ldrh	r1, [r2, #4]
 8009872:	7992      	ldrb	r2, [r2, #6]
 8009874:	8099      	strh	r1, [r3, #4]
 8009876:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 8009878:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800987c:	3307      	adds	r3, #7
 800987e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 8009882:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009886:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800988a:	4413      	add	r3, r2
 800988c:	781a      	ldrb	r2, [r3, #0]
 800988e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009892:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009896:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 8009898:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800989c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098a0:	7c9b      	ldrb	r3, [r3, #18]
 80098a2:	2b11      	cmp	r3, #17
 80098a4:	d009      	beq.n	80098ba <Medha_EI_Analyser+0x312>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 80098a6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098aa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098ae:	7c9b      	ldrb	r3, [r3, #18]
 80098b0:	4619      	mov	r1, r3
 80098b2:	482f      	ldr	r0, [pc, #188]	; (8009970 <Medha_EI_Analyser+0x3c8>)
 80098b4:	f016 fca2 	bl	80201fc <iprintf>
			return;
 80098b8:	e2b8      	b.n	8009e2c <Medha_EI_Analyser+0x884>
		}

		BYTEINC(1);
 80098ba:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098be:	3301      	adds	r3, #1
 80098c0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 80098c4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098c8:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 80098cc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098d0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80098d4:	4413      	add	r3, r2
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29a      	uxth	r2, r3
 80098da:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098de:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098e2:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 80098e4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098e8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098ec:	8a9b      	ldrh	r3, [r3, #20]
 80098ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f2:	d909      	bls.n	8009908 <Medha_EI_Analyser+0x360>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%u\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 80098f4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098f8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098fc:	8a9b      	ldrh	r3, [r3, #20]
 80098fe:	4619      	mov	r1, r3
 8009900:	481c      	ldr	r0, [pc, #112]	; (8009974 <Medha_EI_Analyser+0x3cc>)
 8009902:	f016 fc7b 	bl	80201fc <iprintf>
			return;
 8009906:	e291      	b.n	8009e2c <Medha_EI_Analyser+0x884>
		}


//		printf("\nStation Name:%s\n",EI_data.STN_NAME);
		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 8009908:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800990c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009910:	8a9a      	ldrh	r2, [r3, #20]
 8009912:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <Medha_EI_Analyser+0x3a0>)
 8009914:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009918:	429a      	cmp	r2, r3
 800991a:	d03b      	beq.n	8009994 <Medha_EI_Analyser+0x3ec>
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800991c:	4916      	ldr	r1, [pc, #88]	; (8009978 <Medha_EI_Analyser+0x3d0>)
 800991e:	4817      	ldr	r0, [pc, #92]	; (800997c <Medha_EI_Analyser+0x3d4>)
 8009920:	f7f6 fc8e 	bl	8000240 <strcmp>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d02c      	beq.n	8009984 <Medha_EI_Analyser+0x3dc>
			{
				printf("No of Relays Not Matching...\nConfigured:%u - Received:%u\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 800992a:	4b07      	ldr	r3, [pc, #28]	; (8009948 <Medha_EI_Analyser+0x3a0>)
 800992c:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009930:	4619      	mov	r1, r3
 8009932:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009936:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800993a:	8a9b      	ldrh	r3, [r3, #20]
 800993c:	461a      	mov	r2, r3
 800993e:	4810      	ldr	r0, [pc, #64]	; (8009980 <Medha_EI_Analyser+0x3d8>)
 8009940:	f016 fc5c 	bl	80201fc <iprintf>
				return;
 8009944:	e272      	b.n	8009e2c <Medha_EI_Analyser+0x884>
 8009946:	bf00      	nop
 8009948:	20000304 	.word	0x20000304
 800994c:	40021c00 	.word	0x40021c00
 8009950:	08022ef0 	.word	0x08022ef0
 8009954:	cccccccd 	.word	0xcccccccd
 8009958:	08022efc 	.word	0x08022efc
 800995c:	08022f04 	.word	0x08022f04
 8009960:	08022f38 	.word	0x08022f38
 8009964:	08022f5c 	.word	0x08022f5c
 8009968:	08022f8c 	.word	0x08022f8c
 800996c:	08022fc4 	.word	0x08022fc4
 8009970:	08022ffc 	.word	0x08022ffc
 8009974:	08023040 	.word	0x08023040
 8009978:	08023090 	.word	0x08023090
 800997c:	20000305 	.word	0x20000305
 8009980:	0802309c 	.word	0x0802309c
			}
			else
			{
				EI_data.Medha_Prms_st.NoofRelays = Medha_EI_Temp_Rx_st.NoofRelays;
 8009984:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009988:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800998c:	8a9a      	ldrh	r2, [r3, #20]
 800998e:	4b9b      	ldr	r3, [pc, #620]	; (8009bfc <Medha_EI_Analyser+0x654>)
 8009990:	f8a3 2328 	strh.w	r2, [r3, #808]	; 0x328
			}
		}



		BYTEINC(2);
 8009994:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009998:	3302      	adds	r3, #2
 800999a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 800999e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099a2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099a6:	8a9b      	ldrh	r3, [r3, #20]
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 80099b0:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00a      	beq.n	80099ce <Medha_EI_Analyser+0x426>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 80099b8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099bc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099c0:	8a9b      	ldrh	r3, [r3, #20]
 80099c2:	08db      	lsrs	r3, r3, #3
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	3301      	adds	r3, #1
 80099c8:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 80099cc:	e007      	b.n	80099de <Medha_EI_Analyser+0x436>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 80099ce:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099d2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099d6:	8a9b      	ldrh	r3, [r3, #20]
 80099d8:	08db      	lsrs	r3, r3, #3
 80099da:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80099de:	2300      	movs	r3, #0
 80099e0:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80099e4:	e02a      	b.n	8009a3c <Medha_EI_Analyser+0x494>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 80099e6:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 80099ea:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80099ee:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 80099f2:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80099f6:	5c89      	ldrb	r1, [r1, r2]
 80099f8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80099fc:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009a00:	4413      	add	r3, r2
 8009a02:	460a      	mov	r2, r1
 8009a04:	759a      	strb	r2, [r3, #22]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009a06:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a0a:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009a0e:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009a12:	4413      	add	r3, r2
 8009a14:	7d9a      	ldrb	r2, [r3, #22]
 8009a16:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a1a:	43d2      	mvns	r2, r2
 8009a1c:	b2d1      	uxtb	r1, r2
 8009a1e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009a22:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009a26:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 8009a28:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009a32:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a36:	3301      	adds	r3, #1
 8009a38:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a3c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009a40:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d3ce      	bcc.n	80099e6 <Medha_EI_Analyser+0x43e>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a4e:	e01a      	b.n	8009a86 <Medha_EI_Analyser+0x4de>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009a50:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009a54:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a58:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009a5c:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009a60:	5c89      	ldrb	r1, [r1, r2]
 8009a62:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009a66:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009a6a:	4413      	add	r3, r2
 8009a6c:	460a      	mov	r2, r1
 8009a6e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			BYTEINC(1);
 8009a72:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009a76:	3301      	adds	r3, #1
 8009a78:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009a7c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a80:	3301      	adds	r3, #1
 8009a82:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a86:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009a8a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d3de      	bcc.n	8009a50 <Medha_EI_Analyser+0x4a8>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 8009a92:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009a96:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8009a9a:	463b      	mov	r3, r7
 8009a9c:	3396      	adds	r3, #150	; 0x96
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f016 fa8c 	bl	801ffbc <memcmp>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d03f      	beq.n	8009b2a <Medha_EI_Analyser+0x582>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 8009aaa:	4855      	ldr	r0, [pc, #340]	; (8009c00 <Medha_EI_Analyser+0x658>)
 8009aac:	f016 fc42 	bl	8020334 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ab6:	e011      	b.n	8009adc <Medha_EI_Analyser+0x534>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 8009ab8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009abc:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009ac0:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009aca:	4619      	mov	r1, r3
 8009acc:	484d      	ldr	r0, [pc, #308]	; (8009c04 <Medha_EI_Analyser+0x65c>)
 8009ace:	f016 fb95 	bl	80201fc <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009ad2:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009adc:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009ae0:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d3e7      	bcc.n	8009ab8 <Medha_EI_Analyser+0x510>
			}

			printf("\nExpected Compliment Relay Status:\n");
 8009ae8:	4847      	ldr	r0, [pc, #284]	; (8009c08 <Medha_EI_Analyser+0x660>)
 8009aea:	f016 fc23 	bl	8020334 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009aee:	2300      	movs	r3, #0
 8009af0:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009af4:	e00f      	b.n	8009b16 <Medha_EI_Analyser+0x56e>
			{
				printf("%02X ",TempCompliment[Traverser]);
 8009af6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009afa:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009afe:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009b02:	5cd3      	ldrb	r3, [r2, r3]
 8009b04:	4619      	mov	r1, r3
 8009b06:	483f      	ldr	r0, [pc, #252]	; (8009c04 <Medha_EI_Analyser+0x65c>)
 8009b08:	f016 fb78 	bl	80201fc <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009b0c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b10:	3301      	adds	r3, #1
 8009b12:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b16:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009b1a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d3e9      	bcc.n	8009af6 <Medha_EI_Analyser+0x54e>
			}

			printf("\nPACKET Rejected\n");
 8009b22:	483a      	ldr	r0, [pc, #232]	; (8009c0c <Medha_EI_Analyser+0x664>)
 8009b24:	f016 fc06 	bl	8020334 <puts>
			return;
 8009b28:	e180      	b.n	8009e2c <Medha_EI_Analyser+0x884>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 8009b2a:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009b2e:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009b32:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 f90a 	bl	800ad50 <GetCRC32>
 8009b3c:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 8009b40:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b44:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009b48:	4413      	add	r3, r2
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009b52:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009b56:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 8009b5a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009b5e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009b62:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009b66:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d00c      	beq.n	8009b88 <Medha_EI_Analyser+0x5e0>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 8009b6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009b72:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009b76:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8009b80:	4823      	ldr	r0, [pc, #140]	; (8009c10 <Medha_EI_Analyser+0x668>)
 8009b82:	f016 fb3b 	bl	80201fc <iprintf>
			return;
 8009b86:	e151      	b.n	8009e2c <Medha_EI_Analyser+0x884>
		}
		BYTEINC(4);
 8009b88:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 8009b92:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b96:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009b9a:	4413      	add	r3, r2
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ba4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ba8:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 8009bac:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 8009bb6:	f009 fb17 	bl	80131e8 <HAL_GetTick>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	4a15      	ldr	r2, [pc, #84]	; (8009c14 <Medha_EI_Analyser+0x66c>)
 8009bbe:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 8009bc0:	4a15      	ldr	r2, [pc, #84]	; (8009c18 <Medha_EI_Analyser+0x670>)
 8009bc2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009bc6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	f44f 7392 	mov.w	r3, #292	; 0x124
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f016 fa02 	bl	801ffdc <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 8009bd8:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <Medha_EI_Analyser+0x674>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009bde:	4b0e      	ldr	r3, [pc, #56]	; (8009c18 <Medha_EI_Analyser+0x670>)
 8009be0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009be4:	4a0d      	ldr	r2, [pc, #52]	; (8009c1c <Medha_EI_Analyser+0x674>)
 8009be6:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 8009be8:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f94d 	bl	8009e8c <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009bf8:	e023      	b.n	8009c42 <Medha_EI_Analyser+0x69a>
 8009bfa:	bf00      	nop
 8009bfc:	20000304 	.word	0x20000304
 8009c00:	080230d8 	.word	0x080230d8
 8009c04:	08022efc 	.word	0x08022efc
 8009c08:	08023124 	.word	0x08023124
 8009c0c:	08023148 	.word	0x08023148
 8009c10:	0802315c 	.word	0x0802315c
 8009c14:	200026a0 	.word	0x200026a0
 8009c18:	20002548 	.word	0x20002548
 8009c1c:	200026b0 	.word	0x200026b0
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009c20:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009c24:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009c28:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009c2c:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8009c30:	440a      	add	r2, r1
 8009c32:	7d91      	ldrb	r1, [r2, #22]
 8009c34:	4a7f      	ldr	r2, [pc, #508]	; (8009e34 <Medha_EI_Analyser+0x88c>)
 8009c36:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009c38:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009c42:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009c46:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d3e8      	bcc.n	8009c20 <Medha_EI_Analyser+0x678>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009c4e:	4b7a      	ldr	r3, [pc, #488]	; (8009e38 <Medha_EI_Analyser+0x890>)
 8009c50:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009c54:	4a77      	ldr	r2, [pc, #476]	; (8009e34 <Medha_EI_Analyser+0x88c>)
 8009c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 8009c5a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c5e:	461a      	mov	r2, r3
 8009c60:	4974      	ldr	r1, [pc, #464]	; (8009e34 <Medha_EI_Analyser+0x88c>)
 8009c62:	4876      	ldr	r0, [pc, #472]	; (8009e3c <Medha_EI_Analyser+0x894>)
 8009c64:	f016 f9aa 	bl	801ffbc <memcmp>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d030      	beq.n	8009cd0 <Medha_EI_Analyser+0x728>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009c6e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c72:	461a      	mov	r2, r3
 8009c74:	496f      	ldr	r1, [pc, #444]	; (8009e34 <Medha_EI_Analyser+0x88c>)
 8009c76:	4871      	ldr	r0, [pc, #452]	; (8009e3c <Medha_EI_Analyser+0x894>)
 8009c78:	f016 f9b0 	bl	801ffdc <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 8009c7c:	4b6d      	ldr	r3, [pc, #436]	; (8009e34 <Medha_EI_Analyser+0x88c>)
 8009c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c82:	4a6e      	ldr	r2, [pc, #440]	; (8009e3c <Medha_EI_Analyser+0x894>)
 8009c84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 8009c88:	2230      	movs	r2, #48	; 0x30
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	486c      	ldr	r0, [pc, #432]	; (8009e40 <Medha_EI_Analyser+0x898>)
 8009c8e:	f016 f9cd 	bl	802002c <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009c92:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c96:	461a      	mov	r2, r3
 8009c98:	4966      	ldr	r1, [pc, #408]	; (8009e34 <Medha_EI_Analyser+0x88c>)
 8009c9a:	4869      	ldr	r0, [pc, #420]	; (8009e40 <Medha_EI_Analyser+0x898>)
 8009c9c:	f016 f99e 	bl	801ffdc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 8009ca0:	f240 1019 	movw	r0, #281	; 0x119
 8009ca4:	f003 f9de 	bl	800d064 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009ca8:	f009 fa9e 	bl	80131e8 <HAL_GetTick>
 8009cac:	4603      	mov	r3, r0
 8009cae:	4a65      	ldr	r2, [pc, #404]	; (8009e44 <Medha_EI_Analyser+0x89c>)
 8009cb0:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 8009cb2:	4865      	ldr	r0, [pc, #404]	; (8009e48 <Medha_EI_Analyser+0x8a0>)
 8009cb4:	f016 fb3e 	bl	8020334 <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8009cb8:	f240 2001 	movw	r0, #513	; 0x201
 8009cbc:	f003 f9d2 	bl	800d064 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 8009cc0:	4b62      	ldr	r3, [pc, #392]	; (8009e4c <Medha_EI_Analyser+0x8a4>)
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d103      	bne.n	8009cd0 <Medha_EI_Analyser+0x728>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009cc8:	f240 2007 	movw	r0, #519	; 0x207
 8009ccc:	f003 f9ca 	bl	800d064 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 8009cd0:	485f      	ldr	r0, [pc, #380]	; (8009e50 <Medha_EI_Analyser+0x8a8>)
 8009cd2:	f016 fb2f 	bl	8020334 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 8009cd6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cda:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cde:	889b      	ldrh	r3, [r3, #4]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	485c      	ldr	r0, [pc, #368]	; (8009e54 <Medha_EI_Analyser+0x8ac>)
 8009ce4:	f016 fa8a 	bl	80201fc <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 8009ce8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cec:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cf0:	885b      	ldrh	r3, [r3, #2]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4858      	ldr	r0, [pc, #352]	; (8009e58 <Medha_EI_Analyser+0x8b0>)
 8009cf6:	f016 fa81 	bl	80201fc <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 8009cfa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cfe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d02:	799b      	ldrb	r3, [r3, #6]
 8009d04:	4619      	mov	r1, r3
 8009d06:	4855      	ldr	r0, [pc, #340]	; (8009e5c <Medha_EI_Analyser+0x8b4>)
 8009d08:	f016 fa78 	bl	80201fc <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 8009d0c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d10:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d14:	79db      	ldrb	r3, [r3, #7]
 8009d16:	4619      	mov	r1, r3
 8009d18:	4851      	ldr	r0, [pc, #324]	; (8009e60 <Medha_EI_Analyser+0x8b8>)
 8009d1a:	f016 fa6f 	bl	80201fc <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 8009d1e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d22:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d26:	891b      	ldrh	r3, [r3, #8]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	484e      	ldr	r0, [pc, #312]	; (8009e64 <Medha_EI_Analyser+0x8bc>)
 8009d2c:	f016 fa66 	bl	80201fc <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 8009d30:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d34:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d38:	7a9b      	ldrb	r3, [r3, #10]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	484a      	ldr	r0, [pc, #296]	; (8009e68 <Medha_EI_Analyser+0x8c0>)
 8009d3e:	f016 fa5d 	bl	80201fc <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 8009d42:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d46:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d4a:	7b9b      	ldrb	r3, [r3, #14]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d52:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d56:	7b5b      	ldrb	r3, [r3, #13]
 8009d58:	461c      	mov	r4, r3
 8009d5a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d5e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d62:	7b1b      	ldrb	r3, [r3, #12]
 8009d64:	461d      	mov	r5, r3
 8009d66:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d6a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d6e:	7bdb      	ldrb	r3, [r3, #15]
 8009d70:	461a      	mov	r2, r3
 8009d72:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d76:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d7a:	7c1b      	ldrb	r3, [r3, #16]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d82:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d86:	7c5b      	ldrb	r3, [r3, #17]
 8009d88:	9302      	str	r3, [sp, #8]
 8009d8a:	9101      	str	r1, [sp, #4]
 8009d8c:	9200      	str	r2, [sp, #0]
 8009d8e:	462b      	mov	r3, r5
 8009d90:	4622      	mov	r2, r4
 8009d92:	4601      	mov	r1, r0
 8009d94:	4835      	ldr	r0, [pc, #212]	; (8009e6c <Medha_EI_Analyser+0x8c4>)
 8009d96:	f016 fa31 	bl	80201fc <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 8009d9a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d9e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009da2:	7c9b      	ldrb	r3, [r3, #18]
 8009da4:	4619      	mov	r1, r3
 8009da6:	4832      	ldr	r0, [pc, #200]	; (8009e70 <Medha_EI_Analyser+0x8c8>)
 8009da8:	f016 fa28 	bl	80201fc <iprintf>
		printf("RC:%5u\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009dac:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009db0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009db4:	8a9b      	ldrh	r3, [r3, #20]
 8009db6:	4619      	mov	r1, r3
 8009db8:	482e      	ldr	r0, [pc, #184]	; (8009e74 <Medha_EI_Analyser+0x8cc>)
 8009dba:	f016 fa1f 	bl	80201fc <iprintf>
		printf("SIGNAL DATA       :");
 8009dbe:	482e      	ldr	r0, [pc, #184]	; (8009e78 <Medha_EI_Analyser+0x8d0>)
 8009dc0:	f016 fa1c 	bl	80201fc <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009dca:	e021      	b.n	8009e10 <Medha_EI_Analyser+0x868>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 8009dcc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d010      	beq.n	8009df6 <Medha_EI_Analyser+0x84e>
 8009dd4:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009dd8:	4b28      	ldr	r3, [pc, #160]	; (8009e7c <Medha_EI_Analyser+0x8d4>)
 8009dda:	fba3 1302 	umull	r1, r3, r3, r2
 8009dde:	08d9      	lsrs	r1, r3, #3
 8009de0:	460b      	mov	r3, r1
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	440b      	add	r3, r1
 8009de6:	005b      	lsls	r3, r3, #1
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <Medha_EI_Analyser+0x84e>
			{
				printf("\n                   ");
 8009df0:	4823      	ldr	r0, [pc, #140]	; (8009e80 <Medha_EI_Analyser+0x8d8>)
 8009df2:	f016 fa03 	bl	80201fc <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 8009df6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009dfa:	4a0e      	ldr	r2, [pc, #56]	; (8009e34 <Medha_EI_Analyser+0x88c>)
 8009dfc:	5cd3      	ldrb	r3, [r2, r3]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4820      	ldr	r0, [pc, #128]	; (8009e84 <Medha_EI_Analyser+0x8dc>)
 8009e02:	f016 f9fb 	bl	80201fc <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009e06:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009e10:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009e14:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d3d7      	bcc.n	8009dcc <Medha_EI_Analyser+0x824>
		}
		printf("\n");
 8009e1c:	200a      	movs	r0, #10
 8009e1e:	f016 fa05 	bl	802022c <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 8009e22:	4819      	ldr	r0, [pc, #100]	; (8009e88 <Medha_EI_Analyser+0x8e0>)
 8009e24:	f016 fa86 	bl	8020334 <puts>
		return;
 8009e28:	e000      	b.n	8009e2c <Medha_EI_Analyser+0x884>
	}
	else
	{
		return;
 8009e2a:	bf00      	nop
	}
}
 8009e2c:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bdb0      	pop	{r4, r5, r7, pc}
 8009e34:	200026c8 	.word	0x200026c8
 8009e38:	20002548 	.word	0x20002548
 8009e3c:	200027d0 	.word	0x200027d0
 8009e40:	2000266e 	.word	0x2000266e
 8009e44:	200026a0 	.word	0x200026a0
 8009e48:	0802319c 	.word	0x0802319c
 8009e4c:	200026b8 	.word	0x200026b8
 8009e50:	080231b4 	.word	0x080231b4
 8009e54:	080231dc 	.word	0x080231dc
 8009e58:	080231e4 	.word	0x080231e4
 8009e5c:	080231ec 	.word	0x080231ec
 8009e60:	080231f8 	.word	0x080231f8
 8009e64:	08023204 	.word	0x08023204
 8009e68:	0802320c 	.word	0x0802320c
 8009e6c:	08023214 	.word	0x08023214
 8009e70:	08023238 	.word	0x08023238
 8009e74:	08023244 	.word	0x08023244
 8009e78:	0802324c 	.word	0x0802324c
 8009e7c:	cccccccd 	.word	0xcccccccd
 8009e80:	08023260 	.word	0x08023260
 8009e84:	08022efc 	.word	0x08022efc
 8009e88:	08023278 	.word	0x08023278

08009e8c <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b0d2      	sub	sp, #328	; 0x148
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4602      	mov	r2, r0
 8009e94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009e98:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009e9c:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 8009e9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ea2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	3304      	adds	r3, #4
 8009eac:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f016 f8ba 	bl	802002c <memset>
	uint32_t Cal_Crc =0;
 8009eb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ebc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 8009eca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ece:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 8009edc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ee0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009ee4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009ee8:	2153      	movs	r1, #83	; 0x53
 8009eea:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009eec:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 8009ef6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009efa:	f107 0214 	add.w	r2, r7, #20
 8009efe:	4413      	add	r3, r2
 8009f00:	4a88      	ldr	r2, [pc, #544]	; (800a124 <Send_Medha_EI_Reply+0x298>)
 8009f02:	8852      	ldrh	r2, [r2, #2]
 8009f04:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009f06:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f0a:	3302      	adds	r3, #2
 8009f0c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 8009f10:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f14:	f107 0214 	add.w	r2, r7, #20
 8009f18:	4413      	add	r3, r2
 8009f1a:	4a82      	ldr	r2, [pc, #520]	; (800a124 <Send_Medha_EI_Reply+0x298>)
 8009f1c:	8892      	ldrh	r2, [r2, #4]
 8009f1e:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009f20:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f24:	3302      	adds	r3, #2
 8009f26:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 8009f2a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f2e:	f107 0214 	add.w	r2, r7, #20
 8009f32:	4413      	add	r3, r2
 8009f34:	4a7b      	ldr	r2, [pc, #492]	; (800a124 <Send_Medha_EI_Reply+0x298>)
 8009f36:	7992      	ldrb	r2, [r2, #6]
 8009f38:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009f3a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f3e:	3301      	adds	r3, #1
 8009f40:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 8009f44:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f48:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009f4c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009f50:	21e2      	movs	r1, #226	; 0xe2
 8009f52:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009f54:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f58:	3301      	adds	r3, #1
 8009f5a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 8009f5e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f62:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 8009f66:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f6a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009f6e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009f72:	2100      	movs	r1, #0
 8009f74:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 8009f76:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009f80:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009f84:	2100      	movs	r1, #0
 8009f86:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 8009f88:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f8c:	3302      	adds	r3, #2
 8009f8e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 8009f92:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f96:	f107 0214 	add.w	r2, r7, #20
 8009f9a:	4413      	add	r3, r2
 8009f9c:	4a61      	ldr	r2, [pc, #388]	; (800a124 <Send_Medha_EI_Reply+0x298>)
 8009f9e:	7a92      	ldrb	r2, [r2, #10]
 8009fa0:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009fa2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 8009fac:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fb0:	f107 0214 	add.w	r2, r7, #20
 8009fb4:	441a      	add	r2, r3
 8009fb6:	4b5b      	ldr	r3, [pc, #364]	; (800a124 <Send_Medha_EI_Reply+0x298>)
 8009fb8:	330b      	adds	r3, #11
 8009fba:	6819      	ldr	r1, [r3, #0]
 8009fbc:	6011      	str	r1, [r2, #0]
 8009fbe:	8899      	ldrh	r1, [r3, #4]
 8009fc0:	799b      	ldrb	r3, [r3, #6]
 8009fc2:	8091      	strh	r1, [r2, #4]
 8009fc4:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 8009fc6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fca:	3307      	adds	r3, #7
 8009fcc:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 8009fd0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fd4:	f107 0214 	add.w	r2, r7, #20
 8009fd8:	4413      	add	r3, r2
 8009fda:	4a52      	ldr	r2, [pc, #328]	; (800a124 <Send_Medha_EI_Reply+0x298>)
 8009fdc:	8a92      	ldrh	r2, [r2, #20]
 8009fde:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009fe0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fe4:	3302      	adds	r3, #2
 8009fe6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 8009fea:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fee:	f107 0214 	add.w	r2, r7, #20
 8009ff2:	18d0      	adds	r0, r2, r3
 8009ff4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ff8:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009ffc:	881b      	ldrh	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	4949      	ldr	r1, [pc, #292]	; (800a128 <Send_Medha_EI_Reply+0x29c>)
 800a002:	f015 ffeb 	bl	801ffdc <memcpy>
	BYTEINC(Outputs);
 800a006:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a00a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a00e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	4413      	add	r3, r2
 800a016:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800a01a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a01e:	f107 0214 	add.w	r2, r7, #20
 800a022:	18d0      	adds	r0, r2, r3
 800a024:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a028:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	493e      	ldr	r1, [pc, #248]	; (800a12c <Send_Medha_EI_Reply+0x2a0>)
 800a032:	f015 ffd3 	bl	801ffdc <memcpy>
	BYTEINC(Outputs);
 800a036:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a03a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a03e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	4413      	add	r3, r2
 800a046:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800a04a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a04e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a052:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a056:	2100      	movs	r1, #0
 800a058:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800a05a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a05e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a062:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a066:	2100      	movs	r1, #0
 800a068:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800a06a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a06e:	3302      	adds	r3, #2
 800a070:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800a074:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	b29b      	uxth	r3, r3
 800a082:	3302      	adds	r3, #2
 800a084:	b29a      	uxth	r2, r3
 800a086:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a08a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a08e:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800a090:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a094:	f107 0214 	add.w	r2, r7, #20
 800a098:	4413      	add	r3, r2
 800a09a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a09e:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a0a2:	8812      	ldrh	r2, [r2, #0]
 800a0a4:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800a0a6:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a0aa:	f107 0314 	add.w	r3, r7, #20
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	f000 fe4d 	bl	800ad50 <GetCRC32>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a0bc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a0c0:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800a0c2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0c6:	f107 0214 	add.w	r2, r7, #20
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a0d0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a0d4:	6812      	ldr	r2, [r2, #0]
 800a0d6:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800a0d8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0dc:	3304      	adds	r3, #4
 800a0de:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a0e8:	e011      	b.n	800a10e <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800a0ea:	4b11      	ldr	r3, [pc, #68]	; (800a130 <Send_Medha_EI_Reply+0x2a4>)
 800a0ec:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800a0f0:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a0f4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a0f8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a0fc:	5cd3      	ldrb	r3, [r2, r3]
 800a0fe:	4619      	mov	r1, r3
 800a100:	f008 fe1a 	bl	8012d38 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a104:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a108:	3301      	adds	r3, #1
 800a10a:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a10e:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800a112:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a116:	429a      	cmp	r2, r3
 800a118:	d3e7      	bcc.n	800a0ea <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800a11a:	bf00      	nop
}
 800a11c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20002548 	.word	0x20002548
 800a128:	2000255e 	.word	0x2000255e
 800a12c:	200025de 	.word	0x200025de
 800a130:	20000304 	.word	0x20000304

0800a134 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800a13a:	4b2d      	ldr	r3, [pc, #180]	; (800a1f0 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	4618      	mov	r0, r3
 800a140:	f002 f9d0 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a144:	4602      	mov	r2, r0
 800a146:	4b2b      	ldr	r3, [pc, #172]	; (800a1f4 <Send_Relay_Statuses_2_MIE+0xc0>)
 800a148:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d34a      	bcc.n	800a1e6 <Send_Relay_Statuses_2_MIE+0xb2>
	{
		uint16_t NoOfInputs = 0;
 800a150:	2300      	movs	r3, #0
 800a152:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800a154:	4b27      	ldr	r3, [pc, #156]	; (800a1f4 <Send_Relay_Statuses_2_MIE+0xc0>)
 800a156:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a15a:	f003 0307 	and.w	r3, r3, #7
 800a15e:	b29b      	uxth	r3, r3
 800a160:	2b00      	cmp	r3, #0
 800a162:	d007      	beq.n	800a174 <Send_Relay_Statuses_2_MIE+0x40>
 800a164:	4b23      	ldr	r3, [pc, #140]	; (800a1f4 <Send_Relay_Statuses_2_MIE+0xc0>)
 800a166:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a16a:	08db      	lsrs	r3, r3, #3
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	3301      	adds	r3, #1
 800a170:	80fb      	strh	r3, [r7, #6]
 800a172:	e004      	b.n	800a17e <Send_Relay_Statuses_2_MIE+0x4a>
 800a174:	4b1f      	ldr	r3, [pc, #124]	; (800a1f4 <Send_Relay_Statuses_2_MIE+0xc0>)
 800a176:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a17a:	08db      	lsrs	r3, r3, #3
 800a17c:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800a17e:	f009 f833 	bl	80131e8 <HAL_GetTick>
 800a182:	4603      	mov	r3, r0
 800a184:	4a1a      	ldr	r2, [pc, #104]	; (800a1f0 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a186:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800a188:	481b      	ldr	r0, [pc, #108]	; (800a1f8 <Send_Relay_Statuses_2_MIE+0xc4>)
 800a18a:	f016 f8d3 	bl	8020334 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a18e:	2300      	movs	r3, #0
 800a190:	603b      	str	r3, [r7, #0]
 800a192:	e01d      	b.n	800a1d0 <Send_Relay_Statuses_2_MIE+0x9c>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00e      	beq.n	800a1b8 <Send_Relay_Statuses_2_MIE+0x84>
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <Send_Relay_Statuses_2_MIE+0xc8>)
 800a19e:	fba3 2301 	umull	r2, r3, r3, r1
 800a1a2:	091a      	lsrs	r2, r3, #4
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	1aca      	subs	r2, r1, r3
 800a1ae:	2a00      	cmp	r2, #0
 800a1b0:	d102      	bne.n	800a1b8 <Send_Relay_Statuses_2_MIE+0x84>
			{
				printf("\n");
 800a1b2:	200a      	movs	r0, #10
 800a1b4:	f016 f83a 	bl	802022c <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800a1b8:	4a11      	ldr	r2, [pc, #68]	; (800a200 <Send_Relay_Statuses_2_MIE+0xcc>)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	4413      	add	r3, r2
 800a1be:	3302      	adds	r3, #2
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	480f      	ldr	r0, [pc, #60]	; (800a204 <Send_Relay_Statuses_2_MIE+0xd0>)
 800a1c6:	f016 f819 	bl	80201fc <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	88fb      	ldrh	r3, [r7, #6]
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d3dd      	bcc.n	800a194 <Send_Relay_Statuses_2_MIE+0x60>
		}
		printf("\n");
 800a1d8:	200a      	movs	r0, #10
 800a1da:	f016 f827 	bl	802022c <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800a1de:	f240 1019 	movw	r0, #281	; 0x119
 800a1e2:	f002 ff3f 	bl	800d064 <TransmitCanPkt>
#endif
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	200026a0 	.word	0x200026a0
 800a1f4:	20000304 	.word	0x20000304
 800a1f8:	080232a0 	.word	0x080232a0
 800a1fc:	cccccccd 	.word	0xcccccccd
 800a200:	2000266c 	.word	0x2000266c
 800a204:	08022efc 	.word	0x08022efc

0800a208 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800a20e:	4b61      	ldr	r3, [pc, #388]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	4618      	mov	r0, r3
 800a214:	f002 f966 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a218:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a21a:	4b5f      	ldr	r3, [pc, #380]	; (800a398 <Process_Clear_Relays+0x190>)
 800a21c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a220:	4a5d      	ldr	r2, [pc, #372]	; (800a398 <Process_Clear_Relays+0x190>)
 800a222:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800a226:	fb02 f303 	mul.w	r3, r2, r3
 800a22a:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800a22c:	495b      	ldr	r1, [pc, #364]	; (800a39c <Process_Clear_Relays+0x194>)
 800a22e:	485c      	ldr	r0, [pc, #368]	; (800a3a0 <Process_Clear_Relays+0x198>)
 800a230:	f7f6 f806 	bl	8000240 <strcmp>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 80a7 	beq.w	800a38a <Process_Clear_Relays+0x182>
	{
//		printf("-____________________NOT FOUND-\n");
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	d30c      	bcc.n	800a25e <Process_Clear_Relays+0x56>
 800a244:	4b53      	ldr	r3, [pc, #332]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	4b56      	ldr	r3, [pc, #344]	; (800a3a4 <Process_Clear_Relays+0x19c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d006      	beq.n	800a25e <Process_Clear_Relays+0x56>
 800a250:	4b55      	ldr	r3, [pc, #340]	; (800a3a8 <Process_Clear_Relays+0x1a0>)
 800a252:	785a      	ldrb	r2, [r3, #1]
 800a254:	4b50      	ldr	r3, [pc, #320]	; (800a398 <Process_Clear_Relays+0x190>)
 800a256:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d808      	bhi.n	800a270 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800a25e:	4b4d      	ldr	r3, [pc, #308]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d049      	beq.n	800a2fa <Process_Clear_Relays+0xf2>
 800a266:	4b51      	ldr	r3, [pc, #324]	; (800a3ac <Process_Clear_Relays+0x1a4>)
 800a268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d044      	beq.n	800a2fa <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a270:	4b48      	ldr	r3, [pc, #288]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	4619      	mov	r1, r3
 800a276:	484e      	ldr	r0, [pc, #312]	; (800a3b0 <Process_Clear_Relays+0x1a8>)
 800a278:	f015 ffc0 	bl	80201fc <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a27c:	4b45      	ldr	r3, [pc, #276]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	d006      	beq.n	800a296 <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a288:	4b42      	ldr	r3, [pc, #264]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	f023 0301 	bic.w	r3, r3, #1
 800a290:	b2da      	uxtb	r2, r3
 800a292:	4b40      	ldr	r3, [pc, #256]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a294:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a296:	4b3f      	ldr	r3, [pc, #252]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d006      	beq.n	800a2b0 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a2a2:	4b3c      	ldr	r3, [pc, #240]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	f023 0302 	bic.w	r3, r3, #2
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	4b39      	ldr	r3, [pc, #228]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a2ae:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a2b0:	2284      	movs	r2, #132	; 0x84
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	483d      	ldr	r0, [pc, #244]	; (800a3ac <Process_Clear_Relays+0x1a4>)
 800a2b6:	f015 feb9 	bl	802002c <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800a2ba:	2232      	movs	r2, #50	; 0x32
 800a2bc:	2100      	movs	r1, #0
 800a2be:	483d      	ldr	r0, [pc, #244]	; (800a3b4 <Process_Clear_Relays+0x1ac>)
 800a2c0:	f015 feb4 	bl	802002c <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a2c4:	2284      	movs	r2, #132	; 0x84
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	483b      	ldr	r0, [pc, #236]	; (800a3b8 <Process_Clear_Relays+0x1b0>)
 800a2ca:	f015 feaf 	bl	802002c <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a2ce:	2208      	movs	r2, #8
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	483a      	ldr	r0, [pc, #232]	; (800a3bc <Process_Clear_Relays+0x1b4>)
 800a2d4:	f015 feaa 	bl	802002c <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a2d8:	2208      	movs	r2, #8
 800a2da:	2100      	movs	r1, #0
 800a2dc:	4832      	ldr	r0, [pc, #200]	; (800a3a8 <Process_Clear_Relays+0x1a0>)
 800a2de:	f015 fea5 	bl	802002c <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a2e2:	2208      	movs	r2, #8
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4836      	ldr	r0, [pc, #216]	; (800a3c0 <Process_Clear_Relays+0x1b8>)
 800a2e8:	f015 fea0 	bl	802002c <memset>
		printf("Cleared Relay Statuses\n");
 800a2ec:	4835      	ldr	r0, [pc, #212]	; (800a3c4 <Process_Clear_Relays+0x1bc>)
 800a2ee:	f016 f821 	bl	8020334 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a2f2:	4b28      	ldr	r3, [pc, #160]	; (800a394 <Process_Clear_Relays+0x18c>)
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	4a2b      	ldr	r2, [pc, #172]	; (800a3a4 <Process_Clear_Relays+0x19c>)
 800a2f8:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 800a2fa:	4b33      	ldr	r3, [pc, #204]	; (800a3c8 <Process_Clear_Relays+0x1c0>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f002 f8f0 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a304:	4602      	mov	r2, r0
 800a306:	4b24      	ldr	r3, [pc, #144]	; (800a398 <Process_Clear_Relays+0x190>)
 800a308:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d92a      	bls.n	800a366 <Process_Clear_Relays+0x15e>
 800a310:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <Process_Clear_Relays+0x1c4>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d126      	bne.n	800a366 <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 800a318:	482d      	ldr	r0, [pc, #180]	; (800a3d0 <Process_Clear_Relays+0x1c8>)
 800a31a:	f016 f80b 	bl	8020334 <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 800a31e:	4b2b      	ldr	r3, [pc, #172]	; (800a3cc <Process_Clear_Relays+0x1c4>)
 800a320:	2200      	movs	r2, #0
 800a322:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a324:	2284      	movs	r2, #132	; 0x84
 800a326:	2100      	movs	r1, #0
 800a328:	4820      	ldr	r0, [pc, #128]	; (800a3ac <Process_Clear_Relays+0x1a4>)
 800a32a:	f015 fe7f 	bl	802002c <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800a32e:	2232      	movs	r2, #50	; 0x32
 800a330:	2100      	movs	r1, #0
 800a332:	4820      	ldr	r0, [pc, #128]	; (800a3b4 <Process_Clear_Relays+0x1ac>)
 800a334:	f015 fe7a 	bl	802002c <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a338:	2284      	movs	r2, #132	; 0x84
 800a33a:	2100      	movs	r1, #0
 800a33c:	481e      	ldr	r0, [pc, #120]	; (800a3b8 <Process_Clear_Relays+0x1b0>)
 800a33e:	f015 fe75 	bl	802002c <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a342:	2208      	movs	r2, #8
 800a344:	2100      	movs	r1, #0
 800a346:	481d      	ldr	r0, [pc, #116]	; (800a3bc <Process_Clear_Relays+0x1b4>)
 800a348:	f015 fe70 	bl	802002c <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a34c:	2208      	movs	r2, #8
 800a34e:	2100      	movs	r1, #0
 800a350:	4815      	ldr	r0, [pc, #84]	; (800a3a8 <Process_Clear_Relays+0x1a0>)
 800a352:	f015 fe6b 	bl	802002c <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a356:	2208      	movs	r2, #8
 800a358:	2100      	movs	r1, #0
 800a35a:	4819      	ldr	r0, [pc, #100]	; (800a3c0 <Process_Clear_Relays+0x1b8>)
 800a35c:	f015 fe66 	bl	802002c <memset>
		printf("Cleared Relay Statuses\n");
 800a360:	4818      	ldr	r0, [pc, #96]	; (800a3c4 <Process_Clear_Relays+0x1bc>)
 800a362:	f015 ffe7 	bl	8020334 <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 800a366:	4b18      	ldr	r3, [pc, #96]	; (800a3c8 <Process_Clear_Relays+0x1c0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f002 f8ba 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a370:	4602      	mov	r2, r0
 800a372:	4b09      	ldr	r3, [pc, #36]	; (800a398 <Process_Clear_Relays+0x190>)
 800a374:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a378:	429a      	cmp	r2, r3
 800a37a:	d207      	bcs.n	800a38c <Process_Clear_Relays+0x184>
 800a37c:	4b13      	ldr	r3, [pc, #76]	; (800a3cc <Process_Clear_Relays+0x1c4>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d103      	bne.n	800a38c <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 800a384:	f006 fdbc 	bl	8010f00 <Blink_S2>
 800a388:	e000      	b.n	800a38c <Process_Clear_Relays+0x184>
		return;
 800a38a:	bf00      	nop
	}


}
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	200026a0 	.word	0x200026a0
 800a398:	20000304 	.word	0x20000304
 800a39c:	08023090 	.word	0x08023090
 800a3a0:	20000305 	.word	0x20000305
 800a3a4:	20002860 	.word	0x20002860
 800a3a8:	200026b8 	.word	0x200026b8
 800a3ac:	200026c8 	.word	0x200026c8
 800a3b0:	080232b4 	.word	0x080232b4
 800a3b4:	2000266c 	.word	0x2000266c
 800a3b8:	200027d0 	.word	0x200027d0
 800a3bc:	200026b0 	.word	0x200026b0
 800a3c0:	200026c0 	.word	0x200026c0
 800a3c4:	080232e4 	.word	0x080232e4
 800a3c8:	20002158 	.word	0x20002158
 800a3cc:	20002154 	.word	0x20002154
 800a3d0:	080232fc 	.word	0x080232fc

0800a3d4 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800a3d8:	4b26      	ldr	r3, [pc, #152]	; (800a474 <Send_Data_to_Other+0xa0>)
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f002 f881 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	4b24      	ldr	r3, [pc, #144]	; (800a478 <Send_Data_to_Other+0xa4>)
 800a3e6:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a3ea:	4923      	ldr	r1, [pc, #140]	; (800a478 <Send_Data_to_Other+0xa4>)
 800a3ec:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800a3f0:	fb01 f303 	mul.w	r3, r1, r3
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d306      	bcc.n	800a406 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800a3f8:	4b20      	ldr	r3, [pc, #128]	; (800a47c <Send_Data_to_Other+0xa8>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800a400:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <Send_Data_to_Other+0xa8>)
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800a406:	4b1b      	ldr	r3, [pc, #108]	; (800a474 <Send_Data_to_Other+0xa0>)
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f002 f86a 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a410:	4602      	mov	r2, r0
 800a412:	4b19      	ldr	r3, [pc, #100]	; (800a478 <Send_Data_to_Other+0xa4>)
 800a414:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a418:	429a      	cmp	r2, r3
 800a41a:	d90e      	bls.n	800a43a <Send_Data_to_Other+0x66>
 800a41c:	4b15      	ldr	r3, [pc, #84]	; (800a474 <Send_Data_to_Other+0xa0>)
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	4b17      	ldr	r3, [pc, #92]	; (800a480 <Send_Data_to_Other+0xac>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	429a      	cmp	r2, r3
 800a426:	d008      	beq.n	800a43a <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a428:	4b12      	ldr	r3, [pc, #72]	; (800a474 <Send_Data_to_Other+0xa0>)
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4a14      	ldr	r2, [pc, #80]	; (800a480 <Send_Data_to_Other+0xac>)
 800a42e:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a430:	f240 2001 	movw	r0, #513	; 0x201
 800a434:	f002 fe16 	bl	800d064 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800a438:	e01a      	b.n	800a470 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800a43a:	4b12      	ldr	r3, [pc, #72]	; (800a484 <Send_Data_to_Other+0xb0>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f002 f850 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a444:	4603      	mov	r3, r0
 800a446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a44a:	d911      	bls.n	800a470 <Send_Data_to_Other+0x9c>
 800a44c:	4b09      	ldr	r3, [pc, #36]	; (800a474 <Send_Data_to_Other+0xa0>)
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	4618      	mov	r0, r3
 800a452:	f002 f847 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a456:	4603      	mov	r3, r0
 800a458:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a45c:	d908      	bls.n	800a470 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800a45e:	f008 fec3 	bl	80131e8 <HAL_GetTick>
 800a462:	4603      	mov	r3, r0
 800a464:	4a07      	ldr	r2, [pc, #28]	; (800a484 <Send_Data_to_Other+0xb0>)
 800a466:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a468:	f240 2001 	movw	r0, #513	; 0x201
 800a46c:	f002 fdfa 	bl	800d064 <TransmitCanPkt>
}
 800a470:	bf00      	nop
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200026a0 	.word	0x200026a0
 800a478:	20000304 	.word	0x20000304
 800a47c:	200026b0 	.word	0x200026b0
 800a480:	20002864 	.word	0x20002864
 800a484:	20002868 	.word	0x20002868

0800a488 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800a488:	b5b0      	push	{r4, r5, r7, lr}
 800a48a:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 800a48c:	499a      	ldr	r1, [pc, #616]	; (800a6f8 <Process_Data_from_Other+0x270>)
 800a48e:	489b      	ldr	r0, [pc, #620]	; (800a6fc <Process_Data_from_Other+0x274>)
 800a490:	f7f5 fed6 	bl	8000240 <strcmp>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 812b 	beq.w	800a6f2 <Process_Data_from_Other+0x26a>
	{
		return;
	}


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800a49c:	4b98      	ldr	r3, [pc, #608]	; (800a700 <Process_Data_from_Other+0x278>)
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	4b98      	ldr	r3, [pc, #608]	; (800a704 <Process_Data_from_Other+0x27c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d109      	bne.n	800a4bc <Process_Data_from_Other+0x34>
 800a4a8:	4b95      	ldr	r3, [pc, #596]	; (800a700 <Process_Data_from_Other+0x278>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f002 f819 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4b8:	f0c0 80e4 	bcc.w	800a684 <Process_Data_from_Other+0x1fc>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800a4bc:	f008 fe94 	bl	80131e8 <HAL_GetTick>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	4a8f      	ldr	r2, [pc, #572]	; (800a700 <Process_Data_from_Other+0x278>)
 800a4c4:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800a4c6:	4b90      	ldr	r3, [pc, #576]	; (800a708 <Process_Data_from_Other+0x280>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d007      	beq.n	800a4de <Process_Data_from_Other+0x56>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800a4ce:	4b8f      	ldr	r3, [pc, #572]	; (800a70c <Process_Data_from_Other+0x284>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	f043 0301 	orr.w	r3, r3, #1
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	4b8c      	ldr	r3, [pc, #560]	; (800a70c <Process_Data_from_Other+0x284>)
 800a4da:	701a      	strb	r2, [r3, #0]
 800a4dc:	e006      	b.n	800a4ec <Process_Data_from_Other+0x64>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800a4de:	4b8b      	ldr	r3, [pc, #556]	; (800a70c <Process_Data_from_Other+0x284>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	4b88      	ldr	r3, [pc, #544]	; (800a70c <Process_Data_from_Other+0x284>)
 800a4ea:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800a4ec:	4b88      	ldr	r3, [pc, #544]	; (800a710 <Process_Data_from_Other+0x288>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <Process_Data_from_Other+0x7c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800a4f4:	4b85      	ldr	r3, [pc, #532]	; (800a70c <Process_Data_from_Other+0x284>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	f043 0302 	orr.w	r3, r3, #2
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	4b83      	ldr	r3, [pc, #524]	; (800a70c <Process_Data_from_Other+0x284>)
 800a500:	701a      	strb	r2, [r3, #0]
 800a502:	e006      	b.n	800a512 <Process_Data_from_Other+0x8a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800a504:	4b81      	ldr	r3, [pc, #516]	; (800a70c <Process_Data_from_Other+0x284>)
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	f023 0302 	bic.w	r3, r3, #2
 800a50c:	b2da      	uxtb	r2, r3
 800a50e:	4b7f      	ldr	r3, [pc, #508]	; (800a70c <Process_Data_from_Other+0x284>)
 800a510:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800a512:	4b7e      	ldr	r3, [pc, #504]	; (800a70c <Process_Data_from_Other+0x284>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b03      	cmp	r3, #3
 800a518:	f200 809a 	bhi.w	800a650 <Process_Data_from_Other+0x1c8>
 800a51c:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <Process_Data_from_Other+0x9c>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a535 	.word	0x0800a535
 800a528:	0800a5c5 	.word	0x0800a5c5
 800a52c:	0800a543 	.word	0x0800a543
 800a530:	0800a615 	.word	0x0800a615
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a534:	4b74      	ldr	r3, [pc, #464]	; (800a708 <Process_Data_from_Other+0x280>)
 800a536:	785b      	ldrb	r3, [r3, #1]
 800a538:	3301      	adds	r3, #1
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	4b72      	ldr	r3, [pc, #456]	; (800a708 <Process_Data_from_Other+0x280>)
 800a53e:	705a      	strb	r2, [r3, #1]
			break;
 800a540:	e086      	b.n	800a650 <Process_Data_from_Other+0x1c8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a542:	4b73      	ldr	r3, [pc, #460]	; (800a710 <Process_Data_from_Other+0x288>)
 800a544:	685a      	ldr	r2, [r3, #4]
 800a546:	4b70      	ldr	r3, [pc, #448]	; (800a708 <Process_Data_from_Other+0x280>)
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d02f      	beq.n	800a5ae <Process_Data_from_Other+0x126>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800a54e:	4b71      	ldr	r3, [pc, #452]	; (800a714 <Process_Data_from_Other+0x28c>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d179      	bne.n	800a64a <Process_Data_from_Other+0x1c2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800a556:	4b6c      	ldr	r3, [pc, #432]	; (800a708 <Process_Data_from_Other+0x280>)
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4619      	mov	r1, r3
 800a55c:	486e      	ldr	r0, [pc, #440]	; (800a718 <Process_Data_from_Other+0x290>)
 800a55e:	f015 fe4d 	bl	80201fc <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800a562:	4b6b      	ldr	r3, [pc, #428]	; (800a710 <Process_Data_from_Other+0x288>)
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	4619      	mov	r1, r3
 800a568:	486c      	ldr	r0, [pc, #432]	; (800a71c <Process_Data_from_Other+0x294>)
 800a56a:	f015 fe47 	bl	80201fc <iprintf>
					Received_CAN_Relay_Status=NO;
 800a56e:	4b69      	ldr	r3, [pc, #420]	; (800a714 <Process_Data_from_Other+0x28c>)
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800a574:	486a      	ldr	r0, [pc, #424]	; (800a720 <Process_Data_from_Other+0x298>)
 800a576:	f015 fedd 	bl	8020334 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a57a:	4a6a      	ldr	r2, [pc, #424]	; (800a724 <Process_Data_from_Other+0x29c>)
 800a57c:	4b6a      	ldr	r3, [pc, #424]	; (800a728 <Process_Data_from_Other+0x2a0>)
 800a57e:	4610      	mov	r0, r2
 800a580:	4619      	mov	r1, r3
 800a582:	2384      	movs	r3, #132	; 0x84
 800a584:	461a      	mov	r2, r3
 800a586:	f015 fd29 	bl	801ffdc <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800a58a:	4a68      	ldr	r2, [pc, #416]	; (800a72c <Process_Data_from_Other+0x2a4>)
 800a58c:	4b65      	ldr	r3, [pc, #404]	; (800a724 <Process_Data_from_Other+0x29c>)
 800a58e:	4614      	mov	r4, r2
 800a590:	461d      	mov	r5, r3
 800a592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a59a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a59c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a59e:	682b      	ldr	r3, [r5, #0]
 800a5a0:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a5a2:	4b60      	ldr	r3, [pc, #384]	; (800a724 <Process_Data_from_Other+0x29c>)
 800a5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5a8:	4a57      	ldr	r2, [pc, #348]	; (800a708 <Process_Data_from_Other+0x280>)
 800a5aa:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800a5ac:	e04d      	b.n	800a64a <Process_Data_from_Other+0x1c2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a5ae:	4b56      	ldr	r3, [pc, #344]	; (800a708 <Process_Data_from_Other+0x280>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a5b4:	4b5e      	ldr	r3, [pc, #376]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	f023 0301 	bic.w	r3, r3, #1
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	4b5c      	ldr	r3, [pc, #368]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a5c0:	701a      	strb	r2, [r3, #0]
			break;
 800a5c2:	e042      	b.n	800a64a <Process_Data_from_Other+0x1c2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a5c4:	4b52      	ldr	r3, [pc, #328]	; (800a710 <Process_Data_from_Other+0x288>)
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	4b4f      	ldr	r3, [pc, #316]	; (800a708 <Process_Data_from_Other+0x280>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d016      	beq.n	800a5fe <Process_Data_from_Other+0x176>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a5d0:	4858      	ldr	r0, [pc, #352]	; (800a734 <Process_Data_from_Other+0x2ac>)
 800a5d2:	f015 feaf 	bl	8020334 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a5d6:	4b4c      	ldr	r3, [pc, #304]	; (800a708 <Process_Data_from_Other+0x280>)
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	4b4a      	ldr	r3, [pc, #296]	; (800a708 <Process_Data_from_Other+0x280>)
 800a5e0:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800a5e2:	4b49      	ldr	r3, [pc, #292]	; (800a708 <Process_Data_from_Other+0x280>)
 800a5e4:	785b      	ldrb	r3, [r3, #1]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d931      	bls.n	800a64e <Process_Data_from_Other+0x1c6>
 800a5ea:	4b4e      	ldr	r3, [pc, #312]	; (800a724 <Process_Data_from_Other+0x29c>)
 800a5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d02c      	beq.n	800a64e <Process_Data_from_Other+0x1c6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800a5f4:	f240 2007 	movw	r0, #519	; 0x207
 800a5f8:	f002 fd34 	bl	800d064 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a5fc:	e027      	b.n	800a64e <Process_Data_from_Other+0x1c6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a5fe:	4b4c      	ldr	r3, [pc, #304]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	f023 0301 	bic.w	r3, r3, #1
 800a606:	b2da      	uxtb	r2, r3
 800a608:	4b49      	ldr	r3, [pc, #292]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a60a:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a60c:	4b3e      	ldr	r3, [pc, #248]	; (800a708 <Process_Data_from_Other+0x280>)
 800a60e:	2200      	movs	r2, #0
 800a610:	705a      	strb	r2, [r3, #1]
			break;
 800a612:	e01c      	b.n	800a64e <Process_Data_from_Other+0x1c6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a614:	4b3e      	ldr	r3, [pc, #248]	; (800a710 <Process_Data_from_Other+0x288>)
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	4b3b      	ldr	r3, [pc, #236]	; (800a708 <Process_Data_from_Other+0x280>)
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d009      	beq.n	800a634 <Process_Data_from_Other+0x1ac>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a620:	4844      	ldr	r0, [pc, #272]	; (800a734 <Process_Data_from_Other+0x2ac>)
 800a622:	f015 fe87 	bl	8020334 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a626:	4b38      	ldr	r3, [pc, #224]	; (800a708 <Process_Data_from_Other+0x280>)
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	3301      	adds	r3, #1
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	4b36      	ldr	r3, [pc, #216]	; (800a708 <Process_Data_from_Other+0x280>)
 800a630:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a632:	e00d      	b.n	800a650 <Process_Data_from_Other+0x1c8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a634:	4b3e      	ldr	r3, [pc, #248]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	f023 0301 	bic.w	r3, r3, #1
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	4b3c      	ldr	r3, [pc, #240]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a640:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a642:	4b31      	ldr	r3, [pc, #196]	; (800a708 <Process_Data_from_Other+0x280>)
 800a644:	2200      	movs	r2, #0
 800a646:	705a      	strb	r2, [r3, #1]
			break;
 800a648:	e002      	b.n	800a650 <Process_Data_from_Other+0x1c8>
			break;
 800a64a:	bf00      	nop
 800a64c:	e000      	b.n	800a650 <Process_Data_from_Other+0x1c8>
			break;
 800a64e:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a650:	4b2d      	ldr	r3, [pc, #180]	; (800a708 <Process_Data_from_Other+0x280>)
 800a652:	785a      	ldrb	r2, [r3, #1]
 800a654:	4b38      	ldr	r3, [pc, #224]	; (800a738 <Process_Data_from_Other+0x2b0>)
 800a656:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d312      	bcc.n	800a684 <Process_Data_from_Other+0x1fc>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a65e:	4b34      	ldr	r3, [pc, #208]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10c      	bne.n	800a684 <Process_Data_from_Other+0x1fc>
			{
				printf("MisMatch Count Reached\n");
 800a66a:	4834      	ldr	r0, [pc, #208]	; (800a73c <Process_Data_from_Other+0x2b4>)
 800a66c:	f015 fe62 	bl	8020334 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a670:	4b25      	ldr	r3, [pc, #148]	; (800a708 <Process_Data_from_Other+0x280>)
 800a672:	2200      	movs	r2, #0
 800a674:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a676:	4b2e      	ldr	r3, [pc, #184]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	f043 0301 	orr.w	r3, r3, #1
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	4b2b      	ldr	r3, [pc, #172]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a682:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800a684:	4b1f      	ldr	r3, [pc, #124]	; (800a704 <Process_Data_from_Other+0x27c>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 ff2b 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a68e:	4602      	mov	r2, r0
 800a690:	4b29      	ldr	r3, [pc, #164]	; (800a738 <Process_Data_from_Other+0x2b0>)
 800a692:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a696:	429a      	cmp	r2, r3
 800a698:	d92c      	bls.n	800a6f4 <Process_Data_from_Other+0x26c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800a69a:	4b29      	ldr	r3, [pc, #164]	; (800a740 <Process_Data_from_Other+0x2b8>)
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	4b19      	ldr	r3, [pc, #100]	; (800a704 <Process_Data_from_Other+0x27c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d026      	beq.n	800a6f4 <Process_Data_from_Other+0x26c>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800a6a6:	4b17      	ldr	r3, [pc, #92]	; (800a704 <Process_Data_from_Other+0x27c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a25      	ldr	r2, [pc, #148]	; (800a740 <Process_Data_from_Other+0x2b8>)
 800a6ac:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800a6ae:	4b15      	ldr	r3, [pc, #84]	; (800a704 <Process_Data_from_Other+0x27c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f001 ff16 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	4a22      	ldr	r2, [pc, #136]	; (800a744 <Process_Data_from_Other+0x2bc>)
 800a6bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c0:	099b      	lsrs	r3, r3, #6
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4820      	ldr	r0, [pc, #128]	; (800a748 <Process_Data_from_Other+0x2c0>)
 800a6c6:	f015 fd99 	bl	80201fc <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800a6ca:	4b0e      	ldr	r3, [pc, #56]	; (800a704 <Process_Data_from_Other+0x27c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	481e      	ldr	r0, [pc, #120]	; (800a74c <Process_Data_from_Other+0x2c4>)
 800a6d2:	f015 fd93 	bl	80201fc <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a6d6:	4b16      	ldr	r3, [pc, #88]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d108      	bne.n	800a6f4 <Process_Data_from_Other+0x26c>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a6e2:	4b13      	ldr	r3, [pc, #76]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	f043 0302 	orr.w	r3, r3, #2
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	4b10      	ldr	r3, [pc, #64]	; (800a730 <Process_Data_from_Other+0x2a8>)
 800a6ee:	701a      	strb	r2, [r3, #0]
 800a6f0:	e000      	b.n	800a6f4 <Process_Data_from_Other+0x26c>
		return;
 800a6f2:	bf00      	nop
			}
		}
	}
}
 800a6f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	08023090 	.word	0x08023090
 800a6fc:	20000305 	.word	0x20000305
 800a700:	2000286c 	.word	0x2000286c
 800a704:	20002158 	.word	0x20002158
 800a708:	200026b0 	.word	0x200026b0
 800a70c:	20002156 	.word	0x20002156
 800a710:	200026b8 	.word	0x200026b8
 800a714:	20002155 	.word	0x20002155
 800a718:	0802331c 	.word	0x0802331c
 800a71c:	08023334 	.word	0x08023334
 800a720:	0802334c 	.word	0x0802334c
 800a724:	200026c8 	.word	0x200026c8
 800a728:	2000274c 	.word	0x2000274c
 800a72c:	2000266c 	.word	0x2000266c
 800a730:	200026a0 	.word	0x200026a0
 800a734:	08023380 	.word	0x08023380
 800a738:	20000304 	.word	0x20000304
 800a73c:	080233a4 	.word	0x080233a4
 800a740:	20002870 	.word	0x20002870
 800a744:	10624dd3 	.word	0x10624dd3
 800a748:	080233bc 	.word	0x080233bc
 800a74c:	080233ec 	.word	0x080233ec

0800a750 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a754:	482a      	ldr	r0, [pc, #168]	; (800a800 <Print_Medha_Self_Details+0xb0>)
 800a756:	f015 fded 	bl	8020334 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800a75a:	4b2a      	ldr	r3, [pc, #168]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a75c:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a760:	4619      	mov	r1, r3
 800a762:	4829      	ldr	r0, [pc, #164]	; (800a808 <Print_Medha_Self_Details+0xb8>)
 800a764:	f015 fd4a 	bl	80201fc <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800a768:	4b26      	ldr	r3, [pc, #152]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a76a:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a76e:	4619      	mov	r1, r3
 800a770:	4826      	ldr	r0, [pc, #152]	; (800a80c <Print_Medha_Self_Details+0xbc>)
 800a772:	f015 fd43 	bl	80201fc <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800a776:	4b23      	ldr	r3, [pc, #140]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a778:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a77c:	4619      	mov	r1, r3
 800a77e:	4824      	ldr	r0, [pc, #144]	; (800a810 <Print_Medha_Self_Details+0xc0>)
 800a780:	f015 fd3c 	bl	80201fc <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800a784:	4b1f      	ldr	r3, [pc, #124]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a786:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800a78a:	4619      	mov	r1, r3
 800a78c:	4821      	ldr	r0, [pc, #132]	; (800a814 <Print_Medha_Self_Details+0xc4>)
 800a78e:	f015 fd35 	bl	80201fc <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800a792:	4b1c      	ldr	r3, [pc, #112]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a794:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a798:	4619      	mov	r1, r3
 800a79a:	481f      	ldr	r0, [pc, #124]	; (800a818 <Print_Medha_Self_Details+0xc8>)
 800a79c:	f015 fd2e 	bl	80201fc <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800a7a0:	4b18      	ldr	r3, [pc, #96]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a7a2:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	481c      	ldr	r0, [pc, #112]	; (800a81c <Print_Medha_Self_Details+0xcc>)
 800a7aa:	f015 fd27 	bl	80201fc <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800a7ae:	4b15      	ldr	r3, [pc, #84]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a7b0:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	481a      	ldr	r0, [pc, #104]	; (800a820 <Print_Medha_Self_Details+0xd0>)
 800a7b8:	f015 fd20 	bl	80201fc <iprintf>
//	EI_data.Medha_Prms_st.NoofRelays = 81;
	printf("NoofRelays                    :%u\n",EI_data.Medha_Prms_st.NoofRelays);
 800a7bc:	4b11      	ldr	r3, [pc, #68]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a7be:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	4817      	ldr	r0, [pc, #92]	; (800a824 <Print_Medha_Self_Details+0xd4>)
 800a7c6:	f015 fd19 	bl	80201fc <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a7cc:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4815      	ldr	r0, [pc, #84]	; (800a828 <Print_Medha_Self_Details+0xd8>)
 800a7d4:	f015 fd12 	bl	80201fc <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a7da:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4812      	ldr	r0, [pc, #72]	; (800a82c <Print_Medha_Self_Details+0xdc>)
 800a7e2:	f015 fd0b 	bl	80201fc <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800a7e6:	4b07      	ldr	r3, [pc, #28]	; (800a804 <Print_Medha_Self_Details+0xb4>)
 800a7e8:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4810      	ldr	r0, [pc, #64]	; (800a830 <Print_Medha_Self_Details+0xe0>)
 800a7f0:	f015 fd04 	bl	80201fc <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a7f4:	4802      	ldr	r0, [pc, #8]	; (800a800 <Print_Medha_Self_Details+0xb0>)
 800a7f6:	f015 fd9d 	bl	8020334 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800a7fa:	bf00      	nop
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	08023414 	.word	0x08023414
 800a804:	20000304 	.word	0x20000304
 800a808:	08023468 	.word	0x08023468
 800a80c:	0802348c 	.word	0x0802348c
 800a810:	080234b0 	.word	0x080234b0
 800a814:	080234d4 	.word	0x080234d4
 800a818:	080234f8 	.word	0x080234f8
 800a81c:	0802351c 	.word	0x0802351c
 800a820:	08023540 	.word	0x08023540
 800a824:	08023564 	.word	0x08023564
 800a828:	08023588 	.word	0x08023588
 800a82c:	080235ac 	.word	0x080235ac
 800a830:	080235d0 	.word	0x080235d0

0800a834 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b09a      	sub	sp, #104	; 0x68
 800a838:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800a83a:	2300      	movs	r3, #0
 800a83c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800a84c:	2300      	movs	r3, #0
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	1d3b      	adds	r3, r7, #4
 800a852:	2260      	movs	r2, #96	; 0x60
 800a854:	2100      	movs	r1, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f015 fbe8 	bl	802002c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800a85c:	4bb9      	ldr	r3, [pc, #740]	; (800ab44 <CheckforMedhaCMD+0x310>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4618      	mov	r0, r3
 800a862:	f001 fe3f 	bl	800c4e4 <HAL_Elaps_Ticks>
 800a866:	4603      	mov	r3, r0
 800a868:	2b09      	cmp	r3, #9
 800a86a:	f240 81ad 	bls.w	800abc8 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800a86e:	e010      	b.n	800a892 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800a870:	2000      	movs	r0, #0
 800a872:	f008 f991 	bl	8012b98 <Com_Get_Byte>
 800a876:	4603      	mov	r3, r0
 800a878:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800a87c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800a886:	3368      	adds	r3, #104	; 0x68
 800a888:	443b      	add	r3, r7
 800a88a:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a88e:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800a892:	2000      	movs	r0, #0
 800a894:	f008 f940 	bl	8012b18 <Com_DataReady>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e8      	bne.n	800a870 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800a89e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 8144 	beq.w	800ab30 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800a8a8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a8ac:	3368      	adds	r3, #104	; 0x68
 800a8ae:	443b      	add	r3, r7
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	48a3      	ldr	r0, [pc, #652]	; (800ab48 <CheckforMedhaCMD+0x314>)
 800a8bc:	f015 fc9e 	bl	80201fc <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800a8c0:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a8c4:	463b      	mov	r3, r7
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fa0d 	bl	800ace8 <Is_MedhaCommand_Valid>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b0c      	cmp	r3, #12
 800a8d2:	f200 8129 	bhi.w	800ab28 <CheckforMedhaCMD+0x2f4>
 800a8d6:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <CheckforMedhaCMD+0xa8>)
 800a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8dc:	0800a911 	.word	0x0800a911
 800a8e0:	0800a91f 	.word	0x0800a91f
 800a8e4:	0800a983 	.word	0x0800a983
 800a8e8:	0800a9a5 	.word	0x0800a9a5
 800a8ec:	0800a9cd 	.word	0x0800a9cd
 800a8f0:	0800a9f5 	.word	0x0800a9f5
 800a8f4:	0800aa1d 	.word	0x0800aa1d
 800a8f8:	0800aa45 	.word	0x0800aa45
 800a8fc:	0800aa6d 	.word	0x0800aa6d
 800a900:	0800aa95 	.word	0x0800aa95
 800a904:	0800aabd 	.word	0x0800aabd
 800a908:	0800aae5 	.word	0x0800aae5
 800a90c:	0800ab0d 	.word	0x0800ab0d
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800a910:	4b8e      	ldr	r3, [pc, #568]	; (800ab4c <CheckforMedhaCMD+0x318>)
 800a912:	2201      	movs	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800a916:	488e      	ldr	r0, [pc, #568]	; (800ab50 <CheckforMedhaCMD+0x31c>)
 800a918:	f015 fd0c 	bl	8020334 <puts>
				break;
 800a91c:	e109      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800a91e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a922:	3b01      	subs	r3, #1
 800a924:	3368      	adds	r3, #104	; 0x68
 800a926:	443b      	add	r3, r7
 800a928:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a92c:	3b30      	subs	r3, #48	; 0x30
 800a92e:	461a      	mov	r2, r3
 800a930:	4988      	ldr	r1, [pc, #544]	; (800ab54 <CheckforMedhaCMD+0x320>)
 800a932:	4889      	ldr	r0, [pc, #548]	; (800ab58 <CheckforMedhaCMD+0x324>)
 800a934:	f015 fc62 	bl	80201fc <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800a938:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a93c:	3b01      	subs	r3, #1
 800a93e:	3368      	adds	r3, #104	; 0x68
 800a940:	443b      	add	r3, r7
 800a942:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a946:	2b2f      	cmp	r3, #47	; 0x2f
 800a948:	d914      	bls.n	800a974 <CheckforMedhaCMD+0x140>
 800a94a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a94e:	3b01      	subs	r3, #1
 800a950:	3368      	adds	r3, #104	; 0x68
 800a952:	443b      	add	r3, r7
 800a954:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a958:	2b32      	cmp	r3, #50	; 0x32
 800a95a:	d80b      	bhi.n	800a974 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800a95c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a960:	3b01      	subs	r3, #1
 800a962:	3368      	adds	r3, #104	; 0x68
 800a964:	443b      	add	r3, r7
 800a966:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a96a:	3b30      	subs	r3, #48	; 0x30
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	4b7b      	ldr	r3, [pc, #492]	; (800ab5c <CheckforMedhaCMD+0x328>)
 800a970:	701a      	strb	r2, [r3, #0]
 800a972:	e002      	b.n	800a97a <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800a974:	487a      	ldr	r0, [pc, #488]	; (800ab60 <CheckforMedhaCMD+0x32c>)
 800a976:	f015 fcdd 	bl	8020334 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800a97a:	2301      	movs	r3, #1
 800a97c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a980:	e0d7      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800a982:	4978      	ldr	r1, [pc, #480]	; (800ab64 <CheckforMedhaCMD+0x330>)
 800a984:	4878      	ldr	r0, [pc, #480]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800a986:	f015 fc39 	bl	80201fc <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800a98a:	4878      	ldr	r0, [pc, #480]	; (800ab6c <CheckforMedhaCMD+0x338>)
 800a98c:	f015 fcd2 	bl	8020334 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a990:	4b77      	ldr	r3, [pc, #476]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f043 0301 	orr.w	r3, r3, #1
 800a998:	4a75      	ldr	r2, [pc, #468]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800a99a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a99c:	2301      	movs	r3, #1
 800a99e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9a2:	e0c6      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800a9a4:	4973      	ldr	r1, [pc, #460]	; (800ab74 <CheckforMedhaCMD+0x340>)
 800a9a6:	4870      	ldr	r0, [pc, #448]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800a9a8:	f015 fc28 	bl	80201fc <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800a9ac:	4872      	ldr	r0, [pc, #456]	; (800ab78 <CheckforMedhaCMD+0x344>)
 800a9ae:	f015 fcc1 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a9b2:	4b6f      	ldr	r3, [pc, #444]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a9b8:	4b6d      	ldr	r3, [pc, #436]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f043 0302 	orr.w	r3, r3, #2
 800a9c0:	4a6b      	ldr	r2, [pc, #428]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800a9c2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9ca:	e0b2      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800a9cc:	496b      	ldr	r1, [pc, #428]	; (800ab7c <CheckforMedhaCMD+0x348>)
 800a9ce:	4866      	ldr	r0, [pc, #408]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800a9d0:	f015 fc14 	bl	80201fc <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800a9d4:	486a      	ldr	r0, [pc, #424]	; (800ab80 <CheckforMedhaCMD+0x34c>)
 800a9d6:	f015 fcad 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a9da:	4b65      	ldr	r3, [pc, #404]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a9e0:	4b63      	ldr	r3, [pc, #396]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f043 0304 	orr.w	r3, r3, #4
 800a9e8:	4a61      	ldr	r2, [pc, #388]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800a9ea:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9f2:	e09e      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800a9f4:	4963      	ldr	r1, [pc, #396]	; (800ab84 <CheckforMedhaCMD+0x350>)
 800a9f6:	485c      	ldr	r0, [pc, #368]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800a9f8:	f015 fc00 	bl	80201fc <iprintf>
				printf("INVALID_DES_PORT\n");
 800a9fc:	4862      	ldr	r0, [pc, #392]	; (800ab88 <CheckforMedhaCMD+0x354>)
 800a9fe:	f015 fc99 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa02:	4b5b      	ldr	r3, [pc, #364]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa08:	4b59      	ldr	r3, [pc, #356]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f043 0308 	orr.w	r3, r3, #8
 800aa10:	4a57      	ldr	r2, [pc, #348]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa12:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa1a:	e08a      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800aa1c:	495b      	ldr	r1, [pc, #364]	; (800ab8c <CheckforMedhaCMD+0x358>)
 800aa1e:	4852      	ldr	r0, [pc, #328]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800aa20:	f015 fbec 	bl	80201fc <iprintf>
				printf("INVALID_SRC_PORT\n");
 800aa24:	485a      	ldr	r0, [pc, #360]	; (800ab90 <CheckforMedhaCMD+0x35c>)
 800aa26:	f015 fc85 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa2a:	4b51      	ldr	r3, [pc, #324]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa30:	4b4f      	ldr	r3, [pc, #316]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f043 0310 	orr.w	r3, r3, #16
 800aa38:	4a4d      	ldr	r2, [pc, #308]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa3a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa42:	e076      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800aa44:	4953      	ldr	r1, [pc, #332]	; (800ab94 <CheckforMedhaCMD+0x360>)
 800aa46:	4848      	ldr	r0, [pc, #288]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800aa48:	f015 fbd8 	bl	80201fc <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800aa4c:	4852      	ldr	r0, [pc, #328]	; (800ab98 <CheckforMedhaCMD+0x364>)
 800aa4e:	f015 fc71 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa52:	4b47      	ldr	r3, [pc, #284]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa58:	4b45      	ldr	r3, [pc, #276]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f043 0320 	orr.w	r3, r3, #32
 800aa60:	4a43      	ldr	r2, [pc, #268]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa62:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa6a:	e062      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800aa6c:	494b      	ldr	r1, [pc, #300]	; (800ab9c <CheckforMedhaCMD+0x368>)
 800aa6e:	484c      	ldr	r0, [pc, #304]	; (800aba0 <CheckforMedhaCMD+0x36c>)
 800aa70:	f015 fbc4 	bl	80201fc <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800aa74:	484b      	ldr	r0, [pc, #300]	; (800aba4 <CheckforMedhaCMD+0x370>)
 800aa76:	f015 fc5d 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa7a:	4b3d      	ldr	r3, [pc, #244]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa80:	4b3b      	ldr	r3, [pc, #236]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa88:	4a39      	ldr	r2, [pc, #228]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aa8a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa92:	e04e      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800aa94:	4944      	ldr	r1, [pc, #272]	; (800aba8 <CheckforMedhaCMD+0x374>)
 800aa96:	4834      	ldr	r0, [pc, #208]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800aa98:	f015 fbb0 	bl	80201fc <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800aa9c:	4843      	ldr	r0, [pc, #268]	; (800abac <CheckforMedhaCMD+0x378>)
 800aa9e:	f015 fc49 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aaa2:	4b33      	ldr	r3, [pc, #204]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aaa8:	4b31      	ldr	r3, [pc, #196]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab0:	4a2f      	ldr	r2, [pc, #188]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aab2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aab4:	2301      	movs	r3, #1
 800aab6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aaba:	e03a      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800aabc:	493c      	ldr	r1, [pc, #240]	; (800abb0 <CheckforMedhaCMD+0x37c>)
 800aabe:	482a      	ldr	r0, [pc, #168]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800aac0:	f015 fb9c 	bl	80201fc <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800aac4:	483b      	ldr	r0, [pc, #236]	; (800abb4 <CheckforMedhaCMD+0x380>)
 800aac6:	f015 fc35 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aaca:	4b29      	ldr	r3, [pc, #164]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aad0:	4b27      	ldr	r3, [pc, #156]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aad8:	4a25      	ldr	r2, [pc, #148]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aada:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aadc:	2301      	movs	r3, #1
 800aade:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aae2:	e026      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800aae4:	4934      	ldr	r1, [pc, #208]	; (800abb8 <CheckforMedhaCMD+0x384>)
 800aae6:	4820      	ldr	r0, [pc, #128]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800aae8:	f015 fb88 	bl	80201fc <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800aaec:	4833      	ldr	r0, [pc, #204]	; (800abbc <CheckforMedhaCMD+0x388>)
 800aaee:	f015 fc21 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aaf2:	4b1f      	ldr	r3, [pc, #124]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aaf8:	4b1d      	ldr	r3, [pc, #116]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab00:	4a1b      	ldr	r2, [pc, #108]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800ab02:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab04:	2301      	movs	r3, #1
 800ab06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab0a:	e012      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800ab0c:	492c      	ldr	r1, [pc, #176]	; (800abc0 <CheckforMedhaCMD+0x38c>)
 800ab0e:	4816      	ldr	r0, [pc, #88]	; (800ab68 <CheckforMedhaCMD+0x334>)
 800ab10:	f015 fb74 	bl	80201fc <iprintf>
				printf("CLEAR ALL\n");
 800ab14:	482b      	ldr	r0, [pc, #172]	; (800abc4 <CheckforMedhaCMD+0x390>)
 800ab16:	f015 fc0d 	bl	8020334 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab1a:	4b15      	ldr	r3, [pc, #84]	; (800ab70 <CheckforMedhaCMD+0x33c>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab20:	2301      	movs	r3, #1
 800ab22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab26:	e004      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800ab28:	480d      	ldr	r0, [pc, #52]	; (800ab60 <CheckforMedhaCMD+0x32c>)
 800ab2a:	f015 fc03 	bl	8020334 <puts>
 800ab2e:	e000      	b.n	800ab32 <CheckforMedhaCMD+0x2fe>
			}
		}
 800ab30:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800ab32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d147      	bne.n	800abca <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800ab3a:	f240 2005 	movw	r0, #517	; 0x205
 800ab3e:	f002 fa91 	bl	800d064 <TransmitCanPkt>
 800ab42:	e042      	b.n	800abca <CheckforMedhaCMD+0x396>
 800ab44:	20009410 	.word	0x20009410
 800ab48:	080235f4 	.word	0x080235f4
 800ab4c:	20000644 	.word	0x20000644
 800ab50:	0802360c 	.word	0x0802360c
 800ab54:	2000218e 	.word	0x2000218e
 800ab58:	0802364c 	.word	0x0802364c
 800ab5c:	20000645 	.word	0x20000645
 800ab60:	08023660 	.word	0x08023660
 800ab64:	200021c0 	.word	0x200021c0
 800ab68:	0802367c 	.word	0x0802367c
 800ab6c:	0802368c 	.word	0x0802368c
 800ab70:	2000289c 	.word	0x2000289c
 800ab74:	200021f2 	.word	0x200021f2
 800ab78:	080236a4 	.word	0x080236a4
 800ab7c:	20002224 	.word	0x20002224
 800ab80:	080236bc 	.word	0x080236bc
 800ab84:	20002256 	.word	0x20002256
 800ab88:	080236d0 	.word	0x080236d0
 800ab8c:	20002288 	.word	0x20002288
 800ab90:	080236e4 	.word	0x080236e4
 800ab94:	200022ba 	.word	0x200022ba
 800ab98:	080236f8 	.word	0x080236f8
 800ab9c:	200022ec 	.word	0x200022ec
 800aba0:	08023714 	.word	0x08023714
 800aba4:	0802372c 	.word	0x0802372c
 800aba8:	2000231e 	.word	0x2000231e
 800abac:	08023740 	.word	0x08023740
 800abb0:	20002350 	.word	0x20002350
 800abb4:	08023758 	.word	0x08023758
 800abb8:	20002382 	.word	0x20002382
 800abbc:	08023778 	.word	0x08023778
 800abc0:	200023b4 	.word	0x200023b4
 800abc4:	08023798 	.word	0x08023798
		return;
 800abc8:	bf00      	nop
		}
	}
}
 800abca:	3768      	adds	r7, #104	; 0x68
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	4a3d      	ldr	r2, [pc, #244]	; (800acd4 <Update_MedhaCommands+0x104>)
 800abde:	2132      	movs	r1, #50	; 0x32
 800abe0:	fb01 f303 	mul.w	r3, r1, r3
 800abe4:	4413      	add	r3, r2
 800abe6:	2224      	movs	r2, #36	; 0x24
 800abe8:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	4a39      	ldr	r2, [pc, #228]	; (800acd4 <Update_MedhaCommands+0x104>)
 800abee:	2132      	movs	r1, #50	; 0x32
 800abf0:	fb01 f303 	mul.w	r3, r1, r3
 800abf4:	4413      	add	r3, r2
 800abf6:	3301      	adds	r3, #1
 800abf8:	2201      	movs	r2, #1
 800abfa:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800abfc:	79fb      	ldrb	r3, [r7, #7]
 800abfe:	4a35      	ldr	r2, [pc, #212]	; (800acd4 <Update_MedhaCommands+0x104>)
 800ac00:	2132      	movs	r1, #50	; 0x32
 800ac02:	fb01 f303 	mul.w	r3, r1, r3
 800ac06:	4413      	add	r3, r2
 800ac08:	3302      	adds	r3, #2
 800ac0a:	2230      	movs	r2, #48	; 0x30
 800ac0c:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	4a30      	ldr	r2, [pc, #192]	; (800acd4 <Update_MedhaCommands+0x104>)
 800ac12:	2132      	movs	r1, #50	; 0x32
 800ac14:	fb01 f303 	mul.w	r3, r1, r3
 800ac18:	4413      	add	r3, r2
 800ac1a:	3303      	adds	r3, #3
 800ac1c:	2240      	movs	r2, #64	; 0x40
 800ac1e:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	4a2c      	ldr	r2, [pc, #176]	; (800acd4 <Update_MedhaCommands+0x104>)
 800ac24:	2132      	movs	r1, #50	; 0x32
 800ac26:	fb01 f303 	mul.w	r3, r1, r3
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	22c0      	movs	r2, #192	; 0xc0
 800ac30:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800ac32:	79fb      	ldrb	r3, [r7, #7]
 800ac34:	4a27      	ldr	r2, [pc, #156]	; (800acd4 <Update_MedhaCommands+0x104>)
 800ac36:	2132      	movs	r1, #50	; 0x32
 800ac38:	fb01 f303 	mul.w	r3, r1, r3
 800ac3c:	4413      	add	r3, r2
 800ac3e:	3305      	adds	r3, #5
 800ac40:	224e      	movs	r2, #78	; 0x4e
 800ac42:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800ac44:	79fb      	ldrb	r3, [r7, #7]
 800ac46:	4a23      	ldr	r2, [pc, #140]	; (800acd4 <Update_MedhaCommands+0x104>)
 800ac48:	2132      	movs	r1, #50	; 0x32
 800ac4a:	fb01 f303 	mul.w	r3, r1, r3
 800ac4e:	4413      	add	r3, r2
 800ac50:	3306      	adds	r3, #6
 800ac52:	2226      	movs	r2, #38	; 0x26
 800ac54:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800ac5c:	79fb      	ldrb	r3, [r7, #7]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	71fa      	strb	r2, [r7, #7]
 800ac62:	461a      	mov	r2, r3
 800ac64:	2332      	movs	r3, #50	; 0x32
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	4a1a      	ldr	r2, [pc, #104]	; (800acd4 <Update_MedhaCommands+0x104>)
 800ac6c:	4413      	add	r3, r2
 800ac6e:	491a      	ldr	r1, [pc, #104]	; (800acd8 <Update_MedhaCommands+0x108>)
 800ac70:	461a      	mov	r2, r3
 800ac72:	460b      	mov	r3, r1
 800ac74:	cb03      	ldmia	r3!, {r0, r1}
 800ac76:	6010      	str	r0, [r2, #0]
 800ac78:	6051      	str	r1, [r2, #4]
 800ac7a:	8819      	ldrh	r1, [r3, #0]
 800ac7c:	789b      	ldrb	r3, [r3, #2]
 800ac7e:	8111      	strh	r1, [r2, #8]
 800ac80:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	1c5a      	adds	r2, r3, #1
 800ac86:	71fa      	strb	r2, [r7, #7]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	2332      	movs	r3, #50	; 0x32
 800ac8c:	fb02 f303 	mul.w	r3, r2, r3
 800ac90:	4a10      	ldr	r2, [pc, #64]	; (800acd4 <Update_MedhaCommands+0x104>)
 800ac92:	4413      	add	r3, r2
 800ac94:	4911      	ldr	r1, [pc, #68]	; (800acdc <Update_MedhaCommands+0x10c>)
 800ac96:	461a      	mov	r2, r3
 800ac98:	460b      	mov	r3, r1
 800ac9a:	cb03      	ldmia	r3!, {r0, r1}
 800ac9c:	6010      	str	r0, [r2, #0]
 800ac9e:	6051      	str	r1, [r2, #4]
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	1c5a      	adds	r2, r3, #1
 800aca8:	71fa      	strb	r2, [r7, #7]
 800acaa:	461a      	mov	r2, r3
 800acac:	2332      	movs	r3, #50	; 0x32
 800acae:	fb02 f303 	mul.w	r3, r2, r3
 800acb2:	4a08      	ldr	r2, [pc, #32]	; (800acd4 <Update_MedhaCommands+0x104>)
 800acb4:	4413      	add	r3, r2
 800acb6:	4a0a      	ldr	r2, [pc, #40]	; (800ace0 <Update_MedhaCommands+0x110>)
 800acb8:	6810      	ldr	r0, [r2, #0]
 800acba:	6018      	str	r0, [r3, #0]
 800acbc:	7912      	ldrb	r2, [r2, #4]
 800acbe:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800acc0:	4a08      	ldr	r2, [pc, #32]	; (800ace4 <Update_MedhaCommands+0x114>)
 800acc2:	79fb      	ldrb	r3, [r7, #7]
 800acc4:	7013      	strb	r3, [r2, #0]
}
 800acc6:	bf00      	nop
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	2000215c 	.word	0x2000215c
 800acd8:	080237a4 	.word	0x080237a4
 800acdc:	080237b0 	.word	0x080237b0
 800ace0:	080237bc 	.word	0x080237bc
 800ace4:	20002544 	.word	0x20002544

0800ace8 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800ace8:	b590      	push	{r4, r7, lr}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]
 800acf8:	e01c      	b.n	800ad34 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	2232      	movs	r2, #50	; 0x32
 800acfe:	fb02 f303 	mul.w	r3, r2, r3
 800ad02:	4a11      	ldr	r2, [pc, #68]	; (800ad48 <Is_MedhaCommand_Valid+0x60>)
 800ad04:	189c      	adds	r4, r3, r2
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
 800ad08:	2232      	movs	r2, #50	; 0x32
 800ad0a:	fb02 f303 	mul.w	r3, r2, r3
 800ad0e:	4a0e      	ldr	r2, [pc, #56]	; (800ad48 <Is_MedhaCommand_Valid+0x60>)
 800ad10:	4413      	add	r3, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f5 fa9e 	bl	8000254 <strlen>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f015 f94c 	bl	801ffbc <memcmp>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	e008      	b.n	800ad40 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ad2e:	7bfb      	ldrb	r3, [r7, #15]
 800ad30:	3301      	adds	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
 800ad34:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <Is_MedhaCommand_Valid+0x64>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	7bfa      	ldrb	r2, [r7, #15]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d3dd      	bcc.n	800acfa <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800ad3e:	23ff      	movs	r3, #255	; 0xff
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd90      	pop	{r4, r7, pc}
 800ad48:	2000215c 	.word	0x2000215c
 800ad4c:	20002544 	.word	0x20002544

0800ad50 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	6039      	str	r1, [r7, #0]
 800ad5a:	80fb      	strh	r3, [r7, #6]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	60fb      	str	r3, [r7, #12]





	for(i = us_Start ;i < us_End;i++)
 800ad6c:	88fb      	ldrh	r3, [r7, #6]
 800ad6e:	613b      	str	r3, [r7, #16]
 800ad70:	e015      	b.n	800ad9e <GetCRC32+0x4e>
	{
//		printf("0x%02X ",ucPtr[i]);
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	440b      	add	r3, r1
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	4053      	eors	r3, r2
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	0a1b      	lsrs	r3, r3, #8
 800ad88:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800ad8a:	4a0a      	ldr	r2, [pc, #40]	; (800adb4 <GetCRC32+0x64>)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4053      	eors	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	613b      	str	r3, [r7, #16]
 800ad9e:	88bb      	ldrh	r3, [r7, #4]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d3e5      	bcc.n	800ad72 <GetCRC32+0x22>
	}
//	printf("\n");

	return Crc;
 800ada6:	697b      	ldr	r3, [r7, #20]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	371c      	adds	r7, #28
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	080264f8 	.word	0x080264f8

0800adb8 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	4603      	mov	r3, r0
 800adc0:	6039      	str	r1, [r7, #0]
 800adc2:	80fb      	strh	r3, [r7, #6]
 800adc4:	4613      	mov	r3, r2
 800adc6:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800add0:	88ba      	ldrh	r2, [r7, #4]
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff ffba 	bl	800ad50 <GetCRC32>
 800addc:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800adde:	88bb      	ldrh	r3, [r7, #4]
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	4413      	add	r3, r2
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	429a      	cmp	r2, r3
 800adee:	d101      	bne.n	800adf4 <CheckCRC32+0x3c>
	{
		return OK;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e009      	b.n	800ae08 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	4619      	mov	r1, r3
 800adf8:	4805      	ldr	r0, [pc, #20]	; (800ae10 <CheckCRC32+0x58>)
 800adfa:	f015 f9ff 	bl	80201fc <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800adfe:	68f9      	ldr	r1, [r7, #12]
 800ae00:	4804      	ldr	r0, [pc, #16]	; (800ae14 <CheckCRC32+0x5c>)
 800ae02:	f015 f9fb 	bl	80201fc <iprintf>
		return NOT_OK;
 800ae06:	2300      	movs	r3, #0
	}

}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	080237c4 	.word	0x080237c4
 800ae14:	080237dc 	.word	0x080237dc

0800ae18 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	f107 0310 	add.w	r3, r7, #16
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	f107 010c 	add.w	r1, r7, #12
 800ae38:	220a      	movs	r2, #10
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 f846 	bl	800aecc <ReadAndFormMsg>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dd34      	ble.n	800aeb0 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800ae46:	7b7b      	ldrb	r3, [r7, #13]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d115      	bne.n	800ae78 <CheckForRqst+0x60>
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d112      	bne.n	800ae78 <CheckForRqst+0x60>
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d10f      	bne.n	800ae78 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800ae58:	4818      	ldr	r0, [pc, #96]	; (800aebc <CheckForRqst+0xa4>)
 800ae5a:	f015 fa6b 	bl	8020334 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	2202      	movs	r2, #2
 800ae62:	2101      	movs	r1, #1
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 f933 	bl	800b0d0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800ae6a:	f008 f9bd 	bl	80131e8 <HAL_GetTick>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	4a13      	ldr	r2, [pc, #76]	; (800aec0 <CheckForRqst+0xa8>)
 800ae72:	6013      	str	r3, [r2, #0]
			return 0x01;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e01c      	b.n	800aeb2 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800ae78:	7b7b      	ldrb	r3, [r7, #13]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d115      	bne.n	800aeaa <CheckForRqst+0x92>
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d112      	bne.n	800aeaa <CheckForRqst+0x92>
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d10f      	bne.n	800aeaa <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800ae8a:	480e      	ldr	r0, [pc, #56]	; (800aec4 <CheckForRqst+0xac>)
 800ae8c:	f015 fa52 	bl	8020334 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	2202      	movs	r2, #2
 800ae94:	2102      	movs	r1, #2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 f91a 	bl	800b0d0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800ae9c:	f008 f9a4 	bl	80131e8 <HAL_GetTick>
 800aea0:	4603      	mov	r3, r0
 800aea2:	4a07      	ldr	r2, [pc, #28]	; (800aec0 <CheckForRqst+0xa8>)
 800aea4:	6013      	str	r3, [r2, #0]
			return 0x02;
 800aea6:	2302      	movs	r3, #2
 800aea8:	e003      	b.n	800aeb2 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800aeaa:	4807      	ldr	r0, [pc, #28]	; (800aec8 <CheckForRqst+0xb0>)
 800aeac:	f015 fa42 	bl	8020334 <puts>
	}
	return 0x00;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3718      	adds	r7, #24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	080237f4 	.word	0x080237f4
 800aec0:	20000a4c 	.word	0x20000a4c
 800aec4:	0802380c 	.word	0x0802380c
 800aec8:	08023824 	.word	0x08023824

0800aecc <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800aecc:	b590      	push	{r4, r7, lr}
 800aece:	b087      	sub	sp, #28
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	4603      	mov	r3, r0
 800aed4:	6039      	str	r1, [r7, #0]
 800aed6:	80fb      	strh	r3, [r7, #6]
 800aed8:	4613      	mov	r3, r2
 800aeda:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800aee0:	2300      	movs	r3, #0
 800aee2:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800aee4:	2300      	movs	r3, #0
 800aee6:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800aee8:	e0d4      	b.n	800b094 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800aeea:	4b71      	ldr	r3, [pc, #452]	; (800b0b0 <ReadAndFormMsg+0x1e4>)
 800aeec:	2201      	movs	r2, #1
 800aeee:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800aef0:	4870      	ldr	r0, [pc, #448]	; (800b0b4 <ReadAndFormMsg+0x1e8>)
 800aef2:	f00b fcdf 	bl	80168b4 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	4618      	mov	r0, r3
 800aefc:	f007 fe4c 	bl	8012b98 <Com_Get_Byte>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800af04:	f007 ff5e 	bl	8012dc4 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800af08:	4b6b      	ldr	r3, [pc, #428]	; (800b0b8 <ReadAndFormMsg+0x1ec>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b03      	cmp	r3, #3
 800af0e:	f000 8099 	beq.w	800b044 <ReadAndFormMsg+0x178>
 800af12:	2b03      	cmp	r3, #3
 800af14:	f300 80b0 	bgt.w	800b078 <ReadAndFormMsg+0x1ac>
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d002      	beq.n	800af22 <ReadAndFormMsg+0x56>
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d00e      	beq.n	800af3e <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800af20:	e0aa      	b.n	800b078 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800af22:	7bfb      	ldrb	r3, [r7, #15]
 800af24:	2b24      	cmp	r3, #36	; 0x24
 800af26:	f040 80a9 	bne.w	800b07c <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	7bfa      	ldrb	r2, [r7, #15]
 800af2e:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800af30:	4b62      	ldr	r3, [pc, #392]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800af32:	2201      	movs	r2, #1
 800af34:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800af36:	4b60      	ldr	r3, [pc, #384]	; (800b0b8 <ReadAndFormMsg+0x1ec>)
 800af38:	2202      	movs	r2, #2
 800af3a:	701a      	strb	r2, [r3, #0]
			break;
 800af3c:	e09e      	b.n	800b07c <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	2b26      	cmp	r3, #38	; 0x26
 800af42:	d006      	beq.n	800af52 <ReadAndFormMsg+0x86>
 800af44:	2b26      	cmp	r3, #38	; 0x26
 800af46:	dc6e      	bgt.n	800b026 <ReadAndFormMsg+0x15a>
 800af48:	2b05      	cmp	r3, #5
 800af4a:	d068      	beq.n	800b01e <ReadAndFormMsg+0x152>
 800af4c:	2b24      	cmp	r3, #36	; 0x24
 800af4e:	d05c      	beq.n	800b00a <ReadAndFormMsg+0x13e>
 800af50:	e069      	b.n	800b026 <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800af52:	4b5a      	ldr	r3, [pc, #360]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	3b02      	subs	r3, #2
 800af58:	b29b      	uxth	r3, r3
 800af5a:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800af5c:	4b57      	ldr	r3, [pc, #348]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800af62:	4b56      	ldr	r3, [pc, #344]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800af64:	2200      	movs	r2, #0
 800af66:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800af68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	da01      	bge.n	800af74 <ReadAndFormMsg+0xa8>
					return 0;
 800af70:	2300      	movs	r3, #0
 800af72:	e099      	b.n	800b0a8 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800af74:	4b50      	ldr	r3, [pc, #320]	; (800b0b8 <ReadAndFormMsg+0x1ec>)
 800af76:	2201      	movs	r2, #1
 800af78:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800af7a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800af7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	4413      	add	r3, r2
 800af86:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800af88:	461c      	mov	r4, r3
 800af8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800af8e:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800af90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800af94:	3301      	adds	r3, #1
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	4413      	add	r3, r2
 800af9a:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	4603      	mov	r3, r0
 800afa0:	4622      	mov	r2, r4
 800afa2:	4847      	ldr	r0, [pc, #284]	; (800b0c0 <ReadAndFormMsg+0x1f4>)
 800afa4:	f015 f92a 	bl	80201fc <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800afa8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afac:	4619      	mov	r1, r3
 800afae:	6838      	ldr	r0, [r7, #0]
 800afb0:	f005 fbe8 	bl	8010784 <CheckCRC>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d012      	beq.n	800afe0 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800afba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	4413      	add	r3, r2
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	4619      	mov	r1, r3
 800afc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afca:	3301      	adds	r3, #1
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	4413      	add	r3, r2
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	483b      	ldr	r0, [pc, #236]	; (800b0c4 <ReadAndFormMsg+0x1f8>)
 800afd6:	f015 f911 	bl	80201fc <iprintf>
					return us_ReturnBytes;
 800afda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800afde:	e063      	b.n	800b0a8 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800afe0:	4839      	ldr	r0, [pc, #228]	; (800b0c8 <ReadAndFormMsg+0x1fc>)
 800afe2:	f015 f90b 	bl	80201fc <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800afe6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	4413      	add	r3, r2
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	4619      	mov	r1, r3
 800aff2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aff6:	3301      	adds	r3, #1
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	4413      	add	r3, r2
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	4832      	ldr	r0, [pc, #200]	; (800b0cc <ReadAndFormMsg+0x200>)
 800b002:	f015 f8fb 	bl	80201fc <iprintf>
					return 0;
 800b006:	2300      	movs	r3, #0
 800b008:	e04e      	b.n	800b0a8 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	7bfa      	ldrb	r2, [r7, #15]
 800b00e:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800b010:	4b2a      	ldr	r3, [pc, #168]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b012:	2201      	movs	r2, #1
 800b014:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b016:	4b28      	ldr	r3, [pc, #160]	; (800b0b8 <ReadAndFormMsg+0x1ec>)
 800b018:	2202      	movs	r2, #2
 800b01a:	701a      	strb	r2, [r3, #0]
				break;
 800b01c:	e011      	b.n	800b042 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800b01e:	4b26      	ldr	r3, [pc, #152]	; (800b0b8 <ReadAndFormMsg+0x1ec>)
 800b020:	2203      	movs	r2, #3
 800b022:	701a      	strb	r2, [r3, #0]
				break;
 800b024:	e00d      	b.n	800b042 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800b026:	4b25      	ldr	r3, [pc, #148]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	4413      	add	r3, r2
 800b030:	7bfa      	ldrb	r2, [r7, #15]
 800b032:	701a      	strb	r2, [r3, #0]
				j++;
 800b034:	4b21      	ldr	r3, [pc, #132]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	3301      	adds	r3, #1
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	4b1f      	ldr	r3, [pc, #124]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b03e:	801a      	strh	r2, [r3, #0]
				break;
 800b040:	bf00      	nop
			break;
 800b042:	e01c      	b.n	800b07e <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	2b24      	cmp	r3, #36	; 0x24
 800b048:	d005      	beq.n	800b056 <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	2b26      	cmp	r3, #38	; 0x26
 800b04e:	d002      	beq.n	800b056 <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	2b05      	cmp	r3, #5
 800b054:	d10c      	bne.n	800b070 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800b056:	4b19      	ldr	r3, [pc, #100]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	4413      	add	r3, r2
 800b060:	7bfa      	ldrb	r2, [r7, #15]
 800b062:	701a      	strb	r2, [r3, #0]
					j++;
 800b064:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	3301      	adds	r3, #1
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b06e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b070:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <ReadAndFormMsg+0x1ec>)
 800b072:	2202      	movs	r2, #2
 800b074:	701a      	strb	r2, [r3, #0]
				break;
 800b076:	e002      	b.n	800b07e <ReadAndFormMsg+0x1b2>
				break;
 800b078:	bf00      	nop
 800b07a:	e000      	b.n	800b07e <ReadAndFormMsg+0x1b2>
			break;
 800b07c:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800b07e:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	88ba      	ldrh	r2, [r7, #4]
 800b084:	429a      	cmp	r2, r3
 800b086:	d805      	bhi.n	800b094 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800b088:	4b0b      	ldr	r3, [pc, #44]	; (800b0b8 <ReadAndFormMsg+0x1ec>)
 800b08a:	2201      	movs	r2, #1
 800b08c:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800b08e:	4b0b      	ldr	r3, [pc, #44]	; (800b0bc <ReadAndFormMsg+0x1f0>)
 800b090:	2200      	movs	r2, #0
 800b092:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b094:	88fb      	ldrh	r3, [r7, #6]
 800b096:	b2db      	uxtb	r3, r3
 800b098:	4618      	mov	r0, r3
 800b09a:	f007 fd3d 	bl	8012b18 <Com_DataReady>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f47f af22 	bne.w	800aeea <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd90      	pop	{r4, r7, pc}
 800b0b0:	20000a4a 	.word	0x20000a4a
 800b0b4:	20009078 	.word	0x20009078
 800b0b8:	20000117 	.word	0x20000117
 800b0bc:	20002874 	.word	0x20002874
 800b0c0:	08023834 	.word	0x08023834
 800b0c4:	0802385c 	.word	0x0802385c
 800b0c8:	08023870 	.word	0x08023870
 800b0cc:	0802387c 	.word	0x0802387c

0800b0d0 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	71fb      	strb	r3, [r7, #7]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	71bb      	strb	r3, [r7, #6]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60bb      	str	r3, [r7, #8]
 800b0ea:	f107 030c 	add.w	r3, r7, #12
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800b0f4:	2324      	movs	r3, #36	; 0x24
 800b0f6:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800b0f8:	79bb      	ldrb	r3, [r7, #6]
 800b0fa:	121b      	asrs	r3, r3, #8
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800b100:	79bb      	ldrb	r3, [r7, #6]
 800b102:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800b104:	797b      	ldrb	r3, [r7, #5]
 800b106:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800b108:	f107 0308 	add.w	r3, r7, #8
 800b10c:	2104      	movs	r1, #4
 800b10e:	4618      	mov	r0, r3
 800b110:	f005 fbe2 	bl	80108d8 <ComputeCRC>
	puc_Message[6]= '&';
 800b114:	2326      	movs	r3, #38	; 0x26
 800b116:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800b118:	7b3b      	ldrb	r3, [r7, #12]
 800b11a:	4619      	mov	r1, r3
 800b11c:	7b7b      	ldrb	r3, [r7, #13]
 800b11e:	461a      	mov	r2, r3
 800b120:	480f      	ldr	r0, [pc, #60]	; (800b160 <SendAck+0x90>)
 800b122:	f015 f86b 	bl	80201fc <iprintf>

	AckTim=HAL_GetTick();
 800b126:	f008 f85f 	bl	80131e8 <HAL_GetTick>
 800b12a:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b12c:	e002      	b.n	800b134 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800b12e:	480d      	ldr	r0, [pc, #52]	; (800b164 <SendAck+0x94>)
 800b130:	f00b fbc0 	bl	80168b4 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b134:	6978      	ldr	r0, [r7, #20]
 800b136:	f001 f9d5 	bl	800c4e4 <HAL_Elaps_Ticks>
 800b13a:	4603      	mov	r3, r0
 800b13c:	f240 52db 	movw	r2, #1499	; 0x5db
 800b140:	4293      	cmp	r3, r2
 800b142:	d9f4      	bls.n	800b12e <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800b144:	f107 0108 	add.w	r1, r7, #8
 800b148:	79fb      	ldrb	r3, [r7, #7]
 800b14a:	2206      	movs	r2, #6
 800b14c:	4618      	mov	r0, r3
 800b14e:	f007 fda3 	bl	8012c98 <CommTransmitMessage>

	AckTim = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	617b      	str	r3, [r7, #20]
}
 800b156:	bf00      	nop
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	08023888 	.word	0x08023888
 800b164:	20009078 	.word	0x20009078

0800b168 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	6039      	str	r1, [r7, #0]
 800b172:	80fb      	strh	r3, [r7, #6]
 800b174:	4613      	mov	r3, r2
 800b176:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800b178:	2300      	movs	r3, #0
 800b17a:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800b17c:	2300      	movs	r3, #0
 800b17e:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800b180:	2300      	movs	r3, #0
 800b182:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800b184:	e0ba      	b.n	800b2fc <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800b186:	88fb      	ldrh	r3, [r7, #6]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	4618      	mov	r0, r3
 800b18c:	f007 fd04 	bl	8012b98 <Com_Get_Byte>
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800b194:	f007 fe16 	bl	8012dc4 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800b198:	485f      	ldr	r0, [pc, #380]	; (800b318 <ReadAndFormConfig+0x1b0>)
 800b19a:	f00b fb8b 	bl	80168b4 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800b19e:	4b5f      	ldr	r3, [pc, #380]	; (800b31c <ReadAndFormConfig+0x1b4>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	f000 8082 	beq.w	800b2ac <ReadAndFormConfig+0x144>
 800b1a8:	2b03      	cmp	r3, #3
 800b1aa:	f300 8099 	bgt.w	800b2e0 <ReadAndFormConfig+0x178>
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d002      	beq.n	800b1b8 <ReadAndFormConfig+0x50>
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d00e      	beq.n	800b1d4 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800b1b6:	e093      	b.n	800b2e0 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ba:	2b24      	cmp	r3, #36	; 0x24
 800b1bc:	f040 8092 	bne.w	800b2e4 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	7bfa      	ldrb	r2, [r7, #15]
 800b1c4:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b1c6:	4b56      	ldr	r3, [pc, #344]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b1cc:	4b53      	ldr	r3, [pc, #332]	; (800b31c <ReadAndFormConfig+0x1b4>)
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	701a      	strb	r2, [r3, #0]
			break;
 800b1d2:	e087      	b.n	800b2e4 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
 800b1d6:	2b26      	cmp	r3, #38	; 0x26
 800b1d8:	d006      	beq.n	800b1e8 <ReadAndFormConfig+0x80>
 800b1da:	2b26      	cmp	r3, #38	; 0x26
 800b1dc:	dc57      	bgt.n	800b28e <ReadAndFormConfig+0x126>
 800b1de:	2b05      	cmp	r3, #5
 800b1e0:	d051      	beq.n	800b286 <ReadAndFormConfig+0x11e>
 800b1e2:	2b24      	cmp	r3, #36	; 0x24
 800b1e4:	d045      	beq.n	800b272 <ReadAndFormConfig+0x10a>
 800b1e6:	e052      	b.n	800b28e <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800b1e8:	4b4d      	ldr	r3, [pc, #308]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b1ea:	881b      	ldrh	r3, [r3, #0]
 800b1ec:	3b02      	subs	r3, #2
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800b1f2:	4b4b      	ldr	r3, [pc, #300]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800b1f8:	4b49      	ldr	r3, [pc, #292]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800b1fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	da01      	bge.n	800b20a <ReadAndFormConfig+0xa2>
					return 0;
 800b206:	2300      	movs	r3, #0
 800b208:	e082      	b.n	800b310 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800b20a:	4b44      	ldr	r3, [pc, #272]	; (800b31c <ReadAndFormConfig+0x1b4>)
 800b20c:	2201      	movs	r2, #1
 800b20e:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b210:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b214:	4619      	mov	r1, r3
 800b216:	6838      	ldr	r0, [r7, #0]
 800b218:	f005 fab4 	bl	8010784 <CheckCRC>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d012      	beq.n	800b248 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b222:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	4413      	add	r3, r2
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	4619      	mov	r1, r3
 800b22e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b232:	3301      	adds	r3, #1
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	4413      	add	r3, r2
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	4839      	ldr	r0, [pc, #228]	; (800b324 <ReadAndFormConfig+0x1bc>)
 800b23e:	f014 ffdd 	bl	80201fc <iprintf>
					return us_ReturnBytes;
 800b242:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b246:	e063      	b.n	800b310 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800b248:	4837      	ldr	r0, [pc, #220]	; (800b328 <ReadAndFormConfig+0x1c0>)
 800b24a:	f014 ffd7 	bl	80201fc <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b24e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	4413      	add	r3, r2
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	4619      	mov	r1, r3
 800b25a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b25e:	3301      	adds	r3, #1
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	4413      	add	r3, r2
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	4830      	ldr	r0, [pc, #192]	; (800b32c <ReadAndFormConfig+0x1c4>)
 800b26a:	f014 ffc7 	bl	80201fc <iprintf>
					return 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	e04e      	b.n	800b310 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	7bfa      	ldrb	r2, [r7, #15]
 800b276:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b278:	4b29      	ldr	r3, [pc, #164]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b27a:	2201      	movs	r2, #1
 800b27c:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b27e:	4b27      	ldr	r3, [pc, #156]	; (800b31c <ReadAndFormConfig+0x1b4>)
 800b280:	2202      	movs	r2, #2
 800b282:	701a      	strb	r2, [r3, #0]
				break;
 800b284:	e011      	b.n	800b2aa <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800b286:	4b25      	ldr	r3, [pc, #148]	; (800b31c <ReadAndFormConfig+0x1b4>)
 800b288:	2203      	movs	r2, #3
 800b28a:	701a      	strb	r2, [r3, #0]
				break;
 800b28c:	e00d      	b.n	800b2aa <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800b28e:	4b24      	ldr	r3, [pc, #144]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b290:	881b      	ldrh	r3, [r3, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	4413      	add	r3, r2
 800b298:	7bfa      	ldrb	r2, [r7, #15]
 800b29a:	701a      	strb	r2, [r3, #0]
				i++;
 800b29c:	4b20      	ldr	r3, [pc, #128]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b2a6:	801a      	strh	r2, [r3, #0]
				break;
 800b2a8:	bf00      	nop
			break;
 800b2aa:	e01c      	b.n	800b2e6 <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	2b24      	cmp	r3, #36	; 0x24
 800b2b0:	d005      	beq.n	800b2be <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
 800b2b4:	2b26      	cmp	r3, #38	; 0x26
 800b2b6:	d002      	beq.n	800b2be <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	2b05      	cmp	r3, #5
 800b2bc:	d10c      	bne.n	800b2d8 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800b2be:	4b18      	ldr	r3, [pc, #96]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	7bfa      	ldrb	r2, [r7, #15]
 800b2ca:	701a      	strb	r2, [r3, #0]
					i++;
 800b2cc:	4b14      	ldr	r3, [pc, #80]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b2ce:	881b      	ldrh	r3, [r3, #0]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	4b12      	ldr	r3, [pc, #72]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b2d6:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b2d8:	4b10      	ldr	r3, [pc, #64]	; (800b31c <ReadAndFormConfig+0x1b4>)
 800b2da:	2202      	movs	r2, #2
 800b2dc:	701a      	strb	r2, [r3, #0]
				break;
 800b2de:	e002      	b.n	800b2e6 <ReadAndFormConfig+0x17e>
				break;
 800b2e0:	bf00      	nop
 800b2e2:	e000      	b.n	800b2e6 <ReadAndFormConfig+0x17e>
			break;
 800b2e4:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800b2e6:	4b0e      	ldr	r3, [pc, #56]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	88ba      	ldrh	r2, [r7, #4]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d805      	bhi.n	800b2fc <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800b2f0:	4b0a      	ldr	r3, [pc, #40]	; (800b31c <ReadAndFormConfig+0x1b4>)
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800b2f6:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <ReadAndFormConfig+0x1b8>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b2fc:	88fb      	ldrh	r3, [r7, #6]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	4618      	mov	r0, r3
 800b302:	f007 fc09 	bl	8012b18 <Com_DataReady>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f47f af3c 	bne.w	800b186 <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20009078 	.word	0x20009078
 800b31c:	20000118 	.word	0x20000118
 800b320:	20002876 	.word	0x20002876
 800b324:	080238a4 	.word	0x080238a4
 800b328:	08023870 	.word	0x08023870
 800b32c:	080238b8 	.word	0x080238b8

0800b330 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	4603      	mov	r3, r0
 800b338:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800b33a:	79fb      	ldrb	r3, [r7, #7]
 800b33c:	091b      	lsrs	r3, r3, #4
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	461a      	mov	r2, r3
 800b342:	0092      	lsls	r2, r2, #2
 800b344:	4413      	add	r3, r2
 800b346:	005b      	lsls	r3, r3, #1
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	f003 030f 	and.w	r3, r3, #15
 800b350:	b2db      	uxtb	r3, r3
 800b352:	4413      	add	r3, r2
 800b354:	b2db      	uxtb	r3, r3
}
 800b356:	4618      	mov	r0, r3
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
	...

0800b364 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800b36e:	79fb      	ldrb	r3, [r7, #7]
 800b370:	4a0d      	ldr	r2, [pc, #52]	; (800b3a8 <Dec_to_BCD+0x44>)
 800b372:	fba2 2303 	umull	r2, r3, r2, r3
 800b376:	08db      	lsrs	r3, r3, #3
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	b2d8      	uxtb	r0, r3
 800b37e:	79fa      	ldrb	r2, [r7, #7]
 800b380:	4b09      	ldr	r3, [pc, #36]	; (800b3a8 <Dec_to_BCD+0x44>)
 800b382:	fba3 1302 	umull	r1, r3, r3, r2
 800b386:	08d9      	lsrs	r1, r3, #3
 800b388:	460b      	mov	r3, r1
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	440b      	add	r3, r1
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	b2db      	uxtb	r3, r3
 800b394:	4403      	add	r3, r0
 800b396:	71fb      	strb	r3, [r7, #7]
	return c;
 800b398:	79fb      	ldrb	r3, [r7, #7]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	cccccccd 	.word	0xcccccccd

0800b3ac <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <Is_GPS_Valid+0x34>)
 800b3b2:	795b      	ldrb	r3, [r3, #5]
 800b3b4:	2b09      	cmp	r3, #9
 800b3b6:	d801      	bhi.n	800b3bc <Is_GPS_Valid+0x10>
	{
		return 0;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	e00c      	b.n	800b3d6 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800b3bc:	4b08      	ldr	r3, [pc, #32]	; (800b3e0 <Is_GPS_Valid+0x34>)
 800b3be:	791b      	ldrb	r3, [r3, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d101      	bne.n	800b3c8 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	e006      	b.n	800b3d6 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800b3c8:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <Is_GPS_Valid+0x34>)
 800b3ca:	78db      	ldrb	r3, [r3, #3]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <Is_GPS_Valid+0x28>
	{
		return 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e000      	b.n	800b3d6 <Is_GPS_Valid+0x2a>
	}
	return 1;
 800b3d4:	2301      	movs	r3, #1
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	20002878 	.word	0x20002878

0800b3e4 <Write_RTC>:


void Write_RTC(void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	603b      	str	r3, [r7, #0]
 800b3ee:	1d3b      	adds	r3, r7, #4
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	460a      	mov	r2, r1
 800b3f4:	801a      	strh	r2, [r3, #0]
 800b3f6:	460a      	mov	r2, r1
 800b3f8:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800b3fa:	f7ff ffd7 	bl	800b3ac <Is_GPS_Valid>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d103      	bne.n	800b40c <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800b404:	4844      	ldr	r0, [pc, #272]	; (800b518 <Write_RTC+0x134>)
 800b406:	f014 ff95 	bl	8020334 <puts>
 800b40a:	e081      	b.n	800b510 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800b40c:	4b43      	ldr	r3, [pc, #268]	; (800b51c <Write_RTC+0x138>)
 800b40e:	2201      	movs	r2, #1
 800b410:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800b412:	4b43      	ldr	r3, [pc, #268]	; (800b520 <Write_RTC+0x13c>)
 800b414:	789b      	ldrb	r3, [r3, #2]
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff ffa4 	bl	800b364 <Dec_to_BCD>
 800b41c:	4603      	mov	r3, r0
 800b41e:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800b420:	4b3f      	ldr	r3, [pc, #252]	; (800b520 <Write_RTC+0x13c>)
 800b422:	785b      	ldrb	r3, [r3, #1]
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff ff9d 	bl	800b364 <Dec_to_BCD>
 800b42a:	4603      	mov	r3, r0
 800b42c:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800b42e:	4b3c      	ldr	r3, [pc, #240]	; (800b520 <Write_RTC+0x13c>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff ff96 	bl	800b364 <Dec_to_BCD>
 800b438:	4603      	mov	r3, r0
 800b43a:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800b43c:	4b38      	ldr	r3, [pc, #224]	; (800b520 <Write_RTC+0x13c>)
 800b43e:	78db      	ldrb	r3, [r3, #3]
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff ff8f 	bl	800b364 <Dec_to_BCD>
 800b446:	4603      	mov	r3, r0
 800b448:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800b44a:	4b35      	ldr	r3, [pc, #212]	; (800b520 <Write_RTC+0x13c>)
 800b44c:	791b      	ldrb	r3, [r3, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff ff88 	bl	800b364 <Dec_to_BCD>
 800b454:	4603      	mov	r3, r0
 800b456:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800b458:	4b31      	ldr	r3, [pc, #196]	; (800b520 <Write_RTC+0x13c>)
 800b45a:	795b      	ldrb	r3, [r3, #5]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff ff81 	bl	800b364 <Dec_to_BCD>
 800b462:	4603      	mov	r3, r0
 800b464:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800b466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b46a:	9302      	str	r3, [sp, #8]
 800b46c:	2301      	movs	r3, #1
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	463b      	mov	r3, r7
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	2301      	movs	r3, #1
 800b476:	2200      	movs	r2, #0
 800b478:	21d0      	movs	r1, #208	; 0xd0
 800b47a:	482a      	ldr	r0, [pc, #168]	; (800b524 <Write_RTC+0x140>)
 800b47c:	f00a fc6c 	bl	8015d58 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800b480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b484:	9302      	str	r3, [sp, #8]
 800b486:	2301      	movs	r3, #1
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	463b      	mov	r3, r7
 800b48c:	3301      	adds	r3, #1
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	2301      	movs	r3, #1
 800b492:	2201      	movs	r2, #1
 800b494:	21d0      	movs	r1, #208	; 0xd0
 800b496:	4823      	ldr	r0, [pc, #140]	; (800b524 <Write_RTC+0x140>)
 800b498:	f00a fc5e 	bl	8015d58 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800b49c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4a0:	9302      	str	r3, [sp, #8]
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	3302      	adds	r3, #2
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	21d0      	movs	r1, #208	; 0xd0
 800b4b2:	481c      	ldr	r0, [pc, #112]	; (800b524 <Write_RTC+0x140>)
 800b4b4:	f00a fc50 	bl	8015d58 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800b4b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4bc:	9302      	str	r3, [sp, #8]
 800b4be:	2301      	movs	r3, #1
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	463b      	mov	r3, r7
 800b4c4:	3303      	adds	r3, #3
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	2204      	movs	r2, #4
 800b4cc:	21d0      	movs	r1, #208	; 0xd0
 800b4ce:	4815      	ldr	r0, [pc, #84]	; (800b524 <Write_RTC+0x140>)
 800b4d0:	f00a fc42 	bl	8015d58 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800b4d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4d8:	9302      	str	r3, [sp, #8]
 800b4da:	2301      	movs	r3, #1
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	463b      	mov	r3, r7
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	2205      	movs	r2, #5
 800b4e8:	21d0      	movs	r1, #208	; 0xd0
 800b4ea:	480e      	ldr	r0, [pc, #56]	; (800b524 <Write_RTC+0x140>)
 800b4ec:	f00a fc34 	bl	8015d58 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800b4f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4f4:	9302      	str	r3, [sp, #8]
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	3305      	adds	r3, #5
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	2301      	movs	r3, #1
 800b502:	2206      	movs	r2, #6
 800b504:	21d0      	movs	r1, #208	; 0xd0
 800b506:	4807      	ldr	r0, [pc, #28]	; (800b524 <Write_RTC+0x140>)
 800b508:	f00a fc26 	bl	8015d58 <HAL_I2C_Mem_Write>

	Get_time();
 800b50c:	f000 f80c 	bl	800b528 <Get_time>

}
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	08023918 	.word	0x08023918
 800b51c:	20000e6c 	.word	0x20000e6c
 800b520:	20002878 	.word	0x20002878
 800b524:	20008fd0 	.word	0x20008fd0

0800b528 <Get_time>:


void Get_time(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800b52e:	463b      	mov	r3, r7
 800b530:	2207      	movs	r2, #7
 800b532:	2100      	movs	r1, #0
 800b534:	4618      	mov	r0, r3
 800b536:	f014 fd79 	bl	802002c <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800b53a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b53e:	9302      	str	r3, [sp, #8]
 800b540:	2307      	movs	r3, #7
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	463b      	mov	r3, r7
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	2301      	movs	r3, #1
 800b54a:	2200      	movs	r2, #0
 800b54c:	21d0      	movs	r1, #208	; 0xd0
 800b54e:	4824      	ldr	r0, [pc, #144]	; (800b5e0 <Get_time+0xb8>)
 800b550:	f00a fd16 	bl	8015f80 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800b554:	783b      	ldrb	r3, [r7, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff feea 	bl	800b330 <bcdToDec>
 800b55c:	4603      	mov	r3, r0
 800b55e:	461a      	mov	r2, r3
 800b560:	4b20      	ldr	r3, [pc, #128]	; (800b5e4 <Get_time+0xbc>)
 800b562:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800b564:	787b      	ldrb	r3, [r7, #1]
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff fee2 	bl	800b330 <bcdToDec>
 800b56c:	4603      	mov	r3, r0
 800b56e:	461a      	mov	r2, r3
 800b570:	4b1c      	ldr	r3, [pc, #112]	; (800b5e4 <Get_time+0xbc>)
 800b572:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800b574:	78bb      	ldrb	r3, [r7, #2]
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff feda 	bl	800b330 <bcdToDec>
 800b57c:	4603      	mov	r3, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	4b18      	ldr	r3, [pc, #96]	; (800b5e4 <Get_time+0xbc>)
 800b582:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800b584:	793b      	ldrb	r3, [r7, #4]
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff fed2 	bl	800b330 <bcdToDec>
 800b58c:	4603      	mov	r3, r0
 800b58e:	461a      	mov	r2, r3
 800b590:	4b14      	ldr	r3, [pc, #80]	; (800b5e4 <Get_time+0xbc>)
 800b592:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800b594:	797b      	ldrb	r3, [r7, #5]
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff feca 	bl	800b330 <bcdToDec>
 800b59c:	4603      	mov	r3, r0
 800b59e:	461a      	mov	r2, r3
 800b5a0:	4b10      	ldr	r3, [pc, #64]	; (800b5e4 <Get_time+0xbc>)
 800b5a2:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800b5a4:	79bb      	ldrb	r3, [r7, #6]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff fec2 	bl	800b330 <bcdToDec>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4b0c      	ldr	r3, [pc, #48]	; (800b5e4 <Get_time+0xbc>)
 800b5b2:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800b5b4:	783a      	ldrb	r2, [r7, #0]
 800b5b6:	4b0c      	ldr	r3, [pc, #48]	; (800b5e8 <Get_time+0xc0>)
 800b5b8:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800b5ba:	787a      	ldrb	r2, [r7, #1]
 800b5bc:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <Get_time+0xc0>)
 800b5be:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800b5c0:	78ba      	ldrb	r2, [r7, #2]
 800b5c2:	4b09      	ldr	r3, [pc, #36]	; (800b5e8 <Get_time+0xc0>)
 800b5c4:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800b5c6:	793a      	ldrb	r2, [r7, #4]
 800b5c8:	4b07      	ldr	r3, [pc, #28]	; (800b5e8 <Get_time+0xc0>)
 800b5ca:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800b5cc:	797a      	ldrb	r2, [r7, #5]
 800b5ce:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <Get_time+0xc0>)
 800b5d0:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800b5d2:	79ba      	ldrb	r2, [r7, #6]
 800b5d4:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <Get_time+0xc0>)
 800b5d6:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800b5d8:	bf00      	nop
}
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20008fd0 	.word	0x20008fd0
 800b5e4:	20002888 	.word	0x20002888
 800b5e8:	20002890 	.word	0x20002890

0800b5ec <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800b5f0:	4b09      	ldr	r3, [pc, #36]	; (800b618 <Update_Time_Every_Sec+0x2c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f000 ff75 	bl	800c4e4 <HAL_Elaps_Ticks>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b600:	d307      	bcc.n	800b612 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800b602:	f7ff ff91 	bl	800b528 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800b606:	f007 fdef 	bl	80131e8 <HAL_GetTick>
 800b60a:	4603      	mov	r3, r0
 800b60c:	4a02      	ldr	r2, [pc, #8]	; (800b618 <Update_Time_Every_Sec+0x2c>)
 800b60e:	6013      	str	r3, [r2, #0]
	}
	return;
 800b610:	bf00      	nop
 800b612:	bf00      	nop
}
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	20002898 	.word	0x20002898

0800b61c <Update_SiemensCommands>:
	}
}


void Update_SiemensCommands(void)
{
 800b61c:	b4b0      	push	{r4, r5, r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	4aa6      	ldr	r2, [pc, #664]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b62a:	2132      	movs	r1, #50	; 0x32
 800b62c:	fb01 f303 	mul.w	r3, r1, r3
 800b630:	4413      	add	r3, r2
 800b632:	2224      	movs	r2, #36	; 0x24
 800b634:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	4aa2      	ldr	r2, [pc, #648]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b63a:	2132      	movs	r1, #50	; 0x32
 800b63c:	fb01 f303 	mul.w	r3, r1, r3
 800b640:	4413      	add	r3, r2
 800b642:	3301      	adds	r3, #1
 800b644:	2201      	movs	r2, #1
 800b646:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800b648:	79fb      	ldrb	r3, [r7, #7]
 800b64a:	4a9e      	ldr	r2, [pc, #632]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b64c:	2132      	movs	r1, #50	; 0x32
 800b64e:	fb01 f303 	mul.w	r3, r1, r3
 800b652:	4413      	add	r3, r2
 800b654:	3302      	adds	r3, #2
 800b656:	2230      	movs	r2, #48	; 0x30
 800b658:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800b65a:	79fb      	ldrb	r3, [r7, #7]
 800b65c:	4a99      	ldr	r2, [pc, #612]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b65e:	2132      	movs	r1, #50	; 0x32
 800b660:	fb01 f303 	mul.w	r3, r1, r3
 800b664:	4413      	add	r3, r2
 800b666:	3303      	adds	r3, #3
 800b668:	2240      	movs	r2, #64	; 0x40
 800b66a:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	4a95      	ldr	r2, [pc, #596]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b670:	2132      	movs	r1, #50	; 0x32
 800b672:	fb01 f303 	mul.w	r3, r1, r3
 800b676:	4413      	add	r3, r2
 800b678:	3304      	adds	r3, #4
 800b67a:	22c0      	movs	r2, #192	; 0xc0
 800b67c:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800b67e:	79fb      	ldrb	r3, [r7, #7]
 800b680:	4a90      	ldr	r2, [pc, #576]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b682:	2132      	movs	r1, #50	; 0x32
 800b684:	fb01 f303 	mul.w	r3, r1, r3
 800b688:	4413      	add	r3, r2
 800b68a:	3305      	adds	r3, #5
 800b68c:	224e      	movs	r2, #78	; 0x4e
 800b68e:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800b690:	79fb      	ldrb	r3, [r7, #7]
 800b692:	4a8c      	ldr	r2, [pc, #560]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b694:	2132      	movs	r1, #50	; 0x32
 800b696:	fb01 f303 	mul.w	r3, r1, r3
 800b69a:	4413      	add	r3, r2
 800b69c:	3306      	adds	r3, #6
 800b69e:	2226      	movs	r2, #38	; 0x26
 800b6a0:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800b6a2:	79fb      	ldrb	r3, [r7, #7]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800b6a8:	79fb      	ldrb	r3, [r7, #7]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	71fa      	strb	r2, [r7, #7]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	2332      	movs	r3, #50	; 0x32
 800b6b2:	fb02 f303 	mul.w	r3, r2, r3
 800b6b6:	4a83      	ldr	r2, [pc, #524]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b6b8:	4413      	add	r3, r2
 800b6ba:	4983      	ldr	r1, [pc, #524]	; (800b8c8 <Update_SiemensCommands+0x2ac>)
 800b6bc:	461a      	mov	r2, r3
 800b6be:	460b      	mov	r3, r1
 800b6c0:	cb03      	ldmia	r3!, {r0, r1}
 800b6c2:	6010      	str	r0, [r2, #0]
 800b6c4:	6051      	str	r1, [r2, #4]
 800b6c6:	8819      	ldrh	r1, [r3, #0]
 800b6c8:	789b      	ldrb	r3, [r3, #2]
 800b6ca:	8111      	strh	r1, [r2, #8]
 800b6cc:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	1c5a      	adds	r2, r3, #1
 800b6d2:	71fa      	strb	r2, [r7, #7]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	2332      	movs	r3, #50	; 0x32
 800b6d8:	fb02 f303 	mul.w	r3, r2, r3
 800b6dc:	4a79      	ldr	r2, [pc, #484]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b6de:	4413      	add	r3, r2
 800b6e0:	4a7a      	ldr	r2, [pc, #488]	; (800b8cc <Update_SiemensCommands+0x2b0>)
 800b6e2:	461d      	mov	r5, r3
 800b6e4:	4614      	mov	r4, r2
 800b6e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6e8:	6028      	str	r0, [r5, #0]
 800b6ea:	6069      	str	r1, [r5, #4]
 800b6ec:	60aa      	str	r2, [r5, #8]
 800b6ee:	60eb      	str	r3, [r5, #12]
 800b6f0:	6820      	ldr	r0, [r4, #0]
 800b6f2:	6128      	str	r0, [r5, #16]
 800b6f4:	7923      	ldrb	r3, [r4, #4]
 800b6f6:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	1c5a      	adds	r2, r3, #1
 800b6fc:	71fa      	strb	r2, [r7, #7]
 800b6fe:	461a      	mov	r2, r3
 800b700:	2332      	movs	r3, #50	; 0x32
 800b702:	fb02 f303 	mul.w	r3, r2, r3
 800b706:	4a6f      	ldr	r2, [pc, #444]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b708:	4413      	add	r3, r2
 800b70a:	4a71      	ldr	r2, [pc, #452]	; (800b8d0 <Update_SiemensCommands+0x2b4>)
 800b70c:	461d      	mov	r5, r3
 800b70e:	4614      	mov	r4, r2
 800b710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b712:	6028      	str	r0, [r5, #0]
 800b714:	6069      	str	r1, [r5, #4]
 800b716:	60aa      	str	r2, [r5, #8]
 800b718:	60eb      	str	r3, [r5, #12]
 800b71a:	6820      	ldr	r0, [r4, #0]
 800b71c:	6128      	str	r0, [r5, #16]
 800b71e:	7923      	ldrb	r3, [r4, #4]
 800b720:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	71fa      	strb	r2, [r7, #7]
 800b728:	461a      	mov	r2, r3
 800b72a:	2332      	movs	r3, #50	; 0x32
 800b72c:	fb02 f303 	mul.w	r3, r2, r3
 800b730:	4a64      	ldr	r2, [pc, #400]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b732:	4413      	add	r3, r2
 800b734:	4a67      	ldr	r2, [pc, #412]	; (800b8d4 <Update_SiemensCommands+0x2b8>)
 800b736:	461d      	mov	r5, r3
 800b738:	4614      	mov	r4, r2
 800b73a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b73c:	6028      	str	r0, [r5, #0]
 800b73e:	6069      	str	r1, [r5, #4]
 800b740:	60aa      	str	r2, [r5, #8]
 800b742:	60eb      	str	r3, [r5, #12]
 800b744:	7823      	ldrb	r3, [r4, #0]
 800b746:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800b748:	79fb      	ldrb	r3, [r7, #7]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	71fa      	strb	r2, [r7, #7]
 800b74e:	461a      	mov	r2, r3
 800b750:	2332      	movs	r3, #50	; 0x32
 800b752:	fb02 f303 	mul.w	r3, r2, r3
 800b756:	4a5b      	ldr	r2, [pc, #364]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b758:	4413      	add	r3, r2
 800b75a:	4a5f      	ldr	r2, [pc, #380]	; (800b8d8 <Update_SiemensCommands+0x2bc>)
 800b75c:	461d      	mov	r5, r3
 800b75e:	4614      	mov	r4, r2
 800b760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b762:	6028      	str	r0, [r5, #0]
 800b764:	6069      	str	r1, [r5, #4]
 800b766:	60aa      	str	r2, [r5, #8]
 800b768:	60eb      	str	r3, [r5, #12]
 800b76a:	7823      	ldrb	r3, [r4, #0]
 800b76c:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	71fa      	strb	r2, [r7, #7]
 800b774:	461a      	mov	r2, r3
 800b776:	2332      	movs	r3, #50	; 0x32
 800b778:	fb02 f303 	mul.w	r3, r2, r3
 800b77c:	4a51      	ldr	r2, [pc, #324]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b77e:	4413      	add	r3, r2
 800b780:	4a56      	ldr	r2, [pc, #344]	; (800b8dc <Update_SiemensCommands+0x2c0>)
 800b782:	461d      	mov	r5, r3
 800b784:	4614      	mov	r4, r2
 800b786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b788:	6028      	str	r0, [r5, #0]
 800b78a:	6069      	str	r1, [r5, #4]
 800b78c:	60aa      	str	r2, [r5, #8]
 800b78e:	60eb      	str	r3, [r5, #12]
 800b790:	7823      	ldrb	r3, [r4, #0]
 800b792:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	71fa      	strb	r2, [r7, #7]
 800b79a:	461a      	mov	r2, r3
 800b79c:	2332      	movs	r3, #50	; 0x32
 800b79e:	fb02 f303 	mul.w	r3, r2, r3
 800b7a2:	4a48      	ldr	r2, [pc, #288]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b7a4:	4413      	add	r3, r2
 800b7a6:	4a4e      	ldr	r2, [pc, #312]	; (800b8e0 <Update_SiemensCommands+0x2c4>)
 800b7a8:	461d      	mov	r5, r3
 800b7aa:	4614      	mov	r4, r2
 800b7ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7ae:	6028      	str	r0, [r5, #0]
 800b7b0:	6069      	str	r1, [r5, #4]
 800b7b2:	60aa      	str	r2, [r5, #8]
 800b7b4:	60eb      	str	r3, [r5, #12]
 800b7b6:	cc03      	ldmia	r4!, {r0, r1}
 800b7b8:	6128      	str	r0, [r5, #16]
 800b7ba:	6169      	str	r1, [r5, #20]
 800b7bc:	8823      	ldrh	r3, [r4, #0]
 800b7be:	78a2      	ldrb	r2, [r4, #2]
 800b7c0:	832b      	strh	r3, [r5, #24]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800b7c6:	79fb      	ldrb	r3, [r7, #7]
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	71fa      	strb	r2, [r7, #7]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	2332      	movs	r3, #50	; 0x32
 800b7d0:	fb02 f303 	mul.w	r3, r2, r3
 800b7d4:	4a3b      	ldr	r2, [pc, #236]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b7d6:	4413      	add	r3, r2
 800b7d8:	4a42      	ldr	r2, [pc, #264]	; (800b8e4 <Update_SiemensCommands+0x2c8>)
 800b7da:	461d      	mov	r5, r3
 800b7dc:	4614      	mov	r4, r2
 800b7de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7e0:	6028      	str	r0, [r5, #0]
 800b7e2:	6069      	str	r1, [r5, #4]
 800b7e4:	60aa      	str	r2, [r5, #8]
 800b7e6:	60eb      	str	r3, [r5, #12]
 800b7e8:	8823      	ldrh	r3, [r4, #0]
 800b7ea:	78a2      	ldrb	r2, [r4, #2]
 800b7ec:	822b      	strh	r3, [r5, #16]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800b7f2:	79fb      	ldrb	r3, [r7, #7]
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	71fa      	strb	r2, [r7, #7]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	2332      	movs	r3, #50	; 0x32
 800b7fc:	fb02 f303 	mul.w	r3, r2, r3
 800b800:	4a30      	ldr	r2, [pc, #192]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b802:	4413      	add	r3, r2
 800b804:	4a38      	ldr	r2, [pc, #224]	; (800b8e8 <Update_SiemensCommands+0x2cc>)
 800b806:	461d      	mov	r5, r3
 800b808:	4614      	mov	r4, r2
 800b80a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b80c:	6028      	str	r0, [r5, #0]
 800b80e:	6069      	str	r1, [r5, #4]
 800b810:	60aa      	str	r2, [r5, #8]
 800b812:	60eb      	str	r3, [r5, #12]
 800b814:	cc03      	ldmia	r4!, {r0, r1}
 800b816:	6128      	str	r0, [r5, #16]
 800b818:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	71fa      	strb	r2, [r7, #7]
 800b820:	461a      	mov	r2, r3
 800b822:	2332      	movs	r3, #50	; 0x32
 800b824:	fb02 f303 	mul.w	r3, r2, r3
 800b828:	4a26      	ldr	r2, [pc, #152]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b82a:	4413      	add	r3, r2
 800b82c:	4a2f      	ldr	r2, [pc, #188]	; (800b8ec <Update_SiemensCommands+0x2d0>)
 800b82e:	461c      	mov	r4, r3
 800b830:	4615      	mov	r5, r2
 800b832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b834:	6020      	str	r0, [r4, #0]
 800b836:	6061      	str	r1, [r4, #4]
 800b838:	60a2      	str	r2, [r4, #8]
 800b83a:	60e3      	str	r3, [r4, #12]
 800b83c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b83e:	6120      	str	r0, [r4, #16]
 800b840:	6161      	str	r1, [r4, #20]
 800b842:	61a2      	str	r2, [r4, #24]
 800b844:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800b846:	79fb      	ldrb	r3, [r7, #7]
 800b848:	1c5a      	adds	r2, r3, #1
 800b84a:	71fa      	strb	r2, [r7, #7]
 800b84c:	461a      	mov	r2, r3
 800b84e:	2332      	movs	r3, #50	; 0x32
 800b850:	fb02 f303 	mul.w	r3, r2, r3
 800b854:	4a1b      	ldr	r2, [pc, #108]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b856:	4413      	add	r3, r2
 800b858:	4a25      	ldr	r2, [pc, #148]	; (800b8f0 <Update_SiemensCommands+0x2d4>)
 800b85a:	461d      	mov	r5, r3
 800b85c:	4614      	mov	r4, r2
 800b85e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b860:	6028      	str	r0, [r5, #0]
 800b862:	6069      	str	r1, [r5, #4]
 800b864:	60aa      	str	r2, [r5, #8]
 800b866:	60eb      	str	r3, [r5, #12]
 800b868:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b86a:	6128      	str	r0, [r5, #16]
 800b86c:	6169      	str	r1, [r5, #20]
 800b86e:	61aa      	str	r2, [r5, #24]
 800b870:	7823      	ldrb	r3, [r4, #0]
 800b872:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800b874:	79fb      	ldrb	r3, [r7, #7]
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	71fa      	strb	r2, [r7, #7]
 800b87a:	461a      	mov	r2, r3
 800b87c:	2332      	movs	r3, #50	; 0x32
 800b87e:	fb02 f303 	mul.w	r3, r2, r3
 800b882:	4a10      	ldr	r2, [pc, #64]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b884:	4413      	add	r3, r2
 800b886:	491b      	ldr	r1, [pc, #108]	; (800b8f4 <Update_SiemensCommands+0x2d8>)
 800b888:	461a      	mov	r2, r3
 800b88a:	460b      	mov	r3, r1
 800b88c:	cb03      	ldmia	r3!, {r0, r1}
 800b88e:	6010      	str	r0, [r2, #0]
 800b890:	6051      	str	r1, [r2, #4]
 800b892:	881b      	ldrh	r3, [r3, #0]
 800b894:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	71fa      	strb	r2, [r7, #7]
 800b89c:	461a      	mov	r2, r3
 800b89e:	2332      	movs	r3, #50	; 0x32
 800b8a0:	fb02 f303 	mul.w	r3, r2, r3
 800b8a4:	4a07      	ldr	r2, [pc, #28]	; (800b8c4 <Update_SiemensCommands+0x2a8>)
 800b8a6:	4413      	add	r3, r2
 800b8a8:	4a13      	ldr	r2, [pc, #76]	; (800b8f8 <Update_SiemensCommands+0x2dc>)
 800b8aa:	6810      	ldr	r0, [r2, #0]
 800b8ac:	6018      	str	r0, [r3, #0]
 800b8ae:	7912      	ldrb	r2, [r2, #4]
 800b8b0:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800b8b2:	4a12      	ldr	r2, [pc, #72]	; (800b8fc <Update_SiemensCommands+0x2e0>)
 800b8b4:	79fb      	ldrb	r3, [r7, #7]
 800b8b6:	7013      	strb	r3, [r2, #0]
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bcb0      	pop	{r4, r5, r7}
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20003bd0 	.word	0x20003bd0
 800b8c8:	08023f4c 	.word	0x08023f4c
 800b8cc:	08023e34 	.word	0x08023e34
 800b8d0:	08023e4c 	.word	0x08023e4c
 800b8d4:	08023e64 	.word	0x08023e64
 800b8d8:	08023e78 	.word	0x08023e78
 800b8dc:	08023e8c 	.word	0x08023e8c
 800b8e0:	08023f58 	.word	0x08023f58
 800b8e4:	08023ed4 	.word	0x08023ed4
 800b8e8:	08023ee8 	.word	0x08023ee8
 800b8ec:	08023f00 	.word	0x08023f00
 800b8f0:	08023f20 	.word	0x08023f20
 800b8f4:	08023f74 	.word	0x08023f74
 800b8f8:	08023f80 	.word	0x08023f80
 800b8fc:	20003fb8 	.word	0x20003fb8

0800b900 <UpdateSIGNALSNames>:
	}
}


void UpdateSIGNALSNames(void)
{
 800b900:	b490      	push	{r4, r7}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800b90a:	79fb      	ldrb	r3, [r7, #7]
 800b90c:	1c5a      	adds	r2, r3, #1
 800b90e:	71fa      	strb	r2, [r7, #7]
 800b910:	461a      	mov	r2, r3
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	00db      	lsls	r3, r3, #3
 800b91a:	4acd      	ldr	r2, [pc, #820]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800b91c:	4413      	add	r3, r2
 800b91e:	4acd      	ldr	r2, [pc, #820]	; (800bc54 <UpdateSIGNALSNames+0x354>)
 800b920:	6810      	ldr	r0, [r2, #0]
 800b922:	6018      	str	r0, [r3, #0]
 800b924:	8892      	ldrh	r2, [r2, #4]
 800b926:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	71fa      	strb	r2, [r7, #7]
 800b92e:	461a      	mov	r2, r3
 800b930:	4613      	mov	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4413      	add	r3, r2
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	4ac5      	ldr	r2, [pc, #788]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800b93a:	4413      	add	r3, r2
 800b93c:	4ac6      	ldr	r2, [pc, #792]	; (800bc58 <UpdateSIGNALSNames+0x358>)
 800b93e:	6810      	ldr	r0, [r2, #0]
 800b940:	6018      	str	r0, [r3, #0]
 800b942:	8892      	ldrh	r2, [r2, #4]
 800b944:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800b946:	79fb      	ldrb	r3, [r7, #7]
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	71fa      	strb	r2, [r7, #7]
 800b94c:	461a      	mov	r2, r3
 800b94e:	4613      	mov	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	00db      	lsls	r3, r3, #3
 800b956:	4abe      	ldr	r2, [pc, #760]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800b958:	4413      	add	r3, r2
 800b95a:	4ac0      	ldr	r2, [pc, #768]	; (800bc5c <UpdateSIGNALSNames+0x35c>)
 800b95c:	6810      	ldr	r0, [r2, #0]
 800b95e:	6018      	str	r0, [r3, #0]
 800b960:	8892      	ldrh	r2, [r2, #4]
 800b962:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	1c5a      	adds	r2, r3, #1
 800b968:	71fa      	strb	r2, [r7, #7]
 800b96a:	461a      	mov	r2, r3
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	4ab6      	ldr	r2, [pc, #728]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800b976:	4413      	add	r3, r2
 800b978:	4ab9      	ldr	r2, [pc, #740]	; (800bc60 <UpdateSIGNALSNames+0x360>)
 800b97a:	6810      	ldr	r0, [r2, #0]
 800b97c:	6018      	str	r0, [r3, #0]
 800b97e:	8892      	ldrh	r2, [r2, #4]
 800b980:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800b982:	79fb      	ldrb	r3, [r7, #7]
 800b984:	1c5a      	adds	r2, r3, #1
 800b986:	71fa      	strb	r2, [r7, #7]
 800b988:	461a      	mov	r2, r3
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	4aaf      	ldr	r2, [pc, #700]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800b994:	4413      	add	r3, r2
 800b996:	4ab3      	ldr	r2, [pc, #716]	; (800bc64 <UpdateSIGNALSNames+0x364>)
 800b998:	6810      	ldr	r0, [r2, #0]
 800b99a:	6018      	str	r0, [r3, #0]
 800b99c:	8892      	ldrh	r2, [r2, #4]
 800b99e:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	71fa      	strb	r2, [r7, #7]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	00db      	lsls	r3, r3, #3
 800b9b0:	4aa7      	ldr	r2, [pc, #668]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800b9b2:	4413      	add	r3, r2
 800b9b4:	4aac      	ldr	r2, [pc, #688]	; (800bc68 <UpdateSIGNALSNames+0x368>)
 800b9b6:	6810      	ldr	r0, [r2, #0]
 800b9b8:	6018      	str	r0, [r3, #0]
 800b9ba:	8891      	ldrh	r1, [r2, #4]
 800b9bc:	7992      	ldrb	r2, [r2, #6]
 800b9be:	8099      	strh	r1, [r3, #4]
 800b9c0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	71fa      	strb	r2, [r7, #7]
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	4a9f      	ldr	r2, [pc, #636]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	4aa5      	ldr	r2, [pc, #660]	; (800bc6c <UpdateSIGNALSNames+0x36c>)
 800b9d8:	6810      	ldr	r0, [r2, #0]
 800b9da:	6018      	str	r0, [r3, #0]
 800b9dc:	8891      	ldrh	r1, [r2, #4]
 800b9de:	7992      	ldrb	r2, [r2, #6]
 800b9e0:	8099      	strh	r1, [r3, #4]
 800b9e2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	1c5a      	adds	r2, r3, #1
 800b9e8:	71fa      	strb	r2, [r7, #7]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	4413      	add	r3, r2
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	4a96      	ldr	r2, [pc, #600]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800b9f6:	4413      	add	r3, r2
 800b9f8:	4a9d      	ldr	r2, [pc, #628]	; (800bc70 <UpdateSIGNALSNames+0x370>)
 800b9fa:	6810      	ldr	r0, [r2, #0]
 800b9fc:	6018      	str	r0, [r3, #0]
 800b9fe:	7912      	ldrb	r2, [r2, #4]
 800ba00:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	71fa      	strb	r2, [r7, #7]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	00db      	lsls	r3, r3, #3
 800ba12:	4a8f      	ldr	r2, [pc, #572]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800ba14:	4413      	add	r3, r2
 800ba16:	4997      	ldr	r1, [pc, #604]	; (800bc74 <UpdateSIGNALSNames+0x374>)
 800ba18:	461a      	mov	r2, r3
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	cb03      	ldmia	r3!, {r0, r1}
 800ba1e:	6010      	str	r0, [r2, #0]
 800ba20:	6051      	str	r1, [r2, #4]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800ba26:	79fb      	ldrb	r3, [r7, #7]
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	71fa      	strb	r2, [r7, #7]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	00db      	lsls	r3, r3, #3
 800ba36:	4a86      	ldr	r2, [pc, #536]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800ba38:	4413      	add	r3, r2
 800ba3a:	4a8f      	ldr	r2, [pc, #572]	; (800bc78 <UpdateSIGNALSNames+0x378>)
 800ba3c:	6810      	ldr	r0, [r2, #0]
 800ba3e:	6018      	str	r0, [r3, #0]
 800ba40:	8892      	ldrh	r2, [r2, #4]
 800ba42:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	71fa      	strb	r2, [r7, #7]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	4a7e      	ldr	r2, [pc, #504]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800ba56:	4413      	add	r3, r2
 800ba58:	4988      	ldr	r1, [pc, #544]	; (800bc7c <UpdateSIGNALSNames+0x37c>)
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	cb03      	ldmia	r3!, {r0, r1}
 800ba60:	6010      	str	r0, [r2, #0]
 800ba62:	6051      	str	r1, [r2, #4]
 800ba64:	881b      	ldrh	r3, [r3, #0]
 800ba66:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800ba68:	79fb      	ldrb	r3, [r7, #7]
 800ba6a:	1c5a      	adds	r2, r3, #1
 800ba6c:	71fa      	strb	r2, [r7, #7]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	4a75      	ldr	r2, [pc, #468]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800ba7a:	4413      	add	r3, r2
 800ba7c:	4980      	ldr	r1, [pc, #512]	; (800bc80 <UpdateSIGNALSNames+0x380>)
 800ba7e:	461a      	mov	r2, r3
 800ba80:	460b      	mov	r3, r1
 800ba82:	cb03      	ldmia	r3!, {r0, r1}
 800ba84:	6010      	str	r0, [r2, #0]
 800ba86:	6051      	str	r1, [r2, #4]
 800ba88:	8819      	ldrh	r1, [r3, #0]
 800ba8a:	789b      	ldrb	r3, [r3, #2]
 800ba8c:	8111      	strh	r1, [r2, #8]
 800ba8e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800ba90:	79fb      	ldrb	r3, [r7, #7]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	71fa      	strb	r2, [r7, #7]
 800ba96:	461a      	mov	r2, r3
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	00db      	lsls	r3, r3, #3
 800baa0:	4a6b      	ldr	r2, [pc, #428]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800baa2:	4413      	add	r3, r2
 800baa4:	4977      	ldr	r1, [pc, #476]	; (800bc84 <UpdateSIGNALSNames+0x384>)
 800baa6:	461a      	mov	r2, r3
 800baa8:	460b      	mov	r3, r1
 800baaa:	cb03      	ldmia	r3!, {r0, r1}
 800baac:	6010      	str	r0, [r2, #0]
 800baae:	6051      	str	r1, [r2, #4]
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	71fa      	strb	r2, [r7, #7]
 800baba:	461a      	mov	r2, r3
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	00db      	lsls	r3, r3, #3
 800bac4:	4a62      	ldr	r2, [pc, #392]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bac6:	4413      	add	r3, r2
 800bac8:	496f      	ldr	r1, [pc, #444]	; (800bc88 <UpdateSIGNALSNames+0x388>)
 800baca:	461a      	mov	r2, r3
 800bacc:	460b      	mov	r3, r1
 800bace:	cb03      	ldmia	r3!, {r0, r1}
 800bad0:	6010      	str	r0, [r2, #0]
 800bad2:	6051      	str	r1, [r2, #4]
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	1c5a      	adds	r2, r3, #1
 800badc:	71fa      	strb	r2, [r7, #7]
 800bade:	461a      	mov	r2, r3
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	4a59      	ldr	r2, [pc, #356]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800baea:	4413      	add	r3, r2
 800baec:	4967      	ldr	r1, [pc, #412]	; (800bc8c <UpdateSIGNALSNames+0x38c>)
 800baee:	461a      	mov	r2, r3
 800baf0:	460b      	mov	r3, r1
 800baf2:	cb03      	ldmia	r3!, {r0, r1}
 800baf4:	6010      	str	r0, [r2, #0]
 800baf6:	6051      	str	r1, [r2, #4]
 800baf8:	8819      	ldrh	r1, [r3, #0]
 800bafa:	789b      	ldrb	r3, [r3, #2]
 800bafc:	8111      	strh	r1, [r2, #8]
 800bafe:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800bb00:	79fb      	ldrb	r3, [r7, #7]
 800bb02:	1c5a      	adds	r2, r3, #1
 800bb04:	71fa      	strb	r2, [r7, #7]
 800bb06:	461a      	mov	r2, r3
 800bb08:	4613      	mov	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	4a4f      	ldr	r2, [pc, #316]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bb12:	4413      	add	r3, r2
 800bb14:	495e      	ldr	r1, [pc, #376]	; (800bc90 <UpdateSIGNALSNames+0x390>)
 800bb16:	461a      	mov	r2, r3
 800bb18:	460b      	mov	r3, r1
 800bb1a:	cb03      	ldmia	r3!, {r0, r1}
 800bb1c:	6010      	str	r0, [r2, #0]
 800bb1e:	6051      	str	r1, [r2, #4]
 800bb20:	881b      	ldrh	r3, [r3, #0]
 800bb22:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	71fa      	strb	r2, [r7, #7]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	009b      	lsls	r3, r3, #2
 800bb30:	4413      	add	r3, r2
 800bb32:	00db      	lsls	r3, r3, #3
 800bb34:	4a46      	ldr	r2, [pc, #280]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bb36:	4413      	add	r3, r2
 800bb38:	4a56      	ldr	r2, [pc, #344]	; (800bc94 <UpdateSIGNALSNames+0x394>)
 800bb3a:	6810      	ldr	r0, [r2, #0]
 800bb3c:	6018      	str	r0, [r3, #0]
 800bb3e:	8891      	ldrh	r1, [r2, #4]
 800bb40:	7992      	ldrb	r2, [r2, #6]
 800bb42:	8099      	strh	r1, [r3, #4]
 800bb44:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	71fa      	strb	r2, [r7, #7]
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	4a3e      	ldr	r2, [pc, #248]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bb58:	4413      	add	r3, r2
 800bb5a:	4a4f      	ldr	r2, [pc, #316]	; (800bc98 <UpdateSIGNALSNames+0x398>)
 800bb5c:	6810      	ldr	r0, [r2, #0]
 800bb5e:	6018      	str	r0, [r3, #0]
 800bb60:	8891      	ldrh	r1, [r2, #4]
 800bb62:	7992      	ldrb	r2, [r2, #6]
 800bb64:	8099      	strh	r1, [r3, #4]
 800bb66:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800bb68:	79fb      	ldrb	r3, [r7, #7]
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	71fa      	strb	r2, [r7, #7]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	4613      	mov	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4413      	add	r3, r2
 800bb76:	00db      	lsls	r3, r3, #3
 800bb78:	4a35      	ldr	r2, [pc, #212]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bb7a:	4413      	add	r3, r2
 800bb7c:	4a47      	ldr	r2, [pc, #284]	; (800bc9c <UpdateSIGNALSNames+0x39c>)
 800bb7e:	6810      	ldr	r0, [r2, #0]
 800bb80:	6018      	str	r0, [r3, #0]
 800bb82:	8891      	ldrh	r1, [r2, #4]
 800bb84:	7992      	ldrb	r2, [r2, #6]
 800bb86:	8099      	strh	r1, [r3, #4]
 800bb88:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800bb8a:	79fb      	ldrb	r3, [r7, #7]
 800bb8c:	1c5a      	adds	r2, r3, #1
 800bb8e:	71fa      	strb	r2, [r7, #7]
 800bb90:	461a      	mov	r2, r3
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	00db      	lsls	r3, r3, #3
 800bb9a:	4a2d      	ldr	r2, [pc, #180]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bb9c:	4413      	add	r3, r2
 800bb9e:	4a40      	ldr	r2, [pc, #256]	; (800bca0 <UpdateSIGNALSNames+0x3a0>)
 800bba0:	6810      	ldr	r0, [r2, #0]
 800bba2:	6018      	str	r0, [r3, #0]
 800bba4:	8891      	ldrh	r1, [r2, #4]
 800bba6:	7992      	ldrb	r2, [r2, #6]
 800bba8:	8099      	strh	r1, [r3, #4]
 800bbaa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800bbac:	79fb      	ldrb	r3, [r7, #7]
 800bbae:	1c5a      	adds	r2, r3, #1
 800bbb0:	71fa      	strb	r2, [r7, #7]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	4a24      	ldr	r2, [pc, #144]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bbbe:	4413      	add	r3, r2
 800bbc0:	4938      	ldr	r1, [pc, #224]	; (800bca4 <UpdateSIGNALSNames+0x3a4>)
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	cb03      	ldmia	r3!, {r0, r1}
 800bbc8:	6010      	str	r0, [r2, #0]
 800bbca:	6051      	str	r1, [r2, #4]
 800bbcc:	8819      	ldrh	r1, [r3, #0]
 800bbce:	789b      	ldrb	r3, [r3, #2]
 800bbd0:	8111      	strh	r1, [r2, #8]
 800bbd2:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	1c5a      	adds	r2, r3, #1
 800bbd8:	71fa      	strb	r2, [r7, #7]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4613      	mov	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	4a1a      	ldr	r2, [pc, #104]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bbe6:	4413      	add	r3, r2
 800bbe8:	4a2f      	ldr	r2, [pc, #188]	; (800bca8 <UpdateSIGNALSNames+0x3a8>)
 800bbea:	6810      	ldr	r0, [r2, #0]
 800bbec:	6018      	str	r0, [r3, #0]
 800bbee:	8891      	ldrh	r1, [r2, #4]
 800bbf0:	7992      	ldrb	r2, [r2, #6]
 800bbf2:	8099      	strh	r1, [r3, #4]
 800bbf4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800bbf6:	79fb      	ldrb	r3, [r7, #7]
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	71fa      	strb	r2, [r7, #7]
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	00db      	lsls	r3, r3, #3
 800bc06:	4a12      	ldr	r2, [pc, #72]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bc08:	4413      	add	r3, r2
 800bc0a:	4a28      	ldr	r2, [pc, #160]	; (800bcac <UpdateSIGNALSNames+0x3ac>)
 800bc0c:	6810      	ldr	r0, [r2, #0]
 800bc0e:	6018      	str	r0, [r3, #0]
 800bc10:	8891      	ldrh	r1, [r2, #4]
 800bc12:	7992      	ldrb	r2, [r2, #6]
 800bc14:	8099      	strh	r1, [r3, #4]
 800bc16:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800bc18:	79fb      	ldrb	r3, [r7, #7]
 800bc1a:	1c5a      	adds	r2, r3, #1
 800bc1c:	71fa      	strb	r2, [r7, #7]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	4613      	mov	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4413      	add	r3, r2
 800bc26:	00db      	lsls	r3, r3, #3
 800bc28:	4a09      	ldr	r2, [pc, #36]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bc2a:	4413      	add	r3, r2
 800bc2c:	4a20      	ldr	r2, [pc, #128]	; (800bcb0 <UpdateSIGNALSNames+0x3b0>)
 800bc2e:	6810      	ldr	r0, [r2, #0]
 800bc30:	6018      	str	r0, [r3, #0]
 800bc32:	8891      	ldrh	r1, [r2, #4]
 800bc34:	7992      	ldrb	r2, [r2, #6]
 800bc36:	8099      	strh	r1, [r3, #4]
 800bc38:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800bc3a:	79fb      	ldrb	r3, [r7, #7]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	71fa      	strb	r2, [r7, #7]
 800bc40:	461a      	mov	r2, r3
 800bc42:	4613      	mov	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	00db      	lsls	r3, r3, #3
 800bc4a:	4a01      	ldr	r2, [pc, #4]	; (800bc50 <UpdateSIGNALSNames+0x350>)
 800bc4c:	4413      	add	r3, r2
 800bc4e:	e031      	b.n	800bcb4 <UpdateSIGNALSNames+0x3b4>
 800bc50:	200030dc 	.word	0x200030dc
 800bc54:	080240b8 	.word	0x080240b8
 800bc58:	080240c0 	.word	0x080240c0
 800bc5c:	080240c8 	.word	0x080240c8
 800bc60:	080240d0 	.word	0x080240d0
 800bc64:	080240d8 	.word	0x080240d8
 800bc68:	080240e0 	.word	0x080240e0
 800bc6c:	080240e8 	.word	0x080240e8
 800bc70:	080240f0 	.word	0x080240f0
 800bc74:	080240f8 	.word	0x080240f8
 800bc78:	08024104 	.word	0x08024104
 800bc7c:	0802410c 	.word	0x0802410c
 800bc80:	08024118 	.word	0x08024118
 800bc84:	08024124 	.word	0x08024124
 800bc88:	08024130 	.word	0x08024130
 800bc8c:	0802413c 	.word	0x0802413c
 800bc90:	08024148 	.word	0x08024148
 800bc94:	08024154 	.word	0x08024154
 800bc98:	0802415c 	.word	0x0802415c
 800bc9c:	08024164 	.word	0x08024164
 800bca0:	0802416c 	.word	0x0802416c
 800bca4:	08024174 	.word	0x08024174
 800bca8:	08024180 	.word	0x08024180
 800bcac:	08024188 	.word	0x08024188
 800bcb0:	08024190 	.word	0x08024190
 800bcb4:	4acd      	ldr	r2, [pc, #820]	; (800bfec <UpdateSIGNALSNames+0x6ec>)
 800bcb6:	6810      	ldr	r0, [r2, #0]
 800bcb8:	6018      	str	r0, [r3, #0]
 800bcba:	8891      	ldrh	r1, [r2, #4]
 800bcbc:	7992      	ldrb	r2, [r2, #6]
 800bcbe:	8099      	strh	r1, [r3, #4]
 800bcc0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	71fa      	strb	r2, [r7, #7]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	00db      	lsls	r3, r3, #3
 800bcd2:	4ac7      	ldr	r2, [pc, #796]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bcd4:	4413      	add	r3, r2
 800bcd6:	4ac7      	ldr	r2, [pc, #796]	; (800bff4 <UpdateSIGNALSNames+0x6f4>)
 800bcd8:	6810      	ldr	r0, [r2, #0]
 800bcda:	6018      	str	r0, [r3, #0]
 800bcdc:	8891      	ldrh	r1, [r2, #4]
 800bcde:	7992      	ldrb	r2, [r2, #6]
 800bce0:	8099      	strh	r1, [r3, #4]
 800bce2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	71fa      	strb	r2, [r7, #7]
 800bcea:	461a      	mov	r2, r3
 800bcec:	4613      	mov	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	4abe      	ldr	r2, [pc, #760]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bcf6:	4413      	add	r3, r2
 800bcf8:	4abf      	ldr	r2, [pc, #764]	; (800bff8 <UpdateSIGNALSNames+0x6f8>)
 800bcfa:	6810      	ldr	r0, [r2, #0]
 800bcfc:	6018      	str	r0, [r3, #0]
 800bcfe:	8891      	ldrh	r1, [r2, #4]
 800bd00:	7992      	ldrb	r2, [r2, #6]
 800bd02:	8099      	strh	r1, [r3, #4]
 800bd04:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	71fa      	strb	r2, [r7, #7]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	4ab6      	ldr	r2, [pc, #728]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bd18:	4413      	add	r3, r2
 800bd1a:	4ab8      	ldr	r2, [pc, #736]	; (800bffc <UpdateSIGNALSNames+0x6fc>)
 800bd1c:	6810      	ldr	r0, [r2, #0]
 800bd1e:	6018      	str	r0, [r3, #0]
 800bd20:	8891      	ldrh	r1, [r2, #4]
 800bd22:	7992      	ldrb	r2, [r2, #6]
 800bd24:	8099      	strh	r1, [r3, #4]
 800bd26:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800bd28:	79fb      	ldrb	r3, [r7, #7]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	71fa      	strb	r2, [r7, #7]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	4613      	mov	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	00db      	lsls	r3, r3, #3
 800bd38:	4aad      	ldr	r2, [pc, #692]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bd3a:	4413      	add	r3, r2
 800bd3c:	49b0      	ldr	r1, [pc, #704]	; (800c000 <UpdateSIGNALSNames+0x700>)
 800bd3e:	461a      	mov	r2, r3
 800bd40:	460b      	mov	r3, r1
 800bd42:	cb03      	ldmia	r3!, {r0, r1}
 800bd44:	6010      	str	r0, [r2, #0]
 800bd46:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	1c5a      	adds	r2, r3, #1
 800bd4c:	71fa      	strb	r2, [r7, #7]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	4613      	mov	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	4413      	add	r3, r2
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	4aa5      	ldr	r2, [pc, #660]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bd5a:	4413      	add	r3, r2
 800bd5c:	49a9      	ldr	r1, [pc, #676]	; (800c004 <UpdateSIGNALSNames+0x704>)
 800bd5e:	461a      	mov	r2, r3
 800bd60:	460b      	mov	r3, r1
 800bd62:	cb03      	ldmia	r3!, {r0, r1}
 800bd64:	6010      	str	r0, [r2, #0]
 800bd66:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800bd68:	79fb      	ldrb	r3, [r7, #7]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	71fa      	strb	r2, [r7, #7]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	4a9d      	ldr	r2, [pc, #628]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bd7a:	4413      	add	r3, r2
 800bd7c:	49a2      	ldr	r1, [pc, #648]	; (800c008 <UpdateSIGNALSNames+0x708>)
 800bd7e:	461a      	mov	r2, r3
 800bd80:	460b      	mov	r3, r1
 800bd82:	cb03      	ldmia	r3!, {r0, r1}
 800bd84:	6010      	str	r0, [r2, #0]
 800bd86:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800bd88:	79fb      	ldrb	r3, [r7, #7]
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	71fa      	strb	r2, [r7, #7]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	4613      	mov	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4413      	add	r3, r2
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	4a95      	ldr	r2, [pc, #596]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bd9a:	4413      	add	r3, r2
 800bd9c:	499b      	ldr	r1, [pc, #620]	; (800c00c <UpdateSIGNALSNames+0x70c>)
 800bd9e:	461a      	mov	r2, r3
 800bda0:	460b      	mov	r3, r1
 800bda2:	cb03      	ldmia	r3!, {r0, r1}
 800bda4:	6010      	str	r0, [r2, #0]
 800bda6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800bda8:	79fb      	ldrb	r3, [r7, #7]
 800bdaa:	1c5a      	adds	r2, r3, #1
 800bdac:	71fa      	strb	r2, [r7, #7]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	00db      	lsls	r3, r3, #3
 800bdb8:	4a8d      	ldr	r2, [pc, #564]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bdba:	4413      	add	r3, r2
 800bdbc:	4994      	ldr	r1, [pc, #592]	; (800c010 <UpdateSIGNALSNames+0x710>)
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	cb03      	ldmia	r3!, {r0, r1}
 800bdc4:	6010      	str	r0, [r2, #0]
 800bdc6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800bdc8:	79fb      	ldrb	r3, [r7, #7]
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	71fa      	strb	r2, [r7, #7]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	4a85      	ldr	r2, [pc, #532]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bdda:	4413      	add	r3, r2
 800bddc:	498d      	ldr	r1, [pc, #564]	; (800c014 <UpdateSIGNALSNames+0x714>)
 800bdde:	461a      	mov	r2, r3
 800bde0:	460b      	mov	r3, r1
 800bde2:	cb03      	ldmia	r3!, {r0, r1}
 800bde4:	6010      	str	r0, [r2, #0]
 800bde6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800bde8:	79fb      	ldrb	r3, [r7, #7]
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	71fa      	strb	r2, [r7, #7]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	00db      	lsls	r3, r3, #3
 800bdf8:	4a7d      	ldr	r2, [pc, #500]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bdfa:	4413      	add	r3, r2
 800bdfc:	4986      	ldr	r1, [pc, #536]	; (800c018 <UpdateSIGNALSNames+0x718>)
 800bdfe:	461a      	mov	r2, r3
 800be00:	460b      	mov	r3, r1
 800be02:	cb03      	ldmia	r3!, {r0, r1}
 800be04:	6010      	str	r0, [r2, #0]
 800be06:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800be08:	79fb      	ldrb	r3, [r7, #7]
 800be0a:	1c5a      	adds	r2, r3, #1
 800be0c:	71fa      	strb	r2, [r7, #7]
 800be0e:	461a      	mov	r2, r3
 800be10:	4613      	mov	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	4a75      	ldr	r2, [pc, #468]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800be1a:	4413      	add	r3, r2
 800be1c:	497f      	ldr	r1, [pc, #508]	; (800c01c <UpdateSIGNALSNames+0x71c>)
 800be1e:	461a      	mov	r2, r3
 800be20:	460b      	mov	r3, r1
 800be22:	cb03      	ldmia	r3!, {r0, r1}
 800be24:	6010      	str	r0, [r2, #0]
 800be26:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800be28:	79fb      	ldrb	r3, [r7, #7]
 800be2a:	1c5a      	adds	r2, r3, #1
 800be2c:	71fa      	strb	r2, [r7, #7]
 800be2e:	461a      	mov	r2, r3
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	4a6d      	ldr	r2, [pc, #436]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800be3a:	4413      	add	r3, r2
 800be3c:	4978      	ldr	r1, [pc, #480]	; (800c020 <UpdateSIGNALSNames+0x720>)
 800be3e:	461a      	mov	r2, r3
 800be40:	460b      	mov	r3, r1
 800be42:	cb03      	ldmia	r3!, {r0, r1}
 800be44:	6010      	str	r0, [r2, #0]
 800be46:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	71fa      	strb	r2, [r7, #7]
 800be4e:	461a      	mov	r2, r3
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	00db      	lsls	r3, r3, #3
 800be58:	4a65      	ldr	r2, [pc, #404]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800be5a:	4413      	add	r3, r2
 800be5c:	4971      	ldr	r1, [pc, #452]	; (800c024 <UpdateSIGNALSNames+0x724>)
 800be5e:	461a      	mov	r2, r3
 800be60:	460b      	mov	r3, r1
 800be62:	cb03      	ldmia	r3!, {r0, r1}
 800be64:	6010      	str	r0, [r2, #0]
 800be66:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800be68:	79fb      	ldrb	r3, [r7, #7]
 800be6a:	1c5a      	adds	r2, r3, #1
 800be6c:	71fa      	strb	r2, [r7, #7]
 800be6e:	461a      	mov	r2, r3
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	4a5d      	ldr	r2, [pc, #372]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800be7a:	4413      	add	r3, r2
 800be7c:	496a      	ldr	r1, [pc, #424]	; (800c028 <UpdateSIGNALSNames+0x728>)
 800be7e:	461a      	mov	r2, r3
 800be80:	460b      	mov	r3, r1
 800be82:	cb03      	ldmia	r3!, {r0, r1}
 800be84:	6010      	str	r0, [r2, #0]
 800be86:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800be88:	79fb      	ldrb	r3, [r7, #7]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	71fa      	strb	r2, [r7, #7]
 800be8e:	461a      	mov	r2, r3
 800be90:	4613      	mov	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	4a55      	ldr	r2, [pc, #340]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800be9a:	4413      	add	r3, r2
 800be9c:	4963      	ldr	r1, [pc, #396]	; (800c02c <UpdateSIGNALSNames+0x72c>)
 800be9e:	461a      	mov	r2, r3
 800bea0:	460b      	mov	r3, r1
 800bea2:	cb03      	ldmia	r3!, {r0, r1}
 800bea4:	6010      	str	r0, [r2, #0]
 800bea6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	71fa      	strb	r2, [r7, #7]
 800beae:	461a      	mov	r2, r3
 800beb0:	4613      	mov	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	4413      	add	r3, r2
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	4a4d      	ldr	r2, [pc, #308]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800beba:	4413      	add	r3, r2
 800bebc:	495c      	ldr	r1, [pc, #368]	; (800c030 <UpdateSIGNALSNames+0x730>)
 800bebe:	461a      	mov	r2, r3
 800bec0:	460b      	mov	r3, r1
 800bec2:	cb03      	ldmia	r3!, {r0, r1}
 800bec4:	6010      	str	r0, [r2, #0]
 800bec6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800bec8:	79fb      	ldrb	r3, [r7, #7]
 800beca:	1c5a      	adds	r2, r3, #1
 800becc:	71fa      	strb	r2, [r7, #7]
 800bece:	461a      	mov	r2, r3
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	00db      	lsls	r3, r3, #3
 800bed8:	4a45      	ldr	r2, [pc, #276]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800beda:	4413      	add	r3, r2
 800bedc:	4a55      	ldr	r2, [pc, #340]	; (800c034 <UpdateSIGNALSNames+0x734>)
 800bede:	461c      	mov	r4, r3
 800bee0:	4613      	mov	r3, r2
 800bee2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bee4:	6020      	str	r0, [r4, #0]
 800bee6:	6061      	str	r1, [r4, #4]
 800bee8:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800beea:	79fb      	ldrb	r3, [r7, #7]
 800beec:	1c5a      	adds	r2, r3, #1
 800beee:	71fa      	strb	r2, [r7, #7]
 800bef0:	461a      	mov	r2, r3
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	00db      	lsls	r3, r3, #3
 800befa:	4a3d      	ldr	r2, [pc, #244]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800befc:	4413      	add	r3, r2
 800befe:	494e      	ldr	r1, [pc, #312]	; (800c038 <UpdateSIGNALSNames+0x738>)
 800bf00:	461a      	mov	r2, r3
 800bf02:	460b      	mov	r3, r1
 800bf04:	cb03      	ldmia	r3!, {r0, r1}
 800bf06:	6010      	str	r0, [r2, #0]
 800bf08:	6051      	str	r1, [r2, #4]
 800bf0a:	8819      	ldrh	r1, [r3, #0]
 800bf0c:	789b      	ldrb	r3, [r3, #2]
 800bf0e:	8111      	strh	r1, [r2, #8]
 800bf10:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	71fa      	strb	r2, [r7, #7]
 800bf18:	461a      	mov	r2, r3
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	00db      	lsls	r3, r3, #3
 800bf22:	4a33      	ldr	r2, [pc, #204]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bf24:	4413      	add	r3, r2
 800bf26:	4a45      	ldr	r2, [pc, #276]	; (800c03c <UpdateSIGNALSNames+0x73c>)
 800bf28:	461c      	mov	r4, r3
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf2e:	6020      	str	r0, [r4, #0]
 800bf30:	6061      	str	r1, [r4, #4]
 800bf32:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800bf34:	79fb      	ldrb	r3, [r7, #7]
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	71fa      	strb	r2, [r7, #7]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	4a2a      	ldr	r2, [pc, #168]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bf46:	4413      	add	r3, r2
 800bf48:	493d      	ldr	r1, [pc, #244]	; (800c040 <UpdateSIGNALSNames+0x740>)
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	cb03      	ldmia	r3!, {r0, r1}
 800bf50:	6010      	str	r0, [r2, #0]
 800bf52:	6051      	str	r1, [r2, #4]
 800bf54:	8819      	ldrh	r1, [r3, #0]
 800bf56:	789b      	ldrb	r3, [r3, #2]
 800bf58:	8111      	strh	r1, [r2, #8]
 800bf5a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800bf5c:	79fb      	ldrb	r3, [r7, #7]
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	71fa      	strb	r2, [r7, #7]
 800bf62:	461a      	mov	r2, r3
 800bf64:	4613      	mov	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	00db      	lsls	r3, r3, #3
 800bf6c:	4a20      	ldr	r2, [pc, #128]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bf6e:	4413      	add	r3, r2
 800bf70:	4934      	ldr	r1, [pc, #208]	; (800c044 <UpdateSIGNALSNames+0x744>)
 800bf72:	461a      	mov	r2, r3
 800bf74:	460b      	mov	r3, r1
 800bf76:	cb03      	ldmia	r3!, {r0, r1}
 800bf78:	6010      	str	r0, [r2, #0]
 800bf7a:	6051      	str	r1, [r2, #4]
 800bf7c:	8819      	ldrh	r1, [r3, #0]
 800bf7e:	789b      	ldrb	r3, [r3, #2]
 800bf80:	8111      	strh	r1, [r2, #8]
 800bf82:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800bf84:	79fb      	ldrb	r3, [r7, #7]
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	71fa      	strb	r2, [r7, #7]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	4a16      	ldr	r2, [pc, #88]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bf96:	4413      	add	r3, r2
 800bf98:	4a2b      	ldr	r2, [pc, #172]	; (800c048 <UpdateSIGNALSNames+0x748>)
 800bf9a:	461c      	mov	r4, r3
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfa0:	6020      	str	r0, [r4, #0]
 800bfa2:	6061      	str	r1, [r4, #4]
 800bfa4:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	71fa      	strb	r2, [r7, #7]
 800bfac:	461a      	mov	r2, r3
 800bfae:	4613      	mov	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	4a0e      	ldr	r2, [pc, #56]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bfb8:	4413      	add	r3, r2
 800bfba:	4924      	ldr	r1, [pc, #144]	; (800c04c <UpdateSIGNALSNames+0x74c>)
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	cb03      	ldmia	r3!, {r0, r1}
 800bfc2:	6010      	str	r0, [r2, #0]
 800bfc4:	6051      	str	r1, [r2, #4]
 800bfc6:	8819      	ldrh	r1, [r3, #0]
 800bfc8:	789b      	ldrb	r3, [r3, #2]
 800bfca:	8111      	strh	r1, [r2, #8]
 800bfcc:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800bfce:	79fb      	ldrb	r3, [r7, #7]
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	71fa      	strb	r2, [r7, #7]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	00db      	lsls	r3, r3, #3
 800bfde:	4a04      	ldr	r2, [pc, #16]	; (800bff0 <UpdateSIGNALSNames+0x6f0>)
 800bfe0:	4413      	add	r3, r2
 800bfe2:	4a1b      	ldr	r2, [pc, #108]	; (800c050 <UpdateSIGNALSNames+0x750>)
 800bfe4:	6810      	ldr	r0, [r2, #0]
 800bfe6:	6018      	str	r0, [r3, #0]
 800bfe8:	e034      	b.n	800c054 <UpdateSIGNALSNames+0x754>
 800bfea:	bf00      	nop
 800bfec:	08024198 	.word	0x08024198
 800bff0:	200030dc 	.word	0x200030dc
 800bff4:	080241a0 	.word	0x080241a0
 800bff8:	080241a8 	.word	0x080241a8
 800bffc:	080241b0 	.word	0x080241b0
 800c000:	080241b8 	.word	0x080241b8
 800c004:	080241c0 	.word	0x080241c0
 800c008:	080241c8 	.word	0x080241c8
 800c00c:	080241d0 	.word	0x080241d0
 800c010:	080241d8 	.word	0x080241d8
 800c014:	080241e0 	.word	0x080241e0
 800c018:	080241e8 	.word	0x080241e8
 800c01c:	080241f0 	.word	0x080241f0
 800c020:	080241f8 	.word	0x080241f8
 800c024:	08024200 	.word	0x08024200
 800c028:	08024208 	.word	0x08024208
 800c02c:	08024210 	.word	0x08024210
 800c030:	08024218 	.word	0x08024218
 800c034:	08024220 	.word	0x08024220
 800c038:	0802422c 	.word	0x0802422c
 800c03c:	08024238 	.word	0x08024238
 800c040:	08024244 	.word	0x08024244
 800c044:	08024250 	.word	0x08024250
 800c048:	0802425c 	.word	0x0802425c
 800c04c:	08024268 	.word	0x08024268
 800c050:	08024274 	.word	0x08024274
 800c054:	8891      	ldrh	r1, [r2, #4]
 800c056:	7992      	ldrb	r2, [r2, #6]
 800c058:	8099      	strh	r1, [r3, #4]
 800c05a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800c05c:	79fb      	ldrb	r3, [r7, #7]
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	71fa      	strb	r2, [r7, #7]
 800c062:	461a      	mov	r2, r3
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	4a82      	ldr	r2, [pc, #520]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c06e:	4413      	add	r3, r2
 800c070:	4a82      	ldr	r2, [pc, #520]	; (800c27c <UpdateSIGNALSNames+0x97c>)
 800c072:	6810      	ldr	r0, [r2, #0]
 800c074:	6018      	str	r0, [r3, #0]
 800c076:	8891      	ldrh	r1, [r2, #4]
 800c078:	7992      	ldrb	r2, [r2, #6]
 800c07a:	8099      	strh	r1, [r3, #4]
 800c07c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	71fa      	strb	r2, [r7, #7]
 800c084:	461a      	mov	r2, r3
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	00db      	lsls	r3, r3, #3
 800c08e:	4a7a      	ldr	r2, [pc, #488]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c090:	4413      	add	r3, r2
 800c092:	4a7b      	ldr	r2, [pc, #492]	; (800c280 <UpdateSIGNALSNames+0x980>)
 800c094:	6810      	ldr	r0, [r2, #0]
 800c096:	6018      	str	r0, [r3, #0]
 800c098:	8891      	ldrh	r1, [r2, #4]
 800c09a:	7992      	ldrb	r2, [r2, #6]
 800c09c:	8099      	strh	r1, [r3, #4]
 800c09e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800c0a0:	79fb      	ldrb	r3, [r7, #7]
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	71fa      	strb	r2, [r7, #7]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	00db      	lsls	r3, r3, #3
 800c0b0:	4a71      	ldr	r2, [pc, #452]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c0b2:	4413      	add	r3, r2
 800c0b4:	4a73      	ldr	r2, [pc, #460]	; (800c284 <UpdateSIGNALSNames+0x984>)
 800c0b6:	6810      	ldr	r0, [r2, #0]
 800c0b8:	6018      	str	r0, [r3, #0]
 800c0ba:	8891      	ldrh	r1, [r2, #4]
 800c0bc:	7992      	ldrb	r2, [r2, #6]
 800c0be:	8099      	strh	r1, [r3, #4]
 800c0c0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	71fa      	strb	r2, [r7, #7]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	00db      	lsls	r3, r3, #3
 800c0d2:	4a69      	ldr	r2, [pc, #420]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c0d4:	4413      	add	r3, r2
 800c0d6:	4a6c      	ldr	r2, [pc, #432]	; (800c288 <UpdateSIGNALSNames+0x988>)
 800c0d8:	6810      	ldr	r0, [r2, #0]
 800c0da:	6018      	str	r0, [r3, #0]
 800c0dc:	8891      	ldrh	r1, [r2, #4]
 800c0de:	7992      	ldrb	r2, [r2, #6]
 800c0e0:	8099      	strh	r1, [r3, #4]
 800c0e2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800c0e4:	79fb      	ldrb	r3, [r7, #7]
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	71fa      	strb	r2, [r7, #7]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	00db      	lsls	r3, r3, #3
 800c0f4:	4a60      	ldr	r2, [pc, #384]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c0f6:	4413      	add	r3, r2
 800c0f8:	4a64      	ldr	r2, [pc, #400]	; (800c28c <UpdateSIGNALSNames+0x98c>)
 800c0fa:	6810      	ldr	r0, [r2, #0]
 800c0fc:	6018      	str	r0, [r3, #0]
 800c0fe:	8891      	ldrh	r1, [r2, #4]
 800c100:	7992      	ldrb	r2, [r2, #6]
 800c102:	8099      	strh	r1, [r3, #4]
 800c104:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800c106:	79fb      	ldrb	r3, [r7, #7]
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	71fa      	strb	r2, [r7, #7]
 800c10c:	461a      	mov	r2, r3
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	4a58      	ldr	r2, [pc, #352]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c118:	4413      	add	r3, r2
 800c11a:	4a5d      	ldr	r2, [pc, #372]	; (800c290 <UpdateSIGNALSNames+0x990>)
 800c11c:	6810      	ldr	r0, [r2, #0]
 800c11e:	6018      	str	r0, [r3, #0]
 800c120:	8891      	ldrh	r1, [r2, #4]
 800c122:	7992      	ldrb	r2, [r2, #6]
 800c124:	8099      	strh	r1, [r3, #4]
 800c126:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	71fa      	strb	r2, [r7, #7]
 800c12e:	461a      	mov	r2, r3
 800c130:	4613      	mov	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4413      	add	r3, r2
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	4a4f      	ldr	r2, [pc, #316]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c13a:	4413      	add	r3, r2
 800c13c:	4a55      	ldr	r2, [pc, #340]	; (800c294 <UpdateSIGNALSNames+0x994>)
 800c13e:	6810      	ldr	r0, [r2, #0]
 800c140:	6018      	str	r0, [r3, #0]
 800c142:	8891      	ldrh	r1, [r2, #4]
 800c144:	7992      	ldrb	r2, [r2, #6]
 800c146:	8099      	strh	r1, [r3, #4]
 800c148:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800c14a:	79fb      	ldrb	r3, [r7, #7]
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	71fa      	strb	r2, [r7, #7]
 800c150:	461a      	mov	r2, r3
 800c152:	4613      	mov	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	4a47      	ldr	r2, [pc, #284]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c15c:	4413      	add	r3, r2
 800c15e:	4a4e      	ldr	r2, [pc, #312]	; (800c298 <UpdateSIGNALSNames+0x998>)
 800c160:	6810      	ldr	r0, [r2, #0]
 800c162:	6018      	str	r0, [r3, #0]
 800c164:	8891      	ldrh	r1, [r2, #4]
 800c166:	7992      	ldrb	r2, [r2, #6]
 800c168:	8099      	strh	r1, [r3, #4]
 800c16a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800c16c:	79fb      	ldrb	r3, [r7, #7]
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	71fa      	strb	r2, [r7, #7]
 800c172:	461a      	mov	r2, r3
 800c174:	4613      	mov	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	00db      	lsls	r3, r3, #3
 800c17c:	4a3e      	ldr	r2, [pc, #248]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c17e:	4413      	add	r3, r2
 800c180:	4a46      	ldr	r2, [pc, #280]	; (800c29c <UpdateSIGNALSNames+0x99c>)
 800c182:	6810      	ldr	r0, [r2, #0]
 800c184:	6018      	str	r0, [r3, #0]
 800c186:	8891      	ldrh	r1, [r2, #4]
 800c188:	7992      	ldrb	r2, [r2, #6]
 800c18a:	8099      	strh	r1, [r3, #4]
 800c18c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800c18e:	79fb      	ldrb	r3, [r7, #7]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	71fa      	strb	r2, [r7, #7]
 800c194:	461a      	mov	r2, r3
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	4a36      	ldr	r2, [pc, #216]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c1a0:	4413      	add	r3, r2
 800c1a2:	4a3f      	ldr	r2, [pc, #252]	; (800c2a0 <UpdateSIGNALSNames+0x9a0>)
 800c1a4:	6810      	ldr	r0, [r2, #0]
 800c1a6:	6018      	str	r0, [r3, #0]
 800c1a8:	8891      	ldrh	r1, [r2, #4]
 800c1aa:	7992      	ldrb	r2, [r2, #6]
 800c1ac:	8099      	strh	r1, [r3, #4]
 800c1ae:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	1c5a      	adds	r2, r3, #1
 800c1b4:	71fa      	strb	r2, [r7, #7]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	4a2d      	ldr	r2, [pc, #180]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c1c2:	4413      	add	r3, r2
 800c1c4:	4a37      	ldr	r2, [pc, #220]	; (800c2a4 <UpdateSIGNALSNames+0x9a4>)
 800c1c6:	6810      	ldr	r0, [r2, #0]
 800c1c8:	6018      	str	r0, [r3, #0]
 800c1ca:	8891      	ldrh	r1, [r2, #4]
 800c1cc:	7992      	ldrb	r2, [r2, #6]
 800c1ce:	8099      	strh	r1, [r3, #4]
 800c1d0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	71fa      	strb	r2, [r7, #7]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	4a25      	ldr	r2, [pc, #148]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c1e4:	4413      	add	r3, r2
 800c1e6:	4930      	ldr	r1, [pc, #192]	; (800c2a8 <UpdateSIGNALSNames+0x9a8>)
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	cb03      	ldmia	r3!, {r0, r1}
 800c1ee:	6010      	str	r0, [r2, #0]
 800c1f0:	6051      	str	r1, [r2, #4]
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800c1f6:	79fb      	ldrb	r3, [r7, #7]
 800c1f8:	1c5a      	adds	r2, r3, #1
 800c1fa:	71fa      	strb	r2, [r7, #7]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	4613      	mov	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	4a1c      	ldr	r2, [pc, #112]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c208:	4413      	add	r3, r2
 800c20a:	4a28      	ldr	r2, [pc, #160]	; (800c2ac <UpdateSIGNALSNames+0x9ac>)
 800c20c:	6810      	ldr	r0, [r2, #0]
 800c20e:	6018      	str	r0, [r3, #0]
 800c210:	8891      	ldrh	r1, [r2, #4]
 800c212:	7992      	ldrb	r2, [r2, #6]
 800c214:	8099      	strh	r1, [r3, #4]
 800c216:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800c218:	79fb      	ldrb	r3, [r7, #7]
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	71fa      	strb	r2, [r7, #7]
 800c21e:	461a      	mov	r2, r3
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	4a13      	ldr	r2, [pc, #76]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c22a:	4413      	add	r3, r2
 800c22c:	4a20      	ldr	r2, [pc, #128]	; (800c2b0 <UpdateSIGNALSNames+0x9b0>)
 800c22e:	461c      	mov	r4, r3
 800c230:	4613      	mov	r3, r2
 800c232:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c234:	6020      	str	r0, [r4, #0]
 800c236:	6061      	str	r1, [r4, #4]
 800c238:	60a2      	str	r2, [r4, #8]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800c23e:	79fb      	ldrb	r3, [r7, #7]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	71fa      	strb	r2, [r7, #7]
 800c244:	461a      	mov	r2, r3
 800c246:	4613      	mov	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	4a0a      	ldr	r2, [pc, #40]	; (800c278 <UpdateSIGNALSNames+0x978>)
 800c250:	4413      	add	r3, r2
 800c252:	4a18      	ldr	r2, [pc, #96]	; (800c2b4 <UpdateSIGNALSNames+0x9b4>)
 800c254:	461c      	mov	r4, r3
 800c256:	4613      	mov	r3, r2
 800c258:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c25a:	6020      	str	r0, [r4, #0]
 800c25c:	6061      	str	r1, [r4, #4]
 800c25e:	60a2      	str	r2, [r4, #8]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	b29a      	uxth	r2, r3
 800c268:	4b13      	ldr	r3, [pc, #76]	; (800c2b8 <UpdateSIGNALSNames+0x9b8>)
 800c26a:	801a      	strh	r2, [r3, #0]


}
 800c26c:	bf00      	nop
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bc90      	pop	{r4, r7}
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	200030dc 	.word	0x200030dc
 800c27c:	0802427c 	.word	0x0802427c
 800c280:	08024284 	.word	0x08024284
 800c284:	0802428c 	.word	0x0802428c
 800c288:	08024294 	.word	0x08024294
 800c28c:	0802429c 	.word	0x0802429c
 800c290:	080242a4 	.word	0x080242a4
 800c294:	080242ac 	.word	0x080242ac
 800c298:	080242b4 	.word	0x080242b4
 800c29c:	080242bc 	.word	0x080242bc
 800c2a0:	080242c4 	.word	0x080242c4
 800c2a4:	080242cc 	.word	0x080242cc
 800c2a8:	080242d4 	.word	0x080242d4
 800c2ac:	080242e0 	.word	0x080242e0
 800c2b0:	080242e8 	.word	0x080242e8
 800c2b4:	080242f8 	.word	0x080242f8
 800c2b8:	20003bcc 	.word	0x20003bcc

0800c2bc <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800c2bc:	b5b0      	push	{r4, r5, r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800c2c2:	4974      	ldr	r1, [pc, #464]	; (800c494 <print_self_DetailsSiemens+0x1d8>)
 800c2c4:	4874      	ldr	r0, [pc, #464]	; (800c498 <print_self_DetailsSiemens+0x1dc>)
 800c2c6:	f013 ff99 	bl	80201fc <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800c2ca:	4b74      	ldr	r3, [pc, #464]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c2cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	4873      	ldr	r0, [pc, #460]	; (800c4a0 <print_self_DetailsSiemens+0x1e4>)
 800c2d4:	f013 ff92 	bl	80201fc <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800c2d8:	4b70      	ldr	r3, [pc, #448]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c2da:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4b6e      	ldr	r3, [pc, #440]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c2e2:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	4b6c      	ldr	r3, [pc, #432]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c2ea:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	4b6a      	ldr	r3, [pc, #424]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c2f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	486a      	ldr	r0, [pc, #424]	; (800c4a4 <print_self_DetailsSiemens+0x1e8>)
 800c2fc:	f013 ff7e 	bl	80201fc <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800c300:	4b66      	ldr	r3, [pc, #408]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c302:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800c306:	4618      	mov	r0, r3
 800c308:	4b64      	ldr	r3, [pc, #400]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c30a:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 800c30e:	461c      	mov	r4, r3
 800c310:	4b62      	ldr	r3, [pc, #392]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c312:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 800c316:	461d      	mov	r5, r3
 800c318:	4b60      	ldr	r3, [pc, #384]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c31a:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 800c31e:	461a      	mov	r2, r3
 800c320:	4b5e      	ldr	r3, [pc, #376]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c322:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 800c326:	4619      	mov	r1, r3
 800c328:	4b5c      	ldr	r3, [pc, #368]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c32a:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 800c32e:	9302      	str	r3, [sp, #8]
 800c330:	9101      	str	r1, [sp, #4]
 800c332:	9200      	str	r2, [sp, #0]
 800c334:	462b      	mov	r3, r5
 800c336:	4622      	mov	r2, r4
 800c338:	4601      	mov	r1, r0
 800c33a:	485b      	ldr	r0, [pc, #364]	; (800c4a8 <print_self_DetailsSiemens+0x1ec>)
 800c33c:	f013 ff5e 	bl	80201fc <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800c340:	4b56      	ldr	r3, [pc, #344]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c342:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 800c346:	4619      	mov	r1, r3
 800c348:	4858      	ldr	r0, [pc, #352]	; (800c4ac <print_self_DetailsSiemens+0x1f0>)
 800c34a:	f013 ff57 	bl	80201fc <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800c34e:	2300      	movs	r3, #0
 800c350:	71fb      	strb	r3, [r7, #7]
 800c352:	e037      	b.n	800c3c4 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	1c59      	adds	r1, r3, #1
 800c358:	79fb      	ldrb	r3, [r7, #7]
 800c35a:	4a50      	ldr	r2, [pc, #320]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c35c:	33ae      	adds	r3, #174	; 0xae
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	785b      	ldrb	r3, [r3, #1]
 800c364:	461c      	mov	r4, r3
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	4a4c      	ldr	r2, [pc, #304]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800c372:	461d      	mov	r5, r3
 800c374:	79fb      	ldrb	r3, [r7, #7]
 800c376:	4a49      	ldr	r2, [pc, #292]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800c380:	4618      	mov	r0, r3
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	4a45      	ldr	r2, [pc, #276]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	4413      	add	r3, r2
 800c38a:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	9000      	str	r0, [sp, #0]
 800c392:	462b      	mov	r3, r5
 800c394:	4622      	mov	r2, r4
 800c396:	4846      	ldr	r0, [pc, #280]	; (800c4b0 <print_self_DetailsSiemens+0x1f4>)
 800c398:	f013 ff30 	bl	80201fc <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800c39c:	79fb      	ldrb	r3, [r7, #7]
 800c39e:	4a3f      	ldr	r2, [pc, #252]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c3a0:	33b6      	adds	r3, #182	; 0xb6
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	88db      	ldrh	r3, [r3, #6]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	79fb      	ldrb	r3, [r7, #7]
 800c3ac:	4a3b      	ldr	r2, [pc, #236]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	483e      	ldr	r0, [pc, #248]	; (800c4b4 <print_self_DetailsSiemens+0x1f8>)
 800c3ba:	f013 ff1f 	bl	80201fc <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	71fb      	strb	r3, [r7, #7]
 800c3c4:	4b35      	ldr	r3, [pc, #212]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c3c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c3ca:	79fa      	ldrb	r2, [r7, #7]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d3c1      	bcc.n	800c354 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800c3d0:	4b32      	ldr	r3, [pc, #200]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c3d2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	4837      	ldr	r0, [pc, #220]	; (800c4b8 <print_self_DetailsSiemens+0x1fc>)
 800c3da:	f013 ff0f 	bl	80201fc <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800c3de:	4b2f      	ldr	r3, [pc, #188]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c3e0:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	4835      	ldr	r0, [pc, #212]	; (800c4bc <print_self_DetailsSiemens+0x200>)
 800c3e8:	f013 ff08 	bl	80201fc <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800c3ec:	4b2b      	ldr	r3, [pc, #172]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c3ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	4832      	ldr	r0, [pc, #200]	; (800c4c0 <print_self_DetailsSiemens+0x204>)
 800c3f6:	f013 ff01 	bl	80201fc <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800c3fa:	4b28      	ldr	r3, [pc, #160]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c3fc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800c400:	4619      	mov	r1, r3
 800c402:	482f      	ldr	r0, [pc, #188]	; (800c4c0 <print_self_DetailsSiemens+0x204>)
 800c404:	f013 fefa 	bl	80201fc <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800c408:	4b24      	ldr	r3, [pc, #144]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c40a:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800c40e:	4619      	mov	r1, r3
 800c410:	482c      	ldr	r0, [pc, #176]	; (800c4c4 <print_self_DetailsSiemens+0x208>)
 800c412:	f013 fef3 	bl	80201fc <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800c416:	4b21      	ldr	r3, [pc, #132]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c418:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c41c:	4619      	mov	r1, r3
 800c41e:	482a      	ldr	r0, [pc, #168]	; (800c4c8 <print_self_DetailsSiemens+0x20c>)
 800c420:	f013 feec 	bl	80201fc <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800c424:	4b1d      	ldr	r3, [pc, #116]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c426:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c42a:	4619      	mov	r1, r3
 800c42c:	4827      	ldr	r0, [pc, #156]	; (800c4cc <print_self_DetailsSiemens+0x210>)
 800c42e:	f013 fee5 	bl	80201fc <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800c432:	4b1a      	ldr	r3, [pc, #104]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c434:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800c438:	4619      	mov	r1, r3
 800c43a:	4825      	ldr	r0, [pc, #148]	; (800c4d0 <print_self_DetailsSiemens+0x214>)
 800c43c:	f013 fede 	bl	80201fc <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800c440:	4b16      	ldr	r3, [pc, #88]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c442:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800c446:	4619      	mov	r1, r3
 800c448:	4822      	ldr	r0, [pc, #136]	; (800c4d4 <print_self_DetailsSiemens+0x218>)
 800c44a:	f013 fed7 	bl	80201fc <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800c44e:	4b13      	ldr	r3, [pc, #76]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c450:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800c454:	4619      	mov	r1, r3
 800c456:	4820      	ldr	r0, [pc, #128]	; (800c4d8 <print_self_DetailsSiemens+0x21c>)
 800c458:	f013 fed0 	bl	80201fc <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800c45c:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c45e:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c462:	4619      	mov	r1, r3
 800c464:	481d      	ldr	r0, [pc, #116]	; (800c4dc <print_self_DetailsSiemens+0x220>)
 800c466:	f013 fec9 	bl	80201fc <iprintf>

	if(EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount == 0)
 800c46a:	4b0c      	ldr	r3, [pc, #48]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c46c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c470:	2b00      	cmp	r3, #0
 800c472:	d103      	bne.n	800c47c <print_self_DetailsSiemens+0x1c0>
	{
		EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount = 50;
 800c474:	4b09      	ldr	r3, [pc, #36]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c476:	2232      	movs	r2, #50	; 0x32
 800c478:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800c47c:	4b07      	ldr	r3, [pc, #28]	; (800c49c <print_self_DetailsSiemens+0x1e0>)
 800c47e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c482:	4619      	mov	r1, r3
 800c484:	4816      	ldr	r0, [pc, #88]	; (800c4e0 <print_self_DetailsSiemens+0x224>)
 800c486:	f013 feb9 	bl	80201fc <iprintf>

}
 800c48a:	bf00      	nop
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bdb0      	pop	{r4, r5, r7, pc}
 800c492:	bf00      	nop
 800c494:	20000305 	.word	0x20000305
 800c498:	08024308 	.word	0x08024308
 800c49c:	20000304 	.word	0x20000304
 800c4a0:	0802431c 	.word	0x0802431c
 800c4a4:	0802432c 	.word	0x0802432c
 800c4a8:	08024344 	.word	0x08024344
 800c4ac:	0802436c 	.word	0x0802436c
 800c4b0:	08024384 	.word	0x08024384
 800c4b4:	08024398 	.word	0x08024398
 800c4b8:	080243b0 	.word	0x080243b0
 800c4bc:	080243c0 	.word	0x080243c0
 800c4c0:	080243d4 	.word	0x080243d4
 800c4c4:	080243e8 	.word	0x080243e8
 800c4c8:	080243f8 	.word	0x080243f8
 800c4cc:	08024408 	.word	0x08024408
 800c4d0:	0802441c 	.word	0x0802441c
 800c4d4:	08024434 	.word	0x08024434
 800c4d8:	0802444c 	.word	0x0802444c
 800c4dc:	08024468 	.word	0x08024468
 800c4e0:	08024484 	.word	0x08024484

0800c4e4 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800c4ec:	f006 fe7c 	bl	80131e8 <HAL_GetTick>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bfb8      	it	lt
 800c4fa:	425b      	neglt	r3, r3
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800c50a:	23f3      	movs	r3, #243	; 0xf3
 800c50c:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800c50e:	f011 f97f 	bl	801d810 <udp_new>
 800c512:	4603      	mov	r3, r0
 800c514:	4a7a      	ldr	r2, [pc, #488]	; (800c700 <udpServer_init+0x1fc>)
 800c516:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800c518:	4b7a      	ldr	r3, [pc, #488]	; (800c704 <udpServer_init+0x200>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d002      	beq.n	800c526 <udpServer_init+0x22>
 800c520:	2b02      	cmp	r3, #2
 800c522:	d074      	beq.n	800c60e <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800c524:	e0e9      	b.n	800c6fa <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800c526:	4b77      	ldr	r3, [pc, #476]	; (800c704 <udpServer_init+0x200>)
 800c528:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800c52c:	061a      	lsls	r2, r3, #24
 800c52e:	4b75      	ldr	r3, [pc, #468]	; (800c704 <udpServer_init+0x200>)
 800c530:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c534:	041b      	lsls	r3, r3, #16
 800c536:	431a      	orrs	r2, r3
 800c538:	4b72      	ldr	r3, [pc, #456]	; (800c704 <udpServer_init+0x200>)
 800c53a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c53e:	021b      	lsls	r3, r3, #8
 800c540:	4313      	orrs	r3, r2
 800c542:	4a70      	ldr	r2, [pc, #448]	; (800c704 <udpServer_init+0x200>)
 800c544:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800c548:	4313      	orrs	r3, r2
 800c54a:	061a      	lsls	r2, r3, #24
 800c54c:	4b6d      	ldr	r3, [pc, #436]	; (800c704 <udpServer_init+0x200>)
 800c54e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800c552:	0619      	lsls	r1, r3, #24
 800c554:	4b6b      	ldr	r3, [pc, #428]	; (800c704 <udpServer_init+0x200>)
 800c556:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c55a:	041b      	lsls	r3, r3, #16
 800c55c:	4319      	orrs	r1, r3
 800c55e:	4b69      	ldr	r3, [pc, #420]	; (800c704 <udpServer_init+0x200>)
 800c560:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	430b      	orrs	r3, r1
 800c568:	4966      	ldr	r1, [pc, #408]	; (800c704 <udpServer_init+0x200>)
 800c56a:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800c56e:	430b      	orrs	r3, r1
 800c570:	021b      	lsls	r3, r3, #8
 800c572:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c576:	431a      	orrs	r2, r3
 800c578:	4b62      	ldr	r3, [pc, #392]	; (800c704 <udpServer_init+0x200>)
 800c57a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800c57e:	0619      	lsls	r1, r3, #24
 800c580:	4b60      	ldr	r3, [pc, #384]	; (800c704 <udpServer_init+0x200>)
 800c582:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c586:	041b      	lsls	r3, r3, #16
 800c588:	4319      	orrs	r1, r3
 800c58a:	4b5e      	ldr	r3, [pc, #376]	; (800c704 <udpServer_init+0x200>)
 800c58c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c590:	021b      	lsls	r3, r3, #8
 800c592:	430b      	orrs	r3, r1
 800c594:	495b      	ldr	r1, [pc, #364]	; (800c704 <udpServer_init+0x200>)
 800c596:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800c59a:	430b      	orrs	r3, r1
 800c59c:	0a1b      	lsrs	r3, r3, #8
 800c59e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	4b57      	ldr	r3, [pc, #348]	; (800c704 <udpServer_init+0x200>)
 800c5a6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800c5aa:	0619      	lsls	r1, r3, #24
 800c5ac:	4b55      	ldr	r3, [pc, #340]	; (800c704 <udpServer_init+0x200>)
 800c5ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c5b2:	041b      	lsls	r3, r3, #16
 800c5b4:	4319      	orrs	r1, r3
 800c5b6:	4b53      	ldr	r3, [pc, #332]	; (800c704 <udpServer_init+0x200>)
 800c5b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c5bc:	021b      	lsls	r3, r3, #8
 800c5be:	430b      	orrs	r3, r1
 800c5c0:	4950      	ldr	r1, [pc, #320]	; (800c704 <udpServer_init+0x200>)
 800c5c2:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800c5c6:	430b      	orrs	r3, r1
 800c5c8:	0e1b      	lsrs	r3, r3, #24
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800c5ce:	4b4c      	ldr	r3, [pc, #304]	; (800c700 <udpServer_init+0x1fc>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a4c      	ldr	r2, [pc, #304]	; (800c704 <udpServer_init+0x200>)
 800c5d4:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800c5d8:	4639      	mov	r1, r7
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f011 f82e 	bl	801d63c <udp_bind>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800c5e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d107      	bne.n	800c5fc <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800c5ec:	4b44      	ldr	r3, [pc, #272]	; (800c700 <udpServer_init+0x1fc>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	4945      	ldr	r1, [pc, #276]	; (800c708 <udpServer_init+0x204>)
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f011 f8a9 	bl	801d74c <udp_recv>
		break;
 800c5fa:	e07c      	b.n	800c6f6 <udpServer_init+0x1f2>
			printf("N-OK\n");
 800c5fc:	4843      	ldr	r0, [pc, #268]	; (800c70c <udpServer_init+0x208>)
 800c5fe:	f013 fe99 	bl	8020334 <puts>
			udp_remove(upcb);
 800c602:	4b3f      	ldr	r3, [pc, #252]	; (800c700 <udpServer_init+0x1fc>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4618      	mov	r0, r3
 800c608:	f011 f8c0 	bl	801d78c <udp_remove>
		break;
 800c60c:	e073      	b.n	800c6f6 <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800c60e:	4b3d      	ldr	r3, [pc, #244]	; (800c704 <udpServer_init+0x200>)
 800c610:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800c614:	061a      	lsls	r2, r3, #24
 800c616:	4b3b      	ldr	r3, [pc, #236]	; (800c704 <udpServer_init+0x200>)
 800c618:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800c61c:	041b      	lsls	r3, r3, #16
 800c61e:	431a      	orrs	r2, r3
 800c620:	4b38      	ldr	r3, [pc, #224]	; (800c704 <udpServer_init+0x200>)
 800c622:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800c626:	021b      	lsls	r3, r3, #8
 800c628:	4313      	orrs	r3, r2
 800c62a:	4a36      	ldr	r2, [pc, #216]	; (800c704 <udpServer_init+0x200>)
 800c62c:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 800c630:	4313      	orrs	r3, r2
 800c632:	061a      	lsls	r2, r3, #24
 800c634:	4b33      	ldr	r3, [pc, #204]	; (800c704 <udpServer_init+0x200>)
 800c636:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800c63a:	0619      	lsls	r1, r3, #24
 800c63c:	4b31      	ldr	r3, [pc, #196]	; (800c704 <udpServer_init+0x200>)
 800c63e:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800c642:	041b      	lsls	r3, r3, #16
 800c644:	4319      	orrs	r1, r3
 800c646:	4b2f      	ldr	r3, [pc, #188]	; (800c704 <udpServer_init+0x200>)
 800c648:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	430b      	orrs	r3, r1
 800c650:	492c      	ldr	r1, [pc, #176]	; (800c704 <udpServer_init+0x200>)
 800c652:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800c656:	430b      	orrs	r3, r1
 800c658:	021b      	lsls	r3, r3, #8
 800c65a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c65e:	431a      	orrs	r2, r3
 800c660:	4b28      	ldr	r3, [pc, #160]	; (800c704 <udpServer_init+0x200>)
 800c662:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800c666:	0619      	lsls	r1, r3, #24
 800c668:	4b26      	ldr	r3, [pc, #152]	; (800c704 <udpServer_init+0x200>)
 800c66a:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800c66e:	041b      	lsls	r3, r3, #16
 800c670:	4319      	orrs	r1, r3
 800c672:	4b24      	ldr	r3, [pc, #144]	; (800c704 <udpServer_init+0x200>)
 800c674:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800c678:	021b      	lsls	r3, r3, #8
 800c67a:	430b      	orrs	r3, r1
 800c67c:	4921      	ldr	r1, [pc, #132]	; (800c704 <udpServer_init+0x200>)
 800c67e:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800c682:	430b      	orrs	r3, r1
 800c684:	0a1b      	lsrs	r3, r3, #8
 800c686:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c68a:	431a      	orrs	r2, r3
 800c68c:	4b1d      	ldr	r3, [pc, #116]	; (800c704 <udpServer_init+0x200>)
 800c68e:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800c692:	0619      	lsls	r1, r3, #24
 800c694:	4b1b      	ldr	r3, [pc, #108]	; (800c704 <udpServer_init+0x200>)
 800c696:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800c69a:	041b      	lsls	r3, r3, #16
 800c69c:	4319      	orrs	r1, r3
 800c69e:	4b19      	ldr	r3, [pc, #100]	; (800c704 <udpServer_init+0x200>)
 800c6a0:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800c6a4:	021b      	lsls	r3, r3, #8
 800c6a6:	430b      	orrs	r3, r1
 800c6a8:	4916      	ldr	r1, [pc, #88]	; (800c704 <udpServer_init+0x200>)
 800c6aa:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800c6ae:	430b      	orrs	r3, r1
 800c6b0:	0e1b      	lsrs	r3, r3, #24
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800c6b6:	4b12      	ldr	r3, [pc, #72]	; (800c700 <udpServer_init+0x1fc>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a12      	ldr	r2, [pc, #72]	; (800c704 <udpServer_init+0x200>)
 800c6bc:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 800c6c0:	4639      	mov	r1, r7
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f010 ffba 	bl	801d63c <udp_bind>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800c6cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d107      	bne.n	800c6e4 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800c6d4:	4b0a      	ldr	r3, [pc, #40]	; (800c700 <udpServer_init+0x1fc>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	490b      	ldr	r1, [pc, #44]	; (800c708 <udpServer_init+0x204>)
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f011 f835 	bl	801d74c <udp_recv>
		break;
 800c6e2:	e007      	b.n	800c6f4 <udpServer_init+0x1f0>
			printf("N-OK\n");
 800c6e4:	4809      	ldr	r0, [pc, #36]	; (800c70c <udpServer_init+0x208>)
 800c6e6:	f013 fe25 	bl	8020334 <puts>
			udp_remove(upcb);
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <udpServer_init+0x1fc>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f011 f84c 	bl	801d78c <udp_remove>
		break;
 800c6f4:	bf00      	nop
	}

	udpClient_connect();
 800c6f6:	f000 f915 	bl	800c924 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	2000463c 	.word	0x2000463c
 800c704:	20000304 	.word	0x20000304
 800c708:	0800c711 	.word	0x0800c711
 800c70c:	080244a4 	.word	0x080244a4

0800c710 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800c72a:	4a73      	ldr	r2, [pc, #460]	; (800c8f8 <UDP_Receive_Callback+0x1e8>)
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	895b      	ldrh	r3, [r3, #10]
 800c736:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800c738:	4b70      	ldr	r3, [pc, #448]	; (800c8fc <UDP_Receive_Callback+0x1ec>)
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d02e      	beq.n	800c79e <UDP_Receive_Callback+0x8e>
 800c740:	2b02      	cmp	r3, #2
 800c742:	d045      	beq.n	800c7d0 <UDP_Receive_Callback+0xc0>
 800c744:	e069      	b.n	800c81a <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800c746:	4b6c      	ldr	r3, [pc, #432]	; (800c8f8 <UDP_Receive_Callback+0x1e8>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
 800c74c:	496c      	ldr	r1, [pc, #432]	; (800c900 <UDP_Receive_Callback+0x1f0>)
 800c74e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c752:	429a      	cmp	r2, r3
 800c754:	d120      	bne.n	800c798 <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 800c756:	7dbb      	ldrb	r3, [r7, #22]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d109      	bne.n	800c770 <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800c75c:	6838      	ldr	r0, [r7, #0]
 800c75e:	f012 fc55 	bl	801f00c <ip4addr_ntoa>
 800c762:	4603      	mov	r3, r0
 800c764:	4619      	mov	r1, r3
 800c766:	4867      	ldr	r0, [pc, #412]	; (800c904 <UDP_Receive_Callback+0x1f4>)
 800c768:	f013 fd48 	bl	80201fc <iprintf>
					IpMatched = 1;
 800c76c:	2301      	movs	r3, #1
 800c76e:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	085b      	lsrs	r3, r3, #1
 800c774:	b2db      	uxtb	r3, r3
 800c776:	4619      	mov	r1, r3
 800c778:	4a63      	ldr	r2, [pc, #396]	; (800c908 <UDP_Receive_Callback+0x1f8>)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800c782:	7dfb      	ldrb	r3, [r7, #23]
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	7dfa      	ldrb	r2, [r7, #23]
 800c78c:	0852      	lsrs	r2, r2, #1
 800c78e:	b2d2      	uxtb	r2, r2
 800c790:	3301      	adds	r3, #1
 800c792:	b2d9      	uxtb	r1, r3
 800c794:	4b5d      	ldr	r3, [pc, #372]	; (800c90c <UDP_Receive_Callback+0x1fc>)
 800c796:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	3301      	adds	r3, #1
 800c79c:	75fb      	strb	r3, [r7, #23]
 800c79e:	4b57      	ldr	r3, [pc, #348]	; (800c8fc <UDP_Receive_Callback+0x1ec>)
 800c7a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c7a4:	7dfa      	ldrb	r2, [r7, #23]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d3cd      	bcc.n	800c746 <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800c7aa:	4b54      	ldr	r3, [pc, #336]	; (800c8fc <UDP_Receive_Callback+0x1ec>)
 800c7ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c7b0:	7dfa      	ldrb	r2, [r7, #23]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d935      	bls.n	800c822 <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f00f ffe8 	bl	801c78c <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800c7bc:	6838      	ldr	r0, [r7, #0]
 800c7be:	f012 fc25 	bl	801f00c <ip4addr_ntoa>
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	7dfb      	ldrb	r3, [r7, #23]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	4851      	ldr	r0, [pc, #324]	; (800c910 <UDP_Receive_Callback+0x200>)
 800c7ca:	f013 fd17 	bl	80201fc <iprintf>
			return;
 800c7ce:	e08f      	b.n	800c8f0 <UDP_Receive_Callback+0x1e0>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	75fb      	strb	r3, [r7, #23]
 800c7d4:	e00a      	b.n	800c7ec <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800c7d6:	4b48      	ldr	r3, [pc, #288]	; (800c8f8 <UDP_Receive_Callback+0x1e8>)
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	4948      	ldr	r1, [pc, #288]	; (800c900 <UDP_Receive_Callback+0x1f0>)
 800c7de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d009      	beq.n	800c7fa <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	75fb      	strb	r3, [r7, #23]
 800c7ec:	4b43      	ldr	r3, [pc, #268]	; (800c8fc <UDP_Receive_Callback+0x1ec>)
 800c7ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c7f2:	7dfa      	ldrb	r2, [r7, #23]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d3ee      	bcc.n	800c7d6 <UDP_Receive_Callback+0xc6>
 800c7f8:	e000      	b.n	800c7fc <UDP_Receive_Callback+0xec>
			{
				break;
 800c7fa:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800c7fc:	4b3f      	ldr	r3, [pc, #252]	; (800c8fc <UDP_Receive_Callback+0x1ec>)
 800c7fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c802:	7dfa      	ldrb	r2, [r7, #23]
 800c804:	429a      	cmp	r2, r3
 800c806:	d90e      	bls.n	800c826 <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f00f ffbf 	bl	801c78c <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
 800c810:	4619      	mov	r1, r3
 800c812:	4840      	ldr	r0, [pc, #256]	; (800c914 <UDP_Receive_Callback+0x204>)
 800c814:	f013 fcf2 	bl	80201fc <iprintf>
			return;
 800c818:	e06a      	b.n	800c8f0 <UDP_Receive_Callback+0x1e0>
		}
		break;
	default:
		pbuf_free(p);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f00f ffb6 	bl	801c78c <pbuf_free>
		return;
 800c820:	e066      	b.n	800c8f0 <UDP_Receive_Callback+0x1e0>
		break;
 800c822:	bf00      	nop
 800c824:	e000      	b.n	800c828 <UDP_Receive_Callback+0x118>
		break;
 800c826:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800c828:	4b34      	ldr	r3, [pc, #208]	; (800c8fc <UDP_Receive_Callback+0x1ec>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d002      	beq.n	800c836 <UDP_Receive_Callback+0x126>
 800c830:	2b02      	cmp	r3, #2
 800c832:	d049      	beq.n	800c8c8 <UDP_Receive_Callback+0x1b8>
		printf("\nDATA RECEIVED:%u\n",Length);
		break;

	default:
		/* Do Nothing */
		break;
 800c834:	e059      	b.n	800c8ea <UDP_Receive_Callback+0x1da>
		Interrupt_clock = HAL_GetTick();
 800c836:	f006 fcd7 	bl	80131e8 <HAL_GetTick>
 800c83a:	4603      	mov	r3, r0
 800c83c:	4a36      	ldr	r2, [pc, #216]	; (800c918 <UDP_Receive_Callback+0x208>)
 800c83e:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800c840:	4b36      	ldr	r3, [pc, #216]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c842:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c846:	461a      	mov	r2, r3
 800c848:	8abb      	ldrh	r3, [r7, #20]
 800c84a:	4413      	add	r3, r2
 800c84c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c850:	dd24      	ble.n	800c89c <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800c852:	4b32      	ldr	r3, [pc, #200]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c854:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c858:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800c85c:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800c85e:	4b2f      	ldr	r3, [pc, #188]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c860:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c864:	461a      	mov	r2, r3
 800c866:	4b2d      	ldr	r3, [pc, #180]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c868:	18d0      	adds	r0, r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	8a7a      	ldrh	r2, [r7, #18]
 800c870:	4619      	mov	r1, r3
 800c872:	f013 fbb3 	bl	801ffdc <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	8a7b      	ldrh	r3, [r7, #18]
 800c87c:	18d1      	adds	r1, r2, r3
 800c87e:	8aba      	ldrh	r2, [r7, #20]
 800c880:	8a7b      	ldrh	r3, [r7, #18]
 800c882:	1ad3      	subs	r3, r2, r3
 800c884:	461a      	mov	r2, r3
 800c886:	4825      	ldr	r0, [pc, #148]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c888:	f013 fba8 	bl	801ffdc <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800c88c:	8aba      	ldrh	r2, [r7, #20]
 800c88e:	8a7b      	ldrh	r3, [r7, #18]
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	b29a      	uxth	r2, r3
 800c894:	4b21      	ldr	r3, [pc, #132]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c896:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800c89a:	e026      	b.n	800c8ea <UDP_Receive_Callback+0x1da>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800c89c:	4b1f      	ldr	r3, [pc, #124]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c89e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	4b1d      	ldr	r3, [pc, #116]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c8a6:	18d0      	adds	r0, r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	8aba      	ldrh	r2, [r7, #20]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	f013 fb94 	bl	801ffdc <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800c8b4:	4b19      	ldr	r3, [pc, #100]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c8b6:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800c8ba:	8abb      	ldrh	r3, [r7, #20]
 800c8bc:	4413      	add	r3, r2
 800c8be:	b29a      	uxth	r2, r3
 800c8c0:	4b16      	ldr	r3, [pc, #88]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c8c2:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800c8c6:	e010      	b.n	800c8ea <UDP_Receive_Callback+0x1da>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	8aba      	ldrh	r2, [r7, #20]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	4812      	ldr	r0, [pc, #72]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c8d2:	f013 fb83 	bl	801ffdc <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800c8d6:	4a11      	ldr	r2, [pc, #68]	; (800c91c <UDP_Receive_Callback+0x20c>)
 800c8d8:	8abb      	ldrh	r3, [r7, #20]
 800c8da:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		printf("\nDATA RECEIVED:%u\n",Length);
 800c8de:	8abb      	ldrh	r3, [r7, #20]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	480f      	ldr	r0, [pc, #60]	; (800c920 <UDP_Receive_Callback+0x210>)
 800c8e4:	f013 fc8a 	bl	80201fc <iprintf>
		break;
 800c8e8:	bf00      	nop
	}


	pbuf_free(p);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f00f ff4e 	bl	801c78c <pbuf_free>
}
 800c8f0:	3718      	adds	r7, #24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20004610 	.word	0x20004610
 800c8fc:	20000304 	.word	0x20000304
 800c900:	200045c0 	.word	0x200045c0
 800c904:	080244ac 	.word	0x080244ac
 800c908:	20001058 	.word	0x20001058
 800c90c:	20001080 	.word	0x20001080
 800c910:	080244b8 	.word	0x080244b8
 800c914:	080244e4 	.word	0x080244e4
 800c918:	20000e3c 	.word	0x20000e3c
 800c91c:	20003fbc 	.word	0x20003fbc
 800c920:	0802450c 	.word	0x0802450c

0800c924 <udpClient_connect>:
void udpClient_connect(void)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
	err_t err;
	uint8_t Traverser = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800c92e:	4ba6      	ldr	r3, [pc, #664]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d003      	beq.n	800c93e <udpClient_connect+0x1a>
 800c936:	2b02      	cmp	r3, #2
 800c938:	f000 80a1 	beq.w	800ca7e <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800c93c:	e13f      	b.n	800cbbe <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800c93e:	2300      	movs	r3, #0
 800c940:	71fb      	strb	r3, [r7, #7]
 800c942:	e094      	b.n	800ca6e <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	4aa0      	ldr	r2, [pc, #640]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c948:	3312      	adds	r3, #18
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4413      	add	r3, r2
 800c94e:	78db      	ldrb	r3, [r3, #3]
 800c950:	061a      	lsls	r2, r3, #24
 800c952:	79fb      	ldrb	r3, [r7, #7]
 800c954:	499c      	ldr	r1, [pc, #624]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	440b      	add	r3, r1
 800c95a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c95e:	041b      	lsls	r3, r3, #16
 800c960:	431a      	orrs	r2, r3
 800c962:	79fb      	ldrb	r3, [r7, #7]
 800c964:	4998      	ldr	r1, [pc, #608]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	440b      	add	r3, r1
 800c96a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c96e:	021b      	lsls	r3, r3, #8
 800c970:	431a      	orrs	r2, r3
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	4994      	ldr	r1, [pc, #592]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	440b      	add	r3, r1
 800c97a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c97e:	4313      	orrs	r3, r2
 800c980:	061a      	lsls	r2, r3, #24
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	4990      	ldr	r1, [pc, #576]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c986:	3312      	adds	r3, #18
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	440b      	add	r3, r1
 800c98c:	78db      	ldrb	r3, [r3, #3]
 800c98e:	0619      	lsls	r1, r3, #24
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	488d      	ldr	r0, [pc, #564]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4403      	add	r3, r0
 800c998:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c99c:	041b      	lsls	r3, r3, #16
 800c99e:	4319      	orrs	r1, r3
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	4889      	ldr	r0, [pc, #548]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4403      	add	r3, r0
 800c9a8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c9ac:	021b      	lsls	r3, r3, #8
 800c9ae:	4319      	orrs	r1, r3
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	4885      	ldr	r0, [pc, #532]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4403      	add	r3, r0
 800c9b8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c9bc:	430b      	orrs	r3, r1
 800c9be:	021b      	lsls	r3, r3, #8
 800c9c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	79fb      	ldrb	r3, [r7, #7]
 800c9c8:	497f      	ldr	r1, [pc, #508]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c9ca:	3312      	adds	r3, #18
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	440b      	add	r3, r1
 800c9d0:	78db      	ldrb	r3, [r3, #3]
 800c9d2:	0619      	lsls	r1, r3, #24
 800c9d4:	79fb      	ldrb	r3, [r7, #7]
 800c9d6:	487c      	ldr	r0, [pc, #496]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c9d8:	009b      	lsls	r3, r3, #2
 800c9da:	4403      	add	r3, r0
 800c9dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c9e0:	041b      	lsls	r3, r3, #16
 800c9e2:	4319      	orrs	r1, r3
 800c9e4:	79fb      	ldrb	r3, [r7, #7]
 800c9e6:	4878      	ldr	r0, [pc, #480]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4403      	add	r3, r0
 800c9ec:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	4319      	orrs	r1, r3
 800c9f4:	79fb      	ldrb	r3, [r7, #7]
 800c9f6:	4874      	ldr	r0, [pc, #464]	; (800cbc8 <udpClient_connect+0x2a4>)
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4403      	add	r3, r0
 800c9fc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ca00:	430b      	orrs	r3, r1
 800ca02:	0a1b      	lsrs	r3, r3, #8
 800ca04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ca08:	ea42 0103 	orr.w	r1, r2, r3
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	4a6e      	ldr	r2, [pc, #440]	; (800cbc8 <udpClient_connect+0x2a4>)
 800ca10:	3312      	adds	r3, #18
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	78db      	ldrb	r3, [r3, #3]
 800ca18:	061a      	lsls	r2, r3, #24
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	486a      	ldr	r0, [pc, #424]	; (800cbc8 <udpClient_connect+0x2a4>)
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4403      	add	r3, r0
 800ca22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ca26:	041b      	lsls	r3, r3, #16
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	79fb      	ldrb	r3, [r7, #7]
 800ca2c:	4866      	ldr	r0, [pc, #408]	; (800cbc8 <udpClient_connect+0x2a4>)
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4403      	add	r3, r0
 800ca32:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ca36:	021b      	lsls	r3, r3, #8
 800ca38:	431a      	orrs	r2, r3
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
 800ca3c:	4862      	ldr	r0, [pc, #392]	; (800cbc8 <udpClient_connect+0x2a4>)
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4403      	add	r3, r0
 800ca42:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ca46:	4313      	orrs	r3, r2
 800ca48:	0e1a      	lsrs	r2, r3, #24
 800ca4a:	79fb      	ldrb	r3, [r7, #7]
 800ca4c:	430a      	orrs	r2, r1
 800ca4e:	495f      	ldr	r1, [pc, #380]	; (800cbcc <udpClient_connect+0x2a8>)
 800ca50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800ca54:	79fb      	ldrb	r3, [r7, #7]
 800ca56:	79fa      	ldrb	r2, [r7, #7]
 800ca58:	495b      	ldr	r1, [pc, #364]	; (800cbc8 <udpClient_connect+0x2a4>)
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 800ca62:	4b5b      	ldr	r3, [pc, #364]	; (800cbd0 <udpClient_connect+0x2ac>)
 800ca64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800ca68:	79fb      	ldrb	r3, [r7, #7]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	71fb      	strb	r3, [r7, #7]
 800ca6e:	4b56      	ldr	r3, [pc, #344]	; (800cbc8 <udpClient_connect+0x2a4>)
 800ca70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ca74:	79fa      	ldrb	r2, [r7, #7]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	f4ff af64 	bcc.w	800c944 <udpClient_connect+0x20>
		break;
 800ca7c:	e09f      	b.n	800cbbe <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ca7e:	2300      	movs	r3, #0
 800ca80:	71fb      	strb	r3, [r7, #7]
 800ca82:	e094      	b.n	800cbae <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	4a50      	ldr	r2, [pc, #320]	; (800cbc8 <udpClient_connect+0x2a4>)
 800ca88:	33ae      	adds	r3, #174	; 0xae
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	785b      	ldrb	r3, [r3, #1]
 800ca90:	061a      	lsls	r2, r3, #24
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	494c      	ldr	r1, [pc, #304]	; (800cbc8 <udpClient_connect+0x2a4>)
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	440b      	add	r3, r1
 800ca9a:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800ca9e:	041b      	lsls	r3, r3, #16
 800caa0:	431a      	orrs	r2, r3
 800caa2:	79fb      	ldrb	r3, [r7, #7]
 800caa4:	4948      	ldr	r1, [pc, #288]	; (800cbc8 <udpClient_connect+0x2a4>)
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	440b      	add	r3, r1
 800caaa:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800caae:	021b      	lsls	r3, r3, #8
 800cab0:	431a      	orrs	r2, r3
 800cab2:	79fb      	ldrb	r3, [r7, #7]
 800cab4:	4944      	ldr	r1, [pc, #272]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	440b      	add	r3, r1
 800caba:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800cabe:	4313      	orrs	r3, r2
 800cac0:	061a      	lsls	r2, r3, #24
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	4940      	ldr	r1, [pc, #256]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cac6:	33ae      	adds	r3, #174	; 0xae
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	440b      	add	r3, r1
 800cacc:	785b      	ldrb	r3, [r3, #1]
 800cace:	0619      	lsls	r1, r3, #24
 800cad0:	79fb      	ldrb	r3, [r7, #7]
 800cad2:	483d      	ldr	r0, [pc, #244]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4403      	add	r3, r0
 800cad8:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800cadc:	041b      	lsls	r3, r3, #16
 800cade:	4319      	orrs	r1, r3
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	4839      	ldr	r0, [pc, #228]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	4403      	add	r3, r0
 800cae8:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	4319      	orrs	r1, r3
 800caf0:	79fb      	ldrb	r3, [r7, #7]
 800caf2:	4835      	ldr	r0, [pc, #212]	; (800cbc8 <udpClient_connect+0x2a4>)
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4403      	add	r3, r0
 800caf8:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800cafc:	430b      	orrs	r3, r1
 800cafe:	021b      	lsls	r3, r3, #8
 800cb00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb04:	431a      	orrs	r2, r3
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	492f      	ldr	r1, [pc, #188]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb0a:	33ae      	adds	r3, #174	; 0xae
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	440b      	add	r3, r1
 800cb10:	785b      	ldrb	r3, [r3, #1]
 800cb12:	0619      	lsls	r1, r3, #24
 800cb14:	79fb      	ldrb	r3, [r7, #7]
 800cb16:	482c      	ldr	r0, [pc, #176]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4403      	add	r3, r0
 800cb1c:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800cb20:	041b      	lsls	r3, r3, #16
 800cb22:	4319      	orrs	r1, r3
 800cb24:	79fb      	ldrb	r3, [r7, #7]
 800cb26:	4828      	ldr	r0, [pc, #160]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4403      	add	r3, r0
 800cb2c:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800cb30:	021b      	lsls	r3, r3, #8
 800cb32:	4319      	orrs	r1, r3
 800cb34:	79fb      	ldrb	r3, [r7, #7]
 800cb36:	4824      	ldr	r0, [pc, #144]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4403      	add	r3, r0
 800cb3c:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800cb40:	430b      	orrs	r3, r1
 800cb42:	0a1b      	lsrs	r3, r3, #8
 800cb44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb48:	ea42 0103 	orr.w	r1, r2, r3
 800cb4c:	79fb      	ldrb	r3, [r7, #7]
 800cb4e:	4a1e      	ldr	r2, [pc, #120]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb50:	33ae      	adds	r3, #174	; 0xae
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	785b      	ldrb	r3, [r3, #1]
 800cb58:	061a      	lsls	r2, r3, #24
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	481a      	ldr	r0, [pc, #104]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	4403      	add	r3, r0
 800cb62:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800cb66:	041b      	lsls	r3, r3, #16
 800cb68:	431a      	orrs	r2, r3
 800cb6a:	79fb      	ldrb	r3, [r7, #7]
 800cb6c:	4816      	ldr	r0, [pc, #88]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	4403      	add	r3, r0
 800cb72:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800cb76:	021b      	lsls	r3, r3, #8
 800cb78:	431a      	orrs	r2, r3
 800cb7a:	79fb      	ldrb	r3, [r7, #7]
 800cb7c:	4812      	ldr	r0, [pc, #72]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	4403      	add	r3, r0
 800cb82:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800cb86:	4313      	orrs	r3, r2
 800cb88:	0e1a      	lsrs	r2, r3, #24
 800cb8a:	79fb      	ldrb	r3, [r7, #7]
 800cb8c:	430a      	orrs	r2, r1
 800cb8e:	490f      	ldr	r1, [pc, #60]	; (800cbcc <udpClient_connect+0x2a8>)
 800cb90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800cb94:	79fb      	ldrb	r3, [r7, #7]
 800cb96:	79fa      	ldrb	r2, [r7, #7]
 800cb98:	490b      	ldr	r1, [pc, #44]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	440b      	add	r3, r1
 800cb9e:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 800cba2:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <udpClient_connect+0x2ac>)
 800cba4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	71fb      	strb	r3, [r7, #7]
 800cbae:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <udpClient_connect+0x2a4>)
 800cbb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cbb4:	79fa      	ldrb	r2, [r7, #7]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	f4ff af64 	bcc.w	800ca84 <udpClient_connect+0x160>
		break;
 800cbbc:	bf00      	nop
	}
}
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr
 800cbc8:	20000304 	.word	0x20000304
 800cbcc:	200045c0 	.word	0x200045c0
 800cbd0:	20004614 	.word	0x20004614

0800cbd4 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	607a      	str	r2, [r7, #4]
 800cbe0:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800cbe6:	7afb      	ldrb	r3, [r7, #11]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cbee:	4619      	mov	r1, r3
 800cbf0:	2036      	movs	r0, #54	; 0x36
 800cbf2:	f00f fae9 	bl	801c1c8 <pbuf_alloc>
 800cbf6:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	des_port[0] = 8080;
 800cbf8:	4b14      	ldr	r3, [pc, #80]	; (800cc4c <udpClient_send+0x78>)
 800cbfa:	f641 7290 	movw	r2, #8080	; 0x1f90
 800cbfe:	801a      	strh	r2, [r3, #0]

	if (txBuf != NULL)
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d01d      	beq.n	800cc42 <udpClient_send+0x6e>
	{
		pbuf_take(txBuf, data, len);
 800cc06:	7afb      	ldrb	r3, [r7, #11]
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	68f9      	ldr	r1, [r7, #12]
 800cc0e:	6938      	ldr	r0, [r7, #16]
 800cc10:	f00f ffb6 	bl	801cb80 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800cc14:	4b0e      	ldr	r3, [pc, #56]	; (800cc50 <udpClient_send+0x7c>)
 800cc16:	6818      	ldr	r0, [r3, #0]
 800cc18:	4b0c      	ldr	r3, [pc, #48]	; (800cc4c <udpClient_send+0x78>)
 800cc1a:	881b      	ldrh	r3, [r3, #0]
 800cc1c:	1d3a      	adds	r2, r7, #4
 800cc1e:	6939      	ldr	r1, [r7, #16]
 800cc20:	f010 fb56 	bl	801d2d0 <udp_sendto>
 800cc24:	4603      	mov	r3, r0
 800cc26:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800cc28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d005      	beq.n	800cc3c <udpClient_send+0x68>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800cc30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc34:	4619      	mov	r1, r3
 800cc36:	4807      	ldr	r0, [pc, #28]	; (800cc54 <udpClient_send+0x80>)
 800cc38:	f013 fae0 	bl	80201fc <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800cc3c:	6938      	ldr	r0, [r7, #16]
 800cc3e:	f00f fda5 	bl	801c78c <pbuf_free>
	}
}
 800cc42:	bf00      	nop
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20004614 	.word	0x20004614
 800cc50:	2000463c 	.word	0x2000463c
 800cc54:	08024520 	.word	0x08024520

0800cc58 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800cc5c:	4b07      	ldr	r3, [pc, #28]	; (800cc7c <Is_There_EI_Data+0x24>)
 800cc5e:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800cc62:	4b06      	ldr	r3, [pc, #24]	; (800cc7c <Is_There_EI_Data+0x24>)
 800cc64:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d001      	beq.n	800cc70 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e000      	b.n	800cc72 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800cc70:	2300      	movs	r3, #0
	}
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	20003fbc 	.word	0x20003fbc

0800cc80 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800cc86:	4b15      	ldr	r3, [pc, #84]	; (800ccdc <Get_Eth_Byte+0x5c>)
 800cc88:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	b291      	uxth	r1, r2
 800cc90:	4a12      	ldr	r2, [pc, #72]	; (800ccdc <Get_Eth_Byte+0x5c>)
 800cc92:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800cc96:	461a      	mov	r2, r3
 800cc98:	4b10      	ldr	r3, [pc, #64]	; (800ccdc <Get_Eth_Byte+0x5c>)
 800cc9a:	5c9b      	ldrb	r3, [r3, r2]
 800cc9c:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800cc9e:	4b0f      	ldr	r3, [pc, #60]	; (800ccdc <Get_Eth_Byte+0x5c>)
 800cca0:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800cca4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cca8:	d313      	bcc.n	800ccd2 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800ccaa:	4b0c      	ldr	r3, [pc, #48]	; (800ccdc <Get_Eth_Byte+0x5c>)
 800ccac:	2200      	movs	r2, #0
 800ccae:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800ccb2:	4b0a      	ldr	r3, [pc, #40]	; (800ccdc <Get_Eth_Byte+0x5c>)
 800ccb4:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ccb8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ccbc:	d109      	bne.n	800ccd2 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800ccbe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	4805      	ldr	r0, [pc, #20]	; (800ccdc <Get_Eth_Byte+0x5c>)
 800ccc6:	f013 f9b1 	bl	802002c <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800ccca:	4b04      	ldr	r3, [pc, #16]	; (800ccdc <Get_Eth_Byte+0x5c>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	20003fbc 	.word	0x20003fbc

0800cce0 <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	460b      	mov	r3, r1
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800ccf2:	7afb      	ldrb	r3, [r7, #11]
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	2036      	movs	r0, #54	; 0x36
 800ccfe:	f00f fa63 	bl	801c1c8 <pbuf_alloc>
 800cd02:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d01a      	beq.n	800cd40 <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 800cd0a:	7afb      	ldrb	r3, [r7, #11]
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	461a      	mov	r2, r3
 800cd10:	68f9      	ldr	r1, [r7, #12]
 800cd12:	6938      	ldr	r0, [r7, #16]
 800cd14:	f00f ff34 	bl	801cb80 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 800cd18:	4b0b      	ldr	r3, [pc, #44]	; (800cd48 <Udp_Send_SigInfo+0x68>)
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	1d3a      	adds	r2, r7, #4
 800cd1e:	f243 0339 	movw	r3, #12345	; 0x3039
 800cd22:	6939      	ldr	r1, [r7, #16]
 800cd24:	f010 fad4 	bl	801d2d0 <udp_sendto>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800cd2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d002      	beq.n	800cd3a <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 800cd34:	4805      	ldr	r0, [pc, #20]	; (800cd4c <Udp_Send_SigInfo+0x6c>)
 800cd36:	f013 fafd 	bl	8020334 <puts>
		}
		pbuf_free(txBuf);
 800cd3a:	6938      	ldr	r0, [r7, #16]
 800cd3c:	f00f fd26 	bl	801c78c <pbuf_free>
	}
}
 800cd40:	bf00      	nop
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	2000463c 	.word	0x2000463c
 800cd4c:	08024548 	.word	0x08024548

0800cd50 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b094      	sub	sp, #80	; 0x50
 800cd54:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800cd56:	4b38      	ldr	r3, [pc, #224]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd58:	4a38      	ldr	r2, [pc, #224]	; (800ce3c <MX_CAN2_Init+0xec>)
 800cd5a:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800cd5c:	4b36      	ldr	r3, [pc, #216]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd5e:	2212      	movs	r2, #18
 800cd60:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800cd62:	4b35      	ldr	r3, [pc, #212]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800cd68:	4b33      	ldr	r3, [pc, #204]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd6a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800cd6e:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800cd70:	4b31      	ldr	r3, [pc, #196]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cd76:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800cd78:	4b2f      	ldr	r3, [pc, #188]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cd7e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800cd80:	4b2d      	ldr	r3, [pc, #180]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800cd86:	4b2c      	ldr	r3, [pc, #176]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800cd8c:	4b2a      	ldr	r3, [pc, #168]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800cd92:	4b29      	ldr	r3, [pc, #164]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd94:	2201      	movs	r2, #1
 800cd96:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800cd98:	4b27      	ldr	r3, [pc, #156]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800cd9e:	4b26      	ldr	r3, [pc, #152]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800cda4:	4824      	ldr	r0, [pc, #144]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cda6:	f006 fa4f 	bl	8013248 <HAL_CAN_Init>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800cdb0:	f004 fc8e 	bl	80116d0 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800cdb8:	2304      	movs	r3, #4
 800cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800cdc0:	f242 0360 	movw	r3, #8288	; 0x2060
 800cdc4:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800cdca:	f242 0360 	movw	r3, #8288	; 0x2060
 800cdce:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800cddc:	2302      	movs	r3, #2
 800cdde:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800cde0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cde4:	4619      	mov	r1, r3
 800cde6:	4814      	ldr	r0, [pc, #80]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800cde8:	f006 fb74 	bl	80134d4 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800cdec:	2301      	movs	r3, #1
 800cdee:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800cdf0:	2305      	movs	r3, #5
 800cdf2:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800cdf8:	f242 1320 	movw	r3, #8480	; 0x2120
 800cdfc:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800ce02:	f242 1320 	movw	r3, #8480	; 0x2120
 800ce06:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800ce10:	2301      	movs	r3, #1
 800ce12:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800ce14:	2302      	movs	r3, #2
 800ce16:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800ce18:	463b      	mov	r3, r7
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4806      	ldr	r0, [pc, #24]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800ce1e:	f006 fb59 	bl	80134d4 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800ce22:	4805      	ldr	r0, [pc, #20]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800ce24:	f006 fc42 	bl	80136ac <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800ce28:	2110      	movs	r1, #16
 800ce2a:	4803      	ldr	r0, [pc, #12]	; (800ce38 <MX_CAN2_Init+0xe8>)
 800ce2c:	f006 fe88 	bl	8013b40 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800ce30:	bf00      	nop
 800ce32:	3750      	adds	r7, #80	; 0x50
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20008ef4 	.word	0x20008ef4
 800ce3c:	40006800 	.word	0x40006800

0800ce40 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b08a      	sub	sp, #40	; 0x28
 800ce44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800ce46:	4b34      	ldr	r3, [pc, #208]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce48:	4a34      	ldr	r2, [pc, #208]	; (800cf1c <MX_CAN3_Init+0xdc>)
 800ce4a:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800ce4c:	4b32      	ldr	r3, [pc, #200]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce4e:	2205      	movs	r2, #5
 800ce50:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800ce52:	4b31      	ldr	r3, [pc, #196]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800ce58:	4b2f      	ldr	r3, [pc, #188]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce5a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800ce5e:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800ce60:	4b2d      	ldr	r3, [pc, #180]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce62:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800ce66:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800ce68:	4b2b      	ldr	r3, [pc, #172]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800ce6e:	4b2a      	ldr	r3, [pc, #168]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce70:	4a2a      	ldr	r2, [pc, #168]	; (800cf1c <MX_CAN3_Init+0xdc>)
 800ce72:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800ce74:	4b28      	ldr	r3, [pc, #160]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce76:	2212      	movs	r2, #18
 800ce78:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800ce7a:	4b27      	ldr	r3, [pc, #156]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800ce80:	4b25      	ldr	r3, [pc, #148]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800ce86:	4b24      	ldr	r3, [pc, #144]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ce8c:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800ce8e:	4b22      	ldr	r3, [pc, #136]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ce94:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800ce96:	4b20      	ldr	r3, [pc, #128]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800ce9c:	4b1e      	ldr	r3, [pc, #120]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800cea2:	4b1d      	ldr	r3, [pc, #116]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800cea8:	4b1b      	ldr	r3, [pc, #108]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ceaa:	2201      	movs	r2, #1
 800ceac:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800ceae:	4b1a      	ldr	r3, [pc, #104]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800ceb4:	4b18      	ldr	r3, [pc, #96]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800ceba:	4817      	ldr	r0, [pc, #92]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800cebc:	f006 f9c4 	bl	8013248 <HAL_CAN_Init>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800cec6:	f004 fc03 	bl	80116d0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800ceca:	2301      	movs	r3, #1
 800cecc:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800cece:	2301      	movs	r3, #1
 800ced0:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800ced6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ceda:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800cedc:	2300      	movs	r3, #0
 800cede:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800cee0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cee4:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800ceea:	2300      	movs	r3, #0
 800ceec:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800ceee:	2301      	movs	r3, #1
 800cef0:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800cef2:	2306      	movs	r3, #6
 800cef4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800cef6:	463b      	mov	r3, r7
 800cef8:	4619      	mov	r1, r3
 800cefa:	4807      	ldr	r0, [pc, #28]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800cefc:	f006 faea 	bl	80134d4 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800cf00:	4805      	ldr	r0, [pc, #20]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800cf02:	f006 fbd3 	bl	80136ac <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800cf06:	2102      	movs	r1, #2
 800cf08:	4803      	ldr	r0, [pc, #12]	; (800cf18 <MX_CAN3_Init+0xd8>)
 800cf0a:	f006 fe19 	bl	8013b40 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800cf0e:	bf00      	nop
 800cf10:	3728      	adds	r7, #40	; 0x28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20008f58 	.word	0x20008f58
 800cf1c:	40003400 	.word	0x40003400

0800cf20 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b08c      	sub	sp, #48	; 0x30
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf28:	f107 031c 	add.w	r3, r7, #28
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	605a      	str	r2, [r3, #4]
 800cf32:	609a      	str	r2, [r3, #8]
 800cf34:	60da      	str	r2, [r3, #12]
 800cf36:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a44      	ldr	r2, [pc, #272]	; (800d050 <HAL_CAN_MspInit+0x130>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d144      	bne.n	800cfcc <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800cf42:	4b44      	ldr	r3, [pc, #272]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf46:	4a43      	ldr	r2, [pc, #268]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf4c:	6413      	str	r3, [r2, #64]	; 0x40
 800cf4e:	4b41      	ldr	r3, [pc, #260]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf56:	61bb      	str	r3, [r7, #24]
 800cf58:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800cf5a:	4b3e      	ldr	r3, [pc, #248]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5e:	4a3d      	ldr	r2, [pc, #244]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cf64:	6413      	str	r3, [r2, #64]	; 0x40
 800cf66:	4b3b      	ldr	r3, [pc, #236]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800cf72:	4b38      	ldr	r3, [pc, #224]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf76:	4a37      	ldr	r2, [pc, #220]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf78:	f043 0302 	orr.w	r3, r3, #2
 800cf7c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf7e:	4b35      	ldr	r3, [pc, #212]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cf80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf82:	f003 0302 	and.w	r3, r3, #2
 800cf86:	613b      	str	r3, [r7, #16]
 800cf88:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800cf8a:	2360      	movs	r3, #96	; 0x60
 800cf8c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf8e:	2302      	movs	r3, #2
 800cf90:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf96:	2303      	movs	r3, #3
 800cf98:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800cf9a:	2309      	movs	r3, #9
 800cf9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf9e:	f107 031c 	add.w	r3, r7, #28
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	482c      	ldr	r0, [pc, #176]	; (800d058 <HAL_CAN_MspInit+0x138>)
 800cfa6:	f008 fc2b 	bl	8015800 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800cfaa:	2200      	movs	r2, #0
 800cfac:	2104      	movs	r1, #4
 800cfae:	2040      	movs	r0, #64	; 0x40
 800cfb0:	f007 f8fb 	bl	80141aa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800cfb4:	2040      	movs	r0, #64	; 0x40
 800cfb6:	f007 f914 	bl	80141e2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800cfba:	2201      	movs	r2, #1
 800cfbc:	2104      	movs	r1, #4
 800cfbe:	2041      	movs	r0, #65	; 0x41
 800cfc0:	f007 f8f3 	bl	80141aa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800cfc4:	2041      	movs	r0, #65	; 0x41
 800cfc6:	f007 f90c 	bl	80141e2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800cfca:	e03d      	b.n	800d048 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a22      	ldr	r2, [pc, #136]	; (800d05c <HAL_CAN_MspInit+0x13c>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d138      	bne.n	800d048 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800cfd6:	4b1f      	ldr	r3, [pc, #124]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	4a1e      	ldr	r2, [pc, #120]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cfdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cfe0:	6413      	str	r3, [r2, #64]	; 0x40
 800cfe2:	4b1c      	ldr	r3, [pc, #112]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800cfee:	4b19      	ldr	r3, [pc, #100]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff2:	4a18      	ldr	r2, [pc, #96]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cff4:	f043 0301 	orr.w	r3, r3, #1
 800cff8:	6313      	str	r3, [r2, #48]	; 0x30
 800cffa:	4b16      	ldr	r3, [pc, #88]	; (800d054 <HAL_CAN_MspInit+0x134>)
 800cffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	60bb      	str	r3, [r7, #8]
 800d004:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800d006:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800d00a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d00c:	2302      	movs	r3, #2
 800d00e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d010:	2300      	movs	r3, #0
 800d012:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d014:	2303      	movs	r3, #3
 800d016:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800d018:	230b      	movs	r3, #11
 800d01a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d01c:	f107 031c 	add.w	r3, r7, #28
 800d020:	4619      	mov	r1, r3
 800d022:	480f      	ldr	r0, [pc, #60]	; (800d060 <HAL_CAN_MspInit+0x140>)
 800d024:	f008 fbec 	bl	8015800 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800d028:	2200      	movs	r2, #0
 800d02a:	2100      	movs	r1, #0
 800d02c:	2069      	movs	r0, #105	; 0x69
 800d02e:	f007 f8bc 	bl	80141aa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800d032:	2069      	movs	r0, #105	; 0x69
 800d034:	f007 f8d5 	bl	80141e2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800d038:	2200      	movs	r2, #0
 800d03a:	2100      	movs	r1, #0
 800d03c:	206a      	movs	r0, #106	; 0x6a
 800d03e:	f007 f8b4 	bl	80141aa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800d042:	206a      	movs	r0, #106	; 0x6a
 800d044:	f007 f8cd 	bl	80141e2 <HAL_NVIC_EnableIRQ>
}
 800d048:	bf00      	nop
 800d04a:	3730      	adds	r7, #48	; 0x30
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	40006800 	.word	0x40006800
 800d054:	40023800 	.word	0x40023800
 800d058:	40020400 	.word	0x40020400
 800d05c:	40003400 	.word	0x40003400
 800d060:	40020000 	.word	0x40020000

0800d064 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	4603      	mov	r3, r0
 800d06c:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	827b      	strh	r3, [r7, #18]
	uint16_t uc_size = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	82fb      	strh	r3, [r7, #22]



	switch(EI_data.ProtocolType)
 800d076:	4b9e      	ldr	r3, [pc, #632]	; (800d2f0 <TransmitCanPkt+0x28c>)
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	f000 816f 	beq.w	800d35e <TransmitCanPkt+0x2fa>
 800d080:	2b03      	cmp	r3, #3
 800d082:	f300 820b 	bgt.w	800d49c <TransmitCanPkt+0x438>
 800d086:	2b01      	cmp	r3, #1
 800d088:	d003      	beq.n	800d092 <TransmitCanPkt+0x2e>
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	f000 80bc 	beq.w	800d208 <TransmitCanPkt+0x1a4>
 800d090:	e204      	b.n	800d49c <TransmitCanPkt+0x438>
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d092:	4b98      	ldr	r3, [pc, #608]	; (800d2f4 <TransmitCanPkt+0x290>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	0a1b      	lsrs	r3, r3, #8
 800d098:	f003 0301 	and.w	r3, r3, #1
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d003      	beq.n	800d0a8 <TransmitCanPkt+0x44>
		{
			printf("Stopping CAN Transmission\n");
 800d0a0:	4895      	ldr	r0, [pc, #596]	; (800d2f8 <TransmitCanPkt+0x294>)
 800d0a2:	f013 f947 	bl	8020334 <puts>
			return;
 800d0a6:	e1f9      	b.n	800d49c <TransmitCanPkt+0x438>
		}

		switch((int)Ken_idetifier)
 800d0a8:	88fb      	ldrh	r3, [r7, #6]
 800d0aa:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800d0ae:	f300 80a5 	bgt.w	800d1fc <TransmitCanPkt+0x198>
 800d0b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0b6:	dc0d      	bgt.n	800d0d4 <TransmitCanPkt+0x70>
 800d0b8:	f240 1219 	movw	r2, #281	; 0x119
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d021      	beq.n	800d104 <TransmitCanPkt+0xa0>
 800d0c0:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800d0c4:	f340 809a 	ble.w	800d1fc <TransmitCanPkt+0x198>
 800d0c8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	f200 8095 	bhi.w	800d1fc <TransmitCanPkt+0x198>
 800d0d2:	e036      	b.n	800d142 <TransmitCanPkt+0xde>
 800d0d4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800d0d8:	2b07      	cmp	r3, #7
 800d0da:	f200 808f 	bhi.w	800d1fc <TransmitCanPkt+0x198>
 800d0de:	a201      	add	r2, pc, #4	; (adr r2, 800d0e4 <TransmitCanPkt+0x80>)
 800d0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e4:	0800d167 	.word	0x0800d167
 800d0e8:	0800d167 	.word	0x0800d167
 800d0ec:	0800d191 	.word	0x0800d191
 800d0f0:	0800d191 	.word	0x0800d191
 800d0f4:	0800d1b5 	.word	0x0800d1b5
 800d0f8:	0800d1fd 	.word	0x0800d1fd
 800d0fc:	0800d1d9 	.word	0x0800d1d9
 800d100:	0800d1d9 	.word	0x0800d1d9
		{
		case EI_PROCESS_DATA:
			vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 800d104:	4b7a      	ldr	r3, [pc, #488]	; (800d2f0 <TransmitCanPkt+0x28c>)
 800d106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	011b      	lsls	r3, r3, #4
 800d10e:	b29a      	uxth	r2, r3
 800d110:	4b7a      	ldr	r3, [pc, #488]	; (800d2fc <TransmitCanPkt+0x298>)
 800d112:	801a      	strh	r2, [r3, #0]
			vEI_Transver_EI_To_MIE.ActualDataBytes = 11;
 800d114:	4b79      	ldr	r3, [pc, #484]	; (800d2fc <TransmitCanPkt+0x298>)
 800d116:	220b      	movs	r2, #11
 800d118:	801a      	strh	r2, [r3, #0]
			pp_ptr = &vEI_Transver_EI_To_MIE;
 800d11a:	4b78      	ldr	r3, [pc, #480]	; (800d2fc <TransmitCanPkt+0x298>)
 800d11c:	60fb      	str	r3, [r7, #12]
			uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 800d11e:	4b77      	ldr	r3, [pc, #476]	; (800d2fc <TransmitCanPkt+0x298>)
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	3302      	adds	r3, #2
 800d124:	82fb      	strh	r3, [r7, #22]
//			uc_size = 13;
			//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800d126:	8afb      	ldrh	r3, [r7, #22]
 800d128:	88fa      	ldrh	r2, [r7, #6]
 800d12a:	4619      	mov	r1, r3
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f000 f9d3 	bl	800d4d8 <sendCanPkts>
			if(Debug_flag == 1)
 800d132:	4b73      	ldr	r3, [pc, #460]	; (800d300 <TransmitCanPkt+0x29c>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b01      	cmp	r3, #1
 800d138:	d162      	bne.n	800d200 <TransmitCanPkt+0x19c>
			{
				printf("SENT SIGNAL DATA TO MIE\n");
 800d13a:	4872      	ldr	r0, [pc, #456]	; (800d304 <TransmitCanPkt+0x2a0>)
 800d13c:	f013 f8fa 	bl	8020334 <puts>
			}
			break;
 800d140:	e05e      	b.n	800d200 <TransmitCanPkt+0x19c>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800d142:	4b71      	ldr	r3, [pc, #452]	; (800d308 <TransmitCanPkt+0x2a4>)
 800d144:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800d146:	2316      	movs	r3, #22
 800d148:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800d14a:	4b6d      	ldr	r3, [pc, #436]	; (800d300 <TransmitCanPkt+0x29c>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d102      	bne.n	800d158 <TransmitCanPkt+0xf4>
			{
				printf("\nHealth 2 MIE\n");
 800d152:	486e      	ldr	r0, [pc, #440]	; (800d30c <TransmitCanPkt+0x2a8>)
 800d154:	f013 f8ee 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800d158:	8afb      	ldrh	r3, [r7, #22]
 800d15a:	88fa      	ldrh	r2, [r7, #6]
 800d15c:	4619      	mov	r1, r3
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f000 f9ba 	bl	800d4d8 <sendCanPkts>
			break;
 800d164:	e04f      	b.n	800d206 <TransmitCanPkt+0x1a2>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 800d166:	4b6a      	ldr	r3, [pc, #424]	; (800d310 <TransmitCanPkt+0x2ac>)
 800d168:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(EI_SELF_SHARING_t);
 800d16a:	2318      	movs	r3, #24
 800d16c:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800d16e:	8afb      	ldrh	r3, [r7, #22]
 800d170:	88fa      	ldrh	r2, [r7, #6]
 800d172:	4619      	mov	r1, r3
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 f9af 	bl	800d4d8 <sendCanPkts>
			if(Debug_flag == 1)
 800d17a:	4b61      	ldr	r3, [pc, #388]	; (800d300 <TransmitCanPkt+0x29c>)
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d140      	bne.n	800d204 <TransmitCanPkt+0x1a0>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 800d182:	4b63      	ldr	r3, [pc, #396]	; (800d310 <TransmitCanPkt+0x2ac>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	4619      	mov	r1, r3
 800d188:	4862      	ldr	r0, [pc, #392]	; (800d314 <TransmitCanPkt+0x2b0>)
 800d18a:	f013 f837 	bl	80201fc <iprintf>
			}
			break;
 800d18e:	e039      	b.n	800d204 <TransmitCanPkt+0x1a0>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 800d190:	4b61      	ldr	r3, [pc, #388]	; (800d318 <TransmitCanPkt+0x2b4>)
 800d192:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 800d194:	2346      	movs	r3, #70	; 0x46
 800d196:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800d198:	4b59      	ldr	r3, [pc, #356]	; (800d300 <TransmitCanPkt+0x29c>)
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d102      	bne.n	800d1a6 <TransmitCanPkt+0x142>
			{
				printf("\nSending V-Message 2-O\n");
 800d1a0:	485e      	ldr	r0, [pc, #376]	; (800d31c <TransmitCanPkt+0x2b8>)
 800d1a2:	f013 f8c7 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800d1a6:	8afb      	ldrh	r3, [r7, #22]
 800d1a8:	88fa      	ldrh	r2, [r7, #6]
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f000 f993 	bl	800d4d8 <sendCanPkts>
			break;
 800d1b2:	e028      	b.n	800d206 <TransmitCanPkt+0x1a2>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 800d1b4:	4b4f      	ldr	r3, [pc, #316]	; (800d2f4 <TransmitCanPkt+0x290>)
 800d1b6:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 800d1b8:	2308      	movs	r3, #8
 800d1ba:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800d1bc:	4b50      	ldr	r3, [pc, #320]	; (800d300 <TransmitCanPkt+0x29c>)
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d102      	bne.n	800d1ca <TransmitCanPkt+0x166>
			{
				printf("\nSending Fault Injection data 2-O\n");
 800d1c4:	4856      	ldr	r0, [pc, #344]	; (800d320 <TransmitCanPkt+0x2bc>)
 800d1c6:	f013 f8b5 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800d1ca:	8afb      	ldrh	r3, [r7, #22]
 800d1cc:	88fa      	ldrh	r2, [r7, #6]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 f981 	bl	800d4d8 <sendCanPkts>
			break;
 800d1d6:	e016      	b.n	800d206 <TransmitCanPkt+0x1a2>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 800d1d8:	4b52      	ldr	r3, [pc, #328]	; (800d324 <TransmitCanPkt+0x2c0>)
 800d1da:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(RELAYS_t);
 800d1dc:	2314      	movs	r3, #20
 800d1de:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800d1e0:	4b47      	ldr	r3, [pc, #284]	; (800d300 <TransmitCanPkt+0x29c>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d102      	bne.n	800d1ee <TransmitCanPkt+0x18a>
			{
				printf("Sending Relays-O\n");
 800d1e8:	484f      	ldr	r0, [pc, #316]	; (800d328 <TransmitCanPkt+0x2c4>)
 800d1ea:	f013 f8a3 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d1ee:	8afb      	ldrh	r3, [r7, #22]
 800d1f0:	88fa      	ldrh	r2, [r7, #6]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f000 f96f 	bl	800d4d8 <sendCanPkts>
			break;
 800d1fa:	e004      	b.n	800d206 <TransmitCanPkt+0x1a2>
		default:
			break;
 800d1fc:	bf00      	nop
 800d1fe:	e14d      	b.n	800d49c <TransmitCanPkt+0x438>
			break;
 800d200:	bf00      	nop
 800d202:	e14b      	b.n	800d49c <TransmitCanPkt+0x438>
			break;
 800d204:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 800d206:	e149      	b.n	800d49c <TransmitCanPkt+0x438>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 800d208:	88fb      	ldrh	r3, [r7, #6]
 800d20a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800d20e:	f300 8142 	bgt.w	800d496 <TransmitCanPkt+0x432>
 800d212:	f240 2207 	movw	r2, #519	; 0x207
 800d216:	4293      	cmp	r3, r2
 800d218:	da3d      	bge.n	800d296 <TransmitCanPkt+0x232>
 800d21a:	f240 2205 	movw	r2, #517	; 0x205
 800d21e:	4293      	cmp	r3, r2
 800d220:	f000 808e 	beq.w	800d340 <TransmitCanPkt+0x2dc>
 800d224:	f240 2205 	movw	r2, #517	; 0x205
 800d228:	4293      	cmp	r3, r2
 800d22a:	f300 8134 	bgt.w	800d496 <TransmitCanPkt+0x432>
 800d22e:	f240 1219 	movw	r2, #281	; 0x119
 800d232:	4293      	cmp	r3, r2
 800d234:	d009      	beq.n	800d24a <TransmitCanPkt+0x1e6>
 800d236:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800d23a:	f340 812c 	ble.w	800d496 <TransmitCanPkt+0x432>
 800d23e:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800d242:	2b01      	cmp	r3, #1
 800d244:	f200 8127 	bhi.w	800d496 <TransmitCanPkt+0x432>
 800d248:	e013      	b.n	800d272 <TransmitCanPkt+0x20e>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 800d24a:	4b38      	ldr	r3, [pc, #224]	; (800d32c <TransmitCanPkt+0x2c8>)
 800d24c:	60fb      	str	r3, [r7, #12]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 800d24e:	4b37      	ldr	r3, [pc, #220]	; (800d32c <TransmitCanPkt+0x2c8>)
 800d250:	881b      	ldrh	r3, [r3, #0]
 800d252:	3302      	adds	r3, #2
 800d254:	82fb      	strh	r3, [r7, #22]

			if(Debug_flag == 1)
 800d256:	4b2a      	ldr	r3, [pc, #168]	; (800d300 <TransmitCanPkt+0x29c>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d102      	bne.n	800d264 <TransmitCanPkt+0x200>
			{
				printf("Sending Signals 2 MIE\n");
 800d25e:	4834      	ldr	r0, [pc, #208]	; (800d330 <TransmitCanPkt+0x2cc>)
 800d260:	f013 f868 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d264:	8afb      	ldrh	r3, [r7, #22]
 800d266:	88fa      	ldrh	r2, [r7, #6]
 800d268:	4619      	mov	r1, r3
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f000 f934 	bl	800d4d8 <sendCanPkts>
			break;
 800d270:	e074      	b.n	800d35c <TransmitCanPkt+0x2f8>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 800d272:	4b30      	ldr	r3, [pc, #192]	; (800d334 <TransmitCanPkt+0x2d0>)
 800d274:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 800d276:	2304      	movs	r3, #4
 800d278:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800d27a:	4b21      	ldr	r3, [pc, #132]	; (800d300 <TransmitCanPkt+0x29c>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d102      	bne.n	800d288 <TransmitCanPkt+0x224>
			{
				printf("Sending Signals 2 MIE\n");
 800d282:	482b      	ldr	r0, [pc, #172]	; (800d330 <TransmitCanPkt+0x2cc>)
 800d284:	f013 f856 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d288:	8afb      	ldrh	r3, [r7, #22]
 800d28a:	88fa      	ldrh	r2, [r7, #6]
 800d28c:	4619      	mov	r1, r3
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f000 f922 	bl	800d4d8 <sendCanPkts>
			break;
 800d294:	e062      	b.n	800d35c <TransmitCanPkt+0x2f8>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 800d296:	4b28      	ldr	r3, [pc, #160]	; (800d338 <TransmitCanPkt+0x2d4>)
 800d298:	60fb      	str	r3, [r7, #12]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 800d29a:	4b15      	ldr	r3, [pc, #84]	; (800d2f0 <TransmitCanPkt+0x28c>)
 800d29c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d2a0:	f003 0307 	and.w	r3, r3, #7
 800d2a4:	82fb      	strh	r3, [r7, #22]
			if (uc_size != 0)
 800d2a6:	8afb      	ldrh	r3, [r7, #22]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d007      	beq.n	800d2bc <TransmitCanPkt+0x258>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 800d2ac:	4b10      	ldr	r3, [pc, #64]	; (800d2f0 <TransmitCanPkt+0x28c>)
 800d2ae:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d2b2:	08db      	lsrs	r3, r3, #3
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	82fb      	strh	r3, [r7, #22]
 800d2ba:	e004      	b.n	800d2c6 <TransmitCanPkt+0x262>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 800d2bc:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <TransmitCanPkt+0x28c>)
 800d2be:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d2c2:	08db      	lsrs	r3, r3, #3
 800d2c4:	82fb      	strh	r3, [r7, #22]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 800d2c6:	4a1c      	ldr	r2, [pc, #112]	; (800d338 <TransmitCanPkt+0x2d4>)
 800d2c8:	8afb      	ldrh	r3, [r7, #22]
 800d2ca:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 800d2cc:	8afb      	ldrh	r3, [r7, #22]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	82fb      	strh	r3, [r7, #22]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 800d2d2:	4b0b      	ldr	r3, [pc, #44]	; (800d300 <TransmitCanPkt+0x29c>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d102      	bne.n	800d2e0 <TransmitCanPkt+0x27c>
			{
				printf("Sending Relays 2 Other\n");
 800d2da:	4818      	ldr	r0, [pc, #96]	; (800d33c <TransmitCanPkt+0x2d8>)
 800d2dc:	f013 f82a 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d2e0:	8afb      	ldrh	r3, [r7, #22]
 800d2e2:	88fa      	ldrh	r2, [r7, #6]
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f000 f8f6 	bl	800d4d8 <sendCanPkts>
			break;
 800d2ec:	e036      	b.n	800d35c <TransmitCanPkt+0x2f8>
 800d2ee:	bf00      	nop
 800d2f0:	20000304 	.word	0x20000304
 800d2f4:	2000195c 	.word	0x2000195c
 800d2f8:	0802455c 	.word	0x0802455c
 800d2fc:	200010e4 	.word	0x200010e4
 800d300:	20000645 	.word	0x20000645
 800d304:	08024578 	.word	0x08024578
 800d308:	20001964 	.word	0x20001964
 800d30c:	08024590 	.word	0x08024590
 800d310:	20001854 	.word	0x20001854
 800d314:	080245a0 	.word	0x080245a0
 800d318:	20001884 	.word	0x20001884
 800d31c:	080245ac 	.word	0x080245ac
 800d320:	080245c4 	.word	0x080245c4
 800d324:	20002010 	.word	0x20002010
 800d328:	080245e8 	.word	0x080245e8
 800d32c:	200028cc 	.word	0x200028cc
 800d330:	080245fc 	.word	0x080245fc
 800d334:	200028a4 	.word	0x200028a4
 800d338:	20002ad0 	.word	0x20002ad0
 800d33c:	08024614 	.word	0x08024614

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 800d340:	4b58      	ldr	r3, [pc, #352]	; (800d4a4 <TransmitCanPkt+0x440>)
 800d342:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 800d344:	2308      	movs	r3, #8
 800d346:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 800d348:	4857      	ldr	r0, [pc, #348]	; (800d4a8 <TransmitCanPkt+0x444>)
 800d34a:	f012 fff3 	bl	8020334 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800d34e:	8afb      	ldrh	r3, [r7, #22]
 800d350:	88fa      	ldrh	r2, [r7, #6]
 800d352:	4619      	mov	r1, r3
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 f8bf 	bl	800d4d8 <sendCanPkts>
			break;
 800d35a:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 800d35c:	e09b      	b.n	800d496 <TransmitCanPkt+0x432>

	case MEDHA:
	{

		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 800d35e:	88fb      	ldrh	r3, [r7, #6]
 800d360:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800d364:	f300 8099 	bgt.w	800d49a <TransmitCanPkt+0x436>
 800d368:	f240 2207 	movw	r2, #519	; 0x207
 800d36c:	4293      	cmp	r3, r2
 800d36e:	da7e      	bge.n	800d46e <TransmitCanPkt+0x40a>
 800d370:	f240 2205 	movw	r2, #517	; 0x205
 800d374:	4293      	cmp	r3, r2
 800d376:	d06c      	beq.n	800d452 <TransmitCanPkt+0x3ee>
 800d378:	f240 2205 	movw	r2, #517	; 0x205
 800d37c:	4293      	cmp	r3, r2
 800d37e:	f300 808c 	bgt.w	800d49a <TransmitCanPkt+0x436>
 800d382:	f240 2202 	movw	r2, #514	; 0x202
 800d386:	4293      	cmp	r3, r2
 800d388:	f300 8087 	bgt.w	800d49a <TransmitCanPkt+0x436>
 800d38c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d390:	dc3b      	bgt.n	800d40a <TransmitCanPkt+0x3a6>
 800d392:	f240 1219 	movw	r2, #281	; 0x119
 800d396:	4293      	cmp	r3, r2
 800d398:	d007      	beq.n	800d3aa <TransmitCanPkt+0x346>
 800d39a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800d39e:	dd7c      	ble.n	800d49a <TransmitCanPkt+0x436>
 800d3a0:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d878      	bhi.n	800d49a <TransmitCanPkt+0x436>
 800d3a8:	e041      	b.n	800d42e <TransmitCanPkt+0x3ca>
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 800d3aa:	4b40      	ldr	r3, [pc, #256]	; (800d4ac <TransmitCanPkt+0x448>)
 800d3ac:	60fb      	str	r3, [r7, #12]

			uint16_t Length =  EI_data.Medha_Prms_st.NoofRelays%8;
 800d3ae:	4b40      	ldr	r3, [pc, #256]	; (800d4b0 <TransmitCanPkt+0x44c>)
 800d3b0:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800d3b4:	f003 0307 	and.w	r3, r3, #7
 800d3b8:	82bb      	strh	r3, [r7, #20]

			if(Length != 0)
 800d3ba:	8abb      	ldrh	r3, [r7, #20]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d007      	beq.n	800d3d0 <TransmitCanPkt+0x36c>
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8) + 1;
 800d3c0:	4b3b      	ldr	r3, [pc, #236]	; (800d4b0 <TransmitCanPkt+0x44c>)
 800d3c2:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800d3c6:	08db      	lsrs	r3, r3, #3
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	82bb      	strh	r3, [r7, #20]
 800d3ce:	e004      	b.n	800d3da <TransmitCanPkt+0x376>
			}
			else
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8);
 800d3d0:	4b37      	ldr	r3, [pc, #220]	; (800d4b0 <TransmitCanPkt+0x44c>)
 800d3d2:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800d3d6:	08db      	lsrs	r3, r3, #3
 800d3d8:	82bb      	strh	r3, [r7, #20]
			}

			Medha_Relay_Sts_st.ActualDataBytes =  Length;
 800d3da:	4a34      	ldr	r2, [pc, #208]	; (800d4ac <TransmitCanPkt+0x448>)
 800d3dc:	8abb      	ldrh	r3, [r7, #20]
 800d3de:	8013      	strh	r3, [r2, #0]
			uc_size =(Length + sizeof(Length)); /* +2 is by Considering */
 800d3e0:	8abb      	ldrh	r3, [r7, #20]
 800d3e2:	3302      	adds	r3, #2
 800d3e4:	82fb      	strh	r3, [r7, #22]

			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d3e6:	8afb      	ldrh	r3, [r7, #22]
 800d3e8:	88fa      	ldrh	r2, [r7, #6]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f000 f873 	bl	800d4d8 <sendCanPkts>
			if(Debug_flag == 1)
 800d3f2:	4b30      	ldr	r3, [pc, #192]	; (800d4b4 <TransmitCanPkt+0x450>)
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d14b      	bne.n	800d492 <TransmitCanPkt+0x42e>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 800d3fa:	f005 fef5 	bl	80131e8 <HAL_GetTick>
 800d3fe:	4603      	mov	r3, r0
 800d400:	4619      	mov	r1, r3
 800d402:	482d      	ldr	r0, [pc, #180]	; (800d4b8 <TransmitCanPkt+0x454>)
 800d404:	f012 fefa 	bl	80201fc <iprintf>
			}
			break;
 800d408:	e043      	b.n	800d492 <TransmitCanPkt+0x42e>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 800d40a:	4b2c      	ldr	r3, [pc, #176]	; (800d4bc <TransmitCanPkt+0x458>)
 800d40c:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 800d40e:	2308      	movs	r3, #8
 800d410:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800d412:	4b28      	ldr	r3, [pc, #160]	; (800d4b4 <TransmitCanPkt+0x450>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d102      	bne.n	800d420 <TransmitCanPkt+0x3bc>
			{
				printf("\nSending_2_O\n");
 800d41a:	4829      	ldr	r0, [pc, #164]	; (800d4c0 <TransmitCanPkt+0x45c>)
 800d41c:	f012 ff8a 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d420:	8afb      	ldrh	r3, [r7, #22]
 800d422:	88fa      	ldrh	r2, [r7, #6]
 800d424:	4619      	mov	r1, r3
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 f856 	bl	800d4d8 <sendCanPkts>
			break;
 800d42c:	e032      	b.n	800d494 <TransmitCanPkt+0x430>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800d42e:	4b25      	ldr	r3, [pc, #148]	; (800d4c4 <TransmitCanPkt+0x460>)
 800d430:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800d432:	2316      	movs	r3, #22
 800d434:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800d436:	4b1f      	ldr	r3, [pc, #124]	; (800d4b4 <TransmitCanPkt+0x450>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d102      	bne.n	800d444 <TransmitCanPkt+0x3e0>
			{
				printf("\nHealth 2 MIE\n");
 800d43e:	4822      	ldr	r0, [pc, #136]	; (800d4c8 <TransmitCanPkt+0x464>)
 800d440:	f012 ff78 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d444:	8afb      	ldrh	r3, [r7, #22]
 800d446:	88fa      	ldrh	r2, [r7, #6]
 800d448:	4619      	mov	r1, r3
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 f844 	bl	800d4d8 <sendCanPkts>
			break;
 800d450:	e020      	b.n	800d494 <TransmitCanPkt+0x430>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 800d452:	4b1e      	ldr	r3, [pc, #120]	; (800d4cc <TransmitCanPkt+0x468>)
 800d454:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 800d456:	2304      	movs	r3, #4
 800d458:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 800d45a:	4813      	ldr	r0, [pc, #76]	; (800d4a8 <TransmitCanPkt+0x444>)
 800d45c:	f012 ff6a 	bl	8020334 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d460:	8afb      	ldrh	r3, [r7, #22]
 800d462:	88fa      	ldrh	r2, [r7, #6]
 800d464:	4619      	mov	r1, r3
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f000 f836 	bl	800d4d8 <sendCanPkts>
			break;
 800d46c:	e012      	b.n	800d494 <TransmitCanPkt+0x430>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 800d46e:	4b18      	ldr	r3, [pc, #96]	; (800d4d0 <TransmitCanPkt+0x46c>)
 800d470:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 800d472:	2384      	movs	r3, #132	; 0x84
 800d474:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800d476:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <TransmitCanPkt+0x450>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d102      	bne.n	800d484 <TransmitCanPkt+0x420>
			{
				printf("\nRelay Data 2-O\n");
 800d47e:	4815      	ldr	r0, [pc, #84]	; (800d4d4 <TransmitCanPkt+0x470>)
 800d480:	f012 ff58 	bl	8020334 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800d484:	8afb      	ldrh	r3, [r7, #22]
 800d486:	88fa      	ldrh	r2, [r7, #6]
 800d488:	4619      	mov	r1, r3
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f000 f824 	bl	800d4d8 <sendCanPkts>
			break;
 800d490:	e000      	b.n	800d494 <TransmitCanPkt+0x430>
			break;
 800d492:	bf00      	nop
		}

		break;
 800d494:	e001      	b.n	800d49a <TransmitCanPkt+0x436>
		break; /* case SIEMENS: break */
 800d496:	bf00      	nop
 800d498:	e000      	b.n	800d49c <TransmitCanPkt+0x438>
		break;
 800d49a:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	2000289c 	.word	0x2000289c
 800d4a8:	080245c4 	.word	0x080245c4
 800d4ac:	2000266c 	.word	0x2000266c
 800d4b0:	20000304 	.word	0x20000304
 800d4b4:	20000645 	.word	0x20000645
 800d4b8:	0802462c 	.word	0x0802462c
 800d4bc:	200026b0 	.word	0x200026b0
 800d4c0:	08024650 	.word	0x08024650
 800d4c4:	20001964 	.word	0x20001964
 800d4c8:	08024590 	.word	0x08024590
 800d4cc:	200026ac 	.word	0x200026ac
 800d4d0:	200026c8 	.word	0x200026c8
 800d4d4:	08024660 	.word	0x08024660

0800d4d8 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b088      	sub	sp, #32
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	61fb      	str	r3, [r7, #28]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	617b      	str	r3, [r7, #20]
	while(j > 0)
 800d4f2:	e019      	b.n	800d528 <sendCanPkts+0x50>
	{
		if(j < 7)
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	2b06      	cmp	r3, #6
 800d4f8:	dc07      	bgt.n	800d50a <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 800d4fa:	88f8      	ldrh	r0, [r7, #6]
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	6979      	ldr	r1, [r7, #20]
 800d504:	f000 f818 	bl	800d538 <CAN_transmit>
 800d508:	e005      	b.n	800d516 <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 800d50a:	88f8      	ldrh	r0, [r7, #6]
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	2208      	movs	r2, #8
 800d510:	6979      	ldr	r1, [r7, #20]
 800d512:	f000 f811 	bl	800d538 <CAN_transmit>
		}
		cptr += 7;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	3307      	adds	r3, #7
 800d51a:	617b      	str	r3, [r7, #20]
		j-=7;
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	3b07      	subs	r3, #7
 800d520:	61fb      	str	r3, [r7, #28]
		seqNo++;
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	3301      	adds	r3, #1
 800d526:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dce2      	bgt.n	800d4f4 <sendCanPkts+0x1c>
	}
}
 800d52e:	bf00      	nop
 800d530:	bf00      	nop
 800d532:	3720      	adds	r7, #32
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
 800d544:	603b      	str	r3, [r7, #0]
	char i=0;
 800d546:	2300      	movs	r3, #0
 800d548:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 800d54a:	f005 fe4d 	bl	80131e8 <HAL_GetTick>
 800d54e:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	b2da      	uxtb	r2, r3
 800d554:	4b4d      	ldr	r3, [pc, #308]	; (800d68c <CAN_transmit+0x154>)
 800d556:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 800d558:	2300      	movs	r3, #0
 800d55a:	77fb      	strb	r3, [r7, #31]
 800d55c:	e00a      	b.n	800d574 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 800d55e:	7ffb      	ldrb	r3, [r7, #31]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	441a      	add	r2, r3
 800d564:	7ffb      	ldrb	r3, [r7, #31]
 800d566:	3301      	adds	r3, #1
 800d568:	7811      	ldrb	r1, [r2, #0]
 800d56a:	4a48      	ldr	r2, [pc, #288]	; (800d68c <CAN_transmit+0x154>)
 800d56c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 800d56e:	7ffb      	ldrb	r3, [r7, #31]
 800d570:	3301      	adds	r3, #1
 800d572:	77fb      	strb	r3, [r7, #31]
 800d574:	7ffa      	ldrb	r2, [r7, #31]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3b01      	subs	r3, #1
 800d57a:	429a      	cmp	r2, r3
 800d57c:	dbef      	blt.n	800d55e <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d584:	da3b      	bge.n	800d5fe <CAN_transmit+0xc6>
	{
		while(len!=0)
 800d586:	e036      	b.n	800d5f6 <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 800d588:	4b41      	ldr	r3, [pc, #260]	; (800d690 <CAN_transmit+0x158>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	4a3f      	ldr	r2, [pc, #252]	; (800d690 <CAN_transmit+0x158>)
 800d592:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 800d594:	4b3e      	ldr	r3, [pc, #248]	; (800d690 <CAN_transmit+0x158>)
 800d596:	2200      	movs	r2, #0
 800d598:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4a3c      	ldr	r2, [pc, #240]	; (800d690 <CAN_transmit+0x158>)
 800d59e:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 800d5a4:	4b3b      	ldr	r3, [pc, #236]	; (800d694 <CAN_transmit+0x15c>)
 800d5a6:	4a39      	ldr	r2, [pc, #228]	; (800d68c <CAN_transmit+0x154>)
 800d5a8:	4939      	ldr	r1, [pc, #228]	; (800d690 <CAN_transmit+0x158>)
 800d5aa:	483b      	ldr	r0, [pc, #236]	; (800d698 <CAN_transmit+0x160>)
 800d5ac:	f006 f8c2 	bl	8013734 <HAL_CAN_AddTxMessage>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	4b39      	ldr	r3, [pc, #228]	; (800d69c <CAN_transmit+0x164>)
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	4b38      	ldr	r3, [pc, #224]	; (800d69c <CAN_transmit+0x164>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d00d      	beq.n	800d5dc <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 800d5c0:	4837      	ldr	r0, [pc, #220]	; (800d6a0 <CAN_transmit+0x168>)
 800d5c2:	f012 feb7 	bl	8020334 <puts>
				return;
 800d5c6:	e05e      	b.n	800d686 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800d5c8:	69b8      	ldr	r0, [r7, #24]
 800d5ca:	f7fe ff8b 	bl	800c4e4 <HAL_Elaps_Ticks>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b64      	cmp	r3, #100	; 0x64
 800d5d2:	d903      	bls.n	800d5dc <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 800d5d4:	4832      	ldr	r0, [pc, #200]	; (800d6a0 <CAN_transmit+0x168>)
 800d5d6:	f012 fead 	bl	8020334 <puts>
					return;
 800d5da:	e054      	b.n	800d686 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 800d5dc:	4b2d      	ldr	r3, [pc, #180]	; (800d694 <CAN_transmit+0x15c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	482d      	ldr	r0, [pc, #180]	; (800d698 <CAN_transmit+0x160>)
 800d5e4:	f006 f976 	bl	80138d4 <HAL_CAN_IsTxMessagePending>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	75bb      	strb	r3, [r7, #22]
 800d5ec:	7dbb      	ldrb	r3, [r7, #22]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1ea      	bne.n	800d5c8 <CAN_transmit+0x90>
				}
			}

			len=0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1c5      	bne.n	800d588 <CAN_transmit+0x50>
 800d5fc:	e043      	b.n	800d686 <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800d5fe:	4929      	ldr	r1, [pc, #164]	; (800d6a4 <CAN_transmit+0x16c>)
 800d600:	4829      	ldr	r0, [pc, #164]	; (800d6a8 <CAN_transmit+0x170>)
 800d602:	f7f2 fe1d 	bl	8000240 <strcmp>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d03b      	beq.n	800d684 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 800d60c:	e036      	b.n	800d67c <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 800d60e:	4b27      	ldr	r3, [pc, #156]	; (800d6ac <CAN_transmit+0x174>)
 800d610:	2200      	movs	r2, #0
 800d612:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	4a25      	ldr	r2, [pc, #148]	; (800d6ac <CAN_transmit+0x174>)
 800d618:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 800d61a:	4b24      	ldr	r3, [pc, #144]	; (800d6ac <CAN_transmit+0x174>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a22      	ldr	r2, [pc, #136]	; (800d6ac <CAN_transmit+0x174>)
 800d624:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800d626:	2300      	movs	r3, #0
 800d628:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 800d62a:	4b21      	ldr	r3, [pc, #132]	; (800d6b0 <CAN_transmit+0x178>)
 800d62c:	4a17      	ldr	r2, [pc, #92]	; (800d68c <CAN_transmit+0x154>)
 800d62e:	491f      	ldr	r1, [pc, #124]	; (800d6ac <CAN_transmit+0x174>)
 800d630:	4820      	ldr	r0, [pc, #128]	; (800d6b4 <CAN_transmit+0x17c>)
 800d632:	f006 f87f 	bl	8013734 <HAL_CAN_AddTxMessage>
 800d636:	4603      	mov	r3, r0
 800d638:	461a      	mov	r2, r3
 800d63a:	4b18      	ldr	r3, [pc, #96]	; (800d69c <CAN_transmit+0x164>)
 800d63c:	701a      	strb	r2, [r3, #0]
 800d63e:	4b17      	ldr	r3, [pc, #92]	; (800d69c <CAN_transmit+0x164>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00d      	beq.n	800d662 <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 800d646:	481c      	ldr	r0, [pc, #112]	; (800d6b8 <CAN_transmit+0x180>)
 800d648:	f012 fe74 	bl	8020334 <puts>
				return;
 800d64c:	e01b      	b.n	800d686 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800d64e:	69b8      	ldr	r0, [r7, #24]
 800d650:	f7fe ff48 	bl	800c4e4 <HAL_Elaps_Ticks>
 800d654:	4603      	mov	r3, r0
 800d656:	2b64      	cmp	r3, #100	; 0x64
 800d658:	d903      	bls.n	800d662 <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 800d65a:	4817      	ldr	r0, [pc, #92]	; (800d6b8 <CAN_transmit+0x180>)
 800d65c:	f012 fe6a 	bl	8020334 <puts>
					return;
 800d660:	e011      	b.n	800d686 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 800d662:	4b13      	ldr	r3, [pc, #76]	; (800d6b0 <CAN_transmit+0x178>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4619      	mov	r1, r3
 800d668:	4812      	ldr	r0, [pc, #72]	; (800d6b4 <CAN_transmit+0x17c>)
 800d66a:	f006 f933 	bl	80138d4 <HAL_CAN_IsTxMessagePending>
 800d66e:	4603      	mov	r3, r0
 800d670:	75fb      	strb	r3, [r7, #23]
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1ea      	bne.n	800d64e <CAN_transmit+0x116>
				}
			}
			len=0;
 800d678:	2300      	movs	r3, #0
 800d67a:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1c5      	bne.n	800d60e <CAN_transmit+0xd6>
 800d682:	e000      	b.n	800d686 <CAN_transmit+0x14e>
			return;
 800d684:	bf00      	nop
		}
	}
}
 800d686:	3720      	adds	r7, #32
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	20008ee8 	.word	0x20008ee8
 800d690:	20008e68 	.word	0x20008e68
 800d694:	20008e98 	.word	0x20008e98
 800d698:	20008ef4 	.word	0x20008ef4
 800d69c:	20008ef0 	.word	0x20008ef0
 800d6a0:	08024670 	.word	0x08024670
 800d6a4:	08024680 	.word	0x08024680
 800d6a8:	20000305 	.word	0x20000305
 800d6ac:	20008e80 	.word	0x20008e80
 800d6b0:	20008e9c 	.word	0x20008e9c
 800d6b4:	20008f58 	.word	0x20008f58
 800d6b8:	0802468c 	.word	0x0802468c

0800d6bc <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4a3e      	ldr	r2, [pc, #248]	; (800d7c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d175      	bne.n	800d7ba <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 800d6ce:	4b3e      	ldr	r3, [pc, #248]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d6d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6da:	d104      	bne.n	800d6e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 800d6dc:	4b3a      	ldr	r3, [pc, #232]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d6de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 800d6e6:	4b39      	ldr	r3, [pc, #228]	; (800d7cc <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800d6e8:	4a39      	ldr	r2, [pc, #228]	; (800d7d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	4839      	ldr	r0, [pc, #228]	; (800d7d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800d6ee:	f006 f915 	bl	801391c <HAL_CAN_GetRxMessage>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d001      	beq.n	800d6fc <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 800d6f8:	f003 ffea 	bl	80116d0 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 800d6fc:	4b32      	ldr	r3, [pc, #200]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d6fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	4a30      	ldr	r2, [pc, #192]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d706:	011b      	lsls	r3, r3, #4
 800d708:	4413      	add	r3, r2
 800d70a:	330f      	adds	r3, #15
 800d70c:	2203      	movs	r2, #3
 800d70e:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 800d710:	4b2f      	ldr	r3, [pc, #188]	; (800d7d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800d712:	691a      	ldr	r2, [r3, #16]
 800d714:	4b2c      	ldr	r3, [pc, #176]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d716:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	b2d1      	uxtb	r1, r2
 800d71e:	4a2a      	ldr	r2, [pc, #168]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d720:	011b      	lsls	r3, r3, #4
 800d722:	4413      	add	r3, r2
 800d724:	330c      	adds	r3, #12
 800d726:	460a      	mov	r2, r1
 800d728:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 800d72a:	4b29      	ldr	r3, [pc, #164]	; (800d7d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800d72c:	689a      	ldr	r2, [r3, #8]
 800d72e:	4b26      	ldr	r3, [pc, #152]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d730:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	b2d1      	uxtb	r1, r2
 800d738:	4a23      	ldr	r2, [pc, #140]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	4413      	add	r3, r2
 800d73e:	330d      	adds	r3, #13
 800d740:	460a      	mov	r2, r1
 800d742:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 800d744:	4b22      	ldr	r3, [pc, #136]	; (800d7d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800d746:	68da      	ldr	r2, [r3, #12]
 800d748:	4b1f      	ldr	r3, [pc, #124]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d74a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d74e:	881b      	ldrh	r3, [r3, #0]
 800d750:	b2d1      	uxtb	r1, r2
 800d752:	4a1d      	ldr	r2, [pc, #116]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d754:	011b      	lsls	r3, r3, #4
 800d756:	4413      	add	r3, r2
 800d758:	330e      	adds	r3, #14
 800d75a:	460a      	mov	r2, r1
 800d75c:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 800d75e:	4b1a      	ldr	r3, [pc, #104]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d760:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	4618      	mov	r0, r3
 800d768:	4b19      	ldr	r3, [pc, #100]	; (800d7d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	4916      	ldr	r1, [pc, #88]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d76e:	0103      	lsls	r3, r0, #4
 800d770:	440b      	add	r3, r1
 800d772:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 800d774:	4b14      	ldr	r3, [pc, #80]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d776:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	4a12      	ldr	r2, [pc, #72]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d77e:	011b      	lsls	r3, r3, #4
 800d780:	4413      	add	r3, r2
 800d782:	330e      	adds	r3, #14
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d117      	bne.n	800d7ba <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 800d78a:	4b0f      	ldr	r3, [pc, #60]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d78c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	011b      	lsls	r3, r3, #4
 800d794:	4a0c      	ldr	r2, [pc, #48]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d796:	4413      	add	r3, r2
 800d798:	3304      	adds	r3, #4
 800d79a:	490c      	ldr	r1, [pc, #48]	; (800d7cc <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800d79c:	461a      	mov	r2, r3
 800d79e:	460b      	mov	r3, r1
 800d7a0:	cb03      	ldmia	r3!, {r0, r1}
 800d7a2:	6010      	str	r0, [r2, #0]
 800d7a4:	6051      	str	r1, [r2, #4]
			canRead.In++;
 800d7a6:	4b08      	ldr	r3, [pc, #32]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d7a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	4b05      	ldr	r3, [pc, #20]	; (800d7c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800d7b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d7b8:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	40003400 	.word	0x40003400
 800d7c8:	20004e64 	.word	0x20004e64
 800d7cc:	20008ee0 	.word	0x20008ee0
 800d7d0:	20008ebc 	.word	0x20008ebc
 800d7d4:	20008f58 	.word	0x20008f58

0800d7d8 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 800d7e0:	4b42      	ldr	r3, [pc, #264]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d7e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7ec:	d104      	bne.n	800d7f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 800d7ee:	4b3f      	ldr	r3, [pc, #252]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d7f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 800d7f8:	4b3d      	ldr	r3, [pc, #244]	; (800d8f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800d7fa:	4a3e      	ldr	r2, [pc, #248]	; (800d8f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800d7fc:	2101      	movs	r1, #1
 800d7fe:	483e      	ldr	r0, [pc, #248]	; (800d8f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 800d800:	f006 f88c 	bl	801391c <HAL_CAN_GetRxMessage>
 800d804:	4603      	mov	r3, r0
 800d806:	461a      	mov	r2, r3
 800d808:	4b3c      	ldr	r3, [pc, #240]	; (800d8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800d80a:	701a      	strb	r2, [r3, #0]
 800d80c:	4b3b      	ldr	r3, [pc, #236]	; (800d8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d007      	beq.n	800d824 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 800d814:	4b39      	ldr	r3, [pc, #228]	; (800d8fc <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	4619      	mov	r1, r3
 800d81a:	4839      	ldr	r0, [pc, #228]	; (800d900 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800d81c:	f012 fcee 	bl	80201fc <iprintf>
		Error_Handler();
 800d820:	f003 ff56 	bl	80116d0 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 800d824:	4b31      	ldr	r3, [pc, #196]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d826:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	4a2f      	ldr	r2, [pc, #188]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d82e:	011b      	lsls	r3, r3, #4
 800d830:	4413      	add	r3, r2
 800d832:	330f      	adds	r3, #15
 800d834:	2202      	movs	r2, #2
 800d836:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 800d838:	4b2e      	ldr	r3, [pc, #184]	; (800d8f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800d83a:	691a      	ldr	r2, [r3, #16]
 800d83c:	4b2b      	ldr	r3, [pc, #172]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d83e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	b2d1      	uxtb	r1, r2
 800d846:	4a29      	ldr	r2, [pc, #164]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d848:	011b      	lsls	r3, r3, #4
 800d84a:	4413      	add	r3, r2
 800d84c:	330c      	adds	r3, #12
 800d84e:	460a      	mov	r2, r1
 800d850:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 800d852:	4b28      	ldr	r3, [pc, #160]	; (800d8f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800d854:	689a      	ldr	r2, [r3, #8]
 800d856:	4b25      	ldr	r3, [pc, #148]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d858:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	b2d1      	uxtb	r1, r2
 800d860:	4a22      	ldr	r2, [pc, #136]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d862:	011b      	lsls	r3, r3, #4
 800d864:	4413      	add	r3, r2
 800d866:	330d      	adds	r3, #13
 800d868:	460a      	mov	r2, r1
 800d86a:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 800d86c:	4b21      	ldr	r3, [pc, #132]	; (800d8f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800d86e:	68da      	ldr	r2, [r3, #12]
 800d870:	4b1e      	ldr	r3, [pc, #120]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d872:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d876:	881b      	ldrh	r3, [r3, #0]
 800d878:	b2d1      	uxtb	r1, r2
 800d87a:	4a1c      	ldr	r2, [pc, #112]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d87c:	011b      	lsls	r3, r3, #4
 800d87e:	4413      	add	r3, r2
 800d880:	330e      	adds	r3, #14
 800d882:	460a      	mov	r2, r1
 800d884:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 800d886:	4b19      	ldr	r3, [pc, #100]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d888:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d88c:	881b      	ldrh	r3, [r3, #0]
 800d88e:	4618      	mov	r0, r3
 800d890:	4b18      	ldr	r3, [pc, #96]	; (800d8f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	4915      	ldr	r1, [pc, #84]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d896:	0103      	lsls	r3, r0, #4
 800d898:	440b      	add	r3, r1
 800d89a:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 800d89c:	4b13      	ldr	r3, [pc, #76]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d89e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d8a2:	881b      	ldrh	r3, [r3, #0]
 800d8a4:	4a11      	ldr	r2, [pc, #68]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d8a6:	011b      	lsls	r3, r3, #4
 800d8a8:	4413      	add	r3, r2
 800d8aa:	330e      	adds	r3, #14
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d117      	bne.n	800d8e2 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 800d8b2:	4b0e      	ldr	r3, [pc, #56]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d8b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	011b      	lsls	r3, r3, #4
 800d8bc:	4a0b      	ldr	r2, [pc, #44]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d8be:	4413      	add	r3, r2
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	490b      	ldr	r1, [pc, #44]	; (800d8f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	cb03      	ldmia	r3!, {r0, r1}
 800d8ca:	6010      	str	r0, [r2, #0]
 800d8cc:	6051      	str	r1, [r2, #4]
		canRead.In++;
 800d8ce:	4b07      	ldr	r3, [pc, #28]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d8d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d8d4:	881b      	ldrh	r3, [r3, #0]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	4b04      	ldr	r3, [pc, #16]	; (800d8ec <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800d8dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d8e0:	801a      	strh	r2, [r3, #0]
	}
}
 800d8e2:	bf00      	nop
 800d8e4:	3708      	adds	r7, #8
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	20004e64 	.word	0x20004e64
 800d8f0:	20008ed8 	.word	0x20008ed8
 800d8f4:	20008ea0 	.word	0x20008ea0
 800d8f8:	20008ef4 	.word	0x20008ef4
 800d8fc:	20008ef0 	.word	0x20008ef0
 800d900:	0802469c 	.word	0x0802469c

0800d904 <canDataReady>:


unsigned char canDataReady()
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 800d90e:	4b27      	ldr	r3, [pc, #156]	; (800d9ac <canDataReady+0xa8>)
 800d910:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d914:	881a      	ldrh	r2, [r3, #0]
 800d916:	4b25      	ldr	r3, [pc, #148]	; (800d9ac <canDataReady+0xa8>)
 800d918:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d91c:	885b      	ldrh	r3, [r3, #2]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d101      	bne.n	800d926 <canDataReady+0x22>
	{
		return 0;
 800d922:	2300      	movs	r3, #0
 800d924:	e03e      	b.n	800d9a4 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800d926:	4b21      	ldr	r3, [pc, #132]	; (800d9ac <canDataReady+0xa8>)
 800d928:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d92c:	885b      	ldrh	r3, [r3, #2]
 800d92e:	3301      	adds	r3, #1
 800d930:	607b      	str	r3, [r7, #4]
 800d932:	e02e      	b.n	800d992 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 800d934:	4b1d      	ldr	r3, [pc, #116]	; (800d9ac <canDataReady+0xa8>)
 800d936:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d93a:	885b      	ldrh	r3, [r3, #2]
 800d93c:	011b      	lsls	r3, r3, #4
 800d93e:	4a1b      	ldr	r2, [pc, #108]	; (800d9ac <canDataReady+0xa8>)
 800d940:	1898      	adds	r0, r3, r2
 800d942:	4b1a      	ldr	r3, [pc, #104]	; (800d9ac <canDataReady+0xa8>)
 800d944:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	011b      	lsls	r3, r3, #4
 800d94c:	4a17      	ldr	r2, [pc, #92]	; (800d9ac <canDataReady+0xa8>)
 800d94e:	4413      	add	r3, r2
 800d950:	2210      	movs	r2, #16
 800d952:	4619      	mov	r1, r3
 800d954:	f012 fb32 	bl	801ffbc <memcmp>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d116      	bne.n	800d98c <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 800d95e:	4b13      	ldr	r3, [pc, #76]	; (800d9ac <canDataReady+0xa8>)
 800d960:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d964:	885b      	ldrh	r3, [r3, #2]
 800d966:	011b      	lsls	r3, r3, #4
 800d968:	4a10      	ldr	r2, [pc, #64]	; (800d9ac <canDataReady+0xa8>)
 800d96a:	4413      	add	r3, r2
 800d96c:	2210      	movs	r2, #16
 800d96e:	2100      	movs	r1, #0
 800d970:	4618      	mov	r0, r3
 800d972:	f012 fb5b 	bl	802002c <memset>
			canRead.Out++;
 800d976:	4b0d      	ldr	r3, [pc, #52]	; (800d9ac <canDataReady+0xa8>)
 800d978:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d97c:	885b      	ldrh	r3, [r3, #2]
 800d97e:	3301      	adds	r3, #1
 800d980:	b29a      	uxth	r2, r3
 800d982:	4b0a      	ldr	r3, [pc, #40]	; (800d9ac <canDataReady+0xa8>)
 800d984:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d988:	805a      	strh	r2, [r3, #2]
			break;
 800d98a:	e00a      	b.n	800d9a2 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3301      	adds	r3, #1
 800d990:	607b      	str	r3, [r7, #4]
 800d992:	4b06      	ldr	r3, [pc, #24]	; (800d9ac <canDataReady+0xa8>)
 800d994:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	461a      	mov	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d3c8      	bcc.n	800d934 <canDataReady+0x30>
		}
	}
	return 1;
 800d9a2:	2301      	movs	r3, #1
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	20004e64 	.word	0x20004e64

0800d9b0 <readCanToStructs>:

void readCanToStructs(void)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b08e      	sub	sp, #56	; 0x38
 800d9b4:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d9bc:	2300      	movs	r3, #0
 800d9be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 800d9cc:	4bc0      	ldr	r3, [pc, #768]	; (800dcd0 <readCanToStructs+0x320>)
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b03      	cmp	r3, #3
 800d9d2:	f002 86b7 	beq.w	8010744 <readCanToStructs+0x2d94>
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	f302 86bb 	bgt.w	8010752 <readCanToStructs+0x2da2>
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d004      	beq.n	800d9ea <readCanToStructs+0x3a>
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	f001 87fe 	beq.w	800f9e2 <readCanToStructs+0x2032>
		/* __________ MEDHA _________ */
	}
	break;

	default:
		break;
 800d9e6:	f002 beb4 	b.w	8010752 <readCanToStructs+0x2da2>
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d9ea:	4bba      	ldr	r3, [pc, #744]	; (800dcd4 <readCanToStructs+0x324>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	09db      	lsrs	r3, r3, #7
 800d9f0:	f003 0301 	and.w	r3, r3, #1
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f042 86ae 	bne.w	8010756 <readCanToStructs+0x2da6>
		while(canDataReady())
 800d9fa:	f001 b92f 	b.w	800ec5c <readCanToStructs+0x12ac>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 800d9fe:	4bb6      	ldr	r3, [pc, #728]	; (800dcd8 <readCanToStructs+0x328>)
 800da00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800da04:	885b      	ldrh	r3, [r3, #2]
 800da06:	4ab4      	ldr	r2, [pc, #720]	; (800dcd8 <readCanToStructs+0x328>)
 800da08:	011b      	lsls	r3, r3, #4
 800da0a:	4413      	add	r3, r2
 800da0c:	330f      	adds	r3, #15
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	3b01      	subs	r3, #1
 800da12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 800da16:	4bb0      	ldr	r3, [pc, #704]	; (800dcd8 <readCanToStructs+0x328>)
 800da18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800da1c:	885b      	ldrh	r3, [r3, #2]
 800da1e:	4aae      	ldr	r2, [pc, #696]	; (800dcd8 <readCanToStructs+0x328>)
 800da20:	011b      	lsls	r3, r3, #4
 800da22:	4413      	add	r3, r2
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800da2a:	f201 80f4 	bhi.w	800ec16 <readCanToStructs+0x1266>
 800da2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da32:	d80a      	bhi.n	800da4a <readCanToStructs+0x9a>
 800da34:	f240 1203 	movw	r2, #259	; 0x103
 800da38:	4293      	cmp	r3, r2
 800da3a:	d01f      	beq.n	800da7c <readCanToStructs+0xcc>
 800da3c:	f240 1209 	movw	r2, #265	; 0x109
 800da40:	4293      	cmp	r3, r2
 800da42:	f000 80f1 	beq.w	800dc28 <readCanToStructs+0x278>
				break;
 800da46:	f001 b8e6 	b.w	800ec16 <readCanToStructs+0x1266>
 800da4a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800da4e:	2b07      	cmp	r3, #7
 800da50:	f201 80e1 	bhi.w	800ec16 <readCanToStructs+0x1266>
 800da54:	a201      	add	r2, pc, #4	; (adr r2, 800da5c <readCanToStructs+0xac>)
 800da56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5a:	bf00      	nop
 800da5c:	0800ddfd 	.word	0x0800ddfd
 800da60:	0800e005 	.word	0x0800e005
 800da64:	0800e1dd 	.word	0x0800e1dd
 800da68:	0800e3f7 	.word	0x0800e3f7
 800da6c:	0800e60d 	.word	0x0800e60d
 800da70:	0800ec17 	.word	0x0800ec17
 800da74:	0800e7a1 	.word	0x0800e7a1
 800da78:	0800e9db 	.word	0x0800e9db
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800da7c:	4b97      	ldr	r3, [pc, #604]	; (800dcdc <readCanToStructs+0x32c>)
 800da7e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800da80:	4b95      	ldr	r3, [pc, #596]	; (800dcd8 <readCanToStructs+0x328>)
 800da82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800da86:	885b      	ldrh	r3, [r3, #2]
 800da88:	4a93      	ldr	r2, [pc, #588]	; (800dcd8 <readCanToStructs+0x328>)
 800da8a:	011b      	lsls	r3, r3, #4
 800da8c:	4413      	add	r3, r2
 800da8e:	3304      	adds	r3, #4
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800da96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d110      	bne.n	800dac0 <readCanToStructs+0x110>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800da9e:	2206      	movs	r2, #6
 800daa0:	2100      	movs	r1, #0
 800daa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daa4:	f012 fac2 	bl	802002c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800daa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daac:	4a8c      	ldr	r2, [pc, #560]	; (800dce0 <readCanToStructs+0x330>)
 800daae:	f240 4112 	movw	r1, #1042	; 0x412
 800dab2:	fb01 f303 	mul.w	r3, r1, r3
 800dab6:	4413      	add	r3, r2
 800dab8:	f203 2307 	addw	r3, r3, #519	; 0x207
 800dabc:	2200      	movs	r2, #0
 800dabe:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 800dac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dac4:	4a86      	ldr	r2, [pc, #536]	; (800dce0 <readCanToStructs+0x330>)
 800dac6:	f240 4112 	movw	r1, #1042	; 0x412
 800daca:	fb01 f303 	mul.w	r3, r1, r3
 800dace:	4413      	add	r3, r2
 800dad0:	f203 2307 	addw	r3, r3, #519	; 0x207
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800dada:	429a      	cmp	r2, r3
 800dadc:	d015      	beq.n	800db0a <readCanToStructs+0x15a>
					printf("GPS Packet Seq no MisMatch\n");
 800dade:	4881      	ldr	r0, [pc, #516]	; (800dce4 <readCanToStructs+0x334>)
 800dae0:	f012 fc28 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800dae4:	2206      	movs	r2, #6
 800dae6:	2100      	movs	r1, #0
 800dae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daea:	f012 fa9f 	bl	802002c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800daee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800daf2:	4a7b      	ldr	r2, [pc, #492]	; (800dce0 <readCanToStructs+0x330>)
 800daf4:	f240 4112 	movw	r1, #1042	; 0x412
 800daf8:	fb01 f303 	mul.w	r3, r1, r3
 800dafc:	4413      	add	r3, r2
 800dafe:	f203 2307 	addw	r3, r3, #519	; 0x207
 800db02:	2200      	movs	r2, #0
 800db04:	701a      	strb	r2, [r3, #0]
					break;
 800db06:	f001 b887 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800db0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800db0e:	4613      	mov	r3, r2
 800db10:	00db      	lsls	r3, r3, #3
 800db12:	1a9b      	subs	r3, r3, r2
 800db14:	461a      	mov	r2, r3
 800db16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db18:	4413      	add	r3, r2
 800db1a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800db1c:	2301      	movs	r3, #1
 800db1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800db22:	e016      	b.n	800db52 <readCanToStructs+0x1a2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800db24:	4b6c      	ldr	r3, [pc, #432]	; (800dcd8 <readCanToStructs+0x328>)
 800db26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800db2a:	885b      	ldrh	r3, [r3, #2]
 800db2c:	461a      	mov	r2, r3
 800db2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db32:	4969      	ldr	r1, [pc, #420]	; (800dcd8 <readCanToStructs+0x328>)
 800db34:	0112      	lsls	r2, r2, #4
 800db36:	440a      	add	r2, r1
 800db38:	4413      	add	r3, r2
 800db3a:	3304      	adds	r3, #4
 800db3c:	781a      	ldrb	r2, [r3, #0]
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800db42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db44:	3301      	adds	r3, #1
 800db46:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800db48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800db4c:	3301      	adds	r3, #1
 800db4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800db52:	4b61      	ldr	r3, [pc, #388]	; (800dcd8 <readCanToStructs+0x328>)
 800db54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800db58:	885b      	ldrh	r3, [r3, #2]
 800db5a:	4a5f      	ldr	r2, [pc, #380]	; (800dcd8 <readCanToStructs+0x328>)
 800db5c:	011b      	lsls	r3, r3, #4
 800db5e:	4413      	add	r3, r2
 800db60:	330c      	adds	r3, #12
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800db68:	429a      	cmp	r2, r3
 800db6a:	d3db      	bcc.n	800db24 <readCanToStructs+0x174>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800db6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db70:	4a5b      	ldr	r2, [pc, #364]	; (800dce0 <readCanToStructs+0x330>)
 800db72:	f240 4112 	movw	r1, #1042	; 0x412
 800db76:	fb01 f303 	mul.w	r3, r1, r3
 800db7a:	4413      	add	r3, r2
 800db7c:	f203 2307 	addw	r3, r3, #519	; 0x207
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	4613      	mov	r3, r2
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800db8a:	4b53      	ldr	r3, [pc, #332]	; (800dcd8 <readCanToStructs+0x328>)
 800db8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800db90:	885b      	ldrh	r3, [r3, #2]
 800db92:	4951      	ldr	r1, [pc, #324]	; (800dcd8 <readCanToStructs+0x328>)
 800db94:	011b      	lsls	r3, r3, #4
 800db96:	440b      	add	r3, r1
 800db98:	330c      	adds	r3, #12
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	3b01      	subs	r3, #1
 800db9e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800dba0:	2b05      	cmp	r3, #5
 800dba2:	d91c      	bls.n	800dbde <readCanToStructs+0x22e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800dba4:	4b50      	ldr	r3, [pc, #320]	; (800dce8 <readCanToStructs+0x338>)
 800dba6:	4a4d      	ldr	r2, [pc, #308]	; (800dcdc <readCanToStructs+0x32c>)
 800dba8:	6811      	ldr	r1, [r2, #0]
 800dbaa:	6019      	str	r1, [r3, #0]
 800dbac:	8892      	ldrh	r2, [r2, #4]
 800dbae:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800dbb0:	4b4e      	ldr	r3, [pc, #312]	; (800dcec <readCanToStructs+0x33c>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d102      	bne.n	800dbbe <readCanToStructs+0x20e>
						printf("GPS_PACKET_RECEIVED\n");
 800dbb8:	484d      	ldr	r0, [pc, #308]	; (800dcf0 <readCanToStructs+0x340>)
 800dbba:	f012 fbbb 	bl	8020334 <puts>
					Write_RTC();
 800dbbe:	f7fd fc11 	bl	800b3e4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800dbc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbc6:	4a46      	ldr	r2, [pc, #280]	; (800dce0 <readCanToStructs+0x330>)
 800dbc8:	f240 4112 	movw	r1, #1042	; 0x412
 800dbcc:	fb01 f303 	mul.w	r3, r1, r3
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f203 2307 	addw	r3, r3, #519	; 0x207
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	701a      	strb	r2, [r3, #0]
				break;
 800dbda:	f001 b81d 	b.w	800ec18 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 800dbde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbe2:	4a3f      	ldr	r2, [pc, #252]	; (800dce0 <readCanToStructs+0x330>)
 800dbe4:	f240 4112 	movw	r1, #1042	; 0x412
 800dbe8:	fb01 f303 	mul.w	r3, r1, r3
 800dbec:	4413      	add	r3, r2
 800dbee:	f203 2306 	addw	r3, r3, #518	; 0x206
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 800dbf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dbfa:	4939      	ldr	r1, [pc, #228]	; (800dce0 <readCanToStructs+0x330>)
 800dbfc:	f240 4212 	movw	r2, #1042	; 0x412
 800dc00:	fb03 f202 	mul.w	r2, r3, r2
 800dc04:	440a      	add	r2, r1
 800dc06:	f202 2207 	addw	r2, r2, #519	; 0x207
 800dc0a:	7812      	ldrb	r2, [r2, #0]
 800dc0c:	3201      	adds	r2, #1
 800dc0e:	b2d0      	uxtb	r0, r2
 800dc10:	4a33      	ldr	r2, [pc, #204]	; (800dce0 <readCanToStructs+0x330>)
 800dc12:	f240 4112 	movw	r1, #1042	; 0x412
 800dc16:	fb01 f303 	mul.w	r3, r1, r3
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f203 2307 	addw	r3, r3, #519	; 0x207
 800dc20:	4602      	mov	r2, r0
 800dc22:	701a      	strb	r2, [r3, #0]
				break;
 800dc24:	f000 bff8 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800dc28:	4b2c      	ldr	r3, [pc, #176]	; (800dcdc <readCanToStructs+0x32c>)
 800dc2a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800dc2c:	4b2a      	ldr	r3, [pc, #168]	; (800dcd8 <readCanToStructs+0x328>)
 800dc2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800dc32:	885b      	ldrh	r3, [r3, #2]
 800dc34:	4a28      	ldr	r2, [pc, #160]	; (800dcd8 <readCanToStructs+0x328>)
 800dc36:	011b      	lsls	r3, r3, #4
 800dc38:	4413      	add	r3, r2
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800dc42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d110      	bne.n	800dc6c <readCanToStructs+0x2bc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800dc4a:	2206      	movs	r2, #6
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc50:	f012 f9ec 	bl	802002c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800dc54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc58:	4a21      	ldr	r2, [pc, #132]	; (800dce0 <readCanToStructs+0x330>)
 800dc5a:	f240 4112 	movw	r1, #1042	; 0x412
 800dc5e:	fb01 f303 	mul.w	r3, r1, r3
 800dc62:	4413      	add	r3, r2
 800dc64:	f203 2313 	addw	r3, r3, #531	; 0x213
 800dc68:	2200      	movs	r2, #0
 800dc6a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 800dc6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc70:	4a1b      	ldr	r2, [pc, #108]	; (800dce0 <readCanToStructs+0x330>)
 800dc72:	f240 4112 	movw	r1, #1042	; 0x412
 800dc76:	fb01 f303 	mul.w	r3, r1, r3
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f203 2313 	addw	r3, r3, #531	; 0x213
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d015      	beq.n	800dcb6 <readCanToStructs+0x306>
					printf("GPS2 Packet Seq no MisMatch\n");
 800dc8a:	481a      	ldr	r0, [pc, #104]	; (800dcf4 <readCanToStructs+0x344>)
 800dc8c:	f012 fb52 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800dc90:	2206      	movs	r2, #6
 800dc92:	2100      	movs	r1, #0
 800dc94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc96:	f012 f9c9 	bl	802002c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800dc9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc9e:	4a10      	ldr	r2, [pc, #64]	; (800dce0 <readCanToStructs+0x330>)
 800dca0:	f240 4112 	movw	r1, #1042	; 0x412
 800dca4:	fb01 f303 	mul.w	r3, r1, r3
 800dca8:	4413      	add	r3, r2
 800dcaa:	f203 2313 	addw	r3, r3, #531	; 0x213
 800dcae:	2200      	movs	r2, #0
 800dcb0:	701a      	strb	r2, [r3, #0]
					break;
 800dcb2:	f000 bfb1 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800dcb6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800dcba:	4613      	mov	r3, r2
 800dcbc:	00db      	lsls	r3, r3, #3
 800dcbe:	1a9b      	subs	r3, r3, r2
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc4:	4413      	add	r3, r2
 800dcc6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800dcc8:	2301      	movs	r3, #1
 800dcca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcce:	e02a      	b.n	800dd26 <readCanToStructs+0x376>
 800dcd0:	20000304 	.word	0x20000304
 800dcd4:	2000195c 	.word	0x2000195c
 800dcd8:	20004e64 	.word	0x20004e64
 800dcdc:	20002880 	.word	0x20002880
 800dce0:	20004640 	.word	0x20004640
 800dce4:	080246c4 	.word	0x080246c4
 800dce8:	20002878 	.word	0x20002878
 800dcec:	20000645 	.word	0x20000645
 800dcf0:	080246e0 	.word	0x080246e0
 800dcf4:	080246f4 	.word	0x080246f4
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800dcf8:	4bb6      	ldr	r3, [pc, #728]	; (800dfd4 <readCanToStructs+0x624>)
 800dcfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800dcfe:	885b      	ldrh	r3, [r3, #2]
 800dd00:	461a      	mov	r2, r3
 800dd02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd06:	49b3      	ldr	r1, [pc, #716]	; (800dfd4 <readCanToStructs+0x624>)
 800dd08:	0112      	lsls	r2, r2, #4
 800dd0a:	440a      	add	r2, r1
 800dd0c:	4413      	add	r3, r2
 800dd0e:	3304      	adds	r3, #4
 800dd10:	781a      	ldrb	r2, [r3, #0]
 800dd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd14:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800dd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd18:	3301      	adds	r3, #1
 800dd1a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800dd1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd20:	3301      	adds	r3, #1
 800dd22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd26:	4bab      	ldr	r3, [pc, #684]	; (800dfd4 <readCanToStructs+0x624>)
 800dd28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800dd2c:	885b      	ldrh	r3, [r3, #2]
 800dd2e:	4aa9      	ldr	r2, [pc, #676]	; (800dfd4 <readCanToStructs+0x624>)
 800dd30:	011b      	lsls	r3, r3, #4
 800dd32:	4413      	add	r3, r2
 800dd34:	330c      	adds	r3, #12
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d3db      	bcc.n	800dcf8 <readCanToStructs+0x348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 800dd40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd44:	4aa4      	ldr	r2, [pc, #656]	; (800dfd8 <readCanToStructs+0x628>)
 800dd46:	f240 4112 	movw	r1, #1042	; 0x412
 800dd4a:	fb01 f303 	mul.w	r3, r1, r3
 800dd4e:	4413      	add	r3, r2
 800dd50:	f203 2313 	addw	r3, r3, #531	; 0x213
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	461a      	mov	r2, r3
 800dd58:	4613      	mov	r3, r2
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800dd5e:	4b9d      	ldr	r3, [pc, #628]	; (800dfd4 <readCanToStructs+0x624>)
 800dd60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800dd64:	885b      	ldrh	r3, [r3, #2]
 800dd66:	499b      	ldr	r1, [pc, #620]	; (800dfd4 <readCanToStructs+0x624>)
 800dd68:	011b      	lsls	r3, r3, #4
 800dd6a:	440b      	add	r3, r1
 800dd6c:	330c      	adds	r3, #12
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	3b01      	subs	r3, #1
 800dd72:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 800dd74:	2b05      	cmp	r3, #5
 800dd76:	d91c      	bls.n	800ddb2 <readCanToStructs+0x402>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800dd78:	4b98      	ldr	r3, [pc, #608]	; (800dfdc <readCanToStructs+0x62c>)
 800dd7a:	4a99      	ldr	r2, [pc, #612]	; (800dfe0 <readCanToStructs+0x630>)
 800dd7c:	6811      	ldr	r1, [r2, #0]
 800dd7e:	6019      	str	r1, [r3, #0]
 800dd80:	8892      	ldrh	r2, [r2, #4]
 800dd82:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800dd84:	4b97      	ldr	r3, [pc, #604]	; (800dfe4 <readCanToStructs+0x634>)
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d102      	bne.n	800dd92 <readCanToStructs+0x3e2>
						printf("GPS2_PACKET_RECEIVED\n");
 800dd8c:	4896      	ldr	r0, [pc, #600]	; (800dfe8 <readCanToStructs+0x638>)
 800dd8e:	f012 fad1 	bl	8020334 <puts>
					Write_RTC();
 800dd92:	f7fd fb27 	bl	800b3e4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800dd96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd9a:	4a8f      	ldr	r2, [pc, #572]	; (800dfd8 <readCanToStructs+0x628>)
 800dd9c:	f240 4112 	movw	r1, #1042	; 0x412
 800dda0:	fb01 f303 	mul.w	r3, r1, r3
 800dda4:	4413      	add	r3, r2
 800dda6:	f203 2313 	addw	r3, r3, #531	; 0x213
 800ddaa:	2200      	movs	r2, #0
 800ddac:	701a      	strb	r2, [r3, #0]
				break;
 800ddae:	f000 bf33 	b.w	800ec18 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 800ddb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddb6:	4a88      	ldr	r2, [pc, #544]	; (800dfd8 <readCanToStructs+0x628>)
 800ddb8:	f240 4112 	movw	r1, #1042	; 0x412
 800ddbc:	fb01 f303 	mul.w	r3, r1, r3
 800ddc0:	4413      	add	r3, r2
 800ddc2:	f203 2312 	addw	r3, r3, #530	; 0x212
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 800ddca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddce:	4982      	ldr	r1, [pc, #520]	; (800dfd8 <readCanToStructs+0x628>)
 800ddd0:	f240 4212 	movw	r2, #1042	; 0x412
 800ddd4:	fb03 f202 	mul.w	r2, r3, r2
 800ddd8:	440a      	add	r2, r1
 800ddda:	f202 2213 	addw	r2, r2, #531	; 0x213
 800ddde:	7812      	ldrb	r2, [r2, #0]
 800dde0:	3201      	adds	r2, #1
 800dde2:	b2d0      	uxtb	r0, r2
 800dde4:	4a7c      	ldr	r2, [pc, #496]	; (800dfd8 <readCanToStructs+0x628>)
 800dde6:	f240 4112 	movw	r1, #1042	; 0x412
 800ddea:	fb01 f303 	mul.w	r3, r1, r3
 800ddee:	4413      	add	r3, r2
 800ddf0:	f203 2313 	addw	r3, r3, #531	; 0x213
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	701a      	strb	r2, [r3, #0]
				break;
 800ddf8:	f000 bf0e 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 800ddfc:	4b7b      	ldr	r3, [pc, #492]	; (800dfec <readCanToStructs+0x63c>)
 800ddfe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800de00:	4b74      	ldr	r3, [pc, #464]	; (800dfd4 <readCanToStructs+0x624>)
 800de02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800de06:	885b      	ldrh	r3, [r3, #2]
 800de08:	4a72      	ldr	r2, [pc, #456]	; (800dfd4 <readCanToStructs+0x624>)
 800de0a:	011b      	lsls	r3, r3, #4
 800de0c:	4413      	add	r3, r2
 800de0e:	3304      	adds	r3, #4
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800de16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d110      	bne.n	800de40 <readCanToStructs+0x490>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 800de1e:	2218      	movs	r2, #24
 800de20:	2100      	movs	r1, #0
 800de22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de24:	f012 f902 	bl	802002c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800de28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de2c:	4a6a      	ldr	r2, [pc, #424]	; (800dfd8 <readCanToStructs+0x628>)
 800de2e:	f240 4112 	movw	r1, #1042	; 0x412
 800de32:	fb01 f303 	mul.w	r3, r1, r3
 800de36:	4413      	add	r3, r2
 800de38:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800de3c:	2200      	movs	r2, #0
 800de3e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 800de40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de44:	4a64      	ldr	r2, [pc, #400]	; (800dfd8 <readCanToStructs+0x628>)
 800de46:	f240 4112 	movw	r1, #1042	; 0x412
 800de4a:	fb01 f303 	mul.w	r3, r1, r3
 800de4e:	4413      	add	r3, r2
 800de50:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d015      	beq.n	800de8a <readCanToStructs+0x4da>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 800de5e:	4864      	ldr	r0, [pc, #400]	; (800dff0 <readCanToStructs+0x640>)
 800de60:	f012 fa68 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 800de64:	2218      	movs	r2, #24
 800de66:	2100      	movs	r1, #0
 800de68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de6a:	f012 f8df 	bl	802002c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800de6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de72:	4a59      	ldr	r2, [pc, #356]	; (800dfd8 <readCanToStructs+0x628>)
 800de74:	f240 4112 	movw	r1, #1042	; 0x412
 800de78:	fb01 f303 	mul.w	r3, r1, r3
 800de7c:	4413      	add	r3, r2
 800de7e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800de82:	2200      	movs	r2, #0
 800de84:	701a      	strb	r2, [r3, #0]
					break;
 800de86:	f000 bec7 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800de8a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800de8e:	4613      	mov	r3, r2
 800de90:	00db      	lsls	r3, r3, #3
 800de92:	1a9b      	subs	r3, r3, r2
 800de94:	461a      	mov	r2, r3
 800de96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de98:	4413      	add	r3, r2
 800de9a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800de9c:	2301      	movs	r3, #1
 800de9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dea2:	e016      	b.n	800ded2 <readCanToStructs+0x522>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800dea4:	4b4b      	ldr	r3, [pc, #300]	; (800dfd4 <readCanToStructs+0x624>)
 800dea6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800deaa:	885b      	ldrh	r3, [r3, #2]
 800deac:	461a      	mov	r2, r3
 800deae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800deb2:	4948      	ldr	r1, [pc, #288]	; (800dfd4 <readCanToStructs+0x624>)
 800deb4:	0112      	lsls	r2, r2, #4
 800deb6:	440a      	add	r2, r1
 800deb8:	4413      	add	r3, r2
 800deba:	3304      	adds	r3, #4
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800dec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec4:	3301      	adds	r3, #1
 800dec6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800dec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800decc:	3301      	adds	r3, #1
 800dece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ded2:	4b40      	ldr	r3, [pc, #256]	; (800dfd4 <readCanToStructs+0x624>)
 800ded4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ded8:	885b      	ldrh	r3, [r3, #2]
 800deda:	4a3e      	ldr	r2, [pc, #248]	; (800dfd4 <readCanToStructs+0x624>)
 800dedc:	011b      	lsls	r3, r3, #4
 800dede:	4413      	add	r3, r2
 800dee0:	330c      	adds	r3, #12
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dee8:	429a      	cmp	r2, r3
 800deea:	d3db      	bcc.n	800dea4 <readCanToStructs+0x4f4>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 800deec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800def0:	4a39      	ldr	r2, [pc, #228]	; (800dfd8 <readCanToStructs+0x628>)
 800def2:	f240 4112 	movw	r1, #1042	; 0x412
 800def6:	fb01 f303 	mul.w	r3, r1, r3
 800defa:	4413      	add	r3, r2
 800defc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	461a      	mov	r2, r3
 800df04:	4613      	mov	r3, r2
 800df06:	00db      	lsls	r3, r3, #3
 800df08:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 800df0a:	4b32      	ldr	r3, [pc, #200]	; (800dfd4 <readCanToStructs+0x624>)
 800df0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800df10:	885b      	ldrh	r3, [r3, #2]
 800df12:	4930      	ldr	r1, [pc, #192]	; (800dfd4 <readCanToStructs+0x624>)
 800df14:	011b      	lsls	r3, r3, #4
 800df16:	440b      	add	r3, r1
 800df18:	330c      	adds	r3, #12
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 800df20:	2b17      	cmp	r3, #23
 800df22:	d932      	bls.n	800df8a <readCanToStructs+0x5da>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 800df24:	4b31      	ldr	r3, [pc, #196]	; (800dfec <readCanToStructs+0x63c>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	461a      	mov	r2, r3
 800df2a:	4613      	mov	r3, r2
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	4413      	add	r3, r2
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	4a30      	ldr	r2, [pc, #192]	; (800dff4 <readCanToStructs+0x644>)
 800df34:	4413      	add	r3, r2
 800df36:	2218      	movs	r2, #24
 800df38:	492c      	ldr	r1, [pc, #176]	; (800dfec <readCanToStructs+0x63c>)
 800df3a:	4618      	mov	r0, r3
 800df3c:	f012 f84e 	bl	801ffdc <memcpy>
					if(Debug_flag == 1)
 800df40:	4b28      	ldr	r3, [pc, #160]	; (800dfe4 <readCanToStructs+0x634>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b01      	cmp	r3, #1
 800df46:	d105      	bne.n	800df54 <readCanToStructs+0x5a4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 800df48:	4b28      	ldr	r3, [pc, #160]	; (800dfec <readCanToStructs+0x63c>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	4619      	mov	r1, r3
 800df4e:	482a      	ldr	r0, [pc, #168]	; (800dff8 <readCanToStructs+0x648>)
 800df50:	f012 f954 	bl	80201fc <iprintf>
					Is_CAN_Exchange_happening = YES;
 800df54:	4b29      	ldr	r3, [pc, #164]	; (800dffc <readCanToStructs+0x64c>)
 800df56:	2201      	movs	r2, #1
 800df58:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 800df5a:	f005 f945 	bl	80131e8 <HAL_GetTick>
 800df5e:	4603      	mov	r3, r0
 800df60:	4a27      	ldr	r2, [pc, #156]	; (800e000 <readCanToStructs+0x650>)
 800df62:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 800df64:	4b21      	ldr	r3, [pc, #132]	; (800dfec <readCanToStructs+0x63c>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	4618      	mov	r0, r3
 800df6a:	f7f9 fec1 	bl	8007cf0 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800df6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df72:	4a19      	ldr	r2, [pc, #100]	; (800dfd8 <readCanToStructs+0x628>)
 800df74:	f240 4112 	movw	r1, #1042	; 0x412
 800df78:	fb01 f303 	mul.w	r3, r1, r3
 800df7c:	4413      	add	r3, r2
 800df7e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800df82:	2200      	movs	r2, #0
 800df84:	701a      	strb	r2, [r3, #0]
				break;
 800df86:	f000 be47 	b.w	800ec18 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 800df8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df8e:	4a12      	ldr	r2, [pc, #72]	; (800dfd8 <readCanToStructs+0x628>)
 800df90:	f240 4112 	movw	r1, #1042	; 0x412
 800df94:	fb01 f303 	mul.w	r3, r1, r3
 800df98:	4413      	add	r3, r2
 800df9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800df9e:	2201      	movs	r2, #1
 800dfa0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 800dfa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfa6:	490c      	ldr	r1, [pc, #48]	; (800dfd8 <readCanToStructs+0x628>)
 800dfa8:	f240 4212 	movw	r2, #1042	; 0x412
 800dfac:	fb03 f202 	mul.w	r2, r3, r2
 800dfb0:	440a      	add	r2, r1
 800dfb2:	f202 4203 	addw	r2, r2, #1027	; 0x403
 800dfb6:	7812      	ldrb	r2, [r2, #0]
 800dfb8:	3201      	adds	r2, #1
 800dfba:	b2d0      	uxtb	r0, r2
 800dfbc:	4a06      	ldr	r2, [pc, #24]	; (800dfd8 <readCanToStructs+0x628>)
 800dfbe:	f240 4112 	movw	r1, #1042	; 0x412
 800dfc2:	fb01 f303 	mul.w	r3, r1, r3
 800dfc6:	4413      	add	r3, r2
 800dfc8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800dfcc:	4602      	mov	r2, r0
 800dfce:	701a      	strb	r2, [r3, #0]
				break;
 800dfd0:	f000 be22 	b.w	800ec18 <readCanToStructs+0x1268>
 800dfd4:	20004e64 	.word	0x20004e64
 800dfd8:	20004640 	.word	0x20004640
 800dfdc:	20002878 	.word	0x20002878
 800dfe0:	20002880 	.word	0x20002880
 800dfe4:	20000645 	.word	0x20000645
 800dfe8:	08024710 	.word	0x08024710
 800dfec:	2000186c 	.word	0x2000186c
 800dff0:	08024728 	.word	0x08024728
 800dff4:	20001764 	.word	0x20001764
 800dff8:	0802474c 	.word	0x0802474c
 800dffc:	20000108 	.word	0x20000108
 800e000:	20000e40 	.word	0x20000e40
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 800e004:	4b9f      	ldr	r3, [pc, #636]	; (800e284 <readCanToStructs+0x8d4>)
 800e006:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800e008:	4b9f      	ldr	r3, [pc, #636]	; (800e288 <readCanToStructs+0x8d8>)
 800e00a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e00e:	885b      	ldrh	r3, [r3, #2]
 800e010:	4a9d      	ldr	r2, [pc, #628]	; (800e288 <readCanToStructs+0x8d8>)
 800e012:	011b      	lsls	r3, r3, #4
 800e014:	4413      	add	r3, r2
 800e016:	3304      	adds	r3, #4
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800e01e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e022:	2b00      	cmp	r3, #0
 800e024:	d110      	bne.n	800e048 <readCanToStructs+0x698>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 800e026:	2218      	movs	r2, #24
 800e028:	2100      	movs	r1, #0
 800e02a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e02c:	f011 fffe 	bl	802002c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 800e030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e034:	4a95      	ldr	r2, [pc, #596]	; (800e28c <readCanToStructs+0x8dc>)
 800e036:	f240 4112 	movw	r1, #1042	; 0x412
 800e03a:	fb01 f303 	mul.w	r3, r1, r3
 800e03e:	4413      	add	r3, r2
 800e040:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800e044:	2200      	movs	r2, #0
 800e046:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 800e048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e04c:	4a8f      	ldr	r2, [pc, #572]	; (800e28c <readCanToStructs+0x8dc>)
 800e04e:	f240 4112 	movw	r1, #1042	; 0x412
 800e052:	fb01 f303 	mul.w	r3, r1, r3
 800e056:	4413      	add	r3, r2
 800e058:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e062:	429a      	cmp	r2, r3
 800e064:	d015      	beq.n	800e092 <readCanToStructs+0x6e2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 800e066:	488a      	ldr	r0, [pc, #552]	; (800e290 <readCanToStructs+0x8e0>)
 800e068:	f012 f964 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 800e06c:	2218      	movs	r2, #24
 800e06e:	2100      	movs	r1, #0
 800e070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e072:	f011 ffdb 	bl	802002c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 800e076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e07a:	4a84      	ldr	r2, [pc, #528]	; (800e28c <readCanToStructs+0x8dc>)
 800e07c:	f240 4112 	movw	r1, #1042	; 0x412
 800e080:	fb01 f303 	mul.w	r3, r1, r3
 800e084:	4413      	add	r3, r2
 800e086:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800e08a:	2200      	movs	r2, #0
 800e08c:	701a      	strb	r2, [r3, #0]
					break;
 800e08e:	f000 bdc3 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800e092:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e096:	4613      	mov	r3, r2
 800e098:	00db      	lsls	r3, r3, #3
 800e09a:	1a9b      	subs	r3, r3, r2
 800e09c:	461a      	mov	r2, r3
 800e09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a0:	4413      	add	r3, r2
 800e0a2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0aa:	e016      	b.n	800e0da <readCanToStructs+0x72a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800e0ac:	4b76      	ldr	r3, [pc, #472]	; (800e288 <readCanToStructs+0x8d8>)
 800e0ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e0b2:	885b      	ldrh	r3, [r3, #2]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0ba:	4973      	ldr	r1, [pc, #460]	; (800e288 <readCanToStructs+0x8d8>)
 800e0bc:	0112      	lsls	r2, r2, #4
 800e0be:	440a      	add	r2, r1
 800e0c0:	4413      	add	r3, r2
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	781a      	ldrb	r2, [r3, #0]
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e0d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e0da:	4b6b      	ldr	r3, [pc, #428]	; (800e288 <readCanToStructs+0x8d8>)
 800e0dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e0e0:	885b      	ldrh	r3, [r3, #2]
 800e0e2:	4a69      	ldr	r2, [pc, #420]	; (800e288 <readCanToStructs+0x8d8>)
 800e0e4:	011b      	lsls	r3, r3, #4
 800e0e6:	4413      	add	r3, r2
 800e0e8:	330c      	adds	r3, #12
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d3db      	bcc.n	800e0ac <readCanToStructs+0x6fc>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 800e0f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0f8:	4a64      	ldr	r2, [pc, #400]	; (800e28c <readCanToStructs+0x8dc>)
 800e0fa:	f240 4112 	movw	r1, #1042	; 0x412
 800e0fe:	fb01 f303 	mul.w	r3, r1, r3
 800e102:	4413      	add	r3, r2
 800e104:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	4613      	mov	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 800e112:	4b5d      	ldr	r3, [pc, #372]	; (800e288 <readCanToStructs+0x8d8>)
 800e114:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e118:	885b      	ldrh	r3, [r3, #2]
 800e11a:	495b      	ldr	r1, [pc, #364]	; (800e288 <readCanToStructs+0x8d8>)
 800e11c:	011b      	lsls	r3, r3, #4
 800e11e:	440b      	add	r3, r1
 800e120:	330c      	adds	r3, #12
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	3b01      	subs	r3, #1
 800e126:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 800e128:	2b17      	cmp	r3, #23
 800e12a:	d932      	bls.n	800e192 <readCanToStructs+0x7e2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 800e12c:	4b55      	ldr	r3, [pc, #340]	; (800e284 <readCanToStructs+0x8d4>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	461a      	mov	r2, r3
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	00db      	lsls	r3, r3, #3
 800e13a:	4a56      	ldr	r2, [pc, #344]	; (800e294 <readCanToStructs+0x8e4>)
 800e13c:	4413      	add	r3, r2
 800e13e:	2218      	movs	r2, #24
 800e140:	4950      	ldr	r1, [pc, #320]	; (800e284 <readCanToStructs+0x8d4>)
 800e142:	4618      	mov	r0, r3
 800e144:	f011 ff4a 	bl	801ffdc <memcpy>
					if(Debug_flag == 1)
 800e148:	4b53      	ldr	r3, [pc, #332]	; (800e298 <readCanToStructs+0x8e8>)
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d105      	bne.n	800e15c <readCanToStructs+0x7ac>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 800e150:	4b4c      	ldr	r3, [pc, #304]	; (800e284 <readCanToStructs+0x8d4>)
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	4619      	mov	r1, r3
 800e156:	4851      	ldr	r0, [pc, #324]	; (800e29c <readCanToStructs+0x8ec>)
 800e158:	f012 f850 	bl	80201fc <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 800e15c:	f005 f844 	bl	80131e8 <HAL_GetTick>
 800e160:	4603      	mov	r3, r0
 800e162:	4a4f      	ldr	r2, [pc, #316]	; (800e2a0 <readCanToStructs+0x8f0>)
 800e164:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 800e166:	4b4f      	ldr	r3, [pc, #316]	; (800e2a4 <readCanToStructs+0x8f4>)
 800e168:	2201      	movs	r2, #1
 800e16a:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 800e16c:	4b45      	ldr	r3, [pc, #276]	; (800e284 <readCanToStructs+0x8d4>)
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	4618      	mov	r0, r3
 800e172:	f7f9 fdbd 	bl	8007cf0 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 800e176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e17a:	4a44      	ldr	r2, [pc, #272]	; (800e28c <readCanToStructs+0x8dc>)
 800e17c:	f240 4112 	movw	r1, #1042	; 0x412
 800e180:	fb01 f303 	mul.w	r3, r1, r3
 800e184:	4413      	add	r3, r2
 800e186:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800e18a:	2200      	movs	r2, #0
 800e18c:	701a      	strb	r2, [r3, #0]
				break;
 800e18e:	f000 bd43 	b.w	800ec18 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 800e192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e196:	4a3d      	ldr	r2, [pc, #244]	; (800e28c <readCanToStructs+0x8dc>)
 800e198:	f240 4112 	movw	r1, #1042	; 0x412
 800e19c:	fb01 f303 	mul.w	r3, r1, r3
 800e1a0:	4413      	add	r3, r2
 800e1a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 800e1aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e1ae:	4937      	ldr	r1, [pc, #220]	; (800e28c <readCanToStructs+0x8dc>)
 800e1b0:	f240 4212 	movw	r2, #1042	; 0x412
 800e1b4:	fb03 f202 	mul.w	r2, r3, r2
 800e1b8:	440a      	add	r2, r1
 800e1ba:	f202 4205 	addw	r2, r2, #1029	; 0x405
 800e1be:	7812      	ldrb	r2, [r2, #0]
 800e1c0:	3201      	adds	r2, #1
 800e1c2:	b2d0      	uxtb	r0, r2
 800e1c4:	4a31      	ldr	r2, [pc, #196]	; (800e28c <readCanToStructs+0x8dc>)
 800e1c6:	f240 4112 	movw	r1, #1042	; 0x412
 800e1ca:	fb01 f303 	mul.w	r3, r1, r3
 800e1ce:	4413      	add	r3, r2
 800e1d0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	701a      	strb	r2, [r3, #0]
				break;
 800e1d8:	f000 bd1e 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 800e1dc:	4b32      	ldr	r3, [pc, #200]	; (800e2a8 <readCanToStructs+0x8f8>)
 800e1de:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800e1e0:	4b29      	ldr	r3, [pc, #164]	; (800e288 <readCanToStructs+0x8d8>)
 800e1e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e1e6:	885b      	ldrh	r3, [r3, #2]
 800e1e8:	4a27      	ldr	r2, [pc, #156]	; (800e288 <readCanToStructs+0x8d8>)
 800e1ea:	011b      	lsls	r3, r3, #4
 800e1ec:	4413      	add	r3, r2
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800e1f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d110      	bne.n	800e220 <readCanToStructs+0x870>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800e1fe:	2246      	movs	r2, #70	; 0x46
 800e200:	2100      	movs	r1, #0
 800e202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e204:	f011 ff12 	bl	802002c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 800e208:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e20c:	4a1f      	ldr	r2, [pc, #124]	; (800e28c <readCanToStructs+0x8dc>)
 800e20e:	f240 4112 	movw	r1, #1042	; 0x412
 800e212:	fb01 f303 	mul.w	r3, r1, r3
 800e216:	4413      	add	r3, r2
 800e218:	f203 4307 	addw	r3, r3, #1031	; 0x407
 800e21c:	2200      	movs	r2, #0
 800e21e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 800e220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e224:	4a19      	ldr	r2, [pc, #100]	; (800e28c <readCanToStructs+0x8dc>)
 800e226:	f240 4112 	movw	r1, #1042	; 0x412
 800e22a:	fb01 f303 	mul.w	r3, r1, r3
 800e22e:	4413      	add	r3, r2
 800e230:	f203 4307 	addw	r3, r3, #1031	; 0x407
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d015      	beq.n	800e26a <readCanToStructs+0x8ba>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 800e23e:	481b      	ldr	r0, [pc, #108]	; (800e2ac <readCanToStructs+0x8fc>)
 800e240:	f012 f878 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800e244:	2246      	movs	r2, #70	; 0x46
 800e246:	2100      	movs	r1, #0
 800e248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e24a:	f011 feef 	bl	802002c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 800e24e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e252:	4a0e      	ldr	r2, [pc, #56]	; (800e28c <readCanToStructs+0x8dc>)
 800e254:	f240 4112 	movw	r1, #1042	; 0x412
 800e258:	fb01 f303 	mul.w	r3, r1, r3
 800e25c:	4413      	add	r3, r2
 800e25e:	f203 4307 	addw	r3, r3, #1031	; 0x407
 800e262:	2200      	movs	r2, #0
 800e264:	701a      	strb	r2, [r3, #0]
					break;
 800e266:	f000 bcd7 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800e26a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e26e:	4613      	mov	r3, r2
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	1a9b      	subs	r3, r3, r2
 800e274:	461a      	mov	r2, r3
 800e276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e278:	4413      	add	r3, r2
 800e27a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e27c:	2301      	movs	r3, #1
 800e27e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e282:	e02c      	b.n	800e2de <readCanToStructs+0x92e>
 800e284:	2000186c 	.word	0x2000186c
 800e288:	20004e64 	.word	0x20004e64
 800e28c:	20004640 	.word	0x20004640
 800e290:	0802475c 	.word	0x0802475c
 800e294:	20001764 	.word	0x20001764
 800e298:	20000645 	.word	0x20000645
 800e29c:	08024780 	.word	0x08024780
 800e2a0:	20000e40 	.word	0x20000e40
 800e2a4:	20000108 	.word	0x20000108
 800e2a8:	20001914 	.word	0x20001914
 800e2ac:	08024790 	.word	0x08024790
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800e2b0:	4bb9      	ldr	r3, [pc, #740]	; (800e598 <readCanToStructs+0xbe8>)
 800e2b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e2b6:	885b      	ldrh	r3, [r3, #2]
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2be:	49b6      	ldr	r1, [pc, #728]	; (800e598 <readCanToStructs+0xbe8>)
 800e2c0:	0112      	lsls	r2, r2, #4
 800e2c2:	440a      	add	r2, r1
 800e2c4:	4413      	add	r3, r2
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	781a      	ldrb	r2, [r3, #0]
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e2d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2d8:	3301      	adds	r3, #1
 800e2da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2de:	4bae      	ldr	r3, [pc, #696]	; (800e598 <readCanToStructs+0xbe8>)
 800e2e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e2e4:	885b      	ldrh	r3, [r3, #2]
 800e2e6:	4aac      	ldr	r2, [pc, #688]	; (800e598 <readCanToStructs+0xbe8>)
 800e2e8:	011b      	lsls	r3, r3, #4
 800e2ea:	4413      	add	r3, r2
 800e2ec:	330c      	adds	r3, #12
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d3db      	bcc.n	800e2b0 <readCanToStructs+0x900>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 800e2f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2fc:	4aa7      	ldr	r2, [pc, #668]	; (800e59c <readCanToStructs+0xbec>)
 800e2fe:	f240 4112 	movw	r1, #1042	; 0x412
 800e302:	fb01 f303 	mul.w	r3, r1, r3
 800e306:	4413      	add	r3, r2
 800e308:	f203 4307 	addw	r3, r3, #1031	; 0x407
 800e30c:	781b      	ldrb	r3, [r3, #0]
 800e30e:	461a      	mov	r2, r3
 800e310:	4613      	mov	r3, r2
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 800e316:	4ba0      	ldr	r3, [pc, #640]	; (800e598 <readCanToStructs+0xbe8>)
 800e318:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e31c:	885b      	ldrh	r3, [r3, #2]
 800e31e:	499e      	ldr	r1, [pc, #632]	; (800e598 <readCanToStructs+0xbe8>)
 800e320:	011b      	lsls	r3, r3, #4
 800e322:	440b      	add	r3, r1
 800e324:	330c      	adds	r3, #12
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	3b01      	subs	r3, #1
 800e32a:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 800e32c:	2b45      	cmp	r3, #69	; 0x45
 800e32e:	d93d      	bls.n	800e3ac <readCanToStructs+0x9fc>
					if(Debug_flag == 1)
 800e330:	4b9b      	ldr	r3, [pc, #620]	; (800e5a0 <readCanToStructs+0xbf0>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d102      	bne.n	800e33e <readCanToStructs+0x98e>
						printf("RCV V-Message-1\n");
 800e338:	489a      	ldr	r0, [pc, #616]	; (800e5a4 <readCanToStructs+0xbf4>)
 800e33a:	f011 fffb 	bl	8020334 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800e33e:	2246      	movs	r2, #70	; 0x46
 800e340:	2100      	movs	r1, #0
 800e342:	4899      	ldr	r0, [pc, #612]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e344:	f011 fe72 	bl	802002c <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800e348:	4a97      	ldr	r2, [pc, #604]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e34a:	4b98      	ldr	r3, [pc, #608]	; (800e5ac <readCanToStructs+0xbfc>)
 800e34c:	4610      	mov	r0, r2
 800e34e:	4619      	mov	r1, r3
 800e350:	2346      	movs	r3, #70	; 0x46
 800e352:	461a      	mov	r2, r3
 800e354:	f011 fe42 	bl	801ffdc <memcpy>
					Is_CAN_Exchange_happening = YES;
 800e358:	4b95      	ldr	r3, [pc, #596]	; (800e5b0 <readCanToStructs+0xc00>)
 800e35a:	2201      	movs	r2, #1
 800e35c:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 800e35e:	4b92      	ldr	r3, [pc, #584]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	4619      	mov	r1, r3
 800e364:	4a93      	ldr	r2, [pc, #588]	; (800e5b4 <readCanToStructs+0xc04>)
 800e366:	460b      	mov	r3, r1
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	440b      	add	r3, r1
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	4413      	add	r3, r2
 800e370:	3304      	adds	r3, #4
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d00b      	beq.n	800e390 <readCanToStructs+0x9e0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 800e378:	4b8b      	ldr	r3, [pc, #556]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e37a:	889b      	ldrh	r3, [r3, #4]
 800e37c:	b2d9      	uxtb	r1, r3
 800e37e:	4b8a      	ldr	r3, [pc, #552]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e380:	881b      	ldrh	r3, [r3, #0]
 800e382:	b2da      	uxtb	r2, r3
 800e384:	4b88      	ldr	r3, [pc, #544]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e386:	885b      	ldrh	r3, [r3, #2]
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	488b      	ldr	r0, [pc, #556]	; (800e5b8 <readCanToStructs+0xc08>)
 800e38c:	f7f6 f954 	bl	8004638 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 800e390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e394:	4a81      	ldr	r2, [pc, #516]	; (800e59c <readCanToStructs+0xbec>)
 800e396:	f240 4112 	movw	r1, #1042	; 0x412
 800e39a:	fb01 f303 	mul.w	r3, r1, r3
 800e39e:	4413      	add	r3, r2
 800e3a0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	701a      	strb	r2, [r3, #0]
				break;
 800e3a8:	f000 bc36 	b.w	800ec18 <readCanToStructs+0x1268>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 800e3ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3b0:	4a7a      	ldr	r2, [pc, #488]	; (800e59c <readCanToStructs+0xbec>)
 800e3b2:	f240 4112 	movw	r1, #1042	; 0x412
 800e3b6:	fb01 f303 	mul.w	r3, r1, r3
 800e3ba:	4413      	add	r3, r2
 800e3bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 800e3c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3c8:	4974      	ldr	r1, [pc, #464]	; (800e59c <readCanToStructs+0xbec>)
 800e3ca:	f240 4212 	movw	r2, #1042	; 0x412
 800e3ce:	fb03 f202 	mul.w	r2, r3, r2
 800e3d2:	440a      	add	r2, r1
 800e3d4:	f202 4207 	addw	r2, r2, #1031	; 0x407
 800e3d8:	7812      	ldrb	r2, [r2, #0]
 800e3da:	3201      	adds	r2, #1
 800e3dc:	b2d0      	uxtb	r0, r2
 800e3de:	4a6f      	ldr	r2, [pc, #444]	; (800e59c <readCanToStructs+0xbec>)
 800e3e0:	f240 4112 	movw	r1, #1042	; 0x412
 800e3e4:	fb01 f303 	mul.w	r3, r1, r3
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f203 4307 	addw	r3, r3, #1031	; 0x407
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	701a      	strb	r2, [r3, #0]
				break;
 800e3f2:	f000 bc11 	b.w	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 800e3f6:	4b6d      	ldr	r3, [pc, #436]	; (800e5ac <readCanToStructs+0xbfc>)
 800e3f8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800e3fa:	4b67      	ldr	r3, [pc, #412]	; (800e598 <readCanToStructs+0xbe8>)
 800e3fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e400:	885b      	ldrh	r3, [r3, #2]
 800e402:	4a65      	ldr	r2, [pc, #404]	; (800e598 <readCanToStructs+0xbe8>)
 800e404:	011b      	lsls	r3, r3, #4
 800e406:	4413      	add	r3, r2
 800e408:	3304      	adds	r3, #4
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800e410:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e414:	2b00      	cmp	r3, #0
 800e416:	d110      	bne.n	800e43a <readCanToStructs+0xa8a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800e418:	2246      	movs	r2, #70	; 0x46
 800e41a:	2100      	movs	r1, #0
 800e41c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e41e:	f011 fe05 	bl	802002c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 800e422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e426:	4a5d      	ldr	r2, [pc, #372]	; (800e59c <readCanToStructs+0xbec>)
 800e428:	f240 4112 	movw	r1, #1042	; 0x412
 800e42c:	fb01 f303 	mul.w	r3, r1, r3
 800e430:	4413      	add	r3, r2
 800e432:	f203 4309 	addw	r3, r3, #1033	; 0x409
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 800e43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e43e:	4a57      	ldr	r2, [pc, #348]	; (800e59c <readCanToStructs+0xbec>)
 800e440:	f240 4112 	movw	r1, #1042	; 0x412
 800e444:	fb01 f303 	mul.w	r3, r1, r3
 800e448:	4413      	add	r3, r2
 800e44a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e454:	429a      	cmp	r2, r3
 800e456:	d014      	beq.n	800e482 <readCanToStructs+0xad2>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 800e458:	4858      	ldr	r0, [pc, #352]	; (800e5bc <readCanToStructs+0xc0c>)
 800e45a:	f011 ff6b 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800e45e:	2246      	movs	r2, #70	; 0x46
 800e460:	2100      	movs	r1, #0
 800e462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e464:	f011 fde2 	bl	802002c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 800e468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e46c:	4a4b      	ldr	r2, [pc, #300]	; (800e59c <readCanToStructs+0xbec>)
 800e46e:	f240 4112 	movw	r1, #1042	; 0x412
 800e472:	fb01 f303 	mul.w	r3, r1, r3
 800e476:	4413      	add	r3, r2
 800e478:	f203 4309 	addw	r3, r3, #1033	; 0x409
 800e47c:	2200      	movs	r2, #0
 800e47e:	701a      	strb	r2, [r3, #0]
					break;
 800e480:	e3ca      	b.n	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800e482:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e486:	4613      	mov	r3, r2
 800e488:	00db      	lsls	r3, r3, #3
 800e48a:	1a9b      	subs	r3, r3, r2
 800e48c:	461a      	mov	r2, r3
 800e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e490:	4413      	add	r3, r2
 800e492:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e494:	2301      	movs	r3, #1
 800e496:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e49a:	e016      	b.n	800e4ca <readCanToStructs+0xb1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800e49c:	4b3e      	ldr	r3, [pc, #248]	; (800e598 <readCanToStructs+0xbe8>)
 800e49e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e4a2:	885b      	ldrh	r3, [r3, #2]
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4aa:	493b      	ldr	r1, [pc, #236]	; (800e598 <readCanToStructs+0xbe8>)
 800e4ac:	0112      	lsls	r2, r2, #4
 800e4ae:	440a      	add	r2, r1
 800e4b0:	4413      	add	r3, r2
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	781a      	ldrb	r2, [r3, #0]
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4bc:	3301      	adds	r3, #1
 800e4be:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e4c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e4ca:	4b33      	ldr	r3, [pc, #204]	; (800e598 <readCanToStructs+0xbe8>)
 800e4cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e4d0:	885b      	ldrh	r3, [r3, #2]
 800e4d2:	4a31      	ldr	r2, [pc, #196]	; (800e598 <readCanToStructs+0xbe8>)
 800e4d4:	011b      	lsls	r3, r3, #4
 800e4d6:	4413      	add	r3, r2
 800e4d8:	330c      	adds	r3, #12
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d3db      	bcc.n	800e49c <readCanToStructs+0xaec>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 800e4e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4e8:	4a2c      	ldr	r2, [pc, #176]	; (800e59c <readCanToStructs+0xbec>)
 800e4ea:	f240 4112 	movw	r1, #1042	; 0x412
 800e4ee:	fb01 f303 	mul.w	r3, r1, r3
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f203 4309 	addw	r3, r3, #1033	; 0x409
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	00db      	lsls	r3, r3, #3
 800e500:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 800e502:	4b25      	ldr	r3, [pc, #148]	; (800e598 <readCanToStructs+0xbe8>)
 800e504:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e508:	885b      	ldrh	r3, [r3, #2]
 800e50a:	4923      	ldr	r1, [pc, #140]	; (800e598 <readCanToStructs+0xbe8>)
 800e50c:	011b      	lsls	r3, r3, #4
 800e50e:	440b      	add	r3, r1
 800e510:	330c      	adds	r3, #12
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	3b01      	subs	r3, #1
 800e516:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 800e518:	2b45      	cmp	r3, #69	; 0x45
 800e51a:	d953      	bls.n	800e5c4 <readCanToStructs+0xc14>
					if(Debug_flag == 1)
 800e51c:	4b20      	ldr	r3, [pc, #128]	; (800e5a0 <readCanToStructs+0xbf0>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d102      	bne.n	800e52a <readCanToStructs+0xb7a>
						printf("RCV V-Message-2\n");
 800e524:	4826      	ldr	r0, [pc, #152]	; (800e5c0 <readCanToStructs+0xc10>)
 800e526:	f011 ff05 	bl	8020334 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800e52a:	2246      	movs	r2, #70	; 0x46
 800e52c:	2100      	movs	r1, #0
 800e52e:	481e      	ldr	r0, [pc, #120]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e530:	f011 fd7c 	bl	802002c <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800e534:	4a1c      	ldr	r2, [pc, #112]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e536:	4b1d      	ldr	r3, [pc, #116]	; (800e5ac <readCanToStructs+0xbfc>)
 800e538:	4610      	mov	r0, r2
 800e53a:	4619      	mov	r1, r3
 800e53c:	2346      	movs	r3, #70	; 0x46
 800e53e:	461a      	mov	r2, r3
 800e540:	f011 fd4c 	bl	801ffdc <memcpy>
					Is_CAN_Exchange_happening = YES;
 800e544:	4b1a      	ldr	r3, [pc, #104]	; (800e5b0 <readCanToStructs+0xc00>)
 800e546:	2201      	movs	r2, #1
 800e548:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 800e54a:	4b17      	ldr	r3, [pc, #92]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	4619      	mov	r1, r3
 800e550:	4a18      	ldr	r2, [pc, #96]	; (800e5b4 <readCanToStructs+0xc04>)
 800e552:	460b      	mov	r3, r1
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	440b      	add	r3, r1
 800e558:	00db      	lsls	r3, r3, #3
 800e55a:	4413      	add	r3, r2
 800e55c:	3303      	adds	r3, #3
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d00b      	beq.n	800e57c <readCanToStructs+0xbcc>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 800e564:	4b10      	ldr	r3, [pc, #64]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e566:	889b      	ldrh	r3, [r3, #4]
 800e568:	b2d9      	uxtb	r1, r3
 800e56a:	4b0f      	ldr	r3, [pc, #60]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e56c:	881b      	ldrh	r3, [r3, #0]
 800e56e:	b2da      	uxtb	r2, r3
 800e570:	4b0d      	ldr	r3, [pc, #52]	; (800e5a8 <readCanToStructs+0xbf8>)
 800e572:	885b      	ldrh	r3, [r3, #2]
 800e574:	b2db      	uxtb	r3, r3
 800e576:	4810      	ldr	r0, [pc, #64]	; (800e5b8 <readCanToStructs+0xc08>)
 800e578:	f7f6 f85e 	bl	8004638 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 800e57c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e580:	4a06      	ldr	r2, [pc, #24]	; (800e59c <readCanToStructs+0xbec>)
 800e582:	f240 4112 	movw	r1, #1042	; 0x412
 800e586:	fb01 f303 	mul.w	r3, r1, r3
 800e58a:	4413      	add	r3, r2
 800e58c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 800e590:	2200      	movs	r2, #0
 800e592:	701a      	strb	r2, [r3, #0]
				break;
 800e594:	e340      	b.n	800ec18 <readCanToStructs+0x1268>
 800e596:	bf00      	nop
 800e598:	20004e64 	.word	0x20004e64
 800e59c:	20004640 	.word	0x20004640
 800e5a0:	20000645 	.word	0x20000645
 800e5a4:	080247b4 	.word	0x080247b4
 800e5a8:	200018cc 	.word	0x200018cc
 800e5ac:	20001914 	.word	0x20001914
 800e5b0:	20000108 	.word	0x20000108
 800e5b4:	20001674 	.word	0x20001674
 800e5b8:	200018d2 	.word	0x200018d2
 800e5bc:	080247c4 	.word	0x080247c4
 800e5c0:	080247e8 	.word	0x080247e8
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 800e5c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5c8:	4a9f      	ldr	r2, [pc, #636]	; (800e848 <readCanToStructs+0xe98>)
 800e5ca:	f240 4112 	movw	r1, #1042	; 0x412
 800e5ce:	fb01 f303 	mul.w	r3, r1, r3
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e5d8:	2201      	movs	r2, #1
 800e5da:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 800e5dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5e0:	4999      	ldr	r1, [pc, #612]	; (800e848 <readCanToStructs+0xe98>)
 800e5e2:	f240 4212 	movw	r2, #1042	; 0x412
 800e5e6:	fb03 f202 	mul.w	r2, r3, r2
 800e5ea:	440a      	add	r2, r1
 800e5ec:	f202 4209 	addw	r2, r2, #1033	; 0x409
 800e5f0:	7812      	ldrb	r2, [r2, #0]
 800e5f2:	3201      	adds	r2, #1
 800e5f4:	b2d0      	uxtb	r0, r2
 800e5f6:	4a94      	ldr	r2, [pc, #592]	; (800e848 <readCanToStructs+0xe98>)
 800e5f8:	f240 4112 	movw	r1, #1042	; 0x412
 800e5fc:	fb01 f303 	mul.w	r3, r1, r3
 800e600:	4413      	add	r3, r2
 800e602:	f203 4309 	addw	r3, r3, #1033	; 0x409
 800e606:	4602      	mov	r2, r0
 800e608:	701a      	strb	r2, [r3, #0]
				break;
 800e60a:	e305      	b.n	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 800e60c:	4b8f      	ldr	r3, [pc, #572]	; (800e84c <readCanToStructs+0xe9c>)
 800e60e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800e610:	4b8f      	ldr	r3, [pc, #572]	; (800e850 <readCanToStructs+0xea0>)
 800e612:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e616:	885b      	ldrh	r3, [r3, #2]
 800e618:	4a8d      	ldr	r2, [pc, #564]	; (800e850 <readCanToStructs+0xea0>)
 800e61a:	011b      	lsls	r3, r3, #4
 800e61c:	4413      	add	r3, r2
 800e61e:	3304      	adds	r3, #4
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800e626:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d110      	bne.n	800e650 <readCanToStructs+0xca0>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 800e62e:	2208      	movs	r2, #8
 800e630:	2100      	movs	r1, #0
 800e632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e634:	f011 fcfa 	bl	802002c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 800e638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e63c:	4a82      	ldr	r2, [pc, #520]	; (800e848 <readCanToStructs+0xe98>)
 800e63e:	f240 4112 	movw	r1, #1042	; 0x412
 800e642:	fb01 f303 	mul.w	r3, r1, r3
 800e646:	4413      	add	r3, r2
 800e648:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800e64c:	2200      	movs	r2, #0
 800e64e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 800e650:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e654:	4a7c      	ldr	r2, [pc, #496]	; (800e848 <readCanToStructs+0xe98>)
 800e656:	f240 4112 	movw	r1, #1042	; 0x412
 800e65a:	fb01 f303 	mul.w	r3, r1, r3
 800e65e:	4413      	add	r3, r2
 800e660:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d014      	beq.n	800e698 <readCanToStructs+0xce8>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 800e66e:	4879      	ldr	r0, [pc, #484]	; (800e854 <readCanToStructs+0xea4>)
 800e670:	f011 fe60 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 800e674:	2208      	movs	r2, #8
 800e676:	2100      	movs	r1, #0
 800e678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e67a:	f011 fcd7 	bl	802002c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 800e67e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e682:	4a71      	ldr	r2, [pc, #452]	; (800e848 <readCanToStructs+0xe98>)
 800e684:	f240 4112 	movw	r1, #1042	; 0x412
 800e688:	fb01 f303 	mul.w	r3, r1, r3
 800e68c:	4413      	add	r3, r2
 800e68e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
					break;
 800e696:	e2bf      	b.n	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800e698:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e69c:	4613      	mov	r3, r2
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	1a9b      	subs	r3, r3, r2
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a6:	4413      	add	r3, r2
 800e6a8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e6b0:	e016      	b.n	800e6e0 <readCanToStructs+0xd30>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800e6b2:	4b67      	ldr	r3, [pc, #412]	; (800e850 <readCanToStructs+0xea0>)
 800e6b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e6b8:	885b      	ldrh	r3, [r3, #2]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6c0:	4963      	ldr	r1, [pc, #396]	; (800e850 <readCanToStructs+0xea0>)
 800e6c2:	0112      	lsls	r2, r2, #4
 800e6c4:	440a      	add	r2, r1
 800e6c6:	4413      	add	r3, r2
 800e6c8:	3304      	adds	r3, #4
 800e6ca:	781a      	ldrb	r2, [r3, #0]
 800e6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ce:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800e6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e6d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6da:	3301      	adds	r3, #1
 800e6dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e6e0:	4b5b      	ldr	r3, [pc, #364]	; (800e850 <readCanToStructs+0xea0>)
 800e6e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e6e6:	885b      	ldrh	r3, [r3, #2]
 800e6e8:	4a59      	ldr	r2, [pc, #356]	; (800e850 <readCanToStructs+0xea0>)
 800e6ea:	011b      	lsls	r3, r3, #4
 800e6ec:	4413      	add	r3, r2
 800e6ee:	330c      	adds	r3, #12
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d3db      	bcc.n	800e6b2 <readCanToStructs+0xd02>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 800e6fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6fe:	4a52      	ldr	r2, [pc, #328]	; (800e848 <readCanToStructs+0xe98>)
 800e700:	f240 4112 	movw	r1, #1042	; 0x412
 800e704:	fb01 f303 	mul.w	r3, r1, r3
 800e708:	4413      	add	r3, r2
 800e70a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	461a      	mov	r2, r3
 800e712:	4613      	mov	r3, r2
 800e714:	00db      	lsls	r3, r3, #3
 800e716:	1a9a      	subs	r2, r3, r2
 800e718:	4b4d      	ldr	r3, [pc, #308]	; (800e850 <readCanToStructs+0xea0>)
 800e71a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e71e:	885b      	ldrh	r3, [r3, #2]
 800e720:	494b      	ldr	r1, [pc, #300]	; (800e850 <readCanToStructs+0xea0>)
 800e722:	011b      	lsls	r3, r3, #4
 800e724:	440b      	add	r3, r1
 800e726:	330c      	adds	r3, #12
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	3b01      	subs	r3, #1
 800e72c:	4413      	add	r3, r2
 800e72e:	2b07      	cmp	r3, #7
 800e730:	d912      	bls.n	800e758 <readCanToStructs+0xda8>
					printf("Received Fault Injection Data\n");
 800e732:	4849      	ldr	r0, [pc, #292]	; (800e858 <readCanToStructs+0xea8>)
 800e734:	f011 fdfe 	bl	8020334 <puts>
					Is_CAN_Exchange_happening = YES;
 800e738:	4b48      	ldr	r3, [pc, #288]	; (800e85c <readCanToStructs+0xeac>)
 800e73a:	2201      	movs	r2, #1
 800e73c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 800e73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e742:	4a41      	ldr	r2, [pc, #260]	; (800e848 <readCanToStructs+0xe98>)
 800e744:	f240 4112 	movw	r1, #1042	; 0x412
 800e748:	fb01 f303 	mul.w	r3, r1, r3
 800e74c:	4413      	add	r3, r2
 800e74e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800e752:	2200      	movs	r2, #0
 800e754:	701a      	strb	r2, [r3, #0]
				break;
 800e756:	e25f      	b.n	800ec18 <readCanToStructs+0x1268>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 800e758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e75c:	4a3a      	ldr	r2, [pc, #232]	; (800e848 <readCanToStructs+0xe98>)
 800e75e:	f240 4112 	movw	r1, #1042	; 0x412
 800e762:	fb01 f303 	mul.w	r3, r1, r3
 800e766:	4413      	add	r3, r2
 800e768:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800e76c:	2201      	movs	r2, #1
 800e76e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 800e770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e774:	4934      	ldr	r1, [pc, #208]	; (800e848 <readCanToStructs+0xe98>)
 800e776:	f240 4212 	movw	r2, #1042	; 0x412
 800e77a:	fb03 f202 	mul.w	r2, r3, r2
 800e77e:	440a      	add	r2, r1
 800e780:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 800e784:	7812      	ldrb	r2, [r2, #0]
 800e786:	3201      	adds	r2, #1
 800e788:	b2d0      	uxtb	r0, r2
 800e78a:	4a2f      	ldr	r2, [pc, #188]	; (800e848 <readCanToStructs+0xe98>)
 800e78c:	f240 4112 	movw	r1, #1042	; 0x412
 800e790:	fb01 f303 	mul.w	r3, r1, r3
 800e794:	4413      	add	r3, r2
 800e796:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800e79a:	4602      	mov	r2, r0
 800e79c:	701a      	strb	r2, [r3, #0]
				break;
 800e79e:	e23b      	b.n	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 800e7a0:	4b2f      	ldr	r3, [pc, #188]	; (800e860 <readCanToStructs+0xeb0>)
 800e7a2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800e7a4:	4b2a      	ldr	r3, [pc, #168]	; (800e850 <readCanToStructs+0xea0>)
 800e7a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e7aa:	885b      	ldrh	r3, [r3, #2]
 800e7ac:	4a28      	ldr	r2, [pc, #160]	; (800e850 <readCanToStructs+0xea0>)
 800e7ae:	011b      	lsls	r3, r3, #4
 800e7b0:	4413      	add	r3, r2
 800e7b2:	3304      	adds	r3, #4
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800e7ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d110      	bne.n	800e7e4 <readCanToStructs+0xe34>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 800e7c2:	2214      	movs	r2, #20
 800e7c4:	2100      	movs	r1, #0
 800e7c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7c8:	f011 fc30 	bl	802002c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 800e7cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7d0:	4a1d      	ldr	r2, [pc, #116]	; (800e848 <readCanToStructs+0xe98>)
 800e7d2:	f240 4112 	movw	r1, #1042	; 0x412
 800e7d6:	fb01 f303 	mul.w	r3, r1, r3
 800e7da:	4413      	add	r3, r2
 800e7dc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 800e7e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7e8:	4a17      	ldr	r2, [pc, #92]	; (800e848 <readCanToStructs+0xe98>)
 800e7ea:	f240 4112 	movw	r1, #1042	; 0x412
 800e7ee:	fb01 f303 	mul.w	r3, r1, r3
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d014      	beq.n	800e82c <readCanToStructs+0xe7c>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 800e802:	4818      	ldr	r0, [pc, #96]	; (800e864 <readCanToStructs+0xeb4>)
 800e804:	f011 fd96 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 800e808:	2214      	movs	r2, #20
 800e80a:	2100      	movs	r1, #0
 800e80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e80e:	f011 fc0d 	bl	802002c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 800e812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e816:	4a0c      	ldr	r2, [pc, #48]	; (800e848 <readCanToStructs+0xe98>)
 800e818:	f240 4112 	movw	r1, #1042	; 0x412
 800e81c:	fb01 f303 	mul.w	r3, r1, r3
 800e820:	4413      	add	r3, r2
 800e822:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800e826:	2200      	movs	r2, #0
 800e828:	701a      	strb	r2, [r3, #0]
					break;
 800e82a:	e1f5      	b.n	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800e82c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e830:	4613      	mov	r3, r2
 800e832:	00db      	lsls	r3, r3, #3
 800e834:	1a9b      	subs	r3, r3, r2
 800e836:	461a      	mov	r2, r3
 800e838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83a:	4413      	add	r3, r2
 800e83c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e83e:	2301      	movs	r3, #1
 800e840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e844:	e027      	b.n	800e896 <readCanToStructs+0xee6>
 800e846:	bf00      	nop
 800e848:	20004640 	.word	0x20004640
 800e84c:	2000195c 	.word	0x2000195c
 800e850:	20004e64 	.word	0x20004e64
 800e854:	080247f8 	.word	0x080247f8
 800e858:	08024818 	.word	0x08024818
 800e85c:	20000108 	.word	0x20000108
 800e860:	20002024 	.word	0x20002024
 800e864:	08024838 	.word	0x08024838
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800e868:	4bb9      	ldr	r3, [pc, #740]	; (800eb50 <readCanToStructs+0x11a0>)
 800e86a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e86e:	885b      	ldrh	r3, [r3, #2]
 800e870:	461a      	mov	r2, r3
 800e872:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e876:	49b6      	ldr	r1, [pc, #728]	; (800eb50 <readCanToStructs+0x11a0>)
 800e878:	0112      	lsls	r2, r2, #4
 800e87a:	440a      	add	r2, r1
 800e87c:	4413      	add	r3, r2
 800e87e:	3304      	adds	r3, #4
 800e880:	781a      	ldrb	r2, [r3, #0]
 800e882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e884:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e888:	3301      	adds	r3, #1
 800e88a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800e88c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e890:	3301      	adds	r3, #1
 800e892:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e896:	4bae      	ldr	r3, [pc, #696]	; (800eb50 <readCanToStructs+0x11a0>)
 800e898:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e89c:	885b      	ldrh	r3, [r3, #2]
 800e89e:	4aac      	ldr	r2, [pc, #688]	; (800eb50 <readCanToStructs+0x11a0>)
 800e8a0:	011b      	lsls	r3, r3, #4
 800e8a2:	4413      	add	r3, r2
 800e8a4:	330c      	adds	r3, #12
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d3db      	bcc.n	800e868 <readCanToStructs+0xeb8>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 800e8b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8b4:	4aa7      	ldr	r2, [pc, #668]	; (800eb54 <readCanToStructs+0x11a4>)
 800e8b6:	f240 4112 	movw	r1, #1042	; 0x412
 800e8ba:	fb01 f303 	mul.w	r3, r1, r3
 800e8be:	4413      	add	r3, r2
 800e8c0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	00db      	lsls	r3, r3, #3
 800e8cc:	1a9a      	subs	r2, r3, r2
 800e8ce:	4ba0      	ldr	r3, [pc, #640]	; (800eb50 <readCanToStructs+0x11a0>)
 800e8d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e8d4:	885b      	ldrh	r3, [r3, #2]
 800e8d6:	499e      	ldr	r1, [pc, #632]	; (800eb50 <readCanToStructs+0x11a0>)
 800e8d8:	011b      	lsls	r3, r3, #4
 800e8da:	440b      	add	r3, r1
 800e8dc:	330c      	adds	r3, #12
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	4413      	add	r3, r2
 800e8e4:	2b13      	cmp	r3, #19
 800e8e6:	d954      	bls.n	800e992 <readCanToStructs+0xfe2>
					uint16_t CRC16 = 0;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	603b      	str	r3, [r7, #0]
 800e8f0:	1d3b      	adds	r3, r7, #4
 800e8f2:	2224      	movs	r2, #36	; 0x24
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f011 fb98 	bl	802002c <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 800e8fc:	463b      	mov	r3, r7
 800e8fe:	2214      	movs	r2, #20
 800e900:	4995      	ldr	r1, [pc, #596]	; (800eb58 <readCanToStructs+0x11a8>)
 800e902:	4618      	mov	r0, r3
 800e904:	f011 fb6a 	bl	801ffdc <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 800e908:	463b      	mov	r3, r7
 800e90a:	2214      	movs	r2, #20
 800e90c:	4619      	mov	r1, r3
 800e90e:	2000      	movs	r0, #0
 800e910:	f001 ff8c 	bl	801082c <GetCRC16>
 800e914:	4603      	mov	r3, r0
 800e916:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 800e918:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d10c      	bne.n	800e938 <readCanToStructs+0xf88>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 800e91e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e922:	4a8c      	ldr	r2, [pc, #560]	; (800eb54 <readCanToStructs+0x11a4>)
 800e924:	f240 4112 	movw	r1, #1042	; 0x412
 800e928:	fb01 f303 	mul.w	r3, r1, r3
 800e92c:	4413      	add	r3, r2
 800e92e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800e932:	2200      	movs	r2, #0
 800e934:	701a      	strb	r2, [r3, #0]
				break;
 800e936:	e16f      	b.n	800ec18 <readCanToStructs+0x1268>
						if(Debug_flag == 1)
 800e938:	4b88      	ldr	r3, [pc, #544]	; (800eb5c <readCanToStructs+0x11ac>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d10a      	bne.n	800e956 <readCanToStructs+0xfa6>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 800e940:	4b85      	ldr	r3, [pc, #532]	; (800eb58 <readCanToStructs+0x11a8>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	4a86      	ldr	r2, [pc, #536]	; (800eb60 <readCanToStructs+0x11b0>)
 800e946:	3366      	adds	r3, #102	; 0x66
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	4619      	mov	r1, r3
 800e950:	4884      	ldr	r0, [pc, #528]	; (800eb64 <readCanToStructs+0x11b4>)
 800e952:	f011 fc53 	bl	80201fc <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 800e956:	4b80      	ldr	r3, [pc, #512]	; (800eb58 <readCanToStructs+0x11a8>)
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	461a      	mov	r2, r3
 800e95c:	4613      	mov	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	4413      	add	r3, r2
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	4a80      	ldr	r2, [pc, #512]	; (800eb68 <readCanToStructs+0x11b8>)
 800e966:	4413      	add	r3, r2
 800e968:	2214      	movs	r2, #20
 800e96a:	497b      	ldr	r1, [pc, #492]	; (800eb58 <readCanToStructs+0x11a8>)
 800e96c:	4618      	mov	r0, r3
 800e96e:	f011 fb35 	bl	801ffdc <memcpy>
						Is_CAN_Exchange_happening = YES;
 800e972:	4b7e      	ldr	r3, [pc, #504]	; (800eb6c <readCanToStructs+0x11bc>)
 800e974:	2201      	movs	r2, #1
 800e976:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 800e978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e97c:	4a75      	ldr	r2, [pc, #468]	; (800eb54 <readCanToStructs+0x11a4>)
 800e97e:	f240 4112 	movw	r1, #1042	; 0x412
 800e982:	fb01 f303 	mul.w	r3, r1, r3
 800e986:	4413      	add	r3, r2
 800e988:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800e98c:	2200      	movs	r2, #0
 800e98e:	701a      	strb	r2, [r3, #0]
				break;
 800e990:	e142      	b.n	800ec18 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 800e992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e996:	4a6f      	ldr	r2, [pc, #444]	; (800eb54 <readCanToStructs+0x11a4>)
 800e998:	f240 4112 	movw	r1, #1042	; 0x412
 800e99c:	fb01 f303 	mul.w	r3, r1, r3
 800e9a0:	4413      	add	r3, r2
 800e9a2:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 800e9aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9ae:	4969      	ldr	r1, [pc, #420]	; (800eb54 <readCanToStructs+0x11a4>)
 800e9b0:	f240 4212 	movw	r2, #1042	; 0x412
 800e9b4:	fb03 f202 	mul.w	r2, r3, r2
 800e9b8:	440a      	add	r2, r1
 800e9ba:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 800e9be:	7812      	ldrb	r2, [r2, #0]
 800e9c0:	3201      	adds	r2, #1
 800e9c2:	b2d0      	uxtb	r0, r2
 800e9c4:	4a63      	ldr	r2, [pc, #396]	; (800eb54 <readCanToStructs+0x11a4>)
 800e9c6:	f240 4112 	movw	r1, #1042	; 0x412
 800e9ca:	fb01 f303 	mul.w	r3, r1, r3
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	701a      	strb	r2, [r3, #0]
				break;
 800e9d8:	e11e      	b.n	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 800e9da:	4b5f      	ldr	r3, [pc, #380]	; (800eb58 <readCanToStructs+0x11a8>)
 800e9dc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800e9de:	4b5c      	ldr	r3, [pc, #368]	; (800eb50 <readCanToStructs+0x11a0>)
 800e9e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800e9e4:	885b      	ldrh	r3, [r3, #2]
 800e9e6:	4a5a      	ldr	r2, [pc, #360]	; (800eb50 <readCanToStructs+0x11a0>)
 800e9e8:	011b      	lsls	r3, r3, #4
 800e9ea:	4413      	add	r3, r2
 800e9ec:	3304      	adds	r3, #4
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800e9f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d110      	bne.n	800ea1e <readCanToStructs+0x106e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 800e9fc:	2214      	movs	r2, #20
 800e9fe:	2100      	movs	r1, #0
 800ea00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea02:	f011 fb13 	bl	802002c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 800ea06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea0a:	4a52      	ldr	r2, [pc, #328]	; (800eb54 <readCanToStructs+0x11a4>)
 800ea0c:	f240 4112 	movw	r1, #1042	; 0x412
 800ea10:	fb01 f303 	mul.w	r3, r1, r3
 800ea14:	4413      	add	r3, r2
 800ea16:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 800ea1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea22:	4a4c      	ldr	r2, [pc, #304]	; (800eb54 <readCanToStructs+0x11a4>)
 800ea24:	f240 4112 	movw	r1, #1042	; 0x412
 800ea28:	fb01 f303 	mul.w	r3, r1, r3
 800ea2c:	4413      	add	r3, r2
 800ea2e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d014      	beq.n	800ea66 <readCanToStructs+0x10b6>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 800ea3c:	484c      	ldr	r0, [pc, #304]	; (800eb70 <readCanToStructs+0x11c0>)
 800ea3e:	f011 fc79 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 800ea42:	2214      	movs	r2, #20
 800ea44:	2100      	movs	r1, #0
 800ea46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea48:	f011 faf0 	bl	802002c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 800ea4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea50:	4a40      	ldr	r2, [pc, #256]	; (800eb54 <readCanToStructs+0x11a4>)
 800ea52:	f240 4112 	movw	r1, #1042	; 0x412
 800ea56:	fb01 f303 	mul.w	r3, r1, r3
 800ea5a:	4413      	add	r3, r2
 800ea5c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800ea60:	2200      	movs	r2, #0
 800ea62:	701a      	strb	r2, [r3, #0]
					break;
 800ea64:	e0d8      	b.n	800ec18 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800ea66:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	00db      	lsls	r3, r3, #3
 800ea6e:	1a9b      	subs	r3, r3, r2
 800ea70:	461a      	mov	r2, r3
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	4413      	add	r3, r2
 800ea76:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ea78:	2301      	movs	r3, #1
 800ea7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ea7e:	e016      	b.n	800eaae <readCanToStructs+0x10fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800ea80:	4b33      	ldr	r3, [pc, #204]	; (800eb50 <readCanToStructs+0x11a0>)
 800ea82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ea86:	885b      	ldrh	r3, [r3, #2]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea8e:	4930      	ldr	r1, [pc, #192]	; (800eb50 <readCanToStructs+0x11a0>)
 800ea90:	0112      	lsls	r2, r2, #4
 800ea92:	440a      	add	r2, r1
 800ea94:	4413      	add	r3, r2
 800ea96:	3304      	adds	r3, #4
 800ea98:	781a      	ldrb	r2, [r3, #0]
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800eaa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eaae:	4b28      	ldr	r3, [pc, #160]	; (800eb50 <readCanToStructs+0x11a0>)
 800eab0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800eab4:	885b      	ldrh	r3, [r3, #2]
 800eab6:	4a26      	ldr	r2, [pc, #152]	; (800eb50 <readCanToStructs+0x11a0>)
 800eab8:	011b      	lsls	r3, r3, #4
 800eaba:	4413      	add	r3, r2
 800eabc:	330c      	adds	r3, #12
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d3db      	bcc.n	800ea80 <readCanToStructs+0x10d0>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 800eac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eacc:	4a21      	ldr	r2, [pc, #132]	; (800eb54 <readCanToStructs+0x11a4>)
 800eace:	f240 4112 	movw	r1, #1042	; 0x412
 800ead2:	fb01 f303 	mul.w	r3, r1, r3
 800ead6:	4413      	add	r3, r2
 800ead8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	461a      	mov	r2, r3
 800eae0:	4613      	mov	r3, r2
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	1a9a      	subs	r2, r3, r2
 800eae6:	4b1a      	ldr	r3, [pc, #104]	; (800eb50 <readCanToStructs+0x11a0>)
 800eae8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800eaec:	885b      	ldrh	r3, [r3, #2]
 800eaee:	4918      	ldr	r1, [pc, #96]	; (800eb50 <readCanToStructs+0x11a0>)
 800eaf0:	011b      	lsls	r3, r3, #4
 800eaf2:	440b      	add	r3, r1
 800eaf4:	330c      	adds	r3, #12
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	4413      	add	r3, r2
 800eafc:	2b13      	cmp	r3, #19
 800eafe:	d966      	bls.n	800ebce <readCanToStructs+0x121e>
					uint16_t CRC16 = 0;
 800eb00:	2300      	movs	r3, #0
 800eb02:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 800eb04:	2300      	movs	r3, #0
 800eb06:	603b      	str	r3, [r7, #0]
 800eb08:	1d3b      	adds	r3, r7, #4
 800eb0a:	2224      	movs	r2, #36	; 0x24
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f011 fa8c 	bl	802002c <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 800eb14:	463b      	mov	r3, r7
 800eb16:	2214      	movs	r2, #20
 800eb18:	490f      	ldr	r1, [pc, #60]	; (800eb58 <readCanToStructs+0x11a8>)
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f011 fa5e 	bl	801ffdc <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 800eb20:	463b      	mov	r3, r7
 800eb22:	2214      	movs	r2, #20
 800eb24:	4619      	mov	r1, r3
 800eb26:	2000      	movs	r0, #0
 800eb28:	f001 fe80 	bl	801082c <GetCRC16>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 800eb30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d11e      	bne.n	800eb74 <readCanToStructs+0x11c4>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 800eb36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb3a:	4a06      	ldr	r2, [pc, #24]	; (800eb54 <readCanToStructs+0x11a4>)
 800eb3c:	f240 4112 	movw	r1, #1042	; 0x412
 800eb40:	fb01 f303 	mul.w	r3, r1, r3
 800eb44:	4413      	add	r3, r2
 800eb46:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	701a      	strb	r2, [r3, #0]
				break;
 800eb4e:	e063      	b.n	800ec18 <readCanToStructs+0x1268>
 800eb50:	20004e64 	.word	0x20004e64
 800eb54:	20004640 	.word	0x20004640
 800eb58:	20002024 	.word	0x20002024
 800eb5c:	20000645 	.word	0x20000645
 800eb60:	20000304 	.word	0x20000304
 800eb64:	08024854 	.word	0x08024854
 800eb68:	20001f48 	.word	0x20001f48
 800eb6c:	20000108 	.word	0x20000108
 800eb70:	08024868 	.word	0x08024868
						if(Debug_flag == 1)
 800eb74:	4bc7      	ldr	r3, [pc, #796]	; (800ee94 <readCanToStructs+0x14e4>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d10a      	bne.n	800eb92 <readCanToStructs+0x11e2>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 800eb7c:	4bc6      	ldr	r3, [pc, #792]	; (800ee98 <readCanToStructs+0x14e8>)
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	4ac6      	ldr	r2, [pc, #792]	; (800ee9c <readCanToStructs+0x14ec>)
 800eb82:	3366      	adds	r3, #102	; 0x66
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	4413      	add	r3, r2
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	48c4      	ldr	r0, [pc, #784]	; (800eea0 <readCanToStructs+0x14f0>)
 800eb8e:	f011 fb35 	bl	80201fc <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 800eb92:	4bc1      	ldr	r3, [pc, #772]	; (800ee98 <readCanToStructs+0x14e8>)
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	461a      	mov	r2, r3
 800eb98:	4613      	mov	r3, r2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	4413      	add	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	4ac0      	ldr	r2, [pc, #768]	; (800eea4 <readCanToStructs+0x14f4>)
 800eba2:	4413      	add	r3, r2
 800eba4:	2214      	movs	r2, #20
 800eba6:	49bc      	ldr	r1, [pc, #752]	; (800ee98 <readCanToStructs+0x14e8>)
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f011 fa17 	bl	801ffdc <memcpy>
						Is_CAN_Exchange_happening = YES;
 800ebae:	4bbe      	ldr	r3, [pc, #760]	; (800eea8 <readCanToStructs+0x14f8>)
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 800ebb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebb8:	4abc      	ldr	r2, [pc, #752]	; (800eeac <readCanToStructs+0x14fc>)
 800ebba:	f240 4112 	movw	r1, #1042	; 0x412
 800ebbe:	fb01 f303 	mul.w	r3, r1, r3
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800ebc8:	2200      	movs	r2, #0
 800ebca:	701a      	strb	r2, [r3, #0]
				break;
 800ebcc:	e024      	b.n	800ec18 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 800ebce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebd2:	4ab6      	ldr	r2, [pc, #728]	; (800eeac <readCanToStructs+0x14fc>)
 800ebd4:	f240 4112 	movw	r1, #1042	; 0x412
 800ebd8:	fb01 f303 	mul.w	r3, r1, r3
 800ebdc:	4413      	add	r3, r2
 800ebde:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 800ebe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebea:	49b0      	ldr	r1, [pc, #704]	; (800eeac <readCanToStructs+0x14fc>)
 800ebec:	f240 4212 	movw	r2, #1042	; 0x412
 800ebf0:	fb03 f202 	mul.w	r2, r3, r2
 800ebf4:	440a      	add	r2, r1
 800ebf6:	f202 4211 	addw	r2, r2, #1041	; 0x411
 800ebfa:	7812      	ldrb	r2, [r2, #0]
 800ebfc:	3201      	adds	r2, #1
 800ebfe:	b2d0      	uxtb	r0, r2
 800ec00:	4aaa      	ldr	r2, [pc, #680]	; (800eeac <readCanToStructs+0x14fc>)
 800ec02:	f240 4112 	movw	r1, #1042	; 0x412
 800ec06:	fb01 f303 	mul.w	r3, r1, r3
 800ec0a:	4413      	add	r3, r2
 800ec0c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800ec10:	4602      	mov	r2, r0
 800ec12:	701a      	strb	r2, [r3, #0]
				break;
 800ec14:	e000      	b.n	800ec18 <readCanToStructs+0x1268>
				break;
 800ec16:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 800ec18:	4ba5      	ldr	r3, [pc, #660]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ec1e:	885b      	ldrh	r3, [r3, #2]
 800ec20:	011b      	lsls	r3, r3, #4
 800ec22:	4aa3      	ldr	r2, [pc, #652]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec24:	4413      	add	r3, r2
 800ec26:	2210      	movs	r2, #16
 800ec28:	2100      	movs	r1, #0
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f011 f9fe 	bl	802002c <memset>
			canRead.Out++;
 800ec30:	4b9f      	ldr	r3, [pc, #636]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ec36:	885b      	ldrh	r3, [r3, #2]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	4b9c      	ldr	r3, [pc, #624]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ec42:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 800ec44:	4b9a      	ldr	r3, [pc, #616]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec46:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ec4a:	885b      	ldrh	r3, [r3, #2]
 800ec4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec50:	d104      	bne.n	800ec5c <readCanToStructs+0x12ac>
				canRead.Out = 0;
 800ec52:	4b97      	ldr	r3, [pc, #604]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ec58:	2200      	movs	r2, #0
 800ec5a:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 800ec5c:	f7fe fe52 	bl	800d904 <canDataReady>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	f47e aecb 	bne.w	800d9fe <readCanToStructs+0x4e>
	break;
 800ec68:	f001 bd76 	b.w	8010758 <readCanToStructs+0x2da8>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 800ec6c:	4b90      	ldr	r3, [pc, #576]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ec72:	885b      	ldrh	r3, [r3, #2]
 800ec74:	4a8e      	ldr	r2, [pc, #568]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec76:	011b      	lsls	r3, r3, #4
 800ec78:	4413      	add	r3, r2
 800ec7a:	330f      	adds	r3, #15
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 800ec84:	4b8a      	ldr	r3, [pc, #552]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ec8a:	885b      	ldrh	r3, [r3, #2]
 800ec8c:	4a88      	ldr	r2, [pc, #544]	; (800eeb0 <readCanToStructs+0x1500>)
 800ec8e:	011b      	lsls	r3, r3, #4
 800ec90:	4413      	add	r3, r2
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ec98:	f200 867c 	bhi.w	800f994 <readCanToStructs+0x1fe4>
 800ec9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eca0:	d80a      	bhi.n	800ecb8 <readCanToStructs+0x1308>
 800eca2:	f240 1203 	movw	r2, #259	; 0x103
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d01e      	beq.n	800ece8 <readCanToStructs+0x1338>
 800ecaa:	f240 1209 	movw	r2, #265	; 0x109
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	f000 8108 	beq.w	800eec4 <readCanToStructs+0x1514>
				break;
 800ecb4:	f000 be6e 	b.w	800f994 <readCanToStructs+0x1fe4>
 800ecb8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800ecbc:	2b07      	cmp	r3, #7
 800ecbe:	f200 8669 	bhi.w	800f994 <readCanToStructs+0x1fe4>
 800ecc2:	a201      	add	r2, pc, #4	; (adr r2, 800ecc8 <readCanToStructs+0x1318>)
 800ecc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc8:	0800f071 	.word	0x0800f071
 800eccc:	0800f255 	.word	0x0800f255
 800ecd0:	0800f995 	.word	0x0800f995
 800ecd4:	0800f995 	.word	0x0800f995
 800ecd8:	0800f7f7 	.word	0x0800f7f7
 800ecdc:	0800f995 	.word	0x0800f995
 800ece0:	0800f405 	.word	0x0800f405
 800ece4:	0800f5ff 	.word	0x0800f5ff
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800ece8:	4b72      	ldr	r3, [pc, #456]	; (800eeb4 <readCanToStructs+0x1504>)
 800ecea:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800ecec:	4b70      	ldr	r3, [pc, #448]	; (800eeb0 <readCanToStructs+0x1500>)
 800ecee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ecf2:	885b      	ldrh	r3, [r3, #2]
 800ecf4:	4a6e      	ldr	r2, [pc, #440]	; (800eeb0 <readCanToStructs+0x1500>)
 800ecf6:	011b      	lsls	r3, r3, #4
 800ecf8:	4413      	add	r3, r2
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800ed02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d110      	bne.n	800ed2c <readCanToStructs+0x137c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800ed0a:	2206      	movs	r2, #6
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed10:	f011 f98c 	bl	802002c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800ed14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed18:	4a64      	ldr	r2, [pc, #400]	; (800eeac <readCanToStructs+0x14fc>)
 800ed1a:	f240 4112 	movw	r1, #1042	; 0x412
 800ed1e:	fb01 f303 	mul.w	r3, r1, r3
 800ed22:	4413      	add	r3, r2
 800ed24:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ed28:	2200      	movs	r2, #0
 800ed2a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 800ed2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed30:	4a5e      	ldr	r2, [pc, #376]	; (800eeac <readCanToStructs+0x14fc>)
 800ed32:	f240 4112 	movw	r1, #1042	; 0x412
 800ed36:	fb01 f303 	mul.w	r3, r1, r3
 800ed3a:	4413      	add	r3, r2
 800ed3c:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d015      	beq.n	800ed76 <readCanToStructs+0x13c6>
					printf("GPS Packet Seq no MisMatch\n");
 800ed4a:	485b      	ldr	r0, [pc, #364]	; (800eeb8 <readCanToStructs+0x1508>)
 800ed4c:	f011 faf2 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800ed50:	2206      	movs	r2, #6
 800ed52:	2100      	movs	r1, #0
 800ed54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed56:	f011 f969 	bl	802002c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800ed5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed5e:	4a53      	ldr	r2, [pc, #332]	; (800eeac <readCanToStructs+0x14fc>)
 800ed60:	f240 4112 	movw	r1, #1042	; 0x412
 800ed64:	fb01 f303 	mul.w	r3, r1, r3
 800ed68:	4413      	add	r3, r2
 800ed6a:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ed6e:	2200      	movs	r2, #0
 800ed70:	701a      	strb	r2, [r3, #0]
					break;
 800ed72:	f000 be14 	b.w	800f99e <readCanToStructs+0x1fee>
				uc_pp_charPtr += (7 * uc_seqNo);
 800ed76:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ed7a:	4613      	mov	r3, r2
 800ed7c:	00db      	lsls	r3, r3, #3
 800ed7e:	1a9b      	subs	r3, r3, r2
 800ed80:	461a      	mov	r2, r3
 800ed82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed84:	4413      	add	r3, r2
 800ed86:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ed88:	2301      	movs	r3, #1
 800ed8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed8e:	e016      	b.n	800edbe <readCanToStructs+0x140e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800ed90:	4b47      	ldr	r3, [pc, #284]	; (800eeb0 <readCanToStructs+0x1500>)
 800ed92:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ed96:	885b      	ldrh	r3, [r3, #2]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed9e:	4944      	ldr	r1, [pc, #272]	; (800eeb0 <readCanToStructs+0x1500>)
 800eda0:	0112      	lsls	r2, r2, #4
 800eda2:	440a      	add	r2, r1
 800eda4:	4413      	add	r3, r2
 800eda6:	3304      	adds	r3, #4
 800eda8:	781a      	ldrb	r2, [r3, #0]
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800edae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb0:	3301      	adds	r3, #1
 800edb2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800edb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edb8:	3301      	adds	r3, #1
 800edba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800edbe:	4b3c      	ldr	r3, [pc, #240]	; (800eeb0 <readCanToStructs+0x1500>)
 800edc0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800edc4:	885b      	ldrh	r3, [r3, #2]
 800edc6:	4a3a      	ldr	r2, [pc, #232]	; (800eeb0 <readCanToStructs+0x1500>)
 800edc8:	011b      	lsls	r3, r3, #4
 800edca:	4413      	add	r3, r2
 800edcc:	330c      	adds	r3, #12
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d3db      	bcc.n	800ed90 <readCanToStructs+0x13e0>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800edd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eddc:	4a33      	ldr	r2, [pc, #204]	; (800eeac <readCanToStructs+0x14fc>)
 800edde:	f240 4112 	movw	r1, #1042	; 0x412
 800ede2:	fb01 f303 	mul.w	r3, r1, r3
 800ede6:	4413      	add	r3, r2
 800ede8:	f203 2307 	addw	r3, r3, #519	; 0x207
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	461a      	mov	r2, r3
 800edf0:	4613      	mov	r3, r2
 800edf2:	00db      	lsls	r3, r3, #3
 800edf4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800edf6:	4b2e      	ldr	r3, [pc, #184]	; (800eeb0 <readCanToStructs+0x1500>)
 800edf8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800edfc:	885b      	ldrh	r3, [r3, #2]
 800edfe:	492c      	ldr	r1, [pc, #176]	; (800eeb0 <readCanToStructs+0x1500>)
 800ee00:	011b      	lsls	r3, r3, #4
 800ee02:	440b      	add	r3, r1
 800ee04:	330c      	adds	r3, #12
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800ee0c:	2b05      	cmp	r3, #5
 800ee0e:	d91c      	bls.n	800ee4a <readCanToStructs+0x149a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800ee10:	4b2a      	ldr	r3, [pc, #168]	; (800eebc <readCanToStructs+0x150c>)
 800ee12:	4a28      	ldr	r2, [pc, #160]	; (800eeb4 <readCanToStructs+0x1504>)
 800ee14:	6811      	ldr	r1, [r2, #0]
 800ee16:	6019      	str	r1, [r3, #0]
 800ee18:	8892      	ldrh	r2, [r2, #4]
 800ee1a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800ee1c:	4b1d      	ldr	r3, [pc, #116]	; (800ee94 <readCanToStructs+0x14e4>)
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d102      	bne.n	800ee2a <readCanToStructs+0x147a>
						printf("GPS_PACKET_RECEIVED\n");
 800ee24:	4826      	ldr	r0, [pc, #152]	; (800eec0 <readCanToStructs+0x1510>)
 800ee26:	f011 fa85 	bl	8020334 <puts>
					Write_RTC();
 800ee2a:	f7fc fadb 	bl	800b3e4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800ee2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee32:	4a1e      	ldr	r2, [pc, #120]	; (800eeac <readCanToStructs+0x14fc>)
 800ee34:	f240 4112 	movw	r1, #1042	; 0x412
 800ee38:	fb01 f303 	mul.w	r3, r1, r3
 800ee3c:	4413      	add	r3, r2
 800ee3e:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ee42:	2200      	movs	r2, #0
 800ee44:	701a      	strb	r2, [r3, #0]
				break;
 800ee46:	f000 bdaa 	b.w	800f99e <readCanToStructs+0x1fee>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 800ee4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee4e:	4a17      	ldr	r2, [pc, #92]	; (800eeac <readCanToStructs+0x14fc>)
 800ee50:	f240 4112 	movw	r1, #1042	; 0x412
 800ee54:	fb01 f303 	mul.w	r3, r1, r3
 800ee58:	4413      	add	r3, r2
 800ee5a:	f203 2306 	addw	r3, r3, #518	; 0x206
 800ee5e:	2201      	movs	r2, #1
 800ee60:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 800ee62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee66:	4911      	ldr	r1, [pc, #68]	; (800eeac <readCanToStructs+0x14fc>)
 800ee68:	f240 4212 	movw	r2, #1042	; 0x412
 800ee6c:	fb03 f202 	mul.w	r2, r3, r2
 800ee70:	440a      	add	r2, r1
 800ee72:	f202 2207 	addw	r2, r2, #519	; 0x207
 800ee76:	7812      	ldrb	r2, [r2, #0]
 800ee78:	3201      	adds	r2, #1
 800ee7a:	b2d0      	uxtb	r0, r2
 800ee7c:	4a0b      	ldr	r2, [pc, #44]	; (800eeac <readCanToStructs+0x14fc>)
 800ee7e:	f240 4112 	movw	r1, #1042	; 0x412
 800ee82:	fb01 f303 	mul.w	r3, r1, r3
 800ee86:	4413      	add	r3, r2
 800ee88:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	701a      	strb	r2, [r3, #0]
				break;
 800ee90:	f000 bd85 	b.w	800f99e <readCanToStructs+0x1fee>
 800ee94:	20000645 	.word	0x20000645
 800ee98:	20002024 	.word	0x20002024
 800ee9c:	20000304 	.word	0x20000304
 800eea0:	08024888 	.word	0x08024888
 800eea4:	20001f48 	.word	0x20001f48
 800eea8:	20000108 	.word	0x20000108
 800eeac:	20004640 	.word	0x20004640
 800eeb0:	20004e64 	.word	0x20004e64
 800eeb4:	20002880 	.word	0x20002880
 800eeb8:	080246c4 	.word	0x080246c4
 800eebc:	20002878 	.word	0x20002878
 800eec0:	080246e0 	.word	0x080246e0
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800eec4:	4bc5      	ldr	r3, [pc, #788]	; (800f1dc <readCanToStructs+0x182c>)
 800eec6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800eec8:	4bc5      	ldr	r3, [pc, #788]	; (800f1e0 <readCanToStructs+0x1830>)
 800eeca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800eece:	885b      	ldrh	r3, [r3, #2]
 800eed0:	4ac3      	ldr	r2, [pc, #780]	; (800f1e0 <readCanToStructs+0x1830>)
 800eed2:	011b      	lsls	r3, r3, #4
 800eed4:	4413      	add	r3, r2
 800eed6:	3304      	adds	r3, #4
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800eede:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d110      	bne.n	800ef08 <readCanToStructs+0x1558>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800eee6:	2206      	movs	r2, #6
 800eee8:	2100      	movs	r1, #0
 800eeea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eeec:	f011 f89e 	bl	802002c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800eef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eef4:	4abb      	ldr	r2, [pc, #748]	; (800f1e4 <readCanToStructs+0x1834>)
 800eef6:	f240 4112 	movw	r1, #1042	; 0x412
 800eefa:	fb01 f303 	mul.w	r3, r1, r3
 800eefe:	4413      	add	r3, r2
 800ef00:	f203 2313 	addw	r3, r3, #531	; 0x213
 800ef04:	2200      	movs	r2, #0
 800ef06:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 800ef08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef0c:	4ab5      	ldr	r2, [pc, #724]	; (800f1e4 <readCanToStructs+0x1834>)
 800ef0e:	f240 4112 	movw	r1, #1042	; 0x412
 800ef12:	fb01 f303 	mul.w	r3, r1, r3
 800ef16:	4413      	add	r3, r2
 800ef18:	f203 2313 	addw	r3, r3, #531	; 0x213
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d015      	beq.n	800ef52 <readCanToStructs+0x15a2>
					printf("GPS2 Packet Seq no MisMatch\n");
 800ef26:	48b0      	ldr	r0, [pc, #704]	; (800f1e8 <readCanToStructs+0x1838>)
 800ef28:	f011 fa04 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800ef2c:	2206      	movs	r2, #6
 800ef2e:	2100      	movs	r1, #0
 800ef30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef32:	f011 f87b 	bl	802002c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800ef36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef3a:	4aaa      	ldr	r2, [pc, #680]	; (800f1e4 <readCanToStructs+0x1834>)
 800ef3c:	f240 4112 	movw	r1, #1042	; 0x412
 800ef40:	fb01 f303 	mul.w	r3, r1, r3
 800ef44:	4413      	add	r3, r2
 800ef46:	f203 2313 	addw	r3, r3, #531	; 0x213
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	701a      	strb	r2, [r3, #0]
					break;
 800ef4e:	f000 bd26 	b.w	800f99e <readCanToStructs+0x1fee>
				uc_pp_charPtr += (7 * uc_seqNo);
 800ef52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ef56:	4613      	mov	r3, r2
 800ef58:	00db      	lsls	r3, r3, #3
 800ef5a:	1a9b      	subs	r3, r3, r2
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	4413      	add	r3, r2
 800ef62:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ef64:	2301      	movs	r3, #1
 800ef66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ef6a:	e016      	b.n	800ef9a <readCanToStructs+0x15ea>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800ef6c:	4b9c      	ldr	r3, [pc, #624]	; (800f1e0 <readCanToStructs+0x1830>)
 800ef6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ef72:	885b      	ldrh	r3, [r3, #2]
 800ef74:	461a      	mov	r2, r3
 800ef76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef7a:	4999      	ldr	r1, [pc, #612]	; (800f1e0 <readCanToStructs+0x1830>)
 800ef7c:	0112      	lsls	r2, r2, #4
 800ef7e:	440a      	add	r2, r1
 800ef80:	4413      	add	r3, r2
 800ef82:	3304      	adds	r3, #4
 800ef84:	781a      	ldrb	r2, [r3, #0]
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ef90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef94:	3301      	adds	r3, #1
 800ef96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ef9a:	4b91      	ldr	r3, [pc, #580]	; (800f1e0 <readCanToStructs+0x1830>)
 800ef9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800efa0:	885b      	ldrh	r3, [r3, #2]
 800efa2:	4a8f      	ldr	r2, [pc, #572]	; (800f1e0 <readCanToStructs+0x1830>)
 800efa4:	011b      	lsls	r3, r3, #4
 800efa6:	4413      	add	r3, r2
 800efa8:	330c      	adds	r3, #12
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d3db      	bcc.n	800ef6c <readCanToStructs+0x15bc>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 800efb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800efb8:	4a8a      	ldr	r2, [pc, #552]	; (800f1e4 <readCanToStructs+0x1834>)
 800efba:	f240 4112 	movw	r1, #1042	; 0x412
 800efbe:	fb01 f303 	mul.w	r3, r1, r3
 800efc2:	4413      	add	r3, r2
 800efc4:	f203 2313 	addw	r3, r3, #531	; 0x213
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	461a      	mov	r2, r3
 800efcc:	4613      	mov	r3, r2
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800efd2:	4b83      	ldr	r3, [pc, #524]	; (800f1e0 <readCanToStructs+0x1830>)
 800efd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800efd8:	885b      	ldrh	r3, [r3, #2]
 800efda:	4981      	ldr	r1, [pc, #516]	; (800f1e0 <readCanToStructs+0x1830>)
 800efdc:	011b      	lsls	r3, r3, #4
 800efde:	440b      	add	r3, r1
 800efe0:	330c      	adds	r3, #12
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	3b01      	subs	r3, #1
 800efe6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 800efe8:	2b05      	cmp	r3, #5
 800efea:	d91c      	bls.n	800f026 <readCanToStructs+0x1676>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800efec:	4b7f      	ldr	r3, [pc, #508]	; (800f1ec <readCanToStructs+0x183c>)
 800efee:	4a7b      	ldr	r2, [pc, #492]	; (800f1dc <readCanToStructs+0x182c>)
 800eff0:	6811      	ldr	r1, [r2, #0]
 800eff2:	6019      	str	r1, [r3, #0]
 800eff4:	8892      	ldrh	r2, [r2, #4]
 800eff6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800eff8:	4b7d      	ldr	r3, [pc, #500]	; (800f1f0 <readCanToStructs+0x1840>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	2b01      	cmp	r3, #1
 800effe:	d102      	bne.n	800f006 <readCanToStructs+0x1656>
						printf("GPS2_PACKET_RECEIVED\n");
 800f000:	487c      	ldr	r0, [pc, #496]	; (800f1f4 <readCanToStructs+0x1844>)
 800f002:	f011 f997 	bl	8020334 <puts>
					Write_RTC();
 800f006:	f7fc f9ed 	bl	800b3e4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800f00a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f00e:	4a75      	ldr	r2, [pc, #468]	; (800f1e4 <readCanToStructs+0x1834>)
 800f010:	f240 4112 	movw	r1, #1042	; 0x412
 800f014:	fb01 f303 	mul.w	r3, r1, r3
 800f018:	4413      	add	r3, r2
 800f01a:	f203 2313 	addw	r3, r3, #531	; 0x213
 800f01e:	2200      	movs	r2, #0
 800f020:	701a      	strb	r2, [r3, #0]
				break;
 800f022:	f000 bcbc 	b.w	800f99e <readCanToStructs+0x1fee>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 800f026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f02a:	4a6e      	ldr	r2, [pc, #440]	; (800f1e4 <readCanToStructs+0x1834>)
 800f02c:	f240 4112 	movw	r1, #1042	; 0x412
 800f030:	fb01 f303 	mul.w	r3, r1, r3
 800f034:	4413      	add	r3, r2
 800f036:	f203 2312 	addw	r3, r3, #530	; 0x212
 800f03a:	2201      	movs	r2, #1
 800f03c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 800f03e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f042:	4968      	ldr	r1, [pc, #416]	; (800f1e4 <readCanToStructs+0x1834>)
 800f044:	f240 4212 	movw	r2, #1042	; 0x412
 800f048:	fb03 f202 	mul.w	r2, r3, r2
 800f04c:	440a      	add	r2, r1
 800f04e:	f202 2213 	addw	r2, r2, #531	; 0x213
 800f052:	7812      	ldrb	r2, [r2, #0]
 800f054:	3201      	adds	r2, #1
 800f056:	b2d0      	uxtb	r0, r2
 800f058:	4a62      	ldr	r2, [pc, #392]	; (800f1e4 <readCanToStructs+0x1834>)
 800f05a:	f240 4112 	movw	r1, #1042	; 0x412
 800f05e:	fb01 f303 	mul.w	r3, r1, r3
 800f062:	4413      	add	r3, r2
 800f064:	f203 2313 	addw	r3, r3, #531	; 0x213
 800f068:	4602      	mov	r2, r0
 800f06a:	701a      	strb	r2, [r3, #0]
				break;
 800f06c:	f000 bc97 	b.w	800f99e <readCanToStructs+0x1fee>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 800f070:	4b61      	ldr	r3, [pc, #388]	; (800f1f8 <readCanToStructs+0x1848>)
 800f072:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800f074:	4b5a      	ldr	r3, [pc, #360]	; (800f1e0 <readCanToStructs+0x1830>)
 800f076:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f07a:	885b      	ldrh	r3, [r3, #2]
 800f07c:	4a58      	ldr	r2, [pc, #352]	; (800f1e0 <readCanToStructs+0x1830>)
 800f07e:	011b      	lsls	r3, r3, #4
 800f080:	4413      	add	r3, r2
 800f082:	3304      	adds	r3, #4
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800f08a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d110      	bne.n	800f0b4 <readCanToStructs+0x1704>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 800f092:	2204      	movs	r2, #4
 800f094:	2100      	movs	r1, #0
 800f096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f098:	f010 ffc8 	bl	802002c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800f09c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0a0:	4a50      	ldr	r2, [pc, #320]	; (800f1e4 <readCanToStructs+0x1834>)
 800f0a2:	f240 4112 	movw	r1, #1042	; 0x412
 800f0a6:	fb01 f303 	mul.w	r3, r1, r3
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 800f0b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0b8:	4a4a      	ldr	r2, [pc, #296]	; (800f1e4 <readCanToStructs+0x1834>)
 800f0ba:	f240 4112 	movw	r1, #1042	; 0x412
 800f0be:	fb01 f303 	mul.w	r3, r1, r3
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d015      	beq.n	800f0fe <readCanToStructs+0x174e>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 800f0d2:	484a      	ldr	r0, [pc, #296]	; (800f1fc <readCanToStructs+0x184c>)
 800f0d4:	f011 f92e 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 800f0d8:	2204      	movs	r2, #4
 800f0da:	2100      	movs	r1, #0
 800f0dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0de:	f010 ffa5 	bl	802002c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800f0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0e6:	4a3f      	ldr	r2, [pc, #252]	; (800f1e4 <readCanToStructs+0x1834>)
 800f0e8:	f240 4112 	movw	r1, #1042	; 0x412
 800f0ec:	fb01 f303 	mul.w	r3, r1, r3
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	701a      	strb	r2, [r3, #0]
					break;
 800f0fa:	f000 bc50 	b.w	800f99e <readCanToStructs+0x1fee>
				uc_pp_charPtr += (7 * uc_seqNo);
 800f0fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800f102:	4613      	mov	r3, r2
 800f104:	00db      	lsls	r3, r3, #3
 800f106:	1a9b      	subs	r3, r3, r2
 800f108:	461a      	mov	r2, r3
 800f10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10c:	4413      	add	r3, r2
 800f10e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f110:	2301      	movs	r3, #1
 800f112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f116:	e016      	b.n	800f146 <readCanToStructs+0x1796>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800f118:	4b31      	ldr	r3, [pc, #196]	; (800f1e0 <readCanToStructs+0x1830>)
 800f11a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f11e:	885b      	ldrh	r3, [r3, #2]
 800f120:	461a      	mov	r2, r3
 800f122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f126:	492e      	ldr	r1, [pc, #184]	; (800f1e0 <readCanToStructs+0x1830>)
 800f128:	0112      	lsls	r2, r2, #4
 800f12a:	440a      	add	r2, r1
 800f12c:	4413      	add	r3, r2
 800f12e:	3304      	adds	r3, #4
 800f130:	781a      	ldrb	r2, [r3, #0]
 800f132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f134:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800f136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f138:	3301      	adds	r3, #1
 800f13a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f13c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f140:	3301      	adds	r3, #1
 800f142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f146:	4b26      	ldr	r3, [pc, #152]	; (800f1e0 <readCanToStructs+0x1830>)
 800f148:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f14c:	885b      	ldrh	r3, [r3, #2]
 800f14e:	4a24      	ldr	r2, [pc, #144]	; (800f1e0 <readCanToStructs+0x1830>)
 800f150:	011b      	lsls	r3, r3, #4
 800f152:	4413      	add	r3, r2
 800f154:	330c      	adds	r3, #12
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d3db      	bcc.n	800f118 <readCanToStructs+0x1768>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 800f160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f164:	4a1f      	ldr	r2, [pc, #124]	; (800f1e4 <readCanToStructs+0x1834>)
 800f166:	f240 4112 	movw	r1, #1042	; 0x412
 800f16a:	fb01 f303 	mul.w	r3, r1, r3
 800f16e:	4413      	add	r3, r2
 800f170:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	461a      	mov	r2, r3
 800f178:	4613      	mov	r3, r2
 800f17a:	00db      	lsls	r3, r3, #3
 800f17c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 800f17e:	4b18      	ldr	r3, [pc, #96]	; (800f1e0 <readCanToStructs+0x1830>)
 800f180:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f184:	885b      	ldrh	r3, [r3, #2]
 800f186:	4916      	ldr	r1, [pc, #88]	; (800f1e0 <readCanToStructs+0x1830>)
 800f188:	011b      	lsls	r3, r3, #4
 800f18a:	440b      	add	r3, r1
 800f18c:	330c      	adds	r3, #12
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	3b01      	subs	r3, #1
 800f192:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 800f194:	2b03      	cmp	r3, #3
 800f196:	d939      	bls.n	800f20c <readCanToStructs+0x185c>
 800f198:	4b17      	ldr	r3, [pc, #92]	; (800f1f8 <readCanToStructs+0x1848>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 800f19e:	4b18      	ldr	r3, [pc, #96]	; (800f200 <readCanToStructs+0x1850>)
 800f1a0:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 800f1a2:	4b13      	ldr	r3, [pc, #76]	; (800f1f0 <readCanToStructs+0x1840>)
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d102      	bne.n	800f1b0 <readCanToStructs+0x1800>
						printf("O_Info1_RCV\n");
 800f1aa:	4816      	ldr	r0, [pc, #88]	; (800f204 <readCanToStructs+0x1854>)
 800f1ac:	f011 f8c2 	bl	8020334 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 800f1b0:	4b15      	ldr	r3, [pc, #84]	; (800f208 <readCanToStructs+0x1858>)
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 800f1b6:	f004 f817 	bl	80131e8 <HAL_GetTick>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	4a12      	ldr	r2, [pc, #72]	; (800f208 <readCanToStructs+0x1858>)
 800f1be:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800f1c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1c4:	4a07      	ldr	r2, [pc, #28]	; (800f1e4 <readCanToStructs+0x1834>)
 800f1c6:	f240 4112 	movw	r1, #1042	; 0x412
 800f1ca:	fb01 f303 	mul.w	r3, r1, r3
 800f1ce:	4413      	add	r3, r2
 800f1d0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	701a      	strb	r2, [r3, #0]
				break;
 800f1d8:	e3e1      	b.n	800f99e <readCanToStructs+0x1fee>
 800f1da:	bf00      	nop
 800f1dc:	20002880 	.word	0x20002880
 800f1e0:	20004e64 	.word	0x20004e64
 800f1e4:	20004640 	.word	0x20004640
 800f1e8:	080246f4 	.word	0x080246f4
 800f1ec:	20002878 	.word	0x20002878
 800f1f0:	20000645 	.word	0x20000645
 800f1f4:	08024710 	.word	0x08024710
 800f1f8:	200028ac 	.word	0x200028ac
 800f1fc:	08024728 	.word	0x08024728
 800f200:	200028a8 	.word	0x200028a8
 800f204:	0802489c 	.word	0x0802489c
 800f208:	200028b0 	.word	0x200028b0
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 800f20c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f210:	4a98      	ldr	r2, [pc, #608]	; (800f474 <readCanToStructs+0x1ac4>)
 800f212:	f240 4112 	movw	r1, #1042	; 0x412
 800f216:	fb01 f303 	mul.w	r3, r1, r3
 800f21a:	4413      	add	r3, r2
 800f21c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f220:	2201      	movs	r2, #1
 800f222:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 800f224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f228:	4992      	ldr	r1, [pc, #584]	; (800f474 <readCanToStructs+0x1ac4>)
 800f22a:	f240 4212 	movw	r2, #1042	; 0x412
 800f22e:	fb03 f202 	mul.w	r2, r3, r2
 800f232:	440a      	add	r2, r1
 800f234:	f202 4203 	addw	r2, r2, #1027	; 0x403
 800f238:	7812      	ldrb	r2, [r2, #0]
 800f23a:	3201      	adds	r2, #1
 800f23c:	b2d0      	uxtb	r0, r2
 800f23e:	4a8d      	ldr	r2, [pc, #564]	; (800f474 <readCanToStructs+0x1ac4>)
 800f240:	f240 4112 	movw	r1, #1042	; 0x412
 800f244:	fb01 f303 	mul.w	r3, r1, r3
 800f248:	4413      	add	r3, r2
 800f24a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800f24e:	4602      	mov	r2, r0
 800f250:	701a      	strb	r2, [r3, #0]
				break;
 800f252:	e3a4      	b.n	800f99e <readCanToStructs+0x1fee>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 800f254:	4b88      	ldr	r3, [pc, #544]	; (800f478 <readCanToStructs+0x1ac8>)
 800f256:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800f258:	4b88      	ldr	r3, [pc, #544]	; (800f47c <readCanToStructs+0x1acc>)
 800f25a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f25e:	885b      	ldrh	r3, [r3, #2]
 800f260:	4a86      	ldr	r2, [pc, #536]	; (800f47c <readCanToStructs+0x1acc>)
 800f262:	011b      	lsls	r3, r3, #4
 800f264:	4413      	add	r3, r2
 800f266:	3304      	adds	r3, #4
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800f26e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f272:	2b00      	cmp	r3, #0
 800f274:	d110      	bne.n	800f298 <readCanToStructs+0x18e8>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 800f276:	2204      	movs	r2, #4
 800f278:	2100      	movs	r1, #0
 800f27a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f27c:	f010 fed6 	bl	802002c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 800f280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f284:	4a7b      	ldr	r2, [pc, #492]	; (800f474 <readCanToStructs+0x1ac4>)
 800f286:	f240 4112 	movw	r1, #1042	; 0x412
 800f28a:	fb01 f303 	mul.w	r3, r1, r3
 800f28e:	4413      	add	r3, r2
 800f290:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800f294:	2200      	movs	r2, #0
 800f296:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 800f298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f29c:	4a75      	ldr	r2, [pc, #468]	; (800f474 <readCanToStructs+0x1ac4>)
 800f29e:	f240 4112 	movw	r1, #1042	; 0x412
 800f2a2:	fb01 f303 	mul.w	r3, r1, r3
 800f2a6:	4413      	add	r3, r2
 800f2a8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d014      	beq.n	800f2e0 <readCanToStructs+0x1930>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 800f2b6:	4872      	ldr	r0, [pc, #456]	; (800f480 <readCanToStructs+0x1ad0>)
 800f2b8:	f011 f83c 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 800f2bc:	2204      	movs	r2, #4
 800f2be:	2100      	movs	r1, #0
 800f2c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2c2:	f010 feb3 	bl	802002c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 800f2c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2ca:	4a6a      	ldr	r2, [pc, #424]	; (800f474 <readCanToStructs+0x1ac4>)
 800f2cc:	f240 4112 	movw	r1, #1042	; 0x412
 800f2d0:	fb01 f303 	mul.w	r3, r1, r3
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800f2da:	2200      	movs	r2, #0
 800f2dc:	701a      	strb	r2, [r3, #0]
					break;
 800f2de:	e35e      	b.n	800f99e <readCanToStructs+0x1fee>
				uc_pp_charPtr += (7 * uc_seqNo);
 800f2e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	00db      	lsls	r3, r3, #3
 800f2e8:	1a9b      	subs	r3, r3, r2
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ee:	4413      	add	r3, r2
 800f2f0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f2f8:	e016      	b.n	800f328 <readCanToStructs+0x1978>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800f2fa:	4b60      	ldr	r3, [pc, #384]	; (800f47c <readCanToStructs+0x1acc>)
 800f2fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f300:	885b      	ldrh	r3, [r3, #2]
 800f302:	461a      	mov	r2, r3
 800f304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f308:	495c      	ldr	r1, [pc, #368]	; (800f47c <readCanToStructs+0x1acc>)
 800f30a:	0112      	lsls	r2, r2, #4
 800f30c:	440a      	add	r2, r1
 800f30e:	4413      	add	r3, r2
 800f310:	3304      	adds	r3, #4
 800f312:	781a      	ldrb	r2, [r3, #0]
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	3301      	adds	r3, #1
 800f31c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f31e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f322:	3301      	adds	r3, #1
 800f324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f328:	4b54      	ldr	r3, [pc, #336]	; (800f47c <readCanToStructs+0x1acc>)
 800f32a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f32e:	885b      	ldrh	r3, [r3, #2]
 800f330:	4a52      	ldr	r2, [pc, #328]	; (800f47c <readCanToStructs+0x1acc>)
 800f332:	011b      	lsls	r3, r3, #4
 800f334:	4413      	add	r3, r2
 800f336:	330c      	adds	r3, #12
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f33e:	429a      	cmp	r2, r3
 800f340:	d3db      	bcc.n	800f2fa <readCanToStructs+0x194a>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 800f342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f346:	4a4b      	ldr	r2, [pc, #300]	; (800f474 <readCanToStructs+0x1ac4>)
 800f348:	f240 4112 	movw	r1, #1042	; 0x412
 800f34c:	fb01 f303 	mul.w	r3, r1, r3
 800f350:	4413      	add	r3, r2
 800f352:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	461a      	mov	r2, r3
 800f35a:	4613      	mov	r3, r2
 800f35c:	00db      	lsls	r3, r3, #3
 800f35e:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 800f360:	4b46      	ldr	r3, [pc, #280]	; (800f47c <readCanToStructs+0x1acc>)
 800f362:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f366:	885b      	ldrh	r3, [r3, #2]
 800f368:	4944      	ldr	r1, [pc, #272]	; (800f47c <readCanToStructs+0x1acc>)
 800f36a:	011b      	lsls	r3, r3, #4
 800f36c:	440b      	add	r3, r1
 800f36e:	330c      	adds	r3, #12
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	3b01      	subs	r3, #1
 800f374:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 800f376:	2b03      	cmp	r3, #3
 800f378:	d920      	bls.n	800f3bc <readCanToStructs+0x1a0c>
 800f37a:	4b3f      	ldr	r3, [pc, #252]	; (800f478 <readCanToStructs+0x1ac8>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 800f380:	4b40      	ldr	r3, [pc, #256]	; (800f484 <readCanToStructs+0x1ad4>)
 800f382:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 800f384:	4b40      	ldr	r3, [pc, #256]	; (800f488 <readCanToStructs+0x1ad8>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d102      	bne.n	800f392 <readCanToStructs+0x19e2>
						printf("O_Info2_RCV\n");
 800f38c:	483f      	ldr	r0, [pc, #252]	; (800f48c <readCanToStructs+0x1adc>)
 800f38e:	f010 ffd1 	bl	8020334 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 800f392:	4b3f      	ldr	r3, [pc, #252]	; (800f490 <readCanToStructs+0x1ae0>)
 800f394:	2201      	movs	r2, #1
 800f396:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 800f398:	f003 ff26 	bl	80131e8 <HAL_GetTick>
 800f39c:	4603      	mov	r3, r0
 800f39e:	4a3c      	ldr	r2, [pc, #240]	; (800f490 <readCanToStructs+0x1ae0>)
 800f3a0:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 800f3a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3a6:	4a33      	ldr	r2, [pc, #204]	; (800f474 <readCanToStructs+0x1ac4>)
 800f3a8:	f240 4112 	movw	r1, #1042	; 0x412
 800f3ac:	fb01 f303 	mul.w	r3, r1, r3
 800f3b0:	4413      	add	r3, r2
 800f3b2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	701a      	strb	r2, [r3, #0]
				break;
 800f3ba:	e2f0      	b.n	800f99e <readCanToStructs+0x1fee>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 800f3bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3c0:	4a2c      	ldr	r2, [pc, #176]	; (800f474 <readCanToStructs+0x1ac4>)
 800f3c2:	f240 4112 	movw	r1, #1042	; 0x412
 800f3c6:	fb01 f303 	mul.w	r3, r1, r3
 800f3ca:	4413      	add	r3, r2
 800f3cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 800f3d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3d8:	4926      	ldr	r1, [pc, #152]	; (800f474 <readCanToStructs+0x1ac4>)
 800f3da:	f240 4212 	movw	r2, #1042	; 0x412
 800f3de:	fb03 f202 	mul.w	r2, r3, r2
 800f3e2:	440a      	add	r2, r1
 800f3e4:	f202 4205 	addw	r2, r2, #1029	; 0x405
 800f3e8:	7812      	ldrb	r2, [r2, #0]
 800f3ea:	3201      	adds	r2, #1
 800f3ec:	b2d0      	uxtb	r0, r2
 800f3ee:	4a21      	ldr	r2, [pc, #132]	; (800f474 <readCanToStructs+0x1ac4>)
 800f3f0:	f240 4112 	movw	r1, #1042	; 0x412
 800f3f4:	fb01 f303 	mul.w	r3, r1, r3
 800f3f8:	4413      	add	r3, r2
 800f3fa:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800f3fe:	4602      	mov	r2, r0
 800f400:	701a      	strb	r2, [r3, #0]
				break;
 800f402:	e2cc      	b.n	800f99e <readCanToStructs+0x1fee>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 800f404:	4b23      	ldr	r3, [pc, #140]	; (800f494 <readCanToStructs+0x1ae4>)
 800f406:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800f408:	4b1c      	ldr	r3, [pc, #112]	; (800f47c <readCanToStructs+0x1acc>)
 800f40a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f40e:	885b      	ldrh	r3, [r3, #2]
 800f410:	4a1a      	ldr	r2, [pc, #104]	; (800f47c <readCanToStructs+0x1acc>)
 800f412:	011b      	lsls	r3, r3, #4
 800f414:	4413      	add	r3, r2
 800f416:	3304      	adds	r3, #4
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 800f41e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f422:	2b00      	cmp	r3, #0
 800f424:	d005      	beq.n	800f432 <readCanToStructs+0x1a82>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 800f426:	4b1c      	ldr	r3, [pc, #112]	; (800f498 <readCanToStructs+0x1ae8>)
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	461a      	mov	r2, r3
 800f42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42e:	4413      	add	r3, r2
 800f430:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 800f432:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f436:	2b00      	cmp	r3, #0
 800f438:	d117      	bne.n	800f46a <readCanToStructs+0x1aba>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 800f43a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f43e:	2100      	movs	r1, #0
 800f440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f442:	f010 fdf3 	bl	802002c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 800f446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f44a:	4a0a      	ldr	r2, [pc, #40]	; (800f474 <readCanToStructs+0x1ac4>)
 800f44c:	f240 4112 	movw	r1, #1042	; 0x412
 800f450:	fb01 f303 	mul.w	r3, r1, r3
 800f454:	4413      	add	r3, r2
 800f456:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800f45a:	2200      	movs	r2, #0
 800f45c:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 800f45e:	4b0e      	ldr	r3, [pc, #56]	; (800f498 <readCanToStructs+0x1ae8>)
 800f460:	2200      	movs	r2, #0
 800f462:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 800f464:	4b0d      	ldr	r3, [pc, #52]	; (800f49c <readCanToStructs+0x1aec>)
 800f466:	2200      	movs	r2, #0
 800f468:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f46a:	2301      	movs	r3, #1
 800f46c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f470:	e033      	b.n	800f4da <readCanToStructs+0x1b2a>
 800f472:	bf00      	nop
 800f474:	20004640 	.word	0x20004640
 800f478:	200028ac 	.word	0x200028ac
 800f47c:	20004e64 	.word	0x20004e64
 800f480:	0802475c 	.word	0x0802475c
 800f484:	200028a8 	.word	0x200028a8
 800f488:	20000645 	.word	0x20000645
 800f48c:	080248a8 	.word	0x080248a8
 800f490:	200028b0 	.word	0x200028b0
 800f494:	20002ed8 	.word	0x20002ed8
 800f498:	20008fbc 	.word	0x20008fbc
 800f49c:	20008fbe 	.word	0x20008fbe
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800f4a0:	4ba2      	ldr	r3, [pc, #648]	; (800f72c <readCanToStructs+0x1d7c>)
 800f4a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f4a6:	885b      	ldrh	r3, [r3, #2]
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4ae:	499f      	ldr	r1, [pc, #636]	; (800f72c <readCanToStructs+0x1d7c>)
 800f4b0:	0112      	lsls	r2, r2, #4
 800f4b2:	440a      	add	r2, r1
 800f4b4:	4413      	add	r3, r2
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	781a      	ldrb	r2, [r3, #0]
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4bc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800f4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 800f4c4:	4b9a      	ldr	r3, [pc, #616]	; (800f730 <readCanToStructs+0x1d80>)
 800f4c6:	881b      	ldrh	r3, [r3, #0]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	4b98      	ldr	r3, [pc, #608]	; (800f730 <readCanToStructs+0x1d80>)
 800f4ce:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f4d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f4da:	4b94      	ldr	r3, [pc, #592]	; (800f72c <readCanToStructs+0x1d7c>)
 800f4dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f4e0:	885b      	ldrh	r3, [r3, #2]
 800f4e2:	4a92      	ldr	r2, [pc, #584]	; (800f72c <readCanToStructs+0x1d7c>)
 800f4e4:	011b      	lsls	r3, r3, #4
 800f4e6:	4413      	add	r3, r2
 800f4e8:	330c      	adds	r3, #12
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d3d5      	bcc.n	800f4a0 <readCanToStructs+0x1af0>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 800f4f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4f8:	4a8e      	ldr	r2, [pc, #568]	; (800f734 <readCanToStructs+0x1d84>)
 800f4fa:	f240 4112 	movw	r1, #1042	; 0x412
 800f4fe:	fb01 f303 	mul.w	r3, r1, r3
 800f502:	4413      	add	r3, r2
 800f504:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800f50e:	429a      	cmp	r2, r3
 800f510:	d026      	beq.n	800f560 <readCanToStructs+0x1bb0>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 800f512:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800f516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f51a:	4a86      	ldr	r2, [pc, #536]	; (800f734 <readCanToStructs+0x1d84>)
 800f51c:	f240 4012 	movw	r0, #1042	; 0x412
 800f520:	fb00 f303 	mul.w	r3, r0, r3
 800f524:	4413      	add	r3, r2
 800f526:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	461a      	mov	r2, r3
 800f52e:	4882      	ldr	r0, [pc, #520]	; (800f738 <readCanToStructs+0x1d88>)
 800f530:	f010 fe64 	bl	80201fc <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 800f534:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f538:	2100      	movs	r1, #0
 800f53a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f53c:	f010 fd76 	bl	802002c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 800f540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f544:	4a7b      	ldr	r2, [pc, #492]	; (800f734 <readCanToStructs+0x1d84>)
 800f546:	f240 4112 	movw	r1, #1042	; 0x412
 800f54a:	fb01 f303 	mul.w	r3, r1, r3
 800f54e:	4413      	add	r3, r2
 800f550:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800f554:	2200      	movs	r2, #0
 800f556:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 800f558:	4b75      	ldr	r3, [pc, #468]	; (800f730 <readCanToStructs+0x1d80>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	801a      	strh	r2, [r3, #0]
					break;
 800f55e:	e21e      	b.n	800f99e <readCanToStructs+0x1fee>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 800f560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f564:	4973      	ldr	r1, [pc, #460]	; (800f734 <readCanToStructs+0x1d84>)
 800f566:	f240 4212 	movw	r2, #1042	; 0x412
 800f56a:	fb03 f202 	mul.w	r2, r3, r2
 800f56e:	440a      	add	r2, r1
 800f570:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 800f574:	7812      	ldrb	r2, [r2, #0]
 800f576:	3201      	adds	r2, #1
 800f578:	b2d0      	uxtb	r0, r2
 800f57a:	4a6e      	ldr	r2, [pc, #440]	; (800f734 <readCanToStructs+0x1d84>)
 800f57c:	f240 4112 	movw	r1, #1042	; 0x412
 800f580:	fb01 f303 	mul.w	r3, r1, r3
 800f584:	4413      	add	r3, r2
 800f586:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800f58a:	4602      	mov	r2, r0
 800f58c:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 800f58e:	4b6b      	ldr	r3, [pc, #428]	; (800f73c <readCanToStructs+0x1d8c>)
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	3304      	adds	r3, #4
 800f594:	b29a      	uxth	r2, r3
 800f596:	4b6a      	ldr	r3, [pc, #424]	; (800f740 <readCanToStructs+0x1d90>)
 800f598:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 800f59a:	4b65      	ldr	r3, [pc, #404]	; (800f730 <readCanToStructs+0x1d80>)
 800f59c:	881a      	ldrh	r2, [r3, #0]
 800f59e:	4b68      	ldr	r3, [pc, #416]	; (800f740 <readCanToStructs+0x1d90>)
 800f5a0:	881b      	ldrh	r3, [r3, #0]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	f0c0 81f8 	bcc.w	800f998 <readCanToStructs+0x1fe8>
					if(Debug_flag == 1)
 800f5a8:	4b66      	ldr	r3, [pc, #408]	; (800f744 <readCanToStructs+0x1d94>)
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d102      	bne.n	800f5b6 <readCanToStructs+0x1c06>
						printf("EI1 Relay Info Received\n");
 800f5b0:	4865      	ldr	r0, [pc, #404]	; (800f748 <readCanToStructs+0x1d98>)
 800f5b2:	f010 febf 	bl	8020334 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 800f5b6:	4a65      	ldr	r2, [pc, #404]	; (800f74c <readCanToStructs+0x1d9c>)
 800f5b8:	4b60      	ldr	r3, [pc, #384]	; (800f73c <readCanToStructs+0x1d8c>)
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	4619      	mov	r1, r3
 800f5be:	f44f 7301 	mov.w	r3, #516	; 0x204
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	f010 fd0a 	bl	801ffdc <memcpy>
					DataTraverser = 0;
 800f5c8:	4b59      	ldr	r3, [pc, #356]	; (800f730 <readCanToStructs+0x1d80>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 800f5ce:	4b5c      	ldr	r3, [pc, #368]	; (800f740 <readCanToStructs+0x1d90>)
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 800f5d4:	4b5e      	ldr	r3, [pc, #376]	; (800f750 <readCanToStructs+0x1da0>)
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 800f5da:	f003 fe05 	bl	80131e8 <HAL_GetTick>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	4a5b      	ldr	r2, [pc, #364]	; (800f750 <readCanToStructs+0x1da0>)
 800f5e2:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 800f5e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5e8:	4a52      	ldr	r2, [pc, #328]	; (800f734 <readCanToStructs+0x1d84>)
 800f5ea:	f240 4112 	movw	r1, #1042	; 0x412
 800f5ee:	fb01 f303 	mul.w	r3, r1, r3
 800f5f2:	4413      	add	r3, r2
 800f5f4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	701a      	strb	r2, [r3, #0]
				break;
 800f5fc:	e1cc      	b.n	800f998 <readCanToStructs+0x1fe8>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 800f5fe:	4b4f      	ldr	r3, [pc, #316]	; (800f73c <readCanToStructs+0x1d8c>)
 800f600:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800f602:	4b4a      	ldr	r3, [pc, #296]	; (800f72c <readCanToStructs+0x1d7c>)
 800f604:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f608:	885b      	ldrh	r3, [r3, #2]
 800f60a:	4a48      	ldr	r2, [pc, #288]	; (800f72c <readCanToStructs+0x1d7c>)
 800f60c:	011b      	lsls	r3, r3, #4
 800f60e:	4413      	add	r3, r2
 800f610:	3304      	adds	r3, #4
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 800f618:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d005      	beq.n	800f62c <readCanToStructs+0x1c7c>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 800f620:	4b43      	ldr	r3, [pc, #268]	; (800f730 <readCanToStructs+0x1d80>)
 800f622:	881b      	ldrh	r3, [r3, #0]
 800f624:	461a      	mov	r2, r3
 800f626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f628:	4413      	add	r3, r2
 800f62a:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 800f62c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f630:	2b00      	cmp	r3, #0
 800f632:	d117      	bne.n	800f664 <readCanToStructs+0x1cb4>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 800f634:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f638:	2100      	movs	r1, #0
 800f63a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f63c:	f010 fcf6 	bl	802002c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 800f640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f644:	4a3b      	ldr	r2, [pc, #236]	; (800f734 <readCanToStructs+0x1d84>)
 800f646:	f240 4112 	movw	r1, #1042	; 0x412
 800f64a:	fb01 f303 	mul.w	r3, r1, r3
 800f64e:	4413      	add	r3, r2
 800f650:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800f654:	2200      	movs	r2, #0
 800f656:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 800f658:	4b35      	ldr	r3, [pc, #212]	; (800f730 <readCanToStructs+0x1d80>)
 800f65a:	2200      	movs	r2, #0
 800f65c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 800f65e:	4b38      	ldr	r3, [pc, #224]	; (800f740 <readCanToStructs+0x1d90>)
 800f660:	2200      	movs	r2, #0
 800f662:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f664:	2301      	movs	r3, #1
 800f666:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f66a:	e01c      	b.n	800f6a6 <readCanToStructs+0x1cf6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800f66c:	4b2f      	ldr	r3, [pc, #188]	; (800f72c <readCanToStructs+0x1d7c>)
 800f66e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f672:	885b      	ldrh	r3, [r3, #2]
 800f674:	461a      	mov	r2, r3
 800f676:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f67a:	492c      	ldr	r1, [pc, #176]	; (800f72c <readCanToStructs+0x1d7c>)
 800f67c:	0112      	lsls	r2, r2, #4
 800f67e:	440a      	add	r2, r1
 800f680:	4413      	add	r3, r2
 800f682:	3304      	adds	r3, #4
 800f684:	781a      	ldrb	r2, [r3, #0]
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800f68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68c:	3301      	adds	r3, #1
 800f68e:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 800f690:	4b27      	ldr	r3, [pc, #156]	; (800f730 <readCanToStructs+0x1d80>)
 800f692:	881b      	ldrh	r3, [r3, #0]
 800f694:	3301      	adds	r3, #1
 800f696:	b29a      	uxth	r2, r3
 800f698:	4b25      	ldr	r3, [pc, #148]	; (800f730 <readCanToStructs+0x1d80>)
 800f69a:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f69c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f6a6:	4b21      	ldr	r3, [pc, #132]	; (800f72c <readCanToStructs+0x1d7c>)
 800f6a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f6ac:	885b      	ldrh	r3, [r3, #2]
 800f6ae:	4a1f      	ldr	r2, [pc, #124]	; (800f72c <readCanToStructs+0x1d7c>)
 800f6b0:	011b      	lsls	r3, r3, #4
 800f6b2:	4413      	add	r3, r2
 800f6b4:	330c      	adds	r3, #12
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d3d5      	bcc.n	800f66c <readCanToStructs+0x1cbc>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 800f6c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6c4:	4a1b      	ldr	r2, [pc, #108]	; (800f734 <readCanToStructs+0x1d84>)
 800f6c6:	f240 4112 	movw	r1, #1042	; 0x412
 800f6ca:	fb01 f303 	mul.w	r3, r1, r3
 800f6ce:	4413      	add	r3, r2
 800f6d0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d03c      	beq.n	800f758 <readCanToStructs+0x1da8>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 800f6de:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800f6e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6e6:	4a13      	ldr	r2, [pc, #76]	; (800f734 <readCanToStructs+0x1d84>)
 800f6e8:	f240 4012 	movw	r0, #1042	; 0x412
 800f6ec:	fb00 f303 	mul.w	r3, r0, r3
 800f6f0:	4413      	add	r3, r2
 800f6f2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	4816      	ldr	r0, [pc, #88]	; (800f754 <readCanToStructs+0x1da4>)
 800f6fc:	f010 fd7e 	bl	80201fc <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 800f700:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f704:	2100      	movs	r1, #0
 800f706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f708:	f010 fc90 	bl	802002c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 800f70c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f710:	4a08      	ldr	r2, [pc, #32]	; (800f734 <readCanToStructs+0x1d84>)
 800f712:	f240 4112 	movw	r1, #1042	; 0x412
 800f716:	fb01 f303 	mul.w	r3, r1, r3
 800f71a:	4413      	add	r3, r2
 800f71c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800f720:	2200      	movs	r2, #0
 800f722:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 800f724:	4b02      	ldr	r3, [pc, #8]	; (800f730 <readCanToStructs+0x1d80>)
 800f726:	2200      	movs	r2, #0
 800f728:	801a      	strh	r2, [r3, #0]
					break;
 800f72a:	e138      	b.n	800f99e <readCanToStructs+0x1fee>
 800f72c:	20004e64 	.word	0x20004e64
 800f730:	20008fbc 	.word	0x20008fbc
 800f734:	20004640 	.word	0x20004640
 800f738:	080248b4 	.word	0x080248b4
 800f73c:	20002ed8 	.word	0x20002ed8
 800f740:	20008fbe 	.word	0x20008fbe
 800f744:	20000645 	.word	0x20000645
 800f748:	080248e0 	.word	0x080248e0
 800f74c:	20002cd4 	.word	0x20002cd4
 800f750:	200028b0 	.word	0x200028b0
 800f754:	080248f8 	.word	0x080248f8
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 800f758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f75c:	49b8      	ldr	r1, [pc, #736]	; (800fa40 <readCanToStructs+0x2090>)
 800f75e:	f240 4212 	movw	r2, #1042	; 0x412
 800f762:	fb03 f202 	mul.w	r2, r3, r2
 800f766:	440a      	add	r2, r1
 800f768:	f202 4211 	addw	r2, r2, #1041	; 0x411
 800f76c:	7812      	ldrb	r2, [r2, #0]
 800f76e:	3201      	adds	r2, #1
 800f770:	b2d0      	uxtb	r0, r2
 800f772:	4ab3      	ldr	r2, [pc, #716]	; (800fa40 <readCanToStructs+0x2090>)
 800f774:	f240 4112 	movw	r1, #1042	; 0x412
 800f778:	fb01 f303 	mul.w	r3, r1, r3
 800f77c:	4413      	add	r3, r2
 800f77e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800f782:	4602      	mov	r2, r0
 800f784:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 800f786:	4baf      	ldr	r3, [pc, #700]	; (800fa44 <readCanToStructs+0x2094>)
 800f788:	881b      	ldrh	r3, [r3, #0]
 800f78a:	3304      	adds	r3, #4
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	4bae      	ldr	r3, [pc, #696]	; (800fa48 <readCanToStructs+0x2098>)
 800f790:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 800f792:	4bae      	ldr	r3, [pc, #696]	; (800fa4c <readCanToStructs+0x209c>)
 800f794:	881a      	ldrh	r2, [r3, #0]
 800f796:	4bac      	ldr	r3, [pc, #688]	; (800fa48 <readCanToStructs+0x2098>)
 800f798:	881b      	ldrh	r3, [r3, #0]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	f0c0 80fe 	bcc.w	800f99c <readCanToStructs+0x1fec>
					if(Debug_flag == 1)
 800f7a0:	4bab      	ldr	r3, [pc, #684]	; (800fa50 <readCanToStructs+0x20a0>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d102      	bne.n	800f7ae <readCanToStructs+0x1dfe>
						printf("EI2 Relay Info Received\n");
 800f7a8:	48aa      	ldr	r0, [pc, #680]	; (800fa54 <readCanToStructs+0x20a4>)
 800f7aa:	f010 fdc3 	bl	8020334 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 800f7ae:	4aaa      	ldr	r2, [pc, #680]	; (800fa58 <readCanToStructs+0x20a8>)
 800f7b0:	4ba4      	ldr	r3, [pc, #656]	; (800fa44 <readCanToStructs+0x2094>)
 800f7b2:	4610      	mov	r0, r2
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	f44f 7301 	mov.w	r3, #516	; 0x204
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	f010 fc0e 	bl	801ffdc <memcpy>
					DataTraverser = 0;
 800f7c0:	4ba2      	ldr	r3, [pc, #648]	; (800fa4c <readCanToStructs+0x209c>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 800f7c6:	4ba0      	ldr	r3, [pc, #640]	; (800fa48 <readCanToStructs+0x2098>)
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 800f7cc:	4ba3      	ldr	r3, [pc, #652]	; (800fa5c <readCanToStructs+0x20ac>)
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 800f7d2:	f003 fd09 	bl	80131e8 <HAL_GetTick>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	4aa0      	ldr	r2, [pc, #640]	; (800fa5c <readCanToStructs+0x20ac>)
 800f7da:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 800f7dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7e0:	4a97      	ldr	r2, [pc, #604]	; (800fa40 <readCanToStructs+0x2090>)
 800f7e2:	f240 4112 	movw	r1, #1042	; 0x412
 800f7e6:	fb01 f303 	mul.w	r3, r1, r3
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	701a      	strb	r2, [r3, #0]
				break;
 800f7f4:	e0d2      	b.n	800f99c <readCanToStructs+0x1fec>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 800f7f6:	4b9a      	ldr	r3, [pc, #616]	; (800fa60 <readCanToStructs+0x20b0>)
 800f7f8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800f7fa:	4b9a      	ldr	r3, [pc, #616]	; (800fa64 <readCanToStructs+0x20b4>)
 800f7fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f800:	885b      	ldrh	r3, [r3, #2]
 800f802:	4a98      	ldr	r2, [pc, #608]	; (800fa64 <readCanToStructs+0x20b4>)
 800f804:	011b      	lsls	r3, r3, #4
 800f806:	4413      	add	r3, r2
 800f808:	3304      	adds	r3, #4
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800f810:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f814:	2b00      	cmp	r3, #0
 800f816:	d110      	bne.n	800f83a <readCanToStructs+0x1e8a>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 800f818:	2208      	movs	r2, #8
 800f81a:	2100      	movs	r1, #0
 800f81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f81e:	f010 fc05 	bl	802002c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 800f822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f826:	4a86      	ldr	r2, [pc, #536]	; (800fa40 <readCanToStructs+0x2090>)
 800f828:	f240 4112 	movw	r1, #1042	; 0x412
 800f82c:	fb01 f303 	mul.w	r3, r1, r3
 800f830:	4413      	add	r3, r2
 800f832:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800f836:	2200      	movs	r2, #0
 800f838:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 800f83a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f83e:	4a80      	ldr	r2, [pc, #512]	; (800fa40 <readCanToStructs+0x2090>)
 800f840:	f240 4112 	movw	r1, #1042	; 0x412
 800f844:	fb01 f303 	mul.w	r3, r1, r3
 800f848:	4413      	add	r3, r2
 800f84a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800f854:	429a      	cmp	r2, r3
 800f856:	d014      	beq.n	800f882 <readCanToStructs+0x1ed2>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 800f858:	4883      	ldr	r0, [pc, #524]	; (800fa68 <readCanToStructs+0x20b8>)
 800f85a:	f010 fd6b 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 800f85e:	2208      	movs	r2, #8
 800f860:	2100      	movs	r1, #0
 800f862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f864:	f010 fbe2 	bl	802002c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 800f868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f86c:	4a74      	ldr	r2, [pc, #464]	; (800fa40 <readCanToStructs+0x2090>)
 800f86e:	f240 4112 	movw	r1, #1042	; 0x412
 800f872:	fb01 f303 	mul.w	r3, r1, r3
 800f876:	4413      	add	r3, r2
 800f878:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800f87c:	2200      	movs	r2, #0
 800f87e:	701a      	strb	r2, [r3, #0]
					break;
 800f880:	e08d      	b.n	800f99e <readCanToStructs+0x1fee>
				uc_pp_charPtr += (7 * uc_seqNo);
 800f882:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800f886:	4613      	mov	r3, r2
 800f888:	00db      	lsls	r3, r3, #3
 800f88a:	1a9b      	subs	r3, r3, r2
 800f88c:	461a      	mov	r2, r3
 800f88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f890:	4413      	add	r3, r2
 800f892:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f894:	2301      	movs	r3, #1
 800f896:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f89a:	e016      	b.n	800f8ca <readCanToStructs+0x1f1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800f89c:	4b71      	ldr	r3, [pc, #452]	; (800fa64 <readCanToStructs+0x20b4>)
 800f89e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f8a2:	885b      	ldrh	r3, [r3, #2]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f8aa:	496e      	ldr	r1, [pc, #440]	; (800fa64 <readCanToStructs+0x20b4>)
 800f8ac:	0112      	lsls	r2, r2, #4
 800f8ae:	440a      	add	r2, r1
 800f8b0:	4413      	add	r3, r2
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	781a      	ldrb	r2, [r3, #0]
 800f8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	3301      	adds	r3, #1
 800f8be:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800f8c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f8ca:	4b66      	ldr	r3, [pc, #408]	; (800fa64 <readCanToStructs+0x20b4>)
 800f8cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f8d0:	885b      	ldrh	r3, [r3, #2]
 800f8d2:	4a64      	ldr	r2, [pc, #400]	; (800fa64 <readCanToStructs+0x20b4>)
 800f8d4:	011b      	lsls	r3, r3, #4
 800f8d6:	4413      	add	r3, r2
 800f8d8:	330c      	adds	r3, #12
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d3db      	bcc.n	800f89c <readCanToStructs+0x1eec>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 800f8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8e8:	4a55      	ldr	r2, [pc, #340]	; (800fa40 <readCanToStructs+0x2090>)
 800f8ea:	f240 4112 	movw	r1, #1042	; 0x412
 800f8ee:	fb01 f303 	mul.w	r3, r1, r3
 800f8f2:	4413      	add	r3, r2
 800f8f4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	00db      	lsls	r3, r3, #3
 800f900:	1a9a      	subs	r2, r3, r2
 800f902:	4b58      	ldr	r3, [pc, #352]	; (800fa64 <readCanToStructs+0x20b4>)
 800f904:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f908:	885b      	ldrh	r3, [r3, #2]
 800f90a:	4956      	ldr	r1, [pc, #344]	; (800fa64 <readCanToStructs+0x20b4>)
 800f90c:	011b      	lsls	r3, r3, #4
 800f90e:	440b      	add	r3, r1
 800f910:	330c      	adds	r3, #12
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	3b01      	subs	r3, #1
 800f916:	4413      	add	r3, r2
 800f918:	2b07      	cmp	r3, #7
 800f91a:	d917      	bls.n	800f94c <readCanToStructs+0x1f9c>
					printf("Received Fault Injection Data\n");
 800f91c:	4853      	ldr	r0, [pc, #332]	; (800fa6c <readCanToStructs+0x20bc>)
 800f91e:	f010 fd09 	bl	8020334 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 800f922:	4b4e      	ldr	r3, [pc, #312]	; (800fa5c <readCanToStructs+0x20ac>)
 800f924:	2201      	movs	r2, #1
 800f926:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 800f928:	f003 fc5e 	bl	80131e8 <HAL_GetTick>
 800f92c:	4603      	mov	r3, r0
 800f92e:	4a4b      	ldr	r2, [pc, #300]	; (800fa5c <readCanToStructs+0x20ac>)
 800f930:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 800f932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f936:	4a42      	ldr	r2, [pc, #264]	; (800fa40 <readCanToStructs+0x2090>)
 800f938:	f240 4112 	movw	r1, #1042	; 0x412
 800f93c:	fb01 f303 	mul.w	r3, r1, r3
 800f940:	4413      	add	r3, r2
 800f942:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800f946:	2200      	movs	r2, #0
 800f948:	701a      	strb	r2, [r3, #0]
				break;
 800f94a:	e028      	b.n	800f99e <readCanToStructs+0x1fee>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 800f94c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f950:	4a3b      	ldr	r2, [pc, #236]	; (800fa40 <readCanToStructs+0x2090>)
 800f952:	f240 4112 	movw	r1, #1042	; 0x412
 800f956:	fb01 f303 	mul.w	r3, r1, r3
 800f95a:	4413      	add	r3, r2
 800f95c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800f960:	2201      	movs	r2, #1
 800f962:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 800f964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f968:	4935      	ldr	r1, [pc, #212]	; (800fa40 <readCanToStructs+0x2090>)
 800f96a:	f240 4212 	movw	r2, #1042	; 0x412
 800f96e:	fb03 f202 	mul.w	r2, r3, r2
 800f972:	440a      	add	r2, r1
 800f974:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 800f978:	7812      	ldrb	r2, [r2, #0]
 800f97a:	3201      	adds	r2, #1
 800f97c:	b2d0      	uxtb	r0, r2
 800f97e:	4a30      	ldr	r2, [pc, #192]	; (800fa40 <readCanToStructs+0x2090>)
 800f980:	f240 4112 	movw	r1, #1042	; 0x412
 800f984:	fb01 f303 	mul.w	r3, r1, r3
 800f988:	4413      	add	r3, r2
 800f98a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 800f98e:	4602      	mov	r2, r0
 800f990:	701a      	strb	r2, [r3, #0]
				break;
 800f992:	e004      	b.n	800f99e <readCanToStructs+0x1fee>
				break;
 800f994:	bf00      	nop
 800f996:	e002      	b.n	800f99e <readCanToStructs+0x1fee>
				break;
 800f998:	bf00      	nop
 800f99a:	e000      	b.n	800f99e <readCanToStructs+0x1fee>
				break;
 800f99c:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 800f99e:	4b31      	ldr	r3, [pc, #196]	; (800fa64 <readCanToStructs+0x20b4>)
 800f9a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9a4:	885b      	ldrh	r3, [r3, #2]
 800f9a6:	011b      	lsls	r3, r3, #4
 800f9a8:	4a2e      	ldr	r2, [pc, #184]	; (800fa64 <readCanToStructs+0x20b4>)
 800f9aa:	4413      	add	r3, r2
 800f9ac:	2210      	movs	r2, #16
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f010 fb3b 	bl	802002c <memset>
			canRead.Out++;
 800f9b6:	4b2b      	ldr	r3, [pc, #172]	; (800fa64 <readCanToStructs+0x20b4>)
 800f9b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9bc:	885b      	ldrh	r3, [r3, #2]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	4b28      	ldr	r3, [pc, #160]	; (800fa64 <readCanToStructs+0x20b4>)
 800f9c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9c8:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 800f9ca:	4b26      	ldr	r3, [pc, #152]	; (800fa64 <readCanToStructs+0x20b4>)
 800f9cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9d0:	885b      	ldrh	r3, [r3, #2]
 800f9d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9d6:	d104      	bne.n	800f9e2 <readCanToStructs+0x2032>
				canRead.Out = 0;
 800f9d8:	4b22      	ldr	r3, [pc, #136]	; (800fa64 <readCanToStructs+0x20b4>)
 800f9da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9de:	2200      	movs	r2, #0
 800f9e0:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 800f9e2:	f7fd ff8f 	bl	800d904 <canDataReady>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f47f a93f 	bne.w	800ec6c <readCanToStructs+0x12bc>
	break;
 800f9ee:	f000 beb3 	b.w	8010758 <readCanToStructs+0x2da8>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 800f9f2:	4b1c      	ldr	r3, [pc, #112]	; (800fa64 <readCanToStructs+0x20b4>)
 800f9f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9f8:	885b      	ldrh	r3, [r3, #2]
 800f9fa:	4a1a      	ldr	r2, [pc, #104]	; (800fa64 <readCanToStructs+0x20b4>)
 800f9fc:	011b      	lsls	r3, r3, #4
 800f9fe:	4413      	add	r3, r2
 800fa00:	330f      	adds	r3, #15
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 800fa0a:	4b16      	ldr	r3, [pc, #88]	; (800fa64 <readCanToStructs+0x20b4>)
 800fa0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fa10:	885b      	ldrh	r3, [r3, #2]
 800fa12:	4a14      	ldr	r2, [pc, #80]	; (800fa64 <readCanToStructs+0x20b4>)
 800fa14:	011b      	lsls	r3, r3, #4
 800fa16:	4413      	add	r3, r2
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fa1e:	f200 866e 	bhi.w	80106fe <readCanToStructs+0x2d4e>
 800fa22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa26:	d823      	bhi.n	800fa70 <readCanToStructs+0x20c0>
 800fa28:	f240 1203 	movw	r2, #259	; 0x103
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d037      	beq.n	800faa0 <readCanToStructs+0x20f0>
 800fa30:	f240 1209 	movw	r2, #265	; 0x109
 800fa34:	4293      	cmp	r3, r2
 800fa36:	f000 8109 	beq.w	800fc4c <readCanToStructs+0x229c>
				break;
 800fa3a:	f000 be60 	b.w	80106fe <readCanToStructs+0x2d4e>
 800fa3e:	bf00      	nop
 800fa40:	20004640 	.word	0x20004640
 800fa44:	20002ed8 	.word	0x20002ed8
 800fa48:	20008fbe 	.word	0x20008fbe
 800fa4c:	20008fbc 	.word	0x20008fbc
 800fa50:	20000645 	.word	0x20000645
 800fa54:	08024924 	.word	0x08024924
 800fa58:	20002cd4 	.word	0x20002cd4
 800fa5c:	200028b0 	.word	0x200028b0
 800fa60:	2000289c 	.word	0x2000289c
 800fa64:	20004e64 	.word	0x20004e64
 800fa68:	080247f8 	.word	0x080247f8
 800fa6c:	08024818 	.word	0x08024818
 800fa70:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800fa74:	2b07      	cmp	r3, #7
 800fa76:	f200 8642 	bhi.w	80106fe <readCanToStructs+0x2d4e>
 800fa7a:	a201      	add	r2, pc, #4	; (adr r2, 800fa80 <readCanToStructs+0x20d0>)
 800fa7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa80:	0800fe1f 	.word	0x0800fe1f
 800fa84:	0800fff5 	.word	0x0800fff5
 800fa88:	080106ff 	.word	0x080106ff
 800fa8c:	080106ff 	.word	0x080106ff
 800fa90:	080101f5 	.word	0x080101f5
 800fa94:	080106ff 	.word	0x080106ff
 800fa98:	08010387 	.word	0x08010387
 800fa9c:	08010559 	.word	0x08010559
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800faa0:	4bc3      	ldr	r3, [pc, #780]	; (800fdb0 <readCanToStructs+0x2400>)
 800faa2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800faa4:	4bc3      	ldr	r3, [pc, #780]	; (800fdb4 <readCanToStructs+0x2404>)
 800faa6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800faaa:	885b      	ldrh	r3, [r3, #2]
 800faac:	4ac1      	ldr	r2, [pc, #772]	; (800fdb4 <readCanToStructs+0x2404>)
 800faae:	011b      	lsls	r3, r3, #4
 800fab0:	4413      	add	r3, r2
 800fab2:	3304      	adds	r3, #4
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800faba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d110      	bne.n	800fae4 <readCanToStructs+0x2134>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fac2:	2206      	movs	r2, #6
 800fac4:	2100      	movs	r1, #0
 800fac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fac8:	f010 fab0 	bl	802002c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800facc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fad0:	4ab9      	ldr	r2, [pc, #740]	; (800fdb8 <readCanToStructs+0x2408>)
 800fad2:	f240 4112 	movw	r1, #1042	; 0x412
 800fad6:	fb01 f303 	mul.w	r3, r1, r3
 800fada:	4413      	add	r3, r2
 800fadc:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fae0:	2200      	movs	r2, #0
 800fae2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 800fae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fae8:	4ab3      	ldr	r2, [pc, #716]	; (800fdb8 <readCanToStructs+0x2408>)
 800faea:	f240 4112 	movw	r1, #1042	; 0x412
 800faee:	fb01 f303 	mul.w	r3, r1, r3
 800faf2:	4413      	add	r3, r2
 800faf4:	f203 2307 	addw	r3, r3, #519	; 0x207
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d015      	beq.n	800fb2e <readCanToStructs+0x217e>
					printf("GPS Packet Seq no MisMatch\n");
 800fb02:	48ae      	ldr	r0, [pc, #696]	; (800fdbc <readCanToStructs+0x240c>)
 800fb04:	f010 fc16 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fb08:	2206      	movs	r2, #6
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb0e:	f010 fa8d 	bl	802002c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800fb12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fb16:	4aa8      	ldr	r2, [pc, #672]	; (800fdb8 <readCanToStructs+0x2408>)
 800fb18:	f240 4112 	movw	r1, #1042	; 0x412
 800fb1c:	fb01 f303 	mul.w	r3, r1, r3
 800fb20:	4413      	add	r3, r2
 800fb22:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fb26:	2200      	movs	r2, #0
 800fb28:	701a      	strb	r2, [r3, #0]
					break;
 800fb2a:	f000 bde9 	b.w	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr += (7 * uc_seqNo);
 800fb2e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fb32:	4613      	mov	r3, r2
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	1a9b      	subs	r3, r3, r2
 800fb38:	461a      	mov	r2, r3
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3c:	4413      	add	r3, r2
 800fb3e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800fb40:	2301      	movs	r3, #1
 800fb42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb46:	e016      	b.n	800fb76 <readCanToStructs+0x21c6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800fb48:	4b9a      	ldr	r3, [pc, #616]	; (800fdb4 <readCanToStructs+0x2404>)
 800fb4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb4e:	885b      	ldrh	r3, [r3, #2]
 800fb50:	461a      	mov	r2, r3
 800fb52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb56:	4997      	ldr	r1, [pc, #604]	; (800fdb4 <readCanToStructs+0x2404>)
 800fb58:	0112      	lsls	r2, r2, #4
 800fb5a:	440a      	add	r2, r1
 800fb5c:	4413      	add	r3, r2
 800fb5e:	3304      	adds	r3, #4
 800fb60:	781a      	ldrb	r2, [r3, #0]
 800fb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb64:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800fb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb68:	3301      	adds	r3, #1
 800fb6a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800fb6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb70:	3301      	adds	r3, #1
 800fb72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb76:	4b8f      	ldr	r3, [pc, #572]	; (800fdb4 <readCanToStructs+0x2404>)
 800fb78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb7c:	885b      	ldrh	r3, [r3, #2]
 800fb7e:	4a8d      	ldr	r2, [pc, #564]	; (800fdb4 <readCanToStructs+0x2404>)
 800fb80:	011b      	lsls	r3, r3, #4
 800fb82:	4413      	add	r3, r2
 800fb84:	330c      	adds	r3, #12
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d3db      	bcc.n	800fb48 <readCanToStructs+0x2198>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800fb90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fb94:	4a88      	ldr	r2, [pc, #544]	; (800fdb8 <readCanToStructs+0x2408>)
 800fb96:	f240 4112 	movw	r1, #1042	; 0x412
 800fb9a:	fb01 f303 	mul.w	r3, r1, r3
 800fb9e:	4413      	add	r3, r2
 800fba0:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	4613      	mov	r3, r2
 800fbaa:	00db      	lsls	r3, r3, #3
 800fbac:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800fbae:	4b81      	ldr	r3, [pc, #516]	; (800fdb4 <readCanToStructs+0x2404>)
 800fbb0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbb4:	885b      	ldrh	r3, [r3, #2]
 800fbb6:	497f      	ldr	r1, [pc, #508]	; (800fdb4 <readCanToStructs+0x2404>)
 800fbb8:	011b      	lsls	r3, r3, #4
 800fbba:	440b      	add	r3, r1
 800fbbc:	330c      	adds	r3, #12
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800fbc4:	2b05      	cmp	r3, #5
 800fbc6:	d91c      	bls.n	800fc02 <readCanToStructs+0x2252>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800fbc8:	4b7d      	ldr	r3, [pc, #500]	; (800fdc0 <readCanToStructs+0x2410>)
 800fbca:	4a79      	ldr	r2, [pc, #484]	; (800fdb0 <readCanToStructs+0x2400>)
 800fbcc:	6811      	ldr	r1, [r2, #0]
 800fbce:	6019      	str	r1, [r3, #0]
 800fbd0:	8892      	ldrh	r2, [r2, #4]
 800fbd2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800fbd4:	4b7b      	ldr	r3, [pc, #492]	; (800fdc4 <readCanToStructs+0x2414>)
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d102      	bne.n	800fbe2 <readCanToStructs+0x2232>
						printf("GPS_PACKET_RECEIVED\n");
 800fbdc:	487a      	ldr	r0, [pc, #488]	; (800fdc8 <readCanToStructs+0x2418>)
 800fbde:	f010 fba9 	bl	8020334 <puts>
					Write_RTC();
 800fbe2:	f7fb fbff 	bl	800b3e4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800fbe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbea:	4a73      	ldr	r2, [pc, #460]	; (800fdb8 <readCanToStructs+0x2408>)
 800fbec:	f240 4112 	movw	r1, #1042	; 0x412
 800fbf0:	fb01 f303 	mul.w	r3, r1, r3
 800fbf4:	4413      	add	r3, r2
 800fbf6:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	701a      	strb	r2, [r3, #0]
				break;
 800fbfe:	f000 bd7f 	b.w	8010700 <readCanToStructs+0x2d50>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 800fc02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc06:	4a6c      	ldr	r2, [pc, #432]	; (800fdb8 <readCanToStructs+0x2408>)
 800fc08:	f240 4112 	movw	r1, #1042	; 0x412
 800fc0c:	fb01 f303 	mul.w	r3, r1, r3
 800fc10:	4413      	add	r3, r2
 800fc12:	f203 2306 	addw	r3, r3, #518	; 0x206
 800fc16:	2201      	movs	r2, #1
 800fc18:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 800fc1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc1e:	4966      	ldr	r1, [pc, #408]	; (800fdb8 <readCanToStructs+0x2408>)
 800fc20:	f240 4212 	movw	r2, #1042	; 0x412
 800fc24:	fb03 f202 	mul.w	r2, r3, r2
 800fc28:	440a      	add	r2, r1
 800fc2a:	f202 2207 	addw	r2, r2, #519	; 0x207
 800fc2e:	7812      	ldrb	r2, [r2, #0]
 800fc30:	3201      	adds	r2, #1
 800fc32:	b2d0      	uxtb	r0, r2
 800fc34:	4a60      	ldr	r2, [pc, #384]	; (800fdb8 <readCanToStructs+0x2408>)
 800fc36:	f240 4112 	movw	r1, #1042	; 0x412
 800fc3a:	fb01 f303 	mul.w	r3, r1, r3
 800fc3e:	4413      	add	r3, r2
 800fc40:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fc44:	4602      	mov	r2, r0
 800fc46:	701a      	strb	r2, [r3, #0]
				break;
 800fc48:	f000 bd5a 	b.w	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800fc4c:	4b58      	ldr	r3, [pc, #352]	; (800fdb0 <readCanToStructs+0x2400>)
 800fc4e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800fc50:	4b58      	ldr	r3, [pc, #352]	; (800fdb4 <readCanToStructs+0x2404>)
 800fc52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc56:	885b      	ldrh	r3, [r3, #2]
 800fc58:	4a56      	ldr	r2, [pc, #344]	; (800fdb4 <readCanToStructs+0x2404>)
 800fc5a:	011b      	lsls	r3, r3, #4
 800fc5c:	4413      	add	r3, r2
 800fc5e:	3304      	adds	r3, #4
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800fc66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d110      	bne.n	800fc90 <readCanToStructs+0x22e0>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fc6e:	2206      	movs	r2, #6
 800fc70:	2100      	movs	r1, #0
 800fc72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc74:	f010 f9da 	bl	802002c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800fc78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc7c:	4a4e      	ldr	r2, [pc, #312]	; (800fdb8 <readCanToStructs+0x2408>)
 800fc7e:	f240 4112 	movw	r1, #1042	; 0x412
 800fc82:	fb01 f303 	mul.w	r3, r1, r3
 800fc86:	4413      	add	r3, r2
 800fc88:	f203 2313 	addw	r3, r3, #531	; 0x213
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 800fc90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc94:	4a48      	ldr	r2, [pc, #288]	; (800fdb8 <readCanToStructs+0x2408>)
 800fc96:	f240 4112 	movw	r1, #1042	; 0x412
 800fc9a:	fb01 f303 	mul.w	r3, r1, r3
 800fc9e:	4413      	add	r3, r2
 800fca0:	f203 2313 	addw	r3, r3, #531	; 0x213
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d015      	beq.n	800fcda <readCanToStructs+0x232a>
					printf("GPS2 Packet Seq no MisMatch\n");
 800fcae:	4847      	ldr	r0, [pc, #284]	; (800fdcc <readCanToStructs+0x241c>)
 800fcb0:	f010 fb40 	bl	8020334 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fcb4:	2206      	movs	r2, #6
 800fcb6:	2100      	movs	r1, #0
 800fcb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcba:	f010 f9b7 	bl	802002c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800fcbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcc2:	4a3d      	ldr	r2, [pc, #244]	; (800fdb8 <readCanToStructs+0x2408>)
 800fcc4:	f240 4112 	movw	r1, #1042	; 0x412
 800fcc8:	fb01 f303 	mul.w	r3, r1, r3
 800fccc:	4413      	add	r3, r2
 800fcce:	f203 2313 	addw	r3, r3, #531	; 0x213
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	701a      	strb	r2, [r3, #0]
					break;
 800fcd6:	f000 bd13 	b.w	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr += (7 * uc_seqNo);
 800fcda:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fcde:	4613      	mov	r3, r2
 800fce0:	00db      	lsls	r3, r3, #3
 800fce2:	1a9b      	subs	r3, r3, r2
 800fce4:	461a      	mov	r2, r3
 800fce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce8:	4413      	add	r3, r2
 800fcea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800fcec:	2301      	movs	r3, #1
 800fcee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fcf2:	e016      	b.n	800fd22 <readCanToStructs+0x2372>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800fcf4:	4b2f      	ldr	r3, [pc, #188]	; (800fdb4 <readCanToStructs+0x2404>)
 800fcf6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcfa:	885b      	ldrh	r3, [r3, #2]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd02:	492c      	ldr	r1, [pc, #176]	; (800fdb4 <readCanToStructs+0x2404>)
 800fd04:	0112      	lsls	r2, r2, #4
 800fd06:	440a      	add	r2, r1
 800fd08:	4413      	add	r3, r2
 800fd0a:	3304      	adds	r3, #4
 800fd0c:	781a      	ldrb	r2, [r3, #0]
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd10:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800fd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd14:	3301      	adds	r3, #1
 800fd16:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800fd18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fd22:	4b24      	ldr	r3, [pc, #144]	; (800fdb4 <readCanToStructs+0x2404>)
 800fd24:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd28:	885b      	ldrh	r3, [r3, #2]
 800fd2a:	4a22      	ldr	r2, [pc, #136]	; (800fdb4 <readCanToStructs+0x2404>)
 800fd2c:	011b      	lsls	r3, r3, #4
 800fd2e:	4413      	add	r3, r2
 800fd30:	330c      	adds	r3, #12
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d3db      	bcc.n	800fcf4 <readCanToStructs+0x2344>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 800fd3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd40:	4a1d      	ldr	r2, [pc, #116]	; (800fdb8 <readCanToStructs+0x2408>)
 800fd42:	f240 4112 	movw	r1, #1042	; 0x412
 800fd46:	fb01 f303 	mul.w	r3, r1, r3
 800fd4a:	4413      	add	r3, r2
 800fd4c:	f203 2313 	addw	r3, r3, #531	; 0x213
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	4613      	mov	r3, r2
 800fd56:	00db      	lsls	r3, r3, #3
 800fd58:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800fd5a:	4b16      	ldr	r3, [pc, #88]	; (800fdb4 <readCanToStructs+0x2404>)
 800fd5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd60:	885b      	ldrh	r3, [r3, #2]
 800fd62:	4914      	ldr	r1, [pc, #80]	; (800fdb4 <readCanToStructs+0x2404>)
 800fd64:	011b      	lsls	r3, r3, #4
 800fd66:	440b      	add	r3, r1
 800fd68:	330c      	adds	r3, #12
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 800fd70:	2b05      	cmp	r3, #5
 800fd72:	d92f      	bls.n	800fdd4 <readCanToStructs+0x2424>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800fd74:	4b12      	ldr	r3, [pc, #72]	; (800fdc0 <readCanToStructs+0x2410>)
 800fd76:	4a0e      	ldr	r2, [pc, #56]	; (800fdb0 <readCanToStructs+0x2400>)
 800fd78:	6811      	ldr	r1, [r2, #0]
 800fd7a:	6019      	str	r1, [r3, #0]
 800fd7c:	8892      	ldrh	r2, [r2, #4]
 800fd7e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800fd80:	4b10      	ldr	r3, [pc, #64]	; (800fdc4 <readCanToStructs+0x2414>)
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d102      	bne.n	800fd8e <readCanToStructs+0x23de>
						printf("GPS2_PACKET_RECEIVED\n");
 800fd88:	4811      	ldr	r0, [pc, #68]	; (800fdd0 <readCanToStructs+0x2420>)
 800fd8a:	f010 fad3 	bl	8020334 <puts>
					Write_RTC();
 800fd8e:	f7fb fb29 	bl	800b3e4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800fd92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd96:	4a08      	ldr	r2, [pc, #32]	; (800fdb8 <readCanToStructs+0x2408>)
 800fd98:	f240 4112 	movw	r1, #1042	; 0x412
 800fd9c:	fb01 f303 	mul.w	r3, r1, r3
 800fda0:	4413      	add	r3, r2
 800fda2:	f203 2313 	addw	r3, r3, #531	; 0x213
 800fda6:	2200      	movs	r2, #0
 800fda8:	701a      	strb	r2, [r3, #0]
				break;
 800fdaa:	f000 bca9 	b.w	8010700 <readCanToStructs+0x2d50>
 800fdae:	bf00      	nop
 800fdb0:	20002880 	.word	0x20002880
 800fdb4:	20004e64 	.word	0x20004e64
 800fdb8:	20004640 	.word	0x20004640
 800fdbc:	080246c4 	.word	0x080246c4
 800fdc0:	20002878 	.word	0x20002878
 800fdc4:	20000645 	.word	0x20000645
 800fdc8:	080246e0 	.word	0x080246e0
 800fdcc:	080246f4 	.word	0x080246f4
 800fdd0:	08024710 	.word	0x08024710
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 800fdd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdd8:	4ab8      	ldr	r2, [pc, #736]	; (80100bc <readCanToStructs+0x270c>)
 800fdda:	f240 4112 	movw	r1, #1042	; 0x412
 800fdde:	fb01 f303 	mul.w	r3, r1, r3
 800fde2:	4413      	add	r3, r2
 800fde4:	f203 2312 	addw	r3, r3, #530	; 0x212
 800fde8:	2201      	movs	r2, #1
 800fdea:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 800fdec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdf0:	49b2      	ldr	r1, [pc, #712]	; (80100bc <readCanToStructs+0x270c>)
 800fdf2:	f240 4212 	movw	r2, #1042	; 0x412
 800fdf6:	fb03 f202 	mul.w	r2, r3, r2
 800fdfa:	440a      	add	r2, r1
 800fdfc:	f202 2213 	addw	r2, r2, #531	; 0x213
 800fe00:	7812      	ldrb	r2, [r2, #0]
 800fe02:	3201      	adds	r2, #1
 800fe04:	b2d0      	uxtb	r0, r2
 800fe06:	4aad      	ldr	r2, [pc, #692]	; (80100bc <readCanToStructs+0x270c>)
 800fe08:	f240 4112 	movw	r1, #1042	; 0x412
 800fe0c:	fb01 f303 	mul.w	r3, r1, r3
 800fe10:	4413      	add	r3, r2
 800fe12:	f203 2313 	addw	r3, r3, #531	; 0x213
 800fe16:	4602      	mov	r2, r0
 800fe18:	701a      	strb	r2, [r3, #0]
				break;
 800fe1a:	f000 bc71 	b.w	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 800fe1e:	4ba8      	ldr	r3, [pc, #672]	; (80100c0 <readCanToStructs+0x2710>)
 800fe20:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800fe22:	4ba8      	ldr	r3, [pc, #672]	; (80100c4 <readCanToStructs+0x2714>)
 800fe24:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe28:	885b      	ldrh	r3, [r3, #2]
 800fe2a:	4aa6      	ldr	r2, [pc, #664]	; (80100c4 <readCanToStructs+0x2714>)
 800fe2c:	011b      	lsls	r3, r3, #4
 800fe2e:	4413      	add	r3, r2
 800fe30:	3304      	adds	r3, #4
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 800fe38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d110      	bne.n	800fe62 <readCanToStructs+0x24b2>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 800fe40:	2208      	movs	r2, #8
 800fe42:	2100      	movs	r1, #0
 800fe44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe46:	f010 f8f1 	bl	802002c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800fe4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe4e:	4a9b      	ldr	r2, [pc, #620]	; (80100bc <readCanToStructs+0x270c>)
 800fe50:	f240 4112 	movw	r1, #1042	; 0x412
 800fe54:	fb01 f303 	mul.w	r3, r1, r3
 800fe58:	4413      	add	r3, r2
 800fe5a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800fe5e:	2200      	movs	r2, #0
 800fe60:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 800fe62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe66:	4a95      	ldr	r2, [pc, #596]	; (80100bc <readCanToStructs+0x270c>)
 800fe68:	f240 4112 	movw	r1, #1042	; 0x412
 800fe6c:	fb01 f303 	mul.w	r3, r1, r3
 800fe70:	4413      	add	r3, r2
 800fe72:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d026      	beq.n	800fece <readCanToStructs+0x251e>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 800fe80:	4891      	ldr	r0, [pc, #580]	; (80100c8 <readCanToStructs+0x2718>)
 800fe82:	f010 fa57 	bl	8020334 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 800fe86:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800fe8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe8e:	4a8b      	ldr	r2, [pc, #556]	; (80100bc <readCanToStructs+0x270c>)
 800fe90:	f240 4012 	movw	r0, #1042	; 0x412
 800fe94:	fb00 f303 	mul.w	r3, r0, r3
 800fe98:	4413      	add	r3, r2
 800fe9a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	461a      	mov	r2, r3
 800fea2:	488a      	ldr	r0, [pc, #552]	; (80100cc <readCanToStructs+0x271c>)
 800fea4:	f010 f9aa 	bl	80201fc <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 800fea8:	2208      	movs	r2, #8
 800feaa:	2100      	movs	r1, #0
 800feac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800feae:	f010 f8bd 	bl	802002c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800feb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800feb6:	4a81      	ldr	r2, [pc, #516]	; (80100bc <readCanToStructs+0x270c>)
 800feb8:	f240 4112 	movw	r1, #1042	; 0x412
 800febc:	fb01 f303 	mul.w	r3, r1, r3
 800fec0:	4413      	add	r3, r2
 800fec2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800fec6:	2200      	movs	r2, #0
 800fec8:	701a      	strb	r2, [r3, #0]
					break;
 800feca:	f000 bc19 	b.w	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr += (7 * uc_seqNo);
 800fece:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fed2:	4613      	mov	r3, r2
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	1a9b      	subs	r3, r3, r2
 800fed8:	461a      	mov	r2, r3
 800feda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fedc:	4413      	add	r3, r2
 800fede:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800fee0:	2301      	movs	r3, #1
 800fee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fee6:	e016      	b.n	800ff16 <readCanToStructs+0x2566>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800fee8:	4b76      	ldr	r3, [pc, #472]	; (80100c4 <readCanToStructs+0x2714>)
 800feea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800feee:	885b      	ldrh	r3, [r3, #2]
 800fef0:	461a      	mov	r2, r3
 800fef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fef6:	4973      	ldr	r1, [pc, #460]	; (80100c4 <readCanToStructs+0x2714>)
 800fef8:	0112      	lsls	r2, r2, #4
 800fefa:	440a      	add	r2, r1
 800fefc:	4413      	add	r3, r2
 800fefe:	3304      	adds	r3, #4
 800ff00:	781a      	ldrb	r2, [r3, #0]
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	3301      	adds	r3, #1
 800ff0a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ff0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff10:	3301      	adds	r3, #1
 800ff12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ff16:	4b6b      	ldr	r3, [pc, #428]	; (80100c4 <readCanToStructs+0x2714>)
 800ff18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff1c:	885b      	ldrh	r3, [r3, #2]
 800ff1e:	4a69      	ldr	r2, [pc, #420]	; (80100c4 <readCanToStructs+0x2714>)
 800ff20:	011b      	lsls	r3, r3, #4
 800ff22:	4413      	add	r3, r2
 800ff24:	330c      	adds	r3, #12
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d3db      	bcc.n	800fee8 <readCanToStructs+0x2538>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 800ff30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff34:	4a61      	ldr	r2, [pc, #388]	; (80100bc <readCanToStructs+0x270c>)
 800ff36:	f240 4112 	movw	r1, #1042	; 0x412
 800ff3a:	fb01 f303 	mul.w	r3, r1, r3
 800ff3e:	4413      	add	r3, r2
 800ff40:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	461a      	mov	r2, r3
 800ff48:	4613      	mov	r3, r2
 800ff4a:	00db      	lsls	r3, r3, #3
 800ff4c:	1a9a      	subs	r2, r3, r2
 800ff4e:	4b5d      	ldr	r3, [pc, #372]	; (80100c4 <readCanToStructs+0x2714>)
 800ff50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff54:	885b      	ldrh	r3, [r3, #2]
 800ff56:	495b      	ldr	r1, [pc, #364]	; (80100c4 <readCanToStructs+0x2714>)
 800ff58:	011b      	lsls	r3, r3, #4
 800ff5a:	440b      	add	r3, r1
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	3b01      	subs	r3, #1
 800ff62:	4413      	add	r3, r2
 800ff64:	2b07      	cmp	r3, #7
 800ff66:	d921      	bls.n	800ffac <readCanToStructs+0x25fc>
					if(Debug_flag == 1)
 800ff68:	4b59      	ldr	r3, [pc, #356]	; (80100d0 <readCanToStructs+0x2720>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d102      	bne.n	800ff76 <readCanToStructs+0x25c6>
						printf("\nRCV OTH_INFO1\n");
 800ff70:	4858      	ldr	r0, [pc, #352]	; (80100d4 <readCanToStructs+0x2724>)
 800ff72:	f010 f9df 	bl	8020334 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 800ff76:	4b58      	ldr	r3, [pc, #352]	; (80100d8 <readCanToStructs+0x2728>)
 800ff78:	4a51      	ldr	r2, [pc, #324]	; (80100c0 <readCanToStructs+0x2710>)
 800ff7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff7e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 800ff82:	4b56      	ldr	r3, [pc, #344]	; (80100dc <readCanToStructs+0x272c>)
 800ff84:	2201      	movs	r2, #1
 800ff86:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 800ff88:	f003 f92e 	bl	80131e8 <HAL_GetTick>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	4a54      	ldr	r2, [pc, #336]	; (80100e0 <readCanToStructs+0x2730>)
 800ff90:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 800ff92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff96:	4a49      	ldr	r2, [pc, #292]	; (80100bc <readCanToStructs+0x270c>)
 800ff98:	f240 4112 	movw	r1, #1042	; 0x412
 800ff9c:	fb01 f303 	mul.w	r3, r1, r3
 800ffa0:	4413      	add	r3, r2
 800ffa2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	701a      	strb	r2, [r3, #0]
				break;
 800ffaa:	e3a9      	b.n	8010700 <readCanToStructs+0x2d50>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 800ffac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffb0:	4a42      	ldr	r2, [pc, #264]	; (80100bc <readCanToStructs+0x270c>)
 800ffb2:	f240 4112 	movw	r1, #1042	; 0x412
 800ffb6:	fb01 f303 	mul.w	r3, r1, r3
 800ffba:	4413      	add	r3, r2
 800ffbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 800ffc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffc8:	493c      	ldr	r1, [pc, #240]	; (80100bc <readCanToStructs+0x270c>)
 800ffca:	f240 4212 	movw	r2, #1042	; 0x412
 800ffce:	fb03 f202 	mul.w	r2, r3, r2
 800ffd2:	440a      	add	r2, r1
 800ffd4:	f202 4203 	addw	r2, r2, #1027	; 0x403
 800ffd8:	7812      	ldrb	r2, [r2, #0]
 800ffda:	3201      	adds	r2, #1
 800ffdc:	b2d0      	uxtb	r0, r2
 800ffde:	4a37      	ldr	r2, [pc, #220]	; (80100bc <readCanToStructs+0x270c>)
 800ffe0:	f240 4112 	movw	r1, #1042	; 0x412
 800ffe4:	fb01 f303 	mul.w	r3, r1, r3
 800ffe8:	4413      	add	r3, r2
 800ffea:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800ffee:	4602      	mov	r2, r0
 800fff0:	701a      	strb	r2, [r3, #0]
				break;
 800fff2:	e385      	b.n	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 800fff4:	4b32      	ldr	r3, [pc, #200]	; (80100c0 <readCanToStructs+0x2710>)
 800fff6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800fff8:	4b32      	ldr	r3, [pc, #200]	; (80100c4 <readCanToStructs+0x2714>)
 800fffa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fffe:	885b      	ldrh	r3, [r3, #2]
 8010000:	4a30      	ldr	r2, [pc, #192]	; (80100c4 <readCanToStructs+0x2714>)
 8010002:	011b      	lsls	r3, r3, #4
 8010004:	4413      	add	r3, r2
 8010006:	3304      	adds	r3, #4
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801000e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010012:	2b00      	cmp	r3, #0
 8010014:	d110      	bne.n	8010038 <readCanToStructs+0x2688>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8010016:	2208      	movs	r2, #8
 8010018:	2100      	movs	r1, #0
 801001a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801001c:	f010 f806 	bl	802002c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010024:	4a25      	ldr	r2, [pc, #148]	; (80100bc <readCanToStructs+0x270c>)
 8010026:	f240 4112 	movw	r1, #1042	; 0x412
 801002a:	fb01 f303 	mul.w	r3, r1, r3
 801002e:	4413      	add	r3, r2
 8010030:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010034:	2200      	movs	r2, #0
 8010036:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8010038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801003c:	4a1f      	ldr	r2, [pc, #124]	; (80100bc <readCanToStructs+0x270c>)
 801003e:	f240 4112 	movw	r1, #1042	; 0x412
 8010042:	fb01 f303 	mul.w	r3, r1, r3
 8010046:	4413      	add	r3, r2
 8010048:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010052:	429a      	cmp	r2, r3
 8010054:	d025      	beq.n	80100a2 <readCanToStructs+0x26f2>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 8010056:	4823      	ldr	r0, [pc, #140]	; (80100e4 <readCanToStructs+0x2734>)
 8010058:	f010 f96c 	bl	8020334 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 801005c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8010060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010064:	4a15      	ldr	r2, [pc, #84]	; (80100bc <readCanToStructs+0x270c>)
 8010066:	f240 4012 	movw	r0, #1042	; 0x412
 801006a:	fb00 f303 	mul.w	r3, r0, r3
 801006e:	4413      	add	r3, r2
 8010070:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	461a      	mov	r2, r3
 8010078:	4814      	ldr	r0, [pc, #80]	; (80100cc <readCanToStructs+0x271c>)
 801007a:	f010 f8bf 	bl	80201fc <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 801007e:	2208      	movs	r2, #8
 8010080:	2100      	movs	r1, #0
 8010082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010084:	f00f ffd2 	bl	802002c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801008c:	4a0b      	ldr	r2, [pc, #44]	; (80100bc <readCanToStructs+0x270c>)
 801008e:	f240 4112 	movw	r1, #1042	; 0x412
 8010092:	fb01 f303 	mul.w	r3, r1, r3
 8010096:	4413      	add	r3, r2
 8010098:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801009c:	2200      	movs	r2, #0
 801009e:	701a      	strb	r2, [r3, #0]
					break;
 80100a0:	e32e      	b.n	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr += (7 * uc_seqNo);
 80100a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80100a6:	4613      	mov	r3, r2
 80100a8:	00db      	lsls	r3, r3, #3
 80100aa:	1a9b      	subs	r3, r3, r2
 80100ac:	461a      	mov	r2, r3
 80100ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b0:	4413      	add	r3, r2
 80100b2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80100b4:	2301      	movs	r3, #1
 80100b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100ba:	e02c      	b.n	8010116 <readCanToStructs+0x2766>
 80100bc:	20004640 	.word	0x20004640
 80100c0:	200026c0 	.word	0x200026c0
 80100c4:	20004e64 	.word	0x20004e64
 80100c8:	0802493c 	.word	0x0802493c
 80100cc:	08024964 	.word	0x08024964
 80100d0:	20000645 	.word	0x20000645
 80100d4:	08024974 	.word	0x08024974
 80100d8:	200026b8 	.word	0x200026b8
 80100dc:	20002154 	.word	0x20002154
 80100e0:	20002158 	.word	0x20002158
 80100e4:	08024984 	.word	0x08024984
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80100e8:	4bc8      	ldr	r3, [pc, #800]	; (801040c <readCanToStructs+0x2a5c>)
 80100ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100ee:	885b      	ldrh	r3, [r3, #2]
 80100f0:	461a      	mov	r2, r3
 80100f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100f6:	49c5      	ldr	r1, [pc, #788]	; (801040c <readCanToStructs+0x2a5c>)
 80100f8:	0112      	lsls	r2, r2, #4
 80100fa:	440a      	add	r2, r1
 80100fc:	4413      	add	r3, r2
 80100fe:	3304      	adds	r3, #4
 8010100:	781a      	ldrb	r2, [r3, #0]
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010108:	3301      	adds	r3, #1
 801010a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801010c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010110:	3301      	adds	r3, #1
 8010112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010116:	4bbd      	ldr	r3, [pc, #756]	; (801040c <readCanToStructs+0x2a5c>)
 8010118:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801011c:	885b      	ldrh	r3, [r3, #2]
 801011e:	4abb      	ldr	r2, [pc, #748]	; (801040c <readCanToStructs+0x2a5c>)
 8010120:	011b      	lsls	r3, r3, #4
 8010122:	4413      	add	r3, r2
 8010124:	330c      	adds	r3, #12
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801012c:	429a      	cmp	r2, r3
 801012e:	d3db      	bcc.n	80100e8 <readCanToStructs+0x2738>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8010130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010134:	4ab6      	ldr	r2, [pc, #728]	; (8010410 <readCanToStructs+0x2a60>)
 8010136:	f240 4112 	movw	r1, #1042	; 0x412
 801013a:	fb01 f303 	mul.w	r3, r1, r3
 801013e:	4413      	add	r3, r2
 8010140:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	4613      	mov	r3, r2
 801014a:	00db      	lsls	r3, r3, #3
 801014c:	1a9a      	subs	r2, r3, r2
 801014e:	4baf      	ldr	r3, [pc, #700]	; (801040c <readCanToStructs+0x2a5c>)
 8010150:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010154:	885b      	ldrh	r3, [r3, #2]
 8010156:	49ad      	ldr	r1, [pc, #692]	; (801040c <readCanToStructs+0x2a5c>)
 8010158:	011b      	lsls	r3, r3, #4
 801015a:	440b      	add	r3, r1
 801015c:	330c      	adds	r3, #12
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	3b01      	subs	r3, #1
 8010162:	4413      	add	r3, r2
 8010164:	2b07      	cmp	r3, #7
 8010166:	d921      	bls.n	80101ac <readCanToStructs+0x27fc>
					if(Debug_flag == 1)
 8010168:	4baa      	ldr	r3, [pc, #680]	; (8010414 <readCanToStructs+0x2a64>)
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d102      	bne.n	8010176 <readCanToStructs+0x27c6>
						printf("\nRCV OTH_INFO2\n");
 8010170:	48a9      	ldr	r0, [pc, #676]	; (8010418 <readCanToStructs+0x2a68>)
 8010172:	f010 f8df 	bl	8020334 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8010176:	4ba9      	ldr	r3, [pc, #676]	; (801041c <readCanToStructs+0x2a6c>)
 8010178:	4aa9      	ldr	r2, [pc, #676]	; (8010420 <readCanToStructs+0x2a70>)
 801017a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801017e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8010182:	4ba8      	ldr	r3, [pc, #672]	; (8010424 <readCanToStructs+0x2a74>)
 8010184:	2201      	movs	r2, #1
 8010186:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8010188:	f003 f82e 	bl	80131e8 <HAL_GetTick>
 801018c:	4603      	mov	r3, r0
 801018e:	4aa6      	ldr	r2, [pc, #664]	; (8010428 <readCanToStructs+0x2a78>)
 8010190:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010196:	4a9e      	ldr	r2, [pc, #632]	; (8010410 <readCanToStructs+0x2a60>)
 8010198:	f240 4112 	movw	r1, #1042	; 0x412
 801019c:	fb01 f303 	mul.w	r3, r1, r3
 80101a0:	4413      	add	r3, r2
 80101a2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80101a6:	2200      	movs	r2, #0
 80101a8:	701a      	strb	r2, [r3, #0]
				break;
 80101aa:	e2a9      	b.n	8010700 <readCanToStructs+0x2d50>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80101ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101b0:	4a97      	ldr	r2, [pc, #604]	; (8010410 <readCanToStructs+0x2a60>)
 80101b2:	f240 4112 	movw	r1, #1042	; 0x412
 80101b6:	fb01 f303 	mul.w	r3, r1, r3
 80101ba:	4413      	add	r3, r2
 80101bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80101c0:	2201      	movs	r2, #1
 80101c2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80101c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101c8:	4991      	ldr	r1, [pc, #580]	; (8010410 <readCanToStructs+0x2a60>)
 80101ca:	f240 4212 	movw	r2, #1042	; 0x412
 80101ce:	fb03 f202 	mul.w	r2, r3, r2
 80101d2:	440a      	add	r2, r1
 80101d4:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80101d8:	7812      	ldrb	r2, [r2, #0]
 80101da:	3201      	adds	r2, #1
 80101dc:	b2d0      	uxtb	r0, r2
 80101de:	4a8c      	ldr	r2, [pc, #560]	; (8010410 <readCanToStructs+0x2a60>)
 80101e0:	f240 4112 	movw	r1, #1042	; 0x412
 80101e4:	fb01 f303 	mul.w	r3, r1, r3
 80101e8:	4413      	add	r3, r2
 80101ea:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80101ee:	4602      	mov	r2, r0
 80101f0:	701a      	strb	r2, [r3, #0]
				break;
 80101f2:	e285      	b.n	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 80101f4:	4b8d      	ldr	r3, [pc, #564]	; (801042c <readCanToStructs+0x2a7c>)
 80101f6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80101f8:	4b84      	ldr	r3, [pc, #528]	; (801040c <readCanToStructs+0x2a5c>)
 80101fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101fe:	885b      	ldrh	r3, [r3, #2]
 8010200:	4a82      	ldr	r2, [pc, #520]	; (801040c <readCanToStructs+0x2a5c>)
 8010202:	011b      	lsls	r3, r3, #4
 8010204:	4413      	add	r3, r2
 8010206:	3304      	adds	r3, #4
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801020e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010212:	2b00      	cmp	r3, #0
 8010214:	d110      	bne.n	8010238 <readCanToStructs+0x2888>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8010216:	2204      	movs	r2, #4
 8010218:	2100      	movs	r1, #0
 801021a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801021c:	f00f ff06 	bl	802002c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010224:	4a7a      	ldr	r2, [pc, #488]	; (8010410 <readCanToStructs+0x2a60>)
 8010226:	f240 4112 	movw	r1, #1042	; 0x412
 801022a:	fb01 f303 	mul.w	r3, r1, r3
 801022e:	4413      	add	r3, r2
 8010230:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010234:	2200      	movs	r2, #0
 8010236:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8010238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801023c:	4a74      	ldr	r2, [pc, #464]	; (8010410 <readCanToStructs+0x2a60>)
 801023e:	f240 4112 	movw	r1, #1042	; 0x412
 8010242:	fb01 f303 	mul.w	r3, r1, r3
 8010246:	4413      	add	r3, r2
 8010248:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010252:	429a      	cmp	r2, r3
 8010254:	d011      	beq.n	801027a <readCanToStructs+0x28ca>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8010256:	2204      	movs	r2, #4
 8010258:	2100      	movs	r1, #0
 801025a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801025c:	f00f fee6 	bl	802002c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010264:	4a6a      	ldr	r2, [pc, #424]	; (8010410 <readCanToStructs+0x2a60>)
 8010266:	f240 4112 	movw	r1, #1042	; 0x412
 801026a:	fb01 f303 	mul.w	r3, r1, r3
 801026e:	4413      	add	r3, r2
 8010270:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010274:	2200      	movs	r2, #0
 8010276:	701a      	strb	r2, [r3, #0]
					break;
 8010278:	e242      	b.n	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr += (7 * uc_seqNo);
 801027a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801027e:	4613      	mov	r3, r2
 8010280:	00db      	lsls	r3, r3, #3
 8010282:	1a9b      	subs	r3, r3, r2
 8010284:	461a      	mov	r2, r3
 8010286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010288:	4413      	add	r3, r2
 801028a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801028c:	2301      	movs	r3, #1
 801028e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010292:	e016      	b.n	80102c2 <readCanToStructs+0x2912>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010294:	4b5d      	ldr	r3, [pc, #372]	; (801040c <readCanToStructs+0x2a5c>)
 8010296:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801029a:	885b      	ldrh	r3, [r3, #2]
 801029c:	461a      	mov	r2, r3
 801029e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102a2:	495a      	ldr	r1, [pc, #360]	; (801040c <readCanToStructs+0x2a5c>)
 80102a4:	0112      	lsls	r2, r2, #4
 80102a6:	440a      	add	r2, r1
 80102a8:	4413      	add	r3, r2
 80102aa:	3304      	adds	r3, #4
 80102ac:	781a      	ldrb	r2, [r3, #0]
 80102ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80102b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b4:	3301      	adds	r3, #1
 80102b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80102b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102bc:	3301      	adds	r3, #1
 80102be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80102c2:	4b52      	ldr	r3, [pc, #328]	; (801040c <readCanToStructs+0x2a5c>)
 80102c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102c8:	885b      	ldrh	r3, [r3, #2]
 80102ca:	4a50      	ldr	r2, [pc, #320]	; (801040c <readCanToStructs+0x2a5c>)
 80102cc:	011b      	lsls	r3, r3, #4
 80102ce:	4413      	add	r3, r2
 80102d0:	330c      	adds	r3, #12
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80102d8:	429a      	cmp	r2, r3
 80102da:	d3db      	bcc.n	8010294 <readCanToStructs+0x28e4>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 80102dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102e0:	4a4b      	ldr	r2, [pc, #300]	; (8010410 <readCanToStructs+0x2a60>)
 80102e2:	f240 4112 	movw	r1, #1042	; 0x412
 80102e6:	fb01 f303 	mul.w	r3, r1, r3
 80102ea:	4413      	add	r3, r2
 80102ec:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	461a      	mov	r2, r3
 80102f4:	4613      	mov	r3, r2
 80102f6:	00db      	lsls	r3, r3, #3
 80102f8:	1a9a      	subs	r2, r3, r2
 80102fa:	4b44      	ldr	r3, [pc, #272]	; (801040c <readCanToStructs+0x2a5c>)
 80102fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010300:	885b      	ldrh	r3, [r3, #2]
 8010302:	4942      	ldr	r1, [pc, #264]	; (801040c <readCanToStructs+0x2a5c>)
 8010304:	011b      	lsls	r3, r3, #4
 8010306:	440b      	add	r3, r1
 8010308:	330c      	adds	r3, #12
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	3b01      	subs	r3, #1
 801030e:	4413      	add	r3, r2
 8010310:	2b03      	cmp	r3, #3
 8010312:	d914      	bls.n	801033e <readCanToStructs+0x298e>
					printf("Received CAN_FAULT_INJECTION\n");
 8010314:	4846      	ldr	r0, [pc, #280]	; (8010430 <readCanToStructs+0x2a80>)
 8010316:	f010 f80d 	bl	8020334 <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 801031a:	f002 ff65 	bl	80131e8 <HAL_GetTick>
 801031e:	4603      	mov	r3, r0
 8010320:	4a41      	ldr	r2, [pc, #260]	; (8010428 <readCanToStructs+0x2a78>)
 8010322:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010328:	4a39      	ldr	r2, [pc, #228]	; (8010410 <readCanToStructs+0x2a60>)
 801032a:	f240 4112 	movw	r1, #1042	; 0x412
 801032e:	fb01 f303 	mul.w	r3, r1, r3
 8010332:	4413      	add	r3, r2
 8010334:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010338:	2200      	movs	r2, #0
 801033a:	701a      	strb	r2, [r3, #0]
				break;
 801033c:	e1e0      	b.n	8010700 <readCanToStructs+0x2d50>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 801033e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010342:	4a33      	ldr	r2, [pc, #204]	; (8010410 <readCanToStructs+0x2a60>)
 8010344:	f240 4112 	movw	r1, #1042	; 0x412
 8010348:	fb01 f303 	mul.w	r3, r1, r3
 801034c:	4413      	add	r3, r2
 801034e:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8010352:	2201      	movs	r2, #1
 8010354:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8010356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801035a:	492d      	ldr	r1, [pc, #180]	; (8010410 <readCanToStructs+0x2a60>)
 801035c:	f240 4212 	movw	r2, #1042	; 0x412
 8010360:	fb03 f202 	mul.w	r2, r3, r2
 8010364:	440a      	add	r2, r1
 8010366:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 801036a:	7812      	ldrb	r2, [r2, #0]
 801036c:	3201      	adds	r2, #1
 801036e:	b2d0      	uxtb	r0, r2
 8010370:	4a27      	ldr	r2, [pc, #156]	; (8010410 <readCanToStructs+0x2a60>)
 8010372:	f240 4112 	movw	r1, #1042	; 0x412
 8010376:	fb01 f303 	mul.w	r3, r1, r3
 801037a:	4413      	add	r3, r2
 801037c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010380:	4602      	mov	r2, r0
 8010382:	701a      	strb	r2, [r3, #0]
				break;
 8010384:	e1bc      	b.n	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8010386:	4b2b      	ldr	r3, [pc, #172]	; (8010434 <readCanToStructs+0x2a84>)
 8010388:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801038a:	4b20      	ldr	r3, [pc, #128]	; (801040c <readCanToStructs+0x2a5c>)
 801038c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010390:	885b      	ldrh	r3, [r3, #2]
 8010392:	4a1e      	ldr	r2, [pc, #120]	; (801040c <readCanToStructs+0x2a5c>)
 8010394:	011b      	lsls	r3, r3, #4
 8010396:	4413      	add	r3, r2
 8010398:	3304      	adds	r3, #4
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80103a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d110      	bne.n	80103ca <readCanToStructs+0x2a1a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80103a8:	2284      	movs	r2, #132	; 0x84
 80103aa:	2100      	movs	r1, #0
 80103ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103ae:	f00f fe3d 	bl	802002c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80103b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103b6:	4a16      	ldr	r2, [pc, #88]	; (8010410 <readCanToStructs+0x2a60>)
 80103b8:	f240 4112 	movw	r1, #1042	; 0x412
 80103bc:	fb01 f303 	mul.w	r3, r1, r3
 80103c0:	4413      	add	r3, r2
 80103c2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80103c6:	2200      	movs	r2, #0
 80103c8:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80103ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103ce:	4a10      	ldr	r2, [pc, #64]	; (8010410 <readCanToStructs+0x2a60>)
 80103d0:	f240 4112 	movw	r1, #1042	; 0x412
 80103d4:	fb01 f303 	mul.w	r3, r1, r3
 80103d8:	4413      	add	r3, r2
 80103da:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d027      	beq.n	8010438 <readCanToStructs+0x2a88>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80103e8:	2284      	movs	r2, #132	; 0x84
 80103ea:	2100      	movs	r1, #0
 80103ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103ee:	f00f fe1d 	bl	802002c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80103f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103f6:	4a06      	ldr	r2, [pc, #24]	; (8010410 <readCanToStructs+0x2a60>)
 80103f8:	f240 4112 	movw	r1, #1042	; 0x412
 80103fc:	fb01 f303 	mul.w	r3, r1, r3
 8010400:	4413      	add	r3, r2
 8010402:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010406:	2200      	movs	r2, #0
 8010408:	701a      	strb	r2, [r3, #0]
					break;
 801040a:	e179      	b.n	8010700 <readCanToStructs+0x2d50>
 801040c:	20004e64 	.word	0x20004e64
 8010410:	20004640 	.word	0x20004640
 8010414:	20000645 	.word	0x20000645
 8010418:	080249ac 	.word	0x080249ac
 801041c:	200026b8 	.word	0x200026b8
 8010420:	200026c0 	.word	0x200026c0
 8010424:	20002154 	.word	0x20002154
 8010428:	20002158 	.word	0x20002158
 801042c:	200026ac 	.word	0x200026ac
 8010430:	080249bc 	.word	0x080249bc
 8010434:	2000274c 	.word	0x2000274c
				uc_pp_charPtr += (7 * uc_seqNo);
 8010438:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801043c:	4613      	mov	r3, r2
 801043e:	00db      	lsls	r3, r3, #3
 8010440:	1a9b      	subs	r3, r3, r2
 8010442:	461a      	mov	r2, r3
 8010444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010446:	4413      	add	r3, r2
 8010448:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801044a:	2301      	movs	r3, #1
 801044c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010450:	e016      	b.n	8010480 <readCanToStructs+0x2ad0>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010452:	4bc3      	ldr	r3, [pc, #780]	; (8010760 <readCanToStructs+0x2db0>)
 8010454:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010458:	885b      	ldrh	r3, [r3, #2]
 801045a:	461a      	mov	r2, r3
 801045c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010460:	49bf      	ldr	r1, [pc, #764]	; (8010760 <readCanToStructs+0x2db0>)
 8010462:	0112      	lsls	r2, r2, #4
 8010464:	440a      	add	r2, r1
 8010466:	4413      	add	r3, r2
 8010468:	3304      	adds	r3, #4
 801046a:	781a      	ldrb	r2, [r3, #0]
 801046c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010472:	3301      	adds	r3, #1
 8010474:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010476:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801047a:	3301      	adds	r3, #1
 801047c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010480:	4bb7      	ldr	r3, [pc, #732]	; (8010760 <readCanToStructs+0x2db0>)
 8010482:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010486:	885b      	ldrh	r3, [r3, #2]
 8010488:	4ab5      	ldr	r2, [pc, #724]	; (8010760 <readCanToStructs+0x2db0>)
 801048a:	011b      	lsls	r3, r3, #4
 801048c:	4413      	add	r3, r2
 801048e:	330c      	adds	r3, #12
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010496:	429a      	cmp	r2, r3
 8010498:	d3db      	bcc.n	8010452 <readCanToStructs+0x2aa2>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 801049a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801049e:	4ab1      	ldr	r2, [pc, #708]	; (8010764 <readCanToStructs+0x2db4>)
 80104a0:	f240 4112 	movw	r1, #1042	; 0x412
 80104a4:	fb01 f303 	mul.w	r3, r1, r3
 80104a8:	4413      	add	r3, r2
 80104aa:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	461a      	mov	r2, r3
 80104b2:	4613      	mov	r3, r2
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	1a9a      	subs	r2, r3, r2
 80104b8:	4ba9      	ldr	r3, [pc, #676]	; (8010760 <readCanToStructs+0x2db0>)
 80104ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104be:	885b      	ldrh	r3, [r3, #2]
 80104c0:	49a7      	ldr	r1, [pc, #668]	; (8010760 <readCanToStructs+0x2db0>)
 80104c2:	011b      	lsls	r3, r3, #4
 80104c4:	440b      	add	r3, r1
 80104c6:	330c      	adds	r3, #12
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	3b01      	subs	r3, #1
 80104cc:	4413      	add	r3, r2
 80104ce:	2b83      	cmp	r3, #131	; 0x83
 80104d0:	d91e      	bls.n	8010510 <readCanToStructs+0x2b60>
					if(Debug_flag == 1)
 80104d2:	4ba5      	ldr	r3, [pc, #660]	; (8010768 <readCanToStructs+0x2db8>)
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d102      	bne.n	80104e0 <readCanToStructs+0x2b30>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 80104da:	48a4      	ldr	r0, [pc, #656]	; (801076c <readCanToStructs+0x2dbc>)
 80104dc:	f00f ff2a 	bl	8020334 <puts>
					Received_CAN_Relay_Status = YES;
 80104e0:	4ba3      	ldr	r3, [pc, #652]	; (8010770 <readCanToStructs+0x2dc0>)
 80104e2:	2201      	movs	r2, #1
 80104e4:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 80104e6:	4ba3      	ldr	r3, [pc, #652]	; (8010774 <readCanToStructs+0x2dc4>)
 80104e8:	2201      	movs	r2, #1
 80104ea:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80104ec:	f002 fe7c 	bl	80131e8 <HAL_GetTick>
 80104f0:	4603      	mov	r3, r0
 80104f2:	4aa1      	ldr	r2, [pc, #644]	; (8010778 <readCanToStructs+0x2dc8>)
 80104f4:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80104f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104fa:	4a9a      	ldr	r2, [pc, #616]	; (8010764 <readCanToStructs+0x2db4>)
 80104fc:	f240 4112 	movw	r1, #1042	; 0x412
 8010500:	fb01 f303 	mul.w	r3, r1, r3
 8010504:	4413      	add	r3, r2
 8010506:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801050a:	2200      	movs	r2, #0
 801050c:	701a      	strb	r2, [r3, #0]
				break;
 801050e:	e0f7      	b.n	8010700 <readCanToStructs+0x2d50>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8010510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010514:	4a93      	ldr	r2, [pc, #588]	; (8010764 <readCanToStructs+0x2db4>)
 8010516:	f240 4112 	movw	r1, #1042	; 0x412
 801051a:	fb01 f303 	mul.w	r3, r1, r3
 801051e:	4413      	add	r3, r2
 8010520:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8010524:	2201      	movs	r2, #1
 8010526:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8010528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801052c:	498d      	ldr	r1, [pc, #564]	; (8010764 <readCanToStructs+0x2db4>)
 801052e:	f240 4212 	movw	r2, #1042	; 0x412
 8010532:	fb03 f202 	mul.w	r2, r3, r2
 8010536:	440a      	add	r2, r1
 8010538:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801053c:	7812      	ldrb	r2, [r2, #0]
 801053e:	3201      	adds	r2, #1
 8010540:	b2d0      	uxtb	r0, r2
 8010542:	4a88      	ldr	r2, [pc, #544]	; (8010764 <readCanToStructs+0x2db4>)
 8010544:	f240 4112 	movw	r1, #1042	; 0x412
 8010548:	fb01 f303 	mul.w	r3, r1, r3
 801054c:	4413      	add	r3, r2
 801054e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010552:	4602      	mov	r2, r0
 8010554:	701a      	strb	r2, [r3, #0]
				break;
 8010556:	e0d3      	b.n	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8010558:	4b88      	ldr	r3, [pc, #544]	; (801077c <readCanToStructs+0x2dcc>)
 801055a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801055c:	4b80      	ldr	r3, [pc, #512]	; (8010760 <readCanToStructs+0x2db0>)
 801055e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010562:	885b      	ldrh	r3, [r3, #2]
 8010564:	4a7e      	ldr	r2, [pc, #504]	; (8010760 <readCanToStructs+0x2db0>)
 8010566:	011b      	lsls	r3, r3, #4
 8010568:	4413      	add	r3, r2
 801056a:	3304      	adds	r3, #4
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8010572:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010576:	2b00      	cmp	r3, #0
 8010578:	d110      	bne.n	801059c <readCanToStructs+0x2bec>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 801057a:	2284      	movs	r2, #132	; 0x84
 801057c:	2100      	movs	r1, #0
 801057e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010580:	f00f fd54 	bl	802002c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010588:	4a76      	ldr	r2, [pc, #472]	; (8010764 <readCanToStructs+0x2db4>)
 801058a:	f240 4112 	movw	r1, #1042	; 0x412
 801058e:	fb01 f303 	mul.w	r3, r1, r3
 8010592:	4413      	add	r3, r2
 8010594:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010598:	2200      	movs	r2, #0
 801059a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 801059c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105a0:	4a70      	ldr	r2, [pc, #448]	; (8010764 <readCanToStructs+0x2db4>)
 80105a2:	f240 4112 	movw	r1, #1042	; 0x412
 80105a6:	fb01 f303 	mul.w	r3, r1, r3
 80105aa:	4413      	add	r3, r2
 80105ac:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d011      	beq.n	80105de <readCanToStructs+0x2c2e>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80105ba:	2284      	movs	r2, #132	; 0x84
 80105bc:	2100      	movs	r1, #0
 80105be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105c0:	f00f fd34 	bl	802002c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80105c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105c8:	4a66      	ldr	r2, [pc, #408]	; (8010764 <readCanToStructs+0x2db4>)
 80105ca:	f240 4112 	movw	r1, #1042	; 0x412
 80105ce:	fb01 f303 	mul.w	r3, r1, r3
 80105d2:	4413      	add	r3, r2
 80105d4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80105d8:	2200      	movs	r2, #0
 80105da:	701a      	strb	r2, [r3, #0]
					break;
 80105dc:	e090      	b.n	8010700 <readCanToStructs+0x2d50>
				uc_pp_charPtr += (7 * uc_seqNo);
 80105de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80105e2:	4613      	mov	r3, r2
 80105e4:	00db      	lsls	r3, r3, #3
 80105e6:	1a9b      	subs	r3, r3, r2
 80105e8:	461a      	mov	r2, r3
 80105ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ec:	4413      	add	r3, r2
 80105ee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80105f0:	2301      	movs	r3, #1
 80105f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80105f6:	e016      	b.n	8010626 <readCanToStructs+0x2c76>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80105f8:	4b59      	ldr	r3, [pc, #356]	; (8010760 <readCanToStructs+0x2db0>)
 80105fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105fe:	885b      	ldrh	r3, [r3, #2]
 8010600:	461a      	mov	r2, r3
 8010602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010606:	4956      	ldr	r1, [pc, #344]	; (8010760 <readCanToStructs+0x2db0>)
 8010608:	0112      	lsls	r2, r2, #4
 801060a:	440a      	add	r2, r1
 801060c:	4413      	add	r3, r2
 801060e:	3304      	adds	r3, #4
 8010610:	781a      	ldrb	r2, [r3, #0]
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010618:	3301      	adds	r3, #1
 801061a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801061c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010620:	3301      	adds	r3, #1
 8010622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010626:	4b4e      	ldr	r3, [pc, #312]	; (8010760 <readCanToStructs+0x2db0>)
 8010628:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801062c:	885b      	ldrh	r3, [r3, #2]
 801062e:	4a4c      	ldr	r2, [pc, #304]	; (8010760 <readCanToStructs+0x2db0>)
 8010630:	011b      	lsls	r3, r3, #4
 8010632:	4413      	add	r3, r2
 8010634:	330c      	adds	r3, #12
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801063c:	429a      	cmp	r2, r3
 801063e:	d3db      	bcc.n	80105f8 <readCanToStructs+0x2c48>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8010640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010644:	4a47      	ldr	r2, [pc, #284]	; (8010764 <readCanToStructs+0x2db4>)
 8010646:	f240 4112 	movw	r1, #1042	; 0x412
 801064a:	fb01 f303 	mul.w	r3, r1, r3
 801064e:	4413      	add	r3, r2
 8010650:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	461a      	mov	r2, r3
 8010658:	4613      	mov	r3, r2
 801065a:	00db      	lsls	r3, r3, #3
 801065c:	1a9a      	subs	r2, r3, r2
 801065e:	4b40      	ldr	r3, [pc, #256]	; (8010760 <readCanToStructs+0x2db0>)
 8010660:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010664:	885b      	ldrh	r3, [r3, #2]
 8010666:	493e      	ldr	r1, [pc, #248]	; (8010760 <readCanToStructs+0x2db0>)
 8010668:	011b      	lsls	r3, r3, #4
 801066a:	440b      	add	r3, r1
 801066c:	330c      	adds	r3, #12
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	3b01      	subs	r3, #1
 8010672:	4413      	add	r3, r2
 8010674:	2b83      	cmp	r3, #131	; 0x83
 8010676:	d91e      	bls.n	80106b6 <readCanToStructs+0x2d06>
					if(Debug_flag == 1)
 8010678:	4b3b      	ldr	r3, [pc, #236]	; (8010768 <readCanToStructs+0x2db8>)
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d102      	bne.n	8010686 <readCanToStructs+0x2cd6>
						printf("\nRCV RELAY_DATA_EI2\n");
 8010680:	483f      	ldr	r0, [pc, #252]	; (8010780 <readCanToStructs+0x2dd0>)
 8010682:	f00f fe57 	bl	8020334 <puts>
					Medha_CAN_Xchanging_Happening = SET;
 8010686:	4b3b      	ldr	r3, [pc, #236]	; (8010774 <readCanToStructs+0x2dc4>)
 8010688:	2201      	movs	r2, #1
 801068a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 801068c:	f002 fdac 	bl	80131e8 <HAL_GetTick>
 8010690:	4603      	mov	r3, r0
 8010692:	4a39      	ldr	r2, [pc, #228]	; (8010778 <readCanToStructs+0x2dc8>)
 8010694:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 8010696:	4b36      	ldr	r3, [pc, #216]	; (8010770 <readCanToStructs+0x2dc0>)
 8010698:	2201      	movs	r2, #1
 801069a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801069c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106a0:	4a30      	ldr	r2, [pc, #192]	; (8010764 <readCanToStructs+0x2db4>)
 80106a2:	f240 4112 	movw	r1, #1042	; 0x412
 80106a6:	fb01 f303 	mul.w	r3, r1, r3
 80106aa:	4413      	add	r3, r2
 80106ac:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80106b0:	2200      	movs	r2, #0
 80106b2:	701a      	strb	r2, [r3, #0]
				break;
 80106b4:	e024      	b.n	8010700 <readCanToStructs+0x2d50>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80106b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106ba:	4a2a      	ldr	r2, [pc, #168]	; (8010764 <readCanToStructs+0x2db4>)
 80106bc:	f240 4112 	movw	r1, #1042	; 0x412
 80106c0:	fb01 f303 	mul.w	r3, r1, r3
 80106c4:	4413      	add	r3, r2
 80106c6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80106ca:	2201      	movs	r2, #1
 80106cc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80106ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106d2:	4924      	ldr	r1, [pc, #144]	; (8010764 <readCanToStructs+0x2db4>)
 80106d4:	f240 4212 	movw	r2, #1042	; 0x412
 80106d8:	fb03 f202 	mul.w	r2, r3, r2
 80106dc:	440a      	add	r2, r1
 80106de:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80106e2:	7812      	ldrb	r2, [r2, #0]
 80106e4:	3201      	adds	r2, #1
 80106e6:	b2d0      	uxtb	r0, r2
 80106e8:	4a1e      	ldr	r2, [pc, #120]	; (8010764 <readCanToStructs+0x2db4>)
 80106ea:	f240 4112 	movw	r1, #1042	; 0x412
 80106ee:	fb01 f303 	mul.w	r3, r1, r3
 80106f2:	4413      	add	r3, r2
 80106f4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80106f8:	4602      	mov	r2, r0
 80106fa:	701a      	strb	r2, [r3, #0]
				break;
 80106fc:	e000      	b.n	8010700 <readCanToStructs+0x2d50>
				break;
 80106fe:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8010700:	4b17      	ldr	r3, [pc, #92]	; (8010760 <readCanToStructs+0x2db0>)
 8010702:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010706:	885b      	ldrh	r3, [r3, #2]
 8010708:	011b      	lsls	r3, r3, #4
 801070a:	4a15      	ldr	r2, [pc, #84]	; (8010760 <readCanToStructs+0x2db0>)
 801070c:	4413      	add	r3, r2
 801070e:	2210      	movs	r2, #16
 8010710:	2100      	movs	r1, #0
 8010712:	4618      	mov	r0, r3
 8010714:	f00f fc8a 	bl	802002c <memset>
			canRead.Out++;
 8010718:	4b11      	ldr	r3, [pc, #68]	; (8010760 <readCanToStructs+0x2db0>)
 801071a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801071e:	885b      	ldrh	r3, [r3, #2]
 8010720:	3301      	adds	r3, #1
 8010722:	b29a      	uxth	r2, r3
 8010724:	4b0e      	ldr	r3, [pc, #56]	; (8010760 <readCanToStructs+0x2db0>)
 8010726:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801072a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801072c:	4b0c      	ldr	r3, [pc, #48]	; (8010760 <readCanToStructs+0x2db0>)
 801072e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010732:	885b      	ldrh	r3, [r3, #2]
 8010734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010738:	d104      	bne.n	8010744 <readCanToStructs+0x2d94>
				canRead.Out = 0;
 801073a:	4b09      	ldr	r3, [pc, #36]	; (8010760 <readCanToStructs+0x2db0>)
 801073c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010740:	2200      	movs	r2, #0
 8010742:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8010744:	f7fd f8de 	bl	800d904 <canDataReady>
 8010748:	4603      	mov	r3, r0
 801074a:	2b00      	cmp	r3, #0
 801074c:	f47f a951 	bne.w	800f9f2 <readCanToStructs+0x2042>
	break;
 8010750:	e002      	b.n	8010758 <readCanToStructs+0x2da8>
		break;
 8010752:	bf00      	nop
 8010754:	e000      	b.n	8010758 <readCanToStructs+0x2da8>
			return;
 8010756:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8010758:	3738      	adds	r7, #56	; 0x38
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20004e64 	.word	0x20004e64
 8010764:	20004640 	.word	0x20004640
 8010768:	20000645 	.word	0x20000645
 801076c:	080249dc 	.word	0x080249dc
 8010770:	20002155 	.word	0x20002155
 8010774:	20002154 	.word	0x20002154
 8010778:	20002158 	.word	0x20002158
 801077c:	2000274c 	.word	0x2000274c
 8010780:	080249f8 	.word	0x080249f8

08010784 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8010794:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010798:	461a      	mov	r2, r3
 801079a:	6879      	ldr	r1, [r7, #4]
 801079c:	2000      	movs	r0, #0
 801079e:	f000 f845 	bl	801082c <GetCRC16>
 80107a2:	4603      	mov	r3, r0
 80107a4:	461a      	mov	r2, r3
 80107a6:	4b1d      	ldr	r3, [pc, #116]	; (801081c <CheckCRC+0x98>)
 80107a8:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 80107aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	4413      	add	r3, r2
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	4b1a      	ldr	r3, [pc, #104]	; (8010820 <CheckCRC+0x9c>)
 80107b8:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 80107ba:	4b19      	ldr	r3, [pc, #100]	; (8010820 <CheckCRC+0x9c>)
 80107bc:	881b      	ldrh	r3, [r3, #0]
 80107be:	021b      	lsls	r3, r3, #8
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	4b17      	ldr	r3, [pc, #92]	; (8010820 <CheckCRC+0x9c>)
 80107c4:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 80107c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107ca:	3301      	adds	r3, #1
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	4413      	add	r3, r2
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	4b12      	ldr	r3, [pc, #72]	; (8010820 <CheckCRC+0x9c>)
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	4313      	orrs	r3, r2
 80107da:	b29a      	uxth	r2, r3
 80107dc:	4b10      	ldr	r3, [pc, #64]	; (8010820 <CheckCRC+0x9c>)
 80107de:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 80107e0:	4b0f      	ldr	r3, [pc, #60]	; (8010820 <CheckCRC+0x9c>)
 80107e2:	881a      	ldrh	r2, [r3, #0]
 80107e4:	4b0d      	ldr	r3, [pc, #52]	; (801081c <CheckCRC+0x98>)
 80107e6:	881b      	ldrh	r3, [r3, #0]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d105      	bne.n	80107f8 <CheckCRC+0x74>
	{
		retVal = 1;
 80107ec:	2301      	movs	r3, #1
 80107ee:	81fb      	strh	r3, [r7, #14]
		return k;
 80107f0:	4b0b      	ldr	r3, [pc, #44]	; (8010820 <CheckCRC+0x9c>)
 80107f2:	881b      	ldrh	r3, [r3, #0]
 80107f4:	b21b      	sxth	r3, r3
 80107f6:	e00d      	b.n	8010814 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 80107f8:	4b08      	ldr	r3, [pc, #32]	; (801081c <CheckCRC+0x98>)
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	4619      	mov	r1, r3
 80107fe:	4809      	ldr	r0, [pc, #36]	; (8010824 <CheckCRC+0xa0>)
 8010800:	f00f fcfc 	bl	80201fc <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8010804:	4b06      	ldr	r3, [pc, #24]	; (8010820 <CheckCRC+0x9c>)
 8010806:	881b      	ldrh	r3, [r3, #0]
 8010808:	4619      	mov	r1, r3
 801080a:	4807      	ldr	r0, [pc, #28]	; (8010828 <CheckCRC+0xa4>)
 801080c:	f00f fcf6 	bl	80201fc <iprintf>
	return retVal;
 8010810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3710      	adds	r7, #16
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	20008fc0 	.word	0x20008fc0
 8010820:	20008fc2 	.word	0x20008fc2
 8010824:	08024a0c 	.word	0x08024a0c
 8010828:	08024a24 	.word	0x08024a24

0801082c <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 801082c:	b480      	push	{r7}
 801082e:	b085      	sub	sp, #20
 8010830:	af00      	add	r7, sp, #0
 8010832:	4603      	mov	r3, r0
 8010834:	6039      	str	r1, [r7, #0]
 8010836:	80fb      	strh	r3, [r7, #6]
 8010838:	4613      	mov	r3, r2
 801083a:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 801083c:	88fb      	ldrh	r3, [r7, #6]
 801083e:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8010840:	e038      	b.n	80108b4 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8010842:	89fb      	ldrh	r3, [r7, #14]
 8010844:	f003 030f 	and.w	r3, r3, #15
 8010848:	4a22      	ldr	r2, [pc, #136]	; (80108d4 <GetCRC16+0xa8>)
 801084a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801084e:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8010850:	89fb      	ldrh	r3, [r7, #14]
 8010852:	091b      	lsrs	r3, r3, #4
 8010854:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8010856:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801085a:	89bb      	ldrh	r3, [r7, #12]
 801085c:	4053      	eors	r3, r2
 801085e:	b21a      	sxth	r2, r3
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	f003 030f 	and.w	r3, r3, #15
 8010868:	491a      	ldr	r1, [pc, #104]	; (80108d4 <GetCRC16+0xa8>)
 801086a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801086e:	b21b      	sxth	r3, r3
 8010870:	4053      	eors	r3, r2
 8010872:	b21b      	sxth	r3, r3
 8010874:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8010876:	89fb      	ldrh	r3, [r7, #14]
 8010878:	f003 030f 	and.w	r3, r3, #15
 801087c:	4a15      	ldr	r2, [pc, #84]	; (80108d4 <GetCRC16+0xa8>)
 801087e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010882:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8010884:	89fb      	ldrh	r3, [r7, #14]
 8010886:	091b      	lsrs	r3, r3, #4
 8010888:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 801088a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801088e:	89bb      	ldrh	r3, [r7, #12]
 8010890:	4053      	eors	r3, r2
 8010892:	b21a      	sxth	r2, r3
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	091b      	lsrs	r3, r3, #4
 801089a:	b2db      	uxtb	r3, r3
 801089c:	f003 030f 	and.w	r3, r3, #15
 80108a0:	490c      	ldr	r1, [pc, #48]	; (80108d4 <GetCRC16+0xa8>)
 80108a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80108a6:	b21b      	sxth	r3, r3
 80108a8:	4053      	eors	r3, r2
 80108aa:	b21b      	sxth	r3, r3
 80108ac:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	3301      	adds	r3, #1
 80108b2:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 80108b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	3a01      	subs	r2, #1
 80108bc:	b292      	uxth	r2, r2
 80108be:	80ba      	strh	r2, [r7, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	dcbe      	bgt.n	8010842 <GetCRC16+0x16>
	}
	return(uiCrc);
 80108c4:	89fb      	ldrh	r3, [r7, #14]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3714      	adds	r7, #20
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop
 80108d4:	080268f8 	.word	0x080268f8

080108d8 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	460b      	mov	r3, r1
 80108e2:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 80108e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80108e8:	461a      	mov	r2, r3
 80108ea:	6879      	ldr	r1, [r7, #4]
 80108ec:	2000      	movs	r0, #0
 80108ee:	f7ff ff9d 	bl	801082c <GetCRC16>
 80108f2:	4603      	mov	r3, r0
 80108f4:	461a      	mov	r2, r3
 80108f6:	4b11      	ldr	r3, [pc, #68]	; (801093c <ComputeCRC+0x64>)
 80108f8:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 80108fa:	4b10      	ldr	r3, [pc, #64]	; (801093c <ComputeCRC+0x64>)
 80108fc:	881a      	ldrh	r2, [r3, #0]
 80108fe:	4b10      	ldr	r3, [pc, #64]	; (8010940 <ComputeCRC+0x68>)
 8010900:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8010902:	4b0e      	ldr	r3, [pc, #56]	; (801093c <ComputeCRC+0x64>)
 8010904:	8819      	ldrh	r1, [r3, #0]
 8010906:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801090a:	3301      	adds	r3, #1
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	4413      	add	r3, r2
 8010910:	b2ca      	uxtb	r2, r1
 8010912:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8010914:	4b09      	ldr	r3, [pc, #36]	; (801093c <ComputeCRC+0x64>)
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	0a1b      	lsrs	r3, r3, #8
 801091a:	b29a      	uxth	r2, r3
 801091c:	4b07      	ldr	r3, [pc, #28]	; (801093c <ComputeCRC+0x64>)
 801091e:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8010920:	4b06      	ldr	r3, [pc, #24]	; (801093c <ComputeCRC+0x64>)
 8010922:	8819      	ldrh	r1, [r3, #0]
 8010924:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	4413      	add	r3, r2
 801092c:	b2ca      	uxtb	r2, r1
 801092e:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8010930:	4b03      	ldr	r3, [pc, #12]	; (8010940 <ComputeCRC+0x68>)
 8010932:	881b      	ldrh	r3, [r3, #0]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3708      	adds	r7, #8
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	20008fc4 	.word	0x20008fc4
 8010940:	20008fc6 	.word	0x20008fc6

08010944 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8010944:	b480      	push	{r7}
 8010946:	b087      	sub	sp, #28
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 801094c:	2300      	movs	r3, #0
 801094e:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8010950:	2300      	movs	r3, #0
 8010952:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8010954:	2300      	movs	r3, #0
 8010956:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 801095e:	2300      	movs	r3, #0
 8010960:	60fb      	str	r3, [r7, #12]
 8010962:	e012      	b.n	801098a <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f1c3 031f 	rsb	r3, r3, #31
 8010972:	68ba      	ldr	r2, [r7, #8]
 8010974:	fa02 f303 	lsl.w	r3, r2, r3
 8010978:	697a      	ldr	r2, [r7, #20]
 801097a:	4313      	orrs	r3, r2
 801097c:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	085b      	lsrs	r3, r3, #1
 8010982:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	3301      	adds	r3, #1
 8010988:	60fb      	str	r3, [r7, #12]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2b1f      	cmp	r3, #31
 801098e:	dde9      	ble.n	8010964 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8010990:	697b      	ldr	r3, [r7, #20]
}
 8010992:	4618      	mov	r0, r3
 8010994:	371c      	adds	r7, #28
 8010996:	46bd      	mov	sp, r7
 8010998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099c:	4770      	bx	lr
	...

080109a0 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b088      	sub	sp, #32
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	460b      	mov	r3, r1
 80109aa:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 80109ac:	2300      	movs	r3, #0
 80109ae:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 80109b0:	2300      	movs	r3, #0
 80109b2:	617b      	str	r3, [r7, #20]
	int converted = 0;
 80109b4:	2300      	movs	r3, #0
 80109b6:	613b      	str	r3, [r7, #16]
	int i=0;
 80109b8:	2300      	movs	r3, #0
 80109ba:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 80109bc:	4b26      	ldr	r3, [pc, #152]	; (8010a58 <CalculateDirectReverseCrc+0xb8>)
 80109be:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f7ff ffbf 	bl	8010944 <ReverseCRCPolynomial>
 80109c6:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 80109c8:	2300      	movs	r3, #0
 80109ca:	61bb      	str	r3, [r7, #24]
 80109cc:	e00d      	b.n	80109ea <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 80109ce:	69f8      	ldr	r0, [r7, #28]
 80109d0:	69bb      	ldr	r3, [r7, #24]
 80109d2:	687a      	ldr	r2, [r7, #4]
 80109d4:	4413      	add	r3, r2
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	697a      	ldr	r2, [r7, #20]
 80109da:	4619      	mov	r1, r3
 80109dc:	f000 f844 	bl	8010a68 <AnsoldoCrc>
 80109e0:	4603      	mov	r3, r0
 80109e2:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 80109e4:	69bb      	ldr	r3, [r7, #24]
 80109e6:	3301      	adds	r3, #1
 80109e8:	61bb      	str	r3, [r7, #24]
 80109ea:	887b      	ldrh	r3, [r7, #2]
 80109ec:	69ba      	ldr	r2, [r7, #24]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	dbed      	blt.n	80109ce <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	061b      	lsls	r3, r3, #24
 80109f6:	693a      	ldr	r2, [r7, #16]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	021b      	lsls	r3, r3, #8
 8010a00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a04:	693a      	ldr	r2, [r7, #16]
 8010a06:	4313      	orrs	r3, r2
 8010a08:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8010a0a:	69fb      	ldr	r3, [r7, #28]
 8010a0c:	121b      	asrs	r3, r3, #8
 8010a0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a12:	693a      	ldr	r2, [r7, #16]
 8010a14:	4313      	orrs	r3, r2
 8010a16:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8010a18:	69fb      	ldr	r3, [r7, #28]
 8010a1a:	0e1a      	lsrs	r2, r3, #24
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8010a22:	4b0e      	ldr	r3, [pc, #56]	; (8010a5c <CalculateDirectReverseCrc+0xbc>)
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d110      	bne.n	8010a4c <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8010a2a:	480d      	ldr	r0, [pc, #52]	; (8010a60 <CalculateDirectReverseCrc+0xc0>)
 8010a2c:	f007 f88e 	bl	8017b4c <HAL_RNG_GetRandomNumber>
 8010a30:	4601      	mov	r1, r0
 8010a32:	4b0c      	ldr	r3, [pc, #48]	; (8010a64 <CalculateDirectReverseCrc+0xc4>)
 8010a34:	fba3 2301 	umull	r2, r3, r3, r1
 8010a38:	08da      	lsrs	r2, r3, #3
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	009b      	lsls	r3, r3, #2
 8010a3e:	4413      	add	r3, r2
 8010a40:	005b      	lsls	r3, r3, #1
 8010a42:	1aca      	subs	r2, r1, r3
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	4413      	add	r3, r2
 8010a48:	3301      	adds	r3, #1
 8010a4a:	e000      	b.n	8010a4e <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8010a4c:	693b      	ldr	r3, [r7, #16]
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3720      	adds	r7, #32
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	d20d8a81 	.word	0xd20d8a81
 8010a5c:	20000e39 	.word	0x20000e39
 8010a60:	20009088 	.word	0x20009088
 8010a64:	cccccccd 	.word	0xcccccccd

08010a68 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b08b      	sub	sp, #44	; 0x2c
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	460b      	mov	r3, r1
 8010a72:	607a      	str	r2, [r7, #4]
 8010a74:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8010a76:	7afb      	ldrb	r3, [r7, #11]
 8010a78:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a80:	e01d      	b.n	8010abe <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f003 0301 	and.w	r3, r3, #1
 8010a88:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8010a8a:	6a3b      	ldr	r3, [r7, #32]
 8010a8c:	f003 0301 	and.w	r3, r3, #1
 8010a90:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	085b      	lsrs	r3, r3, #1
 8010a96:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8010a98:	69fa      	ldr	r2, [r7, #28]
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	4053      	eors	r3, r2
 8010a9e:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d103      	bne.n	8010aae <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8010aa6:	68fa      	ldr	r2, [r7, #12]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4053      	eors	r3, r2
 8010aac:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8010aae:	6a3b      	ldr	r3, [r7, #32]
 8010ab0:	085b      	lsrs	r3, r3, #1
 8010ab2:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8010ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ab8:	3301      	adds	r3, #1
 8010aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ac2:	2b08      	cmp	r3, #8
 8010ac4:	d9dd      	bls.n	8010a82 <AnsoldoCrc+0x1a>
	}
	return (Crc);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	372c      	adds	r7, #44	; 0x2c
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b090      	sub	sp, #64	; 0x40
 8010ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ade:	2200      	movs	r2, #0
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	605a      	str	r2, [r3, #4]
 8010ae4:	609a      	str	r2, [r3, #8]
 8010ae6:	60da      	str	r2, [r3, #12]
 8010ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8010aea:	4bb2      	ldr	r3, [pc, #712]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aee:	4ab1      	ldr	r2, [pc, #708]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010af4:	6313      	str	r3, [r2, #48]	; 0x30
 8010af6:	4baf      	ldr	r3, [pc, #700]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8010b02:	4bac      	ldr	r3, [pc, #688]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b06:	4aab      	ldr	r2, [pc, #684]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b08:	f043 0320 	orr.w	r3, r3, #32
 8010b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8010b0e:	4ba9      	ldr	r3, [pc, #676]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b12:	f003 0320 	and.w	r3, r3, #32
 8010b16:	627b      	str	r3, [r7, #36]	; 0x24
 8010b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010b1a:	4ba6      	ldr	r3, [pc, #664]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b1e:	4aa5      	ldr	r2, [pc, #660]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b24:	6313      	str	r3, [r2, #48]	; 0x30
 8010b26:	4ba3      	ldr	r3, [pc, #652]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b2e:	623b      	str	r3, [r7, #32]
 8010b30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b32:	4ba0      	ldr	r3, [pc, #640]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b36:	4a9f      	ldr	r2, [pc, #636]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b38:	f043 0304 	orr.w	r3, r3, #4
 8010b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8010b3e:	4b9d      	ldr	r3, [pc, #628]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b42:	f003 0304 	and.w	r3, r3, #4
 8010b46:	61fb      	str	r3, [r7, #28]
 8010b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b4a:	4b9a      	ldr	r3, [pc, #616]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b4e:	4a99      	ldr	r2, [pc, #612]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b50:	f043 0301 	orr.w	r3, r3, #1
 8010b54:	6313      	str	r3, [r2, #48]	; 0x30
 8010b56:	4b97      	ldr	r3, [pc, #604]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b5a:	f003 0301 	and.w	r3, r3, #1
 8010b5e:	61bb      	str	r3, [r7, #24]
 8010b60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8010b62:	4b94      	ldr	r3, [pc, #592]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b66:	4a93      	ldr	r2, [pc, #588]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8010b6e:	4b91      	ldr	r3, [pc, #580]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b76:	617b      	str	r3, [r7, #20]
 8010b78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010b7a:	4b8e      	ldr	r3, [pc, #568]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b7e:	4a8d      	ldr	r2, [pc, #564]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b80:	f043 0310 	orr.w	r3, r3, #16
 8010b84:	6313      	str	r3, [r2, #48]	; 0x30
 8010b86:	4b8b      	ldr	r3, [pc, #556]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b8a:	f003 0310 	and.w	r3, r3, #16
 8010b8e:	613b      	str	r3, [r7, #16]
 8010b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b92:	4b88      	ldr	r3, [pc, #544]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b96:	4a87      	ldr	r2, [pc, #540]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010b98:	f043 0302 	orr.w	r3, r3, #2
 8010b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8010b9e:	4b85      	ldr	r3, [pc, #532]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ba2:	f003 0302 	and.w	r3, r3, #2
 8010ba6:	60fb      	str	r3, [r7, #12]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010baa:	4b82      	ldr	r3, [pc, #520]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bae:	4a81      	ldr	r2, [pc, #516]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010bb0:	f043 0308 	orr.w	r3, r3, #8
 8010bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8010bb6:	4b7f      	ldr	r3, [pc, #508]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bba:	f003 0308 	and.w	r3, r3, #8
 8010bbe:	60bb      	str	r3, [r7, #8]
 8010bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8010bc2:	4b7c      	ldr	r3, [pc, #496]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bc6:	4a7b      	ldr	r2, [pc, #492]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8010bce:	4b79      	ldr	r3, [pc, #484]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010bd6:	607b      	str	r3, [r7, #4]
 8010bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8010bda:	4b76      	ldr	r3, [pc, #472]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bde:	4a75      	ldr	r2, [pc, #468]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010be0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010be4:	6313      	str	r3, [r2, #48]	; 0x30
 8010be6:	4b73      	ldr	r3, [pc, #460]	; (8010db4 <MX_GPIO_Init+0x2e0>)
 8010be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010bee:	603b      	str	r3, [r7, #0]
 8010bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8010bf8:	486f      	ldr	r0, [pc, #444]	; (8010db8 <MX_GPIO_Init+0x2e4>)
 8010bfa:	f004 ffc5 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8010c04:	486d      	ldr	r0, [pc, #436]	; (8010dbc <MX_GPIO_Init+0x2e8>)
 8010c06:	f004 ffbf 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f240 7104 	movw	r1, #1796	; 0x704
 8010c10:	486b      	ldr	r0, [pc, #428]	; (8010dc0 <MX_GPIO_Init+0x2ec>)
 8010c12:	f004 ffb9 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8010c16:	2201      	movs	r2, #1
 8010c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010c1c:	4869      	ldr	r0, [pc, #420]	; (8010dc4 <MX_GPIO_Init+0x2f0>)
 8010c1e:	f004 ffb3 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8010c22:	2200      	movs	r2, #0
 8010c24:	f241 0104 	movw	r1, #4100	; 0x1004
 8010c28:	4867      	ldr	r0, [pc, #412]	; (8010dc8 <MX_GPIO_Init+0x2f4>)
 8010c2a:	f004 ffad 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8010c2e:	2201      	movs	r2, #1
 8010c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010c34:	4865      	ldr	r0, [pc, #404]	; (8010dcc <MX_GPIO_Init+0x2f8>)
 8010c36:	f004 ffa7 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	2108      	movs	r1, #8
 8010c3e:	4864      	ldr	r0, [pc, #400]	; (8010dd0 <MX_GPIO_Init+0x2fc>)
 8010c40:	f004 ffa2 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8010c44:	2201      	movs	r2, #1
 8010c46:	2160      	movs	r1, #96	; 0x60
 8010c48:	4861      	ldr	r0, [pc, #388]	; (8010dd0 <MX_GPIO_Init+0x2fc>)
 8010c4a:	f004 ff9d 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 8010c4e:	2200      	movs	r2, #0
 8010c50:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8010c54:	485f      	ldr	r0, [pc, #380]	; (8010dd4 <MX_GPIO_Init+0x300>)
 8010c56:	f004 ff97 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010c60:	485c      	ldr	r0, [pc, #368]	; (8010dd4 <MX_GPIO_Init+0x300>)
 8010c62:	f004 ff91 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8010c66:	2201      	movs	r2, #1
 8010c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010c6c:	4856      	ldr	r0, [pc, #344]	; (8010dc8 <MX_GPIO_Init+0x2f4>)
 8010c6e:	f004 ff8b 	bl	8015b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 8010c72:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8010c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010c78:	2301      	movs	r3, #1
 8010c7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c80:	2303      	movs	r3, #3
 8010c82:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8010c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010c88:	4619      	mov	r1, r3
 8010c8a:	484b      	ldr	r0, [pc, #300]	; (8010db8 <MX_GPIO_Init+0x2e4>)
 8010c8c:	f004 fdb8 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8010c90:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8010c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010c96:	2300      	movs	r3, #0
 8010c98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8010c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	4844      	ldr	r0, [pc, #272]	; (8010db8 <MX_GPIO_Init+0x2e4>)
 8010ca6:	f004 fdab 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8010caa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8010cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cb8:	2303      	movs	r3, #3
 8010cba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8010cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	483e      	ldr	r0, [pc, #248]	; (8010dbc <MX_GPIO_Init+0x2e8>)
 8010cc4:	f004 fd9c 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8010cc8:	2304      	movs	r3, #4
 8010cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 8010cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010cd8:	4619      	mov	r1, r3
 8010cda:	483c      	ldr	r0, [pc, #240]	; (8010dcc <MX_GPIO_Init+0x2f8>)
 8010cdc:	f004 fd90 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8010ce0:	f240 7304 	movw	r3, #1796	; 0x704
 8010ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cea:	2300      	movs	r3, #0
 8010cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cee:	2303      	movs	r3, #3
 8010cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8010cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	4831      	ldr	r0, [pc, #196]	; (8010dc0 <MX_GPIO_Init+0x2ec>)
 8010cfa:	f004 fd81 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8010cfe:	2303      	movs	r3, #3
 8010d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010d02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8010d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d10:	4619      	mov	r1, r3
 8010d12:	482d      	ldr	r0, [pc, #180]	; (8010dc8 <MX_GPIO_Init+0x2f4>)
 8010d14:	f004 fd74 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8010d18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d22:	2300      	movs	r3, #0
 8010d24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8010d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	4825      	ldr	r0, [pc, #148]	; (8010dc4 <MX_GPIO_Init+0x2f0>)
 8010d2e:	f004 fd67 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8010d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d40:	2303      	movs	r3, #3
 8010d42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8010d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d48:	4619      	mov	r1, r3
 8010d4a:	481e      	ldr	r0, [pc, #120]	; (8010dc4 <MX_GPIO_Init+0x2f0>)
 8010d4c:	f004 fd58 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8010d50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8010d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d56:	2300      	movs	r3, #0
 8010d58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d62:	4619      	mov	r1, r3
 8010d64:	481a      	ldr	r0, [pc, #104]	; (8010dd0 <MX_GPIO_Init+0x2fc>)
 8010d66:	f004 fd4b 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 8010d6a:	f241 4304 	movw	r3, #5124	; 0x1404
 8010d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010d70:	2301      	movs	r3, #1
 8010d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d74:	2300      	movs	r3, #0
 8010d76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d78:	2303      	movs	r3, #3
 8010d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d80:	4619      	mov	r1, r3
 8010d82:	4811      	ldr	r0, [pc, #68]	; (8010dc8 <MX_GPIO_Init+0x2f4>)
 8010d84:	f004 fd3c 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8010d88:	2308      	movs	r3, #8
 8010d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d90:	2300      	movs	r3, #0
 8010d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8010d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010d98:	4619      	mov	r1, r3
 8010d9a:	480b      	ldr	r0, [pc, #44]	; (8010dc8 <MX_GPIO_Init+0x2f4>)
 8010d9c:	f004 fd30 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8010da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010da6:	2301      	movs	r3, #1
 8010da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010daa:	2300      	movs	r3, #0
 8010dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010dae:	2300      	movs	r3, #0
 8010db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8010db2:	e011      	b.n	8010dd8 <MX_GPIO_Init+0x304>
 8010db4:	40023800 	.word	0x40023800
 8010db8:	40022000 	.word	0x40022000
 8010dbc:	40021400 	.word	0x40021400
 8010dc0:	40021c00 	.word	0x40021c00
 8010dc4:	40021000 	.word	0x40021000
 8010dc8:	40021800 	.word	0x40021800
 8010dcc:	40020800 	.word	0x40020800
 8010dd0:	40020c00 	.word	0x40020c00
 8010dd4:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8010dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ddc:	4619      	mov	r1, r3
 8010dde:	4836      	ldr	r0, [pc, #216]	; (8010eb8 <MX_GPIO_Init+0x3e4>)
 8010de0:	f004 fd0e 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8010de4:	2303      	movs	r3, #3
 8010de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010de8:	2302      	movs	r3, #2
 8010dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dec:	2300      	movs	r3, #0
 8010dee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010df0:	2303      	movs	r3, #3
 8010df2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8010df4:	2309      	movs	r3, #9
 8010df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	482f      	ldr	r0, [pc, #188]	; (8010ebc <MX_GPIO_Init+0x3e8>)
 8010e00:	f004 fcfe 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8010e04:	2368      	movs	r3, #104	; 0x68
 8010e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e10:	2303      	movs	r3, #3
 8010e12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e18:	4619      	mov	r1, r3
 8010e1a:	4828      	ldr	r0, [pc, #160]	; (8010ebc <MX_GPIO_Init+0x3e8>)
 8010e1c:	f004 fcf0 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8010e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010e26:	2300      	movs	r3, #0
 8010e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 8010e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e32:	4619      	mov	r1, r3
 8010e34:	4822      	ldr	r0, [pc, #136]	; (8010ec0 <MX_GPIO_Init+0x3ec>)
 8010e36:	f004 fce3 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 8010e3a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8010e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010e40:	2301      	movs	r3, #1
 8010e42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e44:	2300      	movs	r3, #0
 8010e46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8010e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e50:	4619      	mov	r1, r3
 8010e52:	481b      	ldr	r0, [pc, #108]	; (8010ec0 <MX_GPIO_Init+0x3ec>)
 8010e54:	f004 fcd4 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8010e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e62:	2300      	movs	r3, #0
 8010e64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e66:	2303      	movs	r3, #3
 8010e68:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 8010e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e6e:	4619      	mov	r1, r3
 8010e70:	4813      	ldr	r0, [pc, #76]	; (8010ec0 <MX_GPIO_Init+0x3ec>)
 8010e72:	f004 fcc5 	bl	8015800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8010e76:	2318      	movs	r3, #24
 8010e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8010e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e86:	4619      	mov	r1, r3
 8010e88:	480e      	ldr	r0, [pc, #56]	; (8010ec4 <MX_GPIO_Init+0x3f0>)
 8010e8a:	f004 fcb9 	bl	8015800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8010e8e:	2200      	movs	r2, #0
 8010e90:	2101      	movs	r1, #1
 8010e92:	2006      	movs	r0, #6
 8010e94:	f003 f989 	bl	80141aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8010e98:	2006      	movs	r0, #6
 8010e9a:	f003 f9a2 	bl	80141e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	2101      	movs	r1, #1
 8010ea2:	2007      	movs	r0, #7
 8010ea4:	f003 f981 	bl	80141aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8010ea8:	2007      	movs	r0, #7
 8010eaa:	f003 f99a 	bl	80141e2 <HAL_NVIC_EnableIRQ>

}
 8010eae:	bf00      	nop
 8010eb0:	3740      	adds	r7, #64	; 0x40
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	40020800 	.word	0x40020800
 8010ebc:	40020c00 	.word	0x40020c00
 8010ec0:	40022400 	.word	0x40022400
 8010ec4:	40022800 	.word	0x40022800

08010ec8 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8010ecc:	4b0a      	ldr	r3, [pc, #40]	; (8010ef8 <Feed_wdt+0x30>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fb fb07 	bl	800c4e4 <HAL_Elaps_Ticks>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010edc:	d309      	bcc.n	8010ef2 <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8010ede:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010ee2:	4806      	ldr	r0, [pc, #24]	; (8010efc <Feed_wdt+0x34>)
 8010ee4:	f004 fe69 	bl	8015bba <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8010ee8:	f002 f97e 	bl	80131e8 <HAL_GetTick>
 8010eec:	4603      	mov	r3, r0
 8010eee:	4a02      	ldr	r2, [pc, #8]	; (8010ef8 <Feed_wdt+0x30>)
 8010ef0:	6013      	str	r3, [r2, #0]
	}

}
 8010ef2:	bf00      	nop
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	20008fc8 	.word	0x20008fc8
 8010efc:	40022400 	.word	0x40022400

08010f00 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8010f04:	4b09      	ldr	r3, [pc, #36]	; (8010f2c <Blink_S2+0x2c>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7fb faeb 	bl	800c4e4 <HAL_Elaps_Ticks>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b64      	cmp	r3, #100	; 0x64
 8010f12:	d909      	bls.n	8010f28 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8010f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010f18:	4805      	ldr	r0, [pc, #20]	; (8010f30 <Blink_S2+0x30>)
 8010f1a:	f004 fe4e 	bl	8015bba <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 8010f1e:	f002 f963 	bl	80131e8 <HAL_GetTick>
 8010f22:	4603      	mov	r3, r0
 8010f24:	4a01      	ldr	r2, [pc, #4]	; (8010f2c <Blink_S2+0x2c>)
 8010f26:	6013      	str	r3, [r2, #0]
	}
}
 8010f28:	bf00      	nop
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	20008fcc 	.word	0x20008fcc
 8010f30:	40021c00 	.word	0x40021c00

08010f34 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010f38:	4b1b      	ldr	r3, [pc, #108]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f3a:	4a1c      	ldr	r2, [pc, #112]	; (8010fac <MX_I2C1_Init+0x78>)
 8010f3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8010f3e:	4b1a      	ldr	r3, [pc, #104]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f40:	4a1b      	ldr	r2, [pc, #108]	; (8010fb0 <MX_I2C1_Init+0x7c>)
 8010f42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010f44:	4b18      	ldr	r3, [pc, #96]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010f4a:	4b17      	ldr	r3, [pc, #92]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010f50:	4b15      	ldr	r3, [pc, #84]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f52:	2200      	movs	r2, #0
 8010f54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8010f56:	4b14      	ldr	r3, [pc, #80]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f58:	2200      	movs	r2, #0
 8010f5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010f5c:	4b12      	ldr	r3, [pc, #72]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f5e:	2200      	movs	r2, #0
 8010f60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010f62:	4b11      	ldr	r3, [pc, #68]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f64:	2200      	movs	r2, #0
 8010f66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010f68:	4b0f      	ldr	r3, [pc, #60]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8010f6e:	480e      	ldr	r0, [pc, #56]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f70:	f004 fe62 	bl	8015c38 <HAL_I2C_Init>
 8010f74:	4603      	mov	r3, r0
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d001      	beq.n	8010f7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8010f7a:	f000 fba9 	bl	80116d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010f7e:	2100      	movs	r1, #0
 8010f80:	4809      	ldr	r0, [pc, #36]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f82:	f005 fbb1 	bl	80166e8 <HAL_I2CEx_ConfigAnalogFilter>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d001      	beq.n	8010f90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8010f8c:	f000 fba0 	bl	80116d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8010f90:	2100      	movs	r1, #0
 8010f92:	4805      	ldr	r0, [pc, #20]	; (8010fa8 <MX_I2C1_Init+0x74>)
 8010f94:	f005 fbf3 	bl	801677e <HAL_I2CEx_ConfigDigitalFilter>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d001      	beq.n	8010fa2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8010f9e:	f000 fb97 	bl	80116d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8010fa2:	bf00      	nop
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20008fd0 	.word	0x20008fd0
 8010fac:	40005400 	.word	0x40005400
 8010fb0:	c0000e12 	.word	0xc0000e12

08010fb4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8010fb8:	4b1b      	ldr	r3, [pc, #108]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fba:	4a1c      	ldr	r2, [pc, #112]	; (801102c <MX_I2C2_Init+0x78>)
 8010fbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8010fbe:	4b1a      	ldr	r3, [pc, #104]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fc0:	4a1b      	ldr	r2, [pc, #108]	; (8011030 <MX_I2C2_Init+0x7c>)
 8010fc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8010fc4:	4b18      	ldr	r3, [pc, #96]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8010fca:	4b17      	ldr	r3, [pc, #92]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fcc:	2201      	movs	r2, #1
 8010fce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010fd0:	4b15      	ldr	r3, [pc, #84]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8010fd6:	4b14      	ldr	r3, [pc, #80]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010fdc:	4b12      	ldr	r3, [pc, #72]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fde:	2200      	movs	r2, #0
 8010fe0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010fe2:	4b11      	ldr	r3, [pc, #68]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010fe8:	4b0f      	ldr	r3, [pc, #60]	; (8011028 <MX_I2C2_Init+0x74>)
 8010fea:	2200      	movs	r2, #0
 8010fec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8010fee:	480e      	ldr	r0, [pc, #56]	; (8011028 <MX_I2C2_Init+0x74>)
 8010ff0:	f004 fe22 	bl	8015c38 <HAL_I2C_Init>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8010ffa:	f000 fb69 	bl	80116d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010ffe:	2100      	movs	r1, #0
 8011000:	4809      	ldr	r0, [pc, #36]	; (8011028 <MX_I2C2_Init+0x74>)
 8011002:	f005 fb71 	bl	80166e8 <HAL_I2CEx_ConfigAnalogFilter>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 801100c:	f000 fb60 	bl	80116d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8011010:	2100      	movs	r1, #0
 8011012:	4805      	ldr	r0, [pc, #20]	; (8011028 <MX_I2C2_Init+0x74>)
 8011014:	f005 fbb3 	bl	801677e <HAL_I2CEx_ConfigDigitalFilter>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d001      	beq.n	8011022 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 801101e:	f000 fb57 	bl	80116d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8011022:	bf00      	nop
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	20009024 	.word	0x20009024
 801102c:	40005800 	.word	0x40005800
 8011030:	c0000e12 	.word	0xc0000e12

08011034 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b0b0      	sub	sp, #192	; 0xc0
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801103c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011040:	2200      	movs	r2, #0
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	605a      	str	r2, [r3, #4]
 8011046:	609a      	str	r2, [r3, #8]
 8011048:	60da      	str	r2, [r3, #12]
 801104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801104c:	f107 031c 	add.w	r3, r7, #28
 8011050:	2290      	movs	r2, #144	; 0x90
 8011052:	2100      	movs	r1, #0
 8011054:	4618      	mov	r0, r3
 8011056:	f00e ffe9 	bl	802002c <memset>
  if(i2cHandle->Instance==I2C1)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	4a44      	ldr	r2, [pc, #272]	; (8011170 <HAL_I2C_MspInit+0x13c>)
 8011060:	4293      	cmp	r3, r2
 8011062:	d13e      	bne.n	80110e2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8011064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011068:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801106a:	2300      	movs	r3, #0
 801106c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011070:	f107 031c 	add.w	r3, r7, #28
 8011074:	4618      	mov	r0, r3
 8011076:	f006 f8c1 	bl	80171fc <HAL_RCCEx_PeriphCLKConfig>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d001      	beq.n	8011084 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8011080:	f000 fb26 	bl	80116d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011084:	4b3b      	ldr	r3, [pc, #236]	; (8011174 <HAL_I2C_MspInit+0x140>)
 8011086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011088:	4a3a      	ldr	r2, [pc, #232]	; (8011174 <HAL_I2C_MspInit+0x140>)
 801108a:	f043 0302 	orr.w	r3, r3, #2
 801108e:	6313      	str	r3, [r2, #48]	; 0x30
 8011090:	4b38      	ldr	r3, [pc, #224]	; (8011174 <HAL_I2C_MspInit+0x140>)
 8011092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011094:	f003 0302 	and.w	r3, r3, #2
 8011098:	61bb      	str	r3, [r7, #24]
 801109a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 801109c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80110a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80110a4:	2312      	movs	r3, #18
 80110a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110aa:	2300      	movs	r3, #0
 80110ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80110b0:	2303      	movs	r3, #3
 80110b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80110b6:	2304      	movs	r3, #4
 80110b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80110bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80110c0:	4619      	mov	r1, r3
 80110c2:	482d      	ldr	r0, [pc, #180]	; (8011178 <HAL_I2C_MspInit+0x144>)
 80110c4:	f004 fb9c 	bl	8015800 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80110c8:	4b2a      	ldr	r3, [pc, #168]	; (8011174 <HAL_I2C_MspInit+0x140>)
 80110ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110cc:	4a29      	ldr	r2, [pc, #164]	; (8011174 <HAL_I2C_MspInit+0x140>)
 80110ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80110d2:	6413      	str	r3, [r2, #64]	; 0x40
 80110d4:	4b27      	ldr	r3, [pc, #156]	; (8011174 <HAL_I2C_MspInit+0x140>)
 80110d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80110dc:	617b      	str	r3, [r7, #20]
 80110de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80110e0:	e041      	b.n	8011166 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	4a25      	ldr	r2, [pc, #148]	; (801117c <HAL_I2C_MspInit+0x148>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d13c      	bne.n	8011166 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80110ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80110f2:	2300      	movs	r3, #0
 80110f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80110f8:	f107 031c 	add.w	r3, r7, #28
 80110fc:	4618      	mov	r0, r3
 80110fe:	f006 f87d 	bl	80171fc <HAL_RCCEx_PeriphCLKConfig>
 8011102:	4603      	mov	r3, r0
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8011108:	f000 fae2 	bl	80116d0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801110c:	4b19      	ldr	r3, [pc, #100]	; (8011174 <HAL_I2C_MspInit+0x140>)
 801110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011110:	4a18      	ldr	r2, [pc, #96]	; (8011174 <HAL_I2C_MspInit+0x140>)
 8011112:	f043 0320 	orr.w	r3, r3, #32
 8011116:	6313      	str	r3, [r2, #48]	; 0x30
 8011118:	4b16      	ldr	r3, [pc, #88]	; (8011174 <HAL_I2C_MspInit+0x140>)
 801111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801111c:	f003 0320 	and.w	r3, r3, #32
 8011120:	613b      	str	r3, [r7, #16]
 8011122:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8011124:	2303      	movs	r3, #3
 8011126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801112a:	2312      	movs	r3, #18
 801112c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011130:	2300      	movs	r3, #0
 8011132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011136:	2303      	movs	r3, #3
 8011138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801113c:	2304      	movs	r3, #4
 801113e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011142:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011146:	4619      	mov	r1, r3
 8011148:	480d      	ldr	r0, [pc, #52]	; (8011180 <HAL_I2C_MspInit+0x14c>)
 801114a:	f004 fb59 	bl	8015800 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801114e:	4b09      	ldr	r3, [pc, #36]	; (8011174 <HAL_I2C_MspInit+0x140>)
 8011150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011152:	4a08      	ldr	r2, [pc, #32]	; (8011174 <HAL_I2C_MspInit+0x140>)
 8011154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011158:	6413      	str	r3, [r2, #64]	; 0x40
 801115a:	4b06      	ldr	r3, [pc, #24]	; (8011174 <HAL_I2C_MspInit+0x140>)
 801115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011162:	60fb      	str	r3, [r7, #12]
 8011164:	68fb      	ldr	r3, [r7, #12]
}
 8011166:	bf00      	nop
 8011168:	37c0      	adds	r7, #192	; 0xc0
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	40005400 	.word	0x40005400
 8011174:	40023800 	.word	0x40023800
 8011178:	40020400 	.word	0x40020400
 801117c:	40005800 	.word	0x40005800
 8011180:	40021400 	.word	0x40021400

08011184 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011188:	4b0b      	ldr	r3, [pc, #44]	; (80111b8 <MX_IWDG_Init+0x34>)
 801118a:	4a0c      	ldr	r2, [pc, #48]	; (80111bc <MX_IWDG_Init+0x38>)
 801118c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 801118e:	4b0a      	ldr	r3, [pc, #40]	; (80111b8 <MX_IWDG_Init+0x34>)
 8011190:	2203      	movs	r2, #3
 8011192:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8011194:	4b08      	ldr	r3, [pc, #32]	; (80111b8 <MX_IWDG_Init+0x34>)
 8011196:	f640 72ff 	movw	r2, #4095	; 0xfff
 801119a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 801119c:	4b06      	ldr	r3, [pc, #24]	; (80111b8 <MX_IWDG_Init+0x34>)
 801119e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80111a2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80111a4:	4804      	ldr	r0, [pc, #16]	; (80111b8 <MX_IWDG_Init+0x34>)
 80111a6:	f005 fb36 	bl	8016816 <HAL_IWDG_Init>
 80111aa:	4603      	mov	r3, r0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d001      	beq.n	80111b4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80111b0:	f000 fa8e 	bl	80116d0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80111b4:	bf00      	nop
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	20009078 	.word	0x20009078
 80111bc:	40003000 	.word	0x40003000

080111c0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80111c0:	b480      	push	{r7}
 80111c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80111c4:	f3bf 8f4f 	dsb	sy
}
 80111c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80111ca:	f3bf 8f6f 	isb	sy
}
 80111ce:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80111d0:	4b0d      	ldr	r3, [pc, #52]	; (8011208 <SCB_EnableICache+0x48>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80111d8:	f3bf 8f4f 	dsb	sy
}
 80111dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80111de:	f3bf 8f6f 	isb	sy
}
 80111e2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80111e4:	4b08      	ldr	r3, [pc, #32]	; (8011208 <SCB_EnableICache+0x48>)
 80111e6:	695b      	ldr	r3, [r3, #20]
 80111e8:	4a07      	ldr	r2, [pc, #28]	; (8011208 <SCB_EnableICache+0x48>)
 80111ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80111ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80111f0:	f3bf 8f4f 	dsb	sy
}
 80111f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80111f6:	f3bf 8f6f 	isb	sy
}
 80111fa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80111fc:	bf00      	nop
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	e000ed00 	.word	0xe000ed00

0801120c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 801120c:	b480      	push	{r7}
 801120e:	b085      	sub	sp, #20
 8011210:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8011212:	4b1f      	ldr	r3, [pc, #124]	; (8011290 <SCB_EnableDCache+0x84>)
 8011214:	2200      	movs	r2, #0
 8011216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801121a:	f3bf 8f4f 	dsb	sy
}
 801121e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8011220:	4b1b      	ldr	r3, [pc, #108]	; (8011290 <SCB_EnableDCache+0x84>)
 8011222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011226:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	0b5b      	lsrs	r3, r3, #13
 801122c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011230:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	08db      	lsrs	r3, r3, #3
 8011236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801123a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	015a      	lsls	r2, r3, #5
 8011240:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011244:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8011246:	68ba      	ldr	r2, [r7, #8]
 8011248:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801124a:	4911      	ldr	r1, [pc, #68]	; (8011290 <SCB_EnableDCache+0x84>)
 801124c:	4313      	orrs	r3, r2
 801124e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	1e5a      	subs	r2, r3, #1
 8011256:	60ba      	str	r2, [r7, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1ef      	bne.n	801123c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	1e5a      	subs	r2, r3, #1
 8011260:	60fa      	str	r2, [r7, #12]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d1e5      	bne.n	8011232 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8011266:	f3bf 8f4f 	dsb	sy
}
 801126a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801126c:	4b08      	ldr	r3, [pc, #32]	; (8011290 <SCB_EnableDCache+0x84>)
 801126e:	695b      	ldr	r3, [r3, #20]
 8011270:	4a07      	ldr	r2, [pc, #28]	; (8011290 <SCB_EnableDCache+0x84>)
 8011272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011276:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8011278:	f3bf 8f4f 	dsb	sy
}
 801127c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801127e:	f3bf 8f6f 	isb	sy
}
 8011282:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8011284:	bf00      	nop
 8011286:	3714      	adds	r7, #20
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr
 8011290:	e000ed00 	.word	0xe000ed00

08011294 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b086      	sub	sp, #24
 8011298:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 801129a:	2300      	movs	r3, #0
 801129c:	613b      	str	r3, [r7, #16]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 801129e:	f000 f9eb 	bl	8011678 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80112a2:	f7ff ff8d 	bl	80111c0 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80112a6:	f7ff ffb1 	bl	801120c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80112aa:	f001 ff3d 	bl	8013128 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80112ae:	f000 f91d 	bl	80114ec <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 80112b2:	f7f7 ffad 	bl	8009210 <reset_cause_get>
 80112b6:	4603      	mov	r3, r0
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7f7 fffb 	bl	80092b4 <reset_cause_get_name>
 80112be:	6138      	str	r0, [r7, #16]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 80112c0:	f7ff fc08 	bl	8010ad4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80112c4:	f001 f956 	bl	8012574 <MX_USART1_UART_Init>
		Get_Slot();
 80112c8:	f7ef fc00 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 80112cc:	f7fb fd40 	bl	800cd50 <MX_CAN2_Init>
	MX_CAN3_Init();
 80112d0:	f7fb fdb6 	bl	800ce40 <MX_CAN3_Init>
	MX_I2C1_Init();
 80112d4:	f7ff fe2e 	bl	8010f34 <MX_I2C1_Init>
	MX_I2C2_Init();
 80112d8:	f7ff fe6c 	bl	8010fb4 <MX_I2C2_Init>
	MX_SPI1_Init();
 80112dc:	f000 fa5c 	bl	8011798 <MX_SPI1_Init>
	Get_Config();
 80112e0:	f000 fdc6 	bl	8011e70 <Get_Config>
	MX_RNG_Init();
 80112e4:	f000 f9fa 	bl	80116dc <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80112e8:	2208      	movs	r2, #8
 80112ea:	2100      	movs	r1, #0
 80112ec:	486d      	ldr	r0, [pc, #436]	; (80114a4 <main+0x210>)
 80112ee:	f00e fe9d 	bl	802002c <memset>
	HAL_Delay(250);
 80112f2:	20fa      	movs	r0, #250	; 0xfa
 80112f4:	f001 ff84 	bl	8013200 <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 80112f8:	486b      	ldr	r0, [pc, #428]	; (80114a8 <main+0x214>)
 80112fa:	f00e ff7f 	bl	80201fc <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 80112fe:	486b      	ldr	r0, [pc, #428]	; (80114ac <main+0x218>)
 8011300:	f00f f818 	bl	8020334 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8011304:	6939      	ldr	r1, [r7, #16]
 8011306:	486a      	ldr	r0, [pc, #424]	; (80114b0 <main+0x21c>)
 8011308:	f00e ff78 	bl	80201fc <iprintf>
	Get_Build_Details();
 801130c:	f000 f958 	bl	80115c0 <Get_Build_Details>
	switch(EI_data.ProtocolType)
 8011310:	4b68      	ldr	r3, [pc, #416]	; (80114b4 <main+0x220>)
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	3b01      	subs	r3, #1
 8011316:	2b03      	cmp	r3, #3
 8011318:	d85f      	bhi.n	80113da <main+0x146>
 801131a:	a201      	add	r2, pc, #4	; (adr r2, 8011320 <main+0x8c>)
 801131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011320:	08011331 	.word	0x08011331
 8011324:	08011383 	.word	0x08011383
 8011328:	080113ab 	.word	0x080113ab
 801132c:	08011409 	.word	0x08011409
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 8011330:	4861      	ldr	r0, [pc, #388]	; (80114b8 <main+0x224>)
 8011332:	f00e ffff 	bl	8020334 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8011336:	4861      	ldr	r0, [pc, #388]	; (80114bc <main+0x228>)
 8011338:	f00e fffc 	bl	8020334 <puts>
		MX_LWIP_Init();
 801133c:	f009 f87e 	bl	801a43c <MX_LWIP_Init>
		udpServer_init();
 8011340:	f7fb f8e0 	bl	800c504 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8011344:	485e      	ldr	r0, [pc, #376]	; (80114c0 <main+0x22c>)
 8011346:	f00e fff5 	bl	8020334 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort == 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 801134a:	4b5a      	ldr	r3, [pc, #360]	; (80114b4 <main+0x220>)
 801134c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011350:	2b01      	cmp	r3, #1
 8011352:	d111      	bne.n	8011378 <main+0xe4>
 8011354:	4b57      	ldr	r3, [pc, #348]	; (80114b4 <main+0x220>)
 8011356:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00c      	beq.n	8011378 <main+0xe4>
		{
			printf("Initializing UART with Baudrate:%lu\n",EI_data.Hitachi_st.BaudRate);
 801135e:	4b55      	ldr	r3, [pc, #340]	; (80114b4 <main+0x220>)
 8011360:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011364:	4619      	mov	r1, r3
 8011366:	4857      	ldr	r0, [pc, #348]	; (80114c4 <main+0x230>)
 8011368:	f00e ff48 	bl	80201fc <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 801136c:	4b51      	ldr	r3, [pc, #324]	; (80114b4 <main+0x220>)
 801136e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011372:	4618      	mov	r0, r3
 8011374:	f001 faac 	bl	80128d0 <UART4_Init>
		}
		print_self_Details();
 8011378:	f7f7 fa3a 	bl	80087f0 <print_self_Details>
		Update_HitachiCommands();
 801137c:	f7ef fa92 	bl	80008a4 <Update_HitachiCommands>
		break;
 8011380:	e043      	b.n	801140a <main+0x176>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8011382:	4851      	ldr	r0, [pc, #324]	; (80114c8 <main+0x234>)
 8011384:	f00e ffd6 	bl	8020334 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8011388:	484c      	ldr	r0, [pc, #304]	; (80114bc <main+0x228>)
 801138a:	f00e ffd3 	bl	8020334 <puts>
		MX_LWIP_Init();
 801138e:	f009 f855 	bl	801a43c <MX_LWIP_Init>
		udpServer_init();
 8011392:	f7fb f8b7 	bl	800c504 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8011396:	484a      	ldr	r0, [pc, #296]	; (80114c0 <main+0x22c>)
 8011398:	f00e ffcc 	bl	8020334 <puts>
		print_self_DetailsSiemens();
 801139c:	f7fa ff8e 	bl	800c2bc <print_self_DetailsSiemens>
		Update_SiemensCommands();
 80113a0:	f7fa f93c 	bl	800b61c <Update_SiemensCommands>
		UpdateSIGNALSNames();
 80113a4:	f7fa faac 	bl	800b900 <UpdateSIGNALSNames>
		break;
 80113a8:	e02f      	b.n	801140a <main+0x176>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 80113aa:	4848      	ldr	r0, [pc, #288]	; (80114cc <main+0x238>)
 80113ac:	f00e ffc2 	bl	8020334 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 80113b0:	4b40      	ldr	r3, [pc, #256]	; (80114b4 <main+0x220>)
 80113b2:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d006      	beq.n	80113c8 <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 80113ba:	4b3e      	ldr	r3, [pc, #248]	; (80114b4 <main+0x220>)
 80113bc:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80113c0:	4618      	mov	r0, r3
 80113c2:	f001 fa85 	bl	80128d0 <UART4_Init>
 80113c6:	e003      	b.n	80113d0 <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 80113c8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80113cc:	f001 fa80 	bl	80128d0 <UART4_Init>
		}
		Update_MedhaCommands();
 80113d0:	f7f9 fbfe 	bl	800abd0 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 80113d4:	f7f9 f9bc 	bl	800a750 <Print_Medha_Self_Details>
		break;
 80113d8:	e017      	b.n	801140a <main+0x176>

	case KYOSAN:
		break;

	default:
		printf("Please Select Protocol Type\n");
 80113da:	483d      	ldr	r0, [pc, #244]	; (80114d0 <main+0x23c>)
 80113dc:	f00e ffaa 	bl	8020334 <puts>
		UART4_Init(115200);
 80113e0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80113e4:	f001 fa74 	bl	80128d0 <UART4_Init>




		while(1){
			while(Com_DataReady(3))
 80113e8:	e007      	b.n	80113fa <main+0x166>
			{
				printf("%02X ",Com_Get_Byte(3));
 80113ea:	2003      	movs	r0, #3
 80113ec:	f001 fbd4 	bl	8012b98 <Com_Get_Byte>
 80113f0:	4603      	mov	r3, r0
 80113f2:	4619      	mov	r1, r3
 80113f4:	4837      	ldr	r0, [pc, #220]	; (80114d4 <main+0x240>)
 80113f6:	f00e ff01 	bl	80201fc <iprintf>
			while(Com_DataReady(3))
 80113fa:	2003      	movs	r0, #3
 80113fc:	f001 fb8c 	bl	8012b18 <Com_DataReady>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	d1f1      	bne.n	80113ea <main+0x156>
 8011406:	e7f8      	b.n	80113fa <main+0x166>
		break;
 8011408:	bf00      	nop
			}
		}
	}


	printf("Initialization Success\n");
 801140a:	4833      	ldr	r0, [pc, #204]	; (80114d8 <main+0x244>)
 801140c:	f00e ff92 	bl	8020334 <puts>
	//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 8011410:	f7ff feb8 	bl	8011184 <MX_IWDG_Init>
	//udpClient_connect();
	uint8_t Data[10] = {0x24,0x32,0x30,0x30};
 8011414:	4a31      	ldr	r2, [pc, #196]	; (80114dc <main+0x248>)
 8011416:	1d3b      	adds	r3, r7, #4
 8011418:	e892 0003 	ldmia.w	r2, {r0, r1}
 801141c:	6018      	str	r0, [r3, #0]
 801141e:	3304      	adds	r3, #4
 8011420:	7019      	strb	r1, [r3, #0]
 8011422:	f107 0309 	add.w	r3, r7, #9
 8011426:	2200      	movs	r2, #0
 8011428:	601a      	str	r2, [r3, #0]
 801142a:	711a      	strb	r2, [r3, #4]
	uint32_t CLK = 0;
 801142c:	2300      	movs	r3, #0
 801142e:	617b      	str	r3, [r7, #20]
	ip_addr_t SendIP;

	IP_ADDR4(&SendIP, 192, 168, 12, 143);
 8011430:	4b2b      	ldr	r3, [pc, #172]	; (80114e0 <main+0x24c>)
 8011432:	603b      	str	r3, [r7, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8011434:	4b1f      	ldr	r3, [pc, #124]	; (80114b4 <main+0x220>)
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	2b03      	cmp	r3, #3
 801143a:	d01f      	beq.n	801147c <main+0x1e8>
 801143c:	2b03      	cmp	r3, #3
 801143e:	dc2b      	bgt.n	8011498 <main+0x204>
 8011440:	2b01      	cmp	r3, #1
 8011442:	d002      	beq.n	801144a <main+0x1b6>
 8011444:	2b02      	cmp	r3, #2
 8011446:	d003      	beq.n	8011450 <main+0x1bc>
 8011448:	e026      	b.n	8011498 <main+0x204>
		{
		case HITACHI:
			Process_HitachiEI();
 801144a:	f7f7 fea1 	bl	8009190 <Process_HitachiEI>
			break;
 801144e:	e027      	b.n	80114a0 <main+0x20c>

		case SIEMENS:
			while(1)
			{
				if(HAL_Elaps_Ticks(CLK) > TWO_SEC)
 8011450:	6978      	ldr	r0, [r7, #20]
 8011452:	f7fb f847 	bl	800c4e4 <HAL_Elaps_Ticks>
 8011456:	4603      	mov	r3, r0
 8011458:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801145c:	d908      	bls.n	8011470 <main+0x1dc>
				{

					udpClient_send(Data,4,SendIP);
 801145e:	1d3b      	adds	r3, r7, #4
 8011460:	683a      	ldr	r2, [r7, #0]
 8011462:	2104      	movs	r1, #4
 8011464:	4618      	mov	r0, r3
 8011466:	f7fb fbb5 	bl	800cbd4 <udpClient_send>
					CLK = HAL_GetTick();
 801146a:	f001 febd 	bl	80131e8 <HAL_GetTick>
 801146e:	6178      	str	r0, [r7, #20]
				}

				MX_LWIP_Process();
 8011470:	f009 f9a8 	bl	801a7c4 <MX_LWIP_Process>
			HAL_IWDG_Refresh(&hiwdg);
 8011474:	481b      	ldr	r0, [pc, #108]	; (80114e4 <main+0x250>)
 8011476:	f005 fa1d 	bl	80168b4 <HAL_IWDG_Refresh>
				if(HAL_Elaps_Ticks(CLK) > TWO_SEC)
 801147a:	e7e9      	b.n	8011450 <main+0x1bc>
//			Process_SiemensEI();
			break;

		case MEDHA:

			printf("\nCRC1:0x%08lx\n",GetCRC32(0, Data, 4));
 801147c:	1d3b      	adds	r3, r7, #4
 801147e:	2204      	movs	r2, #4
 8011480:	4619      	mov	r1, r3
 8011482:	2000      	movs	r0, #0
 8011484:	f7f9 fc64 	bl	800ad50 <GetCRC32>
 8011488:	4603      	mov	r3, r0
 801148a:	4619      	mov	r1, r3
 801148c:	4816      	ldr	r0, [pc, #88]	; (80114e8 <main+0x254>)
 801148e:	f00e feb5 	bl	80201fc <iprintf>




			Process_Medha_EI();
 8011492:	f7f7 ff5f 	bl	8009354 <Process_Medha_EI>
			break;
 8011496:	e003      	b.n	80114a0 <main+0x20c>

		default:
			printf("Please Select Protocol Type\n");
 8011498:	480d      	ldr	r0, [pc, #52]	; (80114d0 <main+0x23c>)
 801149a:	f00e ff4b 	bl	8020334 <puts>
			while(1);
 801149e:	e7fe      	b.n	801149e <main+0x20a>
		switch(EI_data.ProtocolType)
 80114a0:	e7c8      	b.n	8011434 <main+0x1a0>
 80114a2:	bf00      	nop
 80114a4:	2000195c 	.word	0x2000195c
 80114a8:	08024a3c 	.word	0x08024a3c
 80114ac:	08024a48 	.word	0x08024a48
 80114b0:	08024a98 	.word	0x08024a98
 80114b4:	20000304 	.word	0x20000304
 80114b8:	08024ab4 	.word	0x08024ab4
 80114bc:	08024ad4 	.word	0x08024ad4
 80114c0:	08024afc 	.word	0x08024afc
 80114c4:	08024b18 	.word	0x08024b18
 80114c8:	08024b40 	.word	0x08024b40
 80114cc:	08024b60 	.word	0x08024b60
 80114d0:	08024b7c 	.word	0x08024b7c
 80114d4:	08024b98 	.word	0x08024b98
 80114d8:	08024ba0 	.word	0x08024ba0
 80114dc:	08024bc8 	.word	0x08024bc8
 80114e0:	8f0ca8c0 	.word	0x8f0ca8c0
 80114e4:	20009078 	.word	0x20009078
 80114e8:	08024bb8 	.word	0x08024bb8

080114ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b094      	sub	sp, #80	; 0x50
 80114f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80114f2:	f107 031c 	add.w	r3, r7, #28
 80114f6:	2234      	movs	r2, #52	; 0x34
 80114f8:	2100      	movs	r1, #0
 80114fa:	4618      	mov	r0, r3
 80114fc:	f00e fd96 	bl	802002c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011500:	f107 0308 	add.w	r3, r7, #8
 8011504:	2200      	movs	r2, #0
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	605a      	str	r2, [r3, #4]
 801150a:	609a      	str	r2, [r3, #8]
 801150c:	60da      	str	r2, [r3, #12]
 801150e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8011510:	4b29      	ldr	r3, [pc, #164]	; (80115b8 <SystemClock_Config+0xcc>)
 8011512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011514:	4a28      	ldr	r2, [pc, #160]	; (80115b8 <SystemClock_Config+0xcc>)
 8011516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801151a:	6413      	str	r3, [r2, #64]	; 0x40
 801151c:	4b26      	ldr	r3, [pc, #152]	; (80115b8 <SystemClock_Config+0xcc>)
 801151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011524:	607b      	str	r3, [r7, #4]
 8011526:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011528:	4b24      	ldr	r3, [pc, #144]	; (80115bc <SystemClock_Config+0xd0>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	4a23      	ldr	r2, [pc, #140]	; (80115bc <SystemClock_Config+0xd0>)
 801152e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011532:	6013      	str	r3, [r2, #0]
 8011534:	4b21      	ldr	r3, [pc, #132]	; (80115bc <SystemClock_Config+0xd0>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801153c:	603b      	str	r3, [r7, #0]
 801153e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8011540:	2309      	movs	r3, #9
 8011542:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011548:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801154a:	2301      	movs	r3, #1
 801154c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801154e:	2302      	movs	r3, #2
 8011550:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011556:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8011558:	2306      	movs	r3, #6
 801155a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 801155c:	23b4      	movs	r3, #180	; 0xb4
 801155e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011560:	2302      	movs	r3, #2
 8011562:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8011564:	2308      	movs	r3, #8
 8011566:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8011568:	2302      	movs	r3, #2
 801156a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801156c:	f107 031c 	add.w	r3, r7, #28
 8011570:	4618      	mov	r0, r3
 8011572:	f005 f9af 	bl	80168d4 <HAL_RCC_OscConfig>
 8011576:	4603      	mov	r3, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	d001      	beq.n	8011580 <SystemClock_Config+0x94>
	{
		Error_Handler();
 801157c:	f000 f8a8 	bl	80116d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011580:	230f      	movs	r3, #15
 8011582:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011584:	2302      	movs	r3, #2
 8011586:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011588:	2300      	movs	r3, #0
 801158a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801158c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011590:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8011592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011596:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8011598:	f107 0308 	add.w	r3, r7, #8
 801159c:	2105      	movs	r1, #5
 801159e:	4618      	mov	r0, r3
 80115a0:	f005 fc46 	bl	8016e30 <HAL_RCC_ClockConfig>
 80115a4:	4603      	mov	r3, r0
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d001      	beq.n	80115ae <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80115aa:	f000 f891 	bl	80116d0 <Error_Handler>
	}
}
 80115ae:	bf00      	nop
 80115b0:	3750      	adds	r7, #80	; 0x50
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	40023800 	.word	0x40023800
 80115bc:	40007000 	.word	0x40007000

080115c0 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b08e      	sub	sp, #56	; 0x38
 80115c4:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 80115c6:	2300      	movs	r3, #0
 80115c8:	607b      	str	r3, [r7, #4]
 80115ca:	f107 0308 	add.w	r3, r7, #8
 80115ce:	222e      	movs	r2, #46	; 0x2e
 80115d0:	2100      	movs	r1, #0
 80115d2:	4618      	mov	r0, r3
 80115d4:	f00e fd2a 	bl	802002c <memset>
	printf("\n_____________________________________________\n");
 80115d8:	481d      	ldr	r0, [pc, #116]	; (8011650 <Get_Build_Details+0x90>)
 80115da:	f00e feab 	bl	8020334 <puts>
	printf("Build Date:%s\n",__DATE__);
 80115de:	491d      	ldr	r1, [pc, #116]	; (8011654 <Get_Build_Details+0x94>)
 80115e0:	481d      	ldr	r0, [pc, #116]	; (8011658 <Get_Build_Details+0x98>)
 80115e2:	f00e fe0b 	bl	80201fc <iprintf>
	printf("Build Time:%s\n",__TIME__);
 80115e6:	491d      	ldr	r1, [pc, #116]	; (801165c <Get_Build_Details+0x9c>)
 80115e8:	481d      	ldr	r0, [pc, #116]	; (8011660 <Get_Build_Details+0xa0>)
 80115ea:	f00e fe07 	bl	80201fc <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 80115ee:	1d3b      	adds	r3, r7, #4
 80115f0:	4a18      	ldr	r2, [pc, #96]	; (8011654 <Get_Build_Details+0x94>)
 80115f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80115f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 80115f8:	1d3b      	adds	r3, r7, #4
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7ee fe2a 	bl	8000254 <strlen>
 8011600:	4603      	mov	r3, r0
 8011602:	461a      	mov	r2, r3
 8011604:	1d3b      	adds	r3, r7, #4
 8011606:	4413      	add	r3, r2
 8011608:	4914      	ldr	r1, [pc, #80]	; (801165c <Get_Build_Details+0x9c>)
 801160a:	461a      	mov	r2, r3
 801160c:	460b      	mov	r3, r1
 801160e:	cb03      	ldmia	r3!, {r0, r1}
 8011610:	6010      	str	r0, [r2, #0]
 8011612:	6051      	str	r1, [r2, #4]
 8011614:	781b      	ldrb	r3, [r3, #0]
 8011616:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8011618:	1d3b      	adds	r3, r7, #4
 801161a:	4618      	mov	r0, r3
 801161c:	f7ee fe1a 	bl	8000254 <strlen>
 8011620:	4603      	mov	r3, r0
 8011622:	b21a      	sxth	r2, r3
 8011624:	1d3b      	adds	r3, r7, #4
 8011626:	4619      	mov	r1, r3
 8011628:	2000      	movs	r0, #0
 801162a:	f7ff f8ff 	bl	801082c <GetCRC16>
 801162e:	4603      	mov	r3, r0
 8011630:	461a      	mov	r2, r3
 8011632:	4b0c      	ldr	r3, [pc, #48]	; (8011664 <Get_Build_Details+0xa4>)
 8011634:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8011636:	4a0c      	ldr	r2, [pc, #48]	; (8011668 <Get_Build_Details+0xa8>)
 8011638:	490c      	ldr	r1, [pc, #48]	; (801166c <Get_Build_Details+0xac>)
 801163a:	480d      	ldr	r0, [pc, #52]	; (8011670 <Get_Build_Details+0xb0>)
 801163c:	f00e fdde 	bl	80201fc <iprintf>
	printf("_____________________________________________\n");
 8011640:	480c      	ldr	r0, [pc, #48]	; (8011674 <Get_Build_Details+0xb4>)
 8011642:	f00e fe77 	bl	8020334 <puts>

}
 8011646:	bf00      	nop
 8011648:	3738      	adds	r7, #56	; 0x38
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	08024bd4 	.word	0x08024bd4
 8011654:	08024c04 	.word	0x08024c04
 8011658:	08024c10 	.word	0x08024c10
 801165c:	08024c20 	.word	0x08024c20
 8011660:	08024c2c 	.word	0x08024c2c
 8011664:	200090ac 	.word	0x200090ac
 8011668:	08024c3c 	.word	0x08024c3c
 801166c:	08024c44 	.word	0x08024c44
 8011670:	08024c5c 	.word	0x08024c5c
 8011674:	08024c78 	.word	0x08024c78

08011678 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801167e:	463b      	mov	r3, r7
 8011680:	2200      	movs	r2, #0
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	605a      	str	r2, [r3, #4]
 8011686:	609a      	str	r2, [r3, #8]
 8011688:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 801168a:	f002 fdc5 	bl	8014218 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801168e:	2301      	movs	r3, #1
 8011690:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8011692:	2300      	movs	r3, #0
 8011694:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8011696:	2300      	movs	r3, #0
 8011698:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 801169a:	231f      	movs	r3, #31
 801169c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 801169e:	2387      	movs	r3, #135	; 0x87
 80116a0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80116a2:	2300      	movs	r3, #0
 80116a4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80116a6:	2300      	movs	r3, #0
 80116a8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80116aa:	2301      	movs	r3, #1
 80116ac:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80116ae:	2301      	movs	r3, #1
 80116b0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80116b2:	2300      	movs	r3, #0
 80116b4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80116b6:	2300      	movs	r3, #0
 80116b8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80116ba:	463b      	mov	r3, r7
 80116bc:	4618      	mov	r0, r3
 80116be:	f002 fde3 	bl	8014288 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80116c2:	2004      	movs	r0, #4
 80116c4:	f002 fdc0 	bl	8014248 <HAL_MPU_Enable>

}
 80116c8:	bf00      	nop
 80116ca:	3710      	adds	r7, #16
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80116d0:	b480      	push	{r7}
 80116d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80116d4:	b672      	cpsid	i
}
 80116d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80116d8:	e7fe      	b.n	80116d8 <Error_Handler+0x8>
	...

080116dc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80116e0:	4b06      	ldr	r3, [pc, #24]	; (80116fc <MX_RNG_Init+0x20>)
 80116e2:	4a07      	ldr	r2, [pc, #28]	; (8011700 <MX_RNG_Init+0x24>)
 80116e4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80116e6:	4805      	ldr	r0, [pc, #20]	; (80116fc <MX_RNG_Init+0x20>)
 80116e8:	f006 f9b0 	bl	8017a4c <HAL_RNG_Init>
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d001      	beq.n	80116f6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80116f2:	f7ff ffed 	bl	80116d0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80116f6:	bf00      	nop
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	20009088 	.word	0x20009088
 8011700:	50060800 	.word	0x50060800

08011704 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b0a8      	sub	sp, #160	; 0xa0
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801170c:	f107 0310 	add.w	r3, r7, #16
 8011710:	2290      	movs	r2, #144	; 0x90
 8011712:	2100      	movs	r1, #0
 8011714:	4618      	mov	r0, r3
 8011716:	f00e fc89 	bl	802002c <memset>
  if(rngHandle->Instance==RNG)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4a11      	ldr	r2, [pc, #68]	; (8011764 <HAL_RNG_MspInit+0x60>)
 8011720:	4293      	cmp	r3, r2
 8011722:	d11b      	bne.n	801175c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011724:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011728:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801172a:	2300      	movs	r3, #0
 801172c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011730:	f107 0310 	add.w	r3, r7, #16
 8011734:	4618      	mov	r0, r3
 8011736:	f005 fd61 	bl	80171fc <HAL_RCCEx_PeriphCLKConfig>
 801173a:	4603      	mov	r3, r0
 801173c:	2b00      	cmp	r3, #0
 801173e:	d001      	beq.n	8011744 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8011740:	f7ff ffc6 	bl	80116d0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8011744:	4b08      	ldr	r3, [pc, #32]	; (8011768 <HAL_RNG_MspInit+0x64>)
 8011746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011748:	4a07      	ldr	r2, [pc, #28]	; (8011768 <HAL_RNG_MspInit+0x64>)
 801174a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801174e:	6353      	str	r3, [r2, #52]	; 0x34
 8011750:	4b05      	ldr	r3, [pc, #20]	; (8011768 <HAL_RNG_MspInit+0x64>)
 8011752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011758:	60fb      	str	r3, [r7, #12]
 801175a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 801175c:	bf00      	nop
 801175e:	37a0      	adds	r7, #160	; 0xa0
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}
 8011764:	50060800 	.word	0x50060800
 8011768:	40023800 	.word	0x40023800

0801176c <__NVIC_SystemReset>:
{
 801176c:	b480      	push	{r7}
 801176e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011770:	f3bf 8f4f 	dsb	sy
}
 8011774:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8011776:	4b06      	ldr	r3, [pc, #24]	; (8011790 <__NVIC_SystemReset+0x24>)
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801177e:	4904      	ldr	r1, [pc, #16]	; (8011790 <__NVIC_SystemReset+0x24>)
 8011780:	4b04      	ldr	r3, [pc, #16]	; (8011794 <__NVIC_SystemReset+0x28>)
 8011782:	4313      	orrs	r3, r2
 8011784:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011786:	f3bf 8f4f 	dsb	sy
}
 801178a:	bf00      	nop
    __NOP();
 801178c:	bf00      	nop
 801178e:	e7fd      	b.n	801178c <__NVIC_SystemReset+0x20>
 8011790:	e000ed00 	.word	0xe000ed00
 8011794:	05fa0004 	.word	0x05fa0004

08011798 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801179c:	4b1b      	ldr	r3, [pc, #108]	; (801180c <MX_SPI1_Init+0x74>)
 801179e:	4a1c      	ldr	r2, [pc, #112]	; (8011810 <MX_SPI1_Init+0x78>)
 80117a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80117a2:	4b1a      	ldr	r3, [pc, #104]	; (801180c <MX_SPI1_Init+0x74>)
 80117a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80117a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80117aa:	4b18      	ldr	r3, [pc, #96]	; (801180c <MX_SPI1_Init+0x74>)
 80117ac:	2200      	movs	r2, #0
 80117ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80117b0:	4b16      	ldr	r3, [pc, #88]	; (801180c <MX_SPI1_Init+0x74>)
 80117b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80117b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80117b8:	4b14      	ldr	r3, [pc, #80]	; (801180c <MX_SPI1_Init+0x74>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80117be:	4b13      	ldr	r3, [pc, #76]	; (801180c <MX_SPI1_Init+0x74>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80117c4:	4b11      	ldr	r3, [pc, #68]	; (801180c <MX_SPI1_Init+0x74>)
 80117c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80117ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80117cc:	4b0f      	ldr	r3, [pc, #60]	; (801180c <MX_SPI1_Init+0x74>)
 80117ce:	2208      	movs	r2, #8
 80117d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80117d2:	4b0e      	ldr	r3, [pc, #56]	; (801180c <MX_SPI1_Init+0x74>)
 80117d4:	2200      	movs	r2, #0
 80117d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80117d8:	4b0c      	ldr	r3, [pc, #48]	; (801180c <MX_SPI1_Init+0x74>)
 80117da:	2200      	movs	r2, #0
 80117dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80117de:	4b0b      	ldr	r3, [pc, #44]	; (801180c <MX_SPI1_Init+0x74>)
 80117e0:	2200      	movs	r2, #0
 80117e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80117e4:	4b09      	ldr	r3, [pc, #36]	; (801180c <MX_SPI1_Init+0x74>)
 80117e6:	2207      	movs	r2, #7
 80117e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80117ea:	4b08      	ldr	r3, [pc, #32]	; (801180c <MX_SPI1_Init+0x74>)
 80117ec:	2200      	movs	r2, #0
 80117ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80117f0:	4b06      	ldr	r3, [pc, #24]	; (801180c <MX_SPI1_Init+0x74>)
 80117f2:	2208      	movs	r2, #8
 80117f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80117f6:	4805      	ldr	r0, [pc, #20]	; (801180c <MX_SPI1_Init+0x74>)
 80117f8:	f006 f9bd 	bl	8017b76 <HAL_SPI_Init>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d001      	beq.n	8011806 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8011802:	f7ff ff65 	bl	80116d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8011806:	bf00      	nop
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	200090b0 	.word	0x200090b0
 8011810:	40013000 	.word	0x40013000

08011814 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b08c      	sub	sp, #48	; 0x30
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801181c:	f107 031c 	add.w	r3, r7, #28
 8011820:	2200      	movs	r2, #0
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	605a      	str	r2, [r3, #4]
 8011826:	609a      	str	r2, [r3, #8]
 8011828:	60da      	str	r2, [r3, #12]
 801182a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	4a33      	ldr	r2, [pc, #204]	; (8011900 <HAL_SPI_MspInit+0xec>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d160      	bne.n	80118f8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011836:	4b33      	ldr	r3, [pc, #204]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 8011838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801183a:	4a32      	ldr	r2, [pc, #200]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 801183c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011840:	6453      	str	r3, [r2, #68]	; 0x44
 8011842:	4b30      	ldr	r3, [pc, #192]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 8011844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801184a:	61bb      	str	r3, [r7, #24]
 801184c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801184e:	4b2d      	ldr	r3, [pc, #180]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 8011850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011852:	4a2c      	ldr	r2, [pc, #176]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 8011854:	f043 0301 	orr.w	r3, r3, #1
 8011858:	6313      	str	r3, [r2, #48]	; 0x30
 801185a:	4b2a      	ldr	r3, [pc, #168]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 801185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801185e:	f003 0301 	and.w	r3, r3, #1
 8011862:	617b      	str	r3, [r7, #20]
 8011864:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011866:	4b27      	ldr	r3, [pc, #156]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 8011868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801186a:	4a26      	ldr	r2, [pc, #152]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 801186c:	f043 0308 	orr.w	r3, r3, #8
 8011870:	6313      	str	r3, [r2, #48]	; 0x30
 8011872:	4b24      	ldr	r3, [pc, #144]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 8011874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011876:	f003 0308 	and.w	r3, r3, #8
 801187a:	613b      	str	r3, [r7, #16]
 801187c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801187e:	4b21      	ldr	r3, [pc, #132]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 8011880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011882:	4a20      	ldr	r2, [pc, #128]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 8011884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011888:	6313      	str	r3, [r2, #48]	; 0x30
 801188a:	4b1e      	ldr	r3, [pc, #120]	; (8011904 <HAL_SPI_MspInit+0xf0>)
 801188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801188e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011892:	60fb      	str	r3, [r7, #12]
 8011894:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8011896:	2320      	movs	r3, #32
 8011898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801189a:	2302      	movs	r3, #2
 801189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801189e:	2300      	movs	r3, #0
 80118a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118a2:	2303      	movs	r3, #3
 80118a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80118a6:	2305      	movs	r3, #5
 80118a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80118aa:	f107 031c 	add.w	r3, r7, #28
 80118ae:	4619      	mov	r1, r3
 80118b0:	4815      	ldr	r0, [pc, #84]	; (8011908 <HAL_SPI_MspInit+0xf4>)
 80118b2:	f003 ffa5 	bl	8015800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80118b6:	2380      	movs	r3, #128	; 0x80
 80118b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118ba:	2302      	movs	r3, #2
 80118bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118be:	2300      	movs	r3, #0
 80118c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118c2:	2303      	movs	r3, #3
 80118c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80118c6:	2305      	movs	r3, #5
 80118c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 80118ca:	f107 031c 	add.w	r3, r7, #28
 80118ce:	4619      	mov	r1, r3
 80118d0:	480e      	ldr	r0, [pc, #56]	; (801190c <HAL_SPI_MspInit+0xf8>)
 80118d2:	f003 ff95 	bl	8015800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80118d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80118da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118dc:	2302      	movs	r3, #2
 80118de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118e0:	2300      	movs	r3, #0
 80118e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118e4:	2303      	movs	r3, #3
 80118e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80118e8:	2305      	movs	r3, #5
 80118ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80118ec:	f107 031c 	add.w	r3, r7, #28
 80118f0:	4619      	mov	r1, r3
 80118f2:	4807      	ldr	r0, [pc, #28]	; (8011910 <HAL_SPI_MspInit+0xfc>)
 80118f4:	f003 ff84 	bl	8015800 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80118f8:	bf00      	nop
 80118fa:	3730      	adds	r7, #48	; 0x30
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	40013000 	.word	0x40013000
 8011904:	40023800 	.word	0x40023800
 8011908:	40020000 	.word	0x40020000
 801190c:	40020c00 	.word	0x40020c00
 8011910:	40021800 	.word	0x40021800

08011914 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b086      	sub	sp, #24
 8011918:	af00      	add	r7, sp, #0
 801191a:	60b9      	str	r1, [r7, #8]
 801191c:	607b      	str	r3, [r7, #4]
 801191e:	4603      	mov	r3, r0
 8011920:	73fb      	strb	r3, [r7, #15]
 8011922:	4613      	mov	r3, r2
 8011924:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8011926:	2300      	movs	r3, #0
 8011928:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 801192a:	7bfb      	ldrb	r3, [r7, #15]
 801192c:	3b01      	subs	r3, #1
 801192e:	2b03      	cmp	r3, #3
 8011930:	d828      	bhi.n	8011984 <SPI_WriteInFlash+0x70>
 8011932:	a201      	add	r2, pc, #4	; (adr r2, 8011938 <SPI_WriteInFlash+0x24>)
 8011934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011938:	08011949 	.word	0x08011949
 801193c:	08011959 	.word	0x08011959
 8011940:	08011967 	.word	0x08011967
 8011944:	08011975 	.word	0x08011975
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8011948:	4b75      	ldr	r3, [pc, #468]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 801194a:	4a76      	ldr	r2, [pc, #472]	; (8011b24 <SPI_WriteInFlash+0x210>)
 801194c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 801194e:	4b76      	ldr	r3, [pc, #472]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011954:	601a      	str	r2, [r3, #0]
		break;
 8011956:	e018      	b.n	801198a <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8011958:	4b71      	ldr	r3, [pc, #452]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 801195a:	4a74      	ldr	r2, [pc, #464]	; (8011b2c <SPI_WriteInFlash+0x218>)
 801195c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 801195e:	4b72      	ldr	r3, [pc, #456]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011960:	2220      	movs	r2, #32
 8011962:	601a      	str	r2, [r3, #0]
		break;
 8011964:	e011      	b.n	801198a <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8011966:	4b6e      	ldr	r3, [pc, #440]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 8011968:	4a70      	ldr	r2, [pc, #448]	; (8011b2c <SPI_WriteInFlash+0x218>)
 801196a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 801196c:	4b6e      	ldr	r3, [pc, #440]	; (8011b28 <SPI_WriteInFlash+0x214>)
 801196e:	2240      	movs	r2, #64	; 0x40
 8011970:	601a      	str	r2, [r3, #0]
		break;
 8011972:	e00a      	b.n	801198a <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8011974:	4b6a      	ldr	r3, [pc, #424]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 8011976:	4a6e      	ldr	r2, [pc, #440]	; (8011b30 <SPI_WriteInFlash+0x21c>)
 8011978:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 801197a:	4b6b      	ldr	r3, [pc, #428]	; (8011b28 <SPI_WriteInFlash+0x214>)
 801197c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011980:	601a      	str	r2, [r3, #0]
		break;
 8011982:	e002      	b.n	801198a <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8011984:	486b      	ldr	r0, [pc, #428]	; (8011b34 <SPI_WriteInFlash+0x220>)
 8011986:	f00e fcd5 	bl	8020334 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801198a:	4b65      	ldr	r3, [pc, #404]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4a66      	ldr	r2, [pc, #408]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011990:	6812      	ldr	r2, [r2, #0]
 8011992:	b291      	uxth	r1, r2
 8011994:	2201      	movs	r2, #1
 8011996:	4618      	mov	r0, r3
 8011998:	f004 f8f6 	bl	8015b88 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801199c:	4b60      	ldr	r3, [pc, #384]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	4a61      	ldr	r2, [pc, #388]	; (8011b28 <SPI_WriteInFlash+0x214>)
 80119a2:	6812      	ldr	r2, [r2, #0]
 80119a4:	b291      	uxth	r1, r2
 80119a6:	2200      	movs	r2, #0
 80119a8:	4618      	mov	r0, r3
 80119aa:	f004 f8ed 	bl	8015b88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 80119ae:	2364      	movs	r3, #100	; 0x64
 80119b0:	2201      	movs	r2, #1
 80119b2:	4961      	ldr	r1, [pc, #388]	; (8011b38 <SPI_WriteInFlash+0x224>)
 80119b4:	4861      	ldr	r0, [pc, #388]	; (8011b3c <SPI_WriteInFlash+0x228>)
 80119b6:	f006 f989 	bl	8017ccc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80119ba:	4b59      	ldr	r3, [pc, #356]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4a5a      	ldr	r2, [pc, #360]	; (8011b28 <SPI_WriteInFlash+0x214>)
 80119c0:	6812      	ldr	r2, [r2, #0]
 80119c2:	b291      	uxth	r1, r2
 80119c4:	2201      	movs	r2, #1
 80119c6:	4618      	mov	r0, r3
 80119c8:	f004 f8de 	bl	8015b88 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80119cc:	4b54      	ldr	r3, [pc, #336]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4a55      	ldr	r2, [pc, #340]	; (8011b28 <SPI_WriteInFlash+0x214>)
 80119d2:	6812      	ldr	r2, [r2, #0]
 80119d4:	b291      	uxth	r1, r2
 80119d6:	2200      	movs	r2, #0
 80119d8:	4618      	mov	r0, r3
 80119da:	f004 f8d5 	bl	8015b88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 80119de:	2364      	movs	r3, #100	; 0x64
 80119e0:	2201      	movs	r2, #1
 80119e2:	4957      	ldr	r1, [pc, #348]	; (8011b40 <SPI_WriteInFlash+0x22c>)
 80119e4:	4855      	ldr	r0, [pc, #340]	; (8011b3c <SPI_WriteInFlash+0x228>)
 80119e6:	f006 f971 	bl	8017ccc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80119ea:	2364      	movs	r3, #100	; 0x64
 80119ec:	2201      	movs	r2, #1
 80119ee:	4955      	ldr	r1, [pc, #340]	; (8011b44 <SPI_WriteInFlash+0x230>)
 80119f0:	4852      	ldr	r0, [pc, #328]	; (8011b3c <SPI_WriteInFlash+0x228>)
 80119f2:	f006 fad9 	bl	8017fa8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80119f6:	4b4a      	ldr	r3, [pc, #296]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4a4b      	ldr	r2, [pc, #300]	; (8011b28 <SPI_WriteInFlash+0x214>)
 80119fc:	6812      	ldr	r2, [r2, #0]
 80119fe:	b291      	uxth	r1, r2
 8011a00:	2201      	movs	r2, #1
 8011a02:	4618      	mov	r0, r3
 8011a04:	f004 f8c0 	bl	8015b88 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8011a08:	4b4e      	ldr	r3, [pc, #312]	; (8011b44 <SPI_WriteInFlash+0x230>)
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	f003 0302 	and.w	r3, r3, #2
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d103      	bne.n	8011a1c <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8011a14:	484c      	ldr	r0, [pc, #304]	; (8011b48 <SPI_WriteInFlash+0x234>)
 8011a16:	f00e fbf1 	bl	80201fc <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011a1a:	e7d7      	b.n	80119cc <SPI_WriteInFlash+0xb8>
			break;
 8011a1c:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011a1e:	4b40      	ldr	r3, [pc, #256]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	4a41      	ldr	r2, [pc, #260]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011a24:	6812      	ldr	r2, [r2, #0]
 8011a26:	b291      	uxth	r1, r2
 8011a28:	2200      	movs	r2, #0
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f004 f8ac 	bl	8015b88 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8011a30:	2202      	movs	r2, #2
 8011a32:	4b46      	ldr	r3, [pc, #280]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011a34:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	0c1b      	lsrs	r3, r3, #16
 8011a3a:	b2da      	uxtb	r2, r3
 8011a3c:	4b43      	ldr	r3, [pc, #268]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011a3e:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	0a1b      	lsrs	r3, r3, #8
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	4b41      	ldr	r3, [pc, #260]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011a48:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	4b3f      	ldr	r3, [pc, #252]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011a50:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8011a52:	2364      	movs	r3, #100	; 0x64
 8011a54:	2204      	movs	r2, #4
 8011a56:	493d      	ldr	r1, [pc, #244]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011a58:	4838      	ldr	r0, [pc, #224]	; (8011b3c <SPI_WriteInFlash+0x228>)
 8011a5a:	f006 f937 	bl	8017ccc <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8011a5e:	89ba      	ldrh	r2, [r7, #12]
 8011a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a64:	6879      	ldr	r1, [r7, #4]
 8011a66:	4835      	ldr	r0, [pc, #212]	; (8011b3c <SPI_WriteInFlash+0x228>)
 8011a68:	f006 f930 	bl	8017ccc <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011a6c:	4b2c      	ldr	r3, [pc, #176]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	4a2d      	ldr	r2, [pc, #180]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011a72:	6812      	ldr	r2, [r2, #0]
 8011a74:	b291      	uxth	r1, r2
 8011a76:	2201      	movs	r2, #1
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f004 f885 	bl	8015b88 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011a7e:	4b28      	ldr	r3, [pc, #160]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a29      	ldr	r2, [pc, #164]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011a84:	6812      	ldr	r2, [r2, #0]
 8011a86:	b291      	uxth	r1, r2
 8011a88:	2200      	movs	r2, #0
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f004 f87c 	bl	8015b88 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8011a90:	2205      	movs	r2, #5
 8011a92:	4b2e      	ldr	r3, [pc, #184]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011a94:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8011a96:	2364      	movs	r3, #100	; 0x64
 8011a98:	2201      	movs	r2, #1
 8011a9a:	492c      	ldr	r1, [pc, #176]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011a9c:	4827      	ldr	r0, [pc, #156]	; (8011b3c <SPI_WriteInFlash+0x228>)
 8011a9e:	f006 f915 	bl	8017ccc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8011aa2:	2364      	movs	r3, #100	; 0x64
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	4927      	ldr	r1, [pc, #156]	; (8011b44 <SPI_WriteInFlash+0x230>)
 8011aa8:	4824      	ldr	r0, [pc, #144]	; (8011b3c <SPI_WriteInFlash+0x228>)
 8011aaa:	f006 fa7d 	bl	8017fa8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011aae:	4b1c      	ldr	r3, [pc, #112]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4a1d      	ldr	r2, [pc, #116]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011ab4:	6812      	ldr	r2, [r2, #0]
 8011ab6:	b291      	uxth	r1, r2
 8011ab8:	2201      	movs	r2, #1
 8011aba:	4618      	mov	r0, r3
 8011abc:	f004 f864 	bl	8015b88 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8011ac0:	4b20      	ldr	r3, [pc, #128]	; (8011b44 <SPI_WriteInFlash+0x230>)
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	f003 0301 	and.w	r3, r3, #1
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d1d8      	bne.n	8011a7e <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8011acc:	2301      	movs	r3, #1
 8011ace:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 8011ad0:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011ad2:	4b13      	ldr	r3, [pc, #76]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4a14      	ldr	r2, [pc, #80]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011ad8:	6812      	ldr	r2, [r2, #0]
 8011ada:	b291      	uxth	r1, r2
 8011adc:	2200      	movs	r2, #0
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f004 f852 	bl	8015b88 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8011ae4:	2204      	movs	r2, #4
 8011ae6:	4b19      	ldr	r3, [pc, #100]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011ae8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8011aea:	2364      	movs	r3, #100	; 0x64
 8011aec:	2201      	movs	r2, #1
 8011aee:	4917      	ldr	r1, [pc, #92]	; (8011b4c <SPI_WriteInFlash+0x238>)
 8011af0:	4812      	ldr	r0, [pc, #72]	; (8011b3c <SPI_WriteInFlash+0x228>)
 8011af2:	f006 f8eb 	bl	8017ccc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8011af6:	2364      	movs	r3, #100	; 0x64
 8011af8:	2201      	movs	r2, #1
 8011afa:	4912      	ldr	r1, [pc, #72]	; (8011b44 <SPI_WriteInFlash+0x230>)
 8011afc:	480f      	ldr	r0, [pc, #60]	; (8011b3c <SPI_WriteInFlash+0x228>)
 8011afe:	f006 fa53 	bl	8017fa8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011b02:	4b07      	ldr	r3, [pc, #28]	; (8011b20 <SPI_WriteInFlash+0x20c>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	4a08      	ldr	r2, [pc, #32]	; (8011b28 <SPI_WriteInFlash+0x214>)
 8011b08:	6812      	ldr	r2, [r2, #0]
 8011b0a:	b291      	uxth	r1, r2
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f004 f83a 	bl	8015b88 <HAL_GPIO_WritePin>

	return Return_Value;
 8011b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	200090a4 	.word	0x200090a4
 8011b24:	40021800 	.word	0x40021800
 8011b28:	200090a8 	.word	0x200090a8
 8011b2c:	40020c00 	.word	0x40020c00
 8011b30:	40021000 	.word	0x40021000
 8011b34:	08024ca8 	.word	0x08024ca8
 8011b38:	08026918 	.word	0x08026918
 8011b3c:	200090b0 	.word	0x200090b0
 8011b40:	08026919 	.word	0x08026919
 8011b44:	200090a0 	.word	0x200090a0
 8011b48:	08024cc0 	.word	0x08024cc0
 8011b4c:	2000909c 	.word	0x2000909c

08011b50 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	4603      	mov	r3, r0
 8011b58:	6039      	str	r1, [r7, #0]
 8011b5a:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8011b60:	79fb      	ldrb	r3, [r7, #7]
 8011b62:	3b01      	subs	r3, #1
 8011b64:	2b03      	cmp	r3, #3
 8011b66:	d829      	bhi.n	8011bbc <SPI_MemoryEraseBySector+0x6c>
 8011b68:	a201      	add	r2, pc, #4	; (adr r2, 8011b70 <SPI_MemoryEraseBySector+0x20>)
 8011b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b6e:	bf00      	nop
 8011b70:	08011b81 	.word	0x08011b81
 8011b74:	08011b91 	.word	0x08011b91
 8011b78:	08011b9f 	.word	0x08011b9f
 8011b7c:	08011bad 	.word	0x08011bad
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8011b80:	4b6d      	ldr	r3, [pc, #436]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011b82:	4a6e      	ldr	r2, [pc, #440]	; (8011d3c <SPI_MemoryEraseBySector+0x1ec>)
 8011b84:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8011b86:	4b6e      	ldr	r3, [pc, #440]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011b8c:	601a      	str	r2, [r3, #0]
		break;
 8011b8e:	e018      	b.n	8011bc2 <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8011b90:	4b69      	ldr	r3, [pc, #420]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011b92:	4a6c      	ldr	r2, [pc, #432]	; (8011d44 <SPI_MemoryEraseBySector+0x1f4>)
 8011b94:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8011b96:	4b6a      	ldr	r3, [pc, #424]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011b98:	2220      	movs	r2, #32
 8011b9a:	601a      	str	r2, [r3, #0]
		break;
 8011b9c:	e011      	b.n	8011bc2 <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8011b9e:	4b66      	ldr	r3, [pc, #408]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011ba0:	4a68      	ldr	r2, [pc, #416]	; (8011d44 <SPI_MemoryEraseBySector+0x1f4>)
 8011ba2:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8011ba4:	4b66      	ldr	r3, [pc, #408]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011ba6:	2240      	movs	r2, #64	; 0x40
 8011ba8:	601a      	str	r2, [r3, #0]
		break;
 8011baa:	e00a      	b.n	8011bc2 <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8011bac:	4b62      	ldr	r3, [pc, #392]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011bae:	4a66      	ldr	r2, [pc, #408]	; (8011d48 <SPI_MemoryEraseBySector+0x1f8>)
 8011bb0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8011bb2:	4b63      	ldr	r3, [pc, #396]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011bb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011bb8:	601a      	str	r2, [r3, #0]
		break;
 8011bba:	e002      	b.n	8011bc2 <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8011bbc:	4863      	ldr	r0, [pc, #396]	; (8011d4c <SPI_MemoryEraseBySector+0x1fc>)
 8011bbe:	f00e fbb9 	bl	8020334 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011bc2:	4b5d      	ldr	r3, [pc, #372]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	4a5e      	ldr	r2, [pc, #376]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011bc8:	6812      	ldr	r2, [r2, #0]
 8011bca:	b291      	uxth	r1, r2
 8011bcc:	2200      	movs	r2, #0
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f003 ffda 	bl	8015b88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8011bd4:	2364      	movs	r3, #100	; 0x64
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	495d      	ldr	r1, [pc, #372]	; (8011d50 <SPI_MemoryEraseBySector+0x200>)
 8011bda:	485e      	ldr	r0, [pc, #376]	; (8011d54 <SPI_MemoryEraseBySector+0x204>)
 8011bdc:	f006 f876 	bl	8017ccc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011be0:	4b55      	ldr	r3, [pc, #340]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4a56      	ldr	r2, [pc, #344]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011be6:	6812      	ldr	r2, [r2, #0]
 8011be8:	b291      	uxth	r1, r2
 8011bea:	2201      	movs	r2, #1
 8011bec:	4618      	mov	r0, r3
 8011bee:	f003 ffcb 	bl	8015b88 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011bf2:	4b51      	ldr	r3, [pc, #324]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	4a52      	ldr	r2, [pc, #328]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011bf8:	6812      	ldr	r2, [r2, #0]
 8011bfa:	b291      	uxth	r1, r2
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f003 ffc2 	bl	8015b88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8011c04:	2364      	movs	r3, #100	; 0x64
 8011c06:	2201      	movs	r2, #1
 8011c08:	4953      	ldr	r1, [pc, #332]	; (8011d58 <SPI_MemoryEraseBySector+0x208>)
 8011c0a:	4852      	ldr	r0, [pc, #328]	; (8011d54 <SPI_MemoryEraseBySector+0x204>)
 8011c0c:	f006 f85e 	bl	8017ccc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8011c10:	2364      	movs	r3, #100	; 0x64
 8011c12:	2201      	movs	r2, #1
 8011c14:	4951      	ldr	r1, [pc, #324]	; (8011d5c <SPI_MemoryEraseBySector+0x20c>)
 8011c16:	484f      	ldr	r0, [pc, #316]	; (8011d54 <SPI_MemoryEraseBySector+0x204>)
 8011c18:	f006 f9c6 	bl	8017fa8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011c1c:	4b46      	ldr	r3, [pc, #280]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	4a47      	ldr	r2, [pc, #284]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011c22:	6812      	ldr	r2, [r2, #0]
 8011c24:	b291      	uxth	r1, r2
 8011c26:	2201      	movs	r2, #1
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f003 ffad 	bl	8015b88 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8011c2e:	4b4b      	ldr	r3, [pc, #300]	; (8011d5c <SPI_MemoryEraseBySector+0x20c>)
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	f003 0302 	and.w	r3, r3, #2
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d103      	bne.n	8011c42 <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8011c3a:	4849      	ldr	r0, [pc, #292]	; (8011d60 <SPI_MemoryEraseBySector+0x210>)
 8011c3c:	f00e fade 	bl	80201fc <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011c40:	e7d7      	b.n	8011bf2 <SPI_MemoryEraseBySector+0xa2>
			break;
 8011c42:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011c44:	4b3c      	ldr	r3, [pc, #240]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	4a3d      	ldr	r2, [pc, #244]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011c4a:	6812      	ldr	r2, [r2, #0]
 8011c4c:	b291      	uxth	r1, r2
 8011c4e:	2200      	movs	r2, #0
 8011c50:	4618      	mov	r0, r3
 8011c52:	f003 ff99 	bl	8015b88 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8011c56:	4b43      	ldr	r3, [pc, #268]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011c58:	2220      	movs	r2, #32
 8011c5a:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	0c1b      	lsrs	r3, r3, #16
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	4b40      	ldr	r3, [pc, #256]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011c64:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	0a1b      	lsrs	r3, r3, #8
 8011c6a:	b2da      	uxtb	r2, r3
 8011c6c:	4b3d      	ldr	r3, [pc, #244]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011c6e:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	4b3b      	ldr	r3, [pc, #236]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011c76:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8011c78:	2364      	movs	r3, #100	; 0x64
 8011c7a:	2204      	movs	r2, #4
 8011c7c:	4939      	ldr	r1, [pc, #228]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011c7e:	4835      	ldr	r0, [pc, #212]	; (8011d54 <SPI_MemoryEraseBySector+0x204>)
 8011c80:	f006 f824 	bl	8017ccc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011c84:	4b2c      	ldr	r3, [pc, #176]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	4a2d      	ldr	r2, [pc, #180]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011c8a:	6812      	ldr	r2, [r2, #0]
 8011c8c:	b291      	uxth	r1, r2
 8011c8e:	2201      	movs	r2, #1
 8011c90:	4618      	mov	r0, r3
 8011c92:	f003 ff79 	bl	8015b88 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011c96:	4b28      	ldr	r3, [pc, #160]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a29      	ldr	r2, [pc, #164]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011c9c:	6812      	ldr	r2, [r2, #0]
 8011c9e:	b291      	uxth	r1, r2
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f003 ff70 	bl	8015b88 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8011ca8:	2205      	movs	r2, #5
 8011caa:	4b2e      	ldr	r3, [pc, #184]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011cac:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8011cae:	2364      	movs	r3, #100	; 0x64
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	492c      	ldr	r1, [pc, #176]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011cb4:	4827      	ldr	r0, [pc, #156]	; (8011d54 <SPI_MemoryEraseBySector+0x204>)
 8011cb6:	f006 f809 	bl	8017ccc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8011cba:	2364      	movs	r3, #100	; 0x64
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	4927      	ldr	r1, [pc, #156]	; (8011d5c <SPI_MemoryEraseBySector+0x20c>)
 8011cc0:	4824      	ldr	r0, [pc, #144]	; (8011d54 <SPI_MemoryEraseBySector+0x204>)
 8011cc2:	f006 f971 	bl	8017fa8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011cc6:	4b1c      	ldr	r3, [pc, #112]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	4a1d      	ldr	r2, [pc, #116]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011ccc:	6812      	ldr	r2, [r2, #0]
 8011cce:	b291      	uxth	r1, r2
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f003 ff58 	bl	8015b88 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8011cd8:	4b20      	ldr	r3, [pc, #128]	; (8011d5c <SPI_MemoryEraseBySector+0x20c>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	f003 0301 	and.w	r3, r3, #1
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1d8      	bne.n	8011c96 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8011ce8:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011cea:	4b13      	ldr	r3, [pc, #76]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	4a14      	ldr	r2, [pc, #80]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011cf0:	6812      	ldr	r2, [r2, #0]
 8011cf2:	b291      	uxth	r1, r2
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f003 ff46 	bl	8015b88 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8011cfc:	2204      	movs	r2, #4
 8011cfe:	4b19      	ldr	r3, [pc, #100]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011d00:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8011d02:	2364      	movs	r3, #100	; 0x64
 8011d04:	2201      	movs	r2, #1
 8011d06:	4917      	ldr	r1, [pc, #92]	; (8011d64 <SPI_MemoryEraseBySector+0x214>)
 8011d08:	4812      	ldr	r0, [pc, #72]	; (8011d54 <SPI_MemoryEraseBySector+0x204>)
 8011d0a:	f005 ffdf 	bl	8017ccc <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8011d0e:	2364      	movs	r3, #100	; 0x64
 8011d10:	2201      	movs	r2, #1
 8011d12:	4912      	ldr	r1, [pc, #72]	; (8011d5c <SPI_MemoryEraseBySector+0x20c>)
 8011d14:	480f      	ldr	r0, [pc, #60]	; (8011d54 <SPI_MemoryEraseBySector+0x204>)
 8011d16:	f006 f947 	bl	8017fa8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011d1a:	4b07      	ldr	r3, [pc, #28]	; (8011d38 <SPI_MemoryEraseBySector+0x1e8>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4a08      	ldr	r2, [pc, #32]	; (8011d40 <SPI_MemoryEraseBySector+0x1f0>)
 8011d20:	6812      	ldr	r2, [r2, #0]
 8011d22:	b291      	uxth	r1, r2
 8011d24:	2201      	movs	r2, #1
 8011d26:	4618      	mov	r0, r3
 8011d28:	f003 ff2e 	bl	8015b88 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8011d2c:	68fb      	ldr	r3, [r7, #12]

}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3710      	adds	r7, #16
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	200090a4 	.word	0x200090a4
 8011d3c:	40021800 	.word	0x40021800
 8011d40:	200090a8 	.word	0x200090a8
 8011d44:	40020c00 	.word	0x40020c00
 8011d48:	40021000 	.word	0x40021000
 8011d4c:	08024ca8 	.word	0x08024ca8
 8011d50:	08026918 	.word	0x08026918
 8011d54:	200090b0 	.word	0x200090b0
 8011d58:	08026919 	.word	0x08026919
 8011d5c:	200090a0 	.word	0x200090a0
 8011d60:	08024ce4 	.word	0x08024ce4
 8011d64:	2000909c 	.word	0x2000909c

08011d68 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	60b9      	str	r1, [r7, #8]
 8011d70:	607b      	str	r3, [r7, #4]
 8011d72:	4603      	mov	r3, r0
 8011d74:	73fb      	strb	r3, [r7, #15]
 8011d76:	4613      	mov	r3, r2
 8011d78:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 8011d7a:	7bfb      	ldrb	r3, [r7, #15]
 8011d7c:	3b01      	subs	r3, #1
 8011d7e:	2b03      	cmp	r3, #3
 8011d80:	d828      	bhi.n	8011dd4 <SPI_ReadFromFlash+0x6c>
 8011d82:	a201      	add	r2, pc, #4	; (adr r2, 8011d88 <SPI_ReadFromFlash+0x20>)
 8011d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d88:	08011d99 	.word	0x08011d99
 8011d8c:	08011da9 	.word	0x08011da9
 8011d90:	08011db7 	.word	0x08011db7
 8011d94:	08011dc5 	.word	0x08011dc5
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8011d98:	4b2d      	ldr	r3, [pc, #180]	; (8011e50 <SPI_ReadFromFlash+0xe8>)
 8011d9a:	4a2e      	ldr	r2, [pc, #184]	; (8011e54 <SPI_ReadFromFlash+0xec>)
 8011d9c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8011d9e:	4b2e      	ldr	r3, [pc, #184]	; (8011e58 <SPI_ReadFromFlash+0xf0>)
 8011da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011da4:	601a      	str	r2, [r3, #0]
		break;
 8011da6:	e018      	b.n	8011dda <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8011da8:	4b29      	ldr	r3, [pc, #164]	; (8011e50 <SPI_ReadFromFlash+0xe8>)
 8011daa:	4a2c      	ldr	r2, [pc, #176]	; (8011e5c <SPI_ReadFromFlash+0xf4>)
 8011dac:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8011dae:	4b2a      	ldr	r3, [pc, #168]	; (8011e58 <SPI_ReadFromFlash+0xf0>)
 8011db0:	2220      	movs	r2, #32
 8011db2:	601a      	str	r2, [r3, #0]
		break;
 8011db4:	e011      	b.n	8011dda <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8011db6:	4b26      	ldr	r3, [pc, #152]	; (8011e50 <SPI_ReadFromFlash+0xe8>)
 8011db8:	4a28      	ldr	r2, [pc, #160]	; (8011e5c <SPI_ReadFromFlash+0xf4>)
 8011dba:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8011dbc:	4b26      	ldr	r3, [pc, #152]	; (8011e58 <SPI_ReadFromFlash+0xf0>)
 8011dbe:	2240      	movs	r2, #64	; 0x40
 8011dc0:	601a      	str	r2, [r3, #0]
		break;
 8011dc2:	e00a      	b.n	8011dda <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8011dc4:	4b22      	ldr	r3, [pc, #136]	; (8011e50 <SPI_ReadFromFlash+0xe8>)
 8011dc6:	4a26      	ldr	r2, [pc, #152]	; (8011e60 <SPI_ReadFromFlash+0xf8>)
 8011dc8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8011dca:	4b23      	ldr	r3, [pc, #140]	; (8011e58 <SPI_ReadFromFlash+0xf0>)
 8011dcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011dd0:	601a      	str	r2, [r3, #0]
		break;
 8011dd2:	e002      	b.n	8011dda <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8011dd4:	4823      	ldr	r0, [pc, #140]	; (8011e64 <SPI_ReadFromFlash+0xfc>)
 8011dd6:	f00e faad 	bl	8020334 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8011dda:	89bb      	ldrh	r3, [r7, #12]
 8011ddc:	461a      	mov	r2, r3
 8011dde:	2100      	movs	r1, #0
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f00e f923 	bl	802002c <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8011de6:	4b1a      	ldr	r3, [pc, #104]	; (8011e50 <SPI_ReadFromFlash+0xe8>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	4a1b      	ldr	r2, [pc, #108]	; (8011e58 <SPI_ReadFromFlash+0xf0>)
 8011dec:	6812      	ldr	r2, [r2, #0]
 8011dee:	b291      	uxth	r1, r2
 8011df0:	2200      	movs	r2, #0
 8011df2:	4618      	mov	r0, r3
 8011df4:	f003 fec8 	bl	8015b88 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8011df8:	2203      	movs	r2, #3
 8011dfa:	4b1b      	ldr	r3, [pc, #108]	; (8011e68 <SPI_ReadFromFlash+0x100>)
 8011dfc:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	0c1b      	lsrs	r3, r3, #16
 8011e02:	b2da      	uxtb	r2, r3
 8011e04:	4b18      	ldr	r3, [pc, #96]	; (8011e68 <SPI_ReadFromFlash+0x100>)
 8011e06:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	0a1b      	lsrs	r3, r3, #8
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	4b16      	ldr	r3, [pc, #88]	; (8011e68 <SPI_ReadFromFlash+0x100>)
 8011e10:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	b2da      	uxtb	r2, r3
 8011e16:	4b14      	ldr	r3, [pc, #80]	; (8011e68 <SPI_ReadFromFlash+0x100>)
 8011e18:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8011e1a:	2364      	movs	r3, #100	; 0x64
 8011e1c:	2204      	movs	r2, #4
 8011e1e:	4912      	ldr	r1, [pc, #72]	; (8011e68 <SPI_ReadFromFlash+0x100>)
 8011e20:	4812      	ldr	r0, [pc, #72]	; (8011e6c <SPI_ReadFromFlash+0x104>)
 8011e22:	f005 ff53 	bl	8017ccc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8011e26:	89ba      	ldrh	r2, [r7, #12]
 8011e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011e2c:	6879      	ldr	r1, [r7, #4]
 8011e2e:	480f      	ldr	r0, [pc, #60]	; (8011e6c <SPI_ReadFromFlash+0x104>)
 8011e30:	f006 f8ba 	bl	8017fa8 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8011e34:	4b06      	ldr	r3, [pc, #24]	; (8011e50 <SPI_ReadFromFlash+0xe8>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	4a07      	ldr	r2, [pc, #28]	; (8011e58 <SPI_ReadFromFlash+0xf0>)
 8011e3a:	6812      	ldr	r2, [r2, #0]
 8011e3c:	b291      	uxth	r1, r2
 8011e3e:	2201      	movs	r2, #1
 8011e40:	4618      	mov	r0, r3
 8011e42:	f003 fea1 	bl	8015b88 <HAL_GPIO_WritePin>

}
 8011e46:	bf00      	nop
 8011e48:	3710      	adds	r7, #16
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
 8011e4e:	bf00      	nop
 8011e50:	200090a4 	.word	0x200090a4
 8011e54:	40021800 	.word	0x40021800
 8011e58:	200090a8 	.word	0x200090a8
 8011e5c:	40020c00 	.word	0x40020c00
 8011e60:	40021000 	.word	0x40021000
 8011e64:	08024ca8 	.word	0x08024ca8
 8011e68:	2000909c 	.word	0x2000909c
 8011e6c:	200090b0 	.word	0x200090b0

08011e70 <Get_Config>:




void Get_Config(void)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 8011e76:	2300      	movs	r3, #0
 8011e78:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 8011e7a:	f240 3346 	movw	r3, #838	; 0x346
 8011e7e:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8011e84:	2300      	movs	r3, #0
 8011e86:	60fb      	str	r3, [r7, #12]
 8011e88:	e01d      	b.n	8011ec6 <Get_Config+0x56>
	{
		HAL_Delay(20);
 8011e8a:	2014      	movs	r0, #20
 8011e8c:	f001 f9b8 	bl	8013200 <HAL_Delay>
		if(SIZE_VAR <32)
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	2b1f      	cmp	r3, #31
 8011e94:	d809      	bhi.n	8011eaa <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	b29a      	uxth	r2, r3
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	492c      	ldr	r1, [pc, #176]	; (8011f50 <Get_Config+0xe0>)
 8011e9e:	440b      	add	r3, r1
 8011ea0:	68f9      	ldr	r1, [r7, #12]
 8011ea2:	2001      	movs	r0, #1
 8011ea4:	f7ff ff60 	bl	8011d68 <SPI_ReadFromFlash>
 8011ea8:	e00a      	b.n	8011ec0 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	4a28      	ldr	r2, [pc, #160]	; (8011f50 <Get_Config+0xe0>)
 8011eae:	4413      	add	r3, r2
 8011eb0:	2220      	movs	r2, #32
 8011eb2:	68f9      	ldr	r1, [r7, #12]
 8011eb4:	2001      	movs	r0, #1
 8011eb6:	f7ff ff57 	bl	8011d68 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	3b20      	subs	r3, #32
 8011ebe:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3320      	adds	r3, #32
 8011ec4:	60fb      	str	r3, [r7, #12]
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d3dd      	bcc.n	8011e8a <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 8011ece:	f44f 7151 	mov.w	r1, #836	; 0x344
 8011ed2:	481f      	ldr	r0, [pc, #124]	; (8011f50 <Get_Config+0xe0>)
 8011ed4:	f7fe fc56 	bl	8010784 <CheckCRC>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d013      	beq.n	8011f06 <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 8011ede:	f44f 7250 	mov.w	r2, #832	; 0x340
 8011ee2:	491c      	ldr	r1, [pc, #112]	; (8011f54 <Get_Config+0xe4>)
 8011ee4:	481c      	ldr	r0, [pc, #112]	; (8011f58 <Get_Config+0xe8>)
 8011ee6:	f00e f879 	bl	801ffdc <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8011eea:	4a1c      	ldr	r2, [pc, #112]	; (8011f5c <Get_Config+0xec>)
 8011eec:	2110      	movs	r1, #16
 8011eee:	2000      	movs	r0, #0
 8011ef0:	f7ee fb90 	bl	8000614 <ExtractBits>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	4b19      	ldr	r3, [pc, #100]	; (8011f60 <Get_Config+0xf0>)
 8011efa:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8011efc:	4b19      	ldr	r3, [pc, #100]	; (8011f64 <Get_Config+0xf4>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d121      	bne.n	8011f48 <Get_Config+0xd8>
 8011f04:	e01e      	b.n	8011f44 <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 8011f06:	f44f 7151 	mov.w	r1, #836	; 0x344
 8011f0a:	4817      	ldr	r0, [pc, #92]	; (8011f68 <Get_Config+0xf8>)
 8011f0c:	f00e f976 	bl	80201fc <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8011f10:	4b16      	ldr	r3, [pc, #88]	; (8011f6c <Get_Config+0xfc>)
 8011f12:	4a10      	ldr	r2, [pc, #64]	; (8011f54 <Get_Config+0xe4>)
 8011f14:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 8011f16:	4b0e      	ldr	r3, [pc, #56]	; (8011f50 <Get_Config+0xe0>)
 8011f18:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	4b0c      	ldr	r3, [pc, #48]	; (8011f50 <Get_Config+0xe0>)
 8011f20:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8011f24:	461a      	mov	r2, r3
 8011f26:	4812      	ldr	r0, [pc, #72]	; (8011f70 <Get_Config+0x100>)
 8011f28:	f00e f968 	bl	80201fc <iprintf>
		printf("\nCheck for CRC:");
 8011f2c:	4811      	ldr	r0, [pc, #68]	; (8011f74 <Get_Config+0x104>)
 8011f2e:	f00e f965 	bl	80201fc <iprintf>
		gucFlagUpdate =3;
 8011f32:	4b11      	ldr	r3, [pc, #68]	; (8011f78 <Get_Config+0x108>)
 8011f34:	2203      	movs	r2, #3
 8011f36:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8011f38:	4810      	ldr	r0, [pc, #64]	; (8011f7c <Get_Config+0x10c>)
 8011f3a:	f00e f9fb 	bl	8020334 <puts>
			Data_Processing();
 8011f3e:	f000 f81f 	bl	8011f80 <Data_Processing>
 8011f42:	e7fc      	b.n	8011f3e <Get_Config+0xce>
	{
		readCanToStructs();
 8011f44:	f7fb fd34 	bl	800d9b0 <readCanToStructs>
	}
}
 8011f48:	bf00      	nop
 8011f4a:	3710      	adds	r7, #16
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	20000648 	.word	0x20000648
 8011f54:	2000064c 	.word	0x2000064c
 8011f58:	20000304 	.word	0x20000304
 8011f5c:	2000098c 	.word	0x2000098c
 8011f60:	200090ae 	.word	0x200090ae
 8011f64:	20000a4b 	.word	0x20000a4b
 8011f68:	08024d14 	.word	0x08024d14
 8011f6c:	20000300 	.word	0x20000300
 8011f70:	08024d3c 	.word	0x08024d3c
 8011f74:	08024d50 	.word	0x08024d50
 8011f78:	20000a49 	.word	0x20000a49
 8011f7c:	08024d60 	.word	0x08024d60

08011f80 <Data_Processing>:


void Data_Processing(void)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 8011f84:	4b0b      	ldr	r3, [pc, #44]	; (8011fb4 <Data_Processing+0x34>)
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	2b03      	cmp	r3, #3
 8011f8a:	d10e      	bne.n	8011faa <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f7f8 ff43 	bl	800ae18 <CheckForRqst>
 8011f92:	4603      	mov	r3, r0
 8011f94:	461a      	mov	r2, r3
 8011f96:	4b08      	ldr	r3, [pc, #32]	; (8011fb8 <Data_Processing+0x38>)
 8011f98:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 8011f9a:	4b07      	ldr	r3, [pc, #28]	; (8011fb8 <Data_Processing+0x38>)
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d105      	bne.n	8011fae <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	f000 f80a 	bl	8011fbc <AutoLoadDat>
		}
		break;
 8011fa8:	e001      	b.n	8011fae <Data_Processing+0x2e>
	default:
		break;
 8011faa:	bf00      	nop
 8011fac:	e000      	b.n	8011fb0 <Data_Processing+0x30>
		break;
 8011fae:	bf00      	nop
	}
}
 8011fb0:	bf00      	nop
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	20000a49 	.word	0x20000a49
 8011fb8:	20000a4a 	.word	0x20000a4a

08011fbc <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8011fca:	79fb      	ldrb	r3, [r7, #7]
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011fd2:	4934      	ldr	r1, [pc, #208]	; (80120a4 <AutoLoadDat+0xe8>)
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7f9 f8c7 	bl	800b168 <ReadAndFormConfig>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 8011fde:	4832      	ldr	r0, [pc, #200]	; (80120a8 <AutoLoadDat+0xec>)
 8011fe0:	f004 fc68 	bl	80168b4 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 8011fe4:	7bbb      	ldrb	r3, [r7, #14]
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d921      	bls.n	801202e <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 8011fea:	4b30      	ldr	r3, [pc, #192]	; (80120ac <AutoLoadDat+0xf0>)
 8011fec:	2200      	movs	r2, #0
 8011fee:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 8011ff0:	4b2c      	ldr	r3, [pc, #176]	; (80120a4 <AutoLoadDat+0xe8>)
 8011ff2:	785b      	ldrb	r3, [r3, #1]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d107      	bne.n	8012008 <AutoLoadDat+0x4c>
 8011ff8:	4b2a      	ldr	r3, [pc, #168]	; (80120a4 <AutoLoadDat+0xe8>)
 8011ffa:	789b      	ldrb	r3, [r3, #2]
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d103      	bne.n	8012008 <AutoLoadDat+0x4c>
 8012000:	4b28      	ldr	r3, [pc, #160]	; (80120a4 <AutoLoadDat+0xe8>)
 8012002:	78db      	ldrb	r3, [r3, #3]
 8012004:	2b04      	cmp	r3, #4
 8012006:	d003      	beq.n	8012010 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8012008:	4829      	ldr	r0, [pc, #164]	; (80120b0 <AutoLoadDat+0xf4>)
 801200a:	f00e f993 	bl	8020334 <puts>
				return;
 801200e:	e046      	b.n	801209e <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8012010:	4b28      	ldr	r3, [pc, #160]	; (80120b4 <AutoLoadDat+0xf8>)
 8012012:	4a29      	ldr	r2, [pc, #164]	; (80120b8 <AutoLoadDat+0xfc>)
 8012014:	601a      	str	r2, [r3, #0]
			saveConfig();
 8012016:	f000 f85b 	bl	80120d0 <saveConfig>
			gucFlagCheck =1;
 801201a:	4b28      	ldr	r3, [pc, #160]	; (80120bc <AutoLoadDat+0x100>)
 801201c:	2201      	movs	r2, #1
 801201e:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 8012020:	4b27      	ldr	r3, [pc, #156]	; (80120c0 <AutoLoadDat+0x104>)
 8012022:	2201      	movs	r2, #1
 8012024:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 8012026:	4827      	ldr	r0, [pc, #156]	; (80120c4 <AutoLoadDat+0x108>)
 8012028:	f00e f984 	bl	8020334 <puts>
			break;
 801202c:	e037      	b.n	801209e <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 801202e:	7bbb      	ldrb	r3, [r7, #14]
 8012030:	2b01      	cmp	r3, #1
 8012032:	d11b      	bne.n	801206c <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 8012034:	7bfb      	ldrb	r3, [r7, #15]
 8012036:	2b03      	cmp	r3, #3
 8012038:	d109      	bne.n	801204e <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 801203a:	4b1c      	ldr	r3, [pc, #112]	; (80120ac <AutoLoadDat+0xf0>)
 801203c:	2200      	movs	r2, #0
 801203e:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 8012040:	79fb      	ldrb	r3, [r7, #7]
 8012042:	2203      	movs	r2, #3
 8012044:	2101      	movs	r1, #1
 8012046:	4618      	mov	r0, r3
 8012048:	f7f9 f842 	bl	800b0d0 <SendAck>
				break;
 801204c:	e027      	b.n	801209e <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 801204e:	79fb      	ldrb	r3, [r7, #7]
 8012050:	2202      	movs	r2, #2
 8012052:	2101      	movs	r1, #1
 8012054:	4618      	mov	r0, r3
 8012056:	f7f9 f83b 	bl	800b0d0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 801205a:	f001 f8c5 	bl	80131e8 <HAL_GetTick>
 801205e:	4603      	mov	r3, r0
 8012060:	4a19      	ldr	r2, [pc, #100]	; (80120c8 <AutoLoadDat+0x10c>)
 8012062:	6013      	str	r3, [r2, #0]
			AckCount++;
 8012064:	7bfb      	ldrb	r3, [r7, #15]
 8012066:	3301      	adds	r3, #1
 8012068:	73fb      	strb	r3, [r7, #15]
 801206a:	e7ae      	b.n	8011fca <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 801206c:	f001 f8bc 	bl	80131e8 <HAL_GetTick>
 8012070:	4602      	mov	r2, r0
 8012072:	4b15      	ldr	r3, [pc, #84]	; (80120c8 <AutoLoadDat+0x10c>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	1ad3      	subs	r3, r2, r3
 8012078:	2b00      	cmp	r3, #0
 801207a:	bfb8      	it	lt
 801207c:	425b      	neglt	r3, r3
 801207e:	f247 5230 	movw	r2, #30000	; 0x7530
 8012082:	4293      	cmp	r3, r2
 8012084:	dda1      	ble.n	8011fca <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 8012086:	4b09      	ldr	r3, [pc, #36]	; (80120ac <AutoLoadDat+0xf0>)
 8012088:	2200      	movs	r2, #0
 801208a:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 801208c:	480f      	ldr	r0, [pc, #60]	; (80120cc <AutoLoadDat+0x110>)
 801208e:	f00e f951 	bl	8020334 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 8012092:	79fb      	ldrb	r3, [r7, #7]
 8012094:	2205      	movs	r2, #5
 8012096:	2101      	movs	r1, #1
 8012098:	4618      	mov	r0, r3
 801209a:	f7f9 f819 	bl	800b0d0 <SendAck>
				break;
			}
		}
	}
}
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	20000648 	.word	0x20000648
 80120a8:	20009078 	.word	0x20009078
 80120ac:	20000a4a 	.word	0x20000a4a
 80120b0:	08024da0 	.word	0x08024da0
 80120b4:	20000300 	.word	0x20000300
 80120b8:	2000064c 	.word	0x2000064c
 80120bc:	20009098 	.word	0x20009098
 80120c0:	20009099 	.word	0x20009099
 80120c4:	08024db8 	.word	0x08024db8
 80120c8:	20000a4c 	.word	0x20000a4c
 80120cc:	08024dc8 	.word	0x08024dc8

080120d0 <saveConfig>:

unsigned char saveConfig(void)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 80120da:	4825      	ldr	r0, [pc, #148]	; (8012170 <saveConfig+0xa0>)
 80120dc:	f00e f92a 	bl	8020334 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 80120e0:	2300      	movs	r3, #0
 80120e2:	60fb      	str	r3, [r7, #12]
 80120e4:	e011      	b.n	801210a <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	031b      	lsls	r3, r3, #12
 80120ea:	4619      	mov	r1, r3
 80120ec:	2001      	movs	r0, #1
 80120ee:	f7ff fd2f 	bl	8011b50 <SPI_MemoryEraseBySector>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d005      	beq.n	8012104 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 80120f8:	481e      	ldr	r0, [pc, #120]	; (8012174 <saveConfig+0xa4>)
 80120fa:	f004 fbdb 	bl	80168b4 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 80120fe:	481e      	ldr	r0, [pc, #120]	; (8012178 <saveConfig+0xa8>)
 8012100:	f00e f918 	bl	8020334 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	3301      	adds	r3, #1
 8012108:	60fb      	str	r3, [r7, #12]
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2b05      	cmp	r3, #5
 801210e:	d9ea      	bls.n	80120e6 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 8012110:	f240 3347 	movw	r3, #839	; 0x347
 8012114:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 801211a:	2300      	movs	r3, #0
 801211c:	60fb      	str	r3, [r7, #12]
 801211e:	e01d      	b.n	801215c <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8012120:	4814      	ldr	r0, [pc, #80]	; (8012174 <saveConfig+0xa4>)
 8012122:	f004 fbc7 	bl	80168b4 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	2b1f      	cmp	r3, #31
 801212a:	d809      	bhi.n	8012140 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	b29a      	uxth	r2, r3
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	4912      	ldr	r1, [pc, #72]	; (801217c <saveConfig+0xac>)
 8012134:	440b      	add	r3, r1
 8012136:	68f9      	ldr	r1, [r7, #12]
 8012138:	2001      	movs	r0, #1
 801213a:	f7ff fbeb 	bl	8011914 <SPI_WriteInFlash>
 801213e:	e00a      	b.n	8012156 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	4a0e      	ldr	r2, [pc, #56]	; (801217c <saveConfig+0xac>)
 8012144:	4413      	add	r3, r2
 8012146:	2220      	movs	r2, #32
 8012148:	68f9      	ldr	r1, [r7, #12]
 801214a:	2001      	movs	r0, #1
 801214c:	f7ff fbe2 	bl	8011914 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	3b20      	subs	r3, #32
 8012154:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	3320      	adds	r3, #32
 801215a:	60fb      	str	r3, [r7, #12]
 801215c:	68fa      	ldr	r2, [r7, #12]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	429a      	cmp	r2, r3
 8012162:	d3dd      	bcc.n	8012120 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 8012164:	4806      	ldr	r0, [pc, #24]	; (8012180 <saveConfig+0xb0>)
 8012166:	f00e f849 	bl	80201fc <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 801216a:	f7ff faff 	bl	801176c <__NVIC_SystemReset>
 801216e:	bf00      	nop
 8012170:	08024de4 	.word	0x08024de4
 8012174:	20009078 	.word	0x20009078
 8012178:	08024df0 	.word	0x08024df0
 801217c:	20000648 	.word	0x20000648
 8012180:	08024e04 	.word	0x08024e04

08012184 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8012188:	4b14      	ldr	r3, [pc, #80]	; (80121dc <Print_BuildDat_Details+0x58>)
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d022      	beq.n	80121d6 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 8012190:	4b13      	ldr	r3, [pc, #76]	; (80121e0 <Print_BuildDat_Details+0x5c>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4618      	mov	r0, r3
 8012196:	f7fa f9a5 	bl	800c4e4 <HAL_Elaps_Ticks>
 801219a:	4603      	mov	r3, r0
 801219c:	f242 720f 	movw	r2, #9999	; 0x270f
 80121a0:	4293      	cmp	r3, r2
 80121a2:	d919      	bls.n	80121d8 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 80121a4:	480f      	ldr	r0, [pc, #60]	; (80121e4 <Print_BuildDat_Details+0x60>)
 80121a6:	f00e f8c5 	bl	8020334 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 80121aa:	490f      	ldr	r1, [pc, #60]	; (80121e8 <Print_BuildDat_Details+0x64>)
 80121ac:	480f      	ldr	r0, [pc, #60]	; (80121ec <Print_BuildDat_Details+0x68>)
 80121ae:	f00e f825 	bl	80201fc <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 80121b2:	4b0f      	ldr	r3, [pc, #60]	; (80121f0 <Print_BuildDat_Details+0x6c>)
 80121b4:	881b      	ldrh	r3, [r3, #0]
 80121b6:	4619      	mov	r1, r3
 80121b8:	480e      	ldr	r0, [pc, #56]	; (80121f4 <Print_BuildDat_Details+0x70>)
 80121ba:	f00e f81f 	bl	80201fc <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 80121be:	4b0e      	ldr	r3, [pc, #56]	; (80121f8 <Print_BuildDat_Details+0x74>)
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	4619      	mov	r1, r3
 80121c4:	480d      	ldr	r0, [pc, #52]	; (80121fc <Print_BuildDat_Details+0x78>)
 80121c6:	f00e f819 	bl	80201fc <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 80121ca:	f001 f80d 	bl	80131e8 <HAL_GetTick>
 80121ce:	4603      	mov	r3, r0
 80121d0:	4a03      	ldr	r2, [pc, #12]	; (80121e0 <Print_BuildDat_Details+0x5c>)
 80121d2:	6013      	str	r3, [r2, #0]
 80121d4:	e000      	b.n	80121d8 <Print_BuildDat_Details+0x54>
		return;
 80121d6:	bf00      	nop
	}
}
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	20000645 	.word	0x20000645
 80121e0:	20009114 	.word	0x20009114
 80121e4:	08024e20 	.word	0x08024e20
 80121e8:	20000305 	.word	0x20000305
 80121ec:	08024e54 	.word	0x08024e54
 80121f0:	200090ae 	.word	0x200090ae
 80121f4:	08024e68 	.word	0x08024e68
 80121f8:	200090ac 	.word	0x200090ac
 80121fc:	08024e78 	.word	0x08024e78

08012200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b082      	sub	sp, #8
 8012204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8012206:	4b0f      	ldr	r3, [pc, #60]	; (8012244 <HAL_MspInit+0x44>)
 8012208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801220a:	4a0e      	ldr	r2, [pc, #56]	; (8012244 <HAL_MspInit+0x44>)
 801220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012210:	6413      	str	r3, [r2, #64]	; 0x40
 8012212:	4b0c      	ldr	r3, [pc, #48]	; (8012244 <HAL_MspInit+0x44>)
 8012214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801221a:	607b      	str	r3, [r7, #4]
 801221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801221e:	4b09      	ldr	r3, [pc, #36]	; (8012244 <HAL_MspInit+0x44>)
 8012220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012222:	4a08      	ldr	r2, [pc, #32]	; (8012244 <HAL_MspInit+0x44>)
 8012224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012228:	6453      	str	r3, [r2, #68]	; 0x44
 801222a:	4b06      	ldr	r3, [pc, #24]	; (8012244 <HAL_MspInit+0x44>)
 801222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012232:	603b      	str	r3, [r7, #0]
 8012234:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8012236:	2004      	movs	r0, #4
 8012238:	f001 ffac 	bl	8014194 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801223c:	bf00      	nop
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	40023800 	.word	0x40023800

08012248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012248:	b480      	push	{r7}
 801224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 801224c:	e7fe      	b.n	801224c <NMI_Handler+0x4>

0801224e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801224e:	b480      	push	{r7}
 8012250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012252:	e7fe      	b.n	8012252 <HardFault_Handler+0x4>

08012254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012254:	b480      	push	{r7}
 8012256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012258:	e7fe      	b.n	8012258 <MemManage_Handler+0x4>

0801225a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801225a:	b480      	push	{r7}
 801225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801225e:	e7fe      	b.n	801225e <BusFault_Handler+0x4>

08012260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012260:	b480      	push	{r7}
 8012262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012264:	e7fe      	b.n	8012264 <UsageFault_Handler+0x4>

08012266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012266:	b480      	push	{r7}
 8012268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801226a:	bf00      	nop
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr

08012274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012274:	b480      	push	{r7}
 8012276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012278:	bf00      	nop
 801227a:	46bd      	mov	sp, r7
 801227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012280:	4770      	bx	lr

08012282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012282:	b480      	push	{r7}
 8012284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012286:	bf00      	nop
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr

08012290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012294:	f000 ff94 	bl	80131c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012298:	bf00      	nop
 801229a:	bd80      	pop	{r7, pc}

0801229c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 80122a0:	2001      	movs	r0, #1
 80122a2:	f003 fca5 	bl	8015bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80122a6:	bf00      	nop
 80122a8:	bd80      	pop	{r7, pc}

080122aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 80122ae:	2002      	movs	r0, #2
 80122b0:	f003 fc9e 	bl	8015bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80122b4:	bf00      	nop
 80122b6:	bd80      	pop	{r7, pc}

080122b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80122bc:	4802      	ldr	r0, [pc, #8]	; (80122c8 <TIM4_IRQHandler+0x10>)
 80122be:	f006 fbbb 	bl	8018a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80122c2:	bf00      	nop
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	2000911c 	.word	0x2000911c

080122cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80122d0:	4802      	ldr	r0, [pc, #8]	; (80122dc <USART1_IRQHandler+0x10>)
 80122d2:	f006 fdd5 	bl	8018e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80122d6:	bf00      	nop
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	2000b050 	.word	0x2000b050

080122e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80122e4:	4802      	ldr	r0, [pc, #8]	; (80122f0 <TIM5_IRQHandler+0x10>)
 80122e6:	f006 fba7 	bl	8018a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80122ea:	bf00      	nop
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	200091d8 	.word	0x200091d8

080122f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80122f8:	4802      	ldr	r0, [pc, #8]	; (8012304 <UART4_IRQHandler+0x10>)
 80122fa:	f006 fdc1 	bl	8018e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80122fe:	bf00      	nop
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	2000ae28 	.word	0x2000ae28

08012308 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 801230c:	4802      	ldr	r0, [pc, #8]	; (8012318 <UART5_IRQHandler+0x10>)
 801230e:	f006 fdb7 	bl	8018e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8012312:	bf00      	nop
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	2000aee0 	.word	0x2000aee0

0801231c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8012320:	4802      	ldr	r0, [pc, #8]	; (801232c <TIM6_DAC_IRQHandler+0x10>)
 8012322:	f006 fb89 	bl	8018a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8012326:	bf00      	nop
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	20009294 	.word	0x20009294

08012330 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8012334:	4802      	ldr	r0, [pc, #8]	; (8012340 <TIM7_IRQHandler+0x10>)
 8012336:	f006 fb7f 	bl	8018a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 801233a:	bf00      	nop
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	20009350 	.word	0x20009350

08012344 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8012348:	4802      	ldr	r0, [pc, #8]	; (8012354 <ETH_IRQHandler+0x10>)
 801234a:	f002 fb73 	bl	8014a34 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801234e:	bf00      	nop
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	2000fa64 	.word	0x2000fa64

08012358 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 801235c:	4802      	ldr	r0, [pc, #8]	; (8012368 <CAN2_RX0_IRQHandler+0x10>)
 801235e:	f001 fc15 	bl	8013b8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8012362:	bf00      	nop
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	20008ef4 	.word	0x20008ef4

0801236c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8012370:	4802      	ldr	r0, [pc, #8]	; (801237c <CAN2_RX1_IRQHandler+0x10>)
 8012372:	f001 fc0b 	bl	8013b8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8012376:	bf00      	nop
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	20008ef4 	.word	0x20008ef4

08012380 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8012384:	4802      	ldr	r0, [pc, #8]	; (8012390 <UART7_IRQHandler+0x10>)
 8012386:	f006 fd7b 	bl	8018e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 801238a:	bf00      	nop
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	2000af98 	.word	0x2000af98

08012394 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8012398:	4802      	ldr	r0, [pc, #8]	; (80123a4 <CAN3_RX0_IRQHandler+0x10>)
 801239a:	f001 fbf7 	bl	8013b8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 801239e:	bf00      	nop
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	20008f58 	.word	0x20008f58

080123a8 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80123ac:	4802      	ldr	r0, [pc, #8]	; (80123b8 <CAN3_RX1_IRQHandler+0x10>)
 80123ae:	f001 fbed 	bl	8013b8c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80123b2:	bf00      	nop
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	20008f58 	.word	0x20008f58

080123bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80123bc:	b480      	push	{r7}
 80123be:	af00      	add	r7, sp, #0
	return 1;
 80123c0:	2301      	movs	r3, #1
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr

080123cc <_kill>:

int _kill(int pid, int sig)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b083      	sub	sp, #12
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80123d6:	4b05      	ldr	r3, [pc, #20]	; (80123ec <_kill+0x20>)
 80123d8:	2216      	movs	r2, #22
 80123da:	601a      	str	r2, [r3, #0]
	return -1;
 80123dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr
 80123ec:	200136a8 	.word	0x200136a8

080123f0 <_exit>:

void _exit (int status)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80123f8:	f04f 31ff 	mov.w	r1, #4294967295
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7ff ffe5 	bl	80123cc <_kill>
	while (1) {}		/* Make sure we hang here */
 8012402:	e7fe      	b.n	8012402 <_exit+0x12>

08012404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b086      	sub	sp, #24
 8012408:	af00      	add	r7, sp, #0
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012410:	2300      	movs	r3, #0
 8012412:	617b      	str	r3, [r7, #20]
 8012414:	e00a      	b.n	801242c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012416:	f3af 8000 	nop.w
 801241a:	4601      	mov	r1, r0
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	1c5a      	adds	r2, r3, #1
 8012420:	60ba      	str	r2, [r7, #8]
 8012422:	b2ca      	uxtb	r2, r1
 8012424:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	3301      	adds	r3, #1
 801242a:	617b      	str	r3, [r7, #20]
 801242c:	697a      	ldr	r2, [r7, #20]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	429a      	cmp	r2, r3
 8012432:	dbf0      	blt.n	8012416 <_read+0x12>
	}

return len;
 8012434:	687b      	ldr	r3, [r7, #4]
}
 8012436:	4618      	mov	r0, r3
 8012438:	3718      	adds	r7, #24
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}

0801243e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801243e:	b580      	push	{r7, lr}
 8012440:	b086      	sub	sp, #24
 8012442:	af00      	add	r7, sp, #0
 8012444:	60f8      	str	r0, [r7, #12]
 8012446:	60b9      	str	r1, [r7, #8]
 8012448:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801244a:	2300      	movs	r3, #0
 801244c:	617b      	str	r3, [r7, #20]
 801244e:	e009      	b.n	8012464 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	1c5a      	adds	r2, r3, #1
 8012454:	60ba      	str	r2, [r7, #8]
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	4618      	mov	r0, r3
 801245a:	f7ee fb1b 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	3301      	adds	r3, #1
 8012462:	617b      	str	r3, [r7, #20]
 8012464:	697a      	ldr	r2, [r7, #20]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	429a      	cmp	r2, r3
 801246a:	dbf1      	blt.n	8012450 <_write+0x12>
	}
	return len;
 801246c:	687b      	ldr	r3, [r7, #4]
}
 801246e:	4618      	mov	r0, r3
 8012470:	3718      	adds	r7, #24
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}

08012476 <_close>:

int _close(int file)
{
 8012476:	b480      	push	{r7}
 8012478:	b083      	sub	sp, #12
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
	return -1;
 801247e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012482:	4618      	mov	r0, r3
 8012484:	370c      	adds	r7, #12
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr

0801248e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801248e:	b480      	push	{r7}
 8012490:	b083      	sub	sp, #12
 8012492:	af00      	add	r7, sp, #0
 8012494:	6078      	str	r0, [r7, #4]
 8012496:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801249e:	605a      	str	r2, [r3, #4]
	return 0;
 80124a0:	2300      	movs	r3, #0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	370c      	adds	r7, #12
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr

080124ae <_isatty>:

int _isatty(int file)
{
 80124ae:	b480      	push	{r7}
 80124b0:	b083      	sub	sp, #12
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
	return 1;
 80124b6:	2301      	movs	r3, #1
}
 80124b8:	4618      	mov	r0, r3
 80124ba:	370c      	adds	r7, #12
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr

080124c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80124c4:	b480      	push	{r7}
 80124c6:	b085      	sub	sp, #20
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	60f8      	str	r0, [r7, #12]
 80124cc:	60b9      	str	r1, [r7, #8]
 80124ce:	607a      	str	r2, [r7, #4]
	return 0;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3714      	adds	r7, #20
 80124d6:	46bd      	mov	sp, r7
 80124d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124dc:	4770      	bx	lr
	...

080124e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80124e0:	b480      	push	{r7}
 80124e2:	b087      	sub	sp, #28
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80124e8:	4a14      	ldr	r2, [pc, #80]	; (801253c <_sbrk+0x5c>)
 80124ea:	4b15      	ldr	r3, [pc, #84]	; (8012540 <_sbrk+0x60>)
 80124ec:	1ad3      	subs	r3, r2, r3
 80124ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80124f4:	4b13      	ldr	r3, [pc, #76]	; (8012544 <_sbrk+0x64>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d102      	bne.n	8012502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80124fc:	4b11      	ldr	r3, [pc, #68]	; (8012544 <_sbrk+0x64>)
 80124fe:	4a12      	ldr	r2, [pc, #72]	; (8012548 <_sbrk+0x68>)
 8012500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012502:	4b10      	ldr	r3, [pc, #64]	; (8012544 <_sbrk+0x64>)
 8012504:	681a      	ldr	r2, [r3, #0]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4413      	add	r3, r2
 801250a:	693a      	ldr	r2, [r7, #16]
 801250c:	429a      	cmp	r2, r3
 801250e:	d205      	bcs.n	801251c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8012510:	4b0e      	ldr	r3, [pc, #56]	; (801254c <_sbrk+0x6c>)
 8012512:	220c      	movs	r2, #12
 8012514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012516:	f04f 33ff 	mov.w	r3, #4294967295
 801251a:	e009      	b.n	8012530 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 801251c:	4b09      	ldr	r3, [pc, #36]	; (8012544 <_sbrk+0x64>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012522:	4b08      	ldr	r3, [pc, #32]	; (8012544 <_sbrk+0x64>)
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	4413      	add	r3, r2
 801252a:	4a06      	ldr	r2, [pc, #24]	; (8012544 <_sbrk+0x64>)
 801252c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801252e:	68fb      	ldr	r3, [r7, #12]
}
 8012530:	4618      	mov	r0, r3
 8012532:	371c      	adds	r7, #28
 8012534:	46bd      	mov	sp, r7
 8012536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253a:	4770      	bx	lr
 801253c:	20080000 	.word	0x20080000
 8012540:	00000400 	.word	0x00000400
 8012544:	20009118 	.word	0x20009118
 8012548:	200136b0 	.word	0x200136b0
 801254c:	200136a8 	.word	0x200136a8

08012550 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012550:	b480      	push	{r7}
 8012552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012554:	4b06      	ldr	r3, [pc, #24]	; (8012570 <SystemInit+0x20>)
 8012556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801255a:	4a05      	ldr	r2, [pc, #20]	; (8012570 <SystemInit+0x20>)
 801255c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012564:	bf00      	nop
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	e000ed00 	.word	0xe000ed00

08012574 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8012578:	4b16      	ldr	r3, [pc, #88]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 801257a:	4a17      	ldr	r2, [pc, #92]	; (80125d8 <MX_USART1_UART_Init+0x64>)
 801257c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801257e:	4b15      	ldr	r3, [pc, #84]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 8012580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012586:	4b13      	ldr	r3, [pc, #76]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 8012588:	2200      	movs	r2, #0
 801258a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801258c:	4b11      	ldr	r3, [pc, #68]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 801258e:	2200      	movs	r2, #0
 8012590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012592:	4b10      	ldr	r3, [pc, #64]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 8012594:	2200      	movs	r2, #0
 8012596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012598:	4b0e      	ldr	r3, [pc, #56]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 801259a:	220c      	movs	r2, #12
 801259c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801259e:	4b0d      	ldr	r3, [pc, #52]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 80125a0:	2200      	movs	r2, #0
 80125a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80125a4:	4b0b      	ldr	r3, [pc, #44]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 80125a6:	2200      	movs	r2, #0
 80125a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80125aa:	4b0a      	ldr	r3, [pc, #40]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 80125ac:	2200      	movs	r2, #0
 80125ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80125b0:	4b08      	ldr	r3, [pc, #32]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 80125b2:	2200      	movs	r2, #0
 80125b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80125b6:	4807      	ldr	r0, [pc, #28]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 80125b8:	f006 fb80 	bl	8018cbc <HAL_UART_Init>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d001      	beq.n	80125c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80125c2:	f7ff f885 	bl	80116d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80125c6:	2280      	movs	r2, #128	; 0x80
 80125c8:	4904      	ldr	r1, [pc, #16]	; (80125dc <MX_USART1_UART_Init+0x68>)
 80125ca:	4802      	ldr	r0, [pc, #8]	; (80125d4 <MX_USART1_UART_Init+0x60>)
 80125cc:	f007 fee2 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 80125d0:	bf00      	nop
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	2000b050 	.word	0x2000b050
 80125d8:	40011000 	.word	0x40011000
 80125dc:	2000ac28 	.word	0x2000ac28

080125e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b0b4      	sub	sp, #208	; 0xd0
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80125e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80125ec:	2200      	movs	r2, #0
 80125ee:	601a      	str	r2, [r3, #0]
 80125f0:	605a      	str	r2, [r3, #4]
 80125f2:	609a      	str	r2, [r3, #8]
 80125f4:	60da      	str	r2, [r3, #12]
 80125f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80125f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80125fc:	2290      	movs	r2, #144	; 0x90
 80125fe:	2100      	movs	r1, #0
 8012600:	4618      	mov	r0, r3
 8012602:	f00d fd13 	bl	802002c <memset>
  if(uartHandle->Instance==UART4)
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4aa7      	ldr	r2, [pc, #668]	; (80128a8 <HAL_UART_MspInit+0x2c8>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d145      	bne.n	801269c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8012610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012614:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8012616:	2300      	movs	r3, #0
 8012618:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801261a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801261e:	4618      	mov	r0, r3
 8012620:	f004 fdec 	bl	80171fc <HAL_RCCEx_PeriphCLKConfig>
 8012624:	4603      	mov	r3, r0
 8012626:	2b00      	cmp	r3, #0
 8012628:	d001      	beq.n	801262e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 801262a:	f7ff f851 	bl	80116d0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 801262e:	4b9f      	ldr	r3, [pc, #636]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012632:	4a9e      	ldr	r2, [pc, #632]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012638:	6413      	str	r3, [r2, #64]	; 0x40
 801263a:	4b9c      	ldr	r3, [pc, #624]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 801263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801263e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012642:	62bb      	str	r3, [r7, #40]	; 0x28
 8012644:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8012646:	4b99      	ldr	r3, [pc, #612]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801264a:	4a98      	ldr	r2, [pc, #608]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 801264c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012650:	6313      	str	r3, [r2, #48]	; 0x30
 8012652:	4b96      	ldr	r3, [pc, #600]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801265a:	627b      	str	r3, [r7, #36]	; 0x24
 801265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 801265e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012666:	2302      	movs	r3, #2
 8012668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801266c:	2300      	movs	r3, #0
 801266e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012672:	2303      	movs	r3, #3
 8012674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8012678:	2308      	movs	r3, #8
 801267a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801267e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012682:	4619      	mov	r1, r3
 8012684:	488a      	ldr	r0, [pc, #552]	; (80128b0 <HAL_UART_MspInit+0x2d0>)
 8012686:	f003 f8bb 	bl	8015800 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 801268a:	2200      	movs	r2, #0
 801268c:	2105      	movs	r1, #5
 801268e:	2034      	movs	r0, #52	; 0x34
 8012690:	f001 fd8b 	bl	80141aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8012694:	2034      	movs	r0, #52	; 0x34
 8012696:	f001 fda4 	bl	80141e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801269a:	e100      	b.n	801289e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	4a84      	ldr	r2, [pc, #528]	; (80128b4 <HAL_UART_MspInit+0x2d4>)
 80126a2:	4293      	cmp	r3, r2
 80126a4:	d167      	bne.n	8012776 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80126a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80126ac:	2300      	movs	r3, #0
 80126ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80126b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80126b6:	4618      	mov	r0, r3
 80126b8:	f004 fda0 	bl	80171fc <HAL_RCCEx_PeriphCLKConfig>
 80126bc:	4603      	mov	r3, r0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d001      	beq.n	80126c6 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 80126c2:	f7ff f805 	bl	80116d0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80126c6:	4b79      	ldr	r3, [pc, #484]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80126c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ca:	4a78      	ldr	r2, [pc, #480]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80126cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80126d0:	6413      	str	r3, [r2, #64]	; 0x40
 80126d2:	4b76      	ldr	r3, [pc, #472]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80126d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80126da:	623b      	str	r3, [r7, #32]
 80126dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80126de:	4b73      	ldr	r3, [pc, #460]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80126e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126e2:	4a72      	ldr	r2, [pc, #456]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80126e4:	f043 0308 	orr.w	r3, r3, #8
 80126e8:	6313      	str	r3, [r2, #48]	; 0x30
 80126ea:	4b70      	ldr	r3, [pc, #448]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80126ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ee:	f003 0308 	and.w	r3, r3, #8
 80126f2:	61fb      	str	r3, [r7, #28]
 80126f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80126f6:	4b6d      	ldr	r3, [pc, #436]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80126f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126fa:	4a6c      	ldr	r2, [pc, #432]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80126fc:	f043 0302 	orr.w	r3, r3, #2
 8012700:	6313      	str	r3, [r2, #48]	; 0x30
 8012702:	4b6a      	ldr	r3, [pc, #424]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012706:	f003 0302 	and.w	r3, r3, #2
 801270a:	61bb      	str	r3, [r7, #24]
 801270c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 801270e:	2304      	movs	r3, #4
 8012710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012714:	2302      	movs	r3, #2
 8012716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801271a:	2300      	movs	r3, #0
 801271c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012720:	2303      	movs	r3, #3
 8012722:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8012726:	2308      	movs	r3, #8
 8012728:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 801272c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012730:	4619      	mov	r1, r3
 8012732:	4861      	ldr	r0, [pc, #388]	; (80128b8 <HAL_UART_MspInit+0x2d8>)
 8012734:	f003 f864 	bl	8015800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8012738:	f44f 7300 	mov.w	r3, #512	; 0x200
 801273c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012740:	2302      	movs	r3, #2
 8012742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012746:	2300      	movs	r3, #0
 8012748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801274c:	2303      	movs	r3, #3
 801274e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8012752:	2307      	movs	r3, #7
 8012754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8012758:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801275c:	4619      	mov	r1, r3
 801275e:	4857      	ldr	r0, [pc, #348]	; (80128bc <HAL_UART_MspInit+0x2dc>)
 8012760:	f003 f84e 	bl	8015800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8012764:	2200      	movs	r2, #0
 8012766:	2105      	movs	r1, #5
 8012768:	2035      	movs	r0, #53	; 0x35
 801276a:	f001 fd1e 	bl	80141aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801276e:	2035      	movs	r0, #53	; 0x35
 8012770:	f001 fd37 	bl	80141e2 <HAL_NVIC_EnableIRQ>
}
 8012774:	e093      	b.n	801289e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a51      	ldr	r2, [pc, #324]	; (80128c0 <HAL_UART_MspInit+0x2e0>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d145      	bne.n	801280c <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8012780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012784:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8012786:	2300      	movs	r3, #0
 8012788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801278c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012790:	4618      	mov	r0, r3
 8012792:	f004 fd33 	bl	80171fc <HAL_RCCEx_PeriphCLKConfig>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d001      	beq.n	80127a0 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 801279c:	f7fe ff98 	bl	80116d0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80127a0:	4b42      	ldr	r3, [pc, #264]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80127a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127a4:	4a41      	ldr	r2, [pc, #260]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80127a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80127aa:	6413      	str	r3, [r2, #64]	; 0x40
 80127ac:	4b3f      	ldr	r3, [pc, #252]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80127ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80127b4:	617b      	str	r3, [r7, #20]
 80127b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80127b8:	4b3c      	ldr	r3, [pc, #240]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80127ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127bc:	4a3b      	ldr	r2, [pc, #236]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80127be:	f043 0320 	orr.w	r3, r3, #32
 80127c2:	6313      	str	r3, [r2, #48]	; 0x30
 80127c4:	4b39      	ldr	r3, [pc, #228]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 80127c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127c8:	f003 0320 	and.w	r3, r3, #32
 80127cc:	613b      	str	r3, [r7, #16]
 80127ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 80127d0:	23c0      	movs	r3, #192	; 0xc0
 80127d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127d6:	2302      	movs	r3, #2
 80127d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127dc:	2300      	movs	r3, #0
 80127de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127e2:	2303      	movs	r3, #3
 80127e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80127e8:	2308      	movs	r3, #8
 80127ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80127ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80127f2:	4619      	mov	r1, r3
 80127f4:	4833      	ldr	r0, [pc, #204]	; (80128c4 <HAL_UART_MspInit+0x2e4>)
 80127f6:	f003 f803 	bl	8015800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80127fa:	2200      	movs	r2, #0
 80127fc:	2105      	movs	r1, #5
 80127fe:	2052      	movs	r0, #82	; 0x52
 8012800:	f001 fcd3 	bl	80141aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8012804:	2052      	movs	r0, #82	; 0x52
 8012806:	f001 fcec 	bl	80141e2 <HAL_NVIC_EnableIRQ>
}
 801280a:	e048      	b.n	801289e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4a2d      	ldr	r2, [pc, #180]	; (80128c8 <HAL_UART_MspInit+0x2e8>)
 8012812:	4293      	cmp	r3, r2
 8012814:	d143      	bne.n	801289e <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8012816:	2340      	movs	r3, #64	; 0x40
 8012818:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801281a:	2300      	movs	r3, #0
 801281c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801281e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012822:	4618      	mov	r0, r3
 8012824:	f004 fcea 	bl	80171fc <HAL_RCCEx_PeriphCLKConfig>
 8012828:	4603      	mov	r3, r0
 801282a:	2b00      	cmp	r3, #0
 801282c:	d001      	beq.n	8012832 <HAL_UART_MspInit+0x252>
      Error_Handler();
 801282e:	f7fe ff4f 	bl	80116d0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8012832:	4b1e      	ldr	r3, [pc, #120]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012836:	4a1d      	ldr	r2, [pc, #116]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012838:	f043 0310 	orr.w	r3, r3, #16
 801283c:	6453      	str	r3, [r2, #68]	; 0x44
 801283e:	4b1b      	ldr	r3, [pc, #108]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012842:	f003 0310 	and.w	r3, r3, #16
 8012846:	60fb      	str	r3, [r7, #12]
 8012848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801284a:	4b18      	ldr	r3, [pc, #96]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 801284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801284e:	4a17      	ldr	r2, [pc, #92]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012850:	f043 0301 	orr.w	r3, r3, #1
 8012854:	6313      	str	r3, [r2, #48]	; 0x30
 8012856:	4b15      	ldr	r3, [pc, #84]	; (80128ac <HAL_UART_MspInit+0x2cc>)
 8012858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801285a:	f003 0301 	and.w	r3, r3, #1
 801285e:	60bb      	str	r3, [r7, #8]
 8012860:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8012862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8012866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801286a:	2302      	movs	r3, #2
 801286c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012870:	2300      	movs	r3, #0
 8012872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012876:	2303      	movs	r3, #3
 8012878:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801287c:	2307      	movs	r3, #7
 801287e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012882:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012886:	4619      	mov	r1, r3
 8012888:	4810      	ldr	r0, [pc, #64]	; (80128cc <HAL_UART_MspInit+0x2ec>)
 801288a:	f002 ffb9 	bl	8015800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 801288e:	2200      	movs	r2, #0
 8012890:	2107      	movs	r1, #7
 8012892:	2025      	movs	r0, #37	; 0x25
 8012894:	f001 fc89 	bl	80141aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012898:	2025      	movs	r0, #37	; 0x25
 801289a:	f001 fca2 	bl	80141e2 <HAL_NVIC_EnableIRQ>
}
 801289e:	bf00      	nop
 80128a0:	37d0      	adds	r7, #208	; 0xd0
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	40004c00 	.word	0x40004c00
 80128ac:	40023800 	.word	0x40023800
 80128b0:	40021c00 	.word	0x40021c00
 80128b4:	40005000 	.word	0x40005000
 80128b8:	40020c00 	.word	0x40020c00
 80128bc:	40020400 	.word	0x40020400
 80128c0:	40007800 	.word	0x40007800
 80128c4:	40021400 	.word	0x40021400
 80128c8:	40011000 	.word	0x40011000
 80128cc:	40020000 	.word	0x40020000

080128d0 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80128d8:	4b17      	ldr	r3, [pc, #92]	; (8012938 <UART4_Init+0x68>)
 80128da:	4a18      	ldr	r2, [pc, #96]	; (801293c <UART4_Init+0x6c>)
 80128dc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 80128de:	4a16      	ldr	r2, [pc, #88]	; (8012938 <UART4_Init+0x68>)
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80128e4:	4b14      	ldr	r3, [pc, #80]	; (8012938 <UART4_Init+0x68>)
 80128e6:	2200      	movs	r2, #0
 80128e8:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80128ea:	4b13      	ldr	r3, [pc, #76]	; (8012938 <UART4_Init+0x68>)
 80128ec:	2200      	movs	r2, #0
 80128ee:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80128f0:	4b11      	ldr	r3, [pc, #68]	; (8012938 <UART4_Init+0x68>)
 80128f2:	2200      	movs	r2, #0
 80128f4:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80128f6:	4b10      	ldr	r3, [pc, #64]	; (8012938 <UART4_Init+0x68>)
 80128f8:	220c      	movs	r2, #12
 80128fa:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80128fc:	4b0e      	ldr	r3, [pc, #56]	; (8012938 <UART4_Init+0x68>)
 80128fe:	2200      	movs	r2, #0
 8012900:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012902:	4b0d      	ldr	r3, [pc, #52]	; (8012938 <UART4_Init+0x68>)
 8012904:	2200      	movs	r2, #0
 8012906:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012908:	4b0b      	ldr	r3, [pc, #44]	; (8012938 <UART4_Init+0x68>)
 801290a:	2200      	movs	r2, #0
 801290c:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801290e:	4b0a      	ldr	r3, [pc, #40]	; (8012938 <UART4_Init+0x68>)
 8012910:	2200      	movs	r2, #0
 8012912:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8012914:	4808      	ldr	r0, [pc, #32]	; (8012938 <UART4_Init+0x68>)
 8012916:	f006 f9d1 	bl	8018cbc <HAL_UART_Init>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	d001      	beq.n	8012924 <UART4_Init+0x54>
	{
		Error_Handler();
 8012920:	f7fe fed6 	bl	80116d0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8012924:	2280      	movs	r2, #128	; 0x80
 8012926:	4906      	ldr	r1, [pc, #24]	; (8012940 <UART4_Init+0x70>)
 8012928:	4803      	ldr	r0, [pc, #12]	; (8012938 <UART4_Init+0x68>)
 801292a:	f007 fd33 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 801292e:	bf00      	nop
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	2000ae28 	.word	0x2000ae28
 801293c:	40004c00 	.word	0x40004c00
 8012940:	2000ada8 	.word	0x2000ada8

08012944 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	460b      	mov	r3, r1
 801294e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	4a60      	ldr	r2, [pc, #384]	; (8012ad8 <HAL_UARTEx_RxEventCallback+0x194>)
 8012956:	4293      	cmp	r3, r2
 8012958:	d129      	bne.n	80129ae <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801295a:	2280      	movs	r2, #128	; 0x80
 801295c:	495f      	ldr	r1, [pc, #380]	; (8012adc <HAL_UARTEx_RxEventCallback+0x198>)
 801295e:	4860      	ldr	r0, [pc, #384]	; (8012ae0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8012960:	f007 fd18 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8012964:	2300      	movs	r3, #0
 8012966:	81fb      	strh	r3, [r7, #14]
 8012968:	e017      	b.n	801299a <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 801296a:	89fa      	ldrh	r2, [r7, #14]
 801296c:	4b5d      	ldr	r3, [pc, #372]	; (8012ae4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 801296e:	881b      	ldrh	r3, [r3, #0]
 8012970:	1c59      	adds	r1, r3, #1
 8012972:	b288      	uxth	r0, r1
 8012974:	495b      	ldr	r1, [pc, #364]	; (8012ae4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8012976:	8008      	strh	r0, [r1, #0]
 8012978:	4619      	mov	r1, r3
 801297a:	4b58      	ldr	r3, [pc, #352]	; (8012adc <HAL_UARTEx_RxEventCallback+0x198>)
 801297c:	5c9a      	ldrb	r2, [r3, r2]
 801297e:	4b59      	ldr	r3, [pc, #356]	; (8012ae4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8012980:	440b      	add	r3, r1
 8012982:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8012984:	4b57      	ldr	r3, [pc, #348]	; (8012ae4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8012986:	881b      	ldrh	r3, [r3, #0]
 8012988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801298c:	d302      	bcc.n	8012994 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 801298e:	4b55      	ldr	r3, [pc, #340]	; (8012ae4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8012990:	2200      	movs	r2, #0
 8012992:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8012994:	89fb      	ldrh	r3, [r7, #14]
 8012996:	3301      	adds	r3, #1
 8012998:	81fb      	strh	r3, [r7, #14]
 801299a:	89fa      	ldrh	r2, [r7, #14]
 801299c:	887b      	ldrh	r3, [r7, #2]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d3e3      	bcc.n	801296a <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 80129a2:	f000 fc21 	bl	80131e8 <HAL_GetTick>
 80129a6:	4603      	mov	r3, r0
 80129a8:	4a4f      	ldr	r2, [pc, #316]	; (8012ae8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80129aa:	6013      	str	r3, [r2, #0]
				UART_BUFFS[THREE_PORT].Write_End = 0;
			}
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 80129ac:	e090      	b.n	8012ad0 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART5)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4a4e      	ldr	r2, [pc, #312]	; (8012aec <HAL_UARTEx_RxEventCallback+0x1a8>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d129      	bne.n	8012a0c <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80129b8:	2280      	movs	r2, #128	; 0x80
 80129ba:	494d      	ldr	r1, [pc, #308]	; (8012af0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80129bc:	484d      	ldr	r0, [pc, #308]	; (8012af4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80129be:	f007 fce9 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80129c2:	2300      	movs	r3, #0
 80129c4:	81bb      	strh	r3, [r7, #12]
 80129c6:	e01c      	b.n	8012a02 <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 80129c8:	89ba      	ldrh	r2, [r7, #12]
 80129ca:	4b4b      	ldr	r3, [pc, #300]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80129cc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80129d0:	1c59      	adds	r1, r3, #1
 80129d2:	b288      	uxth	r0, r1
 80129d4:	4948      	ldr	r1, [pc, #288]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80129d6:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 80129da:	4619      	mov	r1, r3
 80129dc:	4b44      	ldr	r3, [pc, #272]	; (8012af0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80129de:	5c9a      	ldrb	r2, [r3, r2]
 80129e0:	4b45      	ldr	r3, [pc, #276]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80129e2:	440b      	add	r3, r1
 80129e4:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 80129e8:	4b43      	ldr	r3, [pc, #268]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80129ea:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80129ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80129f2:	d303      	bcc.n	80129fc <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 80129f4:	4b40      	ldr	r3, [pc, #256]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80129f6:	2200      	movs	r2, #0
 80129f8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 80129fc:	89bb      	ldrh	r3, [r7, #12]
 80129fe:	3301      	adds	r3, #1
 8012a00:	81bb      	strh	r3, [r7, #12]
 8012a02:	89ba      	ldrh	r2, [r7, #12]
 8012a04:	887b      	ldrh	r3, [r7, #2]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d3de      	bcc.n	80129c8 <HAL_UARTEx_RxEventCallback+0x84>
}
 8012a0a:	e061      	b.n	8012ad0 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART7)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a3a      	ldr	r2, [pc, #232]	; (8012afc <HAL_UARTEx_RxEventCallback+0x1b8>)
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d129      	bne.n	8012a6a <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8012a16:	2280      	movs	r2, #128	; 0x80
 8012a18:	4939      	ldr	r1, [pc, #228]	; (8012b00 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8012a1a:	483a      	ldr	r0, [pc, #232]	; (8012b04 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8012a1c:	f007 fcba 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8012a20:	2300      	movs	r3, #0
 8012a22:	817b      	strh	r3, [r7, #10]
 8012a24:	e01c      	b.n	8012a60 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8012a26:	897a      	ldrh	r2, [r7, #10]
 8012a28:	4b33      	ldr	r3, [pc, #204]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012a2a:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8012a2e:	1c59      	adds	r1, r3, #1
 8012a30:	b288      	uxth	r0, r1
 8012a32:	4931      	ldr	r1, [pc, #196]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012a34:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8012a38:	4619      	mov	r1, r3
 8012a3a:	4b31      	ldr	r3, [pc, #196]	; (8012b00 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8012a3c:	5c9a      	ldrb	r2, [r3, r2]
 8012a3e:	4b2e      	ldr	r3, [pc, #184]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012a40:	440b      	add	r3, r1
 8012a42:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8012a46:	4b2c      	ldr	r3, [pc, #176]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012a48:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8012a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012a50:	d303      	bcc.n	8012a5a <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8012a52:	4b29      	ldr	r3, [pc, #164]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012a54:	2200      	movs	r2, #0
 8012a56:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8012a5a:	897b      	ldrh	r3, [r7, #10]
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	817b      	strh	r3, [r7, #10]
 8012a60:	897a      	ldrh	r2, [r7, #10]
 8012a62:	887b      	ldrh	r3, [r7, #2]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d3de      	bcc.n	8012a26 <HAL_UARTEx_RxEventCallback+0xe2>
}
 8012a68:	e032      	b.n	8012ad0 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART4)
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	4a26      	ldr	r2, [pc, #152]	; (8012b08 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d12d      	bne.n	8012ad0 <HAL_UARTEx_RxEventCallback+0x18c>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8012a74:	2280      	movs	r2, #128	; 0x80
 8012a76:	4925      	ldr	r1, [pc, #148]	; (8012b0c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8012a78:	4825      	ldr	r0, [pc, #148]	; (8012b10 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8012a7a:	f007 fc8b 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8012a7e:	2300      	movs	r3, #0
 8012a80:	813b      	strh	r3, [r7, #8]
 8012a82:	e01c      	b.n	8012abe <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8012a84:	893a      	ldrh	r2, [r7, #8]
 8012a86:	4b1c      	ldr	r3, [pc, #112]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012a88:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8012a8c:	1c59      	adds	r1, r3, #1
 8012a8e:	b288      	uxth	r0, r1
 8012a90:	4919      	ldr	r1, [pc, #100]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012a92:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8012a96:	4619      	mov	r1, r3
 8012a98:	4b1c      	ldr	r3, [pc, #112]	; (8012b0c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8012a9a:	5c9a      	ldrb	r2, [r3, r2]
 8012a9c:	4b16      	ldr	r3, [pc, #88]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012a9e:	440b      	add	r3, r1
 8012aa0:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8012aa4:	4b14      	ldr	r3, [pc, #80]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012aa6:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8012aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012aae:	d303      	bcc.n	8012ab8 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 8012ab0:	4b11      	ldr	r3, [pc, #68]	; (8012af8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8012ab8:	893b      	ldrh	r3, [r7, #8]
 8012aba:	3301      	adds	r3, #1
 8012abc:	813b      	strh	r3, [r7, #8]
 8012abe:	893a      	ldrh	r2, [r7, #8]
 8012ac0:	887b      	ldrh	r3, [r7, #2]
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d3de      	bcc.n	8012a84 <HAL_UARTEx_RxEventCallback+0x140>
		UART4_Intr_Clk = HAL_GetTick();
 8012ac6:	f000 fb8f 	bl	80131e8 <HAL_GetTick>
 8012aca:	4603      	mov	r3, r0
 8012acc:	4a11      	ldr	r2, [pc, #68]	; (8012b14 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8012ace:	6013      	str	r3, [r2, #0]
}
 8012ad0:	bf00      	nop
 8012ad2:	3710      	adds	r7, #16
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	40011000 	.word	0x40011000
 8012adc:	2000ac28 	.word	0x2000ac28
 8012ae0:	2000b050 	.word	0x2000b050
 8012ae4:	2000a424 	.word	0x2000a424
 8012ae8:	20009410 	.word	0x20009410
 8012aec:	40005000 	.word	0x40005000
 8012af0:	2000aca8 	.word	0x2000aca8
 8012af4:	2000aee0 	.word	0x2000aee0
 8012af8:	20009414 	.word	0x20009414
 8012afc:	40007800 	.word	0x40007800
 8012b00:	2000ad28 	.word	0x2000ad28
 8012b04:	2000af98 	.word	0x2000af98
 8012b08:	40004c00 	.word	0x40004c00
 8012b0c:	2000ada8 	.word	0x2000ada8
 8012b10:	2000ae28 	.word	0x2000ae28
 8012b14:	2000940c 	.word	0x2000940c

08012b18 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	4603      	mov	r3, r0
 8012b20:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8012b22:	2300      	movs	r3, #0
 8012b24:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8012b26:	79fb      	ldrb	r3, [r7, #7]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d115      	bne.n	8012b58 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8012b2c:	79fa      	ldrb	r2, [r7, #7]
 8012b2e:	4918      	ldr	r1, [pc, #96]	; (8012b90 <Com_DataReady+0x78>)
 8012b30:	4613      	mov	r3, r2
 8012b32:	025b      	lsls	r3, r3, #9
 8012b34:	4413      	add	r3, r2
 8012b36:	009b      	lsls	r3, r3, #2
 8012b38:	440b      	add	r3, r1
 8012b3a:	8819      	ldrh	r1, [r3, #0]
 8012b3c:	79fa      	ldrb	r2, [r7, #7]
 8012b3e:	4814      	ldr	r0, [pc, #80]	; (8012b90 <Com_DataReady+0x78>)
 8012b40:	4613      	mov	r3, r2
 8012b42:	025b      	lsls	r3, r3, #9
 8012b44:	4413      	add	r3, r2
 8012b46:	009b      	lsls	r3, r3, #2
 8012b48:	4403      	add	r3, r0
 8012b4a:	3302      	adds	r3, #2
 8012b4c:	881b      	ldrh	r3, [r3, #0]
 8012b4e:	4299      	cmp	r1, r3
 8012b50:	d017      	beq.n	8012b82 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8012b52:	2301      	movs	r3, #1
 8012b54:	73fb      	strb	r3, [r7, #15]
 8012b56:	e014      	b.n	8012b82 <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8012b58:	79fa      	ldrb	r2, [r7, #7]
 8012b5a:	490e      	ldr	r1, [pc, #56]	; (8012b94 <Com_DataReady+0x7c>)
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	021b      	lsls	r3, r3, #8
 8012b60:	4413      	add	r3, r2
 8012b62:	009b      	lsls	r3, r3, #2
 8012b64:	440b      	add	r3, r1
 8012b66:	8819      	ldrh	r1, [r3, #0]
 8012b68:	79fa      	ldrb	r2, [r7, #7]
 8012b6a:	480a      	ldr	r0, [pc, #40]	; (8012b94 <Com_DataReady+0x7c>)
 8012b6c:	4613      	mov	r3, r2
 8012b6e:	021b      	lsls	r3, r3, #8
 8012b70:	4413      	add	r3, r2
 8012b72:	009b      	lsls	r3, r3, #2
 8012b74:	4403      	add	r3, r0
 8012b76:	3302      	adds	r3, #2
 8012b78:	881b      	ldrh	r3, [r3, #0]
 8012b7a:	4299      	cmp	r1, r3
 8012b7c:	d001      	beq.n	8012b82 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8012b7e:	2301      	movs	r3, #1
 8012b80:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8012b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3714      	adds	r7, #20
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr
 8012b90:	2000a424 	.word	0x2000a424
 8012b94:	20009414 	.word	0x20009414

08012b98 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8012b98:	b4b0      	push	{r4, r5, r7}
 8012b9a:	b085      	sub	sp, #20
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8012ba6:	79fb      	ldrb	r3, [r7, #7]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d135      	bne.n	8012c18 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8012bac:	79f9      	ldrb	r1, [r7, #7]
 8012bae:	79fa      	ldrb	r2, [r7, #7]
 8012bb0:	4837      	ldr	r0, [pc, #220]	; (8012c90 <Com_Get_Byte+0xf8>)
 8012bb2:	4613      	mov	r3, r2
 8012bb4:	025b      	lsls	r3, r3, #9
 8012bb6:	4413      	add	r3, r2
 8012bb8:	009b      	lsls	r3, r3, #2
 8012bba:	4403      	add	r3, r0
 8012bbc:	3302      	adds	r3, #2
 8012bbe:	8818      	ldrh	r0, [r3, #0]
 8012bc0:	1c43      	adds	r3, r0, #1
 8012bc2:	b29d      	uxth	r5, r3
 8012bc4:	4c32      	ldr	r4, [pc, #200]	; (8012c90 <Com_Get_Byte+0xf8>)
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	025b      	lsls	r3, r3, #9
 8012bca:	4413      	add	r3, r2
 8012bcc:	009b      	lsls	r3, r3, #2
 8012bce:	4423      	add	r3, r4
 8012bd0:	3302      	adds	r3, #2
 8012bd2:	462a      	mov	r2, r5
 8012bd4:	801a      	strh	r2, [r3, #0]
 8012bd6:	4a2e      	ldr	r2, [pc, #184]	; (8012c90 <Com_Get_Byte+0xf8>)
 8012bd8:	460b      	mov	r3, r1
 8012bda:	025b      	lsls	r3, r3, #9
 8012bdc:	440b      	add	r3, r1
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	4413      	add	r3, r2
 8012be2:	4403      	add	r3, r0
 8012be4:	3304      	adds	r3, #4
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8012bea:	79fa      	ldrb	r2, [r7, #7]
 8012bec:	4928      	ldr	r1, [pc, #160]	; (8012c90 <Com_Get_Byte+0xf8>)
 8012bee:	4613      	mov	r3, r2
 8012bf0:	025b      	lsls	r3, r3, #9
 8012bf2:	4413      	add	r3, r2
 8012bf4:	009b      	lsls	r3, r3, #2
 8012bf6:	440b      	add	r3, r1
 8012bf8:	3302      	adds	r3, #2
 8012bfa:	881b      	ldrh	r3, [r3, #0]
 8012bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012c00:	d33f      	bcc.n	8012c82 <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8012c02:	79fa      	ldrb	r2, [r7, #7]
 8012c04:	4922      	ldr	r1, [pc, #136]	; (8012c90 <Com_Get_Byte+0xf8>)
 8012c06:	4613      	mov	r3, r2
 8012c08:	025b      	lsls	r3, r3, #9
 8012c0a:	4413      	add	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	440b      	add	r3, r1
 8012c10:	3302      	adds	r3, #2
 8012c12:	2200      	movs	r2, #0
 8012c14:	801a      	strh	r2, [r3, #0]
 8012c16:	e034      	b.n	8012c82 <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8012c18:	79f9      	ldrb	r1, [r7, #7]
 8012c1a:	79fa      	ldrb	r2, [r7, #7]
 8012c1c:	481d      	ldr	r0, [pc, #116]	; (8012c94 <Com_Get_Byte+0xfc>)
 8012c1e:	4613      	mov	r3, r2
 8012c20:	021b      	lsls	r3, r3, #8
 8012c22:	4413      	add	r3, r2
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	4403      	add	r3, r0
 8012c28:	3302      	adds	r3, #2
 8012c2a:	8818      	ldrh	r0, [r3, #0]
 8012c2c:	1c43      	adds	r3, r0, #1
 8012c2e:	b29d      	uxth	r5, r3
 8012c30:	4c18      	ldr	r4, [pc, #96]	; (8012c94 <Com_Get_Byte+0xfc>)
 8012c32:	4613      	mov	r3, r2
 8012c34:	021b      	lsls	r3, r3, #8
 8012c36:	4413      	add	r3, r2
 8012c38:	009b      	lsls	r3, r3, #2
 8012c3a:	4423      	add	r3, r4
 8012c3c:	3302      	adds	r3, #2
 8012c3e:	462a      	mov	r2, r5
 8012c40:	801a      	strh	r2, [r3, #0]
 8012c42:	4a14      	ldr	r2, [pc, #80]	; (8012c94 <Com_Get_Byte+0xfc>)
 8012c44:	460b      	mov	r3, r1
 8012c46:	021b      	lsls	r3, r3, #8
 8012c48:	440b      	add	r3, r1
 8012c4a:	009b      	lsls	r3, r3, #2
 8012c4c:	4413      	add	r3, r2
 8012c4e:	4403      	add	r3, r0
 8012c50:	3304      	adds	r3, #4
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8012c56:	79fa      	ldrb	r2, [r7, #7]
 8012c58:	490e      	ldr	r1, [pc, #56]	; (8012c94 <Com_Get_Byte+0xfc>)
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	021b      	lsls	r3, r3, #8
 8012c5e:	4413      	add	r3, r2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	440b      	add	r3, r1
 8012c64:	3302      	adds	r3, #2
 8012c66:	881b      	ldrh	r3, [r3, #0]
 8012c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012c6c:	d309      	bcc.n	8012c82 <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 8012c6e:	79fa      	ldrb	r2, [r7, #7]
 8012c70:	4908      	ldr	r1, [pc, #32]	; (8012c94 <Com_Get_Byte+0xfc>)
 8012c72:	4613      	mov	r3, r2
 8012c74:	021b      	lsls	r3, r3, #8
 8012c76:	4413      	add	r3, r2
 8012c78:	009b      	lsls	r3, r3, #2
 8012c7a:	440b      	add	r3, r1
 8012c7c:	3302      	adds	r3, #2
 8012c7e:	2200      	movs	r2, #0
 8012c80:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8012c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3714      	adds	r7, #20
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bcb0      	pop	{r4, r5, r7}
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop
 8012c90:	2000a424 	.word	0x2000a424
 8012c94:	20009414 	.word	0x20009414

08012c98 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b084      	sub	sp, #16
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	6039      	str	r1, [r7, #0]
 8012ca2:	71fb      	strb	r3, [r7, #7]
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8012cac:	2300      	movs	r3, #0
 8012cae:	81fb      	strh	r3, [r7, #14]
 8012cb0:	e03a      	b.n	8012d28 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 8012cb2:	89fb      	ldrh	r3, [r7, #14]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d00a      	beq.n	8012cce <CommTransmitMessage+0x36>
 8012cb8:	89fb      	ldrh	r3, [r7, #14]
 8012cba:	683a      	ldr	r2, [r7, #0]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	2b24      	cmp	r3, #36	; 0x24
 8012cc2:	d104      	bne.n	8012cce <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8012cc4:	79fb      	ldrb	r3, [r7, #7]
 8012cc6:	2105      	movs	r1, #5
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f000 f835 	bl	8012d38 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8012cce:	89fb      	ldrh	r3, [r7, #14]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d00e      	beq.n	8012cf2 <CommTransmitMessage+0x5a>
 8012cd4:	89fa      	ldrh	r2, [r7, #14]
 8012cd6:	88bb      	ldrh	r3, [r7, #4]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d20a      	bcs.n	8012cf2 <CommTransmitMessage+0x5a>
 8012cdc:	89fb      	ldrh	r3, [r7, #14]
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b05      	cmp	r3, #5
 8012ce6:	d104      	bne.n	8012cf2 <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8012ce8:	79fb      	ldrb	r3, [r7, #7]
 8012cea:	2105      	movs	r1, #5
 8012cec:	4618      	mov	r0, r3
 8012cee:	f000 f823 	bl	8012d38 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 8012cf2:	89fb      	ldrh	r3, [r7, #14]
 8012cf4:	683a      	ldr	r2, [r7, #0]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	2b26      	cmp	r3, #38	; 0x26
 8012cfc:	d108      	bne.n	8012d10 <CommTransmitMessage+0x78>
 8012cfe:	89fa      	ldrh	r2, [r7, #14]
 8012d00:	88bb      	ldrh	r3, [r7, #4]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d004      	beq.n	8012d10 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8012d06:	79fb      	ldrb	r3, [r7, #7]
 8012d08:	2105      	movs	r1, #5
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f000 f814 	bl	8012d38 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8012d10:	89fb      	ldrh	r3, [r7, #14]
 8012d12:	683a      	ldr	r2, [r7, #0]
 8012d14:	4413      	add	r3, r2
 8012d16:	781a      	ldrb	r2, [r3, #0]
 8012d18:	79fb      	ldrb	r3, [r7, #7]
 8012d1a:	4611      	mov	r1, r2
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f000 f80b 	bl	8012d38 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8012d22:	89fb      	ldrh	r3, [r7, #14]
 8012d24:	3301      	adds	r3, #1
 8012d26:	81fb      	strh	r3, [r7, #14]
 8012d28:	89fa      	ldrh	r2, [r7, #14]
 8012d2a:	88bb      	ldrh	r3, [r7, #4]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d9c0      	bls.n	8012cb2 <CommTransmitMessage+0x1a>
	}

	return;
 8012d30:	bf00      	nop
}
 8012d32:	3710      	adds	r7, #16
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}

08012d38 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	4603      	mov	r3, r0
 8012d40:	460a      	mov	r2, r1
 8012d42:	71fb      	strb	r3, [r7, #7]
 8012d44:	4613      	mov	r3, r2
 8012d46:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8012d48:	1dbb      	adds	r3, r7, #6
 8012d4a:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8012d4c:	79fb      	ldrb	r3, [r7, #7]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d107      	bne.n	8012d62 <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 8012d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d56:	2201      	movs	r2, #1
 8012d58:	68f9      	ldr	r1, [r7, #12]
 8012d5a:	4816      	ldr	r0, [pc, #88]	; (8012db4 <Com_SendByte+0x7c>)
 8012d5c:	f006 f80c 	bl	8018d78 <HAL_UART_Transmit>
 8012d60:	e01f      	b.n	8012da2 <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 8012d62:	79fb      	ldrb	r3, [r7, #7]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d107      	bne.n	8012d78 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8012d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	68f9      	ldr	r1, [r7, #12]
 8012d70:	4811      	ldr	r0, [pc, #68]	; (8012db8 <Com_SendByte+0x80>)
 8012d72:	f006 f801 	bl	8018d78 <HAL_UART_Transmit>
 8012d76:	e014      	b.n	8012da2 <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8012d78:	79fb      	ldrb	r3, [r7, #7]
 8012d7a:	2b02      	cmp	r3, #2
 8012d7c:	d107      	bne.n	8012d8e <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 8012d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d82:	2201      	movs	r2, #1
 8012d84:	68f9      	ldr	r1, [r7, #12]
 8012d86:	480d      	ldr	r0, [pc, #52]	; (8012dbc <Com_SendByte+0x84>)
 8012d88:	f005 fff6 	bl	8018d78 <HAL_UART_Transmit>
 8012d8c:	e009      	b.n	8012da2 <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 8012d8e:	79fb      	ldrb	r3, [r7, #7]
 8012d90:	2b03      	cmp	r3, #3
 8012d92:	d106      	bne.n	8012da2 <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8012d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d98:	2201      	movs	r2, #1
 8012d9a:	68f9      	ldr	r1, [r7, #12]
 8012d9c:	4808      	ldr	r0, [pc, #32]	; (8012dc0 <Com_SendByte+0x88>)
 8012d9e:	f005 ffeb 	bl	8018d78 <HAL_UART_Transmit>
	}

	ptr=NULL;
 8012da2:	2300      	movs	r3, #0
 8012da4:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8012da6:	68f8      	ldr	r0, [r7, #12]
 8012da8:	f00d f900 	bl	801ffac <free>
}
 8012dac:	bf00      	nop
 8012dae:	3710      	adds	r7, #16
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	2000b050 	.word	0x2000b050
 8012db8:	2000aee0 	.word	0x2000aee0
 8012dbc:	2000af98 	.word	0x2000af98
 8012dc0:	2000ae28 	.word	0x2000ae28

08012dc4 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8012dc8:	2280      	movs	r2, #128	; 0x80
 8012dca:	490a      	ldr	r1, [pc, #40]	; (8012df4 <Enable_UART_Interrupts+0x30>)
 8012dcc:	480a      	ldr	r0, [pc, #40]	; (8012df8 <Enable_UART_Interrupts+0x34>)
 8012dce:	f007 fae1 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8012dd2:	2280      	movs	r2, #128	; 0x80
 8012dd4:	4909      	ldr	r1, [pc, #36]	; (8012dfc <Enable_UART_Interrupts+0x38>)
 8012dd6:	480a      	ldr	r0, [pc, #40]	; (8012e00 <Enable_UART_Interrupts+0x3c>)
 8012dd8:	f007 fadc 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8012ddc:	2280      	movs	r2, #128	; 0x80
 8012dde:	4909      	ldr	r1, [pc, #36]	; (8012e04 <Enable_UART_Interrupts+0x40>)
 8012de0:	4809      	ldr	r0, [pc, #36]	; (8012e08 <Enable_UART_Interrupts+0x44>)
 8012de2:	f007 fad7 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8012de6:	2280      	movs	r2, #128	; 0x80
 8012de8:	4908      	ldr	r1, [pc, #32]	; (8012e0c <Enable_UART_Interrupts+0x48>)
 8012dea:	4809      	ldr	r0, [pc, #36]	; (8012e10 <Enable_UART_Interrupts+0x4c>)
 8012dec:	f007 fad2 	bl	801a394 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8012df0:	bf00      	nop
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	2000ac28 	.word	0x2000ac28
 8012df8:	2000b050 	.word	0x2000b050
 8012dfc:	2000aca8 	.word	0x2000aca8
 8012e00:	2000aee0 	.word	0x2000aee0
 8012e04:	2000ad28 	.word	0x2000ad28
 8012e08:	2000af98 	.word	0x2000af98
 8012e0c:	2000ada8 	.word	0x2000ada8
 8012e10:	2000ae28 	.word	0x2000ae28

08012e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012e18:	480d      	ldr	r0, [pc, #52]	; (8012e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8012e1a:	490e      	ldr	r1, [pc, #56]	; (8012e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8012e1c:	4a0e      	ldr	r2, [pc, #56]	; (8012e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8012e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012e20:	e002      	b.n	8012e28 <LoopCopyDataInit>

08012e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012e26:	3304      	adds	r3, #4

08012e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012e2c:	d3f9      	bcc.n	8012e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012e2e:	4a0b      	ldr	r2, [pc, #44]	; (8012e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8012e30:	4c0b      	ldr	r4, [pc, #44]	; (8012e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8012e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012e34:	e001      	b.n	8012e3a <LoopFillZerobss>

08012e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012e38:	3204      	adds	r2, #4

08012e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012e3c:	d3fb      	bcc.n	8012e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012e3e:	f7ff fb87 	bl	8012550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012e42:	f00d f887 	bl	801ff54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012e46:	f7fe fa25 	bl	8011294 <main>
  bx  lr    
 8012e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012e4c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8012e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012e54:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8012e58:	08026b1c 	.word	0x08026b1c
  ldr r2, =_sbss
 8012e5c:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8012e60:	200136b0 	.word	0x200136b0

08012e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012e64:	e7fe      	b.n	8012e64 <ADC_IRQHandler>

08012e66 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8012e66:	b480      	push	{r7}
 8012e68:	b083      	sub	sp, #12
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	6078      	str	r0, [r7, #4]
 8012e6e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00b      	beq.n	8012e8e <DP83848_RegisterBusIO+0x28>
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d007      	beq.n	8012e8e <DP83848_RegisterBusIO+0x28>
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	689b      	ldr	r3, [r3, #8]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d003      	beq.n	8012e8e <DP83848_RegisterBusIO+0x28>
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	691b      	ldr	r3, [r3, #16]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d102      	bne.n	8012e94 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8012e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012e92:	e014      	b.n	8012ebe <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	685a      	ldr	r2, [r3, #4]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	68da      	ldr	r2, [r3, #12]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	689a      	ldr	r2, [r3, #8]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	691a      	ldr	r2, [r3, #16]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8012ebc:	2300      	movs	r3, #0
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	370c      	adds	r7, #12
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr

08012eca <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8012eca:	b580      	push	{r7, lr}
 8012ecc:	b086      	sub	sp, #24
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	60fb      	str	r3, [r7, #12]
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	60bb      	str	r3, [r7, #8]
 8012eda:	2300      	movs	r3, #0
 8012edc:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d17c      	bne.n	8012fe4 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	689b      	ldr	r3, [r3, #8]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d002      	beq.n	8012ef8 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	689b      	ldr	r3, [r3, #8]
 8012ef6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2220      	movs	r2, #32
 8012efc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8012efe:	2300      	movs	r3, #0
 8012f00:	617b      	str	r3, [r7, #20]
 8012f02:	e01c      	b.n	8012f3e <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	695b      	ldr	r3, [r3, #20]
 8012f08:	f107 0208 	add.w	r2, r7, #8
 8012f0c:	2119      	movs	r1, #25
 8012f0e:	6978      	ldr	r0, [r7, #20]
 8012f10:	4798      	blx	r3
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	da03      	bge.n	8012f20 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8012f18:	f06f 0304 	mvn.w	r3, #4
 8012f1c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8012f1e:	e00b      	b.n	8012f38 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	f003 031f 	and.w	r3, r3, #31
 8012f26:	697a      	ldr	r2, [r7, #20]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d105      	bne.n	8012f38 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	697a      	ldr	r2, [r7, #20]
 8012f30:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8012f32:	2300      	movs	r3, #0
 8012f34:	613b      	str	r3, [r7, #16]
         break;
 8012f36:	e005      	b.n	8012f44 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	617b      	str	r3, [r7, #20]
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	2b1f      	cmp	r3, #31
 8012f42:	d9df      	bls.n	8012f04 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b1f      	cmp	r3, #31
 8012f4a:	d902      	bls.n	8012f52 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8012f4c:	f06f 0302 	mvn.w	r3, #2
 8012f50:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d145      	bne.n	8012fe4 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	691b      	ldr	r3, [r3, #16]
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	6810      	ldr	r0, [r2, #0]
 8012f60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8012f64:	2100      	movs	r1, #0
 8012f66:	4798      	blx	r3
 8012f68:	4603      	mov	r3, r0
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	db37      	blt.n	8012fde <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	695b      	ldr	r3, [r3, #20]
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	6810      	ldr	r0, [r2, #0]
 8012f76:	f107 0208 	add.w	r2, r7, #8
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	4798      	blx	r3
 8012f7e:	4603      	mov	r3, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	db28      	blt.n	8012fd6 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	699b      	ldr	r3, [r3, #24]
 8012f88:	4798      	blx	r3
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8012f8e:	e01c      	b.n	8012fca <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	699b      	ldr	r3, [r3, #24]
 8012f94:	4798      	blx	r3
 8012f96:	4603      	mov	r3, r0
 8012f98:	461a      	mov	r2, r3
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	1ad3      	subs	r3, r2, r3
 8012f9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012fa2:	d80e      	bhi.n	8012fc2 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	695b      	ldr	r3, [r3, #20]
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	6810      	ldr	r0, [r2, #0]
 8012fac:	f107 0208 	add.w	r2, r7, #8
 8012fb0:	2100      	movs	r1, #0
 8012fb2:	4798      	blx	r3
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	da07      	bge.n	8012fca <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8012fba:	f06f 0304 	mvn.w	r3, #4
 8012fbe:	613b      	str	r3, [r7, #16]
                 break;
 8012fc0:	e010      	b.n	8012fe4 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8012fc2:	f06f 0301 	mvn.w	r3, #1
 8012fc6:	613b      	str	r3, [r7, #16]
               break;
 8012fc8:	e00c      	b.n	8012fe4 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d1dd      	bne.n	8012f90 <DP83848_Init+0xc6>
 8012fd4:	e006      	b.n	8012fe4 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8012fd6:	f06f 0304 	mvn.w	r3, #4
 8012fda:	613b      	str	r3, [r7, #16]
 8012fdc:	e002      	b.n	8012fe4 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8012fde:	f06f 0303 	mvn.w	r3, #3
 8012fe2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d112      	bne.n	8013010 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	699b      	ldr	r3, [r3, #24]
 8012fee:	4798      	blx	r3
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8012ff4:	bf00      	nop
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	699b      	ldr	r3, [r3, #24]
 8012ffa:	4798      	blx	r3
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	461a      	mov	r2, r3
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8013008:	d9f5      	bls.n	8012ff6 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2201      	movs	r2, #1
 801300e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8013010:	693b      	ldr	r3, [r7, #16]
 }
 8013012:	4618      	mov	r0, r3
 8013014:	3718      	adds	r7, #24
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}

0801301a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 801301a:	b580      	push	{r7, lr}
 801301c:	b084      	sub	sp, #16
 801301e:	af00      	add	r7, sp, #0
 8013020:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8013022:	2300      	movs	r3, #0
 8013024:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	695b      	ldr	r3, [r3, #20]
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	6810      	ldr	r0, [r2, #0]
 801302e:	f107 020c 	add.w	r2, r7, #12
 8013032:	2101      	movs	r1, #1
 8013034:	4798      	blx	r3
 8013036:	4603      	mov	r3, r0
 8013038:	2b00      	cmp	r3, #0
 801303a:	da02      	bge.n	8013042 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 801303c:	f06f 0304 	mvn.w	r3, #4
 8013040:	e06e      	b.n	8013120 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	695b      	ldr	r3, [r3, #20]
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	6810      	ldr	r0, [r2, #0]
 801304a:	f107 020c 	add.w	r2, r7, #12
 801304e:	2101      	movs	r1, #1
 8013050:	4798      	blx	r3
 8013052:	4603      	mov	r3, r0
 8013054:	2b00      	cmp	r3, #0
 8013056:	da02      	bge.n	801305e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8013058:	f06f 0304 	mvn.w	r3, #4
 801305c:	e060      	b.n	8013120 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	f003 0304 	and.w	r3, r3, #4
 8013064:	2b00      	cmp	r3, #0
 8013066:	d101      	bne.n	801306c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8013068:	2301      	movs	r3, #1
 801306a:	e059      	b.n	8013120 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	695b      	ldr	r3, [r3, #20]
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	6810      	ldr	r0, [r2, #0]
 8013074:	f107 020c 	add.w	r2, r7, #12
 8013078:	2100      	movs	r1, #0
 801307a:	4798      	blx	r3
 801307c:	4603      	mov	r3, r0
 801307e:	2b00      	cmp	r3, #0
 8013080:	da02      	bge.n	8013088 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8013082:	f06f 0304 	mvn.w	r3, #4
 8013086:	e04b      	b.n	8013120 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801308e:	2b00      	cmp	r3, #0
 8013090:	d11b      	bne.n	80130ca <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013098:	2b00      	cmp	r3, #0
 801309a:	d006      	beq.n	80130aa <DP83848_GetLinkState+0x90>
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80130a6:	2302      	movs	r3, #2
 80130a8:	e03a      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d001      	beq.n	80130b8 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80130b4:	2303      	movs	r3, #3
 80130b6:	e033      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d001      	beq.n	80130c6 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80130c2:	2304      	movs	r3, #4
 80130c4:	e02c      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80130c6:	2305      	movs	r3, #5
 80130c8:	e02a      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	695b      	ldr	r3, [r3, #20]
 80130ce:	687a      	ldr	r2, [r7, #4]
 80130d0:	6810      	ldr	r0, [r2, #0]
 80130d2:	f107 020c 	add.w	r2, r7, #12
 80130d6:	2110      	movs	r1, #16
 80130d8:	4798      	blx	r3
 80130da:	4603      	mov	r3, r0
 80130dc:	2b00      	cmp	r3, #0
 80130de:	da02      	bge.n	80130e6 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80130e0:	f06f 0304 	mvn.w	r3, #4
 80130e4:	e01c      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d101      	bne.n	80130f4 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80130f0:	2306      	movs	r3, #6
 80130f2:	e015      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f003 0306 	and.w	r3, r3, #6
 80130fa:	2b04      	cmp	r3, #4
 80130fc:	d101      	bne.n	8013102 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80130fe:	2302      	movs	r3, #2
 8013100:	e00e      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f003 0306 	and.w	r3, r3, #6
 8013108:	2b00      	cmp	r3, #0
 801310a:	d101      	bne.n	8013110 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 801310c:	2303      	movs	r3, #3
 801310e:	e007      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f003 0306 	and.w	r3, r3, #6
 8013116:	2b06      	cmp	r3, #6
 8013118:	d101      	bne.n	801311e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801311a:	2304      	movs	r3, #4
 801311c:	e000      	b.n	8013120 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 801311e:	2305      	movs	r3, #5
    }
  }
}
 8013120:	4618      	mov	r0, r3
 8013122:	3710      	adds	r7, #16
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 801312c:	4b0b      	ldr	r3, [pc, #44]	; (801315c <HAL_Init+0x34>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4a0a      	ldr	r2, [pc, #40]	; (801315c <HAL_Init+0x34>)
 8013132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013136:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013138:	4b08      	ldr	r3, [pc, #32]	; (801315c <HAL_Init+0x34>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	4a07      	ldr	r2, [pc, #28]	; (801315c <HAL_Init+0x34>)
 801313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013144:	2003      	movs	r0, #3
 8013146:	f001 f825 	bl	8014194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801314a:	2007      	movs	r0, #7
 801314c:	f000 f808 	bl	8013160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8013150:	f7ff f856 	bl	8012200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8013154:	2300      	movs	r3, #0
}
 8013156:	4618      	mov	r0, r3
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	40023c00 	.word	0x40023c00

08013160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013168:	4b12      	ldr	r3, [pc, #72]	; (80131b4 <HAL_InitTick+0x54>)
 801316a:	681a      	ldr	r2, [r3, #0]
 801316c:	4b12      	ldr	r3, [pc, #72]	; (80131b8 <HAL_InitTick+0x58>)
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	4619      	mov	r1, r3
 8013172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013176:	fbb3 f3f1 	udiv	r3, r3, r1
 801317a:	fbb2 f3f3 	udiv	r3, r2, r3
 801317e:	4618      	mov	r0, r3
 8013180:	f001 f83d 	bl	80141fe <HAL_SYSTICK_Config>
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d001      	beq.n	801318e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801318a:	2301      	movs	r3, #1
 801318c:	e00e      	b.n	80131ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2b0f      	cmp	r3, #15
 8013192:	d80a      	bhi.n	80131aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013194:	2200      	movs	r2, #0
 8013196:	6879      	ldr	r1, [r7, #4]
 8013198:	f04f 30ff 	mov.w	r0, #4294967295
 801319c:	f001 f805 	bl	80141aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80131a0:	4a06      	ldr	r2, [pc, #24]	; (80131bc <HAL_InitTick+0x5c>)
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80131a6:	2300      	movs	r3, #0
 80131a8:	e000      	b.n	80131ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80131aa:	2301      	movs	r3, #1
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3708      	adds	r7, #8
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	2000011c 	.word	0x2000011c
 80131b8:	20000124 	.word	0x20000124
 80131bc:	20000120 	.word	0x20000120

080131c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80131c0:	b480      	push	{r7}
 80131c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80131c4:	4b06      	ldr	r3, [pc, #24]	; (80131e0 <HAL_IncTick+0x20>)
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	461a      	mov	r2, r3
 80131ca:	4b06      	ldr	r3, [pc, #24]	; (80131e4 <HAL_IncTick+0x24>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4413      	add	r3, r2
 80131d0:	4a04      	ldr	r2, [pc, #16]	; (80131e4 <HAL_IncTick+0x24>)
 80131d2:	6013      	str	r3, [r2, #0]
}
 80131d4:	bf00      	nop
 80131d6:	46bd      	mov	sp, r7
 80131d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131dc:	4770      	bx	lr
 80131de:	bf00      	nop
 80131e0:	20000124 	.word	0x20000124
 80131e4:	2000b108 	.word	0x2000b108

080131e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80131e8:	b480      	push	{r7}
 80131ea:	af00      	add	r7, sp, #0
  return uwTick;
 80131ec:	4b03      	ldr	r3, [pc, #12]	; (80131fc <HAL_GetTick+0x14>)
 80131ee:	681b      	ldr	r3, [r3, #0]
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	46bd      	mov	sp, r7
 80131f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f8:	4770      	bx	lr
 80131fa:	bf00      	nop
 80131fc:	2000b108 	.word	0x2000b108

08013200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b084      	sub	sp, #16
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013208:	f7ff ffee 	bl	80131e8 <HAL_GetTick>
 801320c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013218:	d005      	beq.n	8013226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801321a:	4b0a      	ldr	r3, [pc, #40]	; (8013244 <HAL_Delay+0x44>)
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	461a      	mov	r2, r3
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	4413      	add	r3, r2
 8013224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8013226:	bf00      	nop
 8013228:	f7ff ffde 	bl	80131e8 <HAL_GetTick>
 801322c:	4602      	mov	r2, r0
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	1ad3      	subs	r3, r2, r3
 8013232:	68fa      	ldr	r2, [r7, #12]
 8013234:	429a      	cmp	r2, r3
 8013236:	d8f7      	bhi.n	8013228 <HAL_Delay+0x28>
  {
  }
}
 8013238:	bf00      	nop
 801323a:	bf00      	nop
 801323c:	3710      	adds	r7, #16
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}
 8013242:	bf00      	nop
 8013244:	20000124 	.word	0x20000124

08013248 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d101      	bne.n	801325a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8013256:	2301      	movs	r3, #1
 8013258:	e11c      	b.n	8013494 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013260:	b2db      	uxtb	r3, r3
 8013262:	2b00      	cmp	r3, #0
 8013264:	d131      	bne.n	80132ca <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	4a8c      	ldr	r2, [pc, #560]	; (801349c <HAL_CAN_Init+0x254>)
 801326a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	4a8c      	ldr	r2, [pc, #560]	; (80134a0 <HAL_CAN_Init+0x258>)
 8013270:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	4a8b      	ldr	r2, [pc, #556]	; (80134a4 <HAL_CAN_Init+0x25c>)
 8013276:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	4a8b      	ldr	r2, [pc, #556]	; (80134a8 <HAL_CAN_Init+0x260>)
 801327c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	4a8a      	ldr	r2, [pc, #552]	; (80134ac <HAL_CAN_Init+0x264>)
 8013282:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	4a8a      	ldr	r2, [pc, #552]	; (80134b0 <HAL_CAN_Init+0x268>)
 8013288:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	4a89      	ldr	r2, [pc, #548]	; (80134b4 <HAL_CAN_Init+0x26c>)
 801328e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	4a89      	ldr	r2, [pc, #548]	; (80134b8 <HAL_CAN_Init+0x270>)
 8013294:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	4a88      	ldr	r2, [pc, #544]	; (80134bc <HAL_CAN_Init+0x274>)
 801329a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	4a88      	ldr	r2, [pc, #544]	; (80134c0 <HAL_CAN_Init+0x278>)
 80132a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	4a87      	ldr	r2, [pc, #540]	; (80134c4 <HAL_CAN_Init+0x27c>)
 80132a6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	4a87      	ldr	r2, [pc, #540]	; (80134c8 <HAL_CAN_Init+0x280>)
 80132ac:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	4a86      	ldr	r2, [pc, #536]	; (80134cc <HAL_CAN_Init+0x284>)
 80132b2:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d102      	bne.n	80132c2 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	4a84      	ldr	r2, [pc, #528]	; (80134d0 <HAL_CAN_Init+0x288>)
 80132c0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	f042 0201 	orr.w	r2, r2, #1
 80132d8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80132da:	f7ff ff85 	bl	80131e8 <HAL_GetTick>
 80132de:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80132e0:	e012      	b.n	8013308 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80132e2:	f7ff ff81 	bl	80131e8 <HAL_GetTick>
 80132e6:	4602      	mov	r2, r0
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	2b0a      	cmp	r3, #10
 80132ee:	d90b      	bls.n	8013308 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2205      	movs	r2, #5
 8013300:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8013304:	2301      	movs	r3, #1
 8013306:	e0c5      	b.n	8013494 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	f003 0301 	and.w	r3, r3, #1
 8013312:	2b00      	cmp	r3, #0
 8013314:	d0e5      	beq.n	80132e2 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	681a      	ldr	r2, [r3, #0]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	f022 0202 	bic.w	r2, r2, #2
 8013324:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8013326:	f7ff ff5f 	bl	80131e8 <HAL_GetTick>
 801332a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801332c:	e012      	b.n	8013354 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801332e:	f7ff ff5b 	bl	80131e8 <HAL_GetTick>
 8013332:	4602      	mov	r2, r0
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	1ad3      	subs	r3, r2, r3
 8013338:	2b0a      	cmp	r3, #10
 801333a:	d90b      	bls.n	8013354 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013340:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2205      	movs	r2, #5
 801334c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8013350:	2301      	movs	r3, #1
 8013352:	e09f      	b.n	8013494 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	f003 0302 	and.w	r3, r3, #2
 801335e:	2b00      	cmp	r3, #0
 8013360:	d1e5      	bne.n	801332e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	7e1b      	ldrb	r3, [r3, #24]
 8013366:	2b01      	cmp	r3, #1
 8013368:	d108      	bne.n	801337c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	681a      	ldr	r2, [r3, #0]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013378:	601a      	str	r2, [r3, #0]
 801337a:	e007      	b.n	801338c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801338a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	7e5b      	ldrb	r3, [r3, #25]
 8013390:	2b01      	cmp	r3, #1
 8013392:	d108      	bne.n	80133a6 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80133a2:	601a      	str	r2, [r3, #0]
 80133a4:	e007      	b.n	80133b6 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80133b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	7e9b      	ldrb	r3, [r3, #26]
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d108      	bne.n	80133d0 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f042 0220 	orr.w	r2, r2, #32
 80133cc:	601a      	str	r2, [r3, #0]
 80133ce:	e007      	b.n	80133e0 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	f022 0220 	bic.w	r2, r2, #32
 80133de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	7edb      	ldrb	r3, [r3, #27]
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d108      	bne.n	80133fa <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	681a      	ldr	r2, [r3, #0]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f022 0210 	bic.w	r2, r2, #16
 80133f6:	601a      	str	r2, [r3, #0]
 80133f8:	e007      	b.n	801340a <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	681a      	ldr	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f042 0210 	orr.w	r2, r2, #16
 8013408:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	7f1b      	ldrb	r3, [r3, #28]
 801340e:	2b01      	cmp	r3, #1
 8013410:	d108      	bne.n	8013424 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	681a      	ldr	r2, [r3, #0]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f042 0208 	orr.w	r2, r2, #8
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	e007      	b.n	8013434 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	681a      	ldr	r2, [r3, #0]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f022 0208 	bic.w	r2, r2, #8
 8013432:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	7f5b      	ldrb	r3, [r3, #29]
 8013438:	2b01      	cmp	r3, #1
 801343a:	d108      	bne.n	801344e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	681a      	ldr	r2, [r3, #0]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	f042 0204 	orr.w	r2, r2, #4
 801344a:	601a      	str	r2, [r3, #0]
 801344c:	e007      	b.n	801345e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	681a      	ldr	r2, [r3, #0]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f022 0204 	bic.w	r2, r2, #4
 801345c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	689a      	ldr	r2, [r3, #8]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	68db      	ldr	r3, [r3, #12]
 8013466:	431a      	orrs	r2, r3
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	691b      	ldr	r3, [r3, #16]
 801346c:	431a      	orrs	r2, r3
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	695b      	ldr	r3, [r3, #20]
 8013472:	ea42 0103 	orr.w	r1, r2, r3
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	1e5a      	subs	r2, r3, #1
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	430a      	orrs	r2, r1
 8013482:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2200      	movs	r2, #0
 8013488:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2201      	movs	r2, #1
 801348e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8013492:	2300      	movs	r3, #0
}
 8013494:	4618      	mov	r0, r3
 8013496:	3710      	adds	r7, #16
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	0800d6bd 	.word	0x0800d6bd
 80134a0:	08013f8f 	.word	0x08013f8f
 80134a4:	0800d7d9 	.word	0x0800d7d9
 80134a8:	08013fa3 	.word	0x08013fa3
 80134ac:	08013f17 	.word	0x08013f17
 80134b0:	08013f2b 	.word	0x08013f2b
 80134b4:	08013f3f 	.word	0x08013f3f
 80134b8:	08013f53 	.word	0x08013f53
 80134bc:	08013f67 	.word	0x08013f67
 80134c0:	08013f7b 	.word	0x08013f7b
 80134c4:	08013fb7 	.word	0x08013fb7
 80134c8:	08013fcb 	.word	0x08013fcb
 80134cc:	08013fdf 	.word	0x08013fdf
 80134d0:	0800cf21 	.word	0x0800cf21

080134d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80134d4:	b480      	push	{r7}
 80134d6:	b087      	sub	sp, #28
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80134ec:	7cfb      	ldrb	r3, [r7, #19]
 80134ee:	2b01      	cmp	r3, #1
 80134f0:	d003      	beq.n	80134fa <HAL_CAN_ConfigFilter+0x26>
 80134f2:	7cfb      	ldrb	r3, [r7, #19]
 80134f4:	2b02      	cmp	r3, #2
 80134f6:	f040 80c7 	bne.w	8013688 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	4a69      	ldr	r2, [pc, #420]	; (80136a4 <HAL_CAN_ConfigFilter+0x1d0>)
 8013500:	4293      	cmp	r3, r2
 8013502:	d001      	beq.n	8013508 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8013504:	4b68      	ldr	r3, [pc, #416]	; (80136a8 <HAL_CAN_ConfigFilter+0x1d4>)
 8013506:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801350e:	f043 0201 	orr.w	r2, r3, #1
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	4a63      	ldr	r2, [pc, #396]	; (80136a8 <HAL_CAN_ConfigFilter+0x1d4>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d111      	bne.n	8013544 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013526:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801353a:	021b      	lsls	r3, r3, #8
 801353c:	431a      	orrs	r2, r3
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	695b      	ldr	r3, [r3, #20]
 8013548:	f003 031f 	and.w	r3, r3, #31
 801354c:	2201      	movs	r2, #1
 801354e:	fa02 f303 	lsl.w	r3, r2, r3
 8013552:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	43db      	mvns	r3, r3
 801355e:	401a      	ands	r2, r3
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	69db      	ldr	r3, [r3, #28]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d123      	bne.n	80135b6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	43db      	mvns	r3, r3
 8013578:	401a      	ands	r2, r3
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	68db      	ldr	r3, [r3, #12]
 8013584:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801358c:	683a      	ldr	r2, [r7, #0]
 801358e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8013590:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	3248      	adds	r2, #72	; 0x48
 8013596:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	689b      	ldr	r3, [r3, #8]
 801359e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80135aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80135ac:	6979      	ldr	r1, [r7, #20]
 80135ae:	3348      	adds	r3, #72	; 0x48
 80135b0:	00db      	lsls	r3, r3, #3
 80135b2:	440b      	add	r3, r1
 80135b4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	69db      	ldr	r3, [r3, #28]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d122      	bne.n	8013604 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	431a      	orrs	r2, r3
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80135da:	683a      	ldr	r2, [r7, #0]
 80135dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80135de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	3248      	adds	r2, #72	; 0x48
 80135e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	689b      	ldr	r3, [r3, #8]
 80135ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80135f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80135fa:	6979      	ldr	r1, [r7, #20]
 80135fc:	3348      	adds	r3, #72	; 0x48
 80135fe:	00db      	lsls	r3, r3, #3
 8013600:	440b      	add	r3, r1
 8013602:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	699b      	ldr	r3, [r3, #24]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d109      	bne.n	8013620 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	43db      	mvns	r3, r3
 8013616:	401a      	ands	r2, r3
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801361e:	e007      	b.n	8013630 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	431a      	orrs	r2, r3
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	691b      	ldr	r3, [r3, #16]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d109      	bne.n	801364c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	43db      	mvns	r3, r3
 8013642:	401a      	ands	r2, r3
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801364a:	e007      	b.n	801365c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	431a      	orrs	r2, r3
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	6a1b      	ldr	r3, [r3, #32]
 8013660:	2b01      	cmp	r3, #1
 8013662:	d107      	bne.n	8013674 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	431a      	orrs	r2, r3
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801367a:	f023 0201 	bic.w	r2, r3, #1
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8013684:	2300      	movs	r3, #0
 8013686:	e006      	b.n	8013696 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801368c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8013694:	2301      	movs	r3, #1
  }
}
 8013696:	4618      	mov	r0, r3
 8013698:	371c      	adds	r7, #28
 801369a:	46bd      	mov	sp, r7
 801369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a0:	4770      	bx	lr
 80136a2:	bf00      	nop
 80136a4:	40003400 	.word	0x40003400
 80136a8:	40006400 	.word	0x40006400

080136ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	2b01      	cmp	r3, #1
 80136be:	d12e      	bne.n	801371e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2202      	movs	r2, #2
 80136c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f022 0201 	bic.w	r2, r2, #1
 80136d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80136d8:	f7ff fd86 	bl	80131e8 <HAL_GetTick>
 80136dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80136de:	e012      	b.n	8013706 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80136e0:	f7ff fd82 	bl	80131e8 <HAL_GetTick>
 80136e4:	4602      	mov	r2, r0
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	2b0a      	cmp	r3, #10
 80136ec:	d90b      	bls.n	8013706 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2205      	movs	r2, #5
 80136fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8013702:	2301      	movs	r3, #1
 8013704:	e012      	b.n	801372c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	f003 0301 	and.w	r3, r3, #1
 8013710:	2b00      	cmp	r3, #0
 8013712:	d1e5      	bne.n	80136e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2200      	movs	r2, #0
 8013718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801371a:	2300      	movs	r3, #0
 801371c:	e006      	b.n	801372c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013722:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801372a:	2301      	movs	r3, #1
  }
}
 801372c:	4618      	mov	r0, r3
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8013734:	b480      	push	{r7}
 8013736:	b089      	sub	sp, #36	; 0x24
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
 8013740:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013748:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	689b      	ldr	r3, [r3, #8]
 8013750:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8013752:	7ffb      	ldrb	r3, [r7, #31]
 8013754:	2b01      	cmp	r3, #1
 8013756:	d003      	beq.n	8013760 <HAL_CAN_AddTxMessage+0x2c>
 8013758:	7ffb      	ldrb	r3, [r7, #31]
 801375a:	2b02      	cmp	r3, #2
 801375c:	f040 80ad 	bne.w	80138ba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013766:	2b00      	cmp	r3, #0
 8013768:	d10a      	bne.n	8013780 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8013770:	2b00      	cmp	r3, #0
 8013772:	d105      	bne.n	8013780 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801377a:	2b00      	cmp	r3, #0
 801377c:	f000 8095 	beq.w	80138aa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8013780:	69bb      	ldr	r3, [r7, #24]
 8013782:	0e1b      	lsrs	r3, r3, #24
 8013784:	f003 0303 	and.w	r3, r3, #3
 8013788:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 801378a:	2201      	movs	r2, #1
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	409a      	lsls	r2, r3
 8013790:	683b      	ldr	r3, [r7, #0]
 8013792:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	689b      	ldr	r3, [r3, #8]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d10d      	bne.n	80137b8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80137a6:	68f9      	ldr	r1, [r7, #12]
 80137a8:	6809      	ldr	r1, [r1, #0]
 80137aa:	431a      	orrs	r2, r3
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	3318      	adds	r3, #24
 80137b0:	011b      	lsls	r3, r3, #4
 80137b2:	440b      	add	r3, r1
 80137b4:	601a      	str	r2, [r3, #0]
 80137b6:	e00f      	b.n	80137d8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80137c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80137c4:	68bb      	ldr	r3, [r7, #8]
 80137c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80137c8:	68f9      	ldr	r1, [r7, #12]
 80137ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80137cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	3318      	adds	r3, #24
 80137d2:	011b      	lsls	r3, r3, #4
 80137d4:	440b      	add	r3, r1
 80137d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	6819      	ldr	r1, [r3, #0]
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	691a      	ldr	r2, [r3, #16]
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	3318      	adds	r3, #24
 80137e4:	011b      	lsls	r3, r3, #4
 80137e6:	440b      	add	r3, r1
 80137e8:	3304      	adds	r3, #4
 80137ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	7d1b      	ldrb	r3, [r3, #20]
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d111      	bne.n	8013818 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	3318      	adds	r3, #24
 80137fc:	011b      	lsls	r3, r3, #4
 80137fe:	4413      	add	r3, r2
 8013800:	3304      	adds	r3, #4
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	68fa      	ldr	r2, [r7, #12]
 8013806:	6811      	ldr	r1, [r2, #0]
 8013808:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	3318      	adds	r3, #24
 8013810:	011b      	lsls	r3, r3, #4
 8013812:	440b      	add	r3, r1
 8013814:	3304      	adds	r3, #4
 8013816:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	3307      	adds	r3, #7
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	061a      	lsls	r2, r3, #24
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	3306      	adds	r3, #6
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	041b      	lsls	r3, r3, #16
 8013828:	431a      	orrs	r2, r3
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	3305      	adds	r3, #5
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	021b      	lsls	r3, r3, #8
 8013832:	4313      	orrs	r3, r2
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	3204      	adds	r2, #4
 8013838:	7812      	ldrb	r2, [r2, #0]
 801383a:	4610      	mov	r0, r2
 801383c:	68fa      	ldr	r2, [r7, #12]
 801383e:	6811      	ldr	r1, [r2, #0]
 8013840:	ea43 0200 	orr.w	r2, r3, r0
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	011b      	lsls	r3, r3, #4
 8013848:	440b      	add	r3, r1
 801384a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801384e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	3303      	adds	r3, #3
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	061a      	lsls	r2, r3, #24
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	3302      	adds	r3, #2
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	041b      	lsls	r3, r3, #16
 8013860:	431a      	orrs	r2, r3
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	3301      	adds	r3, #1
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	021b      	lsls	r3, r3, #8
 801386a:	4313      	orrs	r3, r2
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	7812      	ldrb	r2, [r2, #0]
 8013870:	4610      	mov	r0, r2
 8013872:	68fa      	ldr	r2, [r7, #12]
 8013874:	6811      	ldr	r1, [r2, #0]
 8013876:	ea43 0200 	orr.w	r2, r3, r0
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	011b      	lsls	r3, r3, #4
 801387e:	440b      	add	r3, r1
 8013880:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8013884:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	3318      	adds	r3, #24
 801388e:	011b      	lsls	r3, r3, #4
 8013890:	4413      	add	r3, r2
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	68fa      	ldr	r2, [r7, #12]
 8013896:	6811      	ldr	r1, [r2, #0]
 8013898:	f043 0201 	orr.w	r2, r3, #1
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	3318      	adds	r3, #24
 80138a0:	011b      	lsls	r3, r3, #4
 80138a2:	440b      	add	r3, r1
 80138a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80138a6:	2300      	movs	r3, #0
 80138a8:	e00e      	b.n	80138c8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80138b6:	2301      	movs	r3, #1
 80138b8:	e006      	b.n	80138c8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80138c6:	2301      	movs	r3, #1
  }
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3724      	adds	r7, #36	; 0x24
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80138d4:	b480      	push	{r7}
 80138d6:	b085      	sub	sp, #20
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80138de:	2300      	movs	r3, #0
 80138e0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80138e8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80138ea:	7afb      	ldrb	r3, [r7, #11]
 80138ec:	2b01      	cmp	r3, #1
 80138ee:	d002      	beq.n	80138f6 <HAL_CAN_IsTxMessagePending+0x22>
 80138f0:	7afb      	ldrb	r3, [r7, #11]
 80138f2:	2b02      	cmp	r3, #2
 80138f4:	d10b      	bne.n	801390e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	689a      	ldr	r2, [r3, #8]
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	069b      	lsls	r3, r3, #26
 8013900:	401a      	ands	r2, r3
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	069b      	lsls	r3, r3, #26
 8013906:	429a      	cmp	r2, r3
 8013908:	d001      	beq.n	801390e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 801390a:	2301      	movs	r3, #1
 801390c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 801390e:	68fb      	ldr	r3, [r7, #12]
}
 8013910:	4618      	mov	r0, r3
 8013912:	3714      	adds	r7, #20
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr

0801391c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801391c:	b480      	push	{r7}
 801391e:	b087      	sub	sp, #28
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
 8013928:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013930:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8013932:	7dfb      	ldrb	r3, [r7, #23]
 8013934:	2b01      	cmp	r3, #1
 8013936:	d003      	beq.n	8013940 <HAL_CAN_GetRxMessage+0x24>
 8013938:	7dfb      	ldrb	r3, [r7, #23]
 801393a:	2b02      	cmp	r3, #2
 801393c:	f040 80f3 	bne.w	8013b26 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d10e      	bne.n	8013964 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	f003 0303 	and.w	r3, r3, #3
 8013950:	2b00      	cmp	r3, #0
 8013952:	d116      	bne.n	8013982 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013958:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8013960:	2301      	movs	r3, #1
 8013962:	e0e7      	b.n	8013b34 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	691b      	ldr	r3, [r3, #16]
 801396a:	f003 0303 	and.w	r3, r3, #3
 801396e:	2b00      	cmp	r3, #0
 8013970:	d107      	bne.n	8013982 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013976:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801397e:	2301      	movs	r3, #1
 8013980:	e0d8      	b.n	8013b34 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	331b      	adds	r3, #27
 801398a:	011b      	lsls	r3, r3, #4
 801398c:	4413      	add	r3, r2
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f003 0204 	and.w	r2, r3, #4
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	689b      	ldr	r3, [r3, #8]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d10c      	bne.n	80139ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	681a      	ldr	r2, [r3, #0]
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	331b      	adds	r3, #27
 80139a8:	011b      	lsls	r3, r3, #4
 80139aa:	4413      	add	r3, r2
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	0d5b      	lsrs	r3, r3, #21
 80139b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	601a      	str	r2, [r3, #0]
 80139b8:	e00b      	b.n	80139d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	331b      	adds	r3, #27
 80139c2:	011b      	lsls	r3, r3, #4
 80139c4:	4413      	add	r3, r2
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	08db      	lsrs	r3, r3, #3
 80139ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	331b      	adds	r3, #27
 80139da:	011b      	lsls	r3, r3, #4
 80139dc:	4413      	add	r3, r2
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	f003 0202 	and.w	r2, r3, #2
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	331b      	adds	r3, #27
 80139f0:	011b      	lsls	r3, r3, #4
 80139f2:	4413      	add	r3, r2
 80139f4:	3304      	adds	r3, #4
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	f003 020f 	and.w	r2, r3, #15
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	331b      	adds	r3, #27
 8013a08:	011b      	lsls	r3, r3, #4
 8013a0a:	4413      	add	r3, r2
 8013a0c:	3304      	adds	r3, #4
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	0a1b      	lsrs	r3, r3, #8
 8013a12:	b2da      	uxtb	r2, r3
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	681a      	ldr	r2, [r3, #0]
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	331b      	adds	r3, #27
 8013a20:	011b      	lsls	r3, r3, #4
 8013a22:	4413      	add	r3, r2
 8013a24:	3304      	adds	r3, #4
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	0c1b      	lsrs	r3, r3, #16
 8013a2a:	b29a      	uxth	r2, r3
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681a      	ldr	r2, [r3, #0]
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	011b      	lsls	r3, r3, #4
 8013a38:	4413      	add	r3, r2
 8013a3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	b2da      	uxtb	r2, r3
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	011b      	lsls	r3, r3, #4
 8013a4e:	4413      	add	r3, r2
 8013a50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	0a1a      	lsrs	r2, r3, #8
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	3301      	adds	r3, #1
 8013a5c:	b2d2      	uxtb	r2, r2
 8013a5e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	011b      	lsls	r3, r3, #4
 8013a68:	4413      	add	r3, r2
 8013a6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	0c1a      	lsrs	r2, r3, #16
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	3302      	adds	r3, #2
 8013a76:	b2d2      	uxtb	r2, r2
 8013a78:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	011b      	lsls	r3, r3, #4
 8013a82:	4413      	add	r3, r2
 8013a84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	0e1a      	lsrs	r2, r3, #24
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	3303      	adds	r3, #3
 8013a90:	b2d2      	uxtb	r2, r2
 8013a92:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	681a      	ldr	r2, [r3, #0]
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	011b      	lsls	r3, r3, #4
 8013a9c:	4413      	add	r3, r2
 8013a9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8013aa2:	681a      	ldr	r2, [r3, #0]
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	3304      	adds	r3, #4
 8013aa8:	b2d2      	uxtb	r2, r2
 8013aaa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	011b      	lsls	r3, r3, #4
 8013ab4:	4413      	add	r3, r2
 8013ab6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	0a1a      	lsrs	r2, r3, #8
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	3305      	adds	r3, #5
 8013ac2:	b2d2      	uxtb	r2, r2
 8013ac4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	011b      	lsls	r3, r3, #4
 8013ace:	4413      	add	r3, r2
 8013ad0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	0c1a      	lsrs	r2, r3, #16
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	3306      	adds	r3, #6
 8013adc:	b2d2      	uxtb	r2, r2
 8013ade:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	011b      	lsls	r3, r3, #4
 8013ae8:	4413      	add	r3, r2
 8013aea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	0e1a      	lsrs	r2, r3, #24
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	3307      	adds	r3, #7
 8013af6:	b2d2      	uxtb	r2, r2
 8013af8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d108      	bne.n	8013b12 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	68da      	ldr	r2, [r3, #12]
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	f042 0220 	orr.w	r2, r2, #32
 8013b0e:	60da      	str	r2, [r3, #12]
 8013b10:	e007      	b.n	8013b22 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	691a      	ldr	r2, [r3, #16]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	f042 0220 	orr.w	r2, r2, #32
 8013b20:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8013b22:	2300      	movs	r3, #0
 8013b24:	e006      	b.n	8013b34 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8013b32:	2301      	movs	r3, #1
  }
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	371c      	adds	r7, #28
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr

08013b40 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8013b40:	b480      	push	{r7}
 8013b42:	b085      	sub	sp, #20
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b50:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8013b52:	7bfb      	ldrb	r3, [r7, #15]
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d002      	beq.n	8013b5e <HAL_CAN_ActivateNotification+0x1e>
 8013b58:	7bfb      	ldrb	r3, [r7, #15]
 8013b5a:	2b02      	cmp	r3, #2
 8013b5c:	d109      	bne.n	8013b72 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	6959      	ldr	r1, [r3, #20]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	683a      	ldr	r2, [r7, #0]
 8013b6a:	430a      	orrs	r2, r1
 8013b6c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	e006      	b.n	8013b80 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8013b7e:	2301      	movs	r3, #1
  }
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3714      	adds	r7, #20
 8013b84:	46bd      	mov	sp, r7
 8013b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8a:	4770      	bx	lr

08013b8c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b08a      	sub	sp, #40	; 0x28
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8013b94:	2300      	movs	r3, #0
 8013b96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	695b      	ldr	r3, [r3, #20]
 8013b9e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	68db      	ldr	r3, [r3, #12]
 8013bb6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	691b      	ldr	r3, [r3, #16]
 8013bbe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	699b      	ldr	r3, [r3, #24]
 8013bc6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8013bc8:	6a3b      	ldr	r3, [r7, #32]
 8013bca:	f003 0301 	and.w	r3, r3, #1
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	f000 8083 	beq.w	8013cda <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	f003 0301 	and.w	r3, r3, #1
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d025      	beq.n	8013c2a <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2201      	movs	r2, #1
 8013be4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	f003 0302 	and.w	r3, r3, #2
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d004      	beq.n	8013bfa <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	4798      	blx	r3
 8013bf8:	e017      	b.n	8013c2a <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	f003 0304 	and.w	r3, r3, #4
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d004      	beq.n	8013c0e <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8013c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8013c0c:	e00d      	b.n	8013c2a <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8013c0e:	69bb      	ldr	r3, [r7, #24]
 8013c10:	f003 0308 	and.w	r3, r3, #8
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d004      	beq.n	8013c22 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8013c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8013c20:	e003      	b.n	8013c2a <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8013c2a:	69bb      	ldr	r3, [r7, #24]
 8013c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d026      	beq.n	8013c82 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013c3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8013c3e:	69bb      	ldr	r3, [r7, #24]
 8013c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d004      	beq.n	8013c52 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	4798      	blx	r3
 8013c50:	e017      	b.n	8013c82 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8013c52:	69bb      	ldr	r3, [r7, #24]
 8013c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d004      	beq.n	8013c66 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013c62:	627b      	str	r3, [r7, #36]	; 0x24
 8013c64:	e00d      	b.n	8013c82 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8013c66:	69bb      	ldr	r3, [r7, #24]
 8013c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d004      	beq.n	8013c7a <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8013c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013c76:	627b      	str	r3, [r7, #36]	; 0x24
 8013c78:	e003      	b.n	8013c82 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8013c82:	69bb      	ldr	r3, [r7, #24]
 8013c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d026      	beq.n	8013cda <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013c94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d004      	beq.n	8013caa <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	4798      	blx	r3
 8013ca8:	e017      	b.n	8013cda <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d004      	beq.n	8013cbe <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8013cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013cba:	627b      	str	r3, [r7, #36]	; 0x24
 8013cbc:	e00d      	b.n	8013cda <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8013cbe:	69bb      	ldr	r3, [r7, #24]
 8013cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d004      	beq.n	8013cd2 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8013cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013cce:	627b      	str	r3, [r7, #36]	; 0x24
 8013cd0:	e003      	b.n	8013cda <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8013cda:	6a3b      	ldr	r3, [r7, #32]
 8013cdc:	f003 0308 	and.w	r3, r3, #8
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d00c      	beq.n	8013cfe <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	f003 0310 	and.w	r3, r3, #16
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d007      	beq.n	8013cfe <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8013cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013cf4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2210      	movs	r2, #16
 8013cfc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8013cfe:	6a3b      	ldr	r3, [r7, #32]
 8013d00:	f003 0304 	and.w	r3, r3, #4
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00c      	beq.n	8013d22 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	f003 0308 	and.w	r3, r3, #8
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d007      	beq.n	8013d22 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2208      	movs	r2, #8
 8013d18:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8013d22:	6a3b      	ldr	r3, [r7, #32]
 8013d24:	f003 0302 	and.w	r3, r3, #2
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d00a      	beq.n	8013d42 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	68db      	ldr	r3, [r3, #12]
 8013d32:	f003 0303 	and.w	r3, r3, #3
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d003      	beq.n	8013d42 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8013d42:	6a3b      	ldr	r3, [r7, #32]
 8013d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d00c      	beq.n	8013d66 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	f003 0310 	and.w	r3, r3, #16
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d007      	beq.n	8013d66 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8013d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013d5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2210      	movs	r2, #16
 8013d64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8013d66:	6a3b      	ldr	r3, [r7, #32]
 8013d68:	f003 0320 	and.w	r3, r3, #32
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d00c      	beq.n	8013d8a <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	f003 0308 	and.w	r3, r3, #8
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d007      	beq.n	8013d8a <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2208      	movs	r2, #8
 8013d80:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8013d8a:	6a3b      	ldr	r3, [r7, #32]
 8013d8c:	f003 0310 	and.w	r3, r3, #16
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d00a      	beq.n	8013daa <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	691b      	ldr	r3, [r3, #16]
 8013d9a:	f003 0303 	and.w	r3, r3, #3
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d003      	beq.n	8013daa <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8013daa:	6a3b      	ldr	r3, [r7, #32]
 8013dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d00c      	beq.n	8013dce <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	f003 0310 	and.w	r3, r3, #16
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d007      	beq.n	8013dce <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2210      	movs	r2, #16
 8013dc4:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8013dce:	6a3b      	ldr	r3, [r7, #32]
 8013dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d00c      	beq.n	8013df2 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	f003 0308 	and.w	r3, r3, #8
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d007      	beq.n	8013df2 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2208      	movs	r2, #8
 8013de8:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8013df2:	6a3b      	ldr	r3, [r7, #32]
 8013df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d07b      	beq.n	8013ef4 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	f003 0304 	and.w	r3, r3, #4
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d072      	beq.n	8013eec <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8013e06:	6a3b      	ldr	r3, [r7, #32]
 8013e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d008      	beq.n	8013e22 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d003      	beq.n	8013e22 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8013e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1c:	f043 0301 	orr.w	r3, r3, #1
 8013e20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8013e22:	6a3b      	ldr	r3, [r7, #32]
 8013e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d008      	beq.n	8013e3e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d003      	beq.n	8013e3e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8013e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e38:	f043 0302 	orr.w	r3, r3, #2
 8013e3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8013e3e:	6a3b      	ldr	r3, [r7, #32]
 8013e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d008      	beq.n	8013e5a <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d003      	beq.n	8013e5a <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8013e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e54:	f043 0304 	orr.w	r3, r3, #4
 8013e58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8013e5a:	6a3b      	ldr	r3, [r7, #32]
 8013e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d043      	beq.n	8013eec <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d03e      	beq.n	8013eec <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8013e74:	2b60      	cmp	r3, #96	; 0x60
 8013e76:	d02b      	beq.n	8013ed0 <HAL_CAN_IRQHandler+0x344>
 8013e78:	2b60      	cmp	r3, #96	; 0x60
 8013e7a:	d82e      	bhi.n	8013eda <HAL_CAN_IRQHandler+0x34e>
 8013e7c:	2b50      	cmp	r3, #80	; 0x50
 8013e7e:	d022      	beq.n	8013ec6 <HAL_CAN_IRQHandler+0x33a>
 8013e80:	2b50      	cmp	r3, #80	; 0x50
 8013e82:	d82a      	bhi.n	8013eda <HAL_CAN_IRQHandler+0x34e>
 8013e84:	2b40      	cmp	r3, #64	; 0x40
 8013e86:	d019      	beq.n	8013ebc <HAL_CAN_IRQHandler+0x330>
 8013e88:	2b40      	cmp	r3, #64	; 0x40
 8013e8a:	d826      	bhi.n	8013eda <HAL_CAN_IRQHandler+0x34e>
 8013e8c:	2b30      	cmp	r3, #48	; 0x30
 8013e8e:	d010      	beq.n	8013eb2 <HAL_CAN_IRQHandler+0x326>
 8013e90:	2b30      	cmp	r3, #48	; 0x30
 8013e92:	d822      	bhi.n	8013eda <HAL_CAN_IRQHandler+0x34e>
 8013e94:	2b10      	cmp	r3, #16
 8013e96:	d002      	beq.n	8013e9e <HAL_CAN_IRQHandler+0x312>
 8013e98:	2b20      	cmp	r3, #32
 8013e9a:	d005      	beq.n	8013ea8 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8013e9c:	e01d      	b.n	8013eda <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea0:	f043 0308 	orr.w	r3, r3, #8
 8013ea4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013ea6:	e019      	b.n	8013edc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8013ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eaa:	f043 0310 	orr.w	r3, r3, #16
 8013eae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013eb0:	e014      	b.n	8013edc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb4:	f043 0320 	orr.w	r3, r3, #32
 8013eb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013eba:	e00f      	b.n	8013edc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ec2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013ec4:	e00a      	b.n	8013edc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ecc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013ece:	e005      	b.n	8013edc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013ed6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8013ed8:	e000      	b.n	8013edc <HAL_CAN_IRQHandler+0x350>
            break;
 8013eda:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	699a      	ldr	r2, [r3, #24]
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8013eea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2204      	movs	r2, #4
 8013ef2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d009      	beq.n	8013f0e <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f00:	431a      	orrs	r2, r3
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8013f0e:	bf00      	nop
 8013f10:	3728      	adds	r7, #40	; 0x28
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}

08013f16 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8013f16:	b480      	push	{r7}
 8013f18:	b083      	sub	sp, #12
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8013f1e:	bf00      	nop
 8013f20:	370c      	adds	r7, #12
 8013f22:	46bd      	mov	sp, r7
 8013f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f28:	4770      	bx	lr

08013f2a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8013f2a:	b480      	push	{r7}
 8013f2c:	b083      	sub	sp, #12
 8013f2e:	af00      	add	r7, sp, #0
 8013f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8013f32:	bf00      	nop
 8013f34:	370c      	adds	r7, #12
 8013f36:	46bd      	mov	sp, r7
 8013f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3c:	4770      	bx	lr

08013f3e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8013f3e:	b480      	push	{r7}
 8013f40:	b083      	sub	sp, #12
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8013f46:	bf00      	nop
 8013f48:	370c      	adds	r7, #12
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f50:	4770      	bx	lr

08013f52 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8013f52:	b480      	push	{r7}
 8013f54:	b083      	sub	sp, #12
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8013f5a:	bf00      	nop
 8013f5c:	370c      	adds	r7, #12
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f64:	4770      	bx	lr

08013f66 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8013f66:	b480      	push	{r7}
 8013f68:	b083      	sub	sp, #12
 8013f6a:	af00      	add	r7, sp, #0
 8013f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8013f6e:	bf00      	nop
 8013f70:	370c      	adds	r7, #12
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr

08013f7a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8013f7a:	b480      	push	{r7}
 8013f7c:	b083      	sub	sp, #12
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8013f82:	bf00      	nop
 8013f84:	370c      	adds	r7, #12
 8013f86:	46bd      	mov	sp, r7
 8013f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8c:	4770      	bx	lr

08013f8e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8013f8e:	b480      	push	{r7}
 8013f90:	b083      	sub	sp, #12
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8013f96:	bf00      	nop
 8013f98:	370c      	adds	r7, #12
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa0:	4770      	bx	lr

08013fa2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8013fa2:	b480      	push	{r7}
 8013fa4:	b083      	sub	sp, #12
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8013faa:	bf00      	nop
 8013fac:	370c      	adds	r7, #12
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr

08013fb6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8013fb6:	b480      	push	{r7}
 8013fb8:	b083      	sub	sp, #12
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8013fbe:	bf00      	nop
 8013fc0:	370c      	adds	r7, #12
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr

08013fca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8013fca:	b480      	push	{r7}
 8013fcc:	b083      	sub	sp, #12
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8013fd2:	bf00      	nop
 8013fd4:	370c      	adds	r7, #12
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fdc:	4770      	bx	lr

08013fde <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8013fde:	b480      	push	{r7}
 8013fe0:	b083      	sub	sp, #12
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8013fe6:	bf00      	nop
 8013fe8:	370c      	adds	r7, #12
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr
	...

08013ff4 <__NVIC_SetPriorityGrouping>:
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b085      	sub	sp, #20
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f003 0307 	and.w	r3, r3, #7
 8014002:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014004:	4b0b      	ldr	r3, [pc, #44]	; (8014034 <__NVIC_SetPriorityGrouping+0x40>)
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014010:	4013      	ands	r3, r2
 8014012:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801401c:	4b06      	ldr	r3, [pc, #24]	; (8014038 <__NVIC_SetPriorityGrouping+0x44>)
 801401e:	4313      	orrs	r3, r2
 8014020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8014022:	4a04      	ldr	r2, [pc, #16]	; (8014034 <__NVIC_SetPriorityGrouping+0x40>)
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	60d3      	str	r3, [r2, #12]
}
 8014028:	bf00      	nop
 801402a:	3714      	adds	r7, #20
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr
 8014034:	e000ed00 	.word	0xe000ed00
 8014038:	05fa0000 	.word	0x05fa0000

0801403c <__NVIC_GetPriorityGrouping>:
{
 801403c:	b480      	push	{r7}
 801403e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014040:	4b04      	ldr	r3, [pc, #16]	; (8014054 <__NVIC_GetPriorityGrouping+0x18>)
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	0a1b      	lsrs	r3, r3, #8
 8014046:	f003 0307 	and.w	r3, r3, #7
}
 801404a:	4618      	mov	r0, r3
 801404c:	46bd      	mov	sp, r7
 801404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014052:	4770      	bx	lr
 8014054:	e000ed00 	.word	0xe000ed00

08014058 <__NVIC_EnableIRQ>:
{
 8014058:	b480      	push	{r7}
 801405a:	b083      	sub	sp, #12
 801405c:	af00      	add	r7, sp, #0
 801405e:	4603      	mov	r3, r0
 8014060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014066:	2b00      	cmp	r3, #0
 8014068:	db0b      	blt.n	8014082 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801406a:	79fb      	ldrb	r3, [r7, #7]
 801406c:	f003 021f 	and.w	r2, r3, #31
 8014070:	4907      	ldr	r1, [pc, #28]	; (8014090 <__NVIC_EnableIRQ+0x38>)
 8014072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014076:	095b      	lsrs	r3, r3, #5
 8014078:	2001      	movs	r0, #1
 801407a:	fa00 f202 	lsl.w	r2, r0, r2
 801407e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014082:	bf00      	nop
 8014084:	370c      	adds	r7, #12
 8014086:	46bd      	mov	sp, r7
 8014088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop
 8014090:	e000e100 	.word	0xe000e100

08014094 <__NVIC_SetPriority>:
{
 8014094:	b480      	push	{r7}
 8014096:	b083      	sub	sp, #12
 8014098:	af00      	add	r7, sp, #0
 801409a:	4603      	mov	r3, r0
 801409c:	6039      	str	r1, [r7, #0]
 801409e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80140a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	db0a      	blt.n	80140be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	b2da      	uxtb	r2, r3
 80140ac:	490c      	ldr	r1, [pc, #48]	; (80140e0 <__NVIC_SetPriority+0x4c>)
 80140ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140b2:	0112      	lsls	r2, r2, #4
 80140b4:	b2d2      	uxtb	r2, r2
 80140b6:	440b      	add	r3, r1
 80140b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80140bc:	e00a      	b.n	80140d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	b2da      	uxtb	r2, r3
 80140c2:	4908      	ldr	r1, [pc, #32]	; (80140e4 <__NVIC_SetPriority+0x50>)
 80140c4:	79fb      	ldrb	r3, [r7, #7]
 80140c6:	f003 030f 	and.w	r3, r3, #15
 80140ca:	3b04      	subs	r3, #4
 80140cc:	0112      	lsls	r2, r2, #4
 80140ce:	b2d2      	uxtb	r2, r2
 80140d0:	440b      	add	r3, r1
 80140d2:	761a      	strb	r2, [r3, #24]
}
 80140d4:	bf00      	nop
 80140d6:	370c      	adds	r7, #12
 80140d8:	46bd      	mov	sp, r7
 80140da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140de:	4770      	bx	lr
 80140e0:	e000e100 	.word	0xe000e100
 80140e4:	e000ed00 	.word	0xe000ed00

080140e8 <NVIC_EncodePriority>:
{
 80140e8:	b480      	push	{r7}
 80140ea:	b089      	sub	sp, #36	; 0x24
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	60b9      	str	r1, [r7, #8]
 80140f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	f003 0307 	and.w	r3, r3, #7
 80140fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80140fc:	69fb      	ldr	r3, [r7, #28]
 80140fe:	f1c3 0307 	rsb	r3, r3, #7
 8014102:	2b04      	cmp	r3, #4
 8014104:	bf28      	it	cs
 8014106:	2304      	movcs	r3, #4
 8014108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	3304      	adds	r3, #4
 801410e:	2b06      	cmp	r3, #6
 8014110:	d902      	bls.n	8014118 <NVIC_EncodePriority+0x30>
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	3b03      	subs	r3, #3
 8014116:	e000      	b.n	801411a <NVIC_EncodePriority+0x32>
 8014118:	2300      	movs	r3, #0
 801411a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801411c:	f04f 32ff 	mov.w	r2, #4294967295
 8014120:	69bb      	ldr	r3, [r7, #24]
 8014122:	fa02 f303 	lsl.w	r3, r2, r3
 8014126:	43da      	mvns	r2, r3
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	401a      	ands	r2, r3
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014130:	f04f 31ff 	mov.w	r1, #4294967295
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	fa01 f303 	lsl.w	r3, r1, r3
 801413a:	43d9      	mvns	r1, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014140:	4313      	orrs	r3, r2
}
 8014142:	4618      	mov	r0, r3
 8014144:	3724      	adds	r7, #36	; 0x24
 8014146:	46bd      	mov	sp, r7
 8014148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414c:	4770      	bx	lr
	...

08014150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	3b01      	subs	r3, #1
 801415c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014160:	d301      	bcc.n	8014166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8014162:	2301      	movs	r3, #1
 8014164:	e00f      	b.n	8014186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8014166:	4a0a      	ldr	r2, [pc, #40]	; (8014190 <SysTick_Config+0x40>)
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	3b01      	subs	r3, #1
 801416c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801416e:	210f      	movs	r1, #15
 8014170:	f04f 30ff 	mov.w	r0, #4294967295
 8014174:	f7ff ff8e 	bl	8014094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8014178:	4b05      	ldr	r3, [pc, #20]	; (8014190 <SysTick_Config+0x40>)
 801417a:	2200      	movs	r2, #0
 801417c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801417e:	4b04      	ldr	r3, [pc, #16]	; (8014190 <SysTick_Config+0x40>)
 8014180:	2207      	movs	r2, #7
 8014182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014184:	2300      	movs	r3, #0
}
 8014186:	4618      	mov	r0, r3
 8014188:	3708      	adds	r7, #8
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}
 801418e:	bf00      	nop
 8014190:	e000e010 	.word	0xe000e010

08014194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b082      	sub	sp, #8
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7ff ff29 	bl	8013ff4 <__NVIC_SetPriorityGrouping>
}
 80141a2:	bf00      	nop
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}

080141aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80141aa:	b580      	push	{r7, lr}
 80141ac:	b086      	sub	sp, #24
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	4603      	mov	r3, r0
 80141b2:	60b9      	str	r1, [r7, #8]
 80141b4:	607a      	str	r2, [r7, #4]
 80141b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80141b8:	2300      	movs	r3, #0
 80141ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80141bc:	f7ff ff3e 	bl	801403c <__NVIC_GetPriorityGrouping>
 80141c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	68b9      	ldr	r1, [r7, #8]
 80141c6:	6978      	ldr	r0, [r7, #20]
 80141c8:	f7ff ff8e 	bl	80140e8 <NVIC_EncodePriority>
 80141cc:	4602      	mov	r2, r0
 80141ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141d2:	4611      	mov	r1, r2
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7ff ff5d 	bl	8014094 <__NVIC_SetPriority>
}
 80141da:	bf00      	nop
 80141dc:	3718      	adds	r7, #24
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}

080141e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80141e2:	b580      	push	{r7, lr}
 80141e4:	b082      	sub	sp, #8
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	4603      	mov	r3, r0
 80141ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80141ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7ff ff31 	bl	8014058 <__NVIC_EnableIRQ>
}
 80141f6:	bf00      	nop
 80141f8:	3708      	adds	r7, #8
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}

080141fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f7ff ffa2 	bl	8014150 <SysTick_Config>
 801420c:	4603      	mov	r3, r0
}
 801420e:	4618      	mov	r0, r3
 8014210:	3708      	adds	r7, #8
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
	...

08014218 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8014218:	b480      	push	{r7}
 801421a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801421c:	f3bf 8f5f 	dmb	sy
}
 8014220:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8014222:	4b07      	ldr	r3, [pc, #28]	; (8014240 <HAL_MPU_Disable+0x28>)
 8014224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014226:	4a06      	ldr	r2, [pc, #24]	; (8014240 <HAL_MPU_Disable+0x28>)
 8014228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801422c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801422e:	4b05      	ldr	r3, [pc, #20]	; (8014244 <HAL_MPU_Disable+0x2c>)
 8014230:	2200      	movs	r2, #0
 8014232:	605a      	str	r2, [r3, #4]
}
 8014234:	bf00      	nop
 8014236:	46bd      	mov	sp, r7
 8014238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423c:	4770      	bx	lr
 801423e:	bf00      	nop
 8014240:	e000ed00 	.word	0xe000ed00
 8014244:	e000ed90 	.word	0xe000ed90

08014248 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8014248:	b480      	push	{r7}
 801424a:	b083      	sub	sp, #12
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8014250:	4a0b      	ldr	r2, [pc, #44]	; (8014280 <HAL_MPU_Enable+0x38>)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f043 0301 	orr.w	r3, r3, #1
 8014258:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801425a:	4b0a      	ldr	r3, [pc, #40]	; (8014284 <HAL_MPU_Enable+0x3c>)
 801425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801425e:	4a09      	ldr	r2, [pc, #36]	; (8014284 <HAL_MPU_Enable+0x3c>)
 8014260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014264:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8014266:	f3bf 8f4f 	dsb	sy
}
 801426a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801426c:	f3bf 8f6f 	isb	sy
}
 8014270:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8014272:	bf00      	nop
 8014274:	370c      	adds	r7, #12
 8014276:	46bd      	mov	sp, r7
 8014278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427c:	4770      	bx	lr
 801427e:	bf00      	nop
 8014280:	e000ed90 	.word	0xe000ed90
 8014284:	e000ed00 	.word	0xe000ed00

08014288 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	785a      	ldrb	r2, [r3, #1]
 8014294:	4b1d      	ldr	r3, [pc, #116]	; (801430c <HAL_MPU_ConfigRegion+0x84>)
 8014296:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d029      	beq.n	80142f4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80142a0:	4a1a      	ldr	r2, [pc, #104]	; (801430c <HAL_MPU_ConfigRegion+0x84>)
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	7b1b      	ldrb	r3, [r3, #12]
 80142ac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	7adb      	ldrb	r3, [r3, #11]
 80142b2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80142b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	7a9b      	ldrb	r3, [r3, #10]
 80142ba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80142bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	7b5b      	ldrb	r3, [r3, #13]
 80142c2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80142c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	7b9b      	ldrb	r3, [r3, #14]
 80142ca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80142cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	7bdb      	ldrb	r3, [r3, #15]
 80142d2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80142d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	7a5b      	ldrb	r3, [r3, #9]
 80142da:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80142dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	7a1b      	ldrb	r3, [r3, #8]
 80142e2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80142e4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	7812      	ldrb	r2, [r2, #0]
 80142ea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80142ec:	4a07      	ldr	r2, [pc, #28]	; (801430c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80142ee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80142f0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80142f2:	e005      	b.n	8014300 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80142f4:	4b05      	ldr	r3, [pc, #20]	; (801430c <HAL_MPU_ConfigRegion+0x84>)
 80142f6:	2200      	movs	r2, #0
 80142f8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80142fa:	4b04      	ldr	r3, [pc, #16]	; (801430c <HAL_MPU_ConfigRegion+0x84>)
 80142fc:	2200      	movs	r2, #0
 80142fe:	611a      	str	r2, [r3, #16]
}
 8014300:	bf00      	nop
 8014302:	370c      	adds	r7, #12
 8014304:	46bd      	mov	sp, r7
 8014306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430a:	4770      	bx	lr
 801430c:	e000ed90 	.word	0xe000ed90

08014310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b084      	sub	sp, #16
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801431c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801431e:	f7fe ff63 	bl	80131e8 <HAL_GetTick>
 8014322:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801432a:	b2db      	uxtb	r3, r3
 801432c:	2b02      	cmp	r3, #2
 801432e:	d008      	beq.n	8014342 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2280      	movs	r2, #128	; 0x80
 8014334:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2200      	movs	r2, #0
 801433a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801433e:	2301      	movs	r3, #1
 8014340:	e052      	b.n	80143e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	f022 0216 	bic.w	r2, r2, #22
 8014350:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	695a      	ldr	r2, [r3, #20]
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014360:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014366:	2b00      	cmp	r3, #0
 8014368:	d103      	bne.n	8014372 <HAL_DMA_Abort+0x62>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801436e:	2b00      	cmp	r3, #0
 8014370:	d007      	beq.n	8014382 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	f022 0208 	bic.w	r2, r2, #8
 8014380:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	f022 0201 	bic.w	r2, r2, #1
 8014390:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8014392:	e013      	b.n	80143bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8014394:	f7fe ff28 	bl	80131e8 <HAL_GetTick>
 8014398:	4602      	mov	r2, r0
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	1ad3      	subs	r3, r2, r3
 801439e:	2b05      	cmp	r3, #5
 80143a0:	d90c      	bls.n	80143bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	2220      	movs	r2, #32
 80143a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2203      	movs	r2, #3
 80143ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2200      	movs	r2, #0
 80143b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80143b8:	2303      	movs	r3, #3
 80143ba:	e015      	b.n	80143e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	f003 0301 	and.w	r3, r3, #1
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d1e4      	bne.n	8014394 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80143ce:	223f      	movs	r2, #63	; 0x3f
 80143d0:	409a      	lsls	r2, r3
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2201      	movs	r2, #1
 80143da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80143e6:	2300      	movs	r3, #0
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3710      	adds	r7, #16
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b083      	sub	sp, #12
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	2b02      	cmp	r3, #2
 8014402:	d004      	beq.n	801440e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2280      	movs	r2, #128	; 0x80
 8014408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801440a:	2301      	movs	r3, #1
 801440c:	e00c      	b.n	8014428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2205      	movs	r2, #5
 8014412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	f022 0201 	bic.w	r2, r2, #1
 8014424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8014426:	2300      	movs	r3, #0
}
 8014428:	4618      	mov	r0, r3
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d101      	bne.n	8014446 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8014442:	2301      	movs	r3, #1
 8014444:	e06a      	b.n	801451c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801444c:	2b00      	cmp	r3, #0
 801444e:	d106      	bne.n	801445e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2223      	movs	r2, #35	; 0x23
 8014454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f006 fbaf 	bl	801abbc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801445e:	4b31      	ldr	r3, [pc, #196]	; (8014524 <HAL_ETH_Init+0xf0>)
 8014460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014462:	4a30      	ldr	r2, [pc, #192]	; (8014524 <HAL_ETH_Init+0xf0>)
 8014464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014468:	6453      	str	r3, [r2, #68]	; 0x44
 801446a:	4b2e      	ldr	r3, [pc, #184]	; (8014524 <HAL_ETH_Init+0xf0>)
 801446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801446e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014472:	60bb      	str	r3, [r7, #8]
 8014474:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8014476:	4b2c      	ldr	r3, [pc, #176]	; (8014528 <HAL_ETH_Init+0xf4>)
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	4a2b      	ldr	r2, [pc, #172]	; (8014528 <HAL_ETH_Init+0xf4>)
 801447c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014480:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8014482:	4b29      	ldr	r3, [pc, #164]	; (8014528 <HAL_ETH_Init+0xf4>)
 8014484:	685a      	ldr	r2, [r3, #4]
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	689b      	ldr	r3, [r3, #8]
 801448a:	4927      	ldr	r1, [pc, #156]	; (8014528 <HAL_ETH_Init+0xf4>)
 801448c:	4313      	orrs	r3, r2
 801448e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8014490:	4b25      	ldr	r3, [pc, #148]	; (8014528 <HAL_ETH_Init+0xf4>)
 8014492:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	6812      	ldr	r2, [r2, #0]
 80144a2:	f043 0301 	orr.w	r3, r3, #1
 80144a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80144aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80144ac:	f7fe fe9c 	bl	80131e8 <HAL_GetTick>
 80144b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80144b2:	e011      	b.n	80144d8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80144b4:	f7fe fe98 	bl	80131e8 <HAL_GetTick>
 80144b8:	4602      	mov	r2, r0
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	1ad3      	subs	r3, r2, r3
 80144be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80144c2:	d909      	bls.n	80144d8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2204      	movs	r2, #4
 80144c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	22e0      	movs	r2, #224	; 0xe0
 80144d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80144d4:	2301      	movs	r3, #1
 80144d6:	e021      	b.n	801451c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	f003 0301 	and.w	r3, r3, #1
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d1e4      	bne.n	80144b4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 fee4 	bl	80152b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f000 ff8b 	bl	801540c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 ffe1 	bl	80154be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	461a      	mov	r2, r3
 8014502:	2100      	movs	r1, #0
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f000 ff49 	bl	801539c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2200      	movs	r2, #0
 801450e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2210      	movs	r2, #16
 8014516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801451a:	2300      	movs	r3, #0
}
 801451c:	4618      	mov	r0, r3
 801451e:	3710      	adds	r7, #16
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}
 8014524:	40023800 	.word	0x40023800
 8014528:	40013800 	.word	0x40013800

0801452c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801453a:	2b10      	cmp	r3, #16
 801453c:	d150      	bne.n	80145e0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2223      	movs	r2, #35	; 0x23
 8014542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2204      	movs	r2, #4
 801454a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f000 f9fd 	bl	801494c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	681a      	ldr	r2, [r3, #0]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	f042 0208 	orr.w	r2, r2, #8
 8014560:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801456a:	2001      	movs	r0, #1
 801456c:	f7fe fe48 	bl	8013200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	68fa      	ldr	r2, [r7, #12]
 8014576:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	f042 0204 	orr.w	r2, r2, #4
 8014586:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8014590:	2001      	movs	r0, #1
 8014592:	f7fe fe35 	bl	8013200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	68fa      	ldr	r2, [r7, #12]
 801459c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 fd2a 	bl	8014ff8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145ac:	699b      	ldr	r3, [r3, #24]
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	6812      	ldr	r2, [r2, #0]
 80145b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80145b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80145ba:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145c4:	699b      	ldr	r3, [r3, #24]
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	6812      	ldr	r2, [r2, #0]
 80145ca:	f043 0302 	orr.w	r3, r3, #2
 80145ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80145d2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2223      	movs	r2, #35	; 0x23
 80145d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80145dc:	2300      	movs	r3, #0
 80145de:	e000      	b.n	80145e2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80145e0:	2301      	movs	r3, #1
  }
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3710      	adds	r7, #16
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b084      	sub	sp, #16
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80145f8:	2b23      	cmp	r3, #35	; 0x23
 80145fa:	d14a      	bne.n	8014692 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2223      	movs	r2, #35	; 0x23
 8014600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801460c:	699b      	ldr	r3, [r3, #24]
 801460e:	687a      	ldr	r2, [r7, #4]
 8014610:	6812      	ldr	r2, [r2, #0]
 8014612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801461a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014624:	699b      	ldr	r3, [r3, #24]
 8014626:	687a      	ldr	r2, [r7, #4]
 8014628:	6812      	ldr	r2, [r2, #0]
 801462a:	f023 0302 	bic.w	r3, r3, #2
 801462e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014632:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	f022 0204 	bic.w	r2, r2, #4
 8014642:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801464c:	2001      	movs	r0, #1
 801464e:	f7fe fdd7 	bl	8013200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f000 fccc 	bl	8014ff8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	681a      	ldr	r2, [r3, #0]
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	f022 0208 	bic.w	r2, r2, #8
 801466e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8014678:	2001      	movs	r0, #1
 801467a:	f7fe fdc1 	bl	8013200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2210      	movs	r2, #16
 801468a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 801468e:	2300      	movs	r3, #0
 8014690:	e000      	b.n	8014694 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8014692:	2301      	movs	r3, #1
  }
}
 8014694:	4618      	mov	r0, r3
 8014696:	3710      	adds	r7, #16
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}

0801469c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b086      	sub	sp, #24
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	60b9      	str	r1, [r7, #8]
 80146a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d109      	bne.n	80146c2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146b4:	f043 0201 	orr.w	r2, r3, #1
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80146be:	2301      	movs	r3, #1
 80146c0:	e07c      	b.n	80147bc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80146c8:	2b23      	cmp	r3, #35	; 0x23
 80146ca:	d176      	bne.n	80147ba <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80146cc:	2200      	movs	r2, #0
 80146ce:	68b9      	ldr	r1, [r7, #8]
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	f000 ff61 	bl	8015598 <ETH_Prepare_Tx_Descriptors>
 80146d6:	4603      	mov	r3, r0
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d009      	beq.n	80146f0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146e2:	f043 0202 	orr.w	r2, r3, #2
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80146ec:	2301      	movs	r3, #1
 80146ee:	e065      	b.n	80147bc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80146f0:	f3bf 8f4f 	dsb	sy
}
 80146f4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	3206      	adds	r2, #6
 80146fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014702:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014708:	1c5a      	adds	r2, r3, #1
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	629a      	str	r2, [r3, #40]	; 0x28
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014712:	2b03      	cmp	r3, #3
 8014714:	d904      	bls.n	8014720 <HAL_ETH_Transmit+0x84>
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801471a:	1f1a      	subs	r2, r3, #4
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	3106      	adds	r1, #6
 801472c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014730:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014734:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8014736:	f7fe fd57 	bl	80131e8 <HAL_GetTick>
 801473a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801473c:	e037      	b.n	80147ae <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014746:	695b      	ldr	r3, [r3, #20]
 8014748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801474c:	2b00      	cmp	r3, #0
 801474e:	d011      	beq.n	8014774 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014756:	f043 0208 	orr.w	r2, r3, #8
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014768:	695a      	ldr	r2, [r3, #20]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8014770:	2301      	movs	r3, #1
 8014772:	e023      	b.n	80147bc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801477a:	d018      	beq.n	80147ae <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801477c:	f7fe fd34 	bl	80131e8 <HAL_GetTick>
 8014780:	4602      	mov	r2, r0
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	1ad3      	subs	r3, r2, r3
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	429a      	cmp	r2, r3
 801478a:	d302      	bcc.n	8014792 <HAL_ETH_Transmit+0xf6>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d10d      	bne.n	80147ae <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014798:	f043 0204 	orr.w	r2, r3, #4
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80147a8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80147aa:	2301      	movs	r3, #1
 80147ac:	e006      	b.n	80147bc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	dbc3      	blt.n	801473e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80147b6:	2300      	movs	r3, #0
 80147b8:	e000      	b.n	80147bc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80147ba:	2301      	movs	r3, #1
  }
}
 80147bc:	4618      	mov	r0, r3
 80147be:	3718      	adds	r7, #24
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}

080147c4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b088      	sub	sp, #32
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80147ce:	2300      	movs	r3, #0
 80147d0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80147d2:	2300      	movs	r3, #0
 80147d4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d109      	bne.n	80147f0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80147e2:	f043 0201 	orr.w	r2, r3, #1
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80147ec:	2301      	movs	r3, #1
 80147ee:	e0a8      	b.n	8014942 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80147f6:	2b23      	cmp	r3, #35	; 0x23
 80147f8:	d001      	beq.n	80147fe <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80147fa:	2301      	movs	r3, #1
 80147fc:	e0a1      	b.n	8014942 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014802:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	69fa      	ldr	r2, [r7, #28]
 8014808:	3212      	adds	r2, #18
 801480a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801480e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014814:	f1c3 0304 	rsb	r3, r3, #4
 8014818:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801481a:	e06a      	b.n	80148f2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 801481c:	69bb      	ldr	r3, [r7, #24]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014824:	2b00      	cmp	r3, #0
 8014826:	d007      	beq.n	8014838 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	699a      	ldr	r2, [r3, #24]
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	69da      	ldr	r2, [r3, #28]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014840:	2b00      	cmp	r3, #0
 8014842:	d103      	bne.n	801484c <HAL_ETH_ReadData+0x88>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014848:	2b00      	cmp	r3, #0
 801484a:	d040      	beq.n	80148ce <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 801484c:	69bb      	ldr	r3, [r7, #24]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014854:	2b00      	cmp	r3, #0
 8014856:	d005      	beq.n	8014864 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2200      	movs	r2, #0
 801485c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2200      	movs	r2, #0
 8014862:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	695b      	ldr	r3, [r3, #20]
 8014868:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 801486a:	69bb      	ldr	r3, [r7, #24]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014872:	2b00      	cmp	r3, #0
 8014874:	d00c      	beq.n	8014890 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8014876:	69bb      	ldr	r3, [r7, #24]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	0c1b      	lsrs	r3, r3, #16
 801487c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014880:	3b04      	subs	r3, #4
 8014882:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8014884:	69bb      	ldr	r3, [r7, #24]
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 801488c:	2301      	movs	r3, #1
 801488e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8014890:	69bb      	ldr	r3, [r7, #24]
 8014892:	689a      	ldr	r2, [r3, #8]
 8014894:	69bb      	ldr	r3, [r7, #24]
 8014896:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80148a4:	69bb      	ldr	r3, [r7, #24]
 80148a6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80148a8:	461a      	mov	r2, r3
 80148aa:	693b      	ldr	r3, [r7, #16]
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	f006 fb4f 	bl	801af50 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80148b6:	1c5a      	adds	r2, r3, #1
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	441a      	add	r2, r3
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80148c8:	69bb      	ldr	r3, [r7, #24]
 80148ca:	2200      	movs	r2, #0
 80148cc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80148ce:	69fb      	ldr	r3, [r7, #28]
 80148d0:	3301      	adds	r3, #1
 80148d2:	61fb      	str	r3, [r7, #28]
 80148d4:	69fb      	ldr	r3, [r7, #28]
 80148d6:	2b03      	cmp	r3, #3
 80148d8:	d902      	bls.n	80148e0 <HAL_ETH_ReadData+0x11c>
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	3b04      	subs	r3, #4
 80148de:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	69fa      	ldr	r2, [r7, #28]
 80148e4:	3212      	adds	r2, #18
 80148e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ea:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	3301      	adds	r3, #1
 80148f0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	db06      	blt.n	8014908 <HAL_ETH_ReadData+0x144>
 80148fa:	697a      	ldr	r2, [r7, #20]
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d202      	bcs.n	8014908 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8014902:	7bfb      	ldrb	r3, [r7, #15]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d089      	beq.n	801481c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	441a      	add	r2, r3
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014918:	2b00      	cmp	r3, #0
 801491a:	d002      	beq.n	8014922 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f000 f815 	bl	801494c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	69fa      	ldr	r2, [r7, #28]
 8014926:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8014928:	7bfb      	ldrb	r3, [r7, #15]
 801492a:	2b01      	cmp	r3, #1
 801492c:	d108      	bne.n	8014940 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	2200      	movs	r2, #0
 801493a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801493c:	2300      	movs	r3, #0
 801493e:	e000      	b.n	8014942 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8014940:	2301      	movs	r3, #1
}
 8014942:	4618      	mov	r0, r3
 8014944:	3720      	adds	r7, #32
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
	...

0801494c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b088      	sub	sp, #32
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8014954:	2300      	movs	r3, #0
 8014956:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8014958:	2301      	movs	r3, #1
 801495a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014960:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	69fa      	ldr	r2, [r7, #28]
 8014966:	3212      	adds	r2, #18
 8014968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801496c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014972:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8014974:	e040      	b.n	80149f8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	6a1b      	ldr	r3, [r3, #32]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d112      	bne.n	80149a4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 801497e:	f107 030c 	add.w	r3, r7, #12
 8014982:	4618      	mov	r0, r3
 8014984:	f006 fab4 	bl	801aef0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d102      	bne.n	8014994 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 801498e:	2300      	movs	r3, #0
 8014990:	74fb      	strb	r3, [r7, #19]
 8014992:	e007      	b.n	80149a4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	461a      	mov	r2, r3
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	461a      	mov	r2, r3
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80149a4:	7cfb      	ldrb	r3, [r7, #19]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d026      	beq.n	80149f8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d103      	bne.n	80149ba <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	4a1e      	ldr	r2, [pc, #120]	; (8014a30 <ETH_UpdateDescriptor+0xe4>)
 80149b6:	605a      	str	r2, [r3, #4]
 80149b8:	e003      	b.n	80149c2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80149c0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80149c2:	f3bf 8f5f 	dmb	sy
}
 80149c6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80149d4:	69fb      	ldr	r3, [r7, #28]
 80149d6:	3301      	adds	r3, #1
 80149d8:	61fb      	str	r3, [r7, #28]
 80149da:	69fb      	ldr	r3, [r7, #28]
 80149dc:	2b03      	cmp	r3, #3
 80149de:	d902      	bls.n	80149e6 <ETH_UpdateDescriptor+0x9a>
 80149e0:	69fb      	ldr	r3, [r7, #28]
 80149e2:	3b04      	subs	r3, #4
 80149e4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	69fa      	ldr	r2, [r7, #28]
 80149ea:	3212      	adds	r2, #18
 80149ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149f0:	617b      	str	r3, [r7, #20]
      desccount--;
 80149f2:	69bb      	ldr	r3, [r7, #24]
 80149f4:	3b01      	subs	r3, #1
 80149f6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80149f8:	69bb      	ldr	r3, [r7, #24]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d002      	beq.n	8014a04 <ETH_UpdateDescriptor+0xb8>
 80149fe:	7cfb      	ldrb	r3, [r7, #19]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d1b8      	bne.n	8014976 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a08:	69ba      	ldr	r2, [r7, #24]
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d00c      	beq.n	8014a28 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a16:	461a      	mov	r2, r3
 8014a18:	2300      	movs	r3, #0
 8014a1a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	69fa      	ldr	r2, [r7, #28]
 8014a20:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	69ba      	ldr	r2, [r7, #24]
 8014a26:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8014a28:	bf00      	nop
 8014a2a:	3720      	adds	r7, #32
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}
 8014a30:	800045f8 	.word	0x800045f8

08014a34 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a44:	695b      	ldr	r3, [r3, #20]
 8014a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a4a:	2b40      	cmp	r3, #64	; 0x40
 8014a4c:	d112      	bne.n	8014a74 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a56:	69db      	ldr	r3, [r3, #28]
 8014a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a5c:	2b40      	cmp	r3, #64	; 0x40
 8014a5e:	d109      	bne.n	8014a74 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a68:	461a      	mov	r2, r3
 8014a6a:	4b50      	ldr	r3, [pc, #320]	; (8014bac <HAL_ETH_IRQHandler+0x178>)
 8014a6c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f000 f8ac 	bl	8014bcc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a7c:	695b      	ldr	r3, [r3, #20]
 8014a7e:	f003 0301 	and.w	r3, r3, #1
 8014a82:	2b01      	cmp	r3, #1
 8014a84:	d113      	bne.n	8014aae <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a8e:	69db      	ldr	r3, [r3, #28]
 8014a90:	f003 0301 	and.w	r3, r3, #1
 8014a94:	2b01      	cmp	r3, #1
 8014a96:	d10a      	bne.n	8014aae <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8014aa6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8014aa8:	6878      	ldr	r0, [r7, #4]
 8014aaa:	f000 f885 	bl	8014bb8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ab6:	695b      	ldr	r3, [r3, #20]
 8014ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ac0:	d14c      	bne.n	8014b5c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014aca:	69db      	ldr	r3, [r3, #28]
 8014acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ad4:	d142      	bne.n	8014b5c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014adc:	f043 0208 	orr.w	r2, r3, #8
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014aee:	695b      	ldr	r3, [r3, #20]
 8014af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014af8:	d11a      	bne.n	8014b30 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b02:	695a      	ldr	r2, [r3, #20]
 8014b04:	4b2a      	ldr	r3, [pc, #168]	; (8014bb0 <HAL_ETH_IRQHandler+0x17c>)
 8014b06:	4013      	ands	r3, r2
 8014b08:	687a      	ldr	r2, [r7, #4]
 8014b0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b16:	69db      	ldr	r3, [r3, #28]
 8014b18:	687a      	ldr	r2, [r7, #4]
 8014b1a:	6812      	ldr	r2, [r2, #0]
 8014b1c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8014b20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014b24:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	22e0      	movs	r2, #224	; 0xe0
 8014b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8014b2e:	e012      	b.n	8014b56 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b38:	695a      	ldr	r2, [r3, #20]
 8014b3a:	f248 6380 	movw	r3, #34432	; 0x8680
 8014b3e:	4013      	ands	r3, r2
 8014b40:	687a      	ldr	r2, [r7, #4]
 8014b42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b4e:	461a      	mov	r2, r3
 8014b50:	f248 6380 	movw	r3, #34432	; 0x8680
 8014b54:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f000 f842 	bl	8014be0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b62:	f003 0308 	and.w	r3, r3, #8
 8014b66:	2b08      	cmp	r3, #8
 8014b68:	d10e      	bne.n	8014b88 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b70:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 f83a 	bl	8014bf4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2200      	movs	r2, #0
 8014b84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8014b88:	4b0a      	ldr	r3, [pc, #40]	; (8014bb4 <HAL_ETH_IRQHandler+0x180>)
 8014b8a:	695b      	ldr	r3, [r3, #20]
 8014b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d006      	beq.n	8014ba2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8014b94:	4b07      	ldr	r3, [pc, #28]	; (8014bb4 <HAL_ETH_IRQHandler+0x180>)
 8014b96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014b9a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f000 f833 	bl	8014c08 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8014ba2:	bf00      	nop
 8014ba4:	3708      	adds	r7, #8
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	00010040 	.word	0x00010040
 8014bb0:	007e2000 	.word	0x007e2000
 8014bb4:	40013c00 	.word	0x40013c00

08014bb8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8014bb8:	b480      	push	{r7}
 8014bba:	b083      	sub	sp, #12
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8014bc0:	bf00      	nop
 8014bc2:	370c      	adds	r7, #12
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bca:	4770      	bx	lr

08014bcc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8014bcc:	b480      	push	{r7}
 8014bce:	b083      	sub	sp, #12
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8014bd4:	bf00      	nop
 8014bd6:	370c      	adds	r7, #12
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bde:	4770      	bx	lr

08014be0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8014be8:	bf00      	nop
 8014bea:	370c      	adds	r7, #12
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr

08014bf4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8014bfc:	bf00      	nop
 8014bfe:	370c      	adds	r7, #12
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr

08014c08 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b083      	sub	sp, #12
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8014c10:	bf00      	nop
 8014c12:	370c      	adds	r7, #12
 8014c14:	46bd      	mov	sp, r7
 8014c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1a:	4770      	bx	lr

08014c1c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b086      	sub	sp, #24
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	60b9      	str	r1, [r7, #8]
 8014c26:	607a      	str	r2, [r7, #4]
 8014c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	691b      	ldr	r3, [r3, #16]
 8014c30:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	f003 031c 	and.w	r3, r3, #28
 8014c38:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	02db      	lsls	r3, r3, #11
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	697a      	ldr	r2, [r7, #20]
 8014c42:	4313      	orrs	r3, r2
 8014c44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	019b      	lsls	r3, r3, #6
 8014c4a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8014c4e:	697a      	ldr	r2, [r7, #20]
 8014c50:	4313      	orrs	r3, r2
 8014c52:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	f023 0302 	bic.w	r3, r3, #2
 8014c5a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	f043 0301 	orr.w	r3, r3, #1
 8014c62:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	697a      	ldr	r2, [r7, #20]
 8014c6a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8014c6c:	f7fe fabc 	bl	80131e8 <HAL_GetTick>
 8014c70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8014c72:	e00d      	b.n	8014c90 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8014c74:	f7fe fab8 	bl	80131e8 <HAL_GetTick>
 8014c78:	4602      	mov	r2, r0
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	1ad3      	subs	r3, r2, r3
 8014c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c82:	d301      	bcc.n	8014c88 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8014c84:	2301      	movs	r3, #1
 8014c86:	e010      	b.n	8014caa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	691b      	ldr	r3, [r3, #16]
 8014c8e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	f003 0301 	and.w	r3, r3, #1
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d1ec      	bne.n	8014c74 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	695b      	ldr	r3, [r3, #20]
 8014ca0:	b29b      	uxth	r3, r3
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8014ca8:	2300      	movs	r3, #0
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	3718      	adds	r7, #24
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}

08014cb2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8014cb2:	b580      	push	{r7, lr}
 8014cb4:	b086      	sub	sp, #24
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	60f8      	str	r0, [r7, #12]
 8014cba:	60b9      	str	r1, [r7, #8]
 8014cbc:	607a      	str	r2, [r7, #4]
 8014cbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	691b      	ldr	r3, [r3, #16]
 8014cc6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	f003 031c 	and.w	r3, r3, #28
 8014cce:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8014cd0:	68bb      	ldr	r3, [r7, #8]
 8014cd2:	02db      	lsls	r3, r3, #11
 8014cd4:	b29b      	uxth	r3, r3
 8014cd6:	697a      	ldr	r2, [r7, #20]
 8014cd8:	4313      	orrs	r3, r2
 8014cda:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	019b      	lsls	r3, r3, #6
 8014ce0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8014ce4:	697a      	ldr	r2, [r7, #20]
 8014ce6:	4313      	orrs	r3, r2
 8014ce8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	f043 0302 	orr.w	r3, r3, #2
 8014cf0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	f043 0301 	orr.w	r3, r3, #1
 8014cf8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	b29a      	uxth	r2, r3
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	697a      	ldr	r2, [r7, #20]
 8014d0a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014d0c:	f7fe fa6c 	bl	80131e8 <HAL_GetTick>
 8014d10:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8014d12:	e00d      	b.n	8014d30 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8014d14:	f7fe fa68 	bl	80131e8 <HAL_GetTick>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	1ad3      	subs	r3, r2, r3
 8014d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d22:	d301      	bcc.n	8014d28 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8014d24:	2301      	movs	r3, #1
 8014d26:	e009      	b.n	8014d3c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	691b      	ldr	r3, [r3, #16]
 8014d2e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	f003 0301 	and.w	r3, r3, #1
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d1ec      	bne.n	8014d14 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8014d3a:	2300      	movs	r3, #0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3718      	adds	r7, #24
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8014d44:	b480      	push	{r7}
 8014d46:	b083      	sub	sp, #12
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8014d4e:	683b      	ldr	r3, [r7, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d101      	bne.n	8014d58 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8014d54:	2301      	movs	r3, #1
 8014d56:	e0d9      	b.n	8014f0c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	f003 0310 	and.w	r3, r3, #16
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	bf14      	ite	ne
 8014d66:	2301      	movne	r3, #1
 8014d68:	2300      	moveq	r3, #0
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	bf0c      	ite	eq
 8014d90:	2301      	moveq	r3, #1
 8014d92:	2300      	movne	r3, #0
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	461a      	mov	r2, r3
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	bf14      	ite	ne
 8014dac:	2301      	movne	r3, #1
 8014dae:	2300      	moveq	r3, #0
 8014db0:	b2db      	uxtb	r3, r3
 8014db2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	bf0c      	ite	eq
 8014dc6:	2301      	moveq	r3, #1
 8014dc8:	2300      	movne	r3, #0
 8014dca:	b2db      	uxtb	r3, r3
 8014dcc:	461a      	mov	r2, r3
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	bf14      	ite	ne
 8014de0:	2301      	movne	r3, #1
 8014de2:	2300      	moveq	r3, #0
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	461a      	mov	r2, r3
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	bf0c      	ite	eq
 8014e16:	2301      	moveq	r3, #1
 8014e18:	2300      	movne	r3, #0
 8014e1a:	b2db      	uxtb	r3, r3
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	bf0c      	ite	eq
 8014e30:	2301      	moveq	r3, #1
 8014e32:	2300      	movne	r3, #0
 8014e34:	b2db      	uxtb	r3, r3
 8014e36:	461a      	mov	r2, r3
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	bf14      	ite	ne
 8014e4a:	2301      	movne	r3, #1
 8014e4c:	2300      	moveq	r3, #0
 8014e4e:	b2db      	uxtb	r3, r3
 8014e50:	461a      	mov	r2, r3
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	bf14      	ite	ne
 8014e72:	2301      	movne	r3, #1
 8014e74:	2300      	moveq	r3, #0
 8014e76:	b2db      	uxtb	r3, r3
 8014e78:	461a      	mov	r2, r3
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	699b      	ldr	r3, [r3, #24]
 8014e84:	f003 0302 	and.w	r3, r3, #2
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	bf14      	ite	ne
 8014e8c:	2301      	movne	r3, #1
 8014e8e:	2300      	moveq	r3, #0
 8014e90:	b2db      	uxtb	r3, r3
 8014e92:	461a      	mov	r2, r3
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	699b      	ldr	r3, [r3, #24]
 8014ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	bf0c      	ite	eq
 8014ea8:	2301      	moveq	r3, #1
 8014eaa:	2300      	movne	r3, #0
 8014eac:	b2db      	uxtb	r3, r3
 8014eae:	461a      	mov	r2, r3
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	699b      	ldr	r3, [r3, #24]
 8014ebc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	699b      	ldr	r3, [r3, #24]
 8014eca:	0c1b      	lsrs	r3, r3, #16
 8014ecc:	b29a      	uxth	r2, r3
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	699b      	ldr	r3, [r3, #24]
 8014ed8:	f003 0304 	and.w	r3, r3, #4
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	bf14      	ite	ne
 8014ee0:	2301      	movne	r3, #1
 8014ee2:	2300      	moveq	r3, #0
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	461a      	mov	r2, r3
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	699b      	ldr	r3, [r3, #24]
 8014ef4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	bf14      	ite	ne
 8014efc:	2301      	movne	r3, #1
 8014efe:	2300      	moveq	r3, #0
 8014f00:	b2db      	uxtb	r3, r3
 8014f02:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8014f0a:	2300      	movs	r3, #0
}
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	370c      	adds	r7, #12
 8014f10:	46bd      	mov	sp, r7
 8014f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f16:	4770      	bx	lr

08014f18 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d101      	bne.n	8014f2c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8014f28:	2301      	movs	r3, #1
 8014f2a:	e00b      	b.n	8014f44 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f32:	2b10      	cmp	r3, #16
 8014f34:	d105      	bne.n	8014f42 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8014f36:	6839      	ldr	r1, [r7, #0]
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f000 f883 	bl	8015044 <ETH_SetMACConfig>

    return HAL_OK;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	e000      	b.n	8014f44 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8014f42:	2301      	movs	r3, #1
  }
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3708      	adds	r7, #8
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b084      	sub	sp, #16
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	691b      	ldr	r3, [r3, #16]
 8014f5a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	f023 031c 	bic.w	r3, r3, #28
 8014f62:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8014f64:	f002 f916 	bl	8017194 <HAL_RCC_GetHCLKFreq>
 8014f68:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	4a1d      	ldr	r2, [pc, #116]	; (8014fe4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d908      	bls.n	8014f84 <HAL_ETH_SetMDIOClockRange+0x38>
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	4a1c      	ldr	r2, [pc, #112]	; (8014fe8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d804      	bhi.n	8014f84 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	f043 0308 	orr.w	r3, r3, #8
 8014f80:	60fb      	str	r3, [r7, #12]
 8014f82:	e027      	b.n	8014fd4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	4a18      	ldr	r2, [pc, #96]	; (8014fe8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	d908      	bls.n	8014f9e <HAL_ETH_SetMDIOClockRange+0x52>
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	4a17      	ldr	r2, [pc, #92]	; (8014fec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8014f90:	4293      	cmp	r3, r2
 8014f92:	d204      	bcs.n	8014f9e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f043 030c 	orr.w	r3, r3, #12
 8014f9a:	60fb      	str	r3, [r7, #12]
 8014f9c:	e01a      	b.n	8014fd4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	4a12      	ldr	r2, [pc, #72]	; (8014fec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8014fa2:	4293      	cmp	r3, r2
 8014fa4:	d303      	bcc.n	8014fae <HAL_ETH_SetMDIOClockRange+0x62>
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	4a11      	ldr	r2, [pc, #68]	; (8014ff0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8014faa:	4293      	cmp	r3, r2
 8014fac:	d911      	bls.n	8014fd2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	4a0f      	ldr	r2, [pc, #60]	; (8014ff0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8014fb2:	4293      	cmp	r3, r2
 8014fb4:	d908      	bls.n	8014fc8 <HAL_ETH_SetMDIOClockRange+0x7c>
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	4a0e      	ldr	r2, [pc, #56]	; (8014ff4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	d804      	bhi.n	8014fc8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	f043 0304 	orr.w	r3, r3, #4
 8014fc4:	60fb      	str	r3, [r7, #12]
 8014fc6:	e005      	b.n	8014fd4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	f043 0310 	orr.w	r3, r3, #16
 8014fce:	60fb      	str	r3, [r7, #12]
 8014fd0:	e000      	b.n	8014fd4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8014fd2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	68fa      	ldr	r2, [r7, #12]
 8014fda:	611a      	str	r2, [r3, #16]
}
 8014fdc:	bf00      	nop
 8014fde:	3710      	adds	r7, #16
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	01312cff 	.word	0x01312cff
 8014fe8:	02160ebf 	.word	0x02160ebf
 8014fec:	03938700 	.word	0x03938700
 8014ff0:	05f5e0ff 	.word	0x05f5e0ff
 8014ff4:	08f0d17f 	.word	0x08f0d17f

08014ff8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8015000:	2300      	movs	r3, #0
 8015002:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801500c:	699b      	ldr	r3, [r3, #24]
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	6812      	ldr	r2, [r2, #0]
 8015012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015016:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801501a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015024:	699b      	ldr	r3, [r3, #24]
 8015026:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8015028:	2001      	movs	r0, #1
 801502a:	f7fe f8e9 	bl	8013200 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8015038:	6193      	str	r3, [r2, #24]
}
 801503a:	bf00      	nop
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}
	...

08015044 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b084      	sub	sp, #16
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8015056:	68fa      	ldr	r2, [r7, #12]
 8015058:	4b51      	ldr	r3, [pc, #324]	; (80151a0 <ETH_SetMACConfig+0x15c>)
 801505a:	4013      	ands	r3, r2
 801505c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	7c1b      	ldrb	r3, [r3, #16]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d102      	bne.n	801506c <ETH_SetMACConfig+0x28>
 8015066:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801506a:	e000      	b.n	801506e <ETH_SetMACConfig+0x2a>
 801506c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	7c5b      	ldrb	r3, [r3, #17]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d102      	bne.n	801507c <ETH_SetMACConfig+0x38>
 8015076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801507a:	e000      	b.n	801507e <ETH_SetMACConfig+0x3a>
 801507c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801507e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8015084:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	7fdb      	ldrb	r3, [r3, #31]
 801508a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801508c:	431a      	orrs	r2, r3
                        macconf->Speed |
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8015092:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8015094:	683a      	ldr	r2, [r7, #0]
 8015096:	7f92      	ldrb	r2, [r2, #30]
 8015098:	2a00      	cmp	r2, #0
 801509a:	d102      	bne.n	80150a2 <ETH_SetMACConfig+0x5e>
 801509c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80150a0:	e000      	b.n	80150a4 <ETH_SetMACConfig+0x60>
 80150a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80150a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	7f1b      	ldrb	r3, [r3, #28]
 80150aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80150ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80150b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	791b      	ldrb	r3, [r3, #4]
 80150b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80150ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80150bc:	683a      	ldr	r2, [r7, #0]
 80150be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80150c2:	2a00      	cmp	r2, #0
 80150c4:	d102      	bne.n	80150cc <ETH_SetMACConfig+0x88>
 80150c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150ca:	e000      	b.n	80150ce <ETH_SetMACConfig+0x8a>
 80150cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80150ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	7bdb      	ldrb	r3, [r3, #15]
 80150d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80150d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80150dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80150e6:	4313      	orrs	r3, r2
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	4313      	orrs	r3, r2
 80150ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	68fa      	ldr	r2, [r7, #12]
 80150f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80150fe:	2001      	movs	r0, #1
 8015100:	f7fe f87e 	bl	8013200 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	68fa      	ldr	r2, [r7, #12]
 801510a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	699b      	ldr	r3, [r3, #24]
 8015112:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8015114:	68fa      	ldr	r2, [r7, #12]
 8015116:	f64f 7341 	movw	r3, #65345	; 0xff41
 801511a:	4013      	ands	r3, r2
 801511c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015122:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8015124:	683a      	ldr	r2, [r7, #0]
 8015126:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 801512a:	2a00      	cmp	r2, #0
 801512c:	d101      	bne.n	8015132 <ETH_SetMACConfig+0xee>
 801512e:	2280      	movs	r2, #128	; 0x80
 8015130:	e000      	b.n	8015134 <ETH_SetMACConfig+0xf0>
 8015132:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8015134:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801513a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801513c:	683a      	ldr	r2, [r7, #0]
 801513e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8015142:	2a01      	cmp	r2, #1
 8015144:	d101      	bne.n	801514a <ETH_SetMACConfig+0x106>
 8015146:	2208      	movs	r2, #8
 8015148:	e000      	b.n	801514c <ETH_SetMACConfig+0x108>
 801514a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 801514c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 801514e:	683a      	ldr	r2, [r7, #0]
 8015150:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8015154:	2a01      	cmp	r2, #1
 8015156:	d101      	bne.n	801515c <ETH_SetMACConfig+0x118>
 8015158:	2204      	movs	r2, #4
 801515a:	e000      	b.n	801515e <ETH_SetMACConfig+0x11a>
 801515c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801515e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8015160:	683a      	ldr	r2, [r7, #0]
 8015162:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8015166:	2a01      	cmp	r2, #1
 8015168:	d101      	bne.n	801516e <ETH_SetMACConfig+0x12a>
 801516a:	2202      	movs	r2, #2
 801516c:	e000      	b.n	8015170 <ETH_SetMACConfig+0x12c>
 801516e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8015170:	4313      	orrs	r3, r2
 8015172:	68fa      	ldr	r2, [r7, #12]
 8015174:	4313      	orrs	r3, r2
 8015176:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	68fa      	ldr	r2, [r7, #12]
 801517e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	699b      	ldr	r3, [r3, #24]
 8015186:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8015188:	2001      	movs	r0, #1
 801518a:	f7fe f839 	bl	8013200 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	68fa      	ldr	r2, [r7, #12]
 8015194:	619a      	str	r2, [r3, #24]
}
 8015196:	bf00      	nop
 8015198:	3710      	adds	r7, #16
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	ff20810f 	.word	0xff20810f

080151a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80151b6:	699b      	ldr	r3, [r3, #24]
 80151b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80151ba:	68fa      	ldr	r2, [r7, #12]
 80151bc:	4b3d      	ldr	r3, [pc, #244]	; (80152b4 <ETH_SetDMAConfig+0x110>)
 80151be:	4013      	ands	r3, r2
 80151c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	7b1b      	ldrb	r3, [r3, #12]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d102      	bne.n	80151d0 <ETH_SetDMAConfig+0x2c>
 80151ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80151ce:	e000      	b.n	80151d2 <ETH_SetDMAConfig+0x2e>
 80151d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	7b5b      	ldrb	r3, [r3, #13]
 80151d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80151d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80151da:	683a      	ldr	r2, [r7, #0]
 80151dc:	7f52      	ldrb	r2, [r2, #29]
 80151de:	2a00      	cmp	r2, #0
 80151e0:	d102      	bne.n	80151e8 <ETH_SetDMAConfig+0x44>
 80151e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80151e6:	e000      	b.n	80151ea <ETH_SetDMAConfig+0x46>
 80151e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80151ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	7b9b      	ldrb	r3, [r3, #14]
 80151f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80151f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80151f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	7f1b      	ldrb	r3, [r3, #28]
 80151fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8015200:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8015202:	683b      	ldr	r3, [r7, #0]
 8015204:	7f9b      	ldrb	r3, [r3, #30]
 8015206:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8015208:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801520e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015216:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8015218:	4313      	orrs	r3, r2
 801521a:	68fa      	ldr	r2, [r7, #12]
 801521c:	4313      	orrs	r3, r2
 801521e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015228:	461a      	mov	r2, r3
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015236:	699b      	ldr	r3, [r3, #24]
 8015238:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801523a:	2001      	movs	r0, #1
 801523c:	f7fd ffe0 	bl	8013200 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015248:	461a      	mov	r2, r3
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	791b      	ldrb	r3, [r3, #4]
 8015252:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8015258:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801525e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8015264:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801526c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 801526e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8015270:	683b      	ldr	r3, [r7, #0]
 8015272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015274:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8015276:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801527c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	6812      	ldr	r2, [r2, #0]
 8015282:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015286:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801528a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8015298:	2001      	movs	r0, #1
 801529a:	f7fd ffb1 	bl	8013200 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80152a6:	461a      	mov	r2, r3
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	6013      	str	r3, [r2, #0]
}
 80152ac:	bf00      	nop
 80152ae:	3710      	adds	r7, #16
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd80      	pop	{r7, pc}
 80152b4:	f8de3f23 	.word	0xf8de3f23

080152b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b0a6      	sub	sp, #152	; 0x98
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80152c0:	2301      	movs	r3, #1
 80152c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80152c6:	2301      	movs	r3, #1
 80152c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80152cc:	2300      	movs	r3, #0
 80152ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80152d0:	2300      	movs	r3, #0
 80152d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80152d6:	2301      	movs	r3, #1
 80152d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80152dc:	2300      	movs	r3, #0
 80152de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80152e2:	2301      	movs	r3, #1
 80152e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80152e8:	2300      	movs	r3, #0
 80152ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80152ee:	2300      	movs	r3, #0
 80152f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80152f4:	2300      	movs	r3, #0
 80152f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80152f8:	2300      	movs	r3, #0
 80152fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80152fe:	2300      	movs	r3, #0
 8015300:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8015302:	2300      	movs	r3, #0
 8015304:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8015308:	2300      	movs	r3, #0
 801530a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801530e:	2300      	movs	r3, #0
 8015310:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8015314:	2300      	movs	r3, #0
 8015316:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 801531a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801531e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8015320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015324:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8015326:	2300      	movs	r3, #0
 8015328:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801532c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015330:	4619      	mov	r1, r3
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	f7ff fe86 	bl	8015044 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8015338:	2301      	movs	r3, #1
 801533a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 801533c:	2301      	movs	r3, #1
 801533e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8015340:	2301      	movs	r3, #1
 8015342:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8015346:	2301      	movs	r3, #1
 8015348:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 801534a:	2300      	movs	r3, #0
 801534c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 801534e:	2300      	movs	r3, #0
 8015350:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8015354:	2300      	movs	r3, #0
 8015356:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801535a:	2300      	movs	r3, #0
 801535c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801535e:	2301      	movs	r3, #1
 8015360:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8015364:	2301      	movs	r3, #1
 8015366:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8015368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801536c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801536e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015372:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8015374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015378:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 801537a:	2301      	movs	r3, #1
 801537c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8015380:	2300      	movs	r3, #0
 8015382:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8015384:	2300      	movs	r3, #0
 8015386:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8015388:	f107 0308 	add.w	r3, r7, #8
 801538c:	4619      	mov	r1, r3
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f7ff ff08 	bl	80151a4 <ETH_SetDMAConfig>
}
 8015394:	bf00      	nop
 8015396:	3798      	adds	r7, #152	; 0x98
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}

0801539c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 801539c:	b480      	push	{r7}
 801539e:	b087      	sub	sp, #28
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	3305      	adds	r3, #5
 80153ac:	781b      	ldrb	r3, [r3, #0]
 80153ae:	021b      	lsls	r3, r3, #8
 80153b0:	687a      	ldr	r2, [r7, #4]
 80153b2:	3204      	adds	r2, #4
 80153b4:	7812      	ldrb	r2, [r2, #0]
 80153b6:	4313      	orrs	r3, r2
 80153b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80153ba:	68ba      	ldr	r2, [r7, #8]
 80153bc:	4b11      	ldr	r3, [pc, #68]	; (8015404 <ETH_MACAddressConfig+0x68>)
 80153be:	4413      	add	r3, r2
 80153c0:	461a      	mov	r2, r3
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	3303      	adds	r3, #3
 80153ca:	781b      	ldrb	r3, [r3, #0]
 80153cc:	061a      	lsls	r2, r3, #24
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	3302      	adds	r3, #2
 80153d2:	781b      	ldrb	r3, [r3, #0]
 80153d4:	041b      	lsls	r3, r3, #16
 80153d6:	431a      	orrs	r2, r3
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	3301      	adds	r3, #1
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	021b      	lsls	r3, r3, #8
 80153e0:	4313      	orrs	r3, r2
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	7812      	ldrb	r2, [r2, #0]
 80153e6:	4313      	orrs	r3, r2
 80153e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80153ea:	68ba      	ldr	r2, [r7, #8]
 80153ec:	4b06      	ldr	r3, [pc, #24]	; (8015408 <ETH_MACAddressConfig+0x6c>)
 80153ee:	4413      	add	r3, r2
 80153f0:	461a      	mov	r2, r3
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	6013      	str	r3, [r2, #0]
}
 80153f6:	bf00      	nop
 80153f8:	371c      	adds	r7, #28
 80153fa:	46bd      	mov	sp, r7
 80153fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015400:	4770      	bx	lr
 8015402:	bf00      	nop
 8015404:	40028040 	.word	0x40028040
 8015408:	40028044 	.word	0x40028044

0801540c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801540c:	b480      	push	{r7}
 801540e:	b085      	sub	sp, #20
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8015414:	2300      	movs	r3, #0
 8015416:	60fb      	str	r3, [r7, #12]
 8015418:	e03e      	b.n	8015498 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	68d9      	ldr	r1, [r3, #12]
 801541e:	68fa      	ldr	r2, [r7, #12]
 8015420:	4613      	mov	r3, r2
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	4413      	add	r3, r2
 8015426:	00db      	lsls	r3, r3, #3
 8015428:	440b      	add	r3, r1
 801542a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	2200      	movs	r2, #0
 8015430:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	2200      	movs	r2, #0
 8015436:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	2200      	movs	r2, #0
 801543c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	2200      	movs	r2, #0
 8015442:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8015444:	68b9      	ldr	r1, [r7, #8]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	68fa      	ldr	r2, [r7, #12]
 801544a:	3206      	adds	r2, #6
 801544c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8015458:	68bb      	ldr	r3, [r7, #8]
 801545a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	2b02      	cmp	r3, #2
 8015460:	d80c      	bhi.n	801547c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	68d9      	ldr	r1, [r3, #12]
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	1c5a      	adds	r2, r3, #1
 801546a:	4613      	mov	r3, r2
 801546c:	009b      	lsls	r3, r3, #2
 801546e:	4413      	add	r3, r2
 8015470:	00db      	lsls	r3, r3, #3
 8015472:	440b      	add	r3, r1
 8015474:	461a      	mov	r2, r3
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	60da      	str	r2, [r3, #12]
 801547a:	e004      	b.n	8015486 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	461a      	mov	r2, r3
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	3301      	adds	r3, #1
 8015496:	60fb      	str	r3, [r7, #12]
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	2b03      	cmp	r3, #3
 801549c:	d9bd      	bls.n	801541a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2200      	movs	r2, #0
 80154a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	68da      	ldr	r2, [r3, #12]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80154b0:	611a      	str	r2, [r3, #16]
}
 80154b2:	bf00      	nop
 80154b4:	3714      	adds	r7, #20
 80154b6:	46bd      	mov	sp, r7
 80154b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154bc:	4770      	bx	lr

080154be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80154be:	b480      	push	{r7}
 80154c0:	b085      	sub	sp, #20
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80154c6:	2300      	movs	r3, #0
 80154c8:	60fb      	str	r3, [r7, #12]
 80154ca:	e046      	b.n	801555a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6919      	ldr	r1, [r3, #16]
 80154d0:	68fa      	ldr	r2, [r7, #12]
 80154d2:	4613      	mov	r3, r2
 80154d4:	009b      	lsls	r3, r3, #2
 80154d6:	4413      	add	r3, r2
 80154d8:	00db      	lsls	r3, r3, #3
 80154da:	440b      	add	r3, r1
 80154dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	2200      	movs	r2, #0
 80154e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	2200      	movs	r2, #0
 80154e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	2200      	movs	r2, #0
 80154ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	2200      	movs	r2, #0
 80154f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	2200      	movs	r2, #0
 80154fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	2200      	movs	r2, #0
 8015500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015508:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8015510:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	685b      	ldr	r3, [r3, #4]
 8015516:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801551e:	68b9      	ldr	r1, [r7, #8]
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	68fa      	ldr	r2, [r7, #12]
 8015524:	3212      	adds	r2, #18
 8015526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2b02      	cmp	r3, #2
 801552e:	d80c      	bhi.n	801554a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	6919      	ldr	r1, [r3, #16]
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	1c5a      	adds	r2, r3, #1
 8015538:	4613      	mov	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4413      	add	r3, r2
 801553e:	00db      	lsls	r3, r3, #3
 8015540:	440b      	add	r3, r1
 8015542:	461a      	mov	r2, r3
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	60da      	str	r2, [r3, #12]
 8015548:	e004      	b.n	8015554 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	691b      	ldr	r3, [r3, #16]
 801554e:	461a      	mov	r2, r3
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	3301      	adds	r3, #1
 8015558:	60fb      	str	r3, [r7, #12]
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	2b03      	cmp	r3, #3
 801555e:	d9b5      	bls.n	80154cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2200      	movs	r2, #0
 8015564:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2200      	movs	r2, #0
 801556a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2200      	movs	r2, #0
 8015570:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	2200      	movs	r2, #0
 8015576:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2200      	movs	r2, #0
 801557c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	691a      	ldr	r2, [r3, #16]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801558a:	60da      	str	r2, [r3, #12]
}
 801558c:	bf00      	nop
 801558e:	3714      	adds	r7, #20
 8015590:	46bd      	mov	sp, r7
 8015592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015596:	4770      	bx	lr

08015598 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8015598:	b480      	push	{r7}
 801559a:	b08d      	sub	sp, #52	; 0x34
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	3318      	adds	r3, #24
 80155a8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	691b      	ldr	r3, [r3, #16]
 80155ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	691b      	ldr	r3, [r3, #16]
 80155b4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80155b6:	2300      	movs	r3, #0
 80155b8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155c2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	689b      	ldr	r3, [r3, #8]
 80155c8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80155ca:	2300      	movs	r3, #0
 80155cc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80155ce:	6a3b      	ldr	r3, [r7, #32]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80155d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80155da:	d007      	beq.n	80155ec <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80155dc:	697a      	ldr	r2, [r7, #20]
 80155de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e0:	3304      	adds	r3, #4
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	4413      	add	r3, r2
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d001      	beq.n	80155f0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80155ec:	2302      	movs	r3, #2
 80155ee:	e0ff      	b.n	80157f0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80155f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f2:	3301      	adds	r3, #1
 80155f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80155f6:	69fb      	ldr	r3, [r7, #28]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	461a      	mov	r2, r3
 80155fc:	6a3b      	ldr	r3, [r7, #32]
 80155fe:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8015600:	6a3b      	ldr	r3, [r7, #32]
 8015602:	685a      	ldr	r2, [r3, #4]
 8015604:	4b7d      	ldr	r3, [pc, #500]	; (80157fc <ETH_Prepare_Tx_Descriptors+0x264>)
 8015606:	4013      	ands	r3, r2
 8015608:	69fa      	ldr	r2, [r7, #28]
 801560a:	6852      	ldr	r2, [r2, #4]
 801560c:	431a      	orrs	r2, r3
 801560e:	6a3b      	ldr	r3, [r7, #32]
 8015610:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	f003 0301 	and.w	r3, r3, #1
 801561a:	2b00      	cmp	r3, #0
 801561c:	d008      	beq.n	8015630 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 801561e:	6a3b      	ldr	r3, [r7, #32]
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	695b      	ldr	r3, [r3, #20]
 801562a:	431a      	orrs	r2, r3
 801562c:	6a3b      	ldr	r3, [r7, #32]
 801562e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	f003 0320 	and.w	r3, r3, #32
 8015638:	2b00      	cmp	r3, #0
 801563a:	d008      	beq.n	801564e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 801563c:	6a3b      	ldr	r3, [r7, #32]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	691b      	ldr	r3, [r3, #16]
 8015648:	431a      	orrs	r2, r3
 801564a:	6a3b      	ldr	r3, [r7, #32]
 801564c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	f003 0304 	and.w	r3, r3, #4
 8015656:	2b00      	cmp	r3, #0
 8015658:	d005      	beq.n	8015666 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 801565a:	6a3b      	ldr	r3, [r7, #32]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8015662:	6a3b      	ldr	r3, [r7, #32]
 8015664:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8015666:	6a3b      	ldr	r3, [r7, #32]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801566e:	6a3b      	ldr	r3, [r7, #32]
 8015670:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8015672:	f3bf 8f5f 	dmb	sy
}
 8015676:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8015678:	6a3b      	ldr	r3, [r7, #32]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015680:	6a3b      	ldr	r3, [r7, #32]
 8015682:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8015684:	e082      	b.n	801578c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8015686:	6a3b      	ldr	r3, [r7, #32]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801568e:	6a3b      	ldr	r3, [r7, #32]
 8015690:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d006      	beq.n	80156a6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8015698:	6a3b      	ldr	r3, [r7, #32]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80156a0:	6a3b      	ldr	r3, [r7, #32]
 80156a2:	601a      	str	r2, [r3, #0]
 80156a4:	e005      	b.n	80156b2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80156a6:	6a3b      	ldr	r3, [r7, #32]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80156ae:	6a3b      	ldr	r3, [r7, #32]
 80156b0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80156b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b4:	3301      	adds	r3, #1
 80156b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ba:	2b03      	cmp	r3, #3
 80156bc:	d902      	bls.n	80156c4 <ETH_Prepare_Tx_Descriptors+0x12c>
 80156be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c0:	3b04      	subs	r3, #4
 80156c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156cc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80156ce:	6a3b      	ldr	r3, [r7, #32]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80156d6:	6a3b      	ldr	r3, [r7, #32]
 80156d8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80156da:	6a3b      	ldr	r3, [r7, #32]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80156e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80156e6:	d007      	beq.n	80156f8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80156e8:	697a      	ldr	r2, [r7, #20]
 80156ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ec:	3304      	adds	r3, #4
 80156ee:	009b      	lsls	r3, r3, #2
 80156f0:	4413      	add	r3, r2
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d029      	beq.n	801574c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015704:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8015706:	2300      	movs	r3, #0
 8015708:	62bb      	str	r3, [r7, #40]	; 0x28
 801570a:	e019      	b.n	8015740 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801570c:	f3bf 8f5f 	dmb	sy
}
 8015710:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8015712:	6a3b      	ldr	r3, [r7, #32]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801571a:	6a3b      	ldr	r3, [r7, #32]
 801571c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015720:	3301      	adds	r3, #1
 8015722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015726:	2b03      	cmp	r3, #3
 8015728:	d902      	bls.n	8015730 <ETH_Prepare_Tx_Descriptors+0x198>
 801572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801572c:	3b04      	subs	r3, #4
 801572e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015738:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573c:	3301      	adds	r3, #1
 801573e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015744:	429a      	cmp	r2, r3
 8015746:	d3e1      	bcc.n	801570c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8015748:	2302      	movs	r3, #2
 801574a:	e051      	b.n	80157f0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 801574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801574e:	3301      	adds	r3, #1
 8015750:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8015752:	69fb      	ldr	r3, [r7, #28]
 8015754:	689b      	ldr	r3, [r3, #8]
 8015756:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8015758:	69fb      	ldr	r3, [r7, #28]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	461a      	mov	r2, r3
 801575e:	6a3b      	ldr	r3, [r7, #32]
 8015760:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8015762:	6a3b      	ldr	r3, [r7, #32]
 8015764:	685a      	ldr	r2, [r3, #4]
 8015766:	4b25      	ldr	r3, [pc, #148]	; (80157fc <ETH_Prepare_Tx_Descriptors+0x264>)
 8015768:	4013      	ands	r3, r2
 801576a:	69fa      	ldr	r2, [r7, #28]
 801576c:	6852      	ldr	r2, [r2, #4]
 801576e:	431a      	orrs	r2, r3
 8015770:	6a3b      	ldr	r3, [r7, #32]
 8015772:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8015774:	69bb      	ldr	r3, [r7, #24]
 8015776:	3301      	adds	r3, #1
 8015778:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801577a:	f3bf 8f5f 	dmb	sy
}
 801577e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8015780:	6a3b      	ldr	r3, [r7, #32]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015788:	6a3b      	ldr	r3, [r7, #32]
 801578a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801578c:	69fb      	ldr	r3, [r7, #28]
 801578e:	689b      	ldr	r3, [r3, #8]
 8015790:	2b00      	cmp	r3, #0
 8015792:	f47f af78 	bne.w	8015686 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d006      	beq.n	80157aa <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801579c:	6a3b      	ldr	r3, [r7, #32]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80157a4:	6a3b      	ldr	r3, [r7, #32]
 80157a6:	601a      	str	r2, [r3, #0]
 80157a8:	e005      	b.n	80157b6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80157aa:	6a3b      	ldr	r3, [r7, #32]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80157b2:	6a3b      	ldr	r3, [r7, #32]
 80157b4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80157b6:	6a3b      	ldr	r3, [r7, #32]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80157be:	6a3b      	ldr	r3, [r7, #32]
 80157c0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80157c6:	6979      	ldr	r1, [r7, #20]
 80157c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ca:	3304      	adds	r3, #4
 80157cc:	009b      	lsls	r3, r3, #2
 80157ce:	440b      	add	r3, r1
 80157d0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80157d2:	697b      	ldr	r3, [r7, #20]
 80157d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157d6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80157d8:	b672      	cpsid	i
}
 80157da:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80157e0:	69bb      	ldr	r3, [r7, #24]
 80157e2:	4413      	add	r3, r2
 80157e4:	1c5a      	adds	r2, r3, #1
 80157e6:	697b      	ldr	r3, [r7, #20]
 80157e8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80157ea:	b662      	cpsie	i
}
 80157ec:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80157ee:	2300      	movs	r3, #0
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3734      	adds	r7, #52	; 0x34
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr
 80157fc:	ffffe000 	.word	0xffffe000

08015800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015800:	b480      	push	{r7}
 8015802:	b089      	sub	sp, #36	; 0x24
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801580a:	2300      	movs	r3, #0
 801580c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801580e:	2300      	movs	r3, #0
 8015810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8015812:	2300      	movs	r3, #0
 8015814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8015816:	2300      	movs	r3, #0
 8015818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801581a:	2300      	movs	r3, #0
 801581c:	61fb      	str	r3, [r7, #28]
 801581e:	e175      	b.n	8015b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8015820:	2201      	movs	r2, #1
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	fa02 f303 	lsl.w	r3, r2, r3
 8015828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	697a      	ldr	r2, [r7, #20]
 8015830:	4013      	ands	r3, r2
 8015832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015834:	693a      	ldr	r2, [r7, #16]
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	429a      	cmp	r2, r3
 801583a:	f040 8164 	bne.w	8015b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	685b      	ldr	r3, [r3, #4]
 8015842:	f003 0303 	and.w	r3, r3, #3
 8015846:	2b01      	cmp	r3, #1
 8015848:	d005      	beq.n	8015856 <HAL_GPIO_Init+0x56>
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	685b      	ldr	r3, [r3, #4]
 801584e:	f003 0303 	and.w	r3, r3, #3
 8015852:	2b02      	cmp	r3, #2
 8015854:	d130      	bne.n	80158b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	689b      	ldr	r3, [r3, #8]
 801585a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	005b      	lsls	r3, r3, #1
 8015860:	2203      	movs	r2, #3
 8015862:	fa02 f303 	lsl.w	r3, r2, r3
 8015866:	43db      	mvns	r3, r3
 8015868:	69ba      	ldr	r2, [r7, #24]
 801586a:	4013      	ands	r3, r2
 801586c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	68da      	ldr	r2, [r3, #12]
 8015872:	69fb      	ldr	r3, [r7, #28]
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	fa02 f303 	lsl.w	r3, r2, r3
 801587a:	69ba      	ldr	r2, [r7, #24]
 801587c:	4313      	orrs	r3, r2
 801587e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	69ba      	ldr	r2, [r7, #24]
 8015884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	685b      	ldr	r3, [r3, #4]
 801588a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801588c:	2201      	movs	r2, #1
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	fa02 f303 	lsl.w	r3, r2, r3
 8015894:	43db      	mvns	r3, r3
 8015896:	69ba      	ldr	r2, [r7, #24]
 8015898:	4013      	ands	r3, r2
 801589a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	685b      	ldr	r3, [r3, #4]
 80158a0:	091b      	lsrs	r3, r3, #4
 80158a2:	f003 0201 	and.w	r2, r3, #1
 80158a6:	69fb      	ldr	r3, [r7, #28]
 80158a8:	fa02 f303 	lsl.w	r3, r2, r3
 80158ac:	69ba      	ldr	r2, [r7, #24]
 80158ae:	4313      	orrs	r3, r2
 80158b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	69ba      	ldr	r2, [r7, #24]
 80158b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80158b8:	683b      	ldr	r3, [r7, #0]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	f003 0303 	and.w	r3, r3, #3
 80158c0:	2b03      	cmp	r3, #3
 80158c2:	d017      	beq.n	80158f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	68db      	ldr	r3, [r3, #12]
 80158c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	005b      	lsls	r3, r3, #1
 80158ce:	2203      	movs	r2, #3
 80158d0:	fa02 f303 	lsl.w	r3, r2, r3
 80158d4:	43db      	mvns	r3, r3
 80158d6:	69ba      	ldr	r2, [r7, #24]
 80158d8:	4013      	ands	r3, r2
 80158da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80158dc:	683b      	ldr	r3, [r7, #0]
 80158de:	689a      	ldr	r2, [r3, #8]
 80158e0:	69fb      	ldr	r3, [r7, #28]
 80158e2:	005b      	lsls	r3, r3, #1
 80158e4:	fa02 f303 	lsl.w	r3, r2, r3
 80158e8:	69ba      	ldr	r2, [r7, #24]
 80158ea:	4313      	orrs	r3, r2
 80158ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	69ba      	ldr	r2, [r7, #24]
 80158f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	685b      	ldr	r3, [r3, #4]
 80158f8:	f003 0303 	and.w	r3, r3, #3
 80158fc:	2b02      	cmp	r3, #2
 80158fe:	d123      	bne.n	8015948 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8015900:	69fb      	ldr	r3, [r7, #28]
 8015902:	08da      	lsrs	r2, r3, #3
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	3208      	adds	r2, #8
 8015908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801590c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801590e:	69fb      	ldr	r3, [r7, #28]
 8015910:	f003 0307 	and.w	r3, r3, #7
 8015914:	009b      	lsls	r3, r3, #2
 8015916:	220f      	movs	r2, #15
 8015918:	fa02 f303 	lsl.w	r3, r2, r3
 801591c:	43db      	mvns	r3, r3
 801591e:	69ba      	ldr	r2, [r7, #24]
 8015920:	4013      	ands	r3, r2
 8015922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	691a      	ldr	r2, [r3, #16]
 8015928:	69fb      	ldr	r3, [r7, #28]
 801592a:	f003 0307 	and.w	r3, r3, #7
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	fa02 f303 	lsl.w	r3, r2, r3
 8015934:	69ba      	ldr	r2, [r7, #24]
 8015936:	4313      	orrs	r3, r2
 8015938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	08da      	lsrs	r2, r3, #3
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	3208      	adds	r2, #8
 8015942:	69b9      	ldr	r1, [r7, #24]
 8015944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801594e:	69fb      	ldr	r3, [r7, #28]
 8015950:	005b      	lsls	r3, r3, #1
 8015952:	2203      	movs	r2, #3
 8015954:	fa02 f303 	lsl.w	r3, r2, r3
 8015958:	43db      	mvns	r3, r3
 801595a:	69ba      	ldr	r2, [r7, #24]
 801595c:	4013      	ands	r3, r2
 801595e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	f003 0203 	and.w	r2, r3, #3
 8015968:	69fb      	ldr	r3, [r7, #28]
 801596a:	005b      	lsls	r3, r3, #1
 801596c:	fa02 f303 	lsl.w	r3, r2, r3
 8015970:	69ba      	ldr	r2, [r7, #24]
 8015972:	4313      	orrs	r3, r2
 8015974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	69ba      	ldr	r2, [r7, #24]
 801597a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015984:	2b00      	cmp	r3, #0
 8015986:	f000 80be 	beq.w	8015b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801598a:	4b66      	ldr	r3, [pc, #408]	; (8015b24 <HAL_GPIO_Init+0x324>)
 801598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801598e:	4a65      	ldr	r2, [pc, #404]	; (8015b24 <HAL_GPIO_Init+0x324>)
 8015990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015994:	6453      	str	r3, [r2, #68]	; 0x44
 8015996:	4b63      	ldr	r3, [pc, #396]	; (8015b24 <HAL_GPIO_Init+0x324>)
 8015998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801599a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801599e:	60fb      	str	r3, [r7, #12]
 80159a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80159a2:	4a61      	ldr	r2, [pc, #388]	; (8015b28 <HAL_GPIO_Init+0x328>)
 80159a4:	69fb      	ldr	r3, [r7, #28]
 80159a6:	089b      	lsrs	r3, r3, #2
 80159a8:	3302      	adds	r3, #2
 80159aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80159b0:	69fb      	ldr	r3, [r7, #28]
 80159b2:	f003 0303 	and.w	r3, r3, #3
 80159b6:	009b      	lsls	r3, r3, #2
 80159b8:	220f      	movs	r2, #15
 80159ba:	fa02 f303 	lsl.w	r3, r2, r3
 80159be:	43db      	mvns	r3, r3
 80159c0:	69ba      	ldr	r2, [r7, #24]
 80159c2:	4013      	ands	r3, r2
 80159c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	4a58      	ldr	r2, [pc, #352]	; (8015b2c <HAL_GPIO_Init+0x32c>)
 80159ca:	4293      	cmp	r3, r2
 80159cc:	d037      	beq.n	8015a3e <HAL_GPIO_Init+0x23e>
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	4a57      	ldr	r2, [pc, #348]	; (8015b30 <HAL_GPIO_Init+0x330>)
 80159d2:	4293      	cmp	r3, r2
 80159d4:	d031      	beq.n	8015a3a <HAL_GPIO_Init+0x23a>
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	4a56      	ldr	r2, [pc, #344]	; (8015b34 <HAL_GPIO_Init+0x334>)
 80159da:	4293      	cmp	r3, r2
 80159dc:	d02b      	beq.n	8015a36 <HAL_GPIO_Init+0x236>
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	4a55      	ldr	r2, [pc, #340]	; (8015b38 <HAL_GPIO_Init+0x338>)
 80159e2:	4293      	cmp	r3, r2
 80159e4:	d025      	beq.n	8015a32 <HAL_GPIO_Init+0x232>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	4a54      	ldr	r2, [pc, #336]	; (8015b3c <HAL_GPIO_Init+0x33c>)
 80159ea:	4293      	cmp	r3, r2
 80159ec:	d01f      	beq.n	8015a2e <HAL_GPIO_Init+0x22e>
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	4a53      	ldr	r2, [pc, #332]	; (8015b40 <HAL_GPIO_Init+0x340>)
 80159f2:	4293      	cmp	r3, r2
 80159f4:	d019      	beq.n	8015a2a <HAL_GPIO_Init+0x22a>
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	4a52      	ldr	r2, [pc, #328]	; (8015b44 <HAL_GPIO_Init+0x344>)
 80159fa:	4293      	cmp	r3, r2
 80159fc:	d013      	beq.n	8015a26 <HAL_GPIO_Init+0x226>
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	4a51      	ldr	r2, [pc, #324]	; (8015b48 <HAL_GPIO_Init+0x348>)
 8015a02:	4293      	cmp	r3, r2
 8015a04:	d00d      	beq.n	8015a22 <HAL_GPIO_Init+0x222>
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	4a50      	ldr	r2, [pc, #320]	; (8015b4c <HAL_GPIO_Init+0x34c>)
 8015a0a:	4293      	cmp	r3, r2
 8015a0c:	d007      	beq.n	8015a1e <HAL_GPIO_Init+0x21e>
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	4a4f      	ldr	r2, [pc, #316]	; (8015b50 <HAL_GPIO_Init+0x350>)
 8015a12:	4293      	cmp	r3, r2
 8015a14:	d101      	bne.n	8015a1a <HAL_GPIO_Init+0x21a>
 8015a16:	2309      	movs	r3, #9
 8015a18:	e012      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a1a:	230a      	movs	r3, #10
 8015a1c:	e010      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a1e:	2308      	movs	r3, #8
 8015a20:	e00e      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a22:	2307      	movs	r3, #7
 8015a24:	e00c      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a26:	2306      	movs	r3, #6
 8015a28:	e00a      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a2a:	2305      	movs	r3, #5
 8015a2c:	e008      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a2e:	2304      	movs	r3, #4
 8015a30:	e006      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a32:	2303      	movs	r3, #3
 8015a34:	e004      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a36:	2302      	movs	r3, #2
 8015a38:	e002      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a3a:	2301      	movs	r3, #1
 8015a3c:	e000      	b.n	8015a40 <HAL_GPIO_Init+0x240>
 8015a3e:	2300      	movs	r3, #0
 8015a40:	69fa      	ldr	r2, [r7, #28]
 8015a42:	f002 0203 	and.w	r2, r2, #3
 8015a46:	0092      	lsls	r2, r2, #2
 8015a48:	4093      	lsls	r3, r2
 8015a4a:	69ba      	ldr	r2, [r7, #24]
 8015a4c:	4313      	orrs	r3, r2
 8015a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8015a50:	4935      	ldr	r1, [pc, #212]	; (8015b28 <HAL_GPIO_Init+0x328>)
 8015a52:	69fb      	ldr	r3, [r7, #28]
 8015a54:	089b      	lsrs	r3, r3, #2
 8015a56:	3302      	adds	r3, #2
 8015a58:	69ba      	ldr	r2, [r7, #24]
 8015a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015a5e:	4b3d      	ldr	r3, [pc, #244]	; (8015b54 <HAL_GPIO_Init+0x354>)
 8015a60:	689b      	ldr	r3, [r3, #8]
 8015a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	43db      	mvns	r3, r3
 8015a68:	69ba      	ldr	r2, [r7, #24]
 8015a6a:	4013      	ands	r3, r2
 8015a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	685b      	ldr	r3, [r3, #4]
 8015a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d003      	beq.n	8015a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8015a7a:	69ba      	ldr	r2, [r7, #24]
 8015a7c:	693b      	ldr	r3, [r7, #16]
 8015a7e:	4313      	orrs	r3, r2
 8015a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015a82:	4a34      	ldr	r2, [pc, #208]	; (8015b54 <HAL_GPIO_Init+0x354>)
 8015a84:	69bb      	ldr	r3, [r7, #24]
 8015a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015a88:	4b32      	ldr	r3, [pc, #200]	; (8015b54 <HAL_GPIO_Init+0x354>)
 8015a8a:	68db      	ldr	r3, [r3, #12]
 8015a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	43db      	mvns	r3, r3
 8015a92:	69ba      	ldr	r2, [r7, #24]
 8015a94:	4013      	ands	r3, r2
 8015a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	685b      	ldr	r3, [r3, #4]
 8015a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d003      	beq.n	8015aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8015aa4:	69ba      	ldr	r2, [r7, #24]
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	4313      	orrs	r3, r2
 8015aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015aac:	4a29      	ldr	r2, [pc, #164]	; (8015b54 <HAL_GPIO_Init+0x354>)
 8015aae:	69bb      	ldr	r3, [r7, #24]
 8015ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015ab2:	4b28      	ldr	r3, [pc, #160]	; (8015b54 <HAL_GPIO_Init+0x354>)
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015ab8:	693b      	ldr	r3, [r7, #16]
 8015aba:	43db      	mvns	r3, r3
 8015abc:	69ba      	ldr	r2, [r7, #24]
 8015abe:	4013      	ands	r3, r2
 8015ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d003      	beq.n	8015ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8015ace:	69ba      	ldr	r2, [r7, #24]
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	4313      	orrs	r3, r2
 8015ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015ad6:	4a1f      	ldr	r2, [pc, #124]	; (8015b54 <HAL_GPIO_Init+0x354>)
 8015ad8:	69bb      	ldr	r3, [r7, #24]
 8015ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015adc:	4b1d      	ldr	r3, [pc, #116]	; (8015b54 <HAL_GPIO_Init+0x354>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	43db      	mvns	r3, r3
 8015ae6:	69ba      	ldr	r2, [r7, #24]
 8015ae8:	4013      	ands	r3, r2
 8015aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	685b      	ldr	r3, [r3, #4]
 8015af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d003      	beq.n	8015b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8015af8:	69ba      	ldr	r2, [r7, #24]
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	4313      	orrs	r3, r2
 8015afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015b00:	4a14      	ldr	r2, [pc, #80]	; (8015b54 <HAL_GPIO_Init+0x354>)
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	3301      	adds	r3, #1
 8015b0a:	61fb      	str	r3, [r7, #28]
 8015b0c:	69fb      	ldr	r3, [r7, #28]
 8015b0e:	2b0f      	cmp	r3, #15
 8015b10:	f67f ae86 	bls.w	8015820 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8015b14:	bf00      	nop
 8015b16:	bf00      	nop
 8015b18:	3724      	adds	r7, #36	; 0x24
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b20:	4770      	bx	lr
 8015b22:	bf00      	nop
 8015b24:	40023800 	.word	0x40023800
 8015b28:	40013800 	.word	0x40013800
 8015b2c:	40020000 	.word	0x40020000
 8015b30:	40020400 	.word	0x40020400
 8015b34:	40020800 	.word	0x40020800
 8015b38:	40020c00 	.word	0x40020c00
 8015b3c:	40021000 	.word	0x40021000
 8015b40:	40021400 	.word	0x40021400
 8015b44:	40021800 	.word	0x40021800
 8015b48:	40021c00 	.word	0x40021c00
 8015b4c:	40022000 	.word	0x40022000
 8015b50:	40022400 	.word	0x40022400
 8015b54:	40013c00 	.word	0x40013c00

08015b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8015b58:	b480      	push	{r7}
 8015b5a:	b085      	sub	sp, #20
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
 8015b60:	460b      	mov	r3, r1
 8015b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	691a      	ldr	r2, [r3, #16]
 8015b68:	887b      	ldrh	r3, [r7, #2]
 8015b6a:	4013      	ands	r3, r2
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d002      	beq.n	8015b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015b70:	2301      	movs	r3, #1
 8015b72:	73fb      	strb	r3, [r7, #15]
 8015b74:	e001      	b.n	8015b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015b76:	2300      	movs	r3, #0
 8015b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8015b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3714      	adds	r7, #20
 8015b80:	46bd      	mov	sp, r7
 8015b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b86:	4770      	bx	lr

08015b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015b88:	b480      	push	{r7}
 8015b8a:	b083      	sub	sp, #12
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	460b      	mov	r3, r1
 8015b92:	807b      	strh	r3, [r7, #2]
 8015b94:	4613      	mov	r3, r2
 8015b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015b98:	787b      	ldrb	r3, [r7, #1]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d003      	beq.n	8015ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015b9e:	887a      	ldrh	r2, [r7, #2]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8015ba4:	e003      	b.n	8015bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8015ba6:	887b      	ldrh	r3, [r7, #2]
 8015ba8:	041a      	lsls	r2, r3, #16
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	619a      	str	r2, [r3, #24]
}
 8015bae:	bf00      	nop
 8015bb0:	370c      	adds	r7, #12
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb8:	4770      	bx	lr

08015bba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8015bba:	b480      	push	{r7}
 8015bbc:	b085      	sub	sp, #20
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	695b      	ldr	r3, [r3, #20]
 8015bca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8015bcc:	887a      	ldrh	r2, [r7, #2]
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	4013      	ands	r3, r2
 8015bd2:	041a      	lsls	r2, r3, #16
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	43d9      	mvns	r1, r3
 8015bd8:	887b      	ldrh	r3, [r7, #2]
 8015bda:	400b      	ands	r3, r1
 8015bdc:	431a      	orrs	r2, r3
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	619a      	str	r2, [r3, #24]
}
 8015be2:	bf00      	nop
 8015be4:	3714      	adds	r7, #20
 8015be6:	46bd      	mov	sp, r7
 8015be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bec:	4770      	bx	lr
	...

08015bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015bfa:	4b08      	ldr	r3, [pc, #32]	; (8015c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8015bfc:	695a      	ldr	r2, [r3, #20]
 8015bfe:	88fb      	ldrh	r3, [r7, #6]
 8015c00:	4013      	ands	r3, r2
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d006      	beq.n	8015c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015c06:	4a05      	ldr	r2, [pc, #20]	; (8015c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8015c08:	88fb      	ldrh	r3, [r7, #6]
 8015c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015c0c:	88fb      	ldrh	r3, [r7, #6]
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f000 f806 	bl	8015c20 <HAL_GPIO_EXTI_Callback>
  }
}
 8015c14:	bf00      	nop
 8015c16:	3708      	adds	r7, #8
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}
 8015c1c:	40013c00 	.word	0x40013c00

08015c20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8015c20:	b480      	push	{r7}
 8015c22:	b083      	sub	sp, #12
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	4603      	mov	r3, r0
 8015c28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8015c2a:	bf00      	nop
 8015c2c:	370c      	adds	r7, #12
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c34:	4770      	bx	lr
	...

08015c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d101      	bne.n	8015c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015c46:	2301      	movs	r3, #1
 8015c48:	e07f      	b.n	8015d4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015c50:	b2db      	uxtb	r3, r3
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d106      	bne.n	8015c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	2200      	movs	r2, #0
 8015c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f7fb f9e8 	bl	8011034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2224      	movs	r2, #36	; 0x24
 8015c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	681a      	ldr	r2, [r3, #0]
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	f022 0201 	bic.w	r2, r2, #1
 8015c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	685a      	ldr	r2, [r3, #4]
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015c88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	689a      	ldr	r2, [r3, #8]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015c98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	2b01      	cmp	r3, #1
 8015ca0:	d107      	bne.n	8015cb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	689a      	ldr	r2, [r3, #8]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015cae:	609a      	str	r2, [r3, #8]
 8015cb0:	e006      	b.n	8015cc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	689a      	ldr	r2, [r3, #8]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015cbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	68db      	ldr	r3, [r3, #12]
 8015cc4:	2b02      	cmp	r3, #2
 8015cc6:	d104      	bne.n	8015cd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015cd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	6859      	ldr	r1, [r3, #4]
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	681a      	ldr	r2, [r3, #0]
 8015cdc:	4b1d      	ldr	r3, [pc, #116]	; (8015d54 <HAL_I2C_Init+0x11c>)
 8015cde:	430b      	orrs	r3, r1
 8015ce0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	68da      	ldr	r2, [r3, #12]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015cf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	691a      	ldr	r2, [r3, #16]
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	695b      	ldr	r3, [r3, #20]
 8015cfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	699b      	ldr	r3, [r3, #24]
 8015d02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	430a      	orrs	r2, r1
 8015d0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	69d9      	ldr	r1, [r3, #28]
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	6a1a      	ldr	r2, [r3, #32]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	430a      	orrs	r2, r1
 8015d1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	681a      	ldr	r2, [r3, #0]
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	f042 0201 	orr.w	r2, r2, #1
 8015d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	2220      	movs	r2, #32
 8015d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2200      	movs	r2, #0
 8015d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015d48:	2300      	movs	r3, #0
}
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3708      	adds	r7, #8
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	02008000 	.word	0x02008000

08015d58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b088      	sub	sp, #32
 8015d5c:	af02      	add	r7, sp, #8
 8015d5e:	60f8      	str	r0, [r7, #12]
 8015d60:	4608      	mov	r0, r1
 8015d62:	4611      	mov	r1, r2
 8015d64:	461a      	mov	r2, r3
 8015d66:	4603      	mov	r3, r0
 8015d68:	817b      	strh	r3, [r7, #10]
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	813b      	strh	r3, [r7, #8]
 8015d6e:	4613      	mov	r3, r2
 8015d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	2b20      	cmp	r3, #32
 8015d7c:	f040 80f9 	bne.w	8015f72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d80:	6a3b      	ldr	r3, [r7, #32]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d002      	beq.n	8015d8c <HAL_I2C_Mem_Write+0x34>
 8015d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d105      	bne.n	8015d98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8015d94:	2301      	movs	r3, #1
 8015d96:	e0ed      	b.n	8015f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d101      	bne.n	8015da6 <HAL_I2C_Mem_Write+0x4e>
 8015da2:	2302      	movs	r3, #2
 8015da4:	e0e6      	b.n	8015f74 <HAL_I2C_Mem_Write+0x21c>
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2201      	movs	r2, #1
 8015daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015dae:	f7fd fa1b 	bl	80131e8 <HAL_GetTick>
 8015db2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	9300      	str	r3, [sp, #0]
 8015db8:	2319      	movs	r3, #25
 8015dba:	2201      	movs	r2, #1
 8015dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015dc0:	68f8      	ldr	r0, [r7, #12]
 8015dc2:	f000 fac3 	bl	801634c <I2C_WaitOnFlagUntilTimeout>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d001      	beq.n	8015dd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8015dcc:	2301      	movs	r3, #1
 8015dce:	e0d1      	b.n	8015f74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2221      	movs	r2, #33	; 0x21
 8015dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	2240      	movs	r2, #64	; 0x40
 8015ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	2200      	movs	r2, #0
 8015de4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	6a3a      	ldr	r2, [r7, #32]
 8015dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2200      	movs	r2, #0
 8015df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8015df8:	88f8      	ldrh	r0, [r7, #6]
 8015dfa:	893a      	ldrh	r2, [r7, #8]
 8015dfc:	8979      	ldrh	r1, [r7, #10]
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	9301      	str	r3, [sp, #4]
 8015e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e04:	9300      	str	r3, [sp, #0]
 8015e06:	4603      	mov	r3, r0
 8015e08:	68f8      	ldr	r0, [r7, #12]
 8015e0a:	f000 f9d3 	bl	80161b4 <I2C_RequestMemoryWrite>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d005      	beq.n	8015e20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2200      	movs	r2, #0
 8015e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8015e1c:	2301      	movs	r3, #1
 8015e1e:	e0a9      	b.n	8015f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e24:	b29b      	uxth	r3, r3
 8015e26:	2bff      	cmp	r3, #255	; 0xff
 8015e28:	d90e      	bls.n	8015e48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	22ff      	movs	r2, #255	; 0xff
 8015e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e34:	b2da      	uxtb	r2, r3
 8015e36:	8979      	ldrh	r1, [r7, #10]
 8015e38:	2300      	movs	r3, #0
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015e40:	68f8      	ldr	r0, [r7, #12]
 8015e42:	f000 fc1f 	bl	8016684 <I2C_TransferConfig>
 8015e46:	e00f      	b.n	8015e68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e4c:	b29a      	uxth	r2, r3
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e56:	b2da      	uxtb	r2, r3
 8015e58:	8979      	ldrh	r1, [r7, #10]
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	9300      	str	r3, [sp, #0]
 8015e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015e62:	68f8      	ldr	r0, [r7, #12]
 8015e64:	f000 fc0e 	bl	8016684 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015e68:	697a      	ldr	r2, [r7, #20]
 8015e6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e6c:	68f8      	ldr	r0, [r7, #12]
 8015e6e:	f000 faad 	bl	80163cc <I2C_WaitOnTXISFlagUntilTimeout>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d001      	beq.n	8015e7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e07b      	b.n	8015f74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e80:	781a      	ldrb	r2, [r3, #0]
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e8c:	1c5a      	adds	r2, r3, #1
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	3b01      	subs	r3, #1
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ea4:	3b01      	subs	r3, #1
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d034      	beq.n	8015f20 <HAL_I2C_Mem_Write+0x1c8>
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d130      	bne.n	8015f20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015ebe:	697b      	ldr	r3, [r7, #20]
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	2180      	movs	r1, #128	; 0x80
 8015ec8:	68f8      	ldr	r0, [r7, #12]
 8015eca:	f000 fa3f 	bl	801634c <I2C_WaitOnFlagUntilTimeout>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d001      	beq.n	8015ed8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	e04d      	b.n	8015f74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015edc:	b29b      	uxth	r3, r3
 8015ede:	2bff      	cmp	r3, #255	; 0xff
 8015ee0:	d90e      	bls.n	8015f00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	22ff      	movs	r2, #255	; 0xff
 8015ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015eec:	b2da      	uxtb	r2, r3
 8015eee:	8979      	ldrh	r1, [r7, #10]
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	9300      	str	r3, [sp, #0]
 8015ef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015ef8:	68f8      	ldr	r0, [r7, #12]
 8015efa:	f000 fbc3 	bl	8016684 <I2C_TransferConfig>
 8015efe:	e00f      	b.n	8015f20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f04:	b29a      	uxth	r2, r3
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f0e:	b2da      	uxtb	r2, r3
 8015f10:	8979      	ldrh	r1, [r7, #10]
 8015f12:	2300      	movs	r3, #0
 8015f14:	9300      	str	r3, [sp, #0]
 8015f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015f1a:	68f8      	ldr	r0, [r7, #12]
 8015f1c:	f000 fbb2 	bl	8016684 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f24:	b29b      	uxth	r3, r3
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d19e      	bne.n	8015e68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015f2a:	697a      	ldr	r2, [r7, #20]
 8015f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015f2e:	68f8      	ldr	r0, [r7, #12]
 8015f30:	f000 fa8c 	bl	801644c <I2C_WaitOnSTOPFlagUntilTimeout>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d001      	beq.n	8015f3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	e01a      	b.n	8015f74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2220      	movs	r2, #32
 8015f44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	6859      	ldr	r1, [r3, #4]
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	4b0a      	ldr	r3, [pc, #40]	; (8015f7c <HAL_I2C_Mem_Write+0x224>)
 8015f52:	400b      	ands	r3, r1
 8015f54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	2220      	movs	r2, #32
 8015f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	2200      	movs	r2, #0
 8015f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	e000      	b.n	8015f74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8015f72:	2302      	movs	r3, #2
  }
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3718      	adds	r7, #24
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	fe00e800 	.word	0xfe00e800

08015f80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b088      	sub	sp, #32
 8015f84:	af02      	add	r7, sp, #8
 8015f86:	60f8      	str	r0, [r7, #12]
 8015f88:	4608      	mov	r0, r1
 8015f8a:	4611      	mov	r1, r2
 8015f8c:	461a      	mov	r2, r3
 8015f8e:	4603      	mov	r3, r0
 8015f90:	817b      	strh	r3, [r7, #10]
 8015f92:	460b      	mov	r3, r1
 8015f94:	813b      	strh	r3, [r7, #8]
 8015f96:	4613      	mov	r3, r2
 8015f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015fa0:	b2db      	uxtb	r3, r3
 8015fa2:	2b20      	cmp	r3, #32
 8015fa4:	f040 80fd 	bne.w	80161a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8015fa8:	6a3b      	ldr	r3, [r7, #32]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d002      	beq.n	8015fb4 <HAL_I2C_Mem_Read+0x34>
 8015fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d105      	bne.n	8015fc0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015fba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	e0f1      	b.n	80161a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015fc6:	2b01      	cmp	r3, #1
 8015fc8:	d101      	bne.n	8015fce <HAL_I2C_Mem_Read+0x4e>
 8015fca:	2302      	movs	r3, #2
 8015fcc:	e0ea      	b.n	80161a4 <HAL_I2C_Mem_Read+0x224>
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2201      	movs	r2, #1
 8015fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015fd6:	f7fd f907 	bl	80131e8 <HAL_GetTick>
 8015fda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	2319      	movs	r3, #25
 8015fe2:	2201      	movs	r2, #1
 8015fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015fe8:	68f8      	ldr	r0, [r7, #12]
 8015fea:	f000 f9af 	bl	801634c <I2C_WaitOnFlagUntilTimeout>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d001      	beq.n	8015ff8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	e0d5      	b.n	80161a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	2222      	movs	r2, #34	; 0x22
 8015ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2240      	movs	r2, #64	; 0x40
 8016004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	2200      	movs	r2, #0
 801600c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	6a3a      	ldr	r2, [r7, #32]
 8016012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	2200      	movs	r2, #0
 801601e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016020:	88f8      	ldrh	r0, [r7, #6]
 8016022:	893a      	ldrh	r2, [r7, #8]
 8016024:	8979      	ldrh	r1, [r7, #10]
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	9301      	str	r3, [sp, #4]
 801602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602c:	9300      	str	r3, [sp, #0]
 801602e:	4603      	mov	r3, r0
 8016030:	68f8      	ldr	r0, [r7, #12]
 8016032:	f000 f913 	bl	801625c <I2C_RequestMemoryRead>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d005      	beq.n	8016048 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	2200      	movs	r2, #0
 8016040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8016044:	2301      	movs	r3, #1
 8016046:	e0ad      	b.n	80161a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801604c:	b29b      	uxth	r3, r3
 801604e:	2bff      	cmp	r3, #255	; 0xff
 8016050:	d90e      	bls.n	8016070 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	22ff      	movs	r2, #255	; 0xff
 8016056:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801605c:	b2da      	uxtb	r2, r3
 801605e:	8979      	ldrh	r1, [r7, #10]
 8016060:	4b52      	ldr	r3, [pc, #328]	; (80161ac <HAL_I2C_Mem_Read+0x22c>)
 8016062:	9300      	str	r3, [sp, #0]
 8016064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f000 fb0b 	bl	8016684 <I2C_TransferConfig>
 801606e:	e00f      	b.n	8016090 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016074:	b29a      	uxth	r2, r3
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801607e:	b2da      	uxtb	r2, r3
 8016080:	8979      	ldrh	r1, [r7, #10]
 8016082:	4b4a      	ldr	r3, [pc, #296]	; (80161ac <HAL_I2C_Mem_Read+0x22c>)
 8016084:	9300      	str	r3, [sp, #0]
 8016086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801608a:	68f8      	ldr	r0, [r7, #12]
 801608c:	f000 fafa 	bl	8016684 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016090:	697b      	ldr	r3, [r7, #20]
 8016092:	9300      	str	r3, [sp, #0]
 8016094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016096:	2200      	movs	r2, #0
 8016098:	2104      	movs	r1, #4
 801609a:	68f8      	ldr	r0, [r7, #12]
 801609c:	f000 f956 	bl	801634c <I2C_WaitOnFlagUntilTimeout>
 80160a0:	4603      	mov	r3, r0
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d001      	beq.n	80160aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80160a6:	2301      	movs	r3, #1
 80160a8:	e07c      	b.n	80161a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b4:	b2d2      	uxtb	r2, r2
 80160b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160bc:	1c5a      	adds	r2, r3, #1
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160c6:	3b01      	subs	r3, #1
 80160c8:	b29a      	uxth	r2, r3
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	3b01      	subs	r3, #1
 80160d6:	b29a      	uxth	r2, r3
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d034      	beq.n	8016150 <HAL_I2C_Mem_Read+0x1d0>
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d130      	bne.n	8016150 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80160ee:	697b      	ldr	r3, [r7, #20]
 80160f0:	9300      	str	r3, [sp, #0]
 80160f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f4:	2200      	movs	r2, #0
 80160f6:	2180      	movs	r1, #128	; 0x80
 80160f8:	68f8      	ldr	r0, [r7, #12]
 80160fa:	f000 f927 	bl	801634c <I2C_WaitOnFlagUntilTimeout>
 80160fe:	4603      	mov	r3, r0
 8016100:	2b00      	cmp	r3, #0
 8016102:	d001      	beq.n	8016108 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8016104:	2301      	movs	r3, #1
 8016106:	e04d      	b.n	80161a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801610c:	b29b      	uxth	r3, r3
 801610e:	2bff      	cmp	r3, #255	; 0xff
 8016110:	d90e      	bls.n	8016130 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	22ff      	movs	r2, #255	; 0xff
 8016116:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801611c:	b2da      	uxtb	r2, r3
 801611e:	8979      	ldrh	r1, [r7, #10]
 8016120:	2300      	movs	r3, #0
 8016122:	9300      	str	r3, [sp, #0]
 8016124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016128:	68f8      	ldr	r0, [r7, #12]
 801612a:	f000 faab 	bl	8016684 <I2C_TransferConfig>
 801612e:	e00f      	b.n	8016150 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016134:	b29a      	uxth	r2, r3
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801613e:	b2da      	uxtb	r2, r3
 8016140:	8979      	ldrh	r1, [r7, #10]
 8016142:	2300      	movs	r3, #0
 8016144:	9300      	str	r3, [sp, #0]
 8016146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801614a:	68f8      	ldr	r0, [r7, #12]
 801614c:	f000 fa9a 	bl	8016684 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016154:	b29b      	uxth	r3, r3
 8016156:	2b00      	cmp	r3, #0
 8016158:	d19a      	bne.n	8016090 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801615a:	697a      	ldr	r2, [r7, #20]
 801615c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801615e:	68f8      	ldr	r0, [r7, #12]
 8016160:	f000 f974 	bl	801644c <I2C_WaitOnSTOPFlagUntilTimeout>
 8016164:	4603      	mov	r3, r0
 8016166:	2b00      	cmp	r3, #0
 8016168:	d001      	beq.n	801616e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801616a:	2301      	movs	r3, #1
 801616c:	e01a      	b.n	80161a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	2220      	movs	r2, #32
 8016174:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	6859      	ldr	r1, [r3, #4]
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	681a      	ldr	r2, [r3, #0]
 8016180:	4b0b      	ldr	r3, [pc, #44]	; (80161b0 <HAL_I2C_Mem_Read+0x230>)
 8016182:	400b      	ands	r3, r1
 8016184:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	2220      	movs	r2, #32
 801618a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	2200      	movs	r2, #0
 8016192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	2200      	movs	r2, #0
 801619a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801619e:	2300      	movs	r3, #0
 80161a0:	e000      	b.n	80161a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80161a2:	2302      	movs	r3, #2
  }
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3718      	adds	r7, #24
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	80002400 	.word	0x80002400
 80161b0:	fe00e800 	.word	0xfe00e800

080161b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b086      	sub	sp, #24
 80161b8:	af02      	add	r7, sp, #8
 80161ba:	60f8      	str	r0, [r7, #12]
 80161bc:	4608      	mov	r0, r1
 80161be:	4611      	mov	r1, r2
 80161c0:	461a      	mov	r2, r3
 80161c2:	4603      	mov	r3, r0
 80161c4:	817b      	strh	r3, [r7, #10]
 80161c6:	460b      	mov	r3, r1
 80161c8:	813b      	strh	r3, [r7, #8]
 80161ca:	4613      	mov	r3, r2
 80161cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80161ce:	88fb      	ldrh	r3, [r7, #6]
 80161d0:	b2da      	uxtb	r2, r3
 80161d2:	8979      	ldrh	r1, [r7, #10]
 80161d4:	4b20      	ldr	r3, [pc, #128]	; (8016258 <I2C_RequestMemoryWrite+0xa4>)
 80161d6:	9300      	str	r3, [sp, #0]
 80161d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80161dc:	68f8      	ldr	r0, [r7, #12]
 80161de:	f000 fa51 	bl	8016684 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80161e2:	69fa      	ldr	r2, [r7, #28]
 80161e4:	69b9      	ldr	r1, [r7, #24]
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	f000 f8f0 	bl	80163cc <I2C_WaitOnTXISFlagUntilTimeout>
 80161ec:	4603      	mov	r3, r0
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d001      	beq.n	80161f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80161f2:	2301      	movs	r3, #1
 80161f4:	e02c      	b.n	8016250 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80161f6:	88fb      	ldrh	r3, [r7, #6]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d105      	bne.n	8016208 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80161fc:	893b      	ldrh	r3, [r7, #8]
 80161fe:	b2da      	uxtb	r2, r3
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	629a      	str	r2, [r3, #40]	; 0x28
 8016206:	e015      	b.n	8016234 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016208:	893b      	ldrh	r3, [r7, #8]
 801620a:	0a1b      	lsrs	r3, r3, #8
 801620c:	b29b      	uxth	r3, r3
 801620e:	b2da      	uxtb	r2, r3
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016216:	69fa      	ldr	r2, [r7, #28]
 8016218:	69b9      	ldr	r1, [r7, #24]
 801621a:	68f8      	ldr	r0, [r7, #12]
 801621c:	f000 f8d6 	bl	80163cc <I2C_WaitOnTXISFlagUntilTimeout>
 8016220:	4603      	mov	r3, r0
 8016222:	2b00      	cmp	r3, #0
 8016224:	d001      	beq.n	801622a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8016226:	2301      	movs	r3, #1
 8016228:	e012      	b.n	8016250 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801622a:	893b      	ldrh	r3, [r7, #8]
 801622c:	b2da      	uxtb	r2, r3
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8016234:	69fb      	ldr	r3, [r7, #28]
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	69bb      	ldr	r3, [r7, #24]
 801623a:	2200      	movs	r2, #0
 801623c:	2180      	movs	r1, #128	; 0x80
 801623e:	68f8      	ldr	r0, [r7, #12]
 8016240:	f000 f884 	bl	801634c <I2C_WaitOnFlagUntilTimeout>
 8016244:	4603      	mov	r3, r0
 8016246:	2b00      	cmp	r3, #0
 8016248:	d001      	beq.n	801624e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801624a:	2301      	movs	r3, #1
 801624c:	e000      	b.n	8016250 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801624e:	2300      	movs	r3, #0
}
 8016250:	4618      	mov	r0, r3
 8016252:	3710      	adds	r7, #16
 8016254:	46bd      	mov	sp, r7
 8016256:	bd80      	pop	{r7, pc}
 8016258:	80002000 	.word	0x80002000

0801625c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b086      	sub	sp, #24
 8016260:	af02      	add	r7, sp, #8
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	4608      	mov	r0, r1
 8016266:	4611      	mov	r1, r2
 8016268:	461a      	mov	r2, r3
 801626a:	4603      	mov	r3, r0
 801626c:	817b      	strh	r3, [r7, #10]
 801626e:	460b      	mov	r3, r1
 8016270:	813b      	strh	r3, [r7, #8]
 8016272:	4613      	mov	r3, r2
 8016274:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8016276:	88fb      	ldrh	r3, [r7, #6]
 8016278:	b2da      	uxtb	r2, r3
 801627a:	8979      	ldrh	r1, [r7, #10]
 801627c:	4b20      	ldr	r3, [pc, #128]	; (8016300 <I2C_RequestMemoryRead+0xa4>)
 801627e:	9300      	str	r3, [sp, #0]
 8016280:	2300      	movs	r3, #0
 8016282:	68f8      	ldr	r0, [r7, #12]
 8016284:	f000 f9fe 	bl	8016684 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016288:	69fa      	ldr	r2, [r7, #28]
 801628a:	69b9      	ldr	r1, [r7, #24]
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f000 f89d 	bl	80163cc <I2C_WaitOnTXISFlagUntilTimeout>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	d001      	beq.n	801629c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8016298:	2301      	movs	r3, #1
 801629a:	e02c      	b.n	80162f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801629c:	88fb      	ldrh	r3, [r7, #6]
 801629e:	2b01      	cmp	r3, #1
 80162a0:	d105      	bne.n	80162ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80162a2:	893b      	ldrh	r3, [r7, #8]
 80162a4:	b2da      	uxtb	r2, r3
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	629a      	str	r2, [r3, #40]	; 0x28
 80162ac:	e015      	b.n	80162da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80162ae:	893b      	ldrh	r3, [r7, #8]
 80162b0:	0a1b      	lsrs	r3, r3, #8
 80162b2:	b29b      	uxth	r3, r3
 80162b4:	b2da      	uxtb	r2, r3
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80162bc:	69fa      	ldr	r2, [r7, #28]
 80162be:	69b9      	ldr	r1, [r7, #24]
 80162c0:	68f8      	ldr	r0, [r7, #12]
 80162c2:	f000 f883 	bl	80163cc <I2C_WaitOnTXISFlagUntilTimeout>
 80162c6:	4603      	mov	r3, r0
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d001      	beq.n	80162d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80162cc:	2301      	movs	r3, #1
 80162ce:	e012      	b.n	80162f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80162d0:	893b      	ldrh	r3, [r7, #8]
 80162d2:	b2da      	uxtb	r2, r3
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80162da:	69fb      	ldr	r3, [r7, #28]
 80162dc:	9300      	str	r3, [sp, #0]
 80162de:	69bb      	ldr	r3, [r7, #24]
 80162e0:	2200      	movs	r2, #0
 80162e2:	2140      	movs	r1, #64	; 0x40
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	f000 f831 	bl	801634c <I2C_WaitOnFlagUntilTimeout>
 80162ea:	4603      	mov	r3, r0
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d001      	beq.n	80162f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80162f0:	2301      	movs	r3, #1
 80162f2:	e000      	b.n	80162f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80162f4:	2300      	movs	r3, #0
}
 80162f6:	4618      	mov	r0, r3
 80162f8:	3710      	adds	r7, #16
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}
 80162fe:	bf00      	nop
 8016300:	80002000 	.word	0x80002000

08016304 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016304:	b480      	push	{r7}
 8016306:	b083      	sub	sp, #12
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	699b      	ldr	r3, [r3, #24]
 8016312:	f003 0302 	and.w	r3, r3, #2
 8016316:	2b02      	cmp	r3, #2
 8016318:	d103      	bne.n	8016322 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	2200      	movs	r2, #0
 8016320:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	699b      	ldr	r3, [r3, #24]
 8016328:	f003 0301 	and.w	r3, r3, #1
 801632c:	2b01      	cmp	r3, #1
 801632e:	d007      	beq.n	8016340 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	699a      	ldr	r2, [r3, #24]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	f042 0201 	orr.w	r2, r2, #1
 801633e:	619a      	str	r2, [r3, #24]
  }
}
 8016340:	bf00      	nop
 8016342:	370c      	adds	r7, #12
 8016344:	46bd      	mov	sp, r7
 8016346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634a:	4770      	bx	lr

0801634c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	603b      	str	r3, [r7, #0]
 8016358:	4613      	mov	r3, r2
 801635a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801635c:	e022      	b.n	80163a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016364:	d01e      	beq.n	80163a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016366:	f7fc ff3f 	bl	80131e8 <HAL_GetTick>
 801636a:	4602      	mov	r2, r0
 801636c:	69bb      	ldr	r3, [r7, #24]
 801636e:	1ad3      	subs	r3, r2, r3
 8016370:	683a      	ldr	r2, [r7, #0]
 8016372:	429a      	cmp	r2, r3
 8016374:	d302      	bcc.n	801637c <I2C_WaitOnFlagUntilTimeout+0x30>
 8016376:	683b      	ldr	r3, [r7, #0]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d113      	bne.n	80163a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016380:	f043 0220 	orr.w	r2, r3, #32
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	2220      	movs	r2, #32
 801638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	2200      	movs	r2, #0
 8016394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2200      	movs	r2, #0
 801639c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80163a0:	2301      	movs	r3, #1
 80163a2:	e00f      	b.n	80163c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	699a      	ldr	r2, [r3, #24]
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	4013      	ands	r3, r2
 80163ae:	68ba      	ldr	r2, [r7, #8]
 80163b0:	429a      	cmp	r2, r3
 80163b2:	bf0c      	ite	eq
 80163b4:	2301      	moveq	r3, #1
 80163b6:	2300      	movne	r3, #0
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	461a      	mov	r2, r3
 80163bc:	79fb      	ldrb	r3, [r7, #7]
 80163be:	429a      	cmp	r2, r3
 80163c0:	d0cd      	beq.n	801635e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80163c2:	2300      	movs	r3, #0
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3710      	adds	r7, #16
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}

080163cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b084      	sub	sp, #16
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80163d8:	e02c      	b.n	8016434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80163da:	687a      	ldr	r2, [r7, #4]
 80163dc:	68b9      	ldr	r1, [r7, #8]
 80163de:	68f8      	ldr	r0, [r7, #12]
 80163e0:	f000 f870 	bl	80164c4 <I2C_IsErrorOccurred>
 80163e4:	4603      	mov	r3, r0
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d001      	beq.n	80163ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80163ea:	2301      	movs	r3, #1
 80163ec:	e02a      	b.n	8016444 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163f4:	d01e      	beq.n	8016434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163f6:	f7fc fef7 	bl	80131e8 <HAL_GetTick>
 80163fa:	4602      	mov	r2, r0
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	1ad3      	subs	r3, r2, r3
 8016400:	68ba      	ldr	r2, [r7, #8]
 8016402:	429a      	cmp	r2, r3
 8016404:	d302      	bcc.n	801640c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d113      	bne.n	8016434 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016410:	f043 0220 	orr.w	r2, r3, #32
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	2220      	movs	r2, #32
 801641c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	2200      	movs	r2, #0
 8016424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	2200      	movs	r2, #0
 801642c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016430:	2301      	movs	r3, #1
 8016432:	e007      	b.n	8016444 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	699b      	ldr	r3, [r3, #24]
 801643a:	f003 0302 	and.w	r3, r3, #2
 801643e:	2b02      	cmp	r3, #2
 8016440:	d1cb      	bne.n	80163da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016442:	2300      	movs	r3, #0
}
 8016444:	4618      	mov	r0, r3
 8016446:	3710      	adds	r7, #16
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
 8016452:	60f8      	str	r0, [r7, #12]
 8016454:	60b9      	str	r1, [r7, #8]
 8016456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016458:	e028      	b.n	80164ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801645a:	687a      	ldr	r2, [r7, #4]
 801645c:	68b9      	ldr	r1, [r7, #8]
 801645e:	68f8      	ldr	r0, [r7, #12]
 8016460:	f000 f830 	bl	80164c4 <I2C_IsErrorOccurred>
 8016464:	4603      	mov	r3, r0
 8016466:	2b00      	cmp	r3, #0
 8016468:	d001      	beq.n	801646e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801646a:	2301      	movs	r3, #1
 801646c:	e026      	b.n	80164bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801646e:	f7fc febb 	bl	80131e8 <HAL_GetTick>
 8016472:	4602      	mov	r2, r0
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	1ad3      	subs	r3, r2, r3
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	429a      	cmp	r2, r3
 801647c:	d302      	bcc.n	8016484 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d113      	bne.n	80164ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016488:	f043 0220 	orr.w	r2, r3, #32
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2220      	movs	r2, #32
 8016494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	2200      	movs	r2, #0
 801649c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2200      	movs	r2, #0
 80164a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80164a8:	2301      	movs	r3, #1
 80164aa:	e007      	b.n	80164bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	699b      	ldr	r3, [r3, #24]
 80164b2:	f003 0320 	and.w	r3, r3, #32
 80164b6:	2b20      	cmp	r3, #32
 80164b8:	d1cf      	bne.n	801645a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80164ba:	2300      	movs	r3, #0
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}

080164c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b08a      	sub	sp, #40	; 0x28
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	60f8      	str	r0, [r7, #12]
 80164cc:	60b9      	str	r1, [r7, #8]
 80164ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80164d0:	2300      	movs	r3, #0
 80164d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	699b      	ldr	r3, [r3, #24]
 80164dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80164de:	2300      	movs	r3, #0
 80164e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80164e6:	69bb      	ldr	r3, [r7, #24]
 80164e8:	f003 0310 	and.w	r3, r3, #16
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d068      	beq.n	80165c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	2210      	movs	r2, #16
 80164f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80164f8:	e049      	b.n	801658e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80164fa:	68bb      	ldr	r3, [r7, #8]
 80164fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016500:	d045      	beq.n	801658e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016502:	f7fc fe71 	bl	80131e8 <HAL_GetTick>
 8016506:	4602      	mov	r2, r0
 8016508:	69fb      	ldr	r3, [r7, #28]
 801650a:	1ad3      	subs	r3, r2, r3
 801650c:	68ba      	ldr	r2, [r7, #8]
 801650e:	429a      	cmp	r2, r3
 8016510:	d302      	bcc.n	8016518 <I2C_IsErrorOccurred+0x54>
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d13a      	bne.n	801658e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016522:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801652a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	699b      	ldr	r3, [r3, #24]
 8016532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801653a:	d121      	bne.n	8016580 <I2C_IsErrorOccurred+0xbc>
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016542:	d01d      	beq.n	8016580 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8016544:	7cfb      	ldrb	r3, [r7, #19]
 8016546:	2b20      	cmp	r3, #32
 8016548:	d01a      	beq.n	8016580 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	685a      	ldr	r2, [r3, #4]
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016558:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801655a:	f7fc fe45 	bl	80131e8 <HAL_GetTick>
 801655e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016560:	e00e      	b.n	8016580 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8016562:	f7fc fe41 	bl	80131e8 <HAL_GetTick>
 8016566:	4602      	mov	r2, r0
 8016568:	69fb      	ldr	r3, [r7, #28]
 801656a:	1ad3      	subs	r3, r2, r3
 801656c:	2b19      	cmp	r3, #25
 801656e:	d907      	bls.n	8016580 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8016570:	6a3b      	ldr	r3, [r7, #32]
 8016572:	f043 0320 	orr.w	r3, r3, #32
 8016576:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8016578:	2301      	movs	r3, #1
 801657a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801657e:	e006      	b.n	801658e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	699b      	ldr	r3, [r3, #24]
 8016586:	f003 0320 	and.w	r3, r3, #32
 801658a:	2b20      	cmp	r3, #32
 801658c:	d1e9      	bne.n	8016562 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	699b      	ldr	r3, [r3, #24]
 8016594:	f003 0320 	and.w	r3, r3, #32
 8016598:	2b20      	cmp	r3, #32
 801659a:	d003      	beq.n	80165a4 <I2C_IsErrorOccurred+0xe0>
 801659c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d0aa      	beq.n	80164fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80165a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d103      	bne.n	80165b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2220      	movs	r2, #32
 80165b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80165b4:	6a3b      	ldr	r3, [r7, #32]
 80165b6:	f043 0304 	orr.w	r3, r3, #4
 80165ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80165bc:	2301      	movs	r3, #1
 80165be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	699b      	ldr	r3, [r3, #24]
 80165c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80165ca:	69bb      	ldr	r3, [r7, #24]
 80165cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d00b      	beq.n	80165ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80165d4:	6a3b      	ldr	r3, [r7, #32]
 80165d6:	f043 0301 	orr.w	r3, r3, #1
 80165da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80165e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80165e6:	2301      	movs	r3, #1
 80165e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80165ec:	69bb      	ldr	r3, [r7, #24]
 80165ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d00b      	beq.n	801660e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80165f6:	6a3b      	ldr	r3, [r7, #32]
 80165f8:	f043 0308 	orr.w	r3, r3, #8
 80165fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016606:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016608:	2301      	movs	r3, #1
 801660a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801660e:	69bb      	ldr	r3, [r7, #24]
 8016610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016614:	2b00      	cmp	r3, #0
 8016616:	d00b      	beq.n	8016630 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8016618:	6a3b      	ldr	r3, [r7, #32]
 801661a:	f043 0302 	orr.w	r3, r3, #2
 801661e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801662a:	2301      	movs	r3, #1
 801662c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8016630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016634:	2b00      	cmp	r3, #0
 8016636:	d01c      	beq.n	8016672 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016638:	68f8      	ldr	r0, [r7, #12]
 801663a:	f7ff fe63 	bl	8016304 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	6859      	ldr	r1, [r3, #4]
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	4b0d      	ldr	r3, [pc, #52]	; (8016680 <I2C_IsErrorOccurred+0x1bc>)
 801664a:	400b      	ands	r3, r1
 801664c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016652:	6a3b      	ldr	r3, [r7, #32]
 8016654:	431a      	orrs	r2, r3
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	2220      	movs	r2, #32
 801665e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	2200      	movs	r2, #0
 8016666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	2200      	movs	r2, #0
 801666e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8016672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016676:	4618      	mov	r0, r3
 8016678:	3728      	adds	r7, #40	; 0x28
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	fe00e800 	.word	0xfe00e800

08016684 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016684:	b480      	push	{r7}
 8016686:	b087      	sub	sp, #28
 8016688:	af00      	add	r7, sp, #0
 801668a:	60f8      	str	r0, [r7, #12]
 801668c:	607b      	str	r3, [r7, #4]
 801668e:	460b      	mov	r3, r1
 8016690:	817b      	strh	r3, [r7, #10]
 8016692:	4613      	mov	r3, r2
 8016694:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016696:	897b      	ldrh	r3, [r7, #10]
 8016698:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801669c:	7a7b      	ldrb	r3, [r7, #9]
 801669e:	041b      	lsls	r3, r3, #16
 80166a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80166a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80166aa:	6a3b      	ldr	r3, [r7, #32]
 80166ac:	4313      	orrs	r3, r2
 80166ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80166b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	685a      	ldr	r2, [r3, #4]
 80166ba:	6a3b      	ldr	r3, [r7, #32]
 80166bc:	0d5b      	lsrs	r3, r3, #21
 80166be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80166c2:	4b08      	ldr	r3, [pc, #32]	; (80166e4 <I2C_TransferConfig+0x60>)
 80166c4:	430b      	orrs	r3, r1
 80166c6:	43db      	mvns	r3, r3
 80166c8:	ea02 0103 	and.w	r1, r2, r3
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	697a      	ldr	r2, [r7, #20]
 80166d2:	430a      	orrs	r2, r1
 80166d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80166d6:	bf00      	nop
 80166d8:	371c      	adds	r7, #28
 80166da:	46bd      	mov	sp, r7
 80166dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e0:	4770      	bx	lr
 80166e2:	bf00      	nop
 80166e4:	03ff63ff 	.word	0x03ff63ff

080166e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80166e8:	b480      	push	{r7}
 80166ea:	b083      	sub	sp, #12
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
 80166f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80166f8:	b2db      	uxtb	r3, r3
 80166fa:	2b20      	cmp	r3, #32
 80166fc:	d138      	bne.n	8016770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016704:	2b01      	cmp	r3, #1
 8016706:	d101      	bne.n	801670c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016708:	2302      	movs	r3, #2
 801670a:	e032      	b.n	8016772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2201      	movs	r2, #1
 8016710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2224      	movs	r2, #36	; 0x24
 8016718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	681a      	ldr	r2, [r3, #0]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	f022 0201 	bic.w	r2, r2, #1
 801672a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801673a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	6819      	ldr	r1, [r3, #0]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	683a      	ldr	r2, [r7, #0]
 8016748:	430a      	orrs	r2, r1
 801674a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	681a      	ldr	r2, [r3, #0]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	f042 0201 	orr.w	r2, r2, #1
 801675a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2220      	movs	r2, #32
 8016760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2200      	movs	r2, #0
 8016768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801676c:	2300      	movs	r3, #0
 801676e:	e000      	b.n	8016772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016770:	2302      	movs	r3, #2
  }
}
 8016772:	4618      	mov	r0, r3
 8016774:	370c      	adds	r7, #12
 8016776:	46bd      	mov	sp, r7
 8016778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677c:	4770      	bx	lr

0801677e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801677e:	b480      	push	{r7}
 8016780:	b085      	sub	sp, #20
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
 8016786:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801678e:	b2db      	uxtb	r3, r3
 8016790:	2b20      	cmp	r3, #32
 8016792:	d139      	bne.n	8016808 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801679a:	2b01      	cmp	r3, #1
 801679c:	d101      	bne.n	80167a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801679e:	2302      	movs	r3, #2
 80167a0:	e033      	b.n	801680a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2201      	movs	r2, #1
 80167a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	2224      	movs	r2, #36	; 0x24
 80167ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	f022 0201 	bic.w	r2, r2, #1
 80167c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80167d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80167d2:	683b      	ldr	r3, [r7, #0]
 80167d4:	021b      	lsls	r3, r3, #8
 80167d6:	68fa      	ldr	r2, [r7, #12]
 80167d8:	4313      	orrs	r3, r2
 80167da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	68fa      	ldr	r2, [r7, #12]
 80167e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	681a      	ldr	r2, [r3, #0]
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f042 0201 	orr.w	r2, r2, #1
 80167f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2220      	movs	r2, #32
 80167f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	2200      	movs	r2, #0
 8016800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016804:	2300      	movs	r3, #0
 8016806:	e000      	b.n	801680a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016808:	2302      	movs	r3, #2
  }
}
 801680a:	4618      	mov	r0, r3
 801680c:	3714      	adds	r7, #20
 801680e:	46bd      	mov	sp, r7
 8016810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016814:	4770      	bx	lr

08016816 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8016816:	b580      	push	{r7, lr}
 8016818:	b084      	sub	sp, #16
 801681a:	af00      	add	r7, sp, #0
 801681c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d101      	bne.n	8016828 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8016824:	2301      	movs	r3, #1
 8016826:	e041      	b.n	80168ac <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8016830:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	f245 5255 	movw	r2, #21845	; 0x5555
 801683a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	6852      	ldr	r2, [r2, #4]
 8016844:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	687a      	ldr	r2, [r7, #4]
 801684c:	6892      	ldr	r2, [r2, #8]
 801684e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8016850:	f7fc fcca 	bl	80131e8 <HAL_GetTick>
 8016854:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016856:	e00f      	b.n	8016878 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8016858:	f7fc fcc6 	bl	80131e8 <HAL_GetTick>
 801685c:	4602      	mov	r2, r0
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	1ad3      	subs	r3, r2, r3
 8016862:	2b31      	cmp	r3, #49	; 0x31
 8016864:	d908      	bls.n	8016878 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	68db      	ldr	r3, [r3, #12]
 801686c:	f003 0307 	and.w	r3, r3, #7
 8016870:	2b00      	cmp	r3, #0
 8016872:	d001      	beq.n	8016878 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8016874:	2303      	movs	r3, #3
 8016876:	e019      	b.n	80168ac <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	68db      	ldr	r3, [r3, #12]
 801687e:	f003 0307 	and.w	r3, r3, #7
 8016882:	2b00      	cmp	r3, #0
 8016884:	d1e8      	bne.n	8016858 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	691a      	ldr	r2, [r3, #16]
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	68db      	ldr	r3, [r3, #12]
 8016890:	429a      	cmp	r2, r3
 8016892:	d005      	beq.n	80168a0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	687a      	ldr	r2, [r7, #4]
 801689a:	68d2      	ldr	r2, [r2, #12]
 801689c:	611a      	str	r2, [r3, #16]
 801689e:	e004      	b.n	80168aa <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80168a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80168aa:	2300      	movs	r3, #0
}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3710      	adds	r7, #16
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}

080168b4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80168b4:	b480      	push	{r7}
 80168b6:	b083      	sub	sp, #12
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80168c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80168c6:	2300      	movs	r3, #0
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	370c      	adds	r7, #12
 80168cc:	46bd      	mov	sp, r7
 80168ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d2:	4770      	bx	lr

080168d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b086      	sub	sp, #24
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80168dc:	2300      	movs	r3, #0
 80168de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d101      	bne.n	80168ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80168e6:	2301      	movs	r3, #1
 80168e8:	e29b      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	f003 0301 	and.w	r3, r3, #1
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	f000 8087 	beq.w	8016a06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80168f8:	4b96      	ldr	r3, [pc, #600]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 80168fa:	689b      	ldr	r3, [r3, #8]
 80168fc:	f003 030c 	and.w	r3, r3, #12
 8016900:	2b04      	cmp	r3, #4
 8016902:	d00c      	beq.n	801691e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016904:	4b93      	ldr	r3, [pc, #588]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016906:	689b      	ldr	r3, [r3, #8]
 8016908:	f003 030c 	and.w	r3, r3, #12
 801690c:	2b08      	cmp	r3, #8
 801690e:	d112      	bne.n	8016936 <HAL_RCC_OscConfig+0x62>
 8016910:	4b90      	ldr	r3, [pc, #576]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801691c:	d10b      	bne.n	8016936 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801691e:	4b8d      	ldr	r3, [pc, #564]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016926:	2b00      	cmp	r3, #0
 8016928:	d06c      	beq.n	8016a04 <HAL_RCC_OscConfig+0x130>
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	685b      	ldr	r3, [r3, #4]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d168      	bne.n	8016a04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8016932:	2301      	movs	r3, #1
 8016934:	e275      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	685b      	ldr	r3, [r3, #4]
 801693a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801693e:	d106      	bne.n	801694e <HAL_RCC_OscConfig+0x7a>
 8016940:	4b84      	ldr	r3, [pc, #528]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	4a83      	ldr	r2, [pc, #524]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801694a:	6013      	str	r3, [r2, #0]
 801694c:	e02e      	b.n	80169ac <HAL_RCC_OscConfig+0xd8>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d10c      	bne.n	8016970 <HAL_RCC_OscConfig+0x9c>
 8016956:	4b7f      	ldr	r3, [pc, #508]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	4a7e      	ldr	r2, [pc, #504]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 801695c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016960:	6013      	str	r3, [r2, #0]
 8016962:	4b7c      	ldr	r3, [pc, #496]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	4a7b      	ldr	r2, [pc, #492]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801696c:	6013      	str	r3, [r2, #0]
 801696e:	e01d      	b.n	80169ac <HAL_RCC_OscConfig+0xd8>
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	685b      	ldr	r3, [r3, #4]
 8016974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8016978:	d10c      	bne.n	8016994 <HAL_RCC_OscConfig+0xc0>
 801697a:	4b76      	ldr	r3, [pc, #472]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	4a75      	ldr	r2, [pc, #468]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016984:	6013      	str	r3, [r2, #0]
 8016986:	4b73      	ldr	r3, [pc, #460]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	4a72      	ldr	r2, [pc, #456]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 801698c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016990:	6013      	str	r3, [r2, #0]
 8016992:	e00b      	b.n	80169ac <HAL_RCC_OscConfig+0xd8>
 8016994:	4b6f      	ldr	r3, [pc, #444]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	4a6e      	ldr	r2, [pc, #440]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 801699a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801699e:	6013      	str	r3, [r2, #0]
 80169a0:	4b6c      	ldr	r3, [pc, #432]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	4a6b      	ldr	r2, [pc, #428]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 80169a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80169aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d013      	beq.n	80169dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80169b4:	f7fc fc18 	bl	80131e8 <HAL_GetTick>
 80169b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80169ba:	e008      	b.n	80169ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80169bc:	f7fc fc14 	bl	80131e8 <HAL_GetTick>
 80169c0:	4602      	mov	r2, r0
 80169c2:	693b      	ldr	r3, [r7, #16]
 80169c4:	1ad3      	subs	r3, r2, r3
 80169c6:	2b64      	cmp	r3, #100	; 0x64
 80169c8:	d901      	bls.n	80169ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80169ca:	2303      	movs	r3, #3
 80169cc:	e229      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80169ce:	4b61      	ldr	r3, [pc, #388]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d0f0      	beq.n	80169bc <HAL_RCC_OscConfig+0xe8>
 80169da:	e014      	b.n	8016a06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80169dc:	f7fc fc04 	bl	80131e8 <HAL_GetTick>
 80169e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80169e2:	e008      	b.n	80169f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80169e4:	f7fc fc00 	bl	80131e8 <HAL_GetTick>
 80169e8:	4602      	mov	r2, r0
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	1ad3      	subs	r3, r2, r3
 80169ee:	2b64      	cmp	r3, #100	; 0x64
 80169f0:	d901      	bls.n	80169f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80169f2:	2303      	movs	r3, #3
 80169f4:	e215      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80169f6:	4b57      	ldr	r3, [pc, #348]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d1f0      	bne.n	80169e4 <HAL_RCC_OscConfig+0x110>
 8016a02:	e000      	b.n	8016a06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	f003 0302 	and.w	r3, r3, #2
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d069      	beq.n	8016ae6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8016a12:	4b50      	ldr	r3, [pc, #320]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a14:	689b      	ldr	r3, [r3, #8]
 8016a16:	f003 030c 	and.w	r3, r3, #12
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d00b      	beq.n	8016a36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016a1e:	4b4d      	ldr	r3, [pc, #308]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a20:	689b      	ldr	r3, [r3, #8]
 8016a22:	f003 030c 	and.w	r3, r3, #12
 8016a26:	2b08      	cmp	r3, #8
 8016a28:	d11c      	bne.n	8016a64 <HAL_RCC_OscConfig+0x190>
 8016a2a:	4b4a      	ldr	r3, [pc, #296]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a2c:	685b      	ldr	r3, [r3, #4]
 8016a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d116      	bne.n	8016a64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8016a36:	4b47      	ldr	r3, [pc, #284]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	f003 0302 	and.w	r3, r3, #2
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d005      	beq.n	8016a4e <HAL_RCC_OscConfig+0x17a>
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	68db      	ldr	r3, [r3, #12]
 8016a46:	2b01      	cmp	r3, #1
 8016a48:	d001      	beq.n	8016a4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	e1e9      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016a4e:	4b41      	ldr	r3, [pc, #260]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	691b      	ldr	r3, [r3, #16]
 8016a5a:	00db      	lsls	r3, r3, #3
 8016a5c:	493d      	ldr	r1, [pc, #244]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a5e:	4313      	orrs	r3, r2
 8016a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8016a62:	e040      	b.n	8016ae6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	68db      	ldr	r3, [r3, #12]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d023      	beq.n	8016ab4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016a6c:	4b39      	ldr	r3, [pc, #228]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	4a38      	ldr	r2, [pc, #224]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a72:	f043 0301 	orr.w	r3, r3, #1
 8016a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016a78:	f7fc fbb6 	bl	80131e8 <HAL_GetTick>
 8016a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016a7e:	e008      	b.n	8016a92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016a80:	f7fc fbb2 	bl	80131e8 <HAL_GetTick>
 8016a84:	4602      	mov	r2, r0
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	1ad3      	subs	r3, r2, r3
 8016a8a:	2b02      	cmp	r3, #2
 8016a8c:	d901      	bls.n	8016a92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8016a8e:	2303      	movs	r3, #3
 8016a90:	e1c7      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016a92:	4b30      	ldr	r3, [pc, #192]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	f003 0302 	and.w	r3, r3, #2
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d0f0      	beq.n	8016a80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016a9e:	4b2d      	ldr	r3, [pc, #180]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	691b      	ldr	r3, [r3, #16]
 8016aaa:	00db      	lsls	r3, r3, #3
 8016aac:	4929      	ldr	r1, [pc, #164]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016aae:	4313      	orrs	r3, r2
 8016ab0:	600b      	str	r3, [r1, #0]
 8016ab2:	e018      	b.n	8016ae6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016ab4:	4b27      	ldr	r3, [pc, #156]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	4a26      	ldr	r2, [pc, #152]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016aba:	f023 0301 	bic.w	r3, r3, #1
 8016abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016ac0:	f7fc fb92 	bl	80131e8 <HAL_GetTick>
 8016ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016ac6:	e008      	b.n	8016ada <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016ac8:	f7fc fb8e 	bl	80131e8 <HAL_GetTick>
 8016acc:	4602      	mov	r2, r0
 8016ace:	693b      	ldr	r3, [r7, #16]
 8016ad0:	1ad3      	subs	r3, r2, r3
 8016ad2:	2b02      	cmp	r3, #2
 8016ad4:	d901      	bls.n	8016ada <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8016ad6:	2303      	movs	r3, #3
 8016ad8:	e1a3      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016ada:	4b1e      	ldr	r3, [pc, #120]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	f003 0302 	and.w	r3, r3, #2
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d1f0      	bne.n	8016ac8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	f003 0308 	and.w	r3, r3, #8
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d038      	beq.n	8016b64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	695b      	ldr	r3, [r3, #20]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d019      	beq.n	8016b2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016afa:	4b16      	ldr	r3, [pc, #88]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016afe:	4a15      	ldr	r2, [pc, #84]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016b00:	f043 0301 	orr.w	r3, r3, #1
 8016b04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016b06:	f7fc fb6f 	bl	80131e8 <HAL_GetTick>
 8016b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016b0c:	e008      	b.n	8016b20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016b0e:	f7fc fb6b 	bl	80131e8 <HAL_GetTick>
 8016b12:	4602      	mov	r2, r0
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	1ad3      	subs	r3, r2, r3
 8016b18:	2b02      	cmp	r3, #2
 8016b1a:	d901      	bls.n	8016b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8016b1c:	2303      	movs	r3, #3
 8016b1e:	e180      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016b20:	4b0c      	ldr	r3, [pc, #48]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b24:	f003 0302 	and.w	r3, r3, #2
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d0f0      	beq.n	8016b0e <HAL_RCC_OscConfig+0x23a>
 8016b2c:	e01a      	b.n	8016b64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016b2e:	4b09      	ldr	r3, [pc, #36]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b32:	4a08      	ldr	r2, [pc, #32]	; (8016b54 <HAL_RCC_OscConfig+0x280>)
 8016b34:	f023 0301 	bic.w	r3, r3, #1
 8016b38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016b3a:	f7fc fb55 	bl	80131e8 <HAL_GetTick>
 8016b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016b40:	e00a      	b.n	8016b58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016b42:	f7fc fb51 	bl	80131e8 <HAL_GetTick>
 8016b46:	4602      	mov	r2, r0
 8016b48:	693b      	ldr	r3, [r7, #16]
 8016b4a:	1ad3      	subs	r3, r2, r3
 8016b4c:	2b02      	cmp	r3, #2
 8016b4e:	d903      	bls.n	8016b58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8016b50:	2303      	movs	r3, #3
 8016b52:	e166      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
 8016b54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016b58:	4b92      	ldr	r3, [pc, #584]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b5c:	f003 0302 	and.w	r3, r3, #2
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d1ee      	bne.n	8016b42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	f003 0304 	and.w	r3, r3, #4
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	f000 80a4 	beq.w	8016cba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016b72:	4b8c      	ldr	r3, [pc, #560]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d10d      	bne.n	8016b9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8016b7e:	4b89      	ldr	r3, [pc, #548]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b82:	4a88      	ldr	r2, [pc, #544]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016b88:	6413      	str	r3, [r2, #64]	; 0x40
 8016b8a:	4b86      	ldr	r3, [pc, #536]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016b92:	60bb      	str	r3, [r7, #8]
 8016b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016b96:	2301      	movs	r3, #1
 8016b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016b9a:	4b83      	ldr	r3, [pc, #524]	; (8016da8 <HAL_RCC_OscConfig+0x4d4>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d118      	bne.n	8016bd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8016ba6:	4b80      	ldr	r3, [pc, #512]	; (8016da8 <HAL_RCC_OscConfig+0x4d4>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	4a7f      	ldr	r2, [pc, #508]	; (8016da8 <HAL_RCC_OscConfig+0x4d4>)
 8016bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016bb2:	f7fc fb19 	bl	80131e8 <HAL_GetTick>
 8016bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016bb8:	e008      	b.n	8016bcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016bba:	f7fc fb15 	bl	80131e8 <HAL_GetTick>
 8016bbe:	4602      	mov	r2, r0
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	1ad3      	subs	r3, r2, r3
 8016bc4:	2b64      	cmp	r3, #100	; 0x64
 8016bc6:	d901      	bls.n	8016bcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8016bc8:	2303      	movs	r3, #3
 8016bca:	e12a      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016bcc:	4b76      	ldr	r3, [pc, #472]	; (8016da8 <HAL_RCC_OscConfig+0x4d4>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d0f0      	beq.n	8016bba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	689b      	ldr	r3, [r3, #8]
 8016bdc:	2b01      	cmp	r3, #1
 8016bde:	d106      	bne.n	8016bee <HAL_RCC_OscConfig+0x31a>
 8016be0:	4b70      	ldr	r3, [pc, #448]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016be4:	4a6f      	ldr	r2, [pc, #444]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016be6:	f043 0301 	orr.w	r3, r3, #1
 8016bea:	6713      	str	r3, [r2, #112]	; 0x70
 8016bec:	e02d      	b.n	8016c4a <HAL_RCC_OscConfig+0x376>
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	689b      	ldr	r3, [r3, #8]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d10c      	bne.n	8016c10 <HAL_RCC_OscConfig+0x33c>
 8016bf6:	4b6b      	ldr	r3, [pc, #428]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bfa:	4a6a      	ldr	r2, [pc, #424]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016bfc:	f023 0301 	bic.w	r3, r3, #1
 8016c00:	6713      	str	r3, [r2, #112]	; 0x70
 8016c02:	4b68      	ldr	r3, [pc, #416]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c06:	4a67      	ldr	r2, [pc, #412]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c08:	f023 0304 	bic.w	r3, r3, #4
 8016c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8016c0e:	e01c      	b.n	8016c4a <HAL_RCC_OscConfig+0x376>
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	689b      	ldr	r3, [r3, #8]
 8016c14:	2b05      	cmp	r3, #5
 8016c16:	d10c      	bne.n	8016c32 <HAL_RCC_OscConfig+0x35e>
 8016c18:	4b62      	ldr	r3, [pc, #392]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c1c:	4a61      	ldr	r2, [pc, #388]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c1e:	f043 0304 	orr.w	r3, r3, #4
 8016c22:	6713      	str	r3, [r2, #112]	; 0x70
 8016c24:	4b5f      	ldr	r3, [pc, #380]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c28:	4a5e      	ldr	r2, [pc, #376]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c2a:	f043 0301 	orr.w	r3, r3, #1
 8016c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8016c30:	e00b      	b.n	8016c4a <HAL_RCC_OscConfig+0x376>
 8016c32:	4b5c      	ldr	r3, [pc, #368]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c36:	4a5b      	ldr	r2, [pc, #364]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c38:	f023 0301 	bic.w	r3, r3, #1
 8016c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8016c3e:	4b59      	ldr	r3, [pc, #356]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c42:	4a58      	ldr	r2, [pc, #352]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c44:	f023 0304 	bic.w	r3, r3, #4
 8016c48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	689b      	ldr	r3, [r3, #8]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d015      	beq.n	8016c7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016c52:	f7fc fac9 	bl	80131e8 <HAL_GetTick>
 8016c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016c58:	e00a      	b.n	8016c70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016c5a:	f7fc fac5 	bl	80131e8 <HAL_GetTick>
 8016c5e:	4602      	mov	r2, r0
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	1ad3      	subs	r3, r2, r3
 8016c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8016c68:	4293      	cmp	r3, r2
 8016c6a:	d901      	bls.n	8016c70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8016c6c:	2303      	movs	r3, #3
 8016c6e:	e0d8      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016c70:	4b4c      	ldr	r3, [pc, #304]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c74:	f003 0302 	and.w	r3, r3, #2
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d0ee      	beq.n	8016c5a <HAL_RCC_OscConfig+0x386>
 8016c7c:	e014      	b.n	8016ca8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016c7e:	f7fc fab3 	bl	80131e8 <HAL_GetTick>
 8016c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016c84:	e00a      	b.n	8016c9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016c86:	f7fc faaf 	bl	80131e8 <HAL_GetTick>
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	1ad3      	subs	r3, r2, r3
 8016c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8016c94:	4293      	cmp	r3, r2
 8016c96:	d901      	bls.n	8016c9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8016c98:	2303      	movs	r3, #3
 8016c9a:	e0c2      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016c9c:	4b41      	ldr	r3, [pc, #260]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ca0:	f003 0302 	and.w	r3, r3, #2
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d1ee      	bne.n	8016c86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8016ca8:	7dfb      	ldrb	r3, [r7, #23]
 8016caa:	2b01      	cmp	r3, #1
 8016cac:	d105      	bne.n	8016cba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016cae:	4b3d      	ldr	r3, [pc, #244]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cb2:	4a3c      	ldr	r2, [pc, #240]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016cb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	699b      	ldr	r3, [r3, #24]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	f000 80ae 	beq.w	8016e20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016cc4:	4b37      	ldr	r3, [pc, #220]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016cc6:	689b      	ldr	r3, [r3, #8]
 8016cc8:	f003 030c 	and.w	r3, r3, #12
 8016ccc:	2b08      	cmp	r3, #8
 8016cce:	d06d      	beq.n	8016dac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	699b      	ldr	r3, [r3, #24]
 8016cd4:	2b02      	cmp	r3, #2
 8016cd6:	d14b      	bne.n	8016d70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016cd8:	4b32      	ldr	r3, [pc, #200]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	4a31      	ldr	r2, [pc, #196]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016cde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016ce4:	f7fc fa80 	bl	80131e8 <HAL_GetTick>
 8016ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016cea:	e008      	b.n	8016cfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016cec:	f7fc fa7c 	bl	80131e8 <HAL_GetTick>
 8016cf0:	4602      	mov	r2, r0
 8016cf2:	693b      	ldr	r3, [r7, #16]
 8016cf4:	1ad3      	subs	r3, r2, r3
 8016cf6:	2b02      	cmp	r3, #2
 8016cf8:	d901      	bls.n	8016cfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8016cfa:	2303      	movs	r3, #3
 8016cfc:	e091      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016cfe:	4b29      	ldr	r3, [pc, #164]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d1f0      	bne.n	8016cec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	69da      	ldr	r2, [r3, #28]
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6a1b      	ldr	r3, [r3, #32]
 8016d12:	431a      	orrs	r2, r3
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d18:	019b      	lsls	r3, r3, #6
 8016d1a:	431a      	orrs	r2, r3
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d20:	085b      	lsrs	r3, r3, #1
 8016d22:	3b01      	subs	r3, #1
 8016d24:	041b      	lsls	r3, r3, #16
 8016d26:	431a      	orrs	r2, r3
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d2c:	061b      	lsls	r3, r3, #24
 8016d2e:	431a      	orrs	r2, r3
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d34:	071b      	lsls	r3, r3, #28
 8016d36:	491b      	ldr	r1, [pc, #108]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016d38:	4313      	orrs	r3, r2
 8016d3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8016d3c:	4b19      	ldr	r3, [pc, #100]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	4a18      	ldr	r2, [pc, #96]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016d48:	f7fc fa4e 	bl	80131e8 <HAL_GetTick>
 8016d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016d4e:	e008      	b.n	8016d62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016d50:	f7fc fa4a 	bl	80131e8 <HAL_GetTick>
 8016d54:	4602      	mov	r2, r0
 8016d56:	693b      	ldr	r3, [r7, #16]
 8016d58:	1ad3      	subs	r3, r2, r3
 8016d5a:	2b02      	cmp	r3, #2
 8016d5c:	d901      	bls.n	8016d62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8016d5e:	2303      	movs	r3, #3
 8016d60:	e05f      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016d62:	4b10      	ldr	r3, [pc, #64]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d0f0      	beq.n	8016d50 <HAL_RCC_OscConfig+0x47c>
 8016d6e:	e057      	b.n	8016e20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016d70:	4b0c      	ldr	r3, [pc, #48]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	4a0b      	ldr	r2, [pc, #44]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016d7c:	f7fc fa34 	bl	80131e8 <HAL_GetTick>
 8016d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016d82:	e008      	b.n	8016d96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016d84:	f7fc fa30 	bl	80131e8 <HAL_GetTick>
 8016d88:	4602      	mov	r2, r0
 8016d8a:	693b      	ldr	r3, [r7, #16]
 8016d8c:	1ad3      	subs	r3, r2, r3
 8016d8e:	2b02      	cmp	r3, #2
 8016d90:	d901      	bls.n	8016d96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8016d92:	2303      	movs	r3, #3
 8016d94:	e045      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016d96:	4b03      	ldr	r3, [pc, #12]	; (8016da4 <HAL_RCC_OscConfig+0x4d0>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d1f0      	bne.n	8016d84 <HAL_RCC_OscConfig+0x4b0>
 8016da2:	e03d      	b.n	8016e20 <HAL_RCC_OscConfig+0x54c>
 8016da4:	40023800 	.word	0x40023800
 8016da8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8016dac:	4b1f      	ldr	r3, [pc, #124]	; (8016e2c <HAL_RCC_OscConfig+0x558>)
 8016dae:	685b      	ldr	r3, [r3, #4]
 8016db0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	699b      	ldr	r3, [r3, #24]
 8016db6:	2b01      	cmp	r3, #1
 8016db8:	d030      	beq.n	8016e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d129      	bne.n	8016e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d122      	bne.n	8016e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8016dd6:	68fa      	ldr	r2, [r7, #12]
 8016dd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8016ddc:	4013      	ands	r3, r2
 8016dde:	687a      	ldr	r2, [r7, #4]
 8016de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016de2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8016de4:	4293      	cmp	r3, r2
 8016de6:	d119      	bne.n	8016e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016df2:	085b      	lsrs	r3, r3, #1
 8016df4:	3b01      	subs	r3, #1
 8016df6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8016df8:	429a      	cmp	r2, r3
 8016dfa:	d10f      	bne.n	8016e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d107      	bne.n	8016e1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8016e18:	429a      	cmp	r2, r3
 8016e1a:	d001      	beq.n	8016e20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8016e1c:	2301      	movs	r3, #1
 8016e1e:	e000      	b.n	8016e22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8016e20:	2300      	movs	r3, #0
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3718      	adds	r7, #24
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	40023800 	.word	0x40023800

08016e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
 8016e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d101      	bne.n	8016e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8016e44:	2301      	movs	r3, #1
 8016e46:	e0d0      	b.n	8016fea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016e48:	4b6a      	ldr	r3, [pc, #424]	; (8016ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	f003 030f 	and.w	r3, r3, #15
 8016e50:	683a      	ldr	r2, [r7, #0]
 8016e52:	429a      	cmp	r2, r3
 8016e54:	d910      	bls.n	8016e78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016e56:	4b67      	ldr	r3, [pc, #412]	; (8016ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f023 020f 	bic.w	r2, r3, #15
 8016e5e:	4965      	ldr	r1, [pc, #404]	; (8016ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	4313      	orrs	r3, r2
 8016e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016e66:	4b63      	ldr	r3, [pc, #396]	; (8016ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	f003 030f 	and.w	r3, r3, #15
 8016e6e:	683a      	ldr	r2, [r7, #0]
 8016e70:	429a      	cmp	r2, r3
 8016e72:	d001      	beq.n	8016e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8016e74:	2301      	movs	r3, #1
 8016e76:	e0b8      	b.n	8016fea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	f003 0302 	and.w	r3, r3, #2
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d020      	beq.n	8016ec6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	f003 0304 	and.w	r3, r3, #4
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d005      	beq.n	8016e9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016e90:	4b59      	ldr	r3, [pc, #356]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016e92:	689b      	ldr	r3, [r3, #8]
 8016e94:	4a58      	ldr	r2, [pc, #352]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8016e9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	f003 0308 	and.w	r3, r3, #8
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d005      	beq.n	8016eb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016ea8:	4b53      	ldr	r3, [pc, #332]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016eaa:	689b      	ldr	r3, [r3, #8]
 8016eac:	4a52      	ldr	r2, [pc, #328]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8016eb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016eb4:	4b50      	ldr	r3, [pc, #320]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016eb6:	689b      	ldr	r3, [r3, #8]
 8016eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	689b      	ldr	r3, [r3, #8]
 8016ec0:	494d      	ldr	r1, [pc, #308]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016ec2:	4313      	orrs	r3, r2
 8016ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f003 0301 	and.w	r3, r3, #1
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d040      	beq.n	8016f54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	2b01      	cmp	r3, #1
 8016ed8:	d107      	bne.n	8016eea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016eda:	4b47      	ldr	r3, [pc, #284]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d115      	bne.n	8016f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8016ee6:	2301      	movs	r3, #1
 8016ee8:	e07f      	b.n	8016fea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	685b      	ldr	r3, [r3, #4]
 8016eee:	2b02      	cmp	r3, #2
 8016ef0:	d107      	bne.n	8016f02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016ef2:	4b41      	ldr	r3, [pc, #260]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d109      	bne.n	8016f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8016efe:	2301      	movs	r3, #1
 8016f00:	e073      	b.n	8016fea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016f02:	4b3d      	ldr	r3, [pc, #244]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	f003 0302 	and.w	r3, r3, #2
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d101      	bne.n	8016f12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8016f0e:	2301      	movs	r3, #1
 8016f10:	e06b      	b.n	8016fea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016f12:	4b39      	ldr	r3, [pc, #228]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016f14:	689b      	ldr	r3, [r3, #8]
 8016f16:	f023 0203 	bic.w	r2, r3, #3
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	685b      	ldr	r3, [r3, #4]
 8016f1e:	4936      	ldr	r1, [pc, #216]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016f20:	4313      	orrs	r3, r2
 8016f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016f24:	f7fc f960 	bl	80131e8 <HAL_GetTick>
 8016f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016f2a:	e00a      	b.n	8016f42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016f2c:	f7fc f95c 	bl	80131e8 <HAL_GetTick>
 8016f30:	4602      	mov	r2, r0
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	1ad3      	subs	r3, r2, r3
 8016f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8016f3a:	4293      	cmp	r3, r2
 8016f3c:	d901      	bls.n	8016f42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8016f3e:	2303      	movs	r3, #3
 8016f40:	e053      	b.n	8016fea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016f42:	4b2d      	ldr	r3, [pc, #180]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016f44:	689b      	ldr	r3, [r3, #8]
 8016f46:	f003 020c 	and.w	r2, r3, #12
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	009b      	lsls	r3, r3, #2
 8016f50:	429a      	cmp	r2, r3
 8016f52:	d1eb      	bne.n	8016f2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016f54:	4b27      	ldr	r3, [pc, #156]	; (8016ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	f003 030f 	and.w	r3, r3, #15
 8016f5c:	683a      	ldr	r2, [r7, #0]
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d210      	bcs.n	8016f84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016f62:	4b24      	ldr	r3, [pc, #144]	; (8016ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	f023 020f 	bic.w	r2, r3, #15
 8016f6a:	4922      	ldr	r1, [pc, #136]	; (8016ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	4313      	orrs	r3, r2
 8016f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016f72:	4b20      	ldr	r3, [pc, #128]	; (8016ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	f003 030f 	and.w	r3, r3, #15
 8016f7a:	683a      	ldr	r2, [r7, #0]
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	d001      	beq.n	8016f84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8016f80:	2301      	movs	r3, #1
 8016f82:	e032      	b.n	8016fea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	f003 0304 	and.w	r3, r3, #4
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d008      	beq.n	8016fa2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016f90:	4b19      	ldr	r3, [pc, #100]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016f92:	689b      	ldr	r3, [r3, #8]
 8016f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	68db      	ldr	r3, [r3, #12]
 8016f9c:	4916      	ldr	r1, [pc, #88]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016f9e:	4313      	orrs	r3, r2
 8016fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	f003 0308 	and.w	r3, r3, #8
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d009      	beq.n	8016fc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8016fae:	4b12      	ldr	r3, [pc, #72]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016fb0:	689b      	ldr	r3, [r3, #8]
 8016fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	691b      	ldr	r3, [r3, #16]
 8016fba:	00db      	lsls	r3, r3, #3
 8016fbc:	490e      	ldr	r1, [pc, #56]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016fbe:	4313      	orrs	r3, r2
 8016fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8016fc2:	f000 f821 	bl	8017008 <HAL_RCC_GetSysClockFreq>
 8016fc6:	4602      	mov	r2, r0
 8016fc8:	4b0b      	ldr	r3, [pc, #44]	; (8016ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8016fca:	689b      	ldr	r3, [r3, #8]
 8016fcc:	091b      	lsrs	r3, r3, #4
 8016fce:	f003 030f 	and.w	r3, r3, #15
 8016fd2:	490a      	ldr	r1, [pc, #40]	; (8016ffc <HAL_RCC_ClockConfig+0x1cc>)
 8016fd4:	5ccb      	ldrb	r3, [r1, r3]
 8016fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8016fda:	4a09      	ldr	r2, [pc, #36]	; (8017000 <HAL_RCC_ClockConfig+0x1d0>)
 8016fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8016fde:	4b09      	ldr	r3, [pc, #36]	; (8017004 <HAL_RCC_ClockConfig+0x1d4>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7fc f8bc 	bl	8013160 <HAL_InitTick>

  return HAL_OK;
 8016fe8:	2300      	movs	r3, #0
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	3710      	adds	r7, #16
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	40023c00 	.word	0x40023c00
 8016ff8:	40023800 	.word	0x40023800
 8016ffc:	0802691c 	.word	0x0802691c
 8017000:	2000011c 	.word	0x2000011c
 8017004:	20000120 	.word	0x20000120

08017008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801700c:	b090      	sub	sp, #64	; 0x40
 801700e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8017010:	2300      	movs	r3, #0
 8017012:	637b      	str	r3, [r7, #52]	; 0x34
 8017014:	2300      	movs	r3, #0
 8017016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017018:	2300      	movs	r3, #0
 801701a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801701c:	2300      	movs	r3, #0
 801701e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8017020:	4b59      	ldr	r3, [pc, #356]	; (8017188 <HAL_RCC_GetSysClockFreq+0x180>)
 8017022:	689b      	ldr	r3, [r3, #8]
 8017024:	f003 030c 	and.w	r3, r3, #12
 8017028:	2b08      	cmp	r3, #8
 801702a:	d00d      	beq.n	8017048 <HAL_RCC_GetSysClockFreq+0x40>
 801702c:	2b08      	cmp	r3, #8
 801702e:	f200 80a1 	bhi.w	8017174 <HAL_RCC_GetSysClockFreq+0x16c>
 8017032:	2b00      	cmp	r3, #0
 8017034:	d002      	beq.n	801703c <HAL_RCC_GetSysClockFreq+0x34>
 8017036:	2b04      	cmp	r3, #4
 8017038:	d003      	beq.n	8017042 <HAL_RCC_GetSysClockFreq+0x3a>
 801703a:	e09b      	b.n	8017174 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801703c:	4b53      	ldr	r3, [pc, #332]	; (801718c <HAL_RCC_GetSysClockFreq+0x184>)
 801703e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8017040:	e09b      	b.n	801717a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8017042:	4b53      	ldr	r3, [pc, #332]	; (8017190 <HAL_RCC_GetSysClockFreq+0x188>)
 8017044:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8017046:	e098      	b.n	801717a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017048:	4b4f      	ldr	r3, [pc, #316]	; (8017188 <HAL_RCC_GetSysClockFreq+0x180>)
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017050:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8017052:	4b4d      	ldr	r3, [pc, #308]	; (8017188 <HAL_RCC_GetSysClockFreq+0x180>)
 8017054:	685b      	ldr	r3, [r3, #4]
 8017056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801705a:	2b00      	cmp	r3, #0
 801705c:	d028      	beq.n	80170b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801705e:	4b4a      	ldr	r3, [pc, #296]	; (8017188 <HAL_RCC_GetSysClockFreq+0x180>)
 8017060:	685b      	ldr	r3, [r3, #4]
 8017062:	099b      	lsrs	r3, r3, #6
 8017064:	2200      	movs	r2, #0
 8017066:	623b      	str	r3, [r7, #32]
 8017068:	627a      	str	r2, [r7, #36]	; 0x24
 801706a:	6a3b      	ldr	r3, [r7, #32]
 801706c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8017070:	2100      	movs	r1, #0
 8017072:	4b47      	ldr	r3, [pc, #284]	; (8017190 <HAL_RCC_GetSysClockFreq+0x188>)
 8017074:	fb03 f201 	mul.w	r2, r3, r1
 8017078:	2300      	movs	r3, #0
 801707a:	fb00 f303 	mul.w	r3, r0, r3
 801707e:	4413      	add	r3, r2
 8017080:	4a43      	ldr	r2, [pc, #268]	; (8017190 <HAL_RCC_GetSysClockFreq+0x188>)
 8017082:	fba0 1202 	umull	r1, r2, r0, r2
 8017086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017088:	460a      	mov	r2, r1
 801708a:	62ba      	str	r2, [r7, #40]	; 0x28
 801708c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801708e:	4413      	add	r3, r2
 8017090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017094:	2200      	movs	r2, #0
 8017096:	61bb      	str	r3, [r7, #24]
 8017098:	61fa      	str	r2, [r7, #28]
 801709a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801709e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80170a2:	f7e9 f935 	bl	8000310 <__aeabi_uldivmod>
 80170a6:	4602      	mov	r2, r0
 80170a8:	460b      	mov	r3, r1
 80170aa:	4613      	mov	r3, r2
 80170ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80170ae:	e053      	b.n	8017158 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80170b0:	4b35      	ldr	r3, [pc, #212]	; (8017188 <HAL_RCC_GetSysClockFreq+0x180>)
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	099b      	lsrs	r3, r3, #6
 80170b6:	2200      	movs	r2, #0
 80170b8:	613b      	str	r3, [r7, #16]
 80170ba:	617a      	str	r2, [r7, #20]
 80170bc:	693b      	ldr	r3, [r7, #16]
 80170be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80170c2:	f04f 0b00 	mov.w	fp, #0
 80170c6:	4652      	mov	r2, sl
 80170c8:	465b      	mov	r3, fp
 80170ca:	f04f 0000 	mov.w	r0, #0
 80170ce:	f04f 0100 	mov.w	r1, #0
 80170d2:	0159      	lsls	r1, r3, #5
 80170d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80170d8:	0150      	lsls	r0, r2, #5
 80170da:	4602      	mov	r2, r0
 80170dc:	460b      	mov	r3, r1
 80170de:	ebb2 080a 	subs.w	r8, r2, sl
 80170e2:	eb63 090b 	sbc.w	r9, r3, fp
 80170e6:	f04f 0200 	mov.w	r2, #0
 80170ea:	f04f 0300 	mov.w	r3, #0
 80170ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80170f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80170f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80170fa:	ebb2 0408 	subs.w	r4, r2, r8
 80170fe:	eb63 0509 	sbc.w	r5, r3, r9
 8017102:	f04f 0200 	mov.w	r2, #0
 8017106:	f04f 0300 	mov.w	r3, #0
 801710a:	00eb      	lsls	r3, r5, #3
 801710c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017110:	00e2      	lsls	r2, r4, #3
 8017112:	4614      	mov	r4, r2
 8017114:	461d      	mov	r5, r3
 8017116:	eb14 030a 	adds.w	r3, r4, sl
 801711a:	603b      	str	r3, [r7, #0]
 801711c:	eb45 030b 	adc.w	r3, r5, fp
 8017120:	607b      	str	r3, [r7, #4]
 8017122:	f04f 0200 	mov.w	r2, #0
 8017126:	f04f 0300 	mov.w	r3, #0
 801712a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801712e:	4629      	mov	r1, r5
 8017130:	028b      	lsls	r3, r1, #10
 8017132:	4621      	mov	r1, r4
 8017134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8017138:	4621      	mov	r1, r4
 801713a:	028a      	lsls	r2, r1, #10
 801713c:	4610      	mov	r0, r2
 801713e:	4619      	mov	r1, r3
 8017140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017142:	2200      	movs	r2, #0
 8017144:	60bb      	str	r3, [r7, #8]
 8017146:	60fa      	str	r2, [r7, #12]
 8017148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801714c:	f7e9 f8e0 	bl	8000310 <__aeabi_uldivmod>
 8017150:	4602      	mov	r2, r0
 8017152:	460b      	mov	r3, r1
 8017154:	4613      	mov	r3, r2
 8017156:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8017158:	4b0b      	ldr	r3, [pc, #44]	; (8017188 <HAL_RCC_GetSysClockFreq+0x180>)
 801715a:	685b      	ldr	r3, [r3, #4]
 801715c:	0c1b      	lsrs	r3, r3, #16
 801715e:	f003 0303 	and.w	r3, r3, #3
 8017162:	3301      	adds	r3, #1
 8017164:	005b      	lsls	r3, r3, #1
 8017166:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8017168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017170:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8017172:	e002      	b.n	801717a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8017174:	4b05      	ldr	r3, [pc, #20]	; (801718c <HAL_RCC_GetSysClockFreq+0x184>)
 8017176:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8017178:	bf00      	nop
    }
  }
  return sysclockfreq;
 801717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801717c:	4618      	mov	r0, r3
 801717e:	3740      	adds	r7, #64	; 0x40
 8017180:	46bd      	mov	sp, r7
 8017182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017186:	bf00      	nop
 8017188:	40023800 	.word	0x40023800
 801718c:	00f42400 	.word	0x00f42400
 8017190:	00b71b00 	.word	0x00b71b00

08017194 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017194:	b480      	push	{r7}
 8017196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017198:	4b03      	ldr	r3, [pc, #12]	; (80171a8 <HAL_RCC_GetHCLKFreq+0x14>)
 801719a:	681b      	ldr	r3, [r3, #0]
}
 801719c:	4618      	mov	r0, r3
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr
 80171a6:	bf00      	nop
 80171a8:	2000011c 	.word	0x2000011c

080171ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80171b0:	f7ff fff0 	bl	8017194 <HAL_RCC_GetHCLKFreq>
 80171b4:	4602      	mov	r2, r0
 80171b6:	4b05      	ldr	r3, [pc, #20]	; (80171cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80171b8:	689b      	ldr	r3, [r3, #8]
 80171ba:	0a9b      	lsrs	r3, r3, #10
 80171bc:	f003 0307 	and.w	r3, r3, #7
 80171c0:	4903      	ldr	r1, [pc, #12]	; (80171d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80171c2:	5ccb      	ldrb	r3, [r1, r3]
 80171c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	40023800 	.word	0x40023800
 80171d0:	0802692c 	.word	0x0802692c

080171d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80171d8:	f7ff ffdc 	bl	8017194 <HAL_RCC_GetHCLKFreq>
 80171dc:	4602      	mov	r2, r0
 80171de:	4b05      	ldr	r3, [pc, #20]	; (80171f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80171e0:	689b      	ldr	r3, [r3, #8]
 80171e2:	0b5b      	lsrs	r3, r3, #13
 80171e4:	f003 0307 	and.w	r3, r3, #7
 80171e8:	4903      	ldr	r1, [pc, #12]	; (80171f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80171ea:	5ccb      	ldrb	r3, [r1, r3]
 80171ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80171f0:	4618      	mov	r0, r3
 80171f2:	bd80      	pop	{r7, pc}
 80171f4:	40023800 	.word	0x40023800
 80171f8:	0802692c 	.word	0x0802692c

080171fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b088      	sub	sp, #32
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8017204:	2300      	movs	r3, #0
 8017206:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8017208:	2300      	movs	r3, #0
 801720a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801720c:	2300      	movs	r3, #0
 801720e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8017210:	2300      	movs	r3, #0
 8017212:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8017214:	2300      	movs	r3, #0
 8017216:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	f003 0301 	and.w	r3, r3, #1
 8017220:	2b00      	cmp	r3, #0
 8017222:	d012      	beq.n	801724a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8017224:	4b69      	ldr	r3, [pc, #420]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017226:	689b      	ldr	r3, [r3, #8]
 8017228:	4a68      	ldr	r2, [pc, #416]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801722a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801722e:	6093      	str	r3, [r2, #8]
 8017230:	4b66      	ldr	r3, [pc, #408]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017232:	689a      	ldr	r2, [r3, #8]
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017238:	4964      	ldr	r1, [pc, #400]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801723a:	4313      	orrs	r3, r2
 801723c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017242:	2b00      	cmp	r3, #0
 8017244:	d101      	bne.n	801724a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8017246:	2301      	movs	r3, #1
 8017248:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017252:	2b00      	cmp	r3, #0
 8017254:	d017      	beq.n	8017286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017256:	4b5d      	ldr	r3, [pc, #372]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801725c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017264:	4959      	ldr	r1, [pc, #356]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017266:	4313      	orrs	r3, r2
 8017268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017274:	d101      	bne.n	801727a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8017276:	2301      	movs	r3, #1
 8017278:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801727e:	2b00      	cmp	r3, #0
 8017280:	d101      	bne.n	8017286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8017282:	2301      	movs	r3, #1
 8017284:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801728e:	2b00      	cmp	r3, #0
 8017290:	d017      	beq.n	80172c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8017292:	4b4e      	ldr	r3, [pc, #312]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172a0:	494a      	ldr	r1, [pc, #296]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80172a2:	4313      	orrs	r3, r2
 80172a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80172b0:	d101      	bne.n	80172b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80172b2:	2301      	movs	r3, #1
 80172b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d101      	bne.n	80172c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80172be:	2301      	movs	r3, #1
 80172c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d001      	beq.n	80172d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80172ce:	2301      	movs	r3, #1
 80172d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	f003 0320 	and.w	r3, r3, #32
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f000 808b 	beq.w	80173f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80172e0:	4b3a      	ldr	r3, [pc, #232]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80172e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172e4:	4a39      	ldr	r2, [pc, #228]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80172e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80172ea:	6413      	str	r3, [r2, #64]	; 0x40
 80172ec:	4b37      	ldr	r3, [pc, #220]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80172ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80172f4:	60bb      	str	r3, [r7, #8]
 80172f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80172f8:	4b35      	ldr	r3, [pc, #212]	; (80173d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	4a34      	ldr	r2, [pc, #208]	; (80173d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80172fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017304:	f7fb ff70 	bl	80131e8 <HAL_GetTick>
 8017308:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801730a:	e008      	b.n	801731e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801730c:	f7fb ff6c 	bl	80131e8 <HAL_GetTick>
 8017310:	4602      	mov	r2, r0
 8017312:	697b      	ldr	r3, [r7, #20]
 8017314:	1ad3      	subs	r3, r2, r3
 8017316:	2b64      	cmp	r3, #100	; 0x64
 8017318:	d901      	bls.n	801731e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801731a:	2303      	movs	r3, #3
 801731c:	e38f      	b.n	8017a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801731e:	4b2c      	ldr	r3, [pc, #176]	; (80173d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017326:	2b00      	cmp	r3, #0
 8017328:	d0f0      	beq.n	801730c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801732a:	4b28      	ldr	r3, [pc, #160]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801732e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017332:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8017334:	693b      	ldr	r3, [r7, #16]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d035      	beq.n	80173a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801733e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017342:	693a      	ldr	r2, [r7, #16]
 8017344:	429a      	cmp	r2, r3
 8017346:	d02e      	beq.n	80173a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8017348:	4b20      	ldr	r3, [pc, #128]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801734c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017350:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8017352:	4b1e      	ldr	r3, [pc, #120]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017356:	4a1d      	ldr	r2, [pc, #116]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801735c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801735e:	4b1b      	ldr	r3, [pc, #108]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017362:	4a1a      	ldr	r2, [pc, #104]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017368:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801736a:	4a18      	ldr	r2, [pc, #96]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8017370:	4b16      	ldr	r3, [pc, #88]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8017372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017374:	f003 0301 	and.w	r3, r3, #1
 8017378:	2b01      	cmp	r3, #1
 801737a:	d114      	bne.n	80173a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801737c:	f7fb ff34 	bl	80131e8 <HAL_GetTick>
 8017380:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017382:	e00a      	b.n	801739a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017384:	f7fb ff30 	bl	80131e8 <HAL_GetTick>
 8017388:	4602      	mov	r2, r0
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	1ad3      	subs	r3, r2, r3
 801738e:	f241 3288 	movw	r2, #5000	; 0x1388
 8017392:	4293      	cmp	r3, r2
 8017394:	d901      	bls.n	801739a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8017396:	2303      	movs	r3, #3
 8017398:	e351      	b.n	8017a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801739a:	4b0c      	ldr	r3, [pc, #48]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801739c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801739e:	f003 0302 	and.w	r3, r3, #2
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d0ee      	beq.n	8017384 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80173ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80173b2:	d111      	bne.n	80173d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80173b4:	4b05      	ldr	r3, [pc, #20]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80173b6:	689b      	ldr	r3, [r3, #8]
 80173b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80173c0:	4b04      	ldr	r3, [pc, #16]	; (80173d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80173c2:	400b      	ands	r3, r1
 80173c4:	4901      	ldr	r1, [pc, #4]	; (80173cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80173c6:	4313      	orrs	r3, r2
 80173c8:	608b      	str	r3, [r1, #8]
 80173ca:	e00b      	b.n	80173e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80173cc:	40023800 	.word	0x40023800
 80173d0:	40007000 	.word	0x40007000
 80173d4:	0ffffcff 	.word	0x0ffffcff
 80173d8:	4bac      	ldr	r3, [pc, #688]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80173da:	689b      	ldr	r3, [r3, #8]
 80173dc:	4aab      	ldr	r2, [pc, #684]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80173de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80173e2:	6093      	str	r3, [r2, #8]
 80173e4:	4ba9      	ldr	r3, [pc, #676]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80173e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80173f0:	49a6      	ldr	r1, [pc, #664]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80173f2:	4313      	orrs	r3, r2
 80173f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	f003 0310 	and.w	r3, r3, #16
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d010      	beq.n	8017424 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8017402:	4ba2      	ldr	r3, [pc, #648]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017408:	4aa0      	ldr	r2, [pc, #640]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801740a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801740e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017412:	4b9e      	ldr	r3, [pc, #632]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017414:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801741c:	499b      	ldr	r1, [pc, #620]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801741e:	4313      	orrs	r3, r2
 8017420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801742c:	2b00      	cmp	r3, #0
 801742e:	d00a      	beq.n	8017446 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017430:	4b96      	ldr	r3, [pc, #600]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017436:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801743e:	4993      	ldr	r1, [pc, #588]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017440:	4313      	orrs	r3, r2
 8017442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801744e:	2b00      	cmp	r3, #0
 8017450:	d00a      	beq.n	8017468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8017452:	4b8e      	ldr	r3, [pc, #568]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017460:	498a      	ldr	r1, [pc, #552]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017462:	4313      	orrs	r3, r2
 8017464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017470:	2b00      	cmp	r3, #0
 8017472:	d00a      	beq.n	801748a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017474:	4b85      	ldr	r3, [pc, #532]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801747a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017482:	4982      	ldr	r1, [pc, #520]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017484:	4313      	orrs	r3, r2
 8017486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017492:	2b00      	cmp	r3, #0
 8017494:	d00a      	beq.n	80174ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8017496:	4b7d      	ldr	r3, [pc, #500]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801749c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174a4:	4979      	ldr	r1, [pc, #484]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80174a6:	4313      	orrs	r3, r2
 80174a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d00a      	beq.n	80174ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80174b8:	4b74      	ldr	r3, [pc, #464]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80174ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80174be:	f023 0203 	bic.w	r2, r3, #3
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174c6:	4971      	ldr	r1, [pc, #452]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80174c8:	4313      	orrs	r3, r2
 80174ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d00a      	beq.n	80174f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80174da:	4b6c      	ldr	r3, [pc, #432]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80174dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80174e0:	f023 020c 	bic.w	r2, r3, #12
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174e8:	4968      	ldr	r1, [pc, #416]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80174ea:	4313      	orrs	r3, r2
 80174ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d00a      	beq.n	8017512 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80174fc:	4b63      	ldr	r3, [pc, #396]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80174fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017502:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801750a:	4960      	ldr	r1, [pc, #384]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801750c:	4313      	orrs	r3, r2
 801750e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801751a:	2b00      	cmp	r3, #0
 801751c:	d00a      	beq.n	8017534 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801751e:	4b5b      	ldr	r3, [pc, #364]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017524:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801752c:	4957      	ldr	r1, [pc, #348]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801752e:	4313      	orrs	r3, r2
 8017530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801753c:	2b00      	cmp	r3, #0
 801753e:	d00a      	beq.n	8017556 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8017540:	4b52      	ldr	r3, [pc, #328]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017546:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801754e:	494f      	ldr	r1, [pc, #316]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017550:	4313      	orrs	r3, r2
 8017552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801755e:	2b00      	cmp	r3, #0
 8017560:	d00a      	beq.n	8017578 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8017562:	4b4a      	ldr	r3, [pc, #296]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017568:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017570:	4946      	ldr	r1, [pc, #280]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017572:	4313      	orrs	r3, r2
 8017574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017580:	2b00      	cmp	r3, #0
 8017582:	d00a      	beq.n	801759a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8017584:	4b41      	ldr	r3, [pc, #260]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801758a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017592:	493e      	ldr	r1, [pc, #248]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017594:	4313      	orrs	r3, r2
 8017596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d00a      	beq.n	80175bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80175a6:	4b39      	ldr	r3, [pc, #228]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80175a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80175ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80175b4:	4935      	ldr	r1, [pc, #212]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80175b6:	4313      	orrs	r3, r2
 80175b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d00a      	beq.n	80175de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80175c8:	4b30      	ldr	r3, [pc, #192]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80175ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80175ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80175d6:	492d      	ldr	r1, [pc, #180]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80175d8:	4313      	orrs	r3, r2
 80175da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d011      	beq.n	801760e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80175ea:	4b28      	ldr	r3, [pc, #160]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80175ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80175f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175f8:	4924      	ldr	r1, [pc, #144]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80175fa:	4313      	orrs	r3, r2
 80175fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017608:	d101      	bne.n	801760e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801760a:	2301      	movs	r3, #1
 801760c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	f003 0308 	and.w	r3, r3, #8
 8017616:	2b00      	cmp	r3, #0
 8017618:	d001      	beq.n	801761e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801761a:	2301      	movs	r3, #1
 801761c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017626:	2b00      	cmp	r3, #0
 8017628:	d00a      	beq.n	8017640 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801762a:	4b18      	ldr	r3, [pc, #96]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017630:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017638:	4914      	ldr	r1, [pc, #80]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801763a:	4313      	orrs	r3, r2
 801763c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017648:	2b00      	cmp	r3, #0
 801764a:	d00b      	beq.n	8017664 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801764c:	4b0f      	ldr	r3, [pc, #60]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017652:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801765c:	490b      	ldr	r1, [pc, #44]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801765e:	4313      	orrs	r3, r2
 8017660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801766c:	2b00      	cmp	r3, #0
 801766e:	d00f      	beq.n	8017690 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8017670:	4b06      	ldr	r3, [pc, #24]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017676:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017680:	4902      	ldr	r1, [pc, #8]	; (801768c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8017682:	4313      	orrs	r3, r2
 8017684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8017688:	e002      	b.n	8017690 <HAL_RCCEx_PeriphCLKConfig+0x494>
 801768a:	bf00      	nop
 801768c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017698:	2b00      	cmp	r3, #0
 801769a:	d00b      	beq.n	80176b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801769c:	4b8a      	ldr	r3, [pc, #552]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801769e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80176a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80176ac:	4986      	ldr	r1, [pc, #536]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80176ae:	4313      	orrs	r3, r2
 80176b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d00b      	beq.n	80176d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80176c0:	4b81      	ldr	r3, [pc, #516]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80176c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80176c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80176d0:	497d      	ldr	r1, [pc, #500]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80176d2:	4313      	orrs	r3, r2
 80176d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80176d8:	69fb      	ldr	r3, [r7, #28]
 80176da:	2b01      	cmp	r3, #1
 80176dc:	d006      	beq.n	80176ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	f000 80d6 	beq.w	8017898 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80176ec:	4b76      	ldr	r3, [pc, #472]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	4a75      	ldr	r2, [pc, #468]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80176f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80176f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80176f8:	f7fb fd76 	bl	80131e8 <HAL_GetTick>
 80176fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80176fe:	e008      	b.n	8017712 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8017700:	f7fb fd72 	bl	80131e8 <HAL_GetTick>
 8017704:	4602      	mov	r2, r0
 8017706:	697b      	ldr	r3, [r7, #20]
 8017708:	1ad3      	subs	r3, r2, r3
 801770a:	2b64      	cmp	r3, #100	; 0x64
 801770c:	d901      	bls.n	8017712 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801770e:	2303      	movs	r3, #3
 8017710:	e195      	b.n	8017a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8017712:	4b6d      	ldr	r3, [pc, #436]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801771a:	2b00      	cmp	r3, #0
 801771c:	d1f0      	bne.n	8017700 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	f003 0301 	and.w	r3, r3, #1
 8017726:	2b00      	cmp	r3, #0
 8017728:	d021      	beq.n	801776e <HAL_RCCEx_PeriphCLKConfig+0x572>
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801772e:	2b00      	cmp	r3, #0
 8017730:	d11d      	bne.n	801776e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8017732:	4b65      	ldr	r3, [pc, #404]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8017734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017738:	0c1b      	lsrs	r3, r3, #16
 801773a:	f003 0303 	and.w	r3, r3, #3
 801773e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8017740:	4b61      	ldr	r3, [pc, #388]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8017742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017746:	0e1b      	lsrs	r3, r3, #24
 8017748:	f003 030f 	and.w	r3, r3, #15
 801774c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	685b      	ldr	r3, [r3, #4]
 8017752:	019a      	lsls	r2, r3, #6
 8017754:	693b      	ldr	r3, [r7, #16]
 8017756:	041b      	lsls	r3, r3, #16
 8017758:	431a      	orrs	r2, r3
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	061b      	lsls	r3, r3, #24
 801775e:	431a      	orrs	r2, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	689b      	ldr	r3, [r3, #8]
 8017764:	071b      	lsls	r3, r3, #28
 8017766:	4958      	ldr	r1, [pc, #352]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8017768:	4313      	orrs	r3, r2
 801776a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017776:	2b00      	cmp	r3, #0
 8017778:	d004      	beq.n	8017784 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801777e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017782:	d00a      	beq.n	801779a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801778c:	2b00      	cmp	r3, #0
 801778e:	d02e      	beq.n	80177ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017798:	d129      	bne.n	80177ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801779a:	4b4b      	ldr	r3, [pc, #300]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801779c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80177a0:	0c1b      	lsrs	r3, r3, #16
 80177a2:	f003 0303 	and.w	r3, r3, #3
 80177a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80177a8:	4b47      	ldr	r3, [pc, #284]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80177aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80177ae:	0f1b      	lsrs	r3, r3, #28
 80177b0:	f003 0307 	and.w	r3, r3, #7
 80177b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	685b      	ldr	r3, [r3, #4]
 80177ba:	019a      	lsls	r2, r3, #6
 80177bc:	693b      	ldr	r3, [r7, #16]
 80177be:	041b      	lsls	r3, r3, #16
 80177c0:	431a      	orrs	r2, r3
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	68db      	ldr	r3, [r3, #12]
 80177c6:	061b      	lsls	r3, r3, #24
 80177c8:	431a      	orrs	r2, r3
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	071b      	lsls	r3, r3, #28
 80177ce:	493e      	ldr	r1, [pc, #248]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80177d0:	4313      	orrs	r3, r2
 80177d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80177d6:	4b3c      	ldr	r3, [pc, #240]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80177d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80177dc:	f023 021f 	bic.w	r2, r3, #31
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177e4:	3b01      	subs	r3, #1
 80177e6:	4938      	ldr	r1, [pc, #224]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80177e8:	4313      	orrs	r3, r2
 80177ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d01d      	beq.n	8017836 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80177fa:	4b33      	ldr	r3, [pc, #204]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80177fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017800:	0e1b      	lsrs	r3, r3, #24
 8017802:	f003 030f 	and.w	r3, r3, #15
 8017806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8017808:	4b2f      	ldr	r3, [pc, #188]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801780a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801780e:	0f1b      	lsrs	r3, r3, #28
 8017810:	f003 0307 	and.w	r3, r3, #7
 8017814:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	019a      	lsls	r2, r3, #6
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	691b      	ldr	r3, [r3, #16]
 8017820:	041b      	lsls	r3, r3, #16
 8017822:	431a      	orrs	r2, r3
 8017824:	693b      	ldr	r3, [r7, #16]
 8017826:	061b      	lsls	r3, r3, #24
 8017828:	431a      	orrs	r2, r3
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	071b      	lsls	r3, r3, #28
 801782e:	4926      	ldr	r1, [pc, #152]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8017830:	4313      	orrs	r3, r2
 8017832:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801783e:	2b00      	cmp	r3, #0
 8017840:	d011      	beq.n	8017866 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	019a      	lsls	r2, r3, #6
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	691b      	ldr	r3, [r3, #16]
 801784c:	041b      	lsls	r3, r3, #16
 801784e:	431a      	orrs	r2, r3
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	68db      	ldr	r3, [r3, #12]
 8017854:	061b      	lsls	r3, r3, #24
 8017856:	431a      	orrs	r2, r3
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	689b      	ldr	r3, [r3, #8]
 801785c:	071b      	lsls	r3, r3, #28
 801785e:	491a      	ldr	r1, [pc, #104]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8017860:	4313      	orrs	r3, r2
 8017862:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8017866:	4b18      	ldr	r3, [pc, #96]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	4a17      	ldr	r2, [pc, #92]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801786c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017872:	f7fb fcb9 	bl	80131e8 <HAL_GetTick>
 8017876:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8017878:	e008      	b.n	801788c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801787a:	f7fb fcb5 	bl	80131e8 <HAL_GetTick>
 801787e:	4602      	mov	r2, r0
 8017880:	697b      	ldr	r3, [r7, #20]
 8017882:	1ad3      	subs	r3, r2, r3
 8017884:	2b64      	cmp	r3, #100	; 0x64
 8017886:	d901      	bls.n	801788c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8017888:	2303      	movs	r3, #3
 801788a:	e0d8      	b.n	8017a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801788c:	4b0e      	ldr	r3, [pc, #56]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017894:	2b00      	cmp	r3, #0
 8017896:	d0f0      	beq.n	801787a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8017898:	69bb      	ldr	r3, [r7, #24]
 801789a:	2b01      	cmp	r3, #1
 801789c:	f040 80ce 	bne.w	8017a3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80178a0:	4b09      	ldr	r3, [pc, #36]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	4a08      	ldr	r2, [pc, #32]	; (80178c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80178a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80178aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80178ac:	f7fb fc9c 	bl	80131e8 <HAL_GetTick>
 80178b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80178b2:	e00b      	b.n	80178cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80178b4:	f7fb fc98 	bl	80131e8 <HAL_GetTick>
 80178b8:	4602      	mov	r2, r0
 80178ba:	697b      	ldr	r3, [r7, #20]
 80178bc:	1ad3      	subs	r3, r2, r3
 80178be:	2b64      	cmp	r3, #100	; 0x64
 80178c0:	d904      	bls.n	80178cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80178c2:	2303      	movs	r3, #3
 80178c4:	e0bb      	b.n	8017a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80178c6:	bf00      	nop
 80178c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80178cc:	4b5e      	ldr	r3, [pc, #376]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80178d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80178d8:	d0ec      	beq.n	80178b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d003      	beq.n	80178ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d009      	beq.n	8017902 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d02e      	beq.n	8017958 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d12a      	bne.n	8017958 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8017902:	4b51      	ldr	r3, [pc, #324]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017908:	0c1b      	lsrs	r3, r3, #16
 801790a:	f003 0303 	and.w	r3, r3, #3
 801790e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8017910:	4b4d      	ldr	r3, [pc, #308]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017916:	0f1b      	lsrs	r3, r3, #28
 8017918:	f003 0307 	and.w	r3, r3, #7
 801791c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	695b      	ldr	r3, [r3, #20]
 8017922:	019a      	lsls	r2, r3, #6
 8017924:	693b      	ldr	r3, [r7, #16]
 8017926:	041b      	lsls	r3, r3, #16
 8017928:	431a      	orrs	r2, r3
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	699b      	ldr	r3, [r3, #24]
 801792e:	061b      	lsls	r3, r3, #24
 8017930:	431a      	orrs	r2, r3
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	071b      	lsls	r3, r3, #28
 8017936:	4944      	ldr	r1, [pc, #272]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017938:	4313      	orrs	r3, r2
 801793a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801793e:	4b42      	ldr	r3, [pc, #264]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017944:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801794c:	3b01      	subs	r3, #1
 801794e:	021b      	lsls	r3, r3, #8
 8017950:	493d      	ldr	r1, [pc, #244]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017952:	4313      	orrs	r3, r2
 8017954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017960:	2b00      	cmp	r3, #0
 8017962:	d022      	beq.n	80179aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801796c:	d11d      	bne.n	80179aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801796e:	4b36      	ldr	r3, [pc, #216]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017974:	0e1b      	lsrs	r3, r3, #24
 8017976:	f003 030f 	and.w	r3, r3, #15
 801797a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801797c:	4b32      	ldr	r3, [pc, #200]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801797e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017982:	0f1b      	lsrs	r3, r3, #28
 8017984:	f003 0307 	and.w	r3, r3, #7
 8017988:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	695b      	ldr	r3, [r3, #20]
 801798e:	019a      	lsls	r2, r3, #6
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	6a1b      	ldr	r3, [r3, #32]
 8017994:	041b      	lsls	r3, r3, #16
 8017996:	431a      	orrs	r2, r3
 8017998:	693b      	ldr	r3, [r7, #16]
 801799a:	061b      	lsls	r3, r3, #24
 801799c:	431a      	orrs	r2, r3
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	071b      	lsls	r3, r3, #28
 80179a2:	4929      	ldr	r1, [pc, #164]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80179a4:	4313      	orrs	r3, r2
 80179a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	f003 0308 	and.w	r3, r3, #8
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d028      	beq.n	8017a08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80179b6:	4b24      	ldr	r3, [pc, #144]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80179b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80179bc:	0e1b      	lsrs	r3, r3, #24
 80179be:	f003 030f 	and.w	r3, r3, #15
 80179c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80179c4:	4b20      	ldr	r3, [pc, #128]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80179c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80179ca:	0c1b      	lsrs	r3, r3, #16
 80179cc:	f003 0303 	and.w	r3, r3, #3
 80179d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	695b      	ldr	r3, [r3, #20]
 80179d6:	019a      	lsls	r2, r3, #6
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	041b      	lsls	r3, r3, #16
 80179dc:	431a      	orrs	r2, r3
 80179de:	693b      	ldr	r3, [r7, #16]
 80179e0:	061b      	lsls	r3, r3, #24
 80179e2:	431a      	orrs	r2, r3
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	69db      	ldr	r3, [r3, #28]
 80179e8:	071b      	lsls	r3, r3, #28
 80179ea:	4917      	ldr	r1, [pc, #92]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80179ec:	4313      	orrs	r3, r2
 80179ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80179f2:	4b15      	ldr	r3, [pc, #84]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80179f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80179f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a00:	4911      	ldr	r1, [pc, #68]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017a02:	4313      	orrs	r3, r2
 8017a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8017a08:	4b0f      	ldr	r3, [pc, #60]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	4a0e      	ldr	r2, [pc, #56]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017a14:	f7fb fbe8 	bl	80131e8 <HAL_GetTick>
 8017a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8017a1a:	e008      	b.n	8017a2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8017a1c:	f7fb fbe4 	bl	80131e8 <HAL_GetTick>
 8017a20:	4602      	mov	r2, r0
 8017a22:	697b      	ldr	r3, [r7, #20]
 8017a24:	1ad3      	subs	r3, r2, r3
 8017a26:	2b64      	cmp	r3, #100	; 0x64
 8017a28:	d901      	bls.n	8017a2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8017a2a:	2303      	movs	r3, #3
 8017a2c:	e007      	b.n	8017a3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8017a2e:	4b06      	ldr	r3, [pc, #24]	; (8017a48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017a3a:	d1ef      	bne.n	8017a1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8017a3c:	2300      	movs	r3, #0
}
 8017a3e:	4618      	mov	r0, r3
 8017a40:	3720      	adds	r7, #32
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}
 8017a46:	bf00      	nop
 8017a48:	40023800 	.word	0x40023800

08017a4c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b082      	sub	sp, #8
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d101      	bne.n	8017a5e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	e01c      	b.n	8017a98 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	795b      	ldrb	r3, [r3, #5]
 8017a62:	b2db      	uxtb	r3, r3
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d105      	bne.n	8017a74 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f7f9 fe48 	bl	8011704 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2202      	movs	r2, #2
 8017a78:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	681a      	ldr	r2, [r3, #0]
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	f042 0204 	orr.w	r2, r2, #4
 8017a88:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	2201      	movs	r2, #1
 8017a8e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	2200      	movs	r2, #0
 8017a94:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8017a96:	2300      	movs	r3, #0
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	3708      	adds	r7, #8
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}

08017aa0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b084      	sub	sp, #16
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	791b      	ldrb	r3, [r3, #4]
 8017ab2:	2b01      	cmp	r3, #1
 8017ab4:	d101      	bne.n	8017aba <HAL_RNG_GenerateRandomNumber+0x1a>
 8017ab6:	2302      	movs	r3, #2
 8017ab8:	e044      	b.n	8017b44 <HAL_RNG_GenerateRandomNumber+0xa4>
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	2201      	movs	r2, #1
 8017abe:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	795b      	ldrb	r3, [r3, #5]
 8017ac4:	b2db      	uxtb	r3, r3
 8017ac6:	2b01      	cmp	r3, #1
 8017ac8:	d133      	bne.n	8017b32 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	2202      	movs	r2, #2
 8017ace:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8017ad0:	f7fb fb8a 	bl	80131e8 <HAL_GetTick>
 8017ad4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8017ad6:	e018      	b.n	8017b0a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8017ad8:	f7fb fb86 	bl	80131e8 <HAL_GetTick>
 8017adc:	4602      	mov	r2, r0
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	1ad3      	subs	r3, r2, r3
 8017ae2:	2b02      	cmp	r3, #2
 8017ae4:	d911      	bls.n	8017b0a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	685b      	ldr	r3, [r3, #4]
 8017aec:	f003 0301 	and.w	r3, r3, #1
 8017af0:	2b01      	cmp	r3, #1
 8017af2:	d00a      	beq.n	8017b0a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2201      	movs	r2, #1
 8017af8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2202      	movs	r2, #2
 8017afe:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	2200      	movs	r2, #0
 8017b04:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8017b06:	2301      	movs	r3, #1
 8017b08:	e01c      	b.n	8017b44 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	685b      	ldr	r3, [r3, #4]
 8017b10:	f003 0301 	and.w	r3, r3, #1
 8017b14:	2b01      	cmp	r3, #1
 8017b16:	d1df      	bne.n	8017ad8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	689a      	ldr	r2, [r3, #8]
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	68da      	ldr	r2, [r3, #12]
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2201      	movs	r2, #1
 8017b2e:	715a      	strb	r2, [r3, #5]
 8017b30:	e004      	b.n	8017b3c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	2204      	movs	r2, #4
 8017b36:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8017b38:	2301      	movs	r3, #1
 8017b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	2200      	movs	r2, #0
 8017b40:	711a      	strb	r2, [r3, #4]

  return status;
 8017b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	3710      	adds	r7, #16
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bd80      	pop	{r7, pc}

08017b4c <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b082      	sub	sp, #8
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	330c      	adds	r3, #12
 8017b58:	4619      	mov	r1, r3
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f7ff ffa0 	bl	8017aa0 <HAL_RNG_GenerateRandomNumber>
 8017b60:	4603      	mov	r3, r0
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d102      	bne.n	8017b6c <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	68db      	ldr	r3, [r3, #12]
 8017b6a:	e000      	b.n	8017b6e <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8017b6c:	2300      	movs	r3, #0
  }
}
 8017b6e:	4618      	mov	r0, r3
 8017b70:	3708      	adds	r7, #8
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}

08017b76 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8017b76:	b580      	push	{r7, lr}
 8017b78:	b084      	sub	sp, #16
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d101      	bne.n	8017b88 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8017b84:	2301      	movs	r3, #1
 8017b86:	e09d      	b.n	8017cc4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d108      	bne.n	8017ba2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	685b      	ldr	r3, [r3, #4]
 8017b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017b98:	d009      	beq.n	8017bae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	61da      	str	r2, [r3, #28]
 8017ba0:	e005      	b.n	8017bae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	2200      	movs	r2, #0
 8017ba6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2200      	movs	r2, #0
 8017bac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017bba:	b2db      	uxtb	r3, r3
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d106      	bne.n	8017bce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	2200      	movs	r2, #0
 8017bc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8017bc8:	6878      	ldr	r0, [r7, #4]
 8017bca:	f7f9 fe23 	bl	8011814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2202      	movs	r2, #2
 8017bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017be4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	68db      	ldr	r3, [r3, #12]
 8017bea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8017bee:	d902      	bls.n	8017bf6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	60fb      	str	r3, [r7, #12]
 8017bf4:	e002      	b.n	8017bfc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8017bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017bfa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	68db      	ldr	r3, [r3, #12]
 8017c00:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8017c04:	d007      	beq.n	8017c16 <HAL_SPI_Init+0xa0>
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	68db      	ldr	r3, [r3, #12]
 8017c0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8017c0e:	d002      	beq.n	8017c16 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2200      	movs	r2, #0
 8017c14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	685b      	ldr	r3, [r3, #4]
 8017c1a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	689b      	ldr	r3, [r3, #8]
 8017c22:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8017c26:	431a      	orrs	r2, r3
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	691b      	ldr	r3, [r3, #16]
 8017c2c:	f003 0302 	and.w	r3, r3, #2
 8017c30:	431a      	orrs	r2, r3
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	695b      	ldr	r3, [r3, #20]
 8017c36:	f003 0301 	and.w	r3, r3, #1
 8017c3a:	431a      	orrs	r2, r3
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	699b      	ldr	r3, [r3, #24]
 8017c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017c44:	431a      	orrs	r2, r3
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	69db      	ldr	r3, [r3, #28]
 8017c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8017c4e:	431a      	orrs	r2, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	6a1b      	ldr	r3, [r3, #32]
 8017c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c58:	ea42 0103 	orr.w	r1, r2, r3
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	430a      	orrs	r2, r1
 8017c6a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	699b      	ldr	r3, [r3, #24]
 8017c70:	0c1b      	lsrs	r3, r3, #16
 8017c72:	f003 0204 	and.w	r2, r3, #4
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c7a:	f003 0310 	and.w	r3, r3, #16
 8017c7e:	431a      	orrs	r2, r3
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c84:	f003 0308 	and.w	r3, r3, #8
 8017c88:	431a      	orrs	r2, r3
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	68db      	ldr	r3, [r3, #12]
 8017c8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8017c92:	ea42 0103 	orr.w	r1, r2, r3
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	430a      	orrs	r2, r1
 8017ca2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	69da      	ldr	r2, [r3, #28]
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017cb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	2200      	movs	r2, #0
 8017cb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	2201      	movs	r2, #1
 8017cbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8017cc2:	2300      	movs	r3, #0
}
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	3710      	adds	r7, #16
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}

08017ccc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b088      	sub	sp, #32
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	60f8      	str	r0, [r7, #12]
 8017cd4:	60b9      	str	r1, [r7, #8]
 8017cd6:	603b      	str	r3, [r7, #0]
 8017cd8:	4613      	mov	r3, r2
 8017cda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017ce6:	2b01      	cmp	r3, #1
 8017ce8:	d101      	bne.n	8017cee <HAL_SPI_Transmit+0x22>
 8017cea:	2302      	movs	r3, #2
 8017cec:	e158      	b.n	8017fa0 <HAL_SPI_Transmit+0x2d4>
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	2201      	movs	r2, #1
 8017cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8017cf6:	f7fb fa77 	bl	80131e8 <HAL_GetTick>
 8017cfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8017cfc:	88fb      	ldrh	r3, [r7, #6]
 8017cfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017d06:	b2db      	uxtb	r3, r3
 8017d08:	2b01      	cmp	r3, #1
 8017d0a:	d002      	beq.n	8017d12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8017d0c:	2302      	movs	r3, #2
 8017d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8017d10:	e13d      	b.n	8017f8e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8017d12:	68bb      	ldr	r3, [r7, #8]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d002      	beq.n	8017d1e <HAL_SPI_Transmit+0x52>
 8017d18:	88fb      	ldrh	r3, [r7, #6]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d102      	bne.n	8017d24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8017d1e:	2301      	movs	r3, #1
 8017d20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8017d22:	e134      	b.n	8017f8e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	2203      	movs	r2, #3
 8017d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	2200      	movs	r2, #0
 8017d30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	68ba      	ldr	r2, [r7, #8]
 8017d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	88fa      	ldrh	r2, [r7, #6]
 8017d3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	88fa      	ldrh	r2, [r7, #6]
 8017d42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	2200      	movs	r2, #0
 8017d48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	2200      	movs	r2, #0
 8017d56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	2200      	movs	r2, #0
 8017d64:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	689b      	ldr	r3, [r3, #8]
 8017d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017d6e:	d10f      	bne.n	8017d90 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	681a      	ldr	r2, [r3, #0]
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017d7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	681a      	ldr	r2, [r3, #0]
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017d8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d9a:	2b40      	cmp	r3, #64	; 0x40
 8017d9c:	d007      	beq.n	8017dae <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017dac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	68db      	ldr	r3, [r3, #12]
 8017db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8017db6:	d94b      	bls.n	8017e50 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	685b      	ldr	r3, [r3, #4]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d002      	beq.n	8017dc6 <HAL_SPI_Transmit+0xfa>
 8017dc0:	8afb      	ldrh	r3, [r7, #22]
 8017dc2:	2b01      	cmp	r3, #1
 8017dc4:	d13e      	bne.n	8017e44 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dca:	881a      	ldrh	r2, [r3, #0]
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dd6:	1c9a      	adds	r2, r3, #2
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	3b01      	subs	r3, #1
 8017de4:	b29a      	uxth	r2, r3
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8017dea:	e02b      	b.n	8017e44 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	689b      	ldr	r3, [r3, #8]
 8017df2:	f003 0302 	and.w	r3, r3, #2
 8017df6:	2b02      	cmp	r3, #2
 8017df8:	d112      	bne.n	8017e20 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dfe:	881a      	ldrh	r2, [r3, #0]
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e0a:	1c9a      	adds	r2, r3, #2
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017e14:	b29b      	uxth	r3, r3
 8017e16:	3b01      	subs	r3, #1
 8017e18:	b29a      	uxth	r2, r3
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8017e1e:	e011      	b.n	8017e44 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017e20:	f7fb f9e2 	bl	80131e8 <HAL_GetTick>
 8017e24:	4602      	mov	r2, r0
 8017e26:	69bb      	ldr	r3, [r7, #24]
 8017e28:	1ad3      	subs	r3, r2, r3
 8017e2a:	683a      	ldr	r2, [r7, #0]
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	d803      	bhi.n	8017e38 <HAL_SPI_Transmit+0x16c>
 8017e30:	683b      	ldr	r3, [r7, #0]
 8017e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e36:	d102      	bne.n	8017e3e <HAL_SPI_Transmit+0x172>
 8017e38:	683b      	ldr	r3, [r7, #0]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d102      	bne.n	8017e44 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8017e3e:	2303      	movs	r3, #3
 8017e40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8017e42:	e0a4      	b.n	8017f8e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017e48:	b29b      	uxth	r3, r3
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d1ce      	bne.n	8017dec <HAL_SPI_Transmit+0x120>
 8017e4e:	e07c      	b.n	8017f4a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	685b      	ldr	r3, [r3, #4]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d002      	beq.n	8017e5e <HAL_SPI_Transmit+0x192>
 8017e58:	8afb      	ldrh	r3, [r7, #22]
 8017e5a:	2b01      	cmp	r3, #1
 8017e5c:	d170      	bne.n	8017f40 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	2b01      	cmp	r3, #1
 8017e66:	d912      	bls.n	8017e8e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e6c:	881a      	ldrh	r2, [r3, #0]
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e78:	1c9a      	adds	r2, r3, #2
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	3b02      	subs	r3, #2
 8017e86:	b29a      	uxth	r2, r3
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8017e8c:	e058      	b.n	8017f40 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	330c      	adds	r3, #12
 8017e98:	7812      	ldrb	r2, [r2, #0]
 8017e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ea0:	1c5a      	adds	r2, r3, #1
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017eaa:	b29b      	uxth	r3, r3
 8017eac:	3b01      	subs	r3, #1
 8017eae:	b29a      	uxth	r2, r3
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8017eb4:	e044      	b.n	8017f40 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	689b      	ldr	r3, [r3, #8]
 8017ebc:	f003 0302 	and.w	r3, r3, #2
 8017ec0:	2b02      	cmp	r3, #2
 8017ec2:	d12b      	bne.n	8017f1c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017ec8:	b29b      	uxth	r3, r3
 8017eca:	2b01      	cmp	r3, #1
 8017ecc:	d912      	bls.n	8017ef4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ed2:	881a      	ldrh	r2, [r3, #0]
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ede:	1c9a      	adds	r2, r3, #2
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017ee8:	b29b      	uxth	r3, r3
 8017eea:	3b02      	subs	r3, #2
 8017eec:	b29a      	uxth	r2, r3
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8017ef2:	e025      	b.n	8017f40 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	330c      	adds	r3, #12
 8017efe:	7812      	ldrb	r2, [r2, #0]
 8017f00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f06:	1c5a      	adds	r2, r3, #1
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	3b01      	subs	r3, #1
 8017f14:	b29a      	uxth	r2, r3
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8017f1a:	e011      	b.n	8017f40 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017f1c:	f7fb f964 	bl	80131e8 <HAL_GetTick>
 8017f20:	4602      	mov	r2, r0
 8017f22:	69bb      	ldr	r3, [r7, #24]
 8017f24:	1ad3      	subs	r3, r2, r3
 8017f26:	683a      	ldr	r2, [r7, #0]
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	d803      	bhi.n	8017f34 <HAL_SPI_Transmit+0x268>
 8017f2c:	683b      	ldr	r3, [r7, #0]
 8017f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f32:	d102      	bne.n	8017f3a <HAL_SPI_Transmit+0x26e>
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d102      	bne.n	8017f40 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8017f3a:	2303      	movs	r3, #3
 8017f3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8017f3e:	e026      	b.n	8017f8e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d1b5      	bne.n	8017eb6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017f4a:	69ba      	ldr	r2, [r7, #24]
 8017f4c:	6839      	ldr	r1, [r7, #0]
 8017f4e:	68f8      	ldr	r0, [r7, #12]
 8017f50:	f000 fd08 	bl	8018964 <SPI_EndRxTxTransaction>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d002      	beq.n	8017f60 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	2220      	movs	r2, #32
 8017f5e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	689b      	ldr	r3, [r3, #8]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d10a      	bne.n	8017f7e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017f68:	2300      	movs	r3, #0
 8017f6a:	613b      	str	r3, [r7, #16]
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	68db      	ldr	r3, [r3, #12]
 8017f72:	613b      	str	r3, [r7, #16]
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	689b      	ldr	r3, [r3, #8]
 8017f7a:	613b      	str	r3, [r7, #16]
 8017f7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d002      	beq.n	8017f8c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8017f86:	2301      	movs	r3, #1
 8017f88:	77fb      	strb	r3, [r7, #31]
 8017f8a:	e000      	b.n	8017f8e <HAL_SPI_Transmit+0x2c2>
  }

error:
 8017f8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2201      	movs	r2, #1
 8017f92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	2200      	movs	r2, #0
 8017f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8017f9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	3720      	adds	r7, #32
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	bd80      	pop	{r7, pc}

08017fa8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b088      	sub	sp, #32
 8017fac:	af02      	add	r7, sp, #8
 8017fae:	60f8      	str	r0, [r7, #12]
 8017fb0:	60b9      	str	r1, [r7, #8]
 8017fb2:	603b      	str	r3, [r7, #0]
 8017fb4:	4613      	mov	r3, r2
 8017fb6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8017fb8:	2300      	movs	r3, #0
 8017fba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	685b      	ldr	r3, [r3, #4]
 8017fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017fc4:	d112      	bne.n	8017fec <HAL_SPI_Receive+0x44>
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	689b      	ldr	r3, [r3, #8]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d10e      	bne.n	8017fec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	2204      	movs	r2, #4
 8017fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017fd6:	88fa      	ldrh	r2, [r7, #6]
 8017fd8:	683b      	ldr	r3, [r7, #0]
 8017fda:	9300      	str	r3, [sp, #0]
 8017fdc:	4613      	mov	r3, r2
 8017fde:	68ba      	ldr	r2, [r7, #8]
 8017fe0:	68b9      	ldr	r1, [r7, #8]
 8017fe2:	68f8      	ldr	r0, [r7, #12]
 8017fe4:	f000 f910 	bl	8018208 <HAL_SPI_TransmitReceive>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	e109      	b.n	8018200 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017ff2:	2b01      	cmp	r3, #1
 8017ff4:	d101      	bne.n	8017ffa <HAL_SPI_Receive+0x52>
 8017ff6:	2302      	movs	r3, #2
 8017ff8:	e102      	b.n	8018200 <HAL_SPI_Receive+0x258>
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	2201      	movs	r2, #1
 8017ffe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018002:	f7fb f8f1 	bl	80131e8 <HAL_GetTick>
 8018006:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801800e:	b2db      	uxtb	r3, r3
 8018010:	2b01      	cmp	r3, #1
 8018012:	d002      	beq.n	801801a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8018014:	2302      	movs	r3, #2
 8018016:	75fb      	strb	r3, [r7, #23]
    goto error;
 8018018:	e0e9      	b.n	80181ee <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801801a:	68bb      	ldr	r3, [r7, #8]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d002      	beq.n	8018026 <HAL_SPI_Receive+0x7e>
 8018020:	88fb      	ldrh	r3, [r7, #6]
 8018022:	2b00      	cmp	r3, #0
 8018024:	d102      	bne.n	801802c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8018026:	2301      	movs	r3, #1
 8018028:	75fb      	strb	r3, [r7, #23]
    goto error;
 801802a:	e0e0      	b.n	80181ee <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	2204      	movs	r2, #4
 8018030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	2200      	movs	r2, #0
 8018038:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	68ba      	ldr	r2, [r7, #8]
 801803e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	88fa      	ldrh	r2, [r7, #6]
 8018044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	88fa      	ldrh	r2, [r7, #6]
 801804c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	2200      	movs	r2, #0
 8018054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	2200      	movs	r2, #0
 801805a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	2200      	movs	r2, #0
 8018060:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	2200      	movs	r2, #0
 8018066:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	2200      	movs	r2, #0
 801806c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	68db      	ldr	r3, [r3, #12]
 8018072:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018076:	d908      	bls.n	801808a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	685a      	ldr	r2, [r3, #4]
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018086:	605a      	str	r2, [r3, #4]
 8018088:	e007      	b.n	801809a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	685a      	ldr	r2, [r3, #4]
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018098:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	689b      	ldr	r3, [r3, #8]
 801809e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80180a2:	d10f      	bne.n	80180c4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	681a      	ldr	r2, [r3, #0]
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80180b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	681a      	ldr	r2, [r3, #0]
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80180c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180ce:	2b40      	cmp	r3, #64	; 0x40
 80180d0:	d007      	beq.n	80180e2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	681a      	ldr	r2, [r3, #0]
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80180e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	68db      	ldr	r3, [r3, #12]
 80180e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80180ea:	d867      	bhi.n	80181bc <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80180ec:	e030      	b.n	8018150 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	689b      	ldr	r3, [r3, #8]
 80180f4:	f003 0301 	and.w	r3, r3, #1
 80180f8:	2b01      	cmp	r3, #1
 80180fa:	d117      	bne.n	801812c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f103 020c 	add.w	r2, r3, #12
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018108:	7812      	ldrb	r2, [r2, #0]
 801810a:	b2d2      	uxtb	r2, r2
 801810c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018112:	1c5a      	adds	r2, r3, #1
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801811e:	b29b      	uxth	r3, r3
 8018120:	3b01      	subs	r3, #1
 8018122:	b29a      	uxth	r2, r3
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801812a:	e011      	b.n	8018150 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801812c:	f7fb f85c 	bl	80131e8 <HAL_GetTick>
 8018130:	4602      	mov	r2, r0
 8018132:	693b      	ldr	r3, [r7, #16]
 8018134:	1ad3      	subs	r3, r2, r3
 8018136:	683a      	ldr	r2, [r7, #0]
 8018138:	429a      	cmp	r2, r3
 801813a:	d803      	bhi.n	8018144 <HAL_SPI_Receive+0x19c>
 801813c:	683b      	ldr	r3, [r7, #0]
 801813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018142:	d102      	bne.n	801814a <HAL_SPI_Receive+0x1a2>
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d102      	bne.n	8018150 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801814a:	2303      	movs	r3, #3
 801814c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801814e:	e04e      	b.n	80181ee <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018156:	b29b      	uxth	r3, r3
 8018158:	2b00      	cmp	r3, #0
 801815a:	d1c8      	bne.n	80180ee <HAL_SPI_Receive+0x146>
 801815c:	e034      	b.n	80181c8 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	689b      	ldr	r3, [r3, #8]
 8018164:	f003 0301 	and.w	r3, r3, #1
 8018168:	2b01      	cmp	r3, #1
 801816a:	d115      	bne.n	8018198 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	68da      	ldr	r2, [r3, #12]
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018176:	b292      	uxth	r2, r2
 8018178:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801817e:	1c9a      	adds	r2, r3, #2
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801818a:	b29b      	uxth	r3, r3
 801818c:	3b01      	subs	r3, #1
 801818e:	b29a      	uxth	r2, r3
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8018196:	e011      	b.n	80181bc <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018198:	f7fb f826 	bl	80131e8 <HAL_GetTick>
 801819c:	4602      	mov	r2, r0
 801819e:	693b      	ldr	r3, [r7, #16]
 80181a0:	1ad3      	subs	r3, r2, r3
 80181a2:	683a      	ldr	r2, [r7, #0]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d803      	bhi.n	80181b0 <HAL_SPI_Receive+0x208>
 80181a8:	683b      	ldr	r3, [r7, #0]
 80181aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181ae:	d102      	bne.n	80181b6 <HAL_SPI_Receive+0x20e>
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d102      	bne.n	80181bc <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80181b6:	2303      	movs	r3, #3
 80181b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80181ba:	e018      	b.n	80181ee <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d1ca      	bne.n	801815e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80181c8:	693a      	ldr	r2, [r7, #16]
 80181ca:	6839      	ldr	r1, [r7, #0]
 80181cc:	68f8      	ldr	r0, [r7, #12]
 80181ce:	f000 fb4d 	bl	801886c <SPI_EndRxTransaction>
 80181d2:	4603      	mov	r3, r0
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d002      	beq.n	80181de <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	2220      	movs	r2, #32
 80181dc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d002      	beq.n	80181ec <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80181e6:	2301      	movs	r3, #1
 80181e8:	75fb      	strb	r3, [r7, #23]
 80181ea:	e000      	b.n	80181ee <HAL_SPI_Receive+0x246>
  }

error :
 80181ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	2201      	movs	r2, #1
 80181f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	2200      	movs	r2, #0
 80181fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80181fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8018200:	4618      	mov	r0, r3
 8018202:	3718      	adds	r7, #24
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}

08018208 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b08a      	sub	sp, #40	; 0x28
 801820c:	af00      	add	r7, sp, #0
 801820e:	60f8      	str	r0, [r7, #12]
 8018210:	60b9      	str	r1, [r7, #8]
 8018212:	607a      	str	r2, [r7, #4]
 8018214:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8018216:	2301      	movs	r3, #1
 8018218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801821a:	2300      	movs	r3, #0
 801821c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018226:	2b01      	cmp	r3, #1
 8018228:	d101      	bne.n	801822e <HAL_SPI_TransmitReceive+0x26>
 801822a:	2302      	movs	r3, #2
 801822c:	e1fb      	b.n	8018626 <HAL_SPI_TransmitReceive+0x41e>
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	2201      	movs	r2, #1
 8018232:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018236:	f7fa ffd7 	bl	80131e8 <HAL_GetTick>
 801823a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018242:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	685b      	ldr	r3, [r3, #4]
 8018248:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801824a:	887b      	ldrh	r3, [r7, #2]
 801824c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801824e:	887b      	ldrh	r3, [r7, #2]
 8018250:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8018252:	7efb      	ldrb	r3, [r7, #27]
 8018254:	2b01      	cmp	r3, #1
 8018256:	d00e      	beq.n	8018276 <HAL_SPI_TransmitReceive+0x6e>
 8018258:	697b      	ldr	r3, [r7, #20]
 801825a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801825e:	d106      	bne.n	801826e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	689b      	ldr	r3, [r3, #8]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d102      	bne.n	801826e <HAL_SPI_TransmitReceive+0x66>
 8018268:	7efb      	ldrb	r3, [r7, #27]
 801826a:	2b04      	cmp	r3, #4
 801826c:	d003      	beq.n	8018276 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801826e:	2302      	movs	r3, #2
 8018270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8018274:	e1cd      	b.n	8018612 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d005      	beq.n	8018288 <HAL_SPI_TransmitReceive+0x80>
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d002      	beq.n	8018288 <HAL_SPI_TransmitReceive+0x80>
 8018282:	887b      	ldrh	r3, [r7, #2]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d103      	bne.n	8018290 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8018288:	2301      	movs	r3, #1
 801828a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801828e:	e1c0      	b.n	8018612 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018296:	b2db      	uxtb	r3, r3
 8018298:	2b04      	cmp	r3, #4
 801829a:	d003      	beq.n	80182a4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	2205      	movs	r2, #5
 80182a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	2200      	movs	r2, #0
 80182a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	687a      	ldr	r2, [r7, #4]
 80182ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	887a      	ldrh	r2, [r7, #2]
 80182b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	887a      	ldrh	r2, [r7, #2]
 80182bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	68ba      	ldr	r2, [r7, #8]
 80182c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	887a      	ldrh	r2, [r7, #2]
 80182ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	887a      	ldrh	r2, [r7, #2]
 80182d0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	2200      	movs	r2, #0
 80182d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	2200      	movs	r2, #0
 80182dc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	68db      	ldr	r3, [r3, #12]
 80182e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80182e6:	d802      	bhi.n	80182ee <HAL_SPI_TransmitReceive+0xe6>
 80182e8:	8a3b      	ldrh	r3, [r7, #16]
 80182ea:	2b01      	cmp	r3, #1
 80182ec:	d908      	bls.n	8018300 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	685a      	ldr	r2, [r3, #4]
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80182fc:	605a      	str	r2, [r3, #4]
 80182fe:	e007      	b.n	8018310 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	685a      	ldr	r2, [r3, #4]
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801830e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801831a:	2b40      	cmp	r3, #64	; 0x40
 801831c:	d007      	beq.n	801832e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	681a      	ldr	r2, [r3, #0]
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801832c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	68db      	ldr	r3, [r3, #12]
 8018332:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018336:	d97c      	bls.n	8018432 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	685b      	ldr	r3, [r3, #4]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d002      	beq.n	8018346 <HAL_SPI_TransmitReceive+0x13e>
 8018340:	8a7b      	ldrh	r3, [r7, #18]
 8018342:	2b01      	cmp	r3, #1
 8018344:	d169      	bne.n	801841a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801834a:	881a      	ldrh	r2, [r3, #0]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018356:	1c9a      	adds	r2, r3, #2
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018360:	b29b      	uxth	r3, r3
 8018362:	3b01      	subs	r3, #1
 8018364:	b29a      	uxth	r2, r3
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801836a:	e056      	b.n	801841a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	689b      	ldr	r3, [r3, #8]
 8018372:	f003 0302 	and.w	r3, r3, #2
 8018376:	2b02      	cmp	r3, #2
 8018378:	d11b      	bne.n	80183b2 <HAL_SPI_TransmitReceive+0x1aa>
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801837e:	b29b      	uxth	r3, r3
 8018380:	2b00      	cmp	r3, #0
 8018382:	d016      	beq.n	80183b2 <HAL_SPI_TransmitReceive+0x1aa>
 8018384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018386:	2b01      	cmp	r3, #1
 8018388:	d113      	bne.n	80183b2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801838e:	881a      	ldrh	r2, [r3, #0]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801839a:	1c9a      	adds	r2, r3, #2
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80183a4:	b29b      	uxth	r3, r3
 80183a6:	3b01      	subs	r3, #1
 80183a8:	b29a      	uxth	r2, r3
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80183ae:	2300      	movs	r3, #0
 80183b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	689b      	ldr	r3, [r3, #8]
 80183b8:	f003 0301 	and.w	r3, r3, #1
 80183bc:	2b01      	cmp	r3, #1
 80183be:	d11c      	bne.n	80183fa <HAL_SPI_TransmitReceive+0x1f2>
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d016      	beq.n	80183fa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	68da      	ldr	r2, [r3, #12]
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183d6:	b292      	uxth	r2, r2
 80183d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183de:	1c9a      	adds	r2, r3, #2
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80183ea:	b29b      	uxth	r3, r3
 80183ec:	3b01      	subs	r3, #1
 80183ee:	b29a      	uxth	r2, r3
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80183f6:	2301      	movs	r3, #1
 80183f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80183fa:	f7fa fef5 	bl	80131e8 <HAL_GetTick>
 80183fe:	4602      	mov	r2, r0
 8018400:	69fb      	ldr	r3, [r7, #28]
 8018402:	1ad3      	subs	r3, r2, r3
 8018404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018406:	429a      	cmp	r2, r3
 8018408:	d807      	bhi.n	801841a <HAL_SPI_TransmitReceive+0x212>
 801840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018410:	d003      	beq.n	801841a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8018412:	2303      	movs	r3, #3
 8018414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8018418:	e0fb      	b.n	8018612 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801841e:	b29b      	uxth	r3, r3
 8018420:	2b00      	cmp	r3, #0
 8018422:	d1a3      	bne.n	801836c <HAL_SPI_TransmitReceive+0x164>
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801842a:	b29b      	uxth	r3, r3
 801842c:	2b00      	cmp	r3, #0
 801842e:	d19d      	bne.n	801836c <HAL_SPI_TransmitReceive+0x164>
 8018430:	e0df      	b.n	80185f2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d003      	beq.n	8018442 <HAL_SPI_TransmitReceive+0x23a>
 801843a:	8a7b      	ldrh	r3, [r7, #18]
 801843c:	2b01      	cmp	r3, #1
 801843e:	f040 80cb 	bne.w	80185d8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018446:	b29b      	uxth	r3, r3
 8018448:	2b01      	cmp	r3, #1
 801844a:	d912      	bls.n	8018472 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018450:	881a      	ldrh	r2, [r3, #0]
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801845c:	1c9a      	adds	r2, r3, #2
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018466:	b29b      	uxth	r3, r3
 8018468:	3b02      	subs	r3, #2
 801846a:	b29a      	uxth	r2, r3
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8018470:	e0b2      	b.n	80185d8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	330c      	adds	r3, #12
 801847c:	7812      	ldrb	r2, [r2, #0]
 801847e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018484:	1c5a      	adds	r2, r3, #1
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801848e:	b29b      	uxth	r3, r3
 8018490:	3b01      	subs	r3, #1
 8018492:	b29a      	uxth	r2, r3
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018498:	e09e      	b.n	80185d8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	689b      	ldr	r3, [r3, #8]
 80184a0:	f003 0302 	and.w	r3, r3, #2
 80184a4:	2b02      	cmp	r3, #2
 80184a6:	d134      	bne.n	8018512 <HAL_SPI_TransmitReceive+0x30a>
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80184ac:	b29b      	uxth	r3, r3
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d02f      	beq.n	8018512 <HAL_SPI_TransmitReceive+0x30a>
 80184b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b4:	2b01      	cmp	r3, #1
 80184b6:	d12c      	bne.n	8018512 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80184bc:	b29b      	uxth	r3, r3
 80184be:	2b01      	cmp	r3, #1
 80184c0:	d912      	bls.n	80184e8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184c6:	881a      	ldrh	r2, [r3, #0]
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184d2:	1c9a      	adds	r2, r3, #2
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80184dc:	b29b      	uxth	r3, r3
 80184de:	3b02      	subs	r3, #2
 80184e0:	b29a      	uxth	r2, r3
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80184e6:	e012      	b.n	801850e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	330c      	adds	r3, #12
 80184f2:	7812      	ldrb	r2, [r2, #0]
 80184f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184fa:	1c5a      	adds	r2, r3, #1
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018504:	b29b      	uxth	r3, r3
 8018506:	3b01      	subs	r3, #1
 8018508:	b29a      	uxth	r2, r3
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801850e:	2300      	movs	r3, #0
 8018510:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	689b      	ldr	r3, [r3, #8]
 8018518:	f003 0301 	and.w	r3, r3, #1
 801851c:	2b01      	cmp	r3, #1
 801851e:	d148      	bne.n	80185b2 <HAL_SPI_TransmitReceive+0x3aa>
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018526:	b29b      	uxth	r3, r3
 8018528:	2b00      	cmp	r3, #0
 801852a:	d042      	beq.n	80185b2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018532:	b29b      	uxth	r3, r3
 8018534:	2b01      	cmp	r3, #1
 8018536:	d923      	bls.n	8018580 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	68da      	ldr	r2, [r3, #12]
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018542:	b292      	uxth	r2, r2
 8018544:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801854a:	1c9a      	adds	r2, r3, #2
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018556:	b29b      	uxth	r3, r3
 8018558:	3b02      	subs	r3, #2
 801855a:	b29a      	uxth	r2, r3
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018568:	b29b      	uxth	r3, r3
 801856a:	2b01      	cmp	r3, #1
 801856c:	d81f      	bhi.n	80185ae <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	685a      	ldr	r2, [r3, #4]
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801857c:	605a      	str	r2, [r3, #4]
 801857e:	e016      	b.n	80185ae <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	f103 020c 	add.w	r2, r3, #12
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801858c:	7812      	ldrb	r2, [r2, #0]
 801858e:	b2d2      	uxtb	r2, r2
 8018590:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018596:	1c5a      	adds	r2, r3, #1
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	3b01      	subs	r3, #1
 80185a6:	b29a      	uxth	r2, r3
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80185ae:	2301      	movs	r3, #1
 80185b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80185b2:	f7fa fe19 	bl	80131e8 <HAL_GetTick>
 80185b6:	4602      	mov	r2, r0
 80185b8:	69fb      	ldr	r3, [r7, #28]
 80185ba:	1ad3      	subs	r3, r2, r3
 80185bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185be:	429a      	cmp	r2, r3
 80185c0:	d803      	bhi.n	80185ca <HAL_SPI_TransmitReceive+0x3c2>
 80185c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185c8:	d102      	bne.n	80185d0 <HAL_SPI_TransmitReceive+0x3c8>
 80185ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d103      	bne.n	80185d8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80185d0:	2303      	movs	r3, #3
 80185d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80185d6:	e01c      	b.n	8018612 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80185dc:	b29b      	uxth	r3, r3
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f47f af5b 	bne.w	801849a <HAL_SPI_TransmitReceive+0x292>
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	f47f af54 	bne.w	801849a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80185f2:	69fa      	ldr	r2, [r7, #28]
 80185f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80185f6:	68f8      	ldr	r0, [r7, #12]
 80185f8:	f000 f9b4 	bl	8018964 <SPI_EndRxTxTransaction>
 80185fc:	4603      	mov	r3, r0
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d006      	beq.n	8018610 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8018602:	2301      	movs	r3, #1
 8018604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	2220      	movs	r2, #32
 801860c:	661a      	str	r2, [r3, #96]	; 0x60
 801860e:	e000      	b.n	8018612 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8018610:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	2201      	movs	r2, #1
 8018616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	2200      	movs	r2, #0
 801861e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8018622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8018626:	4618      	mov	r0, r3
 8018628:	3728      	adds	r7, #40	; 0x28
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
	...

08018630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b088      	sub	sp, #32
 8018634:	af00      	add	r7, sp, #0
 8018636:	60f8      	str	r0, [r7, #12]
 8018638:	60b9      	str	r1, [r7, #8]
 801863a:	603b      	str	r3, [r7, #0]
 801863c:	4613      	mov	r3, r2
 801863e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8018640:	f7fa fdd2 	bl	80131e8 <HAL_GetTick>
 8018644:	4602      	mov	r2, r0
 8018646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018648:	1a9b      	subs	r3, r3, r2
 801864a:	683a      	ldr	r2, [r7, #0]
 801864c:	4413      	add	r3, r2
 801864e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8018650:	f7fa fdca 	bl	80131e8 <HAL_GetTick>
 8018654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8018656:	4b39      	ldr	r3, [pc, #228]	; (801873c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	015b      	lsls	r3, r3, #5
 801865c:	0d1b      	lsrs	r3, r3, #20
 801865e:	69fa      	ldr	r2, [r7, #28]
 8018660:	fb02 f303 	mul.w	r3, r2, r3
 8018664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018666:	e054      	b.n	8018712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801866e:	d050      	beq.n	8018712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8018670:	f7fa fdba 	bl	80131e8 <HAL_GetTick>
 8018674:	4602      	mov	r2, r0
 8018676:	69bb      	ldr	r3, [r7, #24]
 8018678:	1ad3      	subs	r3, r2, r3
 801867a:	69fa      	ldr	r2, [r7, #28]
 801867c:	429a      	cmp	r2, r3
 801867e:	d902      	bls.n	8018686 <SPI_WaitFlagStateUntilTimeout+0x56>
 8018680:	69fb      	ldr	r3, [r7, #28]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d13d      	bne.n	8018702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	685a      	ldr	r2, [r3, #4]
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8018694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	685b      	ldr	r3, [r3, #4]
 801869a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801869e:	d111      	bne.n	80186c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	689b      	ldr	r3, [r3, #8]
 80186a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80186a8:	d004      	beq.n	80186b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	689b      	ldr	r3, [r3, #8]
 80186ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80186b2:	d107      	bne.n	80186c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	681a      	ldr	r2, [r3, #0]
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80186c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80186cc:	d10f      	bne.n	80186ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	681a      	ldr	r2, [r3, #0]
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80186dc:	601a      	str	r2, [r3, #0]
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	681a      	ldr	r2, [r3, #0]
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80186ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	2201      	movs	r2, #1
 80186f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	2200      	movs	r2, #0
 80186fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80186fe:	2303      	movs	r3, #3
 8018700:	e017      	b.n	8018732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d101      	bne.n	801870c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8018708:	2300      	movs	r3, #0
 801870a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	3b01      	subs	r3, #1
 8018710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	689a      	ldr	r2, [r3, #8]
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	4013      	ands	r3, r2
 801871c:	68ba      	ldr	r2, [r7, #8]
 801871e:	429a      	cmp	r2, r3
 8018720:	bf0c      	ite	eq
 8018722:	2301      	moveq	r3, #1
 8018724:	2300      	movne	r3, #0
 8018726:	b2db      	uxtb	r3, r3
 8018728:	461a      	mov	r2, r3
 801872a:	79fb      	ldrb	r3, [r7, #7]
 801872c:	429a      	cmp	r2, r3
 801872e:	d19b      	bne.n	8018668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8018730:	2300      	movs	r3, #0
}
 8018732:	4618      	mov	r0, r3
 8018734:	3720      	adds	r7, #32
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	2000011c 	.word	0x2000011c

08018740 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b08a      	sub	sp, #40	; 0x28
 8018744:	af00      	add	r7, sp, #0
 8018746:	60f8      	str	r0, [r7, #12]
 8018748:	60b9      	str	r1, [r7, #8]
 801874a:	607a      	str	r2, [r7, #4]
 801874c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801874e:	2300      	movs	r3, #0
 8018750:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8018752:	f7fa fd49 	bl	80131e8 <HAL_GetTick>
 8018756:	4602      	mov	r2, r0
 8018758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801875a:	1a9b      	subs	r3, r3, r2
 801875c:	683a      	ldr	r2, [r7, #0]
 801875e:	4413      	add	r3, r2
 8018760:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8018762:	f7fa fd41 	bl	80131e8 <HAL_GetTick>
 8018766:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	330c      	adds	r3, #12
 801876e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8018770:	4b3d      	ldr	r3, [pc, #244]	; (8018868 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8018772:	681a      	ldr	r2, [r3, #0]
 8018774:	4613      	mov	r3, r2
 8018776:	009b      	lsls	r3, r3, #2
 8018778:	4413      	add	r3, r2
 801877a:	00da      	lsls	r2, r3, #3
 801877c:	1ad3      	subs	r3, r2, r3
 801877e:	0d1b      	lsrs	r3, r3, #20
 8018780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018782:	fb02 f303 	mul.w	r3, r2, r3
 8018786:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8018788:	e060      	b.n	801884c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801878a:	68bb      	ldr	r3, [r7, #8]
 801878c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8018790:	d107      	bne.n	80187a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d104      	bne.n	80187a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8018798:	69fb      	ldr	r3, [r7, #28]
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	b2db      	uxtb	r3, r3
 801879e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80187a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80187a2:	683b      	ldr	r3, [r7, #0]
 80187a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187a8:	d050      	beq.n	801884c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80187aa:	f7fa fd1d 	bl	80131e8 <HAL_GetTick>
 80187ae:	4602      	mov	r2, r0
 80187b0:	6a3b      	ldr	r3, [r7, #32]
 80187b2:	1ad3      	subs	r3, r2, r3
 80187b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187b6:	429a      	cmp	r2, r3
 80187b8:	d902      	bls.n	80187c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80187ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d13d      	bne.n	801883c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	685a      	ldr	r2, [r3, #4]
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80187ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	685b      	ldr	r3, [r3, #4]
 80187d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80187d8:	d111      	bne.n	80187fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	689b      	ldr	r3, [r3, #8]
 80187de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80187e2:	d004      	beq.n	80187ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	689b      	ldr	r3, [r3, #8]
 80187e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80187ec:	d107      	bne.n	80187fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	681a      	ldr	r2, [r3, #0]
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80187fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018806:	d10f      	bne.n	8018828 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	681a      	ldr	r2, [r3, #0]
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8018816:	601a      	str	r2, [r3, #0]
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	681a      	ldr	r2, [r3, #0]
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8018826:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	2201      	movs	r2, #1
 801882c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	2200      	movs	r2, #0
 8018834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8018838:	2303      	movs	r3, #3
 801883a:	e010      	b.n	801885e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801883c:	69bb      	ldr	r3, [r7, #24]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d101      	bne.n	8018846 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8018842:	2300      	movs	r3, #0
 8018844:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8018846:	69bb      	ldr	r3, [r7, #24]
 8018848:	3b01      	subs	r3, #1
 801884a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	689a      	ldr	r2, [r3, #8]
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	4013      	ands	r3, r2
 8018856:	687a      	ldr	r2, [r7, #4]
 8018858:	429a      	cmp	r2, r3
 801885a:	d196      	bne.n	801878a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801885c:	2300      	movs	r3, #0
}
 801885e:	4618      	mov	r0, r3
 8018860:	3728      	adds	r7, #40	; 0x28
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	2000011c 	.word	0x2000011c

0801886c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b088      	sub	sp, #32
 8018870:	af02      	add	r7, sp, #8
 8018872:	60f8      	str	r0, [r7, #12]
 8018874:	60b9      	str	r1, [r7, #8]
 8018876:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	685b      	ldr	r3, [r3, #4]
 801887c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018880:	d111      	bne.n	80188a6 <SPI_EndRxTransaction+0x3a>
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	689b      	ldr	r3, [r3, #8]
 8018886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801888a:	d004      	beq.n	8018896 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	689b      	ldr	r3, [r3, #8]
 8018890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018894:	d107      	bne.n	80188a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80188a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	685b      	ldr	r3, [r3, #4]
 80188aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80188ae:	d112      	bne.n	80188d6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	9300      	str	r3, [sp, #0]
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	2200      	movs	r2, #0
 80188b8:	2180      	movs	r1, #128	; 0x80
 80188ba:	68f8      	ldr	r0, [r7, #12]
 80188bc:	f7ff feb8 	bl	8018630 <SPI_WaitFlagStateUntilTimeout>
 80188c0:	4603      	mov	r3, r0
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d021      	beq.n	801890a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80188ca:	f043 0220 	orr.w	r2, r3, #32
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80188d2:	2303      	movs	r3, #3
 80188d4:	e03d      	b.n	8018952 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80188d6:	4b21      	ldr	r3, [pc, #132]	; (801895c <SPI_EndRxTransaction+0xf0>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	4a21      	ldr	r2, [pc, #132]	; (8018960 <SPI_EndRxTransaction+0xf4>)
 80188dc:	fba2 2303 	umull	r2, r3, r2, r3
 80188e0:	0d5b      	lsrs	r3, r3, #21
 80188e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80188e6:	fb02 f303 	mul.w	r3, r2, r3
 80188ea:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d00a      	beq.n	8018908 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80188f2:	697b      	ldr	r3, [r7, #20]
 80188f4:	3b01      	subs	r3, #1
 80188f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	689b      	ldr	r3, [r3, #8]
 80188fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018902:	2b80      	cmp	r3, #128	; 0x80
 8018904:	d0f2      	beq.n	80188ec <SPI_EndRxTransaction+0x80>
 8018906:	e000      	b.n	801890a <SPI_EndRxTransaction+0x9e>
        break;
 8018908:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	685b      	ldr	r3, [r3, #4]
 801890e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018912:	d11d      	bne.n	8018950 <SPI_EndRxTransaction+0xe4>
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	689b      	ldr	r3, [r3, #8]
 8018918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801891c:	d004      	beq.n	8018928 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	689b      	ldr	r3, [r3, #8]
 8018922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018926:	d113      	bne.n	8018950 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	9300      	str	r3, [sp, #0]
 801892c:	68bb      	ldr	r3, [r7, #8]
 801892e:	2200      	movs	r2, #0
 8018930:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8018934:	68f8      	ldr	r0, [r7, #12]
 8018936:	f7ff ff03 	bl	8018740 <SPI_WaitFifoStateUntilTimeout>
 801893a:	4603      	mov	r3, r0
 801893c:	2b00      	cmp	r3, #0
 801893e:	d007      	beq.n	8018950 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018944:	f043 0220 	orr.w	r2, r3, #32
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801894c:	2303      	movs	r3, #3
 801894e:	e000      	b.n	8018952 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8018950:	2300      	movs	r3, #0
}
 8018952:	4618      	mov	r0, r3
 8018954:	3718      	adds	r7, #24
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	2000011c 	.word	0x2000011c
 8018960:	165e9f81 	.word	0x165e9f81

08018964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b088      	sub	sp, #32
 8018968:	af02      	add	r7, sp, #8
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	9300      	str	r3, [sp, #0]
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	2200      	movs	r2, #0
 8018978:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801897c:	68f8      	ldr	r0, [r7, #12]
 801897e:	f7ff fedf 	bl	8018740 <SPI_WaitFifoStateUntilTimeout>
 8018982:	4603      	mov	r3, r0
 8018984:	2b00      	cmp	r3, #0
 8018986:	d007      	beq.n	8018998 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801898c:	f043 0220 	orr.w	r2, r3, #32
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8018994:	2303      	movs	r3, #3
 8018996:	e046      	b.n	8018a26 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8018998:	4b25      	ldr	r3, [pc, #148]	; (8018a30 <SPI_EndRxTxTransaction+0xcc>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	4a25      	ldr	r2, [pc, #148]	; (8018a34 <SPI_EndRxTxTransaction+0xd0>)
 801899e:	fba2 2303 	umull	r2, r3, r2, r3
 80189a2:	0d5b      	lsrs	r3, r3, #21
 80189a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80189a8:	fb02 f303 	mul.w	r3, r2, r3
 80189ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	685b      	ldr	r3, [r3, #4]
 80189b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80189b6:	d112      	bne.n	80189de <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	9300      	str	r3, [sp, #0]
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	2200      	movs	r2, #0
 80189c0:	2180      	movs	r1, #128	; 0x80
 80189c2:	68f8      	ldr	r0, [r7, #12]
 80189c4:	f7ff fe34 	bl	8018630 <SPI_WaitFlagStateUntilTimeout>
 80189c8:	4603      	mov	r3, r0
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d016      	beq.n	80189fc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80189d2:	f043 0220 	orr.w	r2, r3, #32
 80189d6:	68fb      	ldr	r3, [r7, #12]
 80189d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80189da:	2303      	movs	r3, #3
 80189dc:	e023      	b.n	8018a26 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d00a      	beq.n	80189fa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80189e4:	697b      	ldr	r3, [r7, #20]
 80189e6:	3b01      	subs	r3, #1
 80189e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	689b      	ldr	r3, [r3, #8]
 80189f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80189f4:	2b80      	cmp	r3, #128	; 0x80
 80189f6:	d0f2      	beq.n	80189de <SPI_EndRxTxTransaction+0x7a>
 80189f8:	e000      	b.n	80189fc <SPI_EndRxTxTransaction+0x98>
        break;
 80189fa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	9300      	str	r3, [sp, #0]
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	2200      	movs	r2, #0
 8018a04:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8018a08:	68f8      	ldr	r0, [r7, #12]
 8018a0a:	f7ff fe99 	bl	8018740 <SPI_WaitFifoStateUntilTimeout>
 8018a0e:	4603      	mov	r3, r0
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d007      	beq.n	8018a24 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018a18:	f043 0220 	orr.w	r2, r3, #32
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8018a20:	2303      	movs	r3, #3
 8018a22:	e000      	b.n	8018a26 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8018a24:	2300      	movs	r3, #0
}
 8018a26:	4618      	mov	r0, r3
 8018a28:	3718      	adds	r7, #24
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	bd80      	pop	{r7, pc}
 8018a2e:	bf00      	nop
 8018a30:	2000011c 	.word	0x2000011c
 8018a34:	165e9f81 	.word	0x165e9f81

08018a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b082      	sub	sp, #8
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	691b      	ldr	r3, [r3, #16]
 8018a46:	f003 0302 	and.w	r3, r3, #2
 8018a4a:	2b02      	cmp	r3, #2
 8018a4c:	d128      	bne.n	8018aa0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	68db      	ldr	r3, [r3, #12]
 8018a54:	f003 0302 	and.w	r3, r3, #2
 8018a58:	2b02      	cmp	r3, #2
 8018a5a:	d121      	bne.n	8018aa0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	f06f 0202 	mvn.w	r2, #2
 8018a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	2201      	movs	r2, #1
 8018a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	699b      	ldr	r3, [r3, #24]
 8018a72:	f003 0303 	and.w	r3, r3, #3
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d005      	beq.n	8018a86 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018a80:	6878      	ldr	r0, [r7, #4]
 8018a82:	4798      	blx	r3
 8018a84:	e009      	b.n	8018a9a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018a8c:	6878      	ldr	r0, [r7, #4]
 8018a8e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018a96:	6878      	ldr	r0, [r7, #4]
 8018a98:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	691b      	ldr	r3, [r3, #16]
 8018aa6:	f003 0304 	and.w	r3, r3, #4
 8018aaa:	2b04      	cmp	r3, #4
 8018aac:	d128      	bne.n	8018b00 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	68db      	ldr	r3, [r3, #12]
 8018ab4:	f003 0304 	and.w	r3, r3, #4
 8018ab8:	2b04      	cmp	r3, #4
 8018aba:	d121      	bne.n	8018b00 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	f06f 0204 	mvn.w	r2, #4
 8018ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	2202      	movs	r2, #2
 8018aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	699b      	ldr	r3, [r3, #24]
 8018ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d005      	beq.n	8018ae6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018ae0:	6878      	ldr	r0, [r7, #4]
 8018ae2:	4798      	blx	r3
 8018ae4:	e009      	b.n	8018afa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018aec:	6878      	ldr	r0, [r7, #4]
 8018aee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018af6:	6878      	ldr	r0, [r7, #4]
 8018af8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	2200      	movs	r2, #0
 8018afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	691b      	ldr	r3, [r3, #16]
 8018b06:	f003 0308 	and.w	r3, r3, #8
 8018b0a:	2b08      	cmp	r3, #8
 8018b0c:	d128      	bne.n	8018b60 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	68db      	ldr	r3, [r3, #12]
 8018b14:	f003 0308 	and.w	r3, r3, #8
 8018b18:	2b08      	cmp	r3, #8
 8018b1a:	d121      	bne.n	8018b60 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	f06f 0208 	mvn.w	r2, #8
 8018b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	2204      	movs	r2, #4
 8018b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	69db      	ldr	r3, [r3, #28]
 8018b32:	f003 0303 	and.w	r3, r3, #3
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d005      	beq.n	8018b46 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018b40:	6878      	ldr	r0, [r7, #4]
 8018b42:	4798      	blx	r3
 8018b44:	e009      	b.n	8018b5a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018b4c:	6878      	ldr	r0, [r7, #4]
 8018b4e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018b56:	6878      	ldr	r0, [r7, #4]
 8018b58:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	691b      	ldr	r3, [r3, #16]
 8018b66:	f003 0310 	and.w	r3, r3, #16
 8018b6a:	2b10      	cmp	r3, #16
 8018b6c:	d128      	bne.n	8018bc0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	68db      	ldr	r3, [r3, #12]
 8018b74:	f003 0310 	and.w	r3, r3, #16
 8018b78:	2b10      	cmp	r3, #16
 8018b7a:	d121      	bne.n	8018bc0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	f06f 0210 	mvn.w	r2, #16
 8018b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	2208      	movs	r2, #8
 8018b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	69db      	ldr	r3, [r3, #28]
 8018b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d005      	beq.n	8018ba6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018ba0:	6878      	ldr	r0, [r7, #4]
 8018ba2:	4798      	blx	r3
 8018ba4:	e009      	b.n	8018bba <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018bac:	6878      	ldr	r0, [r7, #4]
 8018bae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018bb6:	6878      	ldr	r0, [r7, #4]
 8018bb8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	691b      	ldr	r3, [r3, #16]
 8018bc6:	f003 0301 	and.w	r3, r3, #1
 8018bca:	2b01      	cmp	r3, #1
 8018bcc:	d110      	bne.n	8018bf0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	68db      	ldr	r3, [r3, #12]
 8018bd4:	f003 0301 	and.w	r3, r3, #1
 8018bd8:	2b01      	cmp	r3, #1
 8018bda:	d109      	bne.n	8018bf0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	f06f 0201 	mvn.w	r2, #1
 8018be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018bec:	6878      	ldr	r0, [r7, #4]
 8018bee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	691b      	ldr	r3, [r3, #16]
 8018bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018bfa:	2b80      	cmp	r3, #128	; 0x80
 8018bfc:	d110      	bne.n	8018c20 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	68db      	ldr	r3, [r3, #12]
 8018c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c08:	2b80      	cmp	r3, #128	; 0x80
 8018c0a:	d109      	bne.n	8018c20 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	691b      	ldr	r3, [r3, #16]
 8018c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c2e:	d110      	bne.n	8018c52 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	68db      	ldr	r3, [r3, #12]
 8018c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c3a:	2b80      	cmp	r3, #128	; 0x80
 8018c3c:	d109      	bne.n	8018c52 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018c4e:	6878      	ldr	r0, [r7, #4]
 8018c50:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	691b      	ldr	r3, [r3, #16]
 8018c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c5c:	2b40      	cmp	r3, #64	; 0x40
 8018c5e:	d110      	bne.n	8018c82 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	68db      	ldr	r3, [r3, #12]
 8018c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c6a:	2b40      	cmp	r3, #64	; 0x40
 8018c6c:	d109      	bne.n	8018c82 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018c7e:	6878      	ldr	r0, [r7, #4]
 8018c80:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	691b      	ldr	r3, [r3, #16]
 8018c88:	f003 0320 	and.w	r3, r3, #32
 8018c8c:	2b20      	cmp	r3, #32
 8018c8e:	d110      	bne.n	8018cb2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	68db      	ldr	r3, [r3, #12]
 8018c96:	f003 0320 	and.w	r3, r3, #32
 8018c9a:	2b20      	cmp	r3, #32
 8018c9c:	d109      	bne.n	8018cb2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	f06f 0220 	mvn.w	r2, #32
 8018ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018cae:	6878      	ldr	r0, [r7, #4]
 8018cb0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018cb2:	bf00      	nop
 8018cb4:	3708      	adds	r7, #8
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
	...

08018cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d101      	bne.n	8018cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018cca:	2301      	movs	r3, #1
 8018ccc:	e04e      	b.n	8018d6c <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d114      	bne.n	8018d00 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	2200      	movs	r2, #0
 8018cda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8018cde:	6878      	ldr	r0, [r7, #4]
 8018ce0:	f000 fc1c 	bl	801951c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d103      	bne.n	8018cf6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	4a20      	ldr	r2, [pc, #128]	; (8018d74 <HAL_UART_Init+0xb8>)
 8018cf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018cfc:	6878      	ldr	r0, [r7, #4]
 8018cfe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	2224      	movs	r2, #36	; 0x24
 8018d04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	681a      	ldr	r2, [r3, #0]
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	f022 0201 	bic.w	r2, r2, #1
 8018d14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f000 fc46 	bl	80195a8 <UART_SetConfig>
 8018d1c:	4603      	mov	r3, r0
 8018d1e:	2b01      	cmp	r3, #1
 8018d20:	d101      	bne.n	8018d26 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 8018d22:	2301      	movs	r3, #1
 8018d24:	e022      	b.n	8018d6c <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d002      	beq.n	8018d34 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 8018d2e:	6878      	ldr	r0, [r7, #4]
 8018d30:	f000 fe9e 	bl	8019a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	685a      	ldr	r2, [r3, #4]
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	689a      	ldr	r2, [r3, #8]
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	681a      	ldr	r2, [r3, #0]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	f042 0201 	orr.w	r2, r2, #1
 8018d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018d64:	6878      	ldr	r0, [r7, #4]
 8018d66:	f000 ff25 	bl	8019bb4 <UART_CheckIdleState>
 8018d6a:	4603      	mov	r3, r0
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3708      	adds	r7, #8
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd80      	pop	{r7, pc}
 8018d74:	080125e1 	.word	0x080125e1

08018d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b08a      	sub	sp, #40	; 0x28
 8018d7c:	af02      	add	r7, sp, #8
 8018d7e:	60f8      	str	r0, [r7, #12]
 8018d80:	60b9      	str	r1, [r7, #8]
 8018d82:	603b      	str	r3, [r7, #0]
 8018d84:	4613      	mov	r3, r2
 8018d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018d8c:	2b20      	cmp	r3, #32
 8018d8e:	d171      	bne.n	8018e74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d002      	beq.n	8018d9c <HAL_UART_Transmit+0x24>
 8018d96:	88fb      	ldrh	r3, [r7, #6]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d101      	bne.n	8018da0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	e06a      	b.n	8018e76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	2200      	movs	r2, #0
 8018da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	2221      	movs	r2, #33	; 0x21
 8018dac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018dae:	f7fa fa1b 	bl	80131e8 <HAL_GetTick>
 8018db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	88fa      	ldrh	r2, [r7, #6]
 8018db8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	88fa      	ldrh	r2, [r7, #6]
 8018dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	689b      	ldr	r3, [r3, #8]
 8018dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018dcc:	d108      	bne.n	8018de0 <HAL_UART_Transmit+0x68>
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	691b      	ldr	r3, [r3, #16]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d104      	bne.n	8018de0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8018dd6:	2300      	movs	r3, #0
 8018dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8018dda:	68bb      	ldr	r3, [r7, #8]
 8018ddc:	61bb      	str	r3, [r7, #24]
 8018dde:	e003      	b.n	8018de8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8018de0:	68bb      	ldr	r3, [r7, #8]
 8018de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018de4:	2300      	movs	r3, #0
 8018de6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8018de8:	e02c      	b.n	8018e44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8018dea:	683b      	ldr	r3, [r7, #0]
 8018dec:	9300      	str	r3, [sp, #0]
 8018dee:	697b      	ldr	r3, [r7, #20]
 8018df0:	2200      	movs	r2, #0
 8018df2:	2180      	movs	r1, #128	; 0x80
 8018df4:	68f8      	ldr	r0, [r7, #12]
 8018df6:	f000 ff2a 	bl	8019c4e <UART_WaitOnFlagUntilTimeout>
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d001      	beq.n	8018e04 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8018e00:	2303      	movs	r3, #3
 8018e02:	e038      	b.n	8018e76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8018e04:	69fb      	ldr	r3, [r7, #28]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d10b      	bne.n	8018e22 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018e0a:	69bb      	ldr	r3, [r7, #24]
 8018e0c:	881b      	ldrh	r3, [r3, #0]
 8018e0e:	461a      	mov	r2, r3
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018e18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8018e1a:	69bb      	ldr	r3, [r7, #24]
 8018e1c:	3302      	adds	r3, #2
 8018e1e:	61bb      	str	r3, [r7, #24]
 8018e20:	e007      	b.n	8018e32 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8018e22:	69fb      	ldr	r3, [r7, #28]
 8018e24:	781a      	ldrb	r2, [r3, #0]
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8018e2c:	69fb      	ldr	r3, [r7, #28]
 8018e2e:	3301      	adds	r3, #1
 8018e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8018e38:	b29b      	uxth	r3, r3
 8018e3a:	3b01      	subs	r3, #1
 8018e3c:	b29a      	uxth	r2, r3
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8018e4a:	b29b      	uxth	r3, r3
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d1cc      	bne.n	8018dea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018e50:	683b      	ldr	r3, [r7, #0]
 8018e52:	9300      	str	r3, [sp, #0]
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	2200      	movs	r2, #0
 8018e58:	2140      	movs	r1, #64	; 0x40
 8018e5a:	68f8      	ldr	r0, [r7, #12]
 8018e5c:	f000 fef7 	bl	8019c4e <UART_WaitOnFlagUntilTimeout>
 8018e60:	4603      	mov	r3, r0
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d001      	beq.n	8018e6a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8018e66:	2303      	movs	r3, #3
 8018e68:	e005      	b.n	8018e76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	2220      	movs	r2, #32
 8018e6e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8018e70:	2300      	movs	r3, #0
 8018e72:	e000      	b.n	8018e76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8018e74:	2302      	movs	r3, #2
  }
}
 8018e76:	4618      	mov	r0, r3
 8018e78:	3720      	adds	r7, #32
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	bd80      	pop	{r7, pc}
	...

08018e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b0ba      	sub	sp, #232	; 0xe8
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	69db      	ldr	r3, [r3, #28]
 8018e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	689b      	ldr	r3, [r3, #8]
 8018ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8018eaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8018eae:	4013      	ands	r3, r2
 8018eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8018eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d115      	bne.n	8018ee8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8018ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018ec0:	f003 0320 	and.w	r3, r3, #32
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d00f      	beq.n	8018ee8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018ecc:	f003 0320 	and.w	r3, r3, #32
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d009      	beq.n	8018ee8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	f000 82b8 	beq.w	801944e <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018ee2:	6878      	ldr	r0, [r7, #4]
 8018ee4:	4798      	blx	r3
      }
      return;
 8018ee6:	e2b2      	b.n	801944e <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	f000 811d 	beq.w	801912c <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8018ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018ef6:	f003 0301 	and.w	r3, r3, #1
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d106      	bne.n	8018f0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8018efe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8018f02:	4b88      	ldr	r3, [pc, #544]	; (8019124 <HAL_UART_IRQHandler+0x2a4>)
 8018f04:	4013      	ands	r3, r2
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	f000 8110 	beq.w	801912c <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018f10:	f003 0301 	and.w	r3, r3, #1
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d011      	beq.n	8018f3c <HAL_UART_IRQHandler+0xbc>
 8018f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d00b      	beq.n	8018f3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	2201      	movs	r2, #1
 8018f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018f32:	f043 0201 	orr.w	r2, r3, #1
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018f40:	f003 0302 	and.w	r3, r3, #2
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d011      	beq.n	8018f6c <HAL_UART_IRQHandler+0xec>
 8018f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018f4c:	f003 0301 	and.w	r3, r3, #1
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d00b      	beq.n	8018f6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	2202      	movs	r2, #2
 8018f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018f62:	f043 0204 	orr.w	r2, r3, #4
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018f70:	f003 0304 	and.w	r3, r3, #4
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d011      	beq.n	8018f9c <HAL_UART_IRQHandler+0x11c>
 8018f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018f7c:	f003 0301 	and.w	r3, r3, #1
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d00b      	beq.n	8018f9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	2204      	movs	r2, #4
 8018f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018f92:	f043 0202 	orr.w	r2, r3, #2
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018fa0:	f003 0308 	and.w	r3, r3, #8
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d017      	beq.n	8018fd8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8018fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018fac:	f003 0320 	and.w	r3, r3, #32
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d105      	bne.n	8018fc0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8018fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018fb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d00b      	beq.n	8018fd8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	2208      	movs	r2, #8
 8018fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018fce:	f043 0208 	orr.w	r2, r3, #8
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d012      	beq.n	801900a <HAL_UART_IRQHandler+0x18a>
 8018fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d00c      	beq.n	801900a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019000:	f043 0220 	orr.w	r2, r3, #32
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019010:	2b00      	cmp	r3, #0
 8019012:	f000 821e 	beq.w	8019452 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8019016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801901a:	f003 0320 	and.w	r3, r3, #32
 801901e:	2b00      	cmp	r3, #0
 8019020:	d00d      	beq.n	801903e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019026:	f003 0320 	and.w	r3, r3, #32
 801902a:	2b00      	cmp	r3, #0
 801902c:	d007      	beq.n	801903e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019032:	2b00      	cmp	r3, #0
 8019034:	d003      	beq.n	801903e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801903a:	6878      	ldr	r0, [r7, #4]
 801903c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	689b      	ldr	r3, [r3, #8]
 801904e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019052:	2b40      	cmp	r3, #64	; 0x40
 8019054:	d005      	beq.n	8019062 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8019056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801905a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801905e:	2b00      	cmp	r3, #0
 8019060:	d053      	beq.n	801910a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019062:	6878      	ldr	r0, [r7, #4]
 8019064:	f000 ff80 	bl	8019f68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	689b      	ldr	r3, [r3, #8]
 801906e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019072:	2b40      	cmp	r3, #64	; 0x40
 8019074:	d143      	bne.n	80190fe <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	3308      	adds	r3, #8
 801907c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019084:	e853 3f00 	ldrex	r3, [r3]
 8019088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801908c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	3308      	adds	r3, #8
 801909e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80190a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80190a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80190ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80190b2:	e841 2300 	strex	r3, r2, [r1]
 80190b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80190ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d1d9      	bne.n	8019076 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d013      	beq.n	80190f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80190ce:	4a16      	ldr	r2, [pc, #88]	; (8019128 <HAL_UART_IRQHandler+0x2a8>)
 80190d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80190d6:	4618      	mov	r0, r3
 80190d8:	f7fb f98a 	bl	80143f0 <HAL_DMA_Abort_IT>
 80190dc:	4603      	mov	r3, r0
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d01d      	beq.n	801911e <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80190e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190e8:	687a      	ldr	r2, [r7, #4]
 80190ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80190ec:	4610      	mov	r0, r2
 80190ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80190f0:	e015      	b.n	801911e <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80190fc:	e00f      	b.n	801911e <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019104:	6878      	ldr	r0, [r7, #4]
 8019106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019108:	e009      	b.n	801911e <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019110:	6878      	ldr	r0, [r7, #4]
 8019112:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2200      	movs	r2, #0
 8019118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801911c:	e199      	b.n	8019452 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801911e:	bf00      	nop
    return;
 8019120:	e197      	b.n	8019452 <HAL_UART_IRQHandler+0x5d2>
 8019122:	bf00      	nop
 8019124:	04000120 	.word	0x04000120
 8019128:	0801a031 	.word	0x0801a031

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019130:	2b01      	cmp	r3, #1
 8019132:	f040 8150 	bne.w	80193d6 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801913a:	f003 0310 	and.w	r3, r3, #16
 801913e:	2b00      	cmp	r3, #0
 8019140:	f000 8149 	beq.w	80193d6 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019148:	f003 0310 	and.w	r3, r3, #16
 801914c:	2b00      	cmp	r3, #0
 801914e:	f000 8142 	beq.w	80193d6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	2210      	movs	r2, #16
 8019158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	689b      	ldr	r3, [r3, #8]
 8019160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019164:	2b40      	cmp	r3, #64	; 0x40
 8019166:	f040 80b8 	bne.w	80192da <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8019176:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801917a:	2b00      	cmp	r3, #0
 801917c:	f000 816b 	beq.w	8019456 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8019186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801918a:	429a      	cmp	r2, r3
 801918c:	f080 8163 	bcs.w	8019456 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8019196:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801919e:	69db      	ldr	r3, [r3, #28]
 80191a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80191a4:	f000 8086 	beq.w	80192b4 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80191b4:	e853 3f00 	ldrex	r3, [r3]
 80191b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80191bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80191c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80191c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	461a      	mov	r2, r3
 80191ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80191d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80191d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80191da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80191de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80191e2:	e841 2300 	strex	r3, r2, [r1]
 80191e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80191ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d1da      	bne.n	80191a8 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	3308      	adds	r3, #8
 80191f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80191fc:	e853 3f00 	ldrex	r3, [r3]
 8019200:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8019202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019204:	f023 0301 	bic.w	r3, r3, #1
 8019208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	3308      	adds	r3, #8
 8019212:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8019216:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801921a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801921c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801921e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8019222:	e841 2300 	strex	r3, r2, [r1]
 8019226:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8019228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801922a:	2b00      	cmp	r3, #0
 801922c:	d1e1      	bne.n	80191f2 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	3308      	adds	r3, #8
 8019234:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019238:	e853 3f00 	ldrex	r3, [r3]
 801923c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801923e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	3308      	adds	r3, #8
 801924e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8019252:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019256:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8019258:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801925a:	e841 2300 	strex	r3, r2, [r1]
 801925e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8019260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019262:	2b00      	cmp	r3, #0
 8019264:	d1e3      	bne.n	801922e <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	2220      	movs	r2, #32
 801926a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	2200      	movs	r2, #0
 8019272:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801927a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801927c:	e853 3f00 	ldrex	r3, [r3]
 8019280:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8019282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019284:	f023 0310 	bic.w	r3, r3, #16
 8019288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	461a      	mov	r2, r3
 8019292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019296:	65bb      	str	r3, [r7, #88]	; 0x58
 8019298:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801929a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801929c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801929e:	e841 2300 	strex	r3, r2, [r1]
 80192a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80192a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d1e4      	bne.n	8019274 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80192ae:	4618      	mov	r0, r3
 80192b0:	f7fb f82e 	bl	8014310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	2202      	movs	r2, #2
 80192b8:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80192c0:	687a      	ldr	r2, [r7, #4]
 80192c2:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 80192c6:	687a      	ldr	r2, [r7, #4]
 80192c8:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 80192cc:	b292      	uxth	r2, r2
 80192ce:	1a8a      	subs	r2, r1, r2
 80192d0:	b292      	uxth	r2, r2
 80192d2:	4611      	mov	r1, r2
 80192d4:	6878      	ldr	r0, [r7, #4]
 80192d6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80192d8:	e0bd      	b.n	8019456 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	1ad3      	subs	r3, r2, r3
 80192ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	f000 80af 	beq.w	801945a <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 80192fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8019300:	2b00      	cmp	r3, #0
 8019302:	f000 80aa 	beq.w	801945a <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801930c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801930e:	e853 3f00 	ldrex	r3, [r3]
 8019312:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8019314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019316:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801931a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	461a      	mov	r2, r3
 8019324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019328:	647b      	str	r3, [r7, #68]	; 0x44
 801932a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801932c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801932e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019330:	e841 2300 	strex	r3, r2, [r1]
 8019334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8019336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019338:	2b00      	cmp	r3, #0
 801933a:	d1e4      	bne.n	8019306 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	3308      	adds	r3, #8
 8019342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019346:	e853 3f00 	ldrex	r3, [r3]
 801934a:	623b      	str	r3, [r7, #32]
   return(result);
 801934c:	6a3b      	ldr	r3, [r7, #32]
 801934e:	f023 0301 	bic.w	r3, r3, #1
 8019352:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	3308      	adds	r3, #8
 801935c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8019360:	633a      	str	r2, [r7, #48]	; 0x30
 8019362:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019368:	e841 2300 	strex	r3, r2, [r1]
 801936c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019370:	2b00      	cmp	r3, #0
 8019372:	d1e3      	bne.n	801933c <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2220      	movs	r2, #32
 8019378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	2200      	movs	r2, #0
 8019380:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2200      	movs	r2, #0
 8019386:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801938e:	693b      	ldr	r3, [r7, #16]
 8019390:	e853 3f00 	ldrex	r3, [r3]
 8019394:	60fb      	str	r3, [r7, #12]
   return(result);
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	f023 0310 	bic.w	r3, r3, #16
 801939c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	461a      	mov	r2, r3
 80193a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80193aa:	61fb      	str	r3, [r7, #28]
 80193ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193ae:	69b9      	ldr	r1, [r7, #24]
 80193b0:	69fa      	ldr	r2, [r7, #28]
 80193b2:	e841 2300 	strex	r3, r2, [r1]
 80193b6:	617b      	str	r3, [r7, #20]
   return(result);
 80193b8:	697b      	ldr	r3, [r7, #20]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d1e4      	bne.n	8019388 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	2202      	movs	r2, #2
 80193c2:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80193ca:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80193ce:	4611      	mov	r1, r2
 80193d0:	6878      	ldr	r0, [r7, #4]
 80193d2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80193d4:	e041      	b.n	801945a <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80193d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80193da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d010      	beq.n	8019404 <HAL_UART_IRQHandler+0x584>
 80193e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80193e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d00a      	beq.n	8019404 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80193f6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80193fe:	6878      	ldr	r0, [r7, #4]
 8019400:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019402:	e02d      	b.n	8019460 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8019404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801940c:	2b00      	cmp	r3, #0
 801940e:	d00e      	beq.n	801942e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8019410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019418:	2b00      	cmp	r3, #0
 801941a:	d008      	beq.n	801942e <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019420:	2b00      	cmp	r3, #0
 8019422:	d01c      	beq.n	801945e <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019428:	6878      	ldr	r0, [r7, #4]
 801942a:	4798      	blx	r3
    }
    return;
 801942c:	e017      	b.n	801945e <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801942e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019436:	2b00      	cmp	r3, #0
 8019438:	d012      	beq.n	8019460 <HAL_UART_IRQHandler+0x5e0>
 801943a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019442:	2b00      	cmp	r3, #0
 8019444:	d00c      	beq.n	8019460 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8019446:	6878      	ldr	r0, [r7, #4]
 8019448:	f000 fe0a 	bl	801a060 <UART_EndTransmit_IT>
    return;
 801944c:	e008      	b.n	8019460 <HAL_UART_IRQHandler+0x5e0>
      return;
 801944e:	bf00      	nop
 8019450:	e006      	b.n	8019460 <HAL_UART_IRQHandler+0x5e0>
    return;
 8019452:	bf00      	nop
 8019454:	e004      	b.n	8019460 <HAL_UART_IRQHandler+0x5e0>
      return;
 8019456:	bf00      	nop
 8019458:	e002      	b.n	8019460 <HAL_UART_IRQHandler+0x5e0>
      return;
 801945a:	bf00      	nop
 801945c:	e000      	b.n	8019460 <HAL_UART_IRQHandler+0x5e0>
    return;
 801945e:	bf00      	nop
  }

}
 8019460:	37e8      	adds	r7, #232	; 0xe8
 8019462:	46bd      	mov	sp, r7
 8019464:	bd80      	pop	{r7, pc}
 8019466:	bf00      	nop

08019468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019468:	b480      	push	{r7}
 801946a:	b083      	sub	sp, #12
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8019470:	bf00      	nop
 8019472:	370c      	adds	r7, #12
 8019474:	46bd      	mov	sp, r7
 8019476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947a:	4770      	bx	lr

0801947c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801947c:	b480      	push	{r7}
 801947e:	b083      	sub	sp, #12
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8019484:	bf00      	nop
 8019486:	370c      	adds	r7, #12
 8019488:	46bd      	mov	sp, r7
 801948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948e:	4770      	bx	lr

08019490 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019490:	b480      	push	{r7}
 8019492:	b083      	sub	sp, #12
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8019498:	bf00      	nop
 801949a:	370c      	adds	r7, #12
 801949c:	46bd      	mov	sp, r7
 801949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a2:	4770      	bx	lr

080194a4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80194a4:	b480      	push	{r7}
 80194a6:	b083      	sub	sp, #12
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80194ac:	bf00      	nop
 80194ae:	370c      	adds	r7, #12
 80194b0:	46bd      	mov	sp, r7
 80194b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b6:	4770      	bx	lr

080194b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80194b8:	b480      	push	{r7}
 80194ba:	b083      	sub	sp, #12
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80194c0:	bf00      	nop
 80194c2:	370c      	adds	r7, #12
 80194c4:	46bd      	mov	sp, r7
 80194c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ca:	4770      	bx	lr

080194cc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80194cc:	b480      	push	{r7}
 80194ce:	b083      	sub	sp, #12
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80194d4:	bf00      	nop
 80194d6:	370c      	adds	r7, #12
 80194d8:	46bd      	mov	sp, r7
 80194da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194de:	4770      	bx	lr

080194e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80194e0:	b480      	push	{r7}
 80194e2:	b083      	sub	sp, #12
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80194e8:	bf00      	nop
 80194ea:	370c      	adds	r7, #12
 80194ec:	46bd      	mov	sp, r7
 80194ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f2:	4770      	bx	lr

080194f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80194f4:	b480      	push	{r7}
 80194f6:	b083      	sub	sp, #12
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80194fc:	bf00      	nop
 80194fe:	370c      	adds	r7, #12
 8019500:	46bd      	mov	sp, r7
 8019502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019506:	4770      	bx	lr

08019508 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8019508:	b480      	push	{r7}
 801950a:	b083      	sub	sp, #12
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019510:	bf00      	nop
 8019512:	370c      	adds	r7, #12
 8019514:	46bd      	mov	sp, r7
 8019516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951a:	4770      	bx	lr

0801951c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801951c:	b480      	push	{r7}
 801951e:	b083      	sub	sp, #12
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	4a16      	ldr	r2, [pc, #88]	; (8019580 <UART_InitCallbacksToDefault+0x64>)
 8019528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	4a15      	ldr	r2, [pc, #84]	; (8019584 <UART_InitCallbacksToDefault+0x68>)
 8019530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	4a14      	ldr	r2, [pc, #80]	; (8019588 <UART_InitCallbacksToDefault+0x6c>)
 8019538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	4a13      	ldr	r2, [pc, #76]	; (801958c <UART_InitCallbacksToDefault+0x70>)
 8019540:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	4a12      	ldr	r2, [pc, #72]	; (8019590 <UART_InitCallbacksToDefault+0x74>)
 8019548:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	4a11      	ldr	r2, [pc, #68]	; (8019594 <UART_InitCallbacksToDefault+0x78>)
 8019550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	4a10      	ldr	r2, [pc, #64]	; (8019598 <UART_InitCallbacksToDefault+0x7c>)
 8019558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	4a0f      	ldr	r2, [pc, #60]	; (801959c <UART_InitCallbacksToDefault+0x80>)
 8019560:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	4a0e      	ldr	r2, [pc, #56]	; (80195a0 <UART_InitCallbacksToDefault+0x84>)
 8019568:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	4a0d      	ldr	r2, [pc, #52]	; (80195a4 <UART_InitCallbacksToDefault+0x88>)
 8019570:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 8019574:	bf00      	nop
 8019576:	370c      	adds	r7, #12
 8019578:	46bd      	mov	sp, r7
 801957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801957e:	4770      	bx	lr
 8019580:	0801947d 	.word	0x0801947d
 8019584:	08019469 	.word	0x08019469
 8019588:	080194a5 	.word	0x080194a5
 801958c:	08019491 	.word	0x08019491
 8019590:	080194b9 	.word	0x080194b9
 8019594:	080194cd 	.word	0x080194cd
 8019598:	080194e1 	.word	0x080194e1
 801959c:	080194f5 	.word	0x080194f5
 80195a0:	08019509 	.word	0x08019509
 80195a4:	08012945 	.word	0x08012945

080195a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b088      	sub	sp, #32
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80195b0:	2300      	movs	r3, #0
 80195b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	689a      	ldr	r2, [r3, #8]
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	691b      	ldr	r3, [r3, #16]
 80195bc:	431a      	orrs	r2, r3
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	695b      	ldr	r3, [r3, #20]
 80195c2:	431a      	orrs	r2, r3
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	69db      	ldr	r3, [r3, #28]
 80195c8:	4313      	orrs	r3, r2
 80195ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	681a      	ldr	r2, [r3, #0]
 80195d2:	4ba6      	ldr	r3, [pc, #664]	; (801986c <UART_SetConfig+0x2c4>)
 80195d4:	4013      	ands	r3, r2
 80195d6:	687a      	ldr	r2, [r7, #4]
 80195d8:	6812      	ldr	r2, [r2, #0]
 80195da:	6979      	ldr	r1, [r7, #20]
 80195dc:	430b      	orrs	r3, r1
 80195de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	685b      	ldr	r3, [r3, #4]
 80195e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	68da      	ldr	r2, [r3, #12]
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	430a      	orrs	r2, r1
 80195f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	699b      	ldr	r3, [r3, #24]
 80195fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	6a1b      	ldr	r3, [r3, #32]
 8019600:	697a      	ldr	r2, [r7, #20]
 8019602:	4313      	orrs	r3, r2
 8019604:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	689b      	ldr	r3, [r3, #8]
 801960c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	697a      	ldr	r2, [r7, #20]
 8019616:	430a      	orrs	r2, r1
 8019618:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	4a94      	ldr	r2, [pc, #592]	; (8019870 <UART_SetConfig+0x2c8>)
 8019620:	4293      	cmp	r3, r2
 8019622:	d120      	bne.n	8019666 <UART_SetConfig+0xbe>
 8019624:	4b93      	ldr	r3, [pc, #588]	; (8019874 <UART_SetConfig+0x2cc>)
 8019626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801962a:	f003 0303 	and.w	r3, r3, #3
 801962e:	2b03      	cmp	r3, #3
 8019630:	d816      	bhi.n	8019660 <UART_SetConfig+0xb8>
 8019632:	a201      	add	r2, pc, #4	; (adr r2, 8019638 <UART_SetConfig+0x90>)
 8019634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019638:	08019649 	.word	0x08019649
 801963c:	08019655 	.word	0x08019655
 8019640:	0801964f 	.word	0x0801964f
 8019644:	0801965b 	.word	0x0801965b
 8019648:	2301      	movs	r3, #1
 801964a:	77fb      	strb	r3, [r7, #31]
 801964c:	e150      	b.n	80198f0 <UART_SetConfig+0x348>
 801964e:	2302      	movs	r3, #2
 8019650:	77fb      	strb	r3, [r7, #31]
 8019652:	e14d      	b.n	80198f0 <UART_SetConfig+0x348>
 8019654:	2304      	movs	r3, #4
 8019656:	77fb      	strb	r3, [r7, #31]
 8019658:	e14a      	b.n	80198f0 <UART_SetConfig+0x348>
 801965a:	2308      	movs	r3, #8
 801965c:	77fb      	strb	r3, [r7, #31]
 801965e:	e147      	b.n	80198f0 <UART_SetConfig+0x348>
 8019660:	2310      	movs	r3, #16
 8019662:	77fb      	strb	r3, [r7, #31]
 8019664:	e144      	b.n	80198f0 <UART_SetConfig+0x348>
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	4a83      	ldr	r2, [pc, #524]	; (8019878 <UART_SetConfig+0x2d0>)
 801966c:	4293      	cmp	r3, r2
 801966e:	d132      	bne.n	80196d6 <UART_SetConfig+0x12e>
 8019670:	4b80      	ldr	r3, [pc, #512]	; (8019874 <UART_SetConfig+0x2cc>)
 8019672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019676:	f003 030c 	and.w	r3, r3, #12
 801967a:	2b0c      	cmp	r3, #12
 801967c:	d828      	bhi.n	80196d0 <UART_SetConfig+0x128>
 801967e:	a201      	add	r2, pc, #4	; (adr r2, 8019684 <UART_SetConfig+0xdc>)
 8019680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019684:	080196b9 	.word	0x080196b9
 8019688:	080196d1 	.word	0x080196d1
 801968c:	080196d1 	.word	0x080196d1
 8019690:	080196d1 	.word	0x080196d1
 8019694:	080196c5 	.word	0x080196c5
 8019698:	080196d1 	.word	0x080196d1
 801969c:	080196d1 	.word	0x080196d1
 80196a0:	080196d1 	.word	0x080196d1
 80196a4:	080196bf 	.word	0x080196bf
 80196a8:	080196d1 	.word	0x080196d1
 80196ac:	080196d1 	.word	0x080196d1
 80196b0:	080196d1 	.word	0x080196d1
 80196b4:	080196cb 	.word	0x080196cb
 80196b8:	2300      	movs	r3, #0
 80196ba:	77fb      	strb	r3, [r7, #31]
 80196bc:	e118      	b.n	80198f0 <UART_SetConfig+0x348>
 80196be:	2302      	movs	r3, #2
 80196c0:	77fb      	strb	r3, [r7, #31]
 80196c2:	e115      	b.n	80198f0 <UART_SetConfig+0x348>
 80196c4:	2304      	movs	r3, #4
 80196c6:	77fb      	strb	r3, [r7, #31]
 80196c8:	e112      	b.n	80198f0 <UART_SetConfig+0x348>
 80196ca:	2308      	movs	r3, #8
 80196cc:	77fb      	strb	r3, [r7, #31]
 80196ce:	e10f      	b.n	80198f0 <UART_SetConfig+0x348>
 80196d0:	2310      	movs	r3, #16
 80196d2:	77fb      	strb	r3, [r7, #31]
 80196d4:	e10c      	b.n	80198f0 <UART_SetConfig+0x348>
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	4a68      	ldr	r2, [pc, #416]	; (801987c <UART_SetConfig+0x2d4>)
 80196dc:	4293      	cmp	r3, r2
 80196de:	d120      	bne.n	8019722 <UART_SetConfig+0x17a>
 80196e0:	4b64      	ldr	r3, [pc, #400]	; (8019874 <UART_SetConfig+0x2cc>)
 80196e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80196e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80196ea:	2b30      	cmp	r3, #48	; 0x30
 80196ec:	d013      	beq.n	8019716 <UART_SetConfig+0x16e>
 80196ee:	2b30      	cmp	r3, #48	; 0x30
 80196f0:	d814      	bhi.n	801971c <UART_SetConfig+0x174>
 80196f2:	2b20      	cmp	r3, #32
 80196f4:	d009      	beq.n	801970a <UART_SetConfig+0x162>
 80196f6:	2b20      	cmp	r3, #32
 80196f8:	d810      	bhi.n	801971c <UART_SetConfig+0x174>
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d002      	beq.n	8019704 <UART_SetConfig+0x15c>
 80196fe:	2b10      	cmp	r3, #16
 8019700:	d006      	beq.n	8019710 <UART_SetConfig+0x168>
 8019702:	e00b      	b.n	801971c <UART_SetConfig+0x174>
 8019704:	2300      	movs	r3, #0
 8019706:	77fb      	strb	r3, [r7, #31]
 8019708:	e0f2      	b.n	80198f0 <UART_SetConfig+0x348>
 801970a:	2302      	movs	r3, #2
 801970c:	77fb      	strb	r3, [r7, #31]
 801970e:	e0ef      	b.n	80198f0 <UART_SetConfig+0x348>
 8019710:	2304      	movs	r3, #4
 8019712:	77fb      	strb	r3, [r7, #31]
 8019714:	e0ec      	b.n	80198f0 <UART_SetConfig+0x348>
 8019716:	2308      	movs	r3, #8
 8019718:	77fb      	strb	r3, [r7, #31]
 801971a:	e0e9      	b.n	80198f0 <UART_SetConfig+0x348>
 801971c:	2310      	movs	r3, #16
 801971e:	77fb      	strb	r3, [r7, #31]
 8019720:	e0e6      	b.n	80198f0 <UART_SetConfig+0x348>
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	4a56      	ldr	r2, [pc, #344]	; (8019880 <UART_SetConfig+0x2d8>)
 8019728:	4293      	cmp	r3, r2
 801972a:	d120      	bne.n	801976e <UART_SetConfig+0x1c6>
 801972c:	4b51      	ldr	r3, [pc, #324]	; (8019874 <UART_SetConfig+0x2cc>)
 801972e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019736:	2bc0      	cmp	r3, #192	; 0xc0
 8019738:	d013      	beq.n	8019762 <UART_SetConfig+0x1ba>
 801973a:	2bc0      	cmp	r3, #192	; 0xc0
 801973c:	d814      	bhi.n	8019768 <UART_SetConfig+0x1c0>
 801973e:	2b80      	cmp	r3, #128	; 0x80
 8019740:	d009      	beq.n	8019756 <UART_SetConfig+0x1ae>
 8019742:	2b80      	cmp	r3, #128	; 0x80
 8019744:	d810      	bhi.n	8019768 <UART_SetConfig+0x1c0>
 8019746:	2b00      	cmp	r3, #0
 8019748:	d002      	beq.n	8019750 <UART_SetConfig+0x1a8>
 801974a:	2b40      	cmp	r3, #64	; 0x40
 801974c:	d006      	beq.n	801975c <UART_SetConfig+0x1b4>
 801974e:	e00b      	b.n	8019768 <UART_SetConfig+0x1c0>
 8019750:	2300      	movs	r3, #0
 8019752:	77fb      	strb	r3, [r7, #31]
 8019754:	e0cc      	b.n	80198f0 <UART_SetConfig+0x348>
 8019756:	2302      	movs	r3, #2
 8019758:	77fb      	strb	r3, [r7, #31]
 801975a:	e0c9      	b.n	80198f0 <UART_SetConfig+0x348>
 801975c:	2304      	movs	r3, #4
 801975e:	77fb      	strb	r3, [r7, #31]
 8019760:	e0c6      	b.n	80198f0 <UART_SetConfig+0x348>
 8019762:	2308      	movs	r3, #8
 8019764:	77fb      	strb	r3, [r7, #31]
 8019766:	e0c3      	b.n	80198f0 <UART_SetConfig+0x348>
 8019768:	2310      	movs	r3, #16
 801976a:	77fb      	strb	r3, [r7, #31]
 801976c:	e0c0      	b.n	80198f0 <UART_SetConfig+0x348>
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	4a44      	ldr	r2, [pc, #272]	; (8019884 <UART_SetConfig+0x2dc>)
 8019774:	4293      	cmp	r3, r2
 8019776:	d125      	bne.n	80197c4 <UART_SetConfig+0x21c>
 8019778:	4b3e      	ldr	r3, [pc, #248]	; (8019874 <UART_SetConfig+0x2cc>)
 801977a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801977e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019786:	d017      	beq.n	80197b8 <UART_SetConfig+0x210>
 8019788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801978c:	d817      	bhi.n	80197be <UART_SetConfig+0x216>
 801978e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019792:	d00b      	beq.n	80197ac <UART_SetConfig+0x204>
 8019794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019798:	d811      	bhi.n	80197be <UART_SetConfig+0x216>
 801979a:	2b00      	cmp	r3, #0
 801979c:	d003      	beq.n	80197a6 <UART_SetConfig+0x1fe>
 801979e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80197a2:	d006      	beq.n	80197b2 <UART_SetConfig+0x20a>
 80197a4:	e00b      	b.n	80197be <UART_SetConfig+0x216>
 80197a6:	2300      	movs	r3, #0
 80197a8:	77fb      	strb	r3, [r7, #31]
 80197aa:	e0a1      	b.n	80198f0 <UART_SetConfig+0x348>
 80197ac:	2302      	movs	r3, #2
 80197ae:	77fb      	strb	r3, [r7, #31]
 80197b0:	e09e      	b.n	80198f0 <UART_SetConfig+0x348>
 80197b2:	2304      	movs	r3, #4
 80197b4:	77fb      	strb	r3, [r7, #31]
 80197b6:	e09b      	b.n	80198f0 <UART_SetConfig+0x348>
 80197b8:	2308      	movs	r3, #8
 80197ba:	77fb      	strb	r3, [r7, #31]
 80197bc:	e098      	b.n	80198f0 <UART_SetConfig+0x348>
 80197be:	2310      	movs	r3, #16
 80197c0:	77fb      	strb	r3, [r7, #31]
 80197c2:	e095      	b.n	80198f0 <UART_SetConfig+0x348>
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	4a2f      	ldr	r2, [pc, #188]	; (8019888 <UART_SetConfig+0x2e0>)
 80197ca:	4293      	cmp	r3, r2
 80197cc:	d125      	bne.n	801981a <UART_SetConfig+0x272>
 80197ce:	4b29      	ldr	r3, [pc, #164]	; (8019874 <UART_SetConfig+0x2cc>)
 80197d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80197d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80197d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80197dc:	d017      	beq.n	801980e <UART_SetConfig+0x266>
 80197de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80197e2:	d817      	bhi.n	8019814 <UART_SetConfig+0x26c>
 80197e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80197e8:	d00b      	beq.n	8019802 <UART_SetConfig+0x25a>
 80197ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80197ee:	d811      	bhi.n	8019814 <UART_SetConfig+0x26c>
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d003      	beq.n	80197fc <UART_SetConfig+0x254>
 80197f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80197f8:	d006      	beq.n	8019808 <UART_SetConfig+0x260>
 80197fa:	e00b      	b.n	8019814 <UART_SetConfig+0x26c>
 80197fc:	2301      	movs	r3, #1
 80197fe:	77fb      	strb	r3, [r7, #31]
 8019800:	e076      	b.n	80198f0 <UART_SetConfig+0x348>
 8019802:	2302      	movs	r3, #2
 8019804:	77fb      	strb	r3, [r7, #31]
 8019806:	e073      	b.n	80198f0 <UART_SetConfig+0x348>
 8019808:	2304      	movs	r3, #4
 801980a:	77fb      	strb	r3, [r7, #31]
 801980c:	e070      	b.n	80198f0 <UART_SetConfig+0x348>
 801980e:	2308      	movs	r3, #8
 8019810:	77fb      	strb	r3, [r7, #31]
 8019812:	e06d      	b.n	80198f0 <UART_SetConfig+0x348>
 8019814:	2310      	movs	r3, #16
 8019816:	77fb      	strb	r3, [r7, #31]
 8019818:	e06a      	b.n	80198f0 <UART_SetConfig+0x348>
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	4a1b      	ldr	r2, [pc, #108]	; (801988c <UART_SetConfig+0x2e4>)
 8019820:	4293      	cmp	r3, r2
 8019822:	d138      	bne.n	8019896 <UART_SetConfig+0x2ee>
 8019824:	4b13      	ldr	r3, [pc, #76]	; (8019874 <UART_SetConfig+0x2cc>)
 8019826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801982a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801982e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8019832:	d017      	beq.n	8019864 <UART_SetConfig+0x2bc>
 8019834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8019838:	d82a      	bhi.n	8019890 <UART_SetConfig+0x2e8>
 801983a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801983e:	d00b      	beq.n	8019858 <UART_SetConfig+0x2b0>
 8019840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019844:	d824      	bhi.n	8019890 <UART_SetConfig+0x2e8>
 8019846:	2b00      	cmp	r3, #0
 8019848:	d003      	beq.n	8019852 <UART_SetConfig+0x2aa>
 801984a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801984e:	d006      	beq.n	801985e <UART_SetConfig+0x2b6>
 8019850:	e01e      	b.n	8019890 <UART_SetConfig+0x2e8>
 8019852:	2300      	movs	r3, #0
 8019854:	77fb      	strb	r3, [r7, #31]
 8019856:	e04b      	b.n	80198f0 <UART_SetConfig+0x348>
 8019858:	2302      	movs	r3, #2
 801985a:	77fb      	strb	r3, [r7, #31]
 801985c:	e048      	b.n	80198f0 <UART_SetConfig+0x348>
 801985e:	2304      	movs	r3, #4
 8019860:	77fb      	strb	r3, [r7, #31]
 8019862:	e045      	b.n	80198f0 <UART_SetConfig+0x348>
 8019864:	2308      	movs	r3, #8
 8019866:	77fb      	strb	r3, [r7, #31]
 8019868:	e042      	b.n	80198f0 <UART_SetConfig+0x348>
 801986a:	bf00      	nop
 801986c:	efff69f3 	.word	0xefff69f3
 8019870:	40011000 	.word	0x40011000
 8019874:	40023800 	.word	0x40023800
 8019878:	40004400 	.word	0x40004400
 801987c:	40004800 	.word	0x40004800
 8019880:	40004c00 	.word	0x40004c00
 8019884:	40005000 	.word	0x40005000
 8019888:	40011400 	.word	0x40011400
 801988c:	40007800 	.word	0x40007800
 8019890:	2310      	movs	r3, #16
 8019892:	77fb      	strb	r3, [r7, #31]
 8019894:	e02c      	b.n	80198f0 <UART_SetConfig+0x348>
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	4a72      	ldr	r2, [pc, #456]	; (8019a64 <UART_SetConfig+0x4bc>)
 801989c:	4293      	cmp	r3, r2
 801989e:	d125      	bne.n	80198ec <UART_SetConfig+0x344>
 80198a0:	4b71      	ldr	r3, [pc, #452]	; (8019a68 <UART_SetConfig+0x4c0>)
 80198a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80198aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80198ae:	d017      	beq.n	80198e0 <UART_SetConfig+0x338>
 80198b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80198b4:	d817      	bhi.n	80198e6 <UART_SetConfig+0x33e>
 80198b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80198ba:	d00b      	beq.n	80198d4 <UART_SetConfig+0x32c>
 80198bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80198c0:	d811      	bhi.n	80198e6 <UART_SetConfig+0x33e>
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d003      	beq.n	80198ce <UART_SetConfig+0x326>
 80198c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80198ca:	d006      	beq.n	80198da <UART_SetConfig+0x332>
 80198cc:	e00b      	b.n	80198e6 <UART_SetConfig+0x33e>
 80198ce:	2300      	movs	r3, #0
 80198d0:	77fb      	strb	r3, [r7, #31]
 80198d2:	e00d      	b.n	80198f0 <UART_SetConfig+0x348>
 80198d4:	2302      	movs	r3, #2
 80198d6:	77fb      	strb	r3, [r7, #31]
 80198d8:	e00a      	b.n	80198f0 <UART_SetConfig+0x348>
 80198da:	2304      	movs	r3, #4
 80198dc:	77fb      	strb	r3, [r7, #31]
 80198de:	e007      	b.n	80198f0 <UART_SetConfig+0x348>
 80198e0:	2308      	movs	r3, #8
 80198e2:	77fb      	strb	r3, [r7, #31]
 80198e4:	e004      	b.n	80198f0 <UART_SetConfig+0x348>
 80198e6:	2310      	movs	r3, #16
 80198e8:	77fb      	strb	r3, [r7, #31]
 80198ea:	e001      	b.n	80198f0 <UART_SetConfig+0x348>
 80198ec:	2310      	movs	r3, #16
 80198ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	69db      	ldr	r3, [r3, #28]
 80198f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80198f8:	d15b      	bne.n	80199b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80198fa:	7ffb      	ldrb	r3, [r7, #31]
 80198fc:	2b08      	cmp	r3, #8
 80198fe:	d828      	bhi.n	8019952 <UART_SetConfig+0x3aa>
 8019900:	a201      	add	r2, pc, #4	; (adr r2, 8019908 <UART_SetConfig+0x360>)
 8019902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019906:	bf00      	nop
 8019908:	0801992d 	.word	0x0801992d
 801990c:	08019935 	.word	0x08019935
 8019910:	0801993d 	.word	0x0801993d
 8019914:	08019953 	.word	0x08019953
 8019918:	08019943 	.word	0x08019943
 801991c:	08019953 	.word	0x08019953
 8019920:	08019953 	.word	0x08019953
 8019924:	08019953 	.word	0x08019953
 8019928:	0801994b 	.word	0x0801994b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801992c:	f7fd fc3e 	bl	80171ac <HAL_RCC_GetPCLK1Freq>
 8019930:	61b8      	str	r0, [r7, #24]
        break;
 8019932:	e013      	b.n	801995c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019934:	f7fd fc4e 	bl	80171d4 <HAL_RCC_GetPCLK2Freq>
 8019938:	61b8      	str	r0, [r7, #24]
        break;
 801993a:	e00f      	b.n	801995c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801993c:	4b4b      	ldr	r3, [pc, #300]	; (8019a6c <UART_SetConfig+0x4c4>)
 801993e:	61bb      	str	r3, [r7, #24]
        break;
 8019940:	e00c      	b.n	801995c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8019942:	f7fd fb61 	bl	8017008 <HAL_RCC_GetSysClockFreq>
 8019946:	61b8      	str	r0, [r7, #24]
        break;
 8019948:	e008      	b.n	801995c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801994a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801994e:	61bb      	str	r3, [r7, #24]
        break;
 8019950:	e004      	b.n	801995c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8019952:	2300      	movs	r3, #0
 8019954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8019956:	2301      	movs	r3, #1
 8019958:	77bb      	strb	r3, [r7, #30]
        break;
 801995a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801995c:	69bb      	ldr	r3, [r7, #24]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d074      	beq.n	8019a4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8019962:	69bb      	ldr	r3, [r7, #24]
 8019964:	005a      	lsls	r2, r3, #1
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	685b      	ldr	r3, [r3, #4]
 801996a:	085b      	lsrs	r3, r3, #1
 801996c:	441a      	add	r2, r3
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	685b      	ldr	r3, [r3, #4]
 8019972:	fbb2 f3f3 	udiv	r3, r2, r3
 8019976:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019978:	693b      	ldr	r3, [r7, #16]
 801997a:	2b0f      	cmp	r3, #15
 801997c:	d916      	bls.n	80199ac <UART_SetConfig+0x404>
 801997e:	693b      	ldr	r3, [r7, #16]
 8019980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019984:	d212      	bcs.n	80199ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019986:	693b      	ldr	r3, [r7, #16]
 8019988:	b29b      	uxth	r3, r3
 801998a:	f023 030f 	bic.w	r3, r3, #15
 801998e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019990:	693b      	ldr	r3, [r7, #16]
 8019992:	085b      	lsrs	r3, r3, #1
 8019994:	b29b      	uxth	r3, r3
 8019996:	f003 0307 	and.w	r3, r3, #7
 801999a:	b29a      	uxth	r2, r3
 801999c:	89fb      	ldrh	r3, [r7, #14]
 801999e:	4313      	orrs	r3, r2
 80199a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	89fa      	ldrh	r2, [r7, #14]
 80199a8:	60da      	str	r2, [r3, #12]
 80199aa:	e04f      	b.n	8019a4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80199ac:	2301      	movs	r3, #1
 80199ae:	77bb      	strb	r3, [r7, #30]
 80199b0:	e04c      	b.n	8019a4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80199b2:	7ffb      	ldrb	r3, [r7, #31]
 80199b4:	2b08      	cmp	r3, #8
 80199b6:	d828      	bhi.n	8019a0a <UART_SetConfig+0x462>
 80199b8:	a201      	add	r2, pc, #4	; (adr r2, 80199c0 <UART_SetConfig+0x418>)
 80199ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199be:	bf00      	nop
 80199c0:	080199e5 	.word	0x080199e5
 80199c4:	080199ed 	.word	0x080199ed
 80199c8:	080199f5 	.word	0x080199f5
 80199cc:	08019a0b 	.word	0x08019a0b
 80199d0:	080199fb 	.word	0x080199fb
 80199d4:	08019a0b 	.word	0x08019a0b
 80199d8:	08019a0b 	.word	0x08019a0b
 80199dc:	08019a0b 	.word	0x08019a0b
 80199e0:	08019a03 	.word	0x08019a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80199e4:	f7fd fbe2 	bl	80171ac <HAL_RCC_GetPCLK1Freq>
 80199e8:	61b8      	str	r0, [r7, #24]
        break;
 80199ea:	e013      	b.n	8019a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80199ec:	f7fd fbf2 	bl	80171d4 <HAL_RCC_GetPCLK2Freq>
 80199f0:	61b8      	str	r0, [r7, #24]
        break;
 80199f2:	e00f      	b.n	8019a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80199f4:	4b1d      	ldr	r3, [pc, #116]	; (8019a6c <UART_SetConfig+0x4c4>)
 80199f6:	61bb      	str	r3, [r7, #24]
        break;
 80199f8:	e00c      	b.n	8019a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80199fa:	f7fd fb05 	bl	8017008 <HAL_RCC_GetSysClockFreq>
 80199fe:	61b8      	str	r0, [r7, #24]
        break;
 8019a00:	e008      	b.n	8019a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019a06:	61bb      	str	r3, [r7, #24]
        break;
 8019a08:	e004      	b.n	8019a14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8019a0e:	2301      	movs	r3, #1
 8019a10:	77bb      	strb	r3, [r7, #30]
        break;
 8019a12:	bf00      	nop
    }

    if (pclk != 0U)
 8019a14:	69bb      	ldr	r3, [r7, #24]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d018      	beq.n	8019a4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	685b      	ldr	r3, [r3, #4]
 8019a1e:	085a      	lsrs	r2, r3, #1
 8019a20:	69bb      	ldr	r3, [r7, #24]
 8019a22:	441a      	add	r2, r3
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	685b      	ldr	r3, [r3, #4]
 8019a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019a2e:	693b      	ldr	r3, [r7, #16]
 8019a30:	2b0f      	cmp	r3, #15
 8019a32:	d909      	bls.n	8019a48 <UART_SetConfig+0x4a0>
 8019a34:	693b      	ldr	r3, [r7, #16]
 8019a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019a3a:	d205      	bcs.n	8019a48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	b29a      	uxth	r2, r3
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	60da      	str	r2, [r3, #12]
 8019a46:	e001      	b.n	8019a4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8019a48:	2301      	movs	r3, #1
 8019a4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	2200      	movs	r2, #0
 8019a50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	2200      	movs	r2, #0
 8019a56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8019a58:	7fbb      	ldrb	r3, [r7, #30]
}
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	3720      	adds	r7, #32
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd80      	pop	{r7, pc}
 8019a62:	bf00      	nop
 8019a64:	40007c00 	.word	0x40007c00
 8019a68:	40023800 	.word	0x40023800
 8019a6c:	00f42400 	.word	0x00f42400

08019a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019a70:	b480      	push	{r7}
 8019a72:	b083      	sub	sp, #12
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a7c:	f003 0301 	and.w	r3, r3, #1
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d00a      	beq.n	8019a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	685b      	ldr	r3, [r3, #4]
 8019a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	430a      	orrs	r2, r1
 8019a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a9e:	f003 0302 	and.w	r3, r3, #2
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d00a      	beq.n	8019abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	685b      	ldr	r3, [r3, #4]
 8019aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	681b      	ldr	r3, [r3, #0]
 8019ab8:	430a      	orrs	r2, r1
 8019aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ac0:	f003 0304 	and.w	r3, r3, #4
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d00a      	beq.n	8019ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	685b      	ldr	r3, [r3, #4]
 8019ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	430a      	orrs	r2, r1
 8019adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ae2:	f003 0308 	and.w	r3, r3, #8
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d00a      	beq.n	8019b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	685b      	ldr	r3, [r3, #4]
 8019af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	430a      	orrs	r2, r1
 8019afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b04:	f003 0310 	and.w	r3, r3, #16
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d00a      	beq.n	8019b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	689b      	ldr	r3, [r3, #8]
 8019b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	430a      	orrs	r2, r1
 8019b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b26:	f003 0320 	and.w	r3, r3, #32
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d00a      	beq.n	8019b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	689b      	ldr	r3, [r3, #8]
 8019b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	430a      	orrs	r2, r1
 8019b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d01a      	beq.n	8019b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	685b      	ldr	r3, [r3, #4]
 8019b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	430a      	orrs	r2, r1
 8019b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019b6e:	d10a      	bne.n	8019b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	685b      	ldr	r3, [r3, #4]
 8019b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	430a      	orrs	r2, r1
 8019b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d00a      	beq.n	8019ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	685b      	ldr	r3, [r3, #4]
 8019b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	430a      	orrs	r2, r1
 8019ba6:	605a      	str	r2, [r3, #4]
  }
}
 8019ba8:	bf00      	nop
 8019baa:	370c      	adds	r7, #12
 8019bac:	46bd      	mov	sp, r7
 8019bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb2:	4770      	bx	lr

08019bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019bb4:	b580      	push	{r7, lr}
 8019bb6:	b086      	sub	sp, #24
 8019bb8:	af02      	add	r7, sp, #8
 8019bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019bc4:	f7f9 fb10 	bl	80131e8 <HAL_GetTick>
 8019bc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	f003 0308 	and.w	r3, r3, #8
 8019bd4:	2b08      	cmp	r3, #8
 8019bd6:	d10e      	bne.n	8019bf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019bdc:	9300      	str	r3, [sp, #0]
 8019bde:	68fb      	ldr	r3, [r7, #12]
 8019be0:	2200      	movs	r2, #0
 8019be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019be6:	6878      	ldr	r0, [r7, #4]
 8019be8:	f000 f831 	bl	8019c4e <UART_WaitOnFlagUntilTimeout>
 8019bec:	4603      	mov	r3, r0
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d001      	beq.n	8019bf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019bf2:	2303      	movs	r3, #3
 8019bf4:	e027      	b.n	8019c46 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	f003 0304 	and.w	r3, r3, #4
 8019c00:	2b04      	cmp	r3, #4
 8019c02:	d10e      	bne.n	8019c22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019c08:	9300      	str	r3, [sp, #0]
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	2200      	movs	r2, #0
 8019c0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8019c12:	6878      	ldr	r0, [r7, #4]
 8019c14:	f000 f81b 	bl	8019c4e <UART_WaitOnFlagUntilTimeout>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d001      	beq.n	8019c22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019c1e:	2303      	movs	r3, #3
 8019c20:	e011      	b.n	8019c46 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	2220      	movs	r2, #32
 8019c26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	2220      	movs	r2, #32
 8019c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	2200      	movs	r2, #0
 8019c34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	2200      	movs	r2, #0
 8019c3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	2200      	movs	r2, #0
 8019c40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8019c44:	2300      	movs	r3, #0
}
 8019c46:	4618      	mov	r0, r3
 8019c48:	3710      	adds	r7, #16
 8019c4a:	46bd      	mov	sp, r7
 8019c4c:	bd80      	pop	{r7, pc}

08019c4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019c4e:	b580      	push	{r7, lr}
 8019c50:	b09c      	sub	sp, #112	; 0x70
 8019c52:	af00      	add	r7, sp, #0
 8019c54:	60f8      	str	r0, [r7, #12]
 8019c56:	60b9      	str	r1, [r7, #8]
 8019c58:	603b      	str	r3, [r7, #0]
 8019c5a:	4613      	mov	r3, r2
 8019c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019c5e:	e0a7      	b.n	8019db0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c66:	f000 80a3 	beq.w	8019db0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019c6a:	f7f9 fabd 	bl	80131e8 <HAL_GetTick>
 8019c6e:	4602      	mov	r2, r0
 8019c70:	683b      	ldr	r3, [r7, #0]
 8019c72:	1ad3      	subs	r3, r2, r3
 8019c74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019c76:	429a      	cmp	r2, r3
 8019c78:	d302      	bcc.n	8019c80 <UART_WaitOnFlagUntilTimeout+0x32>
 8019c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d13f      	bne.n	8019d00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019c88:	e853 3f00 	ldrex	r3, [r3]
 8019c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8019c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8019c94:	667b      	str	r3, [r7, #100]	; 0x64
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019ca0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019ca6:	e841 2300 	strex	r3, r2, [r1]
 8019caa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8019cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d1e6      	bne.n	8019c80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	3308      	adds	r3, #8
 8019cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cbc:	e853 3f00 	ldrex	r3, [r3]
 8019cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cc4:	f023 0301 	bic.w	r3, r3, #1
 8019cc8:	663b      	str	r3, [r7, #96]	; 0x60
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	3308      	adds	r3, #8
 8019cd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019cd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8019cd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019cda:	e841 2300 	strex	r3, r2, [r1]
 8019cde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8019ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d1e5      	bne.n	8019cb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	2220      	movs	r2, #32
 8019cea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	2220      	movs	r2, #32
 8019cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8019cfc:	2303      	movs	r3, #3
 8019cfe:	e068      	b.n	8019dd2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	f003 0304 	and.w	r3, r3, #4
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d050      	beq.n	8019db0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	69db      	ldr	r3, [r3, #28]
 8019d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019d1c:	d148      	bne.n	8019db0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019d26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d30:	e853 3f00 	ldrex	r3, [r3]
 8019d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8019d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	461a      	mov	r2, r3
 8019d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019d46:	637b      	str	r3, [r7, #52]	; 0x34
 8019d48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019d4e:	e841 2300 	strex	r3, r2, [r1]
 8019d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8019d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d1e6      	bne.n	8019d28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	3308      	adds	r3, #8
 8019d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d62:	697b      	ldr	r3, [r7, #20]
 8019d64:	e853 3f00 	ldrex	r3, [r3]
 8019d68:	613b      	str	r3, [r7, #16]
   return(result);
 8019d6a:	693b      	ldr	r3, [r7, #16]
 8019d6c:	f023 0301 	bic.w	r3, r3, #1
 8019d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	3308      	adds	r3, #8
 8019d78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019d7a:	623a      	str	r2, [r7, #32]
 8019d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d7e:	69f9      	ldr	r1, [r7, #28]
 8019d80:	6a3a      	ldr	r2, [r7, #32]
 8019d82:	e841 2300 	strex	r3, r2, [r1]
 8019d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8019d88:	69bb      	ldr	r3, [r7, #24]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d1e5      	bne.n	8019d5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	2220      	movs	r2, #32
 8019d92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	2220      	movs	r2, #32
 8019d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	2220      	movs	r2, #32
 8019da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	2200      	movs	r2, #0
 8019da8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8019dac:	2303      	movs	r3, #3
 8019dae:	e010      	b.n	8019dd2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	69da      	ldr	r2, [r3, #28]
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	4013      	ands	r3, r2
 8019dba:	68ba      	ldr	r2, [r7, #8]
 8019dbc:	429a      	cmp	r2, r3
 8019dbe:	bf0c      	ite	eq
 8019dc0:	2301      	moveq	r3, #1
 8019dc2:	2300      	movne	r3, #0
 8019dc4:	b2db      	uxtb	r3, r3
 8019dc6:	461a      	mov	r2, r3
 8019dc8:	79fb      	ldrb	r3, [r7, #7]
 8019dca:	429a      	cmp	r2, r3
 8019dcc:	f43f af48 	beq.w	8019c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019dd0:	2300      	movs	r3, #0
}
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	3770      	adds	r7, #112	; 0x70
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	bd80      	pop	{r7, pc}
	...

08019ddc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019ddc:	b480      	push	{r7}
 8019dde:	b097      	sub	sp, #92	; 0x5c
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	60f8      	str	r0, [r7, #12]
 8019de4:	60b9      	str	r1, [r7, #8]
 8019de6:	4613      	mov	r3, r2
 8019de8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	68ba      	ldr	r2, [r7, #8]
 8019dee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	88fa      	ldrh	r2, [r7, #6]
 8019df4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	88fa      	ldrh	r2, [r7, #6]
 8019dfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	2200      	movs	r2, #0
 8019e04:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	689b      	ldr	r3, [r3, #8]
 8019e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019e0e:	d10e      	bne.n	8019e2e <UART_Start_Receive_IT+0x52>
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	691b      	ldr	r3, [r3, #16]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d105      	bne.n	8019e24 <UART_Start_Receive_IT+0x48>
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8019e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8019e22:	e02d      	b.n	8019e80 <UART_Start_Receive_IT+0xa4>
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	22ff      	movs	r2, #255	; 0xff
 8019e28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8019e2c:	e028      	b.n	8019e80 <UART_Start_Receive_IT+0xa4>
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	689b      	ldr	r3, [r3, #8]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d10d      	bne.n	8019e52 <UART_Start_Receive_IT+0x76>
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	691b      	ldr	r3, [r3, #16]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d104      	bne.n	8019e48 <UART_Start_Receive_IT+0x6c>
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	22ff      	movs	r2, #255	; 0xff
 8019e42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8019e46:	e01b      	b.n	8019e80 <UART_Start_Receive_IT+0xa4>
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	227f      	movs	r2, #127	; 0x7f
 8019e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8019e50:	e016      	b.n	8019e80 <UART_Start_Receive_IT+0xa4>
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	689b      	ldr	r3, [r3, #8]
 8019e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8019e5a:	d10d      	bne.n	8019e78 <UART_Start_Receive_IT+0x9c>
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	691b      	ldr	r3, [r3, #16]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d104      	bne.n	8019e6e <UART_Start_Receive_IT+0x92>
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	227f      	movs	r2, #127	; 0x7f
 8019e68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8019e6c:	e008      	b.n	8019e80 <UART_Start_Receive_IT+0xa4>
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	223f      	movs	r2, #63	; 0x3f
 8019e72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8019e76:	e003      	b.n	8019e80 <UART_Start_Receive_IT+0xa4>
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	2200      	movs	r2, #0
 8019e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	2200      	movs	r2, #0
 8019e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	2222      	movs	r2, #34	; 0x22
 8019e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	3308      	adds	r3, #8
 8019e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e9a:	e853 3f00 	ldrex	r3, [r3]
 8019e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ea2:	f043 0301 	orr.w	r3, r3, #1
 8019ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	3308      	adds	r3, #8
 8019eae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019eb0:	64ba      	str	r2, [r7, #72]	; 0x48
 8019eb2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019eb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019eb8:	e841 2300 	strex	r3, r2, [r1]
 8019ebc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8019ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d1e5      	bne.n	8019e90 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	689b      	ldr	r3, [r3, #8]
 8019ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019ecc:	d107      	bne.n	8019ede <UART_Start_Receive_IT+0x102>
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	691b      	ldr	r3, [r3, #16]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d103      	bne.n	8019ede <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	4a21      	ldr	r2, [pc, #132]	; (8019f60 <UART_Start_Receive_IT+0x184>)
 8019eda:	669a      	str	r2, [r3, #104]	; 0x68
 8019edc:	e002      	b.n	8019ee4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	4a20      	ldr	r2, [pc, #128]	; (8019f64 <UART_Start_Receive_IT+0x188>)
 8019ee2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	691b      	ldr	r3, [r3, #16]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d019      	beq.n	8019f20 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ef4:	e853 3f00 	ldrex	r3, [r3]
 8019ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8019f00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	461a      	mov	r2, r3
 8019f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8019f0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019f12:	e841 2300 	strex	r3, r2, [r1]
 8019f16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8019f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d1e6      	bne.n	8019eec <UART_Start_Receive_IT+0x110>
 8019f1e:	e018      	b.n	8019f52 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f26:	697b      	ldr	r3, [r7, #20]
 8019f28:	e853 3f00 	ldrex	r3, [r3]
 8019f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8019f2e:	693b      	ldr	r3, [r7, #16]
 8019f30:	f043 0320 	orr.w	r3, r3, #32
 8019f34:	653b      	str	r3, [r7, #80]	; 0x50
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	461a      	mov	r2, r3
 8019f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019f3e:	623b      	str	r3, [r7, #32]
 8019f40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f42:	69f9      	ldr	r1, [r7, #28]
 8019f44:	6a3a      	ldr	r2, [r7, #32]
 8019f46:	e841 2300 	strex	r3, r2, [r1]
 8019f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8019f4c:	69bb      	ldr	r3, [r7, #24]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d1e6      	bne.n	8019f20 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8019f52:	2300      	movs	r3, #0
}
 8019f54:	4618      	mov	r0, r3
 8019f56:	375c      	adds	r7, #92	; 0x5c
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f5e:	4770      	bx	lr
 8019f60:	0801a227 	.word	0x0801a227
 8019f64:	0801a0b9 	.word	0x0801a0b9

08019f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b095      	sub	sp, #84	; 0x54
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019f78:	e853 3f00 	ldrex	r3, [r3]
 8019f7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8019f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8019f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	461a      	mov	r2, r3
 8019f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8019f90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019f94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019f96:	e841 2300 	strex	r3, r2, [r1]
 8019f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d1e6      	bne.n	8019f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	3308      	adds	r3, #8
 8019fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019faa:	6a3b      	ldr	r3, [r7, #32]
 8019fac:	e853 3f00 	ldrex	r3, [r3]
 8019fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8019fb2:	69fb      	ldr	r3, [r7, #28]
 8019fb4:	f023 0301 	bic.w	r3, r3, #1
 8019fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	3308      	adds	r3, #8
 8019fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fca:	e841 2300 	strex	r3, r2, [r1]
 8019fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d1e5      	bne.n	8019fa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019fda:	2b01      	cmp	r3, #1
 8019fdc:	d118      	bne.n	801a010 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	e853 3f00 	ldrex	r3, [r3]
 8019fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8019fec:	68bb      	ldr	r3, [r7, #8]
 8019fee:	f023 0310 	bic.w	r3, r3, #16
 8019ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	461a      	mov	r2, r3
 8019ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ffc:	61bb      	str	r3, [r7, #24]
 8019ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a000:	6979      	ldr	r1, [r7, #20]
 801a002:	69ba      	ldr	r2, [r7, #24]
 801a004:	e841 2300 	strex	r3, r2, [r1]
 801a008:	613b      	str	r3, [r7, #16]
   return(result);
 801a00a:	693b      	ldr	r3, [r7, #16]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d1e6      	bne.n	8019fde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2220      	movs	r2, #32
 801a014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2200      	movs	r2, #0
 801a01c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	2200      	movs	r2, #0
 801a022:	669a      	str	r2, [r3, #104]	; 0x68
}
 801a024:	bf00      	nop
 801a026:	3754      	adds	r7, #84	; 0x54
 801a028:	46bd      	mov	sp, r7
 801a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a02e:	4770      	bx	lr

0801a030 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b084      	sub	sp, #16
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a03c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	2200      	movs	r2, #0
 801a042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	2200      	movs	r2, #0
 801a04a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a054:	68f8      	ldr	r0, [r7, #12]
 801a056:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a058:	bf00      	nop
 801a05a:	3710      	adds	r7, #16
 801a05c:	46bd      	mov	sp, r7
 801a05e:	bd80      	pop	{r7, pc}

0801a060 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b088      	sub	sp, #32
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	e853 3f00 	ldrex	r3, [r3]
 801a074:	60bb      	str	r3, [r7, #8]
   return(result);
 801a076:	68bb      	ldr	r3, [r7, #8]
 801a078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a07c:	61fb      	str	r3, [r7, #28]
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	461a      	mov	r2, r3
 801a084:	69fb      	ldr	r3, [r7, #28]
 801a086:	61bb      	str	r3, [r7, #24]
 801a088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a08a:	6979      	ldr	r1, [r7, #20]
 801a08c:	69ba      	ldr	r2, [r7, #24]
 801a08e:	e841 2300 	strex	r3, r2, [r1]
 801a092:	613b      	str	r3, [r7, #16]
   return(result);
 801a094:	693b      	ldr	r3, [r7, #16]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d1e6      	bne.n	801a068 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	2220      	movs	r2, #32
 801a09e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a0ac:	6878      	ldr	r0, [r7, #4]
 801a0ae:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a0b0:	bf00      	nop
 801a0b2:	3720      	adds	r7, #32
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}

0801a0b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b096      	sub	sp, #88	; 0x58
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a0c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a0d0:	2b22      	cmp	r3, #34	; 0x22
 801a0d2:	f040 809c 	bne.w	801a20e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a0e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801a0e4:	b2d9      	uxtb	r1, r3
 801a0e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801a0ea:	b2da      	uxtb	r2, r3
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0f0:	400a      	ands	r2, r1
 801a0f2:	b2d2      	uxtb	r2, r2
 801a0f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0fa:	1c5a      	adds	r2, r3, #1
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801a106:	b29b      	uxth	r3, r3
 801a108:	3b01      	subs	r3, #1
 801a10a:	b29a      	uxth	r2, r3
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801a118:	b29b      	uxth	r3, r3
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d17f      	bne.n	801a21e <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a126:	e853 3f00 	ldrex	r3, [r3]
 801a12a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801a12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a12e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801a132:	653b      	str	r3, [r7, #80]	; 0x50
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	461a      	mov	r2, r3
 801a13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a13c:	647b      	str	r3, [r7, #68]	; 0x44
 801a13e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a140:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a144:	e841 2300 	strex	r3, r2, [r1]
 801a148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801a14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d1e6      	bne.n	801a11e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	3308      	adds	r3, #8
 801a156:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a15a:	e853 3f00 	ldrex	r3, [r3]
 801a15e:	623b      	str	r3, [r7, #32]
   return(result);
 801a160:	6a3b      	ldr	r3, [r7, #32]
 801a162:	f023 0301 	bic.w	r3, r3, #1
 801a166:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	3308      	adds	r3, #8
 801a16e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a170:	633a      	str	r2, [r7, #48]	; 0x30
 801a172:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a178:	e841 2300 	strex	r3, r2, [r1]
 801a17c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a180:	2b00      	cmp	r3, #0
 801a182:	d1e5      	bne.n	801a150 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2220      	movs	r2, #32
 801a188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	2200      	movs	r2, #0
 801a190:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	2200      	movs	r2, #0
 801a196:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a19c:	2b01      	cmp	r3, #1
 801a19e:	d130      	bne.n	801a202 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	2200      	movs	r2, #0
 801a1a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1ac:	693b      	ldr	r3, [r7, #16]
 801a1ae:	e853 3f00 	ldrex	r3, [r3]
 801a1b2:	60fb      	str	r3, [r7, #12]
   return(result);
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	f023 0310 	bic.w	r3, r3, #16
 801a1ba:	64bb      	str	r3, [r7, #72]	; 0x48
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	461a      	mov	r2, r3
 801a1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1c4:	61fb      	str	r3, [r7, #28]
 801a1c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1c8:	69b9      	ldr	r1, [r7, #24]
 801a1ca:	69fa      	ldr	r2, [r7, #28]
 801a1cc:	e841 2300 	strex	r3, r2, [r1]
 801a1d0:	617b      	str	r3, [r7, #20]
   return(result);
 801a1d2:	697b      	ldr	r3, [r7, #20]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d1e6      	bne.n	801a1a6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	69db      	ldr	r3, [r3, #28]
 801a1de:	f003 0310 	and.w	r3, r3, #16
 801a1e2:	2b10      	cmp	r3, #16
 801a1e4:	d103      	bne.n	801a1ee <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	2210      	movs	r2, #16
 801a1ec:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801a1f4:	687a      	ldr	r2, [r7, #4]
 801a1f6:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801a1fa:	4611      	mov	r1, r2
 801a1fc:	6878      	ldr	r0, [r7, #4]
 801a1fe:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a200:	e00d      	b.n	801a21e <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a208:	6878      	ldr	r0, [r7, #4]
 801a20a:	4798      	blx	r3
}
 801a20c:	e007      	b.n	801a21e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	699a      	ldr	r2, [r3, #24]
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	f042 0208 	orr.w	r2, r2, #8
 801a21c:	619a      	str	r2, [r3, #24]
}
 801a21e:	bf00      	nop
 801a220:	3758      	adds	r7, #88	; 0x58
 801a222:	46bd      	mov	sp, r7
 801a224:	bd80      	pop	{r7, pc}

0801a226 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a226:	b580      	push	{r7, lr}
 801a228:	b096      	sub	sp, #88	; 0x58
 801a22a:	af00      	add	r7, sp, #0
 801a22c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a234:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a23e:	2b22      	cmp	r3, #34	; 0x22
 801a240:	f040 809c 	bne.w	801a37c <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a24a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a252:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801a254:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801a258:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801a25c:	4013      	ands	r3, r2
 801a25e:	b29a      	uxth	r2, r3
 801a260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a262:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a268:	1c9a      	adds	r2, r3, #2
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801a274:	b29b      	uxth	r3, r3
 801a276:	3b01      	subs	r3, #1
 801a278:	b29a      	uxth	r2, r3
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801a286:	b29b      	uxth	r3, r3
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d17f      	bne.n	801a38c <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a294:	e853 3f00 	ldrex	r3, [r3]
 801a298:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a29c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801a2a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	461a      	mov	r2, r3
 801a2a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a2aa:	643b      	str	r3, [r7, #64]	; 0x40
 801a2ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a2b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a2b2:	e841 2300 	strex	r3, r2, [r1]
 801a2b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d1e6      	bne.n	801a28c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	3308      	adds	r3, #8
 801a2c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2c6:	6a3b      	ldr	r3, [r7, #32]
 801a2c8:	e853 3f00 	ldrex	r3, [r3]
 801a2cc:	61fb      	str	r3, [r7, #28]
   return(result);
 801a2ce:	69fb      	ldr	r3, [r7, #28]
 801a2d0:	f023 0301 	bic.w	r3, r3, #1
 801a2d4:	64bb      	str	r3, [r7, #72]	; 0x48
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	3308      	adds	r3, #8
 801a2dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a2de:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a2e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2e6:	e841 2300 	strex	r3, r2, [r1]
 801a2ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d1e5      	bne.n	801a2be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	2220      	movs	r2, #32
 801a2f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	2200      	movs	r2, #0
 801a304:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a30a:	2b01      	cmp	r3, #1
 801a30c:	d130      	bne.n	801a370 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	2200      	movs	r2, #0
 801a312:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	e853 3f00 	ldrex	r3, [r3]
 801a320:	60bb      	str	r3, [r7, #8]
   return(result);
 801a322:	68bb      	ldr	r3, [r7, #8]
 801a324:	f023 0310 	bic.w	r3, r3, #16
 801a328:	647b      	str	r3, [r7, #68]	; 0x44
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	461a      	mov	r2, r3
 801a330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a332:	61bb      	str	r3, [r7, #24]
 801a334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a336:	6979      	ldr	r1, [r7, #20]
 801a338:	69ba      	ldr	r2, [r7, #24]
 801a33a:	e841 2300 	strex	r3, r2, [r1]
 801a33e:	613b      	str	r3, [r7, #16]
   return(result);
 801a340:	693b      	ldr	r3, [r7, #16]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d1e6      	bne.n	801a314 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	69db      	ldr	r3, [r3, #28]
 801a34c:	f003 0310 	and.w	r3, r3, #16
 801a350:	2b10      	cmp	r3, #16
 801a352:	d103      	bne.n	801a35c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	2210      	movs	r2, #16
 801a35a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801a362:	687a      	ldr	r2, [r7, #4]
 801a364:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801a368:	4611      	mov	r1, r2
 801a36a:	6878      	ldr	r0, [r7, #4]
 801a36c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a36e:	e00d      	b.n	801a38c <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a376:	6878      	ldr	r0, [r7, #4]
 801a378:	4798      	blx	r3
}
 801a37a:	e007      	b.n	801a38c <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	699a      	ldr	r2, [r3, #24]
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	f042 0208 	orr.w	r2, r2, #8
 801a38a:	619a      	str	r2, [r3, #24]
}
 801a38c:	bf00      	nop
 801a38e:	3758      	adds	r7, #88	; 0x58
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}

0801a394 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b08c      	sub	sp, #48	; 0x30
 801a398:	af00      	add	r7, sp, #0
 801a39a:	60f8      	str	r0, [r7, #12]
 801a39c:	60b9      	str	r1, [r7, #8]
 801a39e:	4613      	mov	r3, r2
 801a3a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a3a8:	2b20      	cmp	r3, #32
 801a3aa:	d142      	bne.n	801a432 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801a3ac:	68bb      	ldr	r3, [r7, #8]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d002      	beq.n	801a3b8 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801a3b2:	88fb      	ldrh	r3, [r7, #6]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d101      	bne.n	801a3bc <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	e03b      	b.n	801a434 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	2201      	movs	r2, #1
 801a3c0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801a3c8:	88fb      	ldrh	r3, [r7, #6]
 801a3ca:	461a      	mov	r2, r3
 801a3cc:	68b9      	ldr	r1, [r7, #8]
 801a3ce:	68f8      	ldr	r0, [r7, #12]
 801a3d0:	f7ff fd04 	bl	8019ddc <UART_Start_Receive_IT>
 801a3d4:	4603      	mov	r3, r0
 801a3d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801a3da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d124      	bne.n	801a42c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a3e6:	2b01      	cmp	r3, #1
 801a3e8:	d11d      	bne.n	801a426 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	2210      	movs	r2, #16
 801a3f0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3f8:	69bb      	ldr	r3, [r7, #24]
 801a3fa:	e853 3f00 	ldrex	r3, [r3]
 801a3fe:	617b      	str	r3, [r7, #20]
   return(result);
 801a400:	697b      	ldr	r3, [r7, #20]
 801a402:	f043 0310 	orr.w	r3, r3, #16
 801a406:	62bb      	str	r3, [r7, #40]	; 0x28
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	461a      	mov	r2, r3
 801a40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a410:	627b      	str	r3, [r7, #36]	; 0x24
 801a412:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a414:	6a39      	ldr	r1, [r7, #32]
 801a416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a418:	e841 2300 	strex	r3, r2, [r1]
 801a41c:	61fb      	str	r3, [r7, #28]
   return(result);
 801a41e:	69fb      	ldr	r3, [r7, #28]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d1e6      	bne.n	801a3f2 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801a424:	e002      	b.n	801a42c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801a426:	2301      	movs	r3, #1
 801a428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801a42c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a430:	e000      	b.n	801a434 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801a432:	2302      	movs	r3, #2
  }
}
 801a434:	4618      	mov	r0, r3
 801a436:	3730      	adds	r7, #48	; 0x30
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}

0801a43c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b084      	sub	sp, #16
 801a440:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801a442:	4b2f      	ldr	r3, [pc, #188]	; (801a500 <MX_LWIP_Init+0xc4>)
 801a444:	22c0      	movs	r2, #192	; 0xc0
 801a446:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801a448:	4b2d      	ldr	r3, [pc, #180]	; (801a500 <MX_LWIP_Init+0xc4>)
 801a44a:	22a8      	movs	r2, #168	; 0xa8
 801a44c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801a44e:	4b2c      	ldr	r3, [pc, #176]	; (801a500 <MX_LWIP_Init+0xc4>)
 801a450:	220c      	movs	r2, #12
 801a452:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801a454:	4b2a      	ldr	r3, [pc, #168]	; (801a500 <MX_LWIP_Init+0xc4>)
 801a456:	2264      	movs	r2, #100	; 0x64
 801a458:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801a45a:	4b2a      	ldr	r3, [pc, #168]	; (801a504 <MX_LWIP_Init+0xc8>)
 801a45c:	22ff      	movs	r2, #255	; 0xff
 801a45e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801a460:	4b28      	ldr	r3, [pc, #160]	; (801a504 <MX_LWIP_Init+0xc8>)
 801a462:	22ff      	movs	r2, #255	; 0xff
 801a464:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801a466:	4b27      	ldr	r3, [pc, #156]	; (801a504 <MX_LWIP_Init+0xc8>)
 801a468:	22ff      	movs	r2, #255	; 0xff
 801a46a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801a46c:	4b25      	ldr	r3, [pc, #148]	; (801a504 <MX_LWIP_Init+0xc8>)
 801a46e:	2200      	movs	r2, #0
 801a470:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801a472:	4b25      	ldr	r3, [pc, #148]	; (801a508 <MX_LWIP_Init+0xcc>)
 801a474:	22c0      	movs	r2, #192	; 0xc0
 801a476:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801a478:	4b23      	ldr	r3, [pc, #140]	; (801a508 <MX_LWIP_Init+0xcc>)
 801a47a:	22a8      	movs	r2, #168	; 0xa8
 801a47c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801a47e:	4b22      	ldr	r3, [pc, #136]	; (801a508 <MX_LWIP_Init+0xcc>)
 801a480:	220c      	movs	r2, #12
 801a482:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801a484:	4b20      	ldr	r3, [pc, #128]	; (801a508 <MX_LWIP_Init+0xcc>)
 801a486:	2201      	movs	r2, #1
 801a488:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801a48a:	4b20      	ldr	r3, [pc, #128]	; (801a50c <MX_LWIP_Init+0xd0>)
 801a48c:	781b      	ldrb	r3, [r3, #0]
 801a48e:	2b01      	cmp	r3, #1
 801a490:	d002      	beq.n	801a498 <MX_LWIP_Init+0x5c>
 801a492:	2b02      	cmp	r3, #2
 801a494:	d03c      	beq.n	801a510 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801a496:	e162      	b.n	801a75e <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801a498:	4b1c      	ldr	r3, [pc, #112]	; (801a50c <MX_LWIP_Init+0xd0>)
 801a49a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801a49e:	4b18      	ldr	r3, [pc, #96]	; (801a500 <MX_LWIP_Init+0xc4>)
 801a4a0:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801a4a2:	4b1a      	ldr	r3, [pc, #104]	; (801a50c <MX_LWIP_Init+0xd0>)
 801a4a4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801a4a8:	4b15      	ldr	r3, [pc, #84]	; (801a500 <MX_LWIP_Init+0xc4>)
 801a4aa:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801a4ac:	4b17      	ldr	r3, [pc, #92]	; (801a50c <MX_LWIP_Init+0xd0>)
 801a4ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801a4b2:	4b13      	ldr	r3, [pc, #76]	; (801a500 <MX_LWIP_Init+0xc4>)
 801a4b4:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801a4b6:	4b15      	ldr	r3, [pc, #84]	; (801a50c <MX_LWIP_Init+0xd0>)
 801a4b8:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 801a4bc:	4b10      	ldr	r3, [pc, #64]	; (801a500 <MX_LWIP_Init+0xc4>)
 801a4be:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801a4c0:	4b10      	ldr	r3, [pc, #64]	; (801a504 <MX_LWIP_Init+0xc8>)
 801a4c2:	22ff      	movs	r2, #255	; 0xff
 801a4c4:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801a4c6:	4b0f      	ldr	r3, [pc, #60]	; (801a504 <MX_LWIP_Init+0xc8>)
 801a4c8:	22ff      	movs	r2, #255	; 0xff
 801a4ca:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801a4cc:	4b0d      	ldr	r3, [pc, #52]	; (801a504 <MX_LWIP_Init+0xc8>)
 801a4ce:	22ff      	movs	r2, #255	; 0xff
 801a4d0:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801a4d2:	4b0c      	ldr	r3, [pc, #48]	; (801a504 <MX_LWIP_Init+0xc8>)
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801a4d8:	4b0c      	ldr	r3, [pc, #48]	; (801a50c <MX_LWIP_Init+0xd0>)
 801a4da:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801a4de:	4b0a      	ldr	r3, [pc, #40]	; (801a508 <MX_LWIP_Init+0xcc>)
 801a4e0:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801a4e2:	4b0a      	ldr	r3, [pc, #40]	; (801a50c <MX_LWIP_Init+0xd0>)
 801a4e4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801a4e8:	4b07      	ldr	r3, [pc, #28]	; (801a508 <MX_LWIP_Init+0xcc>)
 801a4ea:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801a4ec:	4b07      	ldr	r3, [pc, #28]	; (801a50c <MX_LWIP_Init+0xd0>)
 801a4ee:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801a4f2:	4b05      	ldr	r3, [pc, #20]	; (801a508 <MX_LWIP_Init+0xcc>)
 801a4f4:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801a4f6:	4b04      	ldr	r3, [pc, #16]	; (801a508 <MX_LWIP_Init+0xcc>)
 801a4f8:	2201      	movs	r2, #1
 801a4fa:	70da      	strb	r2, [r3, #3]
		break;
 801a4fc:	e03b      	b.n	801a576 <MX_LWIP_Init+0x13a>
 801a4fe:	bf00      	nop
 801a500:	2000b15c 	.word	0x2000b15c
 801a504:	2000b160 	.word	0x2000b160
 801a508:	2000b164 	.word	0x2000b164
 801a50c:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801a510:	4b94      	ldr	r3, [pc, #592]	; (801a764 <MX_LWIP_Init+0x328>)
 801a512:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801a516:	4b94      	ldr	r3, [pc, #592]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a518:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801a51a:	4b92      	ldr	r3, [pc, #584]	; (801a764 <MX_LWIP_Init+0x328>)
 801a51c:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801a520:	4b91      	ldr	r3, [pc, #580]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a522:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801a524:	4b8f      	ldr	r3, [pc, #572]	; (801a764 <MX_LWIP_Init+0x328>)
 801a526:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801a52a:	4b8f      	ldr	r3, [pc, #572]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a52c:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801a52e:	4b8d      	ldr	r3, [pc, #564]	; (801a764 <MX_LWIP_Init+0x328>)
 801a530:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 801a534:	4b8c      	ldr	r3, [pc, #560]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a536:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801a538:	4b8c      	ldr	r3, [pc, #560]	; (801a76c <MX_LWIP_Init+0x330>)
 801a53a:	22ff      	movs	r2, #255	; 0xff
 801a53c:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801a53e:	4b8b      	ldr	r3, [pc, #556]	; (801a76c <MX_LWIP_Init+0x330>)
 801a540:	22ff      	movs	r2, #255	; 0xff
 801a542:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801a544:	4b89      	ldr	r3, [pc, #548]	; (801a76c <MX_LWIP_Init+0x330>)
 801a546:	22ff      	movs	r2, #255	; 0xff
 801a548:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801a54a:	4b88      	ldr	r3, [pc, #544]	; (801a76c <MX_LWIP_Init+0x330>)
 801a54c:	2200      	movs	r2, #0
 801a54e:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801a550:	4b84      	ldr	r3, [pc, #528]	; (801a764 <MX_LWIP_Init+0x328>)
 801a552:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801a556:	4b86      	ldr	r3, [pc, #536]	; (801a770 <MX_LWIP_Init+0x334>)
 801a558:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801a55a:	4b82      	ldr	r3, [pc, #520]	; (801a764 <MX_LWIP_Init+0x328>)
 801a55c:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801a560:	4b83      	ldr	r3, [pc, #524]	; (801a770 <MX_LWIP_Init+0x334>)
 801a562:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801a564:	4b7f      	ldr	r3, [pc, #508]	; (801a764 <MX_LWIP_Init+0x328>)
 801a566:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801a56a:	4b81      	ldr	r3, [pc, #516]	; (801a770 <MX_LWIP_Init+0x334>)
 801a56c:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801a56e:	4b80      	ldr	r3, [pc, #512]	; (801a770 <MX_LWIP_Init+0x334>)
 801a570:	2201      	movs	r2, #1
 801a572:	70da      	strb	r2, [r3, #3]
		break;
 801a574:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801a576:	f000 fd42 	bl	801affe <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801a57a:	4b7b      	ldr	r3, [pc, #492]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a57c:	781b      	ldrb	r3, [r3, #0]
 801a57e:	061a      	lsls	r2, r3, #24
 801a580:	4b79      	ldr	r3, [pc, #484]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a582:	785b      	ldrb	r3, [r3, #1]
 801a584:	041b      	lsls	r3, r3, #16
 801a586:	431a      	orrs	r2, r3
 801a588:	4b77      	ldr	r3, [pc, #476]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a58a:	789b      	ldrb	r3, [r3, #2]
 801a58c:	021b      	lsls	r3, r3, #8
 801a58e:	4313      	orrs	r3, r2
 801a590:	4a75      	ldr	r2, [pc, #468]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a592:	78d2      	ldrb	r2, [r2, #3]
 801a594:	4313      	orrs	r3, r2
 801a596:	061a      	lsls	r2, r3, #24
 801a598:	4b73      	ldr	r3, [pc, #460]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a59a:	781b      	ldrb	r3, [r3, #0]
 801a59c:	0619      	lsls	r1, r3, #24
 801a59e:	4b72      	ldr	r3, [pc, #456]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5a0:	785b      	ldrb	r3, [r3, #1]
 801a5a2:	041b      	lsls	r3, r3, #16
 801a5a4:	4319      	orrs	r1, r3
 801a5a6:	4b70      	ldr	r3, [pc, #448]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5a8:	789b      	ldrb	r3, [r3, #2]
 801a5aa:	021b      	lsls	r3, r3, #8
 801a5ac:	430b      	orrs	r3, r1
 801a5ae:	496e      	ldr	r1, [pc, #440]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5b0:	78c9      	ldrb	r1, [r1, #3]
 801a5b2:	430b      	orrs	r3, r1
 801a5b4:	021b      	lsls	r3, r3, #8
 801a5b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a5ba:	431a      	orrs	r2, r3
 801a5bc:	4b6a      	ldr	r3, [pc, #424]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5be:	781b      	ldrb	r3, [r3, #0]
 801a5c0:	0619      	lsls	r1, r3, #24
 801a5c2:	4b69      	ldr	r3, [pc, #420]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5c4:	785b      	ldrb	r3, [r3, #1]
 801a5c6:	041b      	lsls	r3, r3, #16
 801a5c8:	4319      	orrs	r1, r3
 801a5ca:	4b67      	ldr	r3, [pc, #412]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5cc:	789b      	ldrb	r3, [r3, #2]
 801a5ce:	021b      	lsls	r3, r3, #8
 801a5d0:	430b      	orrs	r3, r1
 801a5d2:	4965      	ldr	r1, [pc, #404]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5d4:	78c9      	ldrb	r1, [r1, #3]
 801a5d6:	430b      	orrs	r3, r1
 801a5d8:	0a1b      	lsrs	r3, r3, #8
 801a5da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a5de:	431a      	orrs	r2, r3
 801a5e0:	4b61      	ldr	r3, [pc, #388]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5e2:	781b      	ldrb	r3, [r3, #0]
 801a5e4:	0619      	lsls	r1, r3, #24
 801a5e6:	4b60      	ldr	r3, [pc, #384]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5e8:	785b      	ldrb	r3, [r3, #1]
 801a5ea:	041b      	lsls	r3, r3, #16
 801a5ec:	4319      	orrs	r1, r3
 801a5ee:	4b5e      	ldr	r3, [pc, #376]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5f0:	789b      	ldrb	r3, [r3, #2]
 801a5f2:	021b      	lsls	r3, r3, #8
 801a5f4:	430b      	orrs	r3, r1
 801a5f6:	495c      	ldr	r1, [pc, #368]	; (801a768 <MX_LWIP_Init+0x32c>)
 801a5f8:	78c9      	ldrb	r1, [r1, #3]
 801a5fa:	430b      	orrs	r3, r1
 801a5fc:	0e1b      	lsrs	r3, r3, #24
 801a5fe:	4313      	orrs	r3, r2
 801a600:	4a5c      	ldr	r2, [pc, #368]	; (801a774 <MX_LWIP_Init+0x338>)
 801a602:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801a604:	4b59      	ldr	r3, [pc, #356]	; (801a76c <MX_LWIP_Init+0x330>)
 801a606:	781b      	ldrb	r3, [r3, #0]
 801a608:	061a      	lsls	r2, r3, #24
 801a60a:	4b58      	ldr	r3, [pc, #352]	; (801a76c <MX_LWIP_Init+0x330>)
 801a60c:	785b      	ldrb	r3, [r3, #1]
 801a60e:	041b      	lsls	r3, r3, #16
 801a610:	431a      	orrs	r2, r3
 801a612:	4b56      	ldr	r3, [pc, #344]	; (801a76c <MX_LWIP_Init+0x330>)
 801a614:	789b      	ldrb	r3, [r3, #2]
 801a616:	021b      	lsls	r3, r3, #8
 801a618:	4313      	orrs	r3, r2
 801a61a:	4a54      	ldr	r2, [pc, #336]	; (801a76c <MX_LWIP_Init+0x330>)
 801a61c:	78d2      	ldrb	r2, [r2, #3]
 801a61e:	4313      	orrs	r3, r2
 801a620:	061a      	lsls	r2, r3, #24
 801a622:	4b52      	ldr	r3, [pc, #328]	; (801a76c <MX_LWIP_Init+0x330>)
 801a624:	781b      	ldrb	r3, [r3, #0]
 801a626:	0619      	lsls	r1, r3, #24
 801a628:	4b50      	ldr	r3, [pc, #320]	; (801a76c <MX_LWIP_Init+0x330>)
 801a62a:	785b      	ldrb	r3, [r3, #1]
 801a62c:	041b      	lsls	r3, r3, #16
 801a62e:	4319      	orrs	r1, r3
 801a630:	4b4e      	ldr	r3, [pc, #312]	; (801a76c <MX_LWIP_Init+0x330>)
 801a632:	789b      	ldrb	r3, [r3, #2]
 801a634:	021b      	lsls	r3, r3, #8
 801a636:	430b      	orrs	r3, r1
 801a638:	494c      	ldr	r1, [pc, #304]	; (801a76c <MX_LWIP_Init+0x330>)
 801a63a:	78c9      	ldrb	r1, [r1, #3]
 801a63c:	430b      	orrs	r3, r1
 801a63e:	021b      	lsls	r3, r3, #8
 801a640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a644:	431a      	orrs	r2, r3
 801a646:	4b49      	ldr	r3, [pc, #292]	; (801a76c <MX_LWIP_Init+0x330>)
 801a648:	781b      	ldrb	r3, [r3, #0]
 801a64a:	0619      	lsls	r1, r3, #24
 801a64c:	4b47      	ldr	r3, [pc, #284]	; (801a76c <MX_LWIP_Init+0x330>)
 801a64e:	785b      	ldrb	r3, [r3, #1]
 801a650:	041b      	lsls	r3, r3, #16
 801a652:	4319      	orrs	r1, r3
 801a654:	4b45      	ldr	r3, [pc, #276]	; (801a76c <MX_LWIP_Init+0x330>)
 801a656:	789b      	ldrb	r3, [r3, #2]
 801a658:	021b      	lsls	r3, r3, #8
 801a65a:	430b      	orrs	r3, r1
 801a65c:	4943      	ldr	r1, [pc, #268]	; (801a76c <MX_LWIP_Init+0x330>)
 801a65e:	78c9      	ldrb	r1, [r1, #3]
 801a660:	430b      	orrs	r3, r1
 801a662:	0a1b      	lsrs	r3, r3, #8
 801a664:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a668:	431a      	orrs	r2, r3
 801a66a:	4b40      	ldr	r3, [pc, #256]	; (801a76c <MX_LWIP_Init+0x330>)
 801a66c:	781b      	ldrb	r3, [r3, #0]
 801a66e:	0619      	lsls	r1, r3, #24
 801a670:	4b3e      	ldr	r3, [pc, #248]	; (801a76c <MX_LWIP_Init+0x330>)
 801a672:	785b      	ldrb	r3, [r3, #1]
 801a674:	041b      	lsls	r3, r3, #16
 801a676:	4319      	orrs	r1, r3
 801a678:	4b3c      	ldr	r3, [pc, #240]	; (801a76c <MX_LWIP_Init+0x330>)
 801a67a:	789b      	ldrb	r3, [r3, #2]
 801a67c:	021b      	lsls	r3, r3, #8
 801a67e:	430b      	orrs	r3, r1
 801a680:	493a      	ldr	r1, [pc, #232]	; (801a76c <MX_LWIP_Init+0x330>)
 801a682:	78c9      	ldrb	r1, [r1, #3]
 801a684:	430b      	orrs	r3, r1
 801a686:	0e1b      	lsrs	r3, r3, #24
 801a688:	4313      	orrs	r3, r2
 801a68a:	4a3b      	ldr	r2, [pc, #236]	; (801a778 <MX_LWIP_Init+0x33c>)
 801a68c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801a68e:	4b38      	ldr	r3, [pc, #224]	; (801a770 <MX_LWIP_Init+0x334>)
 801a690:	781b      	ldrb	r3, [r3, #0]
 801a692:	061a      	lsls	r2, r3, #24
 801a694:	4b36      	ldr	r3, [pc, #216]	; (801a770 <MX_LWIP_Init+0x334>)
 801a696:	785b      	ldrb	r3, [r3, #1]
 801a698:	041b      	lsls	r3, r3, #16
 801a69a:	431a      	orrs	r2, r3
 801a69c:	4b34      	ldr	r3, [pc, #208]	; (801a770 <MX_LWIP_Init+0x334>)
 801a69e:	789b      	ldrb	r3, [r3, #2]
 801a6a0:	021b      	lsls	r3, r3, #8
 801a6a2:	4313      	orrs	r3, r2
 801a6a4:	4a32      	ldr	r2, [pc, #200]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6a6:	78d2      	ldrb	r2, [r2, #3]
 801a6a8:	4313      	orrs	r3, r2
 801a6aa:	061a      	lsls	r2, r3, #24
 801a6ac:	4b30      	ldr	r3, [pc, #192]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6ae:	781b      	ldrb	r3, [r3, #0]
 801a6b0:	0619      	lsls	r1, r3, #24
 801a6b2:	4b2f      	ldr	r3, [pc, #188]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6b4:	785b      	ldrb	r3, [r3, #1]
 801a6b6:	041b      	lsls	r3, r3, #16
 801a6b8:	4319      	orrs	r1, r3
 801a6ba:	4b2d      	ldr	r3, [pc, #180]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6bc:	789b      	ldrb	r3, [r3, #2]
 801a6be:	021b      	lsls	r3, r3, #8
 801a6c0:	430b      	orrs	r3, r1
 801a6c2:	492b      	ldr	r1, [pc, #172]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6c4:	78c9      	ldrb	r1, [r1, #3]
 801a6c6:	430b      	orrs	r3, r1
 801a6c8:	021b      	lsls	r3, r3, #8
 801a6ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801a6ce:	431a      	orrs	r2, r3
 801a6d0:	4b27      	ldr	r3, [pc, #156]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6d2:	781b      	ldrb	r3, [r3, #0]
 801a6d4:	0619      	lsls	r1, r3, #24
 801a6d6:	4b26      	ldr	r3, [pc, #152]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6d8:	785b      	ldrb	r3, [r3, #1]
 801a6da:	041b      	lsls	r3, r3, #16
 801a6dc:	4319      	orrs	r1, r3
 801a6de:	4b24      	ldr	r3, [pc, #144]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6e0:	789b      	ldrb	r3, [r3, #2]
 801a6e2:	021b      	lsls	r3, r3, #8
 801a6e4:	430b      	orrs	r3, r1
 801a6e6:	4922      	ldr	r1, [pc, #136]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6e8:	78c9      	ldrb	r1, [r1, #3]
 801a6ea:	430b      	orrs	r3, r1
 801a6ec:	0a1b      	lsrs	r3, r3, #8
 801a6ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a6f2:	431a      	orrs	r2, r3
 801a6f4:	4b1e      	ldr	r3, [pc, #120]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6f6:	781b      	ldrb	r3, [r3, #0]
 801a6f8:	0619      	lsls	r1, r3, #24
 801a6fa:	4b1d      	ldr	r3, [pc, #116]	; (801a770 <MX_LWIP_Init+0x334>)
 801a6fc:	785b      	ldrb	r3, [r3, #1]
 801a6fe:	041b      	lsls	r3, r3, #16
 801a700:	4319      	orrs	r1, r3
 801a702:	4b1b      	ldr	r3, [pc, #108]	; (801a770 <MX_LWIP_Init+0x334>)
 801a704:	789b      	ldrb	r3, [r3, #2]
 801a706:	021b      	lsls	r3, r3, #8
 801a708:	430b      	orrs	r3, r1
 801a70a:	4919      	ldr	r1, [pc, #100]	; (801a770 <MX_LWIP_Init+0x334>)
 801a70c:	78c9      	ldrb	r1, [r1, #3]
 801a70e:	430b      	orrs	r3, r1
 801a710:	0e1b      	lsrs	r3, r3, #24
 801a712:	4313      	orrs	r3, r2
 801a714:	4a19      	ldr	r2, [pc, #100]	; (801a77c <MX_LWIP_Init+0x340>)
 801a716:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801a718:	4b19      	ldr	r3, [pc, #100]	; (801a780 <MX_LWIP_Init+0x344>)
 801a71a:	9302      	str	r3, [sp, #8]
 801a71c:	4b19      	ldr	r3, [pc, #100]	; (801a784 <MX_LWIP_Init+0x348>)
 801a71e:	9301      	str	r3, [sp, #4]
 801a720:	2300      	movs	r3, #0
 801a722:	9300      	str	r3, [sp, #0]
 801a724:	4b15      	ldr	r3, [pc, #84]	; (801a77c <MX_LWIP_Init+0x340>)
 801a726:	4a14      	ldr	r2, [pc, #80]	; (801a778 <MX_LWIP_Init+0x33c>)
 801a728:	4912      	ldr	r1, [pc, #72]	; (801a774 <MX_LWIP_Init+0x338>)
 801a72a:	4817      	ldr	r0, [pc, #92]	; (801a788 <MX_LWIP_Init+0x34c>)
 801a72c:	f001 f998 	bl	801ba60 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801a730:	4815      	ldr	r0, [pc, #84]	; (801a788 <MX_LWIP_Init+0x34c>)
 801a732:	f001 fb49 	bl	801bdc8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801a736:	4b14      	ldr	r3, [pc, #80]	; (801a788 <MX_LWIP_Init+0x34c>)
 801a738:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a73c:	089b      	lsrs	r3, r3, #2
 801a73e:	f003 0301 	and.w	r3, r3, #1
 801a742:	b2db      	uxtb	r3, r3
 801a744:	2b00      	cmp	r3, #0
 801a746:	d003      	beq.n	801a750 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801a748:	480f      	ldr	r0, [pc, #60]	; (801a788 <MX_LWIP_Init+0x34c>)
 801a74a:	f001 fb4d 	bl	801bde8 <netif_set_up>
 801a74e:	e002      	b.n	801a756 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801a750:	480d      	ldr	r0, [pc, #52]	; (801a788 <MX_LWIP_Init+0x34c>)
 801a752:	f001 fbb5 	bl	801bec0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801a756:	490d      	ldr	r1, [pc, #52]	; (801a78c <MX_LWIP_Init+0x350>)
 801a758:	480b      	ldr	r0, [pc, #44]	; (801a788 <MX_LWIP_Init+0x34c>)
 801a75a:	f001 fc47 	bl	801bfec <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801a75e:	46bd      	mov	sp, r7
 801a760:	bd80      	pop	{r7, pc}
 801a762:	bf00      	nop
 801a764:	20000304 	.word	0x20000304
 801a768:	2000b15c 	.word	0x2000b15c
 801a76c:	2000b160 	.word	0x2000b160
 801a770:	2000b164 	.word	0x2000b164
 801a774:	2000b150 	.word	0x2000b150
 801a778:	2000b154 	.word	0x2000b154
 801a77c:	2000b158 	.word	0x2000b158
 801a780:	0801fda9 	.word	0x0801fda9
 801a784:	0801ab1d 	.word	0x0801ab1d
 801a788:	2000b110 	.word	0x2000b110
 801a78c:	0801a7e1 	.word	0x0801a7e1

0801a790 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801a790:	b580      	push	{r7, lr}
 801a792:	b082      	sub	sp, #8
 801a794:	af00      	add	r7, sp, #0
 801a796:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801a798:	f7f8 fd26 	bl	80131e8 <HAL_GetTick>
 801a79c:	4602      	mov	r2, r0
 801a79e:	4b08      	ldr	r3, [pc, #32]	; (801a7c0 <Ethernet_Link_Periodic_Handle+0x30>)
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	1ad3      	subs	r3, r2, r3
 801a7a4:	2b63      	cmp	r3, #99	; 0x63
 801a7a6:	d907      	bls.n	801a7b8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801a7a8:	f7f8 fd1e 	bl	80131e8 <HAL_GetTick>
 801a7ac:	4603      	mov	r3, r0
 801a7ae:	4a04      	ldr	r2, [pc, #16]	; (801a7c0 <Ethernet_Link_Periodic_Handle+0x30>)
 801a7b0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801a7b2:	6878      	ldr	r0, [r7, #4]
 801a7b4:	f000 fb10 	bl	801add8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801a7b8:	bf00      	nop
 801a7ba:	3708      	adds	r7, #8
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	2000b10c 	.word	0x2000b10c

0801a7c4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801a7c8:	4804      	ldr	r0, [pc, #16]	; (801a7dc <MX_LWIP_Process+0x18>)
 801a7ca:	f000 f987 	bl	801aadc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801a7ce:	f002 fb83 	bl	801ced8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801a7d2:	4802      	ldr	r0, [pc, #8]	; (801a7dc <MX_LWIP_Process+0x18>)
 801a7d4:	f7ff ffdc 	bl	801a790 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801a7d8:	bf00      	nop
 801a7da:	bd80      	pop	{r7, pc}
 801a7dc:	2000b110 	.word	0x2000b110

0801a7e0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801a7e0:	b480      	push	{r7}
 801a7e2:	b083      	sub	sp, #12
 801a7e4:	af00      	add	r7, sp, #0
 801a7e6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801a7e8:	bf00      	nop
 801a7ea:	370c      	adds	r7, #12
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f2:	4770      	bx	lr

0801a7f4 <SCB_InvalidateDCache_by_Addr>:
{
 801a7f4:	b480      	push	{r7}
 801a7f6:	b087      	sub	sp, #28
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
 801a7fc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801a7fe:	683b      	ldr	r3, [r7, #0]
 801a800:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801a806:	2320      	movs	r3, #32
 801a808:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801a80a:	f3bf 8f4f 	dsb	sy
}
 801a80e:	bf00      	nop
    while (op_size > 0) {
 801a810:	e00b      	b.n	801a82a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801a812:	4a0d      	ldr	r2, [pc, #52]	; (801a848 <SCB_InvalidateDCache_by_Addr+0x54>)
 801a814:	693b      	ldr	r3, [r7, #16]
 801a816:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	693a      	ldr	r2, [r7, #16]
 801a81e:	4413      	add	r3, r2
 801a820:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801a822:	697a      	ldr	r2, [r7, #20]
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	1ad3      	subs	r3, r2, r3
 801a828:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801a82a:	697b      	ldr	r3, [r7, #20]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	dcf0      	bgt.n	801a812 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801a830:	f3bf 8f4f 	dsb	sy
}
 801a834:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801a836:	f3bf 8f6f 	isb	sy
}
 801a83a:	bf00      	nop
}
 801a83c:	bf00      	nop
 801a83e:	371c      	adds	r7, #28
 801a840:	46bd      	mov	sp, r7
 801a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a846:	4770      	bx	lr
 801a848:	e000ed00 	.word	0xe000ed00

0801a84c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b084      	sub	sp, #16
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801a854:	2300      	movs	r3, #0
 801a856:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801a858:	4b47      	ldr	r3, [pc, #284]	; (801a978 <low_level_init+0x12c>)
 801a85a:	4a48      	ldr	r2, [pc, #288]	; (801a97c <low_level_init+0x130>)
 801a85c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801a85e:	2300      	movs	r3, #0
 801a860:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801a862:	2380      	movs	r3, #128	; 0x80
 801a864:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801a866:	23e1      	movs	r3, #225	; 0xe1
 801a868:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801a86a:	2300      	movs	r3, #0
 801a86c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801a86e:	2300      	movs	r3, #0
 801a870:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801a872:	2300      	movs	r3, #0
 801a874:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801a876:	4a40      	ldr	r2, [pc, #256]	; (801a978 <low_level_init+0x12c>)
 801a878:	f107 0308 	add.w	r3, r7, #8
 801a87c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801a87e:	4b3e      	ldr	r3, [pc, #248]	; (801a978 <low_level_init+0x12c>)
 801a880:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801a884:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801a886:	4b3c      	ldr	r3, [pc, #240]	; (801a978 <low_level_init+0x12c>)
 801a888:	4a3d      	ldr	r2, [pc, #244]	; (801a980 <low_level_init+0x134>)
 801a88a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801a88c:	4b3a      	ldr	r3, [pc, #232]	; (801a978 <low_level_init+0x12c>)
 801a88e:	4a3d      	ldr	r2, [pc, #244]	; (801a984 <low_level_init+0x138>)
 801a890:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801a892:	4b39      	ldr	r3, [pc, #228]	; (801a978 <low_level_init+0x12c>)
 801a894:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801a898:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801a89a:	4b3b      	ldr	r3, [pc, #236]	; (801a988 <low_level_init+0x13c>)
 801a89c:	781b      	ldrb	r3, [r3, #0]
 801a89e:	2b01      	cmp	r3, #1
 801a8a0:	d002      	beq.n	801a8a8 <low_level_init+0x5c>
 801a8a2:	2b02      	cmp	r3, #2
 801a8a4:	d004      	beq.n	801a8b0 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801a8a6:	e063      	b.n	801a970 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801a8a8:	4b33      	ldr	r3, [pc, #204]	; (801a978 <low_level_init+0x12c>)
 801a8aa:	4a38      	ldr	r2, [pc, #224]	; (801a98c <low_level_init+0x140>)
 801a8ac:	605a      	str	r2, [r3, #4]
		break;
 801a8ae:	e003      	b.n	801a8b8 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801a8b0:	4b31      	ldr	r3, [pc, #196]	; (801a978 <low_level_init+0x12c>)
 801a8b2:	4a37      	ldr	r2, [pc, #220]	; (801a990 <low_level_init+0x144>)
 801a8b4:	605a      	str	r2, [r3, #4]
		break;
 801a8b6:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801a8b8:	482f      	ldr	r0, [pc, #188]	; (801a978 <low_level_init+0x12c>)
 801a8ba:	f7f9 fdbb 	bl	8014434 <HAL_ETH_Init>
 801a8be:	4603      	mov	r3, r0
 801a8c0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801a8c2:	2238      	movs	r2, #56	; 0x38
 801a8c4:	2100      	movs	r1, #0
 801a8c6:	4833      	ldr	r0, [pc, #204]	; (801a994 <low_level_init+0x148>)
 801a8c8:	f005 fbb0 	bl	802002c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801a8cc:	4b31      	ldr	r3, [pc, #196]	; (801a994 <low_level_init+0x148>)
 801a8ce:	2221      	movs	r2, #33	; 0x21
 801a8d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801a8d2:	4b30      	ldr	r3, [pc, #192]	; (801a994 <low_level_init+0x148>)
 801a8d4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801a8d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801a8da:	4b2e      	ldr	r3, [pc, #184]	; (801a994 <low_level_init+0x148>)
 801a8dc:	2200      	movs	r2, #0
 801a8de:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801a8e0:	482d      	ldr	r0, [pc, #180]	; (801a998 <low_level_init+0x14c>)
 801a8e2:	f000 ff3d 	bl	801b760 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	2206      	movs	r2, #6
 801a8ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801a8ee:	4b22      	ldr	r3, [pc, #136]	; (801a978 <low_level_init+0x12c>)
 801a8f0:	685b      	ldr	r3, [r3, #4]
 801a8f2:	781a      	ldrb	r2, [r3, #0]
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801a8fa:	4b1f      	ldr	r3, [pc, #124]	; (801a978 <low_level_init+0x12c>)
 801a8fc:	685b      	ldr	r3, [r3, #4]
 801a8fe:	785a      	ldrb	r2, [r3, #1]
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801a906:	4b1c      	ldr	r3, [pc, #112]	; (801a978 <low_level_init+0x12c>)
 801a908:	685b      	ldr	r3, [r3, #4]
 801a90a:	789a      	ldrb	r2, [r3, #2]
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801a912:	4b19      	ldr	r3, [pc, #100]	; (801a978 <low_level_init+0x12c>)
 801a914:	685b      	ldr	r3, [r3, #4]
 801a916:	78da      	ldrb	r2, [r3, #3]
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801a91e:	4b16      	ldr	r3, [pc, #88]	; (801a978 <low_level_init+0x12c>)
 801a920:	685b      	ldr	r3, [r3, #4]
 801a922:	791a      	ldrb	r2, [r3, #4]
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801a92a:	4b13      	ldr	r3, [pc, #76]	; (801a978 <low_level_init+0x12c>)
 801a92c:	685b      	ldr	r3, [r3, #4]
 801a92e:	795a      	ldrb	r2, [r3, #5]
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801a93c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a944:	f043 030a 	orr.w	r3, r3, #10
 801a948:	b2da      	uxtb	r2, r3
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801a950:	4912      	ldr	r1, [pc, #72]	; (801a99c <low_level_init+0x150>)
 801a952:	4813      	ldr	r0, [pc, #76]	; (801a9a0 <low_level_init+0x154>)
 801a954:	f7f8 fa87 	bl	8012e66 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801a958:	4811      	ldr	r0, [pc, #68]	; (801a9a0 <low_level_init+0x154>)
 801a95a:	f7f8 fab6 	bl	8012eca <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801a95e:	7bfb      	ldrb	r3, [r7, #15]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d103      	bne.n	801a96c <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801a964:	6878      	ldr	r0, [r7, #4]
 801a966:	f000 fa37 	bl	801add8 <ethernet_link_check_state>
 801a96a:	e001      	b.n	801a970 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801a96c:	f7f6 feb0 	bl	80116d0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801a970:	3710      	adds	r7, #16
 801a972:	46bd      	mov	sp, r7
 801a974:	bd80      	pop	{r7, pc}
 801a976:	bf00      	nop
 801a978:	2000fa64 	.word	0x2000fa64
 801a97c:	40028000 	.word	0x40028000
 801a980:	20000244 	.word	0x20000244
 801a984:	200001a4 	.word	0x200001a4
 801a988:	20000304 	.word	0x20000304
 801a98c:	20000343 	.word	0x20000343
 801a990:	200005b1 	.word	0x200005b1
 801a994:	2000fb14 	.word	0x2000fb14
 801a998:	08026934 	.word	0x08026934
 801a99c:	20000128 	.word	0x20000128
 801a9a0:	2000fb4c 	.word	0x2000fb4c

0801a9a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b092      	sub	sp, #72	; 0x48
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
 801a9ac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801a9bc:	f107 030c 	add.w	r3, r7, #12
 801a9c0:	2230      	movs	r2, #48	; 0x30
 801a9c2:	2100      	movs	r1, #0
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	f005 fb31 	bl	802002c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801a9ca:	f107 030c 	add.w	r3, r7, #12
 801a9ce:	2230      	movs	r2, #48	; 0x30
 801a9d0:	2100      	movs	r1, #0
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f005 fb2a 	bl	802002c <memset>

  for(q = p; q != NULL; q = q->next)
 801a9d8:	683b      	ldr	r3, [r7, #0]
 801a9da:	643b      	str	r3, [r7, #64]	; 0x40
 801a9dc:	e045      	b.n	801aa6a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801a9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a9e0:	2b03      	cmp	r3, #3
 801a9e2:	d902      	bls.n	801a9ea <low_level_output+0x46>
      return ERR_IF;
 801a9e4:	f06f 030b 	mvn.w	r3, #11
 801a9e8:	e055      	b.n	801aa96 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801a9ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9ec:	6859      	ldr	r1, [r3, #4]
 801a9ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a9f0:	4613      	mov	r3, r2
 801a9f2:	005b      	lsls	r3, r3, #1
 801a9f4:	4413      	add	r3, r2
 801a9f6:	009b      	lsls	r3, r3, #2
 801a9f8:	3348      	adds	r3, #72	; 0x48
 801a9fa:	443b      	add	r3, r7
 801a9fc:	3b3c      	subs	r3, #60	; 0x3c
 801a9fe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801aa00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa02:	895b      	ldrh	r3, [r3, #10]
 801aa04:	4619      	mov	r1, r3
 801aa06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801aa08:	4613      	mov	r3, r2
 801aa0a:	005b      	lsls	r3, r3, #1
 801aa0c:	4413      	add	r3, r2
 801aa0e:	009b      	lsls	r3, r3, #2
 801aa10:	3348      	adds	r3, #72	; 0x48
 801aa12:	443b      	add	r3, r7
 801aa14:	3b38      	subs	r3, #56	; 0x38
 801aa16:	6019      	str	r1, [r3, #0]

    if(i>0)
 801aa18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d011      	beq.n	801aa42 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801aa1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa20:	1e5a      	subs	r2, r3, #1
 801aa22:	f107 000c 	add.w	r0, r7, #12
 801aa26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801aa28:	460b      	mov	r3, r1
 801aa2a:	005b      	lsls	r3, r3, #1
 801aa2c:	440b      	add	r3, r1
 801aa2e:	009b      	lsls	r3, r3, #2
 801aa30:	18c1      	adds	r1, r0, r3
 801aa32:	4613      	mov	r3, r2
 801aa34:	005b      	lsls	r3, r3, #1
 801aa36:	4413      	add	r3, r2
 801aa38:	009b      	lsls	r3, r3, #2
 801aa3a:	3348      	adds	r3, #72	; 0x48
 801aa3c:	443b      	add	r3, r7
 801aa3e:	3b34      	subs	r3, #52	; 0x34
 801aa40:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801aa42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d109      	bne.n	801aa5e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801aa4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801aa4c:	4613      	mov	r3, r2
 801aa4e:	005b      	lsls	r3, r3, #1
 801aa50:	4413      	add	r3, r2
 801aa52:	009b      	lsls	r3, r3, #2
 801aa54:	3348      	adds	r3, #72	; 0x48
 801aa56:	443b      	add	r3, r7
 801aa58:	3b34      	subs	r3, #52	; 0x34
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	601a      	str	r2, [r3, #0]
    }

    i++;
 801aa5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801aa60:	3301      	adds	r3, #1
 801aa62:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801aa64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	643b      	str	r3, [r7, #64]	; 0x40
 801aa6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d1b6      	bne.n	801a9de <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	891b      	ldrh	r3, [r3, #8]
 801aa74:	461a      	mov	r2, r3
 801aa76:	4b0a      	ldr	r3, [pc, #40]	; (801aaa0 <low_level_output+0xfc>)
 801aa78:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801aa7a:	4a09      	ldr	r2, [pc, #36]	; (801aaa0 <low_level_output+0xfc>)
 801aa7c:	f107 030c 	add.w	r3, r7, #12
 801aa80:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801aa82:	4a07      	ldr	r2, [pc, #28]	; (801aaa0 <low_level_output+0xfc>)
 801aa84:	683b      	ldr	r3, [r7, #0]
 801aa86:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801aa88:	2214      	movs	r2, #20
 801aa8a:	4905      	ldr	r1, [pc, #20]	; (801aaa0 <low_level_output+0xfc>)
 801aa8c:	4805      	ldr	r0, [pc, #20]	; (801aaa4 <low_level_output+0x100>)
 801aa8e:	f7f9 fe05 	bl	801469c <HAL_ETH_Transmit>

  return errval;
 801aa92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801aa96:	4618      	mov	r0, r3
 801aa98:	3748      	adds	r7, #72	; 0x48
 801aa9a:	46bd      	mov	sp, r7
 801aa9c:	bd80      	pop	{r7, pc}
 801aa9e:	bf00      	nop
 801aaa0:	2000fb14 	.word	0x2000fb14
 801aaa4:	2000fa64 	.word	0x2000fa64

0801aaa8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b084      	sub	sp, #16
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801aab0:	2300      	movs	r3, #0
 801aab2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801aab4:	4b07      	ldr	r3, [pc, #28]	; (801aad4 <low_level_input+0x2c>)
 801aab6:	781b      	ldrb	r3, [r3, #0]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d105      	bne.n	801aac8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801aabc:	f107 030c 	add.w	r3, r7, #12
 801aac0:	4619      	mov	r1, r3
 801aac2:	4805      	ldr	r0, [pc, #20]	; (801aad8 <low_level_input+0x30>)
 801aac4:	f7f9 fe7e 	bl	80147c4 <HAL_ETH_ReadData>
  }

  return p;
 801aac8:	68fb      	ldr	r3, [r7, #12]
}
 801aaca:	4618      	mov	r0, r3
 801aacc:	3710      	adds	r7, #16
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd80      	pop	{r7, pc}
 801aad2:	bf00      	nop
 801aad4:	2000fa60 	.word	0x2000fa60
 801aad8:	2000fa64 	.word	0x2000fa64

0801aadc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b084      	sub	sp, #16
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801aae4:	2300      	movs	r3, #0
 801aae6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801aae8:	6878      	ldr	r0, [r7, #4]
 801aaea:	f7ff ffdd 	bl	801aaa8 <low_level_input>
 801aaee:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801aaf0:	68fb      	ldr	r3, [r7, #12]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d00a      	beq.n	801ab0c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	691b      	ldr	r3, [r3, #16]
 801aafa:	6879      	ldr	r1, [r7, #4]
 801aafc:	68f8      	ldr	r0, [r7, #12]
 801aafe:	4798      	blx	r3
 801ab00:	4603      	mov	r3, r0
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d002      	beq.n	801ab0c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801ab06:	68f8      	ldr	r0, [r7, #12]
 801ab08:	f001 fe40 	bl	801c78c <pbuf_free>
      }
    }
  } while(p!=NULL);
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d1ea      	bne.n	801aae8 <ethernetif_input+0xc>
}
 801ab12:	bf00      	nop
 801ab14:	bf00      	nop
 801ab16:	3710      	adds	r7, #16
 801ab18:	46bd      	mov	sp, r7
 801ab1a:	bd80      	pop	{r7, pc}

0801ab1c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801ab1c:	b580      	push	{r7, lr}
 801ab1e:	b082      	sub	sp, #8
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d106      	bne.n	801ab38 <ethernetif_init+0x1c>
 801ab2a:	4b0e      	ldr	r3, [pc, #56]	; (801ab64 <ethernetif_init+0x48>)
 801ab2c:	f240 1287 	movw	r2, #391	; 0x187
 801ab30:	490d      	ldr	r1, [pc, #52]	; (801ab68 <ethernetif_init+0x4c>)
 801ab32:	480e      	ldr	r0, [pc, #56]	; (801ab6c <ethernetif_init+0x50>)
 801ab34:	f005 fb62 	bl	80201fc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	2273      	movs	r2, #115	; 0x73
 801ab3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	2274      	movs	r2, #116	; 0x74
 801ab44:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	4a09      	ldr	r2, [pc, #36]	; (801ab70 <ethernetif_init+0x54>)
 801ab4c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	4a08      	ldr	r2, [pc, #32]	; (801ab74 <ethernetif_init+0x58>)
 801ab52:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801ab54:	6878      	ldr	r0, [r7, #4]
 801ab56:	f7ff fe79 	bl	801a84c <low_level_init>

  return ERR_OK;
 801ab5a:	2300      	movs	r3, #0
}
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	3708      	adds	r7, #8
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bd80      	pop	{r7, pc}
 801ab64:	08024e8c 	.word	0x08024e8c
 801ab68:	08024ea8 	.word	0x08024ea8
 801ab6c:	08024eb8 	.word	0x08024eb8
 801ab70:	0801e139 	.word	0x0801e139
 801ab74:	0801a9a5 	.word	0x0801a9a5

0801ab78 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b084      	sub	sp, #16
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801ab84:	68f9      	ldr	r1, [r7, #12]
 801ab86:	4807      	ldr	r0, [pc, #28]	; (801aba4 <pbuf_free_custom+0x2c>)
 801ab88:	f000 fecc 	bl	801b924 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801ab8c:	4b06      	ldr	r3, [pc, #24]	; (801aba8 <pbuf_free_custom+0x30>)
 801ab8e:	781b      	ldrb	r3, [r3, #0]
 801ab90:	2b01      	cmp	r3, #1
 801ab92:	d102      	bne.n	801ab9a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801ab94:	4b04      	ldr	r3, [pc, #16]	; (801aba8 <pbuf_free_custom+0x30>)
 801ab96:	2200      	movs	r2, #0
 801ab98:	701a      	strb	r2, [r3, #0]
  }
}
 801ab9a:	bf00      	nop
 801ab9c:	3710      	adds	r7, #16
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bd80      	pop	{r7, pc}
 801aba2:	bf00      	nop
 801aba4:	08026934 	.word	0x08026934
 801aba8:	2000fa60 	.word	0x2000fa60

0801abac <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801abac:	b580      	push	{r7, lr}
 801abae:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801abb0:	f7f8 fb1a 	bl	80131e8 <HAL_GetTick>
 801abb4:	4603      	mov	r3, r0
}
 801abb6:	4618      	mov	r0, r3
 801abb8:	bd80      	pop	{r7, pc}
	...

0801abbc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	b08e      	sub	sp, #56	; 0x38
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801abc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801abc8:	2200      	movs	r2, #0
 801abca:	601a      	str	r2, [r3, #0]
 801abcc:	605a      	str	r2, [r3, #4]
 801abce:	609a      	str	r2, [r3, #8]
 801abd0:	60da      	str	r2, [r3, #12]
 801abd2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	4a52      	ldr	r2, [pc, #328]	; (801ad24 <HAL_ETH_MspInit+0x168>)
 801abda:	4293      	cmp	r3, r2
 801abdc:	f040 809e 	bne.w	801ad1c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801abe0:	4b51      	ldr	r3, [pc, #324]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801abe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801abe4:	4a50      	ldr	r2, [pc, #320]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801abe6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801abea:	6313      	str	r3, [r2, #48]	; 0x30
 801abec:	4b4e      	ldr	r3, [pc, #312]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801abee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801abf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801abf4:	623b      	str	r3, [r7, #32]
 801abf6:	6a3b      	ldr	r3, [r7, #32]
 801abf8:	4b4b      	ldr	r3, [pc, #300]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801abfc:	4a4a      	ldr	r2, [pc, #296]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801abfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801ac02:	6313      	str	r3, [r2, #48]	; 0x30
 801ac04:	4b48      	ldr	r3, [pc, #288]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801ac0c:	61fb      	str	r3, [r7, #28]
 801ac0e:	69fb      	ldr	r3, [r7, #28]
 801ac10:	4b45      	ldr	r3, [pc, #276]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac14:	4a44      	ldr	r2, [pc, #272]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ac1a:	6313      	str	r3, [r2, #48]	; 0x30
 801ac1c:	4b42      	ldr	r3, [pc, #264]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801ac24:	61bb      	str	r3, [r7, #24]
 801ac26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801ac28:	4b3f      	ldr	r3, [pc, #252]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac2c:	4a3e      	ldr	r2, [pc, #248]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac2e:	f043 0304 	orr.w	r3, r3, #4
 801ac32:	6313      	str	r3, [r2, #48]	; 0x30
 801ac34:	4b3c      	ldr	r3, [pc, #240]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac38:	f003 0304 	and.w	r3, r3, #4
 801ac3c:	617b      	str	r3, [r7, #20]
 801ac3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ac40:	4b39      	ldr	r3, [pc, #228]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac44:	4a38      	ldr	r2, [pc, #224]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac46:	f043 0301 	orr.w	r3, r3, #1
 801ac4a:	6313      	str	r3, [r2, #48]	; 0x30
 801ac4c:	4b36      	ldr	r3, [pc, #216]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac50:	f003 0301 	and.w	r3, r3, #1
 801ac54:	613b      	str	r3, [r7, #16]
 801ac56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801ac58:	4b33      	ldr	r3, [pc, #204]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac5c:	4a32      	ldr	r2, [pc, #200]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac5e:	f043 0302 	orr.w	r3, r3, #2
 801ac62:	6313      	str	r3, [r2, #48]	; 0x30
 801ac64:	4b30      	ldr	r3, [pc, #192]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac68:	f003 0302 	and.w	r3, r3, #2
 801ac6c:	60fb      	str	r3, [r7, #12]
 801ac6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801ac70:	4b2d      	ldr	r3, [pc, #180]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac74:	4a2c      	ldr	r2, [pc, #176]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac7a:	6313      	str	r3, [r2, #48]	; 0x30
 801ac7c:	4b2a      	ldr	r3, [pc, #168]	; (801ad28 <HAL_ETH_MspInit+0x16c>)
 801ac7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ac84:	60bb      	str	r3, [r7, #8]
 801ac86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801ac88:	2332      	movs	r3, #50	; 0x32
 801ac8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ac8c:	2302      	movs	r3, #2
 801ac8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ac90:	2300      	movs	r3, #0
 801ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ac94:	2303      	movs	r3, #3
 801ac96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801ac98:	230b      	movs	r3, #11
 801ac9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801ac9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801aca0:	4619      	mov	r1, r3
 801aca2:	4822      	ldr	r0, [pc, #136]	; (801ad2c <HAL_ETH_MspInit+0x170>)
 801aca4:	f7fa fdac 	bl	8015800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801aca8:	2386      	movs	r3, #134	; 0x86
 801acaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801acac:	2302      	movs	r3, #2
 801acae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801acb0:	2300      	movs	r3, #0
 801acb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801acb4:	2303      	movs	r3, #3
 801acb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801acb8:	230b      	movs	r3, #11
 801acba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801acbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801acc0:	4619      	mov	r1, r3
 801acc2:	481b      	ldr	r0, [pc, #108]	; (801ad30 <HAL_ETH_MspInit+0x174>)
 801acc4:	f7fa fd9c 	bl	8015800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801acc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801accc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801acce:	2302      	movs	r3, #2
 801acd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801acd2:	2300      	movs	r3, #0
 801acd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801acd6:	2303      	movs	r3, #3
 801acd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801acda:	230b      	movs	r3, #11
 801acdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801acde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ace2:	4619      	mov	r1, r3
 801ace4:	4813      	ldr	r0, [pc, #76]	; (801ad34 <HAL_ETH_MspInit+0x178>)
 801ace6:	f7fa fd8b 	bl	8015800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801acea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801acee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801acf0:	2302      	movs	r3, #2
 801acf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801acf4:	2300      	movs	r3, #0
 801acf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801acf8:	2303      	movs	r3, #3
 801acfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801acfc:	230b      	movs	r3, #11
 801acfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801ad00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ad04:	4619      	mov	r1, r3
 801ad06:	480c      	ldr	r0, [pc, #48]	; (801ad38 <HAL_ETH_MspInit+0x17c>)
 801ad08:	f7fa fd7a 	bl	8015800 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801ad0c:	2200      	movs	r2, #0
 801ad0e:	2101      	movs	r1, #1
 801ad10:	203d      	movs	r0, #61	; 0x3d
 801ad12:	f7f9 fa4a 	bl	80141aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801ad16:	203d      	movs	r0, #61	; 0x3d
 801ad18:	f7f9 fa63 	bl	80141e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801ad1c:	bf00      	nop
 801ad1e:	3738      	adds	r7, #56	; 0x38
 801ad20:	46bd      	mov	sp, r7
 801ad22:	bd80      	pop	{r7, pc}
 801ad24:	40028000 	.word	0x40028000
 801ad28:	40023800 	.word	0x40023800
 801ad2c:	40020800 	.word	0x40020800
 801ad30:	40020000 	.word	0x40020000
 801ad34:	40020400 	.word	0x40020400
 801ad38:	40021800 	.word	0x40021800

0801ad3c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801ad3c:	b580      	push	{r7, lr}
 801ad3e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801ad40:	4802      	ldr	r0, [pc, #8]	; (801ad4c <ETH_PHY_IO_Init+0x10>)
 801ad42:	f7fa f903 	bl	8014f4c <HAL_ETH_SetMDIOClockRange>

  return 0;
 801ad46:	2300      	movs	r3, #0
}
 801ad48:	4618      	mov	r0, r3
 801ad4a:	bd80      	pop	{r7, pc}
 801ad4c:	2000fa64 	.word	0x2000fa64

0801ad50 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801ad50:	b480      	push	{r7}
 801ad52:	af00      	add	r7, sp, #0
  return 0;
 801ad54:	2300      	movs	r3, #0
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad5e:	4770      	bx	lr

0801ad60 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b084      	sub	sp, #16
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	60f8      	str	r0, [r7, #12]
 801ad68:	60b9      	str	r1, [r7, #8]
 801ad6a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	68ba      	ldr	r2, [r7, #8]
 801ad70:	68f9      	ldr	r1, [r7, #12]
 801ad72:	4807      	ldr	r0, [pc, #28]	; (801ad90 <ETH_PHY_IO_ReadReg+0x30>)
 801ad74:	f7f9 ff52 	bl	8014c1c <HAL_ETH_ReadPHYRegister>
 801ad78:	4603      	mov	r3, r0
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d002      	beq.n	801ad84 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801ad7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad82:	e000      	b.n	801ad86 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801ad84:	2300      	movs	r3, #0
}
 801ad86:	4618      	mov	r0, r3
 801ad88:	3710      	adds	r7, #16
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	bd80      	pop	{r7, pc}
 801ad8e:	bf00      	nop
 801ad90:	2000fa64 	.word	0x2000fa64

0801ad94 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b084      	sub	sp, #16
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	60f8      	str	r0, [r7, #12]
 801ad9c:	60b9      	str	r1, [r7, #8]
 801ad9e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	68ba      	ldr	r2, [r7, #8]
 801ada4:	68f9      	ldr	r1, [r7, #12]
 801ada6:	4807      	ldr	r0, [pc, #28]	; (801adc4 <ETH_PHY_IO_WriteReg+0x30>)
 801ada8:	f7f9 ff83 	bl	8014cb2 <HAL_ETH_WritePHYRegister>
 801adac:	4603      	mov	r3, r0
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d002      	beq.n	801adb8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801adb2:	f04f 33ff 	mov.w	r3, #4294967295
 801adb6:	e000      	b.n	801adba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801adb8:	2300      	movs	r3, #0
}
 801adba:	4618      	mov	r0, r3
 801adbc:	3710      	adds	r7, #16
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bd80      	pop	{r7, pc}
 801adc2:	bf00      	nop
 801adc4:	2000fa64 	.word	0x2000fa64

0801adc8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801adcc:	f7f8 fa0c 	bl	80131e8 <HAL_GetTick>
 801add0:	4603      	mov	r3, r0
}
 801add2:	4618      	mov	r0, r3
 801add4:	bd80      	pop	{r7, pc}
	...

0801add8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801add8:	b580      	push	{r7, lr}
 801adda:	b0a0      	sub	sp, #128	; 0x80
 801addc:	af00      	add	r7, sp, #0
 801adde:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801ade0:	f107 030c 	add.w	r3, r7, #12
 801ade4:	2264      	movs	r2, #100	; 0x64
 801ade6:	2100      	movs	r1, #0
 801ade8:	4618      	mov	r0, r3
 801adea:	f005 f91f 	bl	802002c <memset>
  int32_t PHYLinkState = 0;
 801adee:	2300      	movs	r3, #0
 801adf0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801adf2:	2300      	movs	r3, #0
 801adf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 801adf6:	2300      	movs	r3, #0
 801adf8:	67bb      	str	r3, [r7, #120]	; 0x78
 801adfa:	2300      	movs	r3, #0
 801adfc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801adfe:	483a      	ldr	r0, [pc, #232]	; (801aee8 <ethernet_link_check_state+0x110>)
 801ae00:	f7f8 f90b 	bl	801301a <DP83848_GetLinkState>
 801ae04:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ae0c:	089b      	lsrs	r3, r3, #2
 801ae0e:	f003 0301 	and.w	r3, r3, #1
 801ae12:	b2db      	uxtb	r3, r3
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d00c      	beq.n	801ae32 <ethernet_link_check_state+0x5a>
 801ae18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae1a:	2b01      	cmp	r3, #1
 801ae1c:	dc09      	bgt.n	801ae32 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801ae1e:	4833      	ldr	r0, [pc, #204]	; (801aeec <ethernet_link_check_state+0x114>)
 801ae20:	f7f9 fbe3 	bl	80145ea <HAL_ETH_Stop>
    netif_set_down(netif);
 801ae24:	6878      	ldr	r0, [r7, #4]
 801ae26:	f001 f84b 	bl	801bec0 <netif_set_down>
    netif_set_link_down(netif);
 801ae2a:	6878      	ldr	r0, [r7, #4]
 801ae2c:	f001 f8ae 	bl	801bf8c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801ae30:	e055      	b.n	801aede <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ae38:	f003 0304 	and.w	r3, r3, #4
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d14e      	bne.n	801aede <ethernet_link_check_state+0x106>
 801ae40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae42:	2b01      	cmp	r3, #1
 801ae44:	dd4b      	ble.n	801aede <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801ae46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae48:	3b02      	subs	r3, #2
 801ae4a:	2b03      	cmp	r3, #3
 801ae4c:	d82a      	bhi.n	801aea4 <ethernet_link_check_state+0xcc>
 801ae4e:	a201      	add	r2, pc, #4	; (adr r2, 801ae54 <ethernet_link_check_state+0x7c>)
 801ae50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae54:	0801ae65 	.word	0x0801ae65
 801ae58:	0801ae77 	.word	0x0801ae77
 801ae5c:	0801ae87 	.word	0x0801ae87
 801ae60:	0801ae97 	.word	0x0801ae97
      duplex = ETH_FULLDUPLEX_MODE;
 801ae64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ae68:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801ae6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801ae6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801ae70:	2301      	movs	r3, #1
 801ae72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801ae74:	e017      	b.n	801aea6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801ae76:	2300      	movs	r3, #0
 801ae78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801ae7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801ae7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801ae80:	2301      	movs	r3, #1
 801ae82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801ae84:	e00f      	b.n	801aea6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801ae86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ae8a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801ae8c:	2300      	movs	r3, #0
 801ae8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801ae90:	2301      	movs	r3, #1
 801ae92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801ae94:	e007      	b.n	801aea6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801ae96:	2300      	movs	r3, #0
 801ae98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801ae9a:	2300      	movs	r3, #0
 801ae9c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801ae9e:	2301      	movs	r3, #1
 801aea0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801aea2:	e000      	b.n	801aea6 <ethernet_link_check_state+0xce>
      break;
 801aea4:	bf00      	nop
    if(linkchanged)
 801aea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d018      	beq.n	801aede <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801aeac:	f107 030c 	add.w	r3, r7, #12
 801aeb0:	4619      	mov	r1, r3
 801aeb2:	480e      	ldr	r0, [pc, #56]	; (801aeec <ethernet_link_check_state+0x114>)
 801aeb4:	f7f9 ff46 	bl	8014d44 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801aeb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aeba:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801aebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801aebe:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801aec0:	f107 030c 	add.w	r3, r7, #12
 801aec4:	4619      	mov	r1, r3
 801aec6:	4809      	ldr	r0, [pc, #36]	; (801aeec <ethernet_link_check_state+0x114>)
 801aec8:	f7fa f826 	bl	8014f18 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801aecc:	4807      	ldr	r0, [pc, #28]	; (801aeec <ethernet_link_check_state+0x114>)
 801aece:	f7f9 fb2d 	bl	801452c <HAL_ETH_Start>
      netif_set_up(netif);
 801aed2:	6878      	ldr	r0, [r7, #4]
 801aed4:	f000 ff88 	bl	801bde8 <netif_set_up>
      netif_set_link_up(netif);
 801aed8:	6878      	ldr	r0, [r7, #4]
 801aeda:	f001 f823 	bl	801bf24 <netif_set_link_up>
}
 801aede:	bf00      	nop
 801aee0:	3780      	adds	r7, #128	; 0x80
 801aee2:	46bd      	mov	sp, r7
 801aee4:	bd80      	pop	{r7, pc}
 801aee6:	bf00      	nop
 801aee8:	2000fb4c 	.word	0x2000fb4c
 801aeec:	2000fa64 	.word	0x2000fa64

0801aef0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b086      	sub	sp, #24
 801aef4:	af02      	add	r7, sp, #8
 801aef6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801aef8:	4812      	ldr	r0, [pc, #72]	; (801af44 <HAL_ETH_RxAllocateCallback+0x54>)
 801aefa:	f000 fca5 	bl	801b848 <memp_malloc_pool>
 801aefe:	60f8      	str	r0, [r7, #12]
	if (p)
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	2b00      	cmp	r3, #0
 801af04:	d014      	beq.n	801af30 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	f103 0214 	add.w	r2, r3, #20
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	4a0d      	ldr	r2, [pc, #52]	; (801af48 <HAL_ETH_RxAllocateCallback+0x58>)
 801af14:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801af1e:	9201      	str	r2, [sp, #4]
 801af20:	9300      	str	r3, [sp, #0]
 801af22:	68fb      	ldr	r3, [r7, #12]
 801af24:	2241      	movs	r2, #65	; 0x41
 801af26:	2100      	movs	r1, #0
 801af28:	2000      	movs	r0, #0
 801af2a:	f001 fa75 	bl	801c418 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801af2e:	e005      	b.n	801af3c <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801af30:	4b06      	ldr	r3, [pc, #24]	; (801af4c <HAL_ETH_RxAllocateCallback+0x5c>)
 801af32:	2201      	movs	r2, #1
 801af34:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	2200      	movs	r2, #0
 801af3a:	601a      	str	r2, [r3, #0]
}
 801af3c:	bf00      	nop
 801af3e:	3710      	adds	r7, #16
 801af40:	46bd      	mov	sp, r7
 801af42:	bd80      	pop	{r7, pc}
 801af44:	08026934 	.word	0x08026934
 801af48:	0801ab79 	.word	0x0801ab79
 801af4c:	2000fa60 	.word	0x2000fa60

0801af50 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801af50:	b580      	push	{r7, lr}
 801af52:	b088      	sub	sp, #32
 801af54:	af00      	add	r7, sp, #0
 801af56:	60f8      	str	r0, [r7, #12]
 801af58:	60b9      	str	r1, [r7, #8]
 801af5a:	607a      	str	r2, [r7, #4]
 801af5c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801af66:	2300      	movs	r3, #0
 801af68:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	3b14      	subs	r3, #20
 801af6e:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801af70:	69fb      	ldr	r3, [r7, #28]
 801af72:	2200      	movs	r2, #0
 801af74:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801af76:	69fb      	ldr	r3, [r7, #28]
 801af78:	2200      	movs	r2, #0
 801af7a:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801af7c:	69fb      	ldr	r3, [r7, #28]
 801af7e:	887a      	ldrh	r2, [r7, #2]
 801af80:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801af82:	69bb      	ldr	r3, [r7, #24]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d103      	bne.n	801af92 <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801af8a:	69bb      	ldr	r3, [r7, #24]
 801af8c:	69fa      	ldr	r2, [r7, #28]
 801af8e:	601a      	str	r2, [r3, #0]
 801af90:	e003      	b.n	801af9a <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801af92:	697b      	ldr	r3, [r7, #20]
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	69fa      	ldr	r2, [r7, #28]
 801af98:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801af9a:	697b      	ldr	r3, [r7, #20]
 801af9c:	69fa      	ldr	r2, [r7, #28]
 801af9e:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801afa0:	69bb      	ldr	r3, [r7, #24]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	61fb      	str	r3, [r7, #28]
 801afa6:	e009      	b.n	801afbc <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801afa8:	69fb      	ldr	r3, [r7, #28]
 801afaa:	891a      	ldrh	r2, [r3, #8]
 801afac:	887b      	ldrh	r3, [r7, #2]
 801afae:	4413      	add	r3, r2
 801afb0:	b29a      	uxth	r2, r3
 801afb2:	69fb      	ldr	r3, [r7, #28]
 801afb4:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801afb6:	69fb      	ldr	r3, [r7, #28]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	61fb      	str	r3, [r7, #28]
 801afbc:	69fb      	ldr	r3, [r7, #28]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d1f2      	bne.n	801afa8 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801afc2:	887b      	ldrh	r3, [r7, #2]
 801afc4:	4619      	mov	r1, r3
 801afc6:	6878      	ldr	r0, [r7, #4]
 801afc8:	f7ff fc14 	bl	801a7f4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801afcc:	bf00      	nop
 801afce:	3720      	adds	r7, #32
 801afd0:	46bd      	mov	sp, r7
 801afd2:	bd80      	pop	{r7, pc}

0801afd4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801afd4:	b480      	push	{r7}
 801afd6:	b083      	sub	sp, #12
 801afd8:	af00      	add	r7, sp, #0
 801afda:	4603      	mov	r3, r0
 801afdc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801afde:	88fb      	ldrh	r3, [r7, #6]
 801afe0:	021b      	lsls	r3, r3, #8
 801afe2:	b21a      	sxth	r2, r3
 801afe4:	88fb      	ldrh	r3, [r7, #6]
 801afe6:	0a1b      	lsrs	r3, r3, #8
 801afe8:	b29b      	uxth	r3, r3
 801afea:	b21b      	sxth	r3, r3
 801afec:	4313      	orrs	r3, r2
 801afee:	b21b      	sxth	r3, r3
 801aff0:	b29b      	uxth	r3, r3
}
 801aff2:	4618      	mov	r0, r3
 801aff4:	370c      	adds	r7, #12
 801aff6:	46bd      	mov	sp, r7
 801aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801affc:	4770      	bx	lr

0801affe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801affe:	b580      	push	{r7, lr}
 801b000:	b082      	sub	sp, #8
 801b002:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801b004:	2300      	movs	r3, #0
 801b006:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801b008:	f000 f8d2 	bl	801b1b0 <mem_init>
  memp_init();
 801b00c:	f000 fbd8 	bl	801b7c0 <memp_init>
  pbuf_init();
  netif_init();
 801b010:	f000 fcfc 	bl	801ba0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801b014:	f001 ff9a 	bl	801cf4c <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801b018:	f001 ff16 	bl	801ce48 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801b01c:	bf00      	nop
 801b01e:	3708      	adds	r7, #8
 801b020:	46bd      	mov	sp, r7
 801b022:	bd80      	pop	{r7, pc}

0801b024 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801b024:	b480      	push	{r7}
 801b026:	b083      	sub	sp, #12
 801b028:	af00      	add	r7, sp, #0
 801b02a:	4603      	mov	r3, r0
 801b02c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801b02e:	4b05      	ldr	r3, [pc, #20]	; (801b044 <ptr_to_mem+0x20>)
 801b030:	681a      	ldr	r2, [r3, #0]
 801b032:	88fb      	ldrh	r3, [r7, #6]
 801b034:	4413      	add	r3, r2
}
 801b036:	4618      	mov	r0, r3
 801b038:	370c      	adds	r7, #12
 801b03a:	46bd      	mov	sp, r7
 801b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b040:	4770      	bx	lr
 801b042:	bf00      	nop
 801b044:	200101d8 	.word	0x200101d8

0801b048 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801b048:	b480      	push	{r7}
 801b04a:	b083      	sub	sp, #12
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801b050:	4b05      	ldr	r3, [pc, #20]	; (801b068 <mem_to_ptr+0x20>)
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	687a      	ldr	r2, [r7, #4]
 801b056:	1ad3      	subs	r3, r2, r3
 801b058:	b29b      	uxth	r3, r3
}
 801b05a:	4618      	mov	r0, r3
 801b05c:	370c      	adds	r7, #12
 801b05e:	46bd      	mov	sp, r7
 801b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b064:	4770      	bx	lr
 801b066:	bf00      	nop
 801b068:	200101d8 	.word	0x200101d8

0801b06c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801b06c:	b590      	push	{r4, r7, lr}
 801b06e:	b085      	sub	sp, #20
 801b070:	af00      	add	r7, sp, #0
 801b072:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801b074:	4b45      	ldr	r3, [pc, #276]	; (801b18c <plug_holes+0x120>)
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	687a      	ldr	r2, [r7, #4]
 801b07a:	429a      	cmp	r2, r3
 801b07c:	d206      	bcs.n	801b08c <plug_holes+0x20>
 801b07e:	4b44      	ldr	r3, [pc, #272]	; (801b190 <plug_holes+0x124>)
 801b080:	f240 12df 	movw	r2, #479	; 0x1df
 801b084:	4943      	ldr	r1, [pc, #268]	; (801b194 <plug_holes+0x128>)
 801b086:	4844      	ldr	r0, [pc, #272]	; (801b198 <plug_holes+0x12c>)
 801b088:	f005 f8b8 	bl	80201fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801b08c:	4b43      	ldr	r3, [pc, #268]	; (801b19c <plug_holes+0x130>)
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	687a      	ldr	r2, [r7, #4]
 801b092:	429a      	cmp	r2, r3
 801b094:	d306      	bcc.n	801b0a4 <plug_holes+0x38>
 801b096:	4b3e      	ldr	r3, [pc, #248]	; (801b190 <plug_holes+0x124>)
 801b098:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b09c:	4940      	ldr	r1, [pc, #256]	; (801b1a0 <plug_holes+0x134>)
 801b09e:	483e      	ldr	r0, [pc, #248]	; (801b198 <plug_holes+0x12c>)
 801b0a0:	f005 f8ac 	bl	80201fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	791b      	ldrb	r3, [r3, #4]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d006      	beq.n	801b0ba <plug_holes+0x4e>
 801b0ac:	4b38      	ldr	r3, [pc, #224]	; (801b190 <plug_holes+0x124>)
 801b0ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b0b2:	493c      	ldr	r1, [pc, #240]	; (801b1a4 <plug_holes+0x138>)
 801b0b4:	4838      	ldr	r0, [pc, #224]	; (801b198 <plug_holes+0x12c>)
 801b0b6:	f005 f8a1 	bl	80201fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	881b      	ldrh	r3, [r3, #0]
 801b0be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b0c2:	d906      	bls.n	801b0d2 <plug_holes+0x66>
 801b0c4:	4b32      	ldr	r3, [pc, #200]	; (801b190 <plug_holes+0x124>)
 801b0c6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801b0ca:	4937      	ldr	r1, [pc, #220]	; (801b1a8 <plug_holes+0x13c>)
 801b0cc:	4832      	ldr	r0, [pc, #200]	; (801b198 <plug_holes+0x12c>)
 801b0ce:	f005 f895 	bl	80201fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	881b      	ldrh	r3, [r3, #0]
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	f7ff ffa4 	bl	801b024 <ptr_to_mem>
 801b0dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801b0de:	687a      	ldr	r2, [r7, #4]
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	d024      	beq.n	801b130 <plug_holes+0xc4>
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	791b      	ldrb	r3, [r3, #4]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d120      	bne.n	801b130 <plug_holes+0xc4>
 801b0ee:	4b2b      	ldr	r3, [pc, #172]	; (801b19c <plug_holes+0x130>)
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	68fa      	ldr	r2, [r7, #12]
 801b0f4:	429a      	cmp	r2, r3
 801b0f6:	d01b      	beq.n	801b130 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801b0f8:	4b2c      	ldr	r3, [pc, #176]	; (801b1ac <plug_holes+0x140>)
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	68fa      	ldr	r2, [r7, #12]
 801b0fe:	429a      	cmp	r2, r3
 801b100:	d102      	bne.n	801b108 <plug_holes+0x9c>
      lfree = mem;
 801b102:	4a2a      	ldr	r2, [pc, #168]	; (801b1ac <plug_holes+0x140>)
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	881a      	ldrh	r2, [r3, #0]
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	881b      	ldrh	r3, [r3, #0]
 801b114:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b118:	d00a      	beq.n	801b130 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	881b      	ldrh	r3, [r3, #0]
 801b11e:	4618      	mov	r0, r3
 801b120:	f7ff ff80 	bl	801b024 <ptr_to_mem>
 801b124:	4604      	mov	r4, r0
 801b126:	6878      	ldr	r0, [r7, #4]
 801b128:	f7ff ff8e 	bl	801b048 <mem_to_ptr>
 801b12c:	4603      	mov	r3, r0
 801b12e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	885b      	ldrh	r3, [r3, #2]
 801b134:	4618      	mov	r0, r3
 801b136:	f7ff ff75 	bl	801b024 <ptr_to_mem>
 801b13a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801b13c:	68ba      	ldr	r2, [r7, #8]
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	429a      	cmp	r2, r3
 801b142:	d01f      	beq.n	801b184 <plug_holes+0x118>
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	791b      	ldrb	r3, [r3, #4]
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d11b      	bne.n	801b184 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801b14c:	4b17      	ldr	r3, [pc, #92]	; (801b1ac <plug_holes+0x140>)
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	687a      	ldr	r2, [r7, #4]
 801b152:	429a      	cmp	r2, r3
 801b154:	d102      	bne.n	801b15c <plug_holes+0xf0>
      lfree = pmem;
 801b156:	4a15      	ldr	r2, [pc, #84]	; (801b1ac <plug_holes+0x140>)
 801b158:	68bb      	ldr	r3, [r7, #8]
 801b15a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	881a      	ldrh	r2, [r3, #0]
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	881b      	ldrh	r3, [r3, #0]
 801b168:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b16c:	d00a      	beq.n	801b184 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	881b      	ldrh	r3, [r3, #0]
 801b172:	4618      	mov	r0, r3
 801b174:	f7ff ff56 	bl	801b024 <ptr_to_mem>
 801b178:	4604      	mov	r4, r0
 801b17a:	68b8      	ldr	r0, [r7, #8]
 801b17c:	f7ff ff64 	bl	801b048 <mem_to_ptr>
 801b180:	4603      	mov	r3, r0
 801b182:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801b184:	bf00      	nop
 801b186:	3714      	adds	r7, #20
 801b188:	46bd      	mov	sp, r7
 801b18a:	bd90      	pop	{r4, r7, pc}
 801b18c:	200101d8 	.word	0x200101d8
 801b190:	08024ee0 	.word	0x08024ee0
 801b194:	08024f10 	.word	0x08024f10
 801b198:	08024f28 	.word	0x08024f28
 801b19c:	200101dc 	.word	0x200101dc
 801b1a0:	08024f50 	.word	0x08024f50
 801b1a4:	08024f6c 	.word	0x08024f6c
 801b1a8:	08024f88 	.word	0x08024f88
 801b1ac:	200101e0 	.word	0x200101e0

0801b1b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801b1b0:	b580      	push	{r7, lr}
 801b1b2:	b082      	sub	sp, #8
 801b1b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801b1b6:	4b18      	ldr	r3, [pc, #96]	; (801b218 <mem_init+0x68>)
 801b1b8:	3303      	adds	r3, #3
 801b1ba:	f023 0303 	bic.w	r3, r3, #3
 801b1be:	461a      	mov	r2, r3
 801b1c0:	4b16      	ldr	r3, [pc, #88]	; (801b21c <mem_init+0x6c>)
 801b1c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801b1c4:	4b15      	ldr	r3, [pc, #84]	; (801b21c <mem_init+0x6c>)
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801b1d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	2200      	movs	r2, #0
 801b1dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801b1de:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801b1e2:	f7ff ff1f 	bl	801b024 <ptr_to_mem>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	4a0d      	ldr	r2, [pc, #52]	; (801b220 <mem_init+0x70>)
 801b1ea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801b1ec:	4b0c      	ldr	r3, [pc, #48]	; (801b220 <mem_init+0x70>)
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	2201      	movs	r2, #1
 801b1f2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801b1f4:	4b0a      	ldr	r3, [pc, #40]	; (801b220 <mem_init+0x70>)
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801b1fc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801b1fe:	4b08      	ldr	r3, [pc, #32]	; (801b220 <mem_init+0x70>)
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801b206:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801b208:	4b04      	ldr	r3, [pc, #16]	; (801b21c <mem_init+0x6c>)
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	4a05      	ldr	r2, [pc, #20]	; (801b224 <mem_init+0x74>)
 801b20e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801b210:	bf00      	nop
 801b212:	3708      	adds	r7, #8
 801b214:	46bd      	mov	sp, r7
 801b216:	bd80      	pop	{r7, pc}
 801b218:	2000fb84 	.word	0x2000fb84
 801b21c:	200101d8 	.word	0x200101d8
 801b220:	200101dc 	.word	0x200101dc
 801b224:	200101e0 	.word	0x200101e0

0801b228 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b086      	sub	sp, #24
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801b230:	6878      	ldr	r0, [r7, #4]
 801b232:	f7ff ff09 	bl	801b048 <mem_to_ptr>
 801b236:	4603      	mov	r3, r0
 801b238:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	881b      	ldrh	r3, [r3, #0]
 801b23e:	4618      	mov	r0, r3
 801b240:	f7ff fef0 	bl	801b024 <ptr_to_mem>
 801b244:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	885b      	ldrh	r3, [r3, #2]
 801b24a:	4618      	mov	r0, r3
 801b24c:	f7ff feea 	bl	801b024 <ptr_to_mem>
 801b250:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	881b      	ldrh	r3, [r3, #0]
 801b256:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b25a:	d818      	bhi.n	801b28e <mem_link_valid+0x66>
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	885b      	ldrh	r3, [r3, #2]
 801b260:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b264:	d813      	bhi.n	801b28e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801b26a:	8afa      	ldrh	r2, [r7, #22]
 801b26c:	429a      	cmp	r2, r3
 801b26e:	d004      	beq.n	801b27a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	881b      	ldrh	r3, [r3, #0]
 801b274:	8afa      	ldrh	r2, [r7, #22]
 801b276:	429a      	cmp	r2, r3
 801b278:	d109      	bne.n	801b28e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b27a:	4b08      	ldr	r3, [pc, #32]	; (801b29c <mem_link_valid+0x74>)
 801b27c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801b27e:	693a      	ldr	r2, [r7, #16]
 801b280:	429a      	cmp	r2, r3
 801b282:	d006      	beq.n	801b292 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801b284:	693b      	ldr	r3, [r7, #16]
 801b286:	885b      	ldrh	r3, [r3, #2]
 801b288:	8afa      	ldrh	r2, [r7, #22]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d001      	beq.n	801b292 <mem_link_valid+0x6a>
    return 0;
 801b28e:	2300      	movs	r3, #0
 801b290:	e000      	b.n	801b294 <mem_link_valid+0x6c>
  }
  return 1;
 801b292:	2301      	movs	r3, #1
}
 801b294:	4618      	mov	r0, r3
 801b296:	3718      	adds	r7, #24
 801b298:	46bd      	mov	sp, r7
 801b29a:	bd80      	pop	{r7, pc}
 801b29c:	200101dc 	.word	0x200101dc

0801b2a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b084      	sub	sp, #16
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d04c      	beq.n	801b348 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	f003 0303 	and.w	r3, r3, #3
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d007      	beq.n	801b2c8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801b2b8:	4b25      	ldr	r3, [pc, #148]	; (801b350 <mem_free+0xb0>)
 801b2ba:	f240 2273 	movw	r2, #627	; 0x273
 801b2be:	4925      	ldr	r1, [pc, #148]	; (801b354 <mem_free+0xb4>)
 801b2c0:	4825      	ldr	r0, [pc, #148]	; (801b358 <mem_free+0xb8>)
 801b2c2:	f004 ff9b 	bl	80201fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801b2c6:	e040      	b.n	801b34a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	3b08      	subs	r3, #8
 801b2cc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801b2ce:	4b23      	ldr	r3, [pc, #140]	; (801b35c <mem_free+0xbc>)
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	68fa      	ldr	r2, [r7, #12]
 801b2d4:	429a      	cmp	r2, r3
 801b2d6:	d306      	bcc.n	801b2e6 <mem_free+0x46>
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	f103 020c 	add.w	r2, r3, #12
 801b2de:	4b20      	ldr	r3, [pc, #128]	; (801b360 <mem_free+0xc0>)
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	429a      	cmp	r2, r3
 801b2e4:	d907      	bls.n	801b2f6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801b2e6:	4b1a      	ldr	r3, [pc, #104]	; (801b350 <mem_free+0xb0>)
 801b2e8:	f240 227f 	movw	r2, #639	; 0x27f
 801b2ec:	491d      	ldr	r1, [pc, #116]	; (801b364 <mem_free+0xc4>)
 801b2ee:	481a      	ldr	r0, [pc, #104]	; (801b358 <mem_free+0xb8>)
 801b2f0:	f004 ff84 	bl	80201fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801b2f4:	e029      	b.n	801b34a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	791b      	ldrb	r3, [r3, #4]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d107      	bne.n	801b30e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801b2fe:	4b14      	ldr	r3, [pc, #80]	; (801b350 <mem_free+0xb0>)
 801b300:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801b304:	4918      	ldr	r1, [pc, #96]	; (801b368 <mem_free+0xc8>)
 801b306:	4814      	ldr	r0, [pc, #80]	; (801b358 <mem_free+0xb8>)
 801b308:	f004 ff78 	bl	80201fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801b30c:	e01d      	b.n	801b34a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801b30e:	68f8      	ldr	r0, [r7, #12]
 801b310:	f7ff ff8a 	bl	801b228 <mem_link_valid>
 801b314:	4603      	mov	r3, r0
 801b316:	2b00      	cmp	r3, #0
 801b318:	d107      	bne.n	801b32a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801b31a:	4b0d      	ldr	r3, [pc, #52]	; (801b350 <mem_free+0xb0>)
 801b31c:	f240 2295 	movw	r2, #661	; 0x295
 801b320:	4912      	ldr	r1, [pc, #72]	; (801b36c <mem_free+0xcc>)
 801b322:	480d      	ldr	r0, [pc, #52]	; (801b358 <mem_free+0xb8>)
 801b324:	f004 ff6a 	bl	80201fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801b328:	e00f      	b.n	801b34a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	2200      	movs	r2, #0
 801b32e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801b330:	4b0f      	ldr	r3, [pc, #60]	; (801b370 <mem_free+0xd0>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	68fa      	ldr	r2, [r7, #12]
 801b336:	429a      	cmp	r2, r3
 801b338:	d202      	bcs.n	801b340 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801b33a:	4a0d      	ldr	r2, [pc, #52]	; (801b370 <mem_free+0xd0>)
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801b340:	68f8      	ldr	r0, [r7, #12]
 801b342:	f7ff fe93 	bl	801b06c <plug_holes>
 801b346:	e000      	b.n	801b34a <mem_free+0xaa>
    return;
 801b348:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801b34a:	3710      	adds	r7, #16
 801b34c:	46bd      	mov	sp, r7
 801b34e:	bd80      	pop	{r7, pc}
 801b350:	08024ee0 	.word	0x08024ee0
 801b354:	08024fb4 	.word	0x08024fb4
 801b358:	08024f28 	.word	0x08024f28
 801b35c:	200101d8 	.word	0x200101d8
 801b360:	200101dc 	.word	0x200101dc
 801b364:	08024fd8 	.word	0x08024fd8
 801b368:	08024ff4 	.word	0x08024ff4
 801b36c:	0802501c 	.word	0x0802501c
 801b370:	200101e0 	.word	0x200101e0

0801b374 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b088      	sub	sp, #32
 801b378:	af00      	add	r7, sp, #0
 801b37a:	6078      	str	r0, [r7, #4]
 801b37c:	460b      	mov	r3, r1
 801b37e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801b380:	887b      	ldrh	r3, [r7, #2]
 801b382:	3303      	adds	r3, #3
 801b384:	b29b      	uxth	r3, r3
 801b386:	f023 0303 	bic.w	r3, r3, #3
 801b38a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801b38c:	8bfb      	ldrh	r3, [r7, #30]
 801b38e:	2b0b      	cmp	r3, #11
 801b390:	d801      	bhi.n	801b396 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801b392:	230c      	movs	r3, #12
 801b394:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801b396:	8bfb      	ldrh	r3, [r7, #30]
 801b398:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b39c:	d803      	bhi.n	801b3a6 <mem_trim+0x32>
 801b39e:	8bfa      	ldrh	r2, [r7, #30]
 801b3a0:	887b      	ldrh	r3, [r7, #2]
 801b3a2:	429a      	cmp	r2, r3
 801b3a4:	d201      	bcs.n	801b3aa <mem_trim+0x36>
    return NULL;
 801b3a6:	2300      	movs	r3, #0
 801b3a8:	e0cc      	b.n	801b544 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801b3aa:	4b68      	ldr	r3, [pc, #416]	; (801b54c <mem_trim+0x1d8>)
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	687a      	ldr	r2, [r7, #4]
 801b3b0:	429a      	cmp	r2, r3
 801b3b2:	d304      	bcc.n	801b3be <mem_trim+0x4a>
 801b3b4:	4b66      	ldr	r3, [pc, #408]	; (801b550 <mem_trim+0x1dc>)
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	687a      	ldr	r2, [r7, #4]
 801b3ba:	429a      	cmp	r2, r3
 801b3bc:	d306      	bcc.n	801b3cc <mem_trim+0x58>
 801b3be:	4b65      	ldr	r3, [pc, #404]	; (801b554 <mem_trim+0x1e0>)
 801b3c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b3c4:	4964      	ldr	r1, [pc, #400]	; (801b558 <mem_trim+0x1e4>)
 801b3c6:	4865      	ldr	r0, [pc, #404]	; (801b55c <mem_trim+0x1e8>)
 801b3c8:	f004 ff18 	bl	80201fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801b3cc:	4b5f      	ldr	r3, [pc, #380]	; (801b54c <mem_trim+0x1d8>)
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	687a      	ldr	r2, [r7, #4]
 801b3d2:	429a      	cmp	r2, r3
 801b3d4:	d304      	bcc.n	801b3e0 <mem_trim+0x6c>
 801b3d6:	4b5e      	ldr	r3, [pc, #376]	; (801b550 <mem_trim+0x1dc>)
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	687a      	ldr	r2, [r7, #4]
 801b3dc:	429a      	cmp	r2, r3
 801b3de:	d301      	bcc.n	801b3e4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	e0af      	b.n	801b544 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	3b08      	subs	r3, #8
 801b3e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801b3ea:	69b8      	ldr	r0, [r7, #24]
 801b3ec:	f7ff fe2c 	bl	801b048 <mem_to_ptr>
 801b3f0:	4603      	mov	r3, r0
 801b3f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801b3f4:	69bb      	ldr	r3, [r7, #24]
 801b3f6:	881a      	ldrh	r2, [r3, #0]
 801b3f8:	8afb      	ldrh	r3, [r7, #22]
 801b3fa:	1ad3      	subs	r3, r2, r3
 801b3fc:	b29b      	uxth	r3, r3
 801b3fe:	3b08      	subs	r3, #8
 801b400:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801b402:	8bfa      	ldrh	r2, [r7, #30]
 801b404:	8abb      	ldrh	r3, [r7, #20]
 801b406:	429a      	cmp	r2, r3
 801b408:	d906      	bls.n	801b418 <mem_trim+0xa4>
 801b40a:	4b52      	ldr	r3, [pc, #328]	; (801b554 <mem_trim+0x1e0>)
 801b40c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801b410:	4953      	ldr	r1, [pc, #332]	; (801b560 <mem_trim+0x1ec>)
 801b412:	4852      	ldr	r0, [pc, #328]	; (801b55c <mem_trim+0x1e8>)
 801b414:	f004 fef2 	bl	80201fc <iprintf>
  if (newsize > size) {
 801b418:	8bfa      	ldrh	r2, [r7, #30]
 801b41a:	8abb      	ldrh	r3, [r7, #20]
 801b41c:	429a      	cmp	r2, r3
 801b41e:	d901      	bls.n	801b424 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801b420:	2300      	movs	r3, #0
 801b422:	e08f      	b.n	801b544 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801b424:	8bfa      	ldrh	r2, [r7, #30]
 801b426:	8abb      	ldrh	r3, [r7, #20]
 801b428:	429a      	cmp	r2, r3
 801b42a:	d101      	bne.n	801b430 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	e089      	b.n	801b544 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801b430:	69bb      	ldr	r3, [r7, #24]
 801b432:	881b      	ldrh	r3, [r3, #0]
 801b434:	4618      	mov	r0, r3
 801b436:	f7ff fdf5 	bl	801b024 <ptr_to_mem>
 801b43a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801b43c:	693b      	ldr	r3, [r7, #16]
 801b43e:	791b      	ldrb	r3, [r3, #4]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d13f      	bne.n	801b4c4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b444:	69bb      	ldr	r3, [r7, #24]
 801b446:	881b      	ldrh	r3, [r3, #0]
 801b448:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b44c:	d106      	bne.n	801b45c <mem_trim+0xe8>
 801b44e:	4b41      	ldr	r3, [pc, #260]	; (801b554 <mem_trim+0x1e0>)
 801b450:	f240 22f5 	movw	r2, #757	; 0x2f5
 801b454:	4943      	ldr	r1, [pc, #268]	; (801b564 <mem_trim+0x1f0>)
 801b456:	4841      	ldr	r0, [pc, #260]	; (801b55c <mem_trim+0x1e8>)
 801b458:	f004 fed0 	bl	80201fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801b45c:	693b      	ldr	r3, [r7, #16]
 801b45e:	881b      	ldrh	r3, [r3, #0]
 801b460:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b462:	8afa      	ldrh	r2, [r7, #22]
 801b464:	8bfb      	ldrh	r3, [r7, #30]
 801b466:	4413      	add	r3, r2
 801b468:	b29b      	uxth	r3, r3
 801b46a:	3308      	adds	r3, #8
 801b46c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801b46e:	4b3e      	ldr	r3, [pc, #248]	; (801b568 <mem_trim+0x1f4>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	693a      	ldr	r2, [r7, #16]
 801b474:	429a      	cmp	r2, r3
 801b476:	d106      	bne.n	801b486 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801b478:	89fb      	ldrh	r3, [r7, #14]
 801b47a:	4618      	mov	r0, r3
 801b47c:	f7ff fdd2 	bl	801b024 <ptr_to_mem>
 801b480:	4603      	mov	r3, r0
 801b482:	4a39      	ldr	r2, [pc, #228]	; (801b568 <mem_trim+0x1f4>)
 801b484:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801b486:	89fb      	ldrh	r3, [r7, #14]
 801b488:	4618      	mov	r0, r3
 801b48a:	f7ff fdcb 	bl	801b024 <ptr_to_mem>
 801b48e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801b490:	693b      	ldr	r3, [r7, #16]
 801b492:	2200      	movs	r2, #0
 801b494:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	89ba      	ldrh	r2, [r7, #12]
 801b49a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801b49c:	693b      	ldr	r3, [r7, #16]
 801b49e:	8afa      	ldrh	r2, [r7, #22]
 801b4a0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801b4a2:	69bb      	ldr	r3, [r7, #24]
 801b4a4:	89fa      	ldrh	r2, [r7, #14]
 801b4a6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b4a8:	693b      	ldr	r3, [r7, #16]
 801b4aa:	881b      	ldrh	r3, [r3, #0]
 801b4ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b4b0:	d047      	beq.n	801b542 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b4b2:	693b      	ldr	r3, [r7, #16]
 801b4b4:	881b      	ldrh	r3, [r3, #0]
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f7ff fdb4 	bl	801b024 <ptr_to_mem>
 801b4bc:	4602      	mov	r2, r0
 801b4be:	89fb      	ldrh	r3, [r7, #14]
 801b4c0:	8053      	strh	r3, [r2, #2]
 801b4c2:	e03e      	b.n	801b542 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801b4c4:	8bfb      	ldrh	r3, [r7, #30]
 801b4c6:	f103 0214 	add.w	r2, r3, #20
 801b4ca:	8abb      	ldrh	r3, [r7, #20]
 801b4cc:	429a      	cmp	r2, r3
 801b4ce:	d838      	bhi.n	801b542 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801b4d0:	8afa      	ldrh	r2, [r7, #22]
 801b4d2:	8bfb      	ldrh	r3, [r7, #30]
 801b4d4:	4413      	add	r3, r2
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	3308      	adds	r3, #8
 801b4da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801b4dc:	69bb      	ldr	r3, [r7, #24]
 801b4de:	881b      	ldrh	r3, [r3, #0]
 801b4e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b4e4:	d106      	bne.n	801b4f4 <mem_trim+0x180>
 801b4e6:	4b1b      	ldr	r3, [pc, #108]	; (801b554 <mem_trim+0x1e0>)
 801b4e8:	f240 3216 	movw	r2, #790	; 0x316
 801b4ec:	491d      	ldr	r1, [pc, #116]	; (801b564 <mem_trim+0x1f0>)
 801b4ee:	481b      	ldr	r0, [pc, #108]	; (801b55c <mem_trim+0x1e8>)
 801b4f0:	f004 fe84 	bl	80201fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801b4f4:	89fb      	ldrh	r3, [r7, #14]
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f7ff fd94 	bl	801b024 <ptr_to_mem>
 801b4fc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801b4fe:	4b1a      	ldr	r3, [pc, #104]	; (801b568 <mem_trim+0x1f4>)
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	693a      	ldr	r2, [r7, #16]
 801b504:	429a      	cmp	r2, r3
 801b506:	d202      	bcs.n	801b50e <mem_trim+0x19a>
      lfree = mem2;
 801b508:	4a17      	ldr	r2, [pc, #92]	; (801b568 <mem_trim+0x1f4>)
 801b50a:	693b      	ldr	r3, [r7, #16]
 801b50c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801b50e:	693b      	ldr	r3, [r7, #16]
 801b510:	2200      	movs	r2, #0
 801b512:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801b514:	69bb      	ldr	r3, [r7, #24]
 801b516:	881a      	ldrh	r2, [r3, #0]
 801b518:	693b      	ldr	r3, [r7, #16]
 801b51a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801b51c:	693b      	ldr	r3, [r7, #16]
 801b51e:	8afa      	ldrh	r2, [r7, #22]
 801b520:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801b522:	69bb      	ldr	r3, [r7, #24]
 801b524:	89fa      	ldrh	r2, [r7, #14]
 801b526:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801b528:	693b      	ldr	r3, [r7, #16]
 801b52a:	881b      	ldrh	r3, [r3, #0]
 801b52c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b530:	d007      	beq.n	801b542 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801b532:	693b      	ldr	r3, [r7, #16]
 801b534:	881b      	ldrh	r3, [r3, #0]
 801b536:	4618      	mov	r0, r3
 801b538:	f7ff fd74 	bl	801b024 <ptr_to_mem>
 801b53c:	4602      	mov	r2, r0
 801b53e:	89fb      	ldrh	r3, [r7, #14]
 801b540:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801b542:	687b      	ldr	r3, [r7, #4]
}
 801b544:	4618      	mov	r0, r3
 801b546:	3720      	adds	r7, #32
 801b548:	46bd      	mov	sp, r7
 801b54a:	bd80      	pop	{r7, pc}
 801b54c:	200101d8 	.word	0x200101d8
 801b550:	200101dc 	.word	0x200101dc
 801b554:	08024ee0 	.word	0x08024ee0
 801b558:	08025050 	.word	0x08025050
 801b55c:	08024f28 	.word	0x08024f28
 801b560:	08025068 	.word	0x08025068
 801b564:	08025088 	.word	0x08025088
 801b568:	200101e0 	.word	0x200101e0

0801b56c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b088      	sub	sp, #32
 801b570:	af00      	add	r7, sp, #0
 801b572:	4603      	mov	r3, r0
 801b574:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801b576:	88fb      	ldrh	r3, [r7, #6]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d101      	bne.n	801b580 <mem_malloc+0x14>
    return NULL;
 801b57c:	2300      	movs	r3, #0
 801b57e:	e0d9      	b.n	801b734 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801b580:	88fb      	ldrh	r3, [r7, #6]
 801b582:	3303      	adds	r3, #3
 801b584:	b29b      	uxth	r3, r3
 801b586:	f023 0303 	bic.w	r3, r3, #3
 801b58a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801b58c:	8bbb      	ldrh	r3, [r7, #28]
 801b58e:	2b0b      	cmp	r3, #11
 801b590:	d801      	bhi.n	801b596 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801b592:	230c      	movs	r3, #12
 801b594:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801b596:	8bbb      	ldrh	r3, [r7, #28]
 801b598:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b59c:	d803      	bhi.n	801b5a6 <mem_malloc+0x3a>
 801b59e:	8bba      	ldrh	r2, [r7, #28]
 801b5a0:	88fb      	ldrh	r3, [r7, #6]
 801b5a2:	429a      	cmp	r2, r3
 801b5a4:	d201      	bcs.n	801b5aa <mem_malloc+0x3e>
    return NULL;
 801b5a6:	2300      	movs	r3, #0
 801b5a8:	e0c4      	b.n	801b734 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b5aa:	4b64      	ldr	r3, [pc, #400]	; (801b73c <mem_malloc+0x1d0>)
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	f7ff fd4a 	bl	801b048 <mem_to_ptr>
 801b5b4:	4603      	mov	r3, r0
 801b5b6:	83fb      	strh	r3, [r7, #30]
 801b5b8:	e0b4      	b.n	801b724 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801b5ba:	8bfb      	ldrh	r3, [r7, #30]
 801b5bc:	4618      	mov	r0, r3
 801b5be:	f7ff fd31 	bl	801b024 <ptr_to_mem>
 801b5c2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801b5c4:	697b      	ldr	r3, [r7, #20]
 801b5c6:	791b      	ldrb	r3, [r3, #4]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	f040 80a4 	bne.w	801b716 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	881b      	ldrh	r3, [r3, #0]
 801b5d2:	461a      	mov	r2, r3
 801b5d4:	8bfb      	ldrh	r3, [r7, #30]
 801b5d6:	1ad3      	subs	r3, r2, r3
 801b5d8:	f1a3 0208 	sub.w	r2, r3, #8
 801b5dc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801b5de:	429a      	cmp	r2, r3
 801b5e0:	f0c0 8099 	bcc.w	801b716 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801b5e4:	697b      	ldr	r3, [r7, #20]
 801b5e6:	881b      	ldrh	r3, [r3, #0]
 801b5e8:	461a      	mov	r2, r3
 801b5ea:	8bfb      	ldrh	r3, [r7, #30]
 801b5ec:	1ad3      	subs	r3, r2, r3
 801b5ee:	f1a3 0208 	sub.w	r2, r3, #8
 801b5f2:	8bbb      	ldrh	r3, [r7, #28]
 801b5f4:	3314      	adds	r3, #20
 801b5f6:	429a      	cmp	r2, r3
 801b5f8:	d333      	bcc.n	801b662 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801b5fa:	8bfa      	ldrh	r2, [r7, #30]
 801b5fc:	8bbb      	ldrh	r3, [r7, #28]
 801b5fe:	4413      	add	r3, r2
 801b600:	b29b      	uxth	r3, r3
 801b602:	3308      	adds	r3, #8
 801b604:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801b606:	8a7b      	ldrh	r3, [r7, #18]
 801b608:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b60c:	d106      	bne.n	801b61c <mem_malloc+0xb0>
 801b60e:	4b4c      	ldr	r3, [pc, #304]	; (801b740 <mem_malloc+0x1d4>)
 801b610:	f240 3287 	movw	r2, #903	; 0x387
 801b614:	494b      	ldr	r1, [pc, #300]	; (801b744 <mem_malloc+0x1d8>)
 801b616:	484c      	ldr	r0, [pc, #304]	; (801b748 <mem_malloc+0x1dc>)
 801b618:	f004 fdf0 	bl	80201fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801b61c:	8a7b      	ldrh	r3, [r7, #18]
 801b61e:	4618      	mov	r0, r3
 801b620:	f7ff fd00 	bl	801b024 <ptr_to_mem>
 801b624:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801b626:	68fb      	ldr	r3, [r7, #12]
 801b628:	2200      	movs	r2, #0
 801b62a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801b62c:	697b      	ldr	r3, [r7, #20]
 801b62e:	881a      	ldrh	r2, [r3, #0]
 801b630:	68fb      	ldr	r3, [r7, #12]
 801b632:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	8bfa      	ldrh	r2, [r7, #30]
 801b638:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801b63a:	697b      	ldr	r3, [r7, #20]
 801b63c:	8a7a      	ldrh	r2, [r7, #18]
 801b63e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801b640:	697b      	ldr	r3, [r7, #20]
 801b642:	2201      	movs	r2, #1
 801b644:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	881b      	ldrh	r3, [r3, #0]
 801b64a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801b64e:	d00b      	beq.n	801b668 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	881b      	ldrh	r3, [r3, #0]
 801b654:	4618      	mov	r0, r3
 801b656:	f7ff fce5 	bl	801b024 <ptr_to_mem>
 801b65a:	4602      	mov	r2, r0
 801b65c:	8a7b      	ldrh	r3, [r7, #18]
 801b65e:	8053      	strh	r3, [r2, #2]
 801b660:	e002      	b.n	801b668 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801b662:	697b      	ldr	r3, [r7, #20]
 801b664:	2201      	movs	r2, #1
 801b666:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801b668:	4b34      	ldr	r3, [pc, #208]	; (801b73c <mem_malloc+0x1d0>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	697a      	ldr	r2, [r7, #20]
 801b66e:	429a      	cmp	r2, r3
 801b670:	d127      	bne.n	801b6c2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 801b672:	4b32      	ldr	r3, [pc, #200]	; (801b73c <mem_malloc+0x1d0>)
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801b678:	e005      	b.n	801b686 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801b67a:	69bb      	ldr	r3, [r7, #24]
 801b67c:	881b      	ldrh	r3, [r3, #0]
 801b67e:	4618      	mov	r0, r3
 801b680:	f7ff fcd0 	bl	801b024 <ptr_to_mem>
 801b684:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801b686:	69bb      	ldr	r3, [r7, #24]
 801b688:	791b      	ldrb	r3, [r3, #4]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d004      	beq.n	801b698 <mem_malloc+0x12c>
 801b68e:	4b2f      	ldr	r3, [pc, #188]	; (801b74c <mem_malloc+0x1e0>)
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	69ba      	ldr	r2, [r7, #24]
 801b694:	429a      	cmp	r2, r3
 801b696:	d1f0      	bne.n	801b67a <mem_malloc+0x10e>
          }
          lfree = cur;
 801b698:	4a28      	ldr	r2, [pc, #160]	; (801b73c <mem_malloc+0x1d0>)
 801b69a:	69bb      	ldr	r3, [r7, #24]
 801b69c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801b69e:	4b27      	ldr	r3, [pc, #156]	; (801b73c <mem_malloc+0x1d0>)
 801b6a0:	681a      	ldr	r2, [r3, #0]
 801b6a2:	4b2a      	ldr	r3, [pc, #168]	; (801b74c <mem_malloc+0x1e0>)
 801b6a4:	681b      	ldr	r3, [r3, #0]
 801b6a6:	429a      	cmp	r2, r3
 801b6a8:	d00b      	beq.n	801b6c2 <mem_malloc+0x156>
 801b6aa:	4b24      	ldr	r3, [pc, #144]	; (801b73c <mem_malloc+0x1d0>)
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	791b      	ldrb	r3, [r3, #4]
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d006      	beq.n	801b6c2 <mem_malloc+0x156>
 801b6b4:	4b22      	ldr	r3, [pc, #136]	; (801b740 <mem_malloc+0x1d4>)
 801b6b6:	f240 32b5 	movw	r2, #949	; 0x3b5
 801b6ba:	4925      	ldr	r1, [pc, #148]	; (801b750 <mem_malloc+0x1e4>)
 801b6bc:	4822      	ldr	r0, [pc, #136]	; (801b748 <mem_malloc+0x1dc>)
 801b6be:	f004 fd9d 	bl	80201fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801b6c2:	8bba      	ldrh	r2, [r7, #28]
 801b6c4:	697b      	ldr	r3, [r7, #20]
 801b6c6:	4413      	add	r3, r2
 801b6c8:	3308      	adds	r3, #8
 801b6ca:	4a20      	ldr	r2, [pc, #128]	; (801b74c <mem_malloc+0x1e0>)
 801b6cc:	6812      	ldr	r2, [r2, #0]
 801b6ce:	4293      	cmp	r3, r2
 801b6d0:	d906      	bls.n	801b6e0 <mem_malloc+0x174>
 801b6d2:	4b1b      	ldr	r3, [pc, #108]	; (801b740 <mem_malloc+0x1d4>)
 801b6d4:	f240 32b9 	movw	r2, #953	; 0x3b9
 801b6d8:	491e      	ldr	r1, [pc, #120]	; (801b754 <mem_malloc+0x1e8>)
 801b6da:	481b      	ldr	r0, [pc, #108]	; (801b748 <mem_malloc+0x1dc>)
 801b6dc:	f004 fd8e 	bl	80201fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801b6e0:	697b      	ldr	r3, [r7, #20]
 801b6e2:	f003 0303 	and.w	r3, r3, #3
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d006      	beq.n	801b6f8 <mem_malloc+0x18c>
 801b6ea:	4b15      	ldr	r3, [pc, #84]	; (801b740 <mem_malloc+0x1d4>)
 801b6ec:	f240 32bb 	movw	r2, #955	; 0x3bb
 801b6f0:	4919      	ldr	r1, [pc, #100]	; (801b758 <mem_malloc+0x1ec>)
 801b6f2:	4815      	ldr	r0, [pc, #84]	; (801b748 <mem_malloc+0x1dc>)
 801b6f4:	f004 fd82 	bl	80201fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801b6f8:	697b      	ldr	r3, [r7, #20]
 801b6fa:	f003 0303 	and.w	r3, r3, #3
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d006      	beq.n	801b710 <mem_malloc+0x1a4>
 801b702:	4b0f      	ldr	r3, [pc, #60]	; (801b740 <mem_malloc+0x1d4>)
 801b704:	f240 32bd 	movw	r2, #957	; 0x3bd
 801b708:	4914      	ldr	r1, [pc, #80]	; (801b75c <mem_malloc+0x1f0>)
 801b70a:	480f      	ldr	r0, [pc, #60]	; (801b748 <mem_malloc+0x1dc>)
 801b70c:	f004 fd76 	bl	80201fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801b710:	697b      	ldr	r3, [r7, #20]
 801b712:	3308      	adds	r3, #8
 801b714:	e00e      	b.n	801b734 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801b716:	8bfb      	ldrh	r3, [r7, #30]
 801b718:	4618      	mov	r0, r3
 801b71a:	f7ff fc83 	bl	801b024 <ptr_to_mem>
 801b71e:	4603      	mov	r3, r0
 801b720:	881b      	ldrh	r3, [r3, #0]
 801b722:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801b724:	8bfa      	ldrh	r2, [r7, #30]
 801b726:	8bbb      	ldrh	r3, [r7, #28]
 801b728:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801b72c:	429a      	cmp	r2, r3
 801b72e:	f4ff af44 	bcc.w	801b5ba <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801b732:	2300      	movs	r3, #0
}
 801b734:	4618      	mov	r0, r3
 801b736:	3720      	adds	r7, #32
 801b738:	46bd      	mov	sp, r7
 801b73a:	bd80      	pop	{r7, pc}
 801b73c:	200101e0 	.word	0x200101e0
 801b740:	08024ee0 	.word	0x08024ee0
 801b744:	08025088 	.word	0x08025088
 801b748:	08024f28 	.word	0x08024f28
 801b74c:	200101dc 	.word	0x200101dc
 801b750:	0802509c 	.word	0x0802509c
 801b754:	080250b8 	.word	0x080250b8
 801b758:	080250e8 	.word	0x080250e8
 801b75c:	08025118 	.word	0x08025118

0801b760 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801b760:	b480      	push	{r7}
 801b762:	b085      	sub	sp, #20
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	689b      	ldr	r3, [r3, #8]
 801b76c:	2200      	movs	r2, #0
 801b76e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	685b      	ldr	r3, [r3, #4]
 801b774:	3303      	adds	r3, #3
 801b776:	f023 0303 	bic.w	r3, r3, #3
 801b77a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801b77c:	2300      	movs	r3, #0
 801b77e:	60fb      	str	r3, [r7, #12]
 801b780:	e011      	b.n	801b7a6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	689b      	ldr	r3, [r3, #8]
 801b786:	681a      	ldr	r2, [r3, #0]
 801b788:	68bb      	ldr	r3, [r7, #8]
 801b78a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	689b      	ldr	r3, [r3, #8]
 801b790:	68ba      	ldr	r2, [r7, #8]
 801b792:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	881b      	ldrh	r3, [r3, #0]
 801b798:	461a      	mov	r2, r3
 801b79a:	68bb      	ldr	r3, [r7, #8]
 801b79c:	4413      	add	r3, r2
 801b79e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	3301      	adds	r3, #1
 801b7a4:	60fb      	str	r3, [r7, #12]
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	885b      	ldrh	r3, [r3, #2]
 801b7aa:	461a      	mov	r2, r3
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	dbe7      	blt.n	801b782 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801b7b2:	bf00      	nop
 801b7b4:	bf00      	nop
 801b7b6:	3714      	adds	r7, #20
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7be:	4770      	bx	lr

0801b7c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b082      	sub	sp, #8
 801b7c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	80fb      	strh	r3, [r7, #6]
 801b7ca:	e009      	b.n	801b7e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801b7cc:	88fb      	ldrh	r3, [r7, #6]
 801b7ce:	4a08      	ldr	r2, [pc, #32]	; (801b7f0 <memp_init+0x30>)
 801b7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	f7ff ffc3 	bl	801b760 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801b7da:	88fb      	ldrh	r3, [r7, #6]
 801b7dc:	3301      	adds	r3, #1
 801b7de:	80fb      	strh	r3, [r7, #6]
 801b7e0:	88fb      	ldrh	r3, [r7, #6]
 801b7e2:	2b05      	cmp	r3, #5
 801b7e4:	d9f2      	bls.n	801b7cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801b7e6:	bf00      	nop
 801b7e8:	bf00      	nop
 801b7ea:	3708      	adds	r7, #8
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	bd80      	pop	{r7, pc}
 801b7f0:	08026988 	.word	0x08026988

0801b7f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b084      	sub	sp, #16
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	689b      	ldr	r3, [r3, #8]
 801b800:	681b      	ldr	r3, [r3, #0]
 801b802:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	2b00      	cmp	r3, #0
 801b808:	d012      	beq.n	801b830 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	689b      	ldr	r3, [r3, #8]
 801b80e:	68fa      	ldr	r2, [r7, #12]
 801b810:	6812      	ldr	r2, [r2, #0]
 801b812:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	f003 0303 	and.w	r3, r3, #3
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d006      	beq.n	801b82c <do_memp_malloc_pool+0x38>
 801b81e:	4b07      	ldr	r3, [pc, #28]	; (801b83c <do_memp_malloc_pool+0x48>)
 801b820:	f44f 728c 	mov.w	r2, #280	; 0x118
 801b824:	4906      	ldr	r1, [pc, #24]	; (801b840 <do_memp_malloc_pool+0x4c>)
 801b826:	4807      	ldr	r0, [pc, #28]	; (801b844 <do_memp_malloc_pool+0x50>)
 801b828:	f004 fce8 	bl	80201fc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	e000      	b.n	801b832 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801b830:	2300      	movs	r3, #0
}
 801b832:	4618      	mov	r0, r3
 801b834:	3710      	adds	r7, #16
 801b836:	46bd      	mov	sp, r7
 801b838:	bd80      	pop	{r7, pc}
 801b83a:	bf00      	nop
 801b83c:	0802513c 	.word	0x0802513c
 801b840:	0802516c 	.word	0x0802516c
 801b844:	08025190 	.word	0x08025190

0801b848 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801b848:	b580      	push	{r7, lr}
 801b84a:	b082      	sub	sp, #8
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d106      	bne.n	801b864 <memp_malloc_pool+0x1c>
 801b856:	4b0a      	ldr	r3, [pc, #40]	; (801b880 <memp_malloc_pool+0x38>)
 801b858:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801b85c:	4909      	ldr	r1, [pc, #36]	; (801b884 <memp_malloc_pool+0x3c>)
 801b85e:	480a      	ldr	r0, [pc, #40]	; (801b888 <memp_malloc_pool+0x40>)
 801b860:	f004 fccc 	bl	80201fc <iprintf>
  if (desc == NULL) {
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d101      	bne.n	801b86e <memp_malloc_pool+0x26>
    return NULL;
 801b86a:	2300      	movs	r3, #0
 801b86c:	e003      	b.n	801b876 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801b86e:	6878      	ldr	r0, [r7, #4]
 801b870:	f7ff ffc0 	bl	801b7f4 <do_memp_malloc_pool>
 801b874:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801b876:	4618      	mov	r0, r3
 801b878:	3708      	adds	r7, #8
 801b87a:	46bd      	mov	sp, r7
 801b87c:	bd80      	pop	{r7, pc}
 801b87e:	bf00      	nop
 801b880:	0802513c 	.word	0x0802513c
 801b884:	080251b8 	.word	0x080251b8
 801b888:	08025190 	.word	0x08025190

0801b88c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b084      	sub	sp, #16
 801b890:	af00      	add	r7, sp, #0
 801b892:	4603      	mov	r3, r0
 801b894:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801b896:	79fb      	ldrb	r3, [r7, #7]
 801b898:	2b05      	cmp	r3, #5
 801b89a:	d908      	bls.n	801b8ae <memp_malloc+0x22>
 801b89c:	4b0a      	ldr	r3, [pc, #40]	; (801b8c8 <memp_malloc+0x3c>)
 801b89e:	f240 1257 	movw	r2, #343	; 0x157
 801b8a2:	490a      	ldr	r1, [pc, #40]	; (801b8cc <memp_malloc+0x40>)
 801b8a4:	480a      	ldr	r0, [pc, #40]	; (801b8d0 <memp_malloc+0x44>)
 801b8a6:	f004 fca9 	bl	80201fc <iprintf>
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	e008      	b.n	801b8c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801b8ae:	79fb      	ldrb	r3, [r7, #7]
 801b8b0:	4a08      	ldr	r2, [pc, #32]	; (801b8d4 <memp_malloc+0x48>)
 801b8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f7ff ff9c 	bl	801b7f4 <do_memp_malloc_pool>
 801b8bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801b8be:	68fb      	ldr	r3, [r7, #12]
}
 801b8c0:	4618      	mov	r0, r3
 801b8c2:	3710      	adds	r7, #16
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	0802513c 	.word	0x0802513c
 801b8cc:	080251cc 	.word	0x080251cc
 801b8d0:	08025190 	.word	0x08025190
 801b8d4:	08026988 	.word	0x08026988

0801b8d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	b084      	sub	sp, #16
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	6078      	str	r0, [r7, #4]
 801b8e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801b8e2:	683b      	ldr	r3, [r7, #0]
 801b8e4:	f003 0303 	and.w	r3, r3, #3
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d006      	beq.n	801b8fa <do_memp_free_pool+0x22>
 801b8ec:	4b0a      	ldr	r3, [pc, #40]	; (801b918 <do_memp_free_pool+0x40>)
 801b8ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801b8f2:	490a      	ldr	r1, [pc, #40]	; (801b91c <do_memp_free_pool+0x44>)
 801b8f4:	480a      	ldr	r0, [pc, #40]	; (801b920 <do_memp_free_pool+0x48>)
 801b8f6:	f004 fc81 	bl	80201fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801b8fa:	683b      	ldr	r3, [r7, #0]
 801b8fc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	689b      	ldr	r3, [r3, #8]
 801b902:	681a      	ldr	r2, [r3, #0]
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	689b      	ldr	r3, [r3, #8]
 801b90c:	68fa      	ldr	r2, [r7, #12]
 801b90e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801b910:	bf00      	nop
 801b912:	3710      	adds	r7, #16
 801b914:	46bd      	mov	sp, r7
 801b916:	bd80      	pop	{r7, pc}
 801b918:	0802513c 	.word	0x0802513c
 801b91c:	080251ec 	.word	0x080251ec
 801b920:	08025190 	.word	0x08025190

0801b924 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801b924:	b580      	push	{r7, lr}
 801b926:	b082      	sub	sp, #8
 801b928:	af00      	add	r7, sp, #0
 801b92a:	6078      	str	r0, [r7, #4]
 801b92c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d106      	bne.n	801b942 <memp_free_pool+0x1e>
 801b934:	4b0a      	ldr	r3, [pc, #40]	; (801b960 <memp_free_pool+0x3c>)
 801b936:	f240 1295 	movw	r2, #405	; 0x195
 801b93a:	490a      	ldr	r1, [pc, #40]	; (801b964 <memp_free_pool+0x40>)
 801b93c:	480a      	ldr	r0, [pc, #40]	; (801b968 <memp_free_pool+0x44>)
 801b93e:	f004 fc5d 	bl	80201fc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d007      	beq.n	801b958 <memp_free_pool+0x34>
 801b948:	683b      	ldr	r3, [r7, #0]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d004      	beq.n	801b958 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801b94e:	6839      	ldr	r1, [r7, #0]
 801b950:	6878      	ldr	r0, [r7, #4]
 801b952:	f7ff ffc1 	bl	801b8d8 <do_memp_free_pool>
 801b956:	e000      	b.n	801b95a <memp_free_pool+0x36>
    return;
 801b958:	bf00      	nop
}
 801b95a:	3708      	adds	r7, #8
 801b95c:	46bd      	mov	sp, r7
 801b95e:	bd80      	pop	{r7, pc}
 801b960:	0802513c 	.word	0x0802513c
 801b964:	080251b8 	.word	0x080251b8
 801b968:	08025190 	.word	0x08025190

0801b96c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b082      	sub	sp, #8
 801b970:	af00      	add	r7, sp, #0
 801b972:	4603      	mov	r3, r0
 801b974:	6039      	str	r1, [r7, #0]
 801b976:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801b978:	79fb      	ldrb	r3, [r7, #7]
 801b97a:	2b05      	cmp	r3, #5
 801b97c:	d907      	bls.n	801b98e <memp_free+0x22>
 801b97e:	4b0c      	ldr	r3, [pc, #48]	; (801b9b0 <memp_free+0x44>)
 801b980:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801b984:	490b      	ldr	r1, [pc, #44]	; (801b9b4 <memp_free+0x48>)
 801b986:	480c      	ldr	r0, [pc, #48]	; (801b9b8 <memp_free+0x4c>)
 801b988:	f004 fc38 	bl	80201fc <iprintf>
 801b98c:	e00c      	b.n	801b9a8 <memp_free+0x3c>

  if (mem == NULL) {
 801b98e:	683b      	ldr	r3, [r7, #0]
 801b990:	2b00      	cmp	r3, #0
 801b992:	d008      	beq.n	801b9a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801b994:	79fb      	ldrb	r3, [r7, #7]
 801b996:	4a09      	ldr	r2, [pc, #36]	; (801b9bc <memp_free+0x50>)
 801b998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b99c:	6839      	ldr	r1, [r7, #0]
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f7ff ff9a 	bl	801b8d8 <do_memp_free_pool>
 801b9a4:	e000      	b.n	801b9a8 <memp_free+0x3c>
    return;
 801b9a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801b9a8:	3708      	adds	r7, #8
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	bd80      	pop	{r7, pc}
 801b9ae:	bf00      	nop
 801b9b0:	0802513c 	.word	0x0802513c
 801b9b4:	0802520c 	.word	0x0802520c
 801b9b8:	08025190 	.word	0x08025190
 801b9bc:	08026988 	.word	0x08026988

0801b9c0 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	b082      	sub	sp, #8
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	2b00      	cmp	r3, #0
 801b9cc:	d105      	bne.n	801b9da <netif_loopif_init+0x1a>
 801b9ce:	4b0b      	ldr	r3, [pc, #44]	; (801b9fc <netif_loopif_init+0x3c>)
 801b9d0:	2299      	movs	r2, #153	; 0x99
 801b9d2:	490b      	ldr	r1, [pc, #44]	; (801ba00 <netif_loopif_init+0x40>)
 801b9d4:	480b      	ldr	r0, [pc, #44]	; (801ba04 <netif_loopif_init+0x44>)
 801b9d6:	f004 fc11 	bl	80201fc <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	226c      	movs	r2, #108	; 0x6c
 801b9de:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	226f      	movs	r2, #111	; 0x6f
 801b9e6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	4a06      	ldr	r2, [pc, #24]	; (801ba08 <netif_loopif_init+0x48>)
 801b9ee:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801b9f0:	2300      	movs	r3, #0
}
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	3708      	adds	r7, #8
 801b9f6:	46bd      	mov	sp, r7
 801b9f8:	bd80      	pop	{r7, pc}
 801b9fa:	bf00      	nop
 801b9fc:	08025228 	.word	0x08025228
 801ba00:	0802525c 	.word	0x0802525c
 801ba04:	08025280 	.word	0x08025280
 801ba08:	0801c0ed 	.word	0x0801c0ed

0801ba0c <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b088      	sub	sp, #32
 801ba10:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801ba12:	4b0f      	ldr	r3, [pc, #60]	; (801ba50 <netif_init+0x44>)
 801ba14:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801ba16:	4b0e      	ldr	r3, [pc, #56]	; (801ba50 <netif_init+0x44>)
 801ba18:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801ba1a:	23ff      	movs	r3, #255	; 0xff
 801ba1c:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 801ba1e:	1d3b      	adds	r3, r7, #4
 801ba20:	f107 0208 	add.w	r2, r7, #8
 801ba24:	f107 010c 	add.w	r1, r7, #12
 801ba28:	480a      	ldr	r0, [pc, #40]	; (801ba54 <netif_init+0x48>)
 801ba2a:	9002      	str	r0, [sp, #8]
 801ba2c:	480a      	ldr	r0, [pc, #40]	; (801ba58 <netif_init+0x4c>)
 801ba2e:	9001      	str	r0, [sp, #4]
 801ba30:	2000      	movs	r0, #0
 801ba32:	9000      	str	r0, [sp, #0]
 801ba34:	4809      	ldr	r0, [pc, #36]	; (801ba5c <netif_init+0x50>)
 801ba36:	f000 f813 	bl	801ba60 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 801ba3a:	4808      	ldr	r0, [pc, #32]	; (801ba5c <netif_init+0x50>)
 801ba3c:	f000 fa72 	bl	801bf24 <netif_set_link_up>
  netif_set_up(&loop_netif);
 801ba40:	4806      	ldr	r0, [pc, #24]	; (801ba5c <netif_init+0x50>)
 801ba42:	f000 f9d1 	bl	801bde8 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 801ba46:	bf00      	nop
 801ba48:	3710      	adds	r7, #16
 801ba4a:	46bd      	mov	sp, r7
 801ba4c:	bd80      	pop	{r7, pc}
 801ba4e:	bf00      	nop
 801ba50:	0100007f 	.word	0x0100007f
 801ba54:	0801eb89 	.word	0x0801eb89
 801ba58:	0801b9c1 	.word	0x0801b9c1
 801ba5c:	20013188 	.word	0x20013188

0801ba60 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b086      	sub	sp, #24
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	60f8      	str	r0, [r7, #12]
 801ba68:	60b9      	str	r1, [r7, #8]
 801ba6a:	607a      	str	r2, [r7, #4]
 801ba6c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d108      	bne.n	801ba86 <netif_add+0x26>
 801ba74:	4b5a      	ldr	r3, [pc, #360]	; (801bbe0 <netif_add+0x180>)
 801ba76:	f240 1227 	movw	r2, #295	; 0x127
 801ba7a:	495a      	ldr	r1, [pc, #360]	; (801bbe4 <netif_add+0x184>)
 801ba7c:	485a      	ldr	r0, [pc, #360]	; (801bbe8 <netif_add+0x188>)
 801ba7e:	f004 fbbd 	bl	80201fc <iprintf>
 801ba82:	2300      	movs	r3, #0
 801ba84:	e0a8      	b.n	801bbd8 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d108      	bne.n	801ba9e <netif_add+0x3e>
 801ba8c:	4b54      	ldr	r3, [pc, #336]	; (801bbe0 <netif_add+0x180>)
 801ba8e:	f44f 7294 	mov.w	r2, #296	; 0x128
 801ba92:	4956      	ldr	r1, [pc, #344]	; (801bbec <netif_add+0x18c>)
 801ba94:	4854      	ldr	r0, [pc, #336]	; (801bbe8 <netif_add+0x188>)
 801ba96:	f004 fbb1 	bl	80201fc <iprintf>
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	e09c      	b.n	801bbd8 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801ba9e:	68bb      	ldr	r3, [r7, #8]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d101      	bne.n	801baa8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801baa4:	4b52      	ldr	r3, [pc, #328]	; (801bbf0 <netif_add+0x190>)
 801baa6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d101      	bne.n	801bab2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801baae:	4b50      	ldr	r3, [pc, #320]	; (801bbf0 <netif_add+0x190>)
 801bab0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801bab2:	683b      	ldr	r3, [r7, #0]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d101      	bne.n	801babc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801bab8:	4b4d      	ldr	r3, [pc, #308]	; (801bbf0 <netif_add+0x190>)
 801baba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	2200      	movs	r2, #0
 801bac0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	2200      	movs	r2, #0
 801bac6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	2200      	movs	r2, #0
 801bacc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	4a48      	ldr	r2, [pc, #288]	; (801bbf4 <netif_add+0x194>)
 801bad2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	2200      	movs	r2, #0
 801bad8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	2200      	movs	r2, #0
 801bade:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	2200      	movs	r2, #0
 801bae6:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 801bae8:	68fb      	ldr	r3, [r7, #12]
 801baea:	2200      	movs	r2, #0
 801baec:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	2200      	movs	r2, #0
 801baf2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	6a3a      	ldr	r2, [r7, #32]
 801baf8:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801bafa:	4b3f      	ldr	r3, [pc, #252]	; (801bbf8 <netif_add+0x198>)
 801bafc:	781a      	ldrb	r2, [r3, #0]
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bb08:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801bb0a:	683b      	ldr	r3, [r7, #0]
 801bb0c:	687a      	ldr	r2, [r7, #4]
 801bb0e:	68b9      	ldr	r1, [r7, #8]
 801bb10:	68f8      	ldr	r0, [r7, #12]
 801bb12:	f000 f90f 	bl	801bd34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb18:	68f8      	ldr	r0, [r7, #12]
 801bb1a:	4798      	blx	r3
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d001      	beq.n	801bb26 <netif_add+0xc6>
    return NULL;
 801bb22:	2300      	movs	r3, #0
 801bb24:	e058      	b.n	801bbd8 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bb2c:	2bff      	cmp	r3, #255	; 0xff
 801bb2e:	d103      	bne.n	801bb38 <netif_add+0xd8>
        netif->num = 0;
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	2200      	movs	r2, #0
 801bb34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801bb38:	2300      	movs	r3, #0
 801bb3a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bb3c:	4b2f      	ldr	r3, [pc, #188]	; (801bbfc <netif_add+0x19c>)
 801bb3e:	681b      	ldr	r3, [r3, #0]
 801bb40:	617b      	str	r3, [r7, #20]
 801bb42:	e02b      	b.n	801bb9c <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801bb44:	697a      	ldr	r2, [r7, #20]
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	429a      	cmp	r2, r3
 801bb4a:	d106      	bne.n	801bb5a <netif_add+0xfa>
 801bb4c:	4b24      	ldr	r3, [pc, #144]	; (801bbe0 <netif_add+0x180>)
 801bb4e:	f240 128b 	movw	r2, #395	; 0x18b
 801bb52:	492b      	ldr	r1, [pc, #172]	; (801bc00 <netif_add+0x1a0>)
 801bb54:	4824      	ldr	r0, [pc, #144]	; (801bbe8 <netif_add+0x188>)
 801bb56:	f004 fb51 	bl	80201fc <iprintf>
        num_netifs++;
 801bb5a:	693b      	ldr	r3, [r7, #16]
 801bb5c:	3301      	adds	r3, #1
 801bb5e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801bb60:	693b      	ldr	r3, [r7, #16]
 801bb62:	2bff      	cmp	r3, #255	; 0xff
 801bb64:	dd06      	ble.n	801bb74 <netif_add+0x114>
 801bb66:	4b1e      	ldr	r3, [pc, #120]	; (801bbe0 <netif_add+0x180>)
 801bb68:	f240 128d 	movw	r2, #397	; 0x18d
 801bb6c:	4925      	ldr	r1, [pc, #148]	; (801bc04 <netif_add+0x1a4>)
 801bb6e:	481e      	ldr	r0, [pc, #120]	; (801bbe8 <netif_add+0x188>)
 801bb70:	f004 fb44 	bl	80201fc <iprintf>
        if (netif2->num == netif->num) {
 801bb74:	697b      	ldr	r3, [r7, #20]
 801bb76:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bb80:	429a      	cmp	r2, r3
 801bb82:	d108      	bne.n	801bb96 <netif_add+0x136>
          netif->num++;
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bb8a:	3301      	adds	r3, #1
 801bb8c:	b2da      	uxtb	r2, r3
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801bb94:	e005      	b.n	801bba2 <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801bb96:	697b      	ldr	r3, [r7, #20]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	617b      	str	r3, [r7, #20]
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d1d0      	bne.n	801bb44 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 801bba2:	697b      	ldr	r3, [r7, #20]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d1be      	bne.n	801bb26 <netif_add+0xc6>
  }
  if (netif->num == 254) {
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bbae:	2bfe      	cmp	r3, #254	; 0xfe
 801bbb0:	d103      	bne.n	801bbba <netif_add+0x15a>
    netif_num = 0;
 801bbb2:	4b11      	ldr	r3, [pc, #68]	; (801bbf8 <netif_add+0x198>)
 801bbb4:	2200      	movs	r2, #0
 801bbb6:	701a      	strb	r2, [r3, #0]
 801bbb8:	e006      	b.n	801bbc8 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bbc0:	3301      	adds	r3, #1
 801bbc2:	b2da      	uxtb	r2, r3
 801bbc4:	4b0c      	ldr	r3, [pc, #48]	; (801bbf8 <netif_add+0x198>)
 801bbc6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801bbc8:	4b0c      	ldr	r3, [pc, #48]	; (801bbfc <netif_add+0x19c>)
 801bbca:	681a      	ldr	r2, [r3, #0]
 801bbcc:	68fb      	ldr	r3, [r7, #12]
 801bbce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801bbd0:	4a0a      	ldr	r2, [pc, #40]	; (801bbfc <netif_add+0x19c>)
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801bbd6:	68fb      	ldr	r3, [r7, #12]
}
 801bbd8:	4618      	mov	r0, r3
 801bbda:	3718      	adds	r7, #24
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}
 801bbe0:	08025228 	.word	0x08025228
 801bbe4:	080252e0 	.word	0x080252e0
 801bbe8:	08025280 	.word	0x08025280
 801bbec:	080252fc 	.word	0x080252fc
 801bbf0:	080269b0 	.word	0x080269b0
 801bbf4:	0801c10b 	.word	0x0801c10b
 801bbf8:	20013184 	.word	0x20013184
 801bbfc:	2001317c 	.word	0x2001317c
 801bc00:	08025320 	.word	0x08025320
 801bc04:	08025334 	.word	0x08025334

0801bc08 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b082      	sub	sp, #8
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
 801bc10:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801bc12:	6839      	ldr	r1, [r7, #0]
 801bc14:	6878      	ldr	r0, [r7, #4]
 801bc16:	f001 fe13 	bl	801d840 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801bc1a:	bf00      	nop
 801bc1c:	3708      	adds	r7, #8
 801bc1e:	46bd      	mov	sp, r7
 801bc20:	bd80      	pop	{r7, pc}
	...

0801bc24 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801bc24:	b580      	push	{r7, lr}
 801bc26:	b086      	sub	sp, #24
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	60f8      	str	r0, [r7, #12]
 801bc2c:	60b9      	str	r1, [r7, #8]
 801bc2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801bc30:	68bb      	ldr	r3, [r7, #8]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d106      	bne.n	801bc44 <netif_do_set_ipaddr+0x20>
 801bc36:	4b1d      	ldr	r3, [pc, #116]	; (801bcac <netif_do_set_ipaddr+0x88>)
 801bc38:	f240 12cb 	movw	r2, #459	; 0x1cb
 801bc3c:	491c      	ldr	r1, [pc, #112]	; (801bcb0 <netif_do_set_ipaddr+0x8c>)
 801bc3e:	481d      	ldr	r0, [pc, #116]	; (801bcb4 <netif_do_set_ipaddr+0x90>)
 801bc40:	f004 fadc 	bl	80201fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d106      	bne.n	801bc58 <netif_do_set_ipaddr+0x34>
 801bc4a:	4b18      	ldr	r3, [pc, #96]	; (801bcac <netif_do_set_ipaddr+0x88>)
 801bc4c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801bc50:	4917      	ldr	r1, [pc, #92]	; (801bcb0 <netif_do_set_ipaddr+0x8c>)
 801bc52:	4818      	ldr	r0, [pc, #96]	; (801bcb4 <netif_do_set_ipaddr+0x90>)
 801bc54:	f004 fad2 	bl	80201fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801bc58:	68bb      	ldr	r3, [r7, #8]
 801bc5a:	681a      	ldr	r2, [r3, #0]
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	3304      	adds	r3, #4
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	429a      	cmp	r2, r3
 801bc64:	d01c      	beq.n	801bca0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801bc66:	68bb      	ldr	r3, [r7, #8]
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	3304      	adds	r3, #4
 801bc70:	681a      	ldr	r2, [r3, #0]
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801bc76:	f107 0314 	add.w	r3, r7, #20
 801bc7a:	4619      	mov	r1, r3
 801bc7c:	6878      	ldr	r0, [r7, #4]
 801bc7e:	f7ff ffc3 	bl	801bc08 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801bc82:	68bb      	ldr	r3, [r7, #8]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	d002      	beq.n	801bc8e <netif_do_set_ipaddr+0x6a>
 801bc88:	68bb      	ldr	r3, [r7, #8]
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	e000      	b.n	801bc90 <netif_do_set_ipaddr+0x6c>
 801bc8e:	2300      	movs	r3, #0
 801bc90:	68fa      	ldr	r2, [r7, #12]
 801bc92:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801bc94:	2101      	movs	r1, #1
 801bc96:	68f8      	ldr	r0, [r7, #12]
 801bc98:	f000 f8d2 	bl	801be40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801bc9c:	2301      	movs	r3, #1
 801bc9e:	e000      	b.n	801bca2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801bca0:	2300      	movs	r3, #0
}
 801bca2:	4618      	mov	r0, r3
 801bca4:	3718      	adds	r7, #24
 801bca6:	46bd      	mov	sp, r7
 801bca8:	bd80      	pop	{r7, pc}
 801bcaa:	bf00      	nop
 801bcac:	08025228 	.word	0x08025228
 801bcb0:	08025364 	.word	0x08025364
 801bcb4:	08025280 	.word	0x08025280

0801bcb8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801bcb8:	b480      	push	{r7}
 801bcba:	b085      	sub	sp, #20
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	60f8      	str	r0, [r7, #12]
 801bcc0:	60b9      	str	r1, [r7, #8]
 801bcc2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801bcc4:	68bb      	ldr	r3, [r7, #8]
 801bcc6:	681a      	ldr	r2, [r3, #0]
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	3308      	adds	r3, #8
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	429a      	cmp	r2, r3
 801bcd0:	d00a      	beq.n	801bce8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801bcd2:	68bb      	ldr	r3, [r7, #8]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d002      	beq.n	801bcde <netif_do_set_netmask+0x26>
 801bcd8:	68bb      	ldr	r3, [r7, #8]
 801bcda:	681b      	ldr	r3, [r3, #0]
 801bcdc:	e000      	b.n	801bce0 <netif_do_set_netmask+0x28>
 801bcde:	2300      	movs	r3, #0
 801bce0:	68fa      	ldr	r2, [r7, #12]
 801bce2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801bce4:	2301      	movs	r3, #1
 801bce6:	e000      	b.n	801bcea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801bce8:	2300      	movs	r3, #0
}
 801bcea:	4618      	mov	r0, r3
 801bcec:	3714      	adds	r7, #20
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcf4:	4770      	bx	lr

0801bcf6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801bcf6:	b480      	push	{r7}
 801bcf8:	b085      	sub	sp, #20
 801bcfa:	af00      	add	r7, sp, #0
 801bcfc:	60f8      	str	r0, [r7, #12]
 801bcfe:	60b9      	str	r1, [r7, #8]
 801bd00:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801bd02:	68bb      	ldr	r3, [r7, #8]
 801bd04:	681a      	ldr	r2, [r3, #0]
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	330c      	adds	r3, #12
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	429a      	cmp	r2, r3
 801bd0e:	d00a      	beq.n	801bd26 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801bd10:	68bb      	ldr	r3, [r7, #8]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d002      	beq.n	801bd1c <netif_do_set_gw+0x26>
 801bd16:	68bb      	ldr	r3, [r7, #8]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	e000      	b.n	801bd1e <netif_do_set_gw+0x28>
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	68fa      	ldr	r2, [r7, #12]
 801bd20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801bd22:	2301      	movs	r3, #1
 801bd24:	e000      	b.n	801bd28 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801bd26:	2300      	movs	r3, #0
}
 801bd28:	4618      	mov	r0, r3
 801bd2a:	3714      	adds	r7, #20
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd32:	4770      	bx	lr

0801bd34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b088      	sub	sp, #32
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	60f8      	str	r0, [r7, #12]
 801bd3c:	60b9      	str	r1, [r7, #8]
 801bd3e:	607a      	str	r2, [r7, #4]
 801bd40:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801bd42:	2300      	movs	r3, #0
 801bd44:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801bd46:	2300      	movs	r3, #0
 801bd48:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bd4a:	68bb      	ldr	r3, [r7, #8]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d101      	bne.n	801bd54 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801bd50:	4b1c      	ldr	r3, [pc, #112]	; (801bdc4 <netif_set_addr+0x90>)
 801bd52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d101      	bne.n	801bd5e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801bd5a:	4b1a      	ldr	r3, [pc, #104]	; (801bdc4 <netif_set_addr+0x90>)
 801bd5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801bd5e:	683b      	ldr	r3, [r7, #0]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d101      	bne.n	801bd68 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801bd64:	4b17      	ldr	r3, [pc, #92]	; (801bdc4 <netif_set_addr+0x90>)
 801bd66:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801bd68:	68bb      	ldr	r3, [r7, #8]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d003      	beq.n	801bd76 <netif_set_addr+0x42>
 801bd6e:	68bb      	ldr	r3, [r7, #8]
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d101      	bne.n	801bd7a <netif_set_addr+0x46>
 801bd76:	2301      	movs	r3, #1
 801bd78:	e000      	b.n	801bd7c <netif_set_addr+0x48>
 801bd7a:	2300      	movs	r3, #0
 801bd7c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801bd7e:	697b      	ldr	r3, [r7, #20]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d006      	beq.n	801bd92 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bd84:	f107 0310 	add.w	r3, r7, #16
 801bd88:	461a      	mov	r2, r3
 801bd8a:	68b9      	ldr	r1, [r7, #8]
 801bd8c:	68f8      	ldr	r0, [r7, #12]
 801bd8e:	f7ff ff49 	bl	801bc24 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801bd92:	69fa      	ldr	r2, [r7, #28]
 801bd94:	6879      	ldr	r1, [r7, #4]
 801bd96:	68f8      	ldr	r0, [r7, #12]
 801bd98:	f7ff ff8e 	bl	801bcb8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801bd9c:	69ba      	ldr	r2, [r7, #24]
 801bd9e:	6839      	ldr	r1, [r7, #0]
 801bda0:	68f8      	ldr	r0, [r7, #12]
 801bda2:	f7ff ffa8 	bl	801bcf6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801bda6:	697b      	ldr	r3, [r7, #20]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d106      	bne.n	801bdba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801bdac:	f107 0310 	add.w	r3, r7, #16
 801bdb0:	461a      	mov	r2, r3
 801bdb2:	68b9      	ldr	r1, [r7, #8]
 801bdb4:	68f8      	ldr	r0, [r7, #12]
 801bdb6:	f7ff ff35 	bl	801bc24 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801bdba:	bf00      	nop
 801bdbc:	3720      	adds	r7, #32
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	bd80      	pop	{r7, pc}
 801bdc2:	bf00      	nop
 801bdc4:	080269b0 	.word	0x080269b0

0801bdc8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801bdc8:	b480      	push	{r7}
 801bdca:	b083      	sub	sp, #12
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801bdd0:	4a04      	ldr	r2, [pc, #16]	; (801bde4 <netif_set_default+0x1c>)
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801bdd6:	bf00      	nop
 801bdd8:	370c      	adds	r7, #12
 801bdda:	46bd      	mov	sp, r7
 801bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde0:	4770      	bx	lr
 801bde2:	bf00      	nop
 801bde4:	20013180 	.word	0x20013180

0801bde8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b082      	sub	sp, #8
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d107      	bne.n	801be06 <netif_set_up+0x1e>
 801bdf6:	4b0f      	ldr	r3, [pc, #60]	; (801be34 <netif_set_up+0x4c>)
 801bdf8:	f44f 7254 	mov.w	r2, #848	; 0x350
 801bdfc:	490e      	ldr	r1, [pc, #56]	; (801be38 <netif_set_up+0x50>)
 801bdfe:	480f      	ldr	r0, [pc, #60]	; (801be3c <netif_set_up+0x54>)
 801be00:	f004 f9fc 	bl	80201fc <iprintf>
 801be04:	e013      	b.n	801be2e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801be0c:	f003 0301 	and.w	r3, r3, #1
 801be10:	2b00      	cmp	r3, #0
 801be12:	d10c      	bne.n	801be2e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801be1a:	f043 0301 	orr.w	r3, r3, #1
 801be1e:	b2da      	uxtb	r2, r3
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801be26:	2103      	movs	r1, #3
 801be28:	6878      	ldr	r0, [r7, #4]
 801be2a:	f000 f809 	bl	801be40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801be2e:	3708      	adds	r7, #8
 801be30:	46bd      	mov	sp, r7
 801be32:	bd80      	pop	{r7, pc}
 801be34:	08025228 	.word	0x08025228
 801be38:	080253d4 	.word	0x080253d4
 801be3c:	08025280 	.word	0x08025280

0801be40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b082      	sub	sp, #8
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
 801be48:	460b      	mov	r3, r1
 801be4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d106      	bne.n	801be60 <netif_issue_reports+0x20>
 801be52:	4b18      	ldr	r3, [pc, #96]	; (801beb4 <netif_issue_reports+0x74>)
 801be54:	f240 326d 	movw	r2, #877	; 0x36d
 801be58:	4917      	ldr	r1, [pc, #92]	; (801beb8 <netif_issue_reports+0x78>)
 801be5a:	4818      	ldr	r0, [pc, #96]	; (801bebc <netif_issue_reports+0x7c>)
 801be5c:	f004 f9ce 	bl	80201fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801be66:	f003 0304 	and.w	r3, r3, #4
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d01e      	beq.n	801beac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801be74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d017      	beq.n	801beac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801be7c:	78fb      	ldrb	r3, [r7, #3]
 801be7e:	f003 0301 	and.w	r3, r3, #1
 801be82:	2b00      	cmp	r3, #0
 801be84:	d013      	beq.n	801beae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	3304      	adds	r3, #4
 801be8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d00e      	beq.n	801beae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801be96:	f003 0308 	and.w	r3, r3, #8
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d007      	beq.n	801beae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	3304      	adds	r3, #4
 801bea2:	4619      	mov	r1, r3
 801bea4:	6878      	ldr	r0, [r7, #4]
 801bea6:	f002 fc35 	bl	801e714 <etharp_request>
 801beaa:	e000      	b.n	801beae <netif_issue_reports+0x6e>
    return;
 801beac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801beae:	3708      	adds	r7, #8
 801beb0:	46bd      	mov	sp, r7
 801beb2:	bd80      	pop	{r7, pc}
 801beb4:	08025228 	.word	0x08025228
 801beb8:	080253f0 	.word	0x080253f0
 801bebc:	08025280 	.word	0x08025280

0801bec0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b082      	sub	sp, #8
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	2b00      	cmp	r3, #0
 801becc:	d107      	bne.n	801bede <netif_set_down+0x1e>
 801bece:	4b12      	ldr	r3, [pc, #72]	; (801bf18 <netif_set_down+0x58>)
 801bed0:	f240 329b 	movw	r2, #923	; 0x39b
 801bed4:	4911      	ldr	r1, [pc, #68]	; (801bf1c <netif_set_down+0x5c>)
 801bed6:	4812      	ldr	r0, [pc, #72]	; (801bf20 <netif_set_down+0x60>)
 801bed8:	f004 f990 	bl	80201fc <iprintf>
 801bedc:	e019      	b.n	801bf12 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bee4:	f003 0301 	and.w	r3, r3, #1
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d012      	beq.n	801bf12 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bef2:	f023 0301 	bic.w	r3, r3, #1
 801bef6:	b2da      	uxtb	r2, r3
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bf04:	f003 0308 	and.w	r3, r3, #8
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d002      	beq.n	801bf12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801bf0c:	6878      	ldr	r0, [r7, #4]
 801bf0e:	f001 ffbf 	bl	801de90 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801bf12:	3708      	adds	r7, #8
 801bf14:	46bd      	mov	sp, r7
 801bf16:	bd80      	pop	{r7, pc}
 801bf18:	08025228 	.word	0x08025228
 801bf1c:	08025414 	.word	0x08025414
 801bf20:	08025280 	.word	0x08025280

0801bf24 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b082      	sub	sp, #8
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	d107      	bne.n	801bf42 <netif_set_link_up+0x1e>
 801bf32:	4b13      	ldr	r3, [pc, #76]	; (801bf80 <netif_set_link_up+0x5c>)
 801bf34:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801bf38:	4912      	ldr	r1, [pc, #72]	; (801bf84 <netif_set_link_up+0x60>)
 801bf3a:	4813      	ldr	r0, [pc, #76]	; (801bf88 <netif_set_link_up+0x64>)
 801bf3c:	f004 f95e 	bl	80201fc <iprintf>
 801bf40:	e01b      	b.n	801bf7a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bf48:	f003 0304 	and.w	r3, r3, #4
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d114      	bne.n	801bf7a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bf56:	f043 0304 	orr.w	r3, r3, #4
 801bf5a:	b2da      	uxtb	r2, r3
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801bf62:	2103      	movs	r1, #3
 801bf64:	6878      	ldr	r0, [r7, #4]
 801bf66:	f7ff ff6b 	bl	801be40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	69db      	ldr	r3, [r3, #28]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d003      	beq.n	801bf7a <netif_set_link_up+0x56>
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	69db      	ldr	r3, [r3, #28]
 801bf76:	6878      	ldr	r0, [r7, #4]
 801bf78:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801bf7a:	3708      	adds	r7, #8
 801bf7c:	46bd      	mov	sp, r7
 801bf7e:	bd80      	pop	{r7, pc}
 801bf80:	08025228 	.word	0x08025228
 801bf84:	08025434 	.word	0x08025434
 801bf88:	08025280 	.word	0x08025280

0801bf8c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b082      	sub	sp, #8
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d107      	bne.n	801bfaa <netif_set_link_down+0x1e>
 801bf9a:	4b11      	ldr	r3, [pc, #68]	; (801bfe0 <netif_set_link_down+0x54>)
 801bf9c:	f240 4206 	movw	r2, #1030	; 0x406
 801bfa0:	4910      	ldr	r1, [pc, #64]	; (801bfe4 <netif_set_link_down+0x58>)
 801bfa2:	4811      	ldr	r0, [pc, #68]	; (801bfe8 <netif_set_link_down+0x5c>)
 801bfa4:	f004 f92a 	bl	80201fc <iprintf>
 801bfa8:	e017      	b.n	801bfda <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bfb0:	f003 0304 	and.w	r3, r3, #4
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d010      	beq.n	801bfda <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bfbe:	f023 0304 	bic.w	r3, r3, #4
 801bfc2:	b2da      	uxtb	r2, r3
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	69db      	ldr	r3, [r3, #28]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d003      	beq.n	801bfda <netif_set_link_down+0x4e>
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	69db      	ldr	r3, [r3, #28]
 801bfd6:	6878      	ldr	r0, [r7, #4]
 801bfd8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801bfda:	3708      	adds	r7, #8
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}
 801bfe0:	08025228 	.word	0x08025228
 801bfe4:	08025458 	.word	0x08025458
 801bfe8:	08025280 	.word	0x08025280

0801bfec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801bfec:	b480      	push	{r7}
 801bfee:	b083      	sub	sp, #12
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	6078      	str	r0, [r7, #4]
 801bff4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d002      	beq.n	801c002 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	683a      	ldr	r2, [r7, #0]
 801c000:	61da      	str	r2, [r3, #28]
  }
}
 801c002:	bf00      	nop
 801c004:	370c      	adds	r7, #12
 801c006:	46bd      	mov	sp, r7
 801c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c00c:	4770      	bx	lr
	...

0801c010 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 801c010:	b580      	push	{r7, lr}
 801c012:	b086      	sub	sp, #24
 801c014:	af00      	add	r7, sp, #0
 801c016:	6078      	str	r0, [r7, #4]
 801c018:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d106      	bne.n	801c02e <netif_loop_output+0x1e>
 801c020:	4b2d      	ldr	r3, [pc, #180]	; (801c0d8 <netif_loop_output+0xc8>)
 801c022:	f240 424b 	movw	r2, #1099	; 0x44b
 801c026:	492d      	ldr	r1, [pc, #180]	; (801c0dc <netif_loop_output+0xcc>)
 801c028:	482d      	ldr	r0, [pc, #180]	; (801c0e0 <netif_loop_output+0xd0>)
 801c02a:	f004 f8e7 	bl	80201fc <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 801c02e:	683b      	ldr	r3, [r7, #0]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d106      	bne.n	801c042 <netif_loop_output+0x32>
 801c034:	4b28      	ldr	r3, [pc, #160]	; (801c0d8 <netif_loop_output+0xc8>)
 801c036:	f240 424c 	movw	r2, #1100	; 0x44c
 801c03a:	492a      	ldr	r1, [pc, #168]	; (801c0e4 <netif_loop_output+0xd4>)
 801c03c:	4828      	ldr	r0, [pc, #160]	; (801c0e0 <netif_loop_output+0xd0>)
 801c03e:	f004 f8dd 	bl	80201fc <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801c042:	683b      	ldr	r3, [r7, #0]
 801c044:	891b      	ldrh	r3, [r3, #8]
 801c046:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c04a:	4619      	mov	r1, r3
 801c04c:	200e      	movs	r0, #14
 801c04e:	f000 f8bb 	bl	801c1c8 <pbuf_alloc>
 801c052:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 801c054:	693b      	ldr	r3, [r7, #16]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d102      	bne.n	801c060 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 801c05a:	f04f 33ff 	mov.w	r3, #4294967295
 801c05e:	e037      	b.n	801c0d0 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 801c060:	6839      	ldr	r1, [r7, #0]
 801c062:	6938      	ldr	r0, [r7, #16]
 801c064:	f000 fcba 	bl	801c9dc <pbuf_copy>
 801c068:	4603      	mov	r3, r0
 801c06a:	73fb      	strb	r3, [r7, #15]
 801c06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d005      	beq.n	801c080 <netif_loop_output+0x70>
    pbuf_free(r);
 801c074:	6938      	ldr	r0, [r7, #16]
 801c076:	f000 fb89 	bl	801c78c <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 801c07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c07e:	e027      	b.n	801c0d0 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 801c080:	693b      	ldr	r3, [r7, #16]
 801c082:	617b      	str	r3, [r7, #20]
 801c084:	e002      	b.n	801c08c <netif_loop_output+0x7c>
 801c086:	697b      	ldr	r3, [r7, #20]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	617b      	str	r3, [r7, #20]
 801c08c:	697b      	ldr	r3, [r7, #20]
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	2b00      	cmp	r3, #0
 801c092:	d1f8      	bne.n	801c086 <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d012      	beq.n	801c0c2 <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d106      	bne.n	801c0b2 <netif_loop_output+0xa2>
 801c0a4:	4b0c      	ldr	r3, [pc, #48]	; (801c0d8 <netif_loop_output+0xc8>)
 801c0a6:	f240 4277 	movw	r2, #1143	; 0x477
 801c0aa:	490f      	ldr	r1, [pc, #60]	; (801c0e8 <netif_loop_output+0xd8>)
 801c0ac:	480c      	ldr	r0, [pc, #48]	; (801c0e0 <netif_loop_output+0xd0>)
 801c0ae:	f004 f8a5 	bl	80201fc <iprintf>
    netif->loop_last->next = r;
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c0b6:	693a      	ldr	r2, [r7, #16]
 801c0b8:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	697a      	ldr	r2, [r7, #20]
 801c0be:	63da      	str	r2, [r3, #60]	; 0x3c
 801c0c0:	e005      	b.n	801c0ce <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	693a      	ldr	r2, [r7, #16]
 801c0c6:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	697a      	ldr	r2, [r7, #20]
 801c0cc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 801c0ce:	2300      	movs	r3, #0
}
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	3718      	adds	r7, #24
 801c0d4:	46bd      	mov	sp, r7
 801c0d6:	bd80      	pop	{r7, pc}
 801c0d8:	08025228 	.word	0x08025228
 801c0dc:	0802547c 	.word	0x0802547c
 801c0e0:	08025280 	.word	0x08025280
 801c0e4:	080254a0 	.word	0x080254a0
 801c0e8:	080254c0 	.word	0x080254c0

0801c0ec <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 801c0ec:	b580      	push	{r7, lr}
 801c0ee:	b084      	sub	sp, #16
 801c0f0:	af00      	add	r7, sp, #0
 801c0f2:	60f8      	str	r0, [r7, #12]
 801c0f4:	60b9      	str	r1, [r7, #8]
 801c0f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 801c0f8:	68b9      	ldr	r1, [r7, #8]
 801c0fa:	68f8      	ldr	r0, [r7, #12]
 801c0fc:	f7ff ff88 	bl	801c010 <netif_loop_output>
 801c100:	4603      	mov	r3, r0
}
 801c102:	4618      	mov	r0, r3
 801c104:	3710      	adds	r7, #16
 801c106:	46bd      	mov	sp, r7
 801c108:	bd80      	pop	{r7, pc}

0801c10a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801c10a:	b480      	push	{r7}
 801c10c:	b085      	sub	sp, #20
 801c10e:	af00      	add	r7, sp, #0
 801c110:	60f8      	str	r0, [r7, #12]
 801c112:	60b9      	str	r1, [r7, #8]
 801c114:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801c116:	f06f 030b 	mvn.w	r3, #11
}
 801c11a:	4618      	mov	r0, r3
 801c11c:	3714      	adds	r7, #20
 801c11e:	46bd      	mov	sp, r7
 801c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c124:	4770      	bx	lr
	...

0801c128 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801c128:	b480      	push	{r7}
 801c12a:	b085      	sub	sp, #20
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	4603      	mov	r3, r0
 801c130:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801c132:	79fb      	ldrb	r3, [r7, #7]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d013      	beq.n	801c160 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801c138:	4b0d      	ldr	r3, [pc, #52]	; (801c170 <netif_get_by_index+0x48>)
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	60fb      	str	r3, [r7, #12]
 801c13e:	e00c      	b.n	801c15a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c146:	3301      	adds	r3, #1
 801c148:	b2db      	uxtb	r3, r3
 801c14a:	79fa      	ldrb	r2, [r7, #7]
 801c14c:	429a      	cmp	r2, r3
 801c14e:	d101      	bne.n	801c154 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801c150:	68fb      	ldr	r3, [r7, #12]
 801c152:	e006      	b.n	801c162 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	60fb      	str	r3, [r7, #12]
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d1ef      	bne.n	801c140 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801c160:	2300      	movs	r3, #0
}
 801c162:	4618      	mov	r0, r3
 801c164:	3714      	adds	r7, #20
 801c166:	46bd      	mov	sp, r7
 801c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c16c:	4770      	bx	lr
 801c16e:	bf00      	nop
 801c170:	2001317c 	.word	0x2001317c

0801c174 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801c174:	b480      	push	{r7}
 801c176:	b085      	sub	sp, #20
 801c178:	af00      	add	r7, sp, #0
 801c17a:	60f8      	str	r0, [r7, #12]
 801c17c:	60b9      	str	r1, [r7, #8]
 801c17e:	4611      	mov	r1, r2
 801c180:	461a      	mov	r2, r3
 801c182:	460b      	mov	r3, r1
 801c184:	80fb      	strh	r3, [r7, #6]
 801c186:	4613      	mov	r3, r2
 801c188:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	2200      	movs	r2, #0
 801c18e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	68ba      	ldr	r2, [r7, #8]
 801c194:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801c196:	68fb      	ldr	r3, [r7, #12]
 801c198:	88fa      	ldrh	r2, [r7, #6]
 801c19a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	88ba      	ldrh	r2, [r7, #4]
 801c1a0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801c1a2:	8b3b      	ldrh	r3, [r7, #24]
 801c1a4:	b2da      	uxtb	r2, r3
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	7f3a      	ldrb	r2, [r7, #28]
 801c1ae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	2201      	movs	r2, #1
 801c1b4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	2200      	movs	r2, #0
 801c1ba:	73da      	strb	r2, [r3, #15]
}
 801c1bc:	bf00      	nop
 801c1be:	3714      	adds	r7, #20
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c6:	4770      	bx	lr

0801c1c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b08c      	sub	sp, #48	; 0x30
 801c1cc:	af02      	add	r7, sp, #8
 801c1ce:	4603      	mov	r3, r0
 801c1d0:	71fb      	strb	r3, [r7, #7]
 801c1d2:	460b      	mov	r3, r1
 801c1d4:	80bb      	strh	r3, [r7, #4]
 801c1d6:	4613      	mov	r3, r2
 801c1d8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801c1da:	79fb      	ldrb	r3, [r7, #7]
 801c1dc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801c1de:	887b      	ldrh	r3, [r7, #2]
 801c1e0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801c1e4:	d07d      	beq.n	801c2e2 <pbuf_alloc+0x11a>
 801c1e6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801c1ea:	f300 80c6 	bgt.w	801c37a <pbuf_alloc+0x1b2>
 801c1ee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801c1f2:	d010      	beq.n	801c216 <pbuf_alloc+0x4e>
 801c1f4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801c1f8:	f300 80bf 	bgt.w	801c37a <pbuf_alloc+0x1b2>
 801c1fc:	2b01      	cmp	r3, #1
 801c1fe:	d002      	beq.n	801c206 <pbuf_alloc+0x3e>
 801c200:	2b41      	cmp	r3, #65	; 0x41
 801c202:	f040 80ba 	bne.w	801c37a <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801c206:	887a      	ldrh	r2, [r7, #2]
 801c208:	88bb      	ldrh	r3, [r7, #4]
 801c20a:	4619      	mov	r1, r3
 801c20c:	2000      	movs	r0, #0
 801c20e:	f000 f8cf 	bl	801c3b0 <pbuf_alloc_reference>
 801c212:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801c214:	e0bb      	b.n	801c38e <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801c216:	2300      	movs	r3, #0
 801c218:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801c21a:	2300      	movs	r3, #0
 801c21c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801c21e:	88bb      	ldrh	r3, [r7, #4]
 801c220:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801c222:	2005      	movs	r0, #5
 801c224:	f7ff fb32 	bl	801b88c <memp_malloc>
 801c228:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801c22a:	693b      	ldr	r3, [r7, #16]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d107      	bne.n	801c240 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c232:	2b00      	cmp	r3, #0
 801c234:	d002      	beq.n	801c23c <pbuf_alloc+0x74>
            pbuf_free(p);
 801c236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c238:	f000 faa8 	bl	801c78c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801c23c:	2300      	movs	r3, #0
 801c23e:	e0a7      	b.n	801c390 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801c240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c242:	3303      	adds	r3, #3
 801c244:	b29b      	uxth	r3, r3
 801c246:	f023 0303 	bic.w	r3, r3, #3
 801c24a:	b29b      	uxth	r3, r3
 801c24c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801c250:	b29b      	uxth	r3, r3
 801c252:	8b7a      	ldrh	r2, [r7, #26]
 801c254:	4293      	cmp	r3, r2
 801c256:	bf28      	it	cs
 801c258:	4613      	movcs	r3, r2
 801c25a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801c25c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c25e:	3310      	adds	r3, #16
 801c260:	693a      	ldr	r2, [r7, #16]
 801c262:	4413      	add	r3, r2
 801c264:	3303      	adds	r3, #3
 801c266:	f023 0303 	bic.w	r3, r3, #3
 801c26a:	4618      	mov	r0, r3
 801c26c:	89f9      	ldrh	r1, [r7, #14]
 801c26e:	8b7a      	ldrh	r2, [r7, #26]
 801c270:	2300      	movs	r3, #0
 801c272:	9301      	str	r3, [sp, #4]
 801c274:	887b      	ldrh	r3, [r7, #2]
 801c276:	9300      	str	r3, [sp, #0]
 801c278:	460b      	mov	r3, r1
 801c27a:	4601      	mov	r1, r0
 801c27c:	6938      	ldr	r0, [r7, #16]
 801c27e:	f7ff ff79 	bl	801c174 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801c282:	693b      	ldr	r3, [r7, #16]
 801c284:	685b      	ldr	r3, [r3, #4]
 801c286:	f003 0303 	and.w	r3, r3, #3
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d006      	beq.n	801c29c <pbuf_alloc+0xd4>
 801c28e:	4b42      	ldr	r3, [pc, #264]	; (801c398 <pbuf_alloc+0x1d0>)
 801c290:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c294:	4941      	ldr	r1, [pc, #260]	; (801c39c <pbuf_alloc+0x1d4>)
 801c296:	4842      	ldr	r0, [pc, #264]	; (801c3a0 <pbuf_alloc+0x1d8>)
 801c298:	f003 ffb0 	bl	80201fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801c29c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c29e:	3303      	adds	r3, #3
 801c2a0:	f023 0303 	bic.w	r3, r3, #3
 801c2a4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801c2a8:	d106      	bne.n	801c2b8 <pbuf_alloc+0xf0>
 801c2aa:	4b3b      	ldr	r3, [pc, #236]	; (801c398 <pbuf_alloc+0x1d0>)
 801c2ac:	f44f 7281 	mov.w	r2, #258	; 0x102
 801c2b0:	493c      	ldr	r1, [pc, #240]	; (801c3a4 <pbuf_alloc+0x1dc>)
 801c2b2:	483b      	ldr	r0, [pc, #236]	; (801c3a0 <pbuf_alloc+0x1d8>)
 801c2b4:	f003 ffa2 	bl	80201fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	d102      	bne.n	801c2c4 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801c2be:	693b      	ldr	r3, [r7, #16]
 801c2c0:	627b      	str	r3, [r7, #36]	; 0x24
 801c2c2:	e002      	b.n	801c2ca <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801c2c4:	69fb      	ldr	r3, [r7, #28]
 801c2c6:	693a      	ldr	r2, [r7, #16]
 801c2c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801c2ca:	693b      	ldr	r3, [r7, #16]
 801c2cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801c2ce:	8b7a      	ldrh	r2, [r7, #26]
 801c2d0:	89fb      	ldrh	r3, [r7, #14]
 801c2d2:	1ad3      	subs	r3, r2, r3
 801c2d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801c2da:	8b7b      	ldrh	r3, [r7, #26]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d1a0      	bne.n	801c222 <pbuf_alloc+0x5a>
      break;
 801c2e0:	e055      	b.n	801c38e <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801c2e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c2e4:	3303      	adds	r3, #3
 801c2e6:	b29b      	uxth	r3, r3
 801c2e8:	f023 0303 	bic.w	r3, r3, #3
 801c2ec:	b29a      	uxth	r2, r3
 801c2ee:	88bb      	ldrh	r3, [r7, #4]
 801c2f0:	3303      	adds	r3, #3
 801c2f2:	b29b      	uxth	r3, r3
 801c2f4:	f023 0303 	bic.w	r3, r3, #3
 801c2f8:	b29b      	uxth	r3, r3
 801c2fa:	4413      	add	r3, r2
 801c2fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801c2fe:	8b3b      	ldrh	r3, [r7, #24]
 801c300:	3310      	adds	r3, #16
 801c302:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c304:	8b3a      	ldrh	r2, [r7, #24]
 801c306:	88bb      	ldrh	r3, [r7, #4]
 801c308:	3303      	adds	r3, #3
 801c30a:	f023 0303 	bic.w	r3, r3, #3
 801c30e:	429a      	cmp	r2, r3
 801c310:	d306      	bcc.n	801c320 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801c312:	8afa      	ldrh	r2, [r7, #22]
 801c314:	88bb      	ldrh	r3, [r7, #4]
 801c316:	3303      	adds	r3, #3
 801c318:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801c31c:	429a      	cmp	r2, r3
 801c31e:	d201      	bcs.n	801c324 <pbuf_alloc+0x15c>
        return NULL;
 801c320:	2300      	movs	r3, #0
 801c322:	e035      	b.n	801c390 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801c324:	8afb      	ldrh	r3, [r7, #22]
 801c326:	4618      	mov	r0, r3
 801c328:	f7ff f920 	bl	801b56c <mem_malloc>
 801c32c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c330:	2b00      	cmp	r3, #0
 801c332:	d101      	bne.n	801c338 <pbuf_alloc+0x170>
        return NULL;
 801c334:	2300      	movs	r3, #0
 801c336:	e02b      	b.n	801c390 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801c338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c33a:	3310      	adds	r3, #16
 801c33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c33e:	4413      	add	r3, r2
 801c340:	3303      	adds	r3, #3
 801c342:	f023 0303 	bic.w	r3, r3, #3
 801c346:	4618      	mov	r0, r3
 801c348:	88b9      	ldrh	r1, [r7, #4]
 801c34a:	88ba      	ldrh	r2, [r7, #4]
 801c34c:	2300      	movs	r3, #0
 801c34e:	9301      	str	r3, [sp, #4]
 801c350:	887b      	ldrh	r3, [r7, #2]
 801c352:	9300      	str	r3, [sp, #0]
 801c354:	460b      	mov	r3, r1
 801c356:	4601      	mov	r1, r0
 801c358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c35a:	f7ff ff0b 	bl	801c174 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c360:	685b      	ldr	r3, [r3, #4]
 801c362:	f003 0303 	and.w	r3, r3, #3
 801c366:	2b00      	cmp	r3, #0
 801c368:	d010      	beq.n	801c38c <pbuf_alloc+0x1c4>
 801c36a:	4b0b      	ldr	r3, [pc, #44]	; (801c398 <pbuf_alloc+0x1d0>)
 801c36c:	f44f 7291 	mov.w	r2, #290	; 0x122
 801c370:	490d      	ldr	r1, [pc, #52]	; (801c3a8 <pbuf_alloc+0x1e0>)
 801c372:	480b      	ldr	r0, [pc, #44]	; (801c3a0 <pbuf_alloc+0x1d8>)
 801c374:	f003 ff42 	bl	80201fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801c378:	e008      	b.n	801c38c <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801c37a:	4b07      	ldr	r3, [pc, #28]	; (801c398 <pbuf_alloc+0x1d0>)
 801c37c:	f240 1227 	movw	r2, #295	; 0x127
 801c380:	490a      	ldr	r1, [pc, #40]	; (801c3ac <pbuf_alloc+0x1e4>)
 801c382:	4807      	ldr	r0, [pc, #28]	; (801c3a0 <pbuf_alloc+0x1d8>)
 801c384:	f003 ff3a 	bl	80201fc <iprintf>
      return NULL;
 801c388:	2300      	movs	r3, #0
 801c38a:	e001      	b.n	801c390 <pbuf_alloc+0x1c8>
      break;
 801c38c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c390:	4618      	mov	r0, r3
 801c392:	3728      	adds	r7, #40	; 0x28
 801c394:	46bd      	mov	sp, r7
 801c396:	bd80      	pop	{r7, pc}
 801c398:	08025560 	.word	0x08025560
 801c39c:	08025590 	.word	0x08025590
 801c3a0:	080255c0 	.word	0x080255c0
 801c3a4:	080255e8 	.word	0x080255e8
 801c3a8:	0802561c 	.word	0x0802561c
 801c3ac:	08025648 	.word	0x08025648

0801c3b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b086      	sub	sp, #24
 801c3b4:	af02      	add	r7, sp, #8
 801c3b6:	6078      	str	r0, [r7, #4]
 801c3b8:	460b      	mov	r3, r1
 801c3ba:	807b      	strh	r3, [r7, #2]
 801c3bc:	4613      	mov	r3, r2
 801c3be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801c3c0:	883b      	ldrh	r3, [r7, #0]
 801c3c2:	2b41      	cmp	r3, #65	; 0x41
 801c3c4:	d009      	beq.n	801c3da <pbuf_alloc_reference+0x2a>
 801c3c6:	883b      	ldrh	r3, [r7, #0]
 801c3c8:	2b01      	cmp	r3, #1
 801c3ca:	d006      	beq.n	801c3da <pbuf_alloc_reference+0x2a>
 801c3cc:	4b0f      	ldr	r3, [pc, #60]	; (801c40c <pbuf_alloc_reference+0x5c>)
 801c3ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801c3d2:	490f      	ldr	r1, [pc, #60]	; (801c410 <pbuf_alloc_reference+0x60>)
 801c3d4:	480f      	ldr	r0, [pc, #60]	; (801c414 <pbuf_alloc_reference+0x64>)
 801c3d6:	f003 ff11 	bl	80201fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801c3da:	2004      	movs	r0, #4
 801c3dc:	f7ff fa56 	bl	801b88c <memp_malloc>
 801c3e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d101      	bne.n	801c3ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	e00b      	b.n	801c404 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801c3ec:	8879      	ldrh	r1, [r7, #2]
 801c3ee:	887a      	ldrh	r2, [r7, #2]
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	9301      	str	r3, [sp, #4]
 801c3f4:	883b      	ldrh	r3, [r7, #0]
 801c3f6:	9300      	str	r3, [sp, #0]
 801c3f8:	460b      	mov	r3, r1
 801c3fa:	6879      	ldr	r1, [r7, #4]
 801c3fc:	68f8      	ldr	r0, [r7, #12]
 801c3fe:	f7ff feb9 	bl	801c174 <pbuf_init_alloced_pbuf>
  return p;
 801c402:	68fb      	ldr	r3, [r7, #12]
}
 801c404:	4618      	mov	r0, r3
 801c406:	3710      	adds	r7, #16
 801c408:	46bd      	mov	sp, r7
 801c40a:	bd80      	pop	{r7, pc}
 801c40c:	08025560 	.word	0x08025560
 801c410:	08025664 	.word	0x08025664
 801c414:	080255c0 	.word	0x080255c0

0801c418 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801c418:	b580      	push	{r7, lr}
 801c41a:	b088      	sub	sp, #32
 801c41c:	af02      	add	r7, sp, #8
 801c41e:	607b      	str	r3, [r7, #4]
 801c420:	4603      	mov	r3, r0
 801c422:	73fb      	strb	r3, [r7, #15]
 801c424:	460b      	mov	r3, r1
 801c426:	81bb      	strh	r3, [r7, #12]
 801c428:	4613      	mov	r3, r2
 801c42a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801c42c:	7bfb      	ldrb	r3, [r7, #15]
 801c42e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801c430:	8a7b      	ldrh	r3, [r7, #18]
 801c432:	3303      	adds	r3, #3
 801c434:	f023 0203 	bic.w	r2, r3, #3
 801c438:	89bb      	ldrh	r3, [r7, #12]
 801c43a:	441a      	add	r2, r3
 801c43c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c43e:	429a      	cmp	r2, r3
 801c440:	d901      	bls.n	801c446 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801c442:	2300      	movs	r3, #0
 801c444:	e018      	b.n	801c478 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801c446:	6a3b      	ldr	r3, [r7, #32]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d007      	beq.n	801c45c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801c44c:	8a7b      	ldrh	r3, [r7, #18]
 801c44e:	3303      	adds	r3, #3
 801c450:	f023 0303 	bic.w	r3, r3, #3
 801c454:	6a3a      	ldr	r2, [r7, #32]
 801c456:	4413      	add	r3, r2
 801c458:	617b      	str	r3, [r7, #20]
 801c45a:	e001      	b.n	801c460 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801c45c:	2300      	movs	r3, #0
 801c45e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801c460:	6878      	ldr	r0, [r7, #4]
 801c462:	89b9      	ldrh	r1, [r7, #12]
 801c464:	89ba      	ldrh	r2, [r7, #12]
 801c466:	2302      	movs	r3, #2
 801c468:	9301      	str	r3, [sp, #4]
 801c46a:	897b      	ldrh	r3, [r7, #10]
 801c46c:	9300      	str	r3, [sp, #0]
 801c46e:	460b      	mov	r3, r1
 801c470:	6979      	ldr	r1, [r7, #20]
 801c472:	f7ff fe7f 	bl	801c174 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801c476:	687b      	ldr	r3, [r7, #4]
}
 801c478:	4618      	mov	r0, r3
 801c47a:	3718      	adds	r7, #24
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bd80      	pop	{r7, pc}

0801c480 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801c480:	b580      	push	{r7, lr}
 801c482:	b084      	sub	sp, #16
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
 801c488:	460b      	mov	r3, r1
 801c48a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d106      	bne.n	801c4a0 <pbuf_realloc+0x20>
 801c492:	4b3a      	ldr	r3, [pc, #232]	; (801c57c <pbuf_realloc+0xfc>)
 801c494:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801c498:	4939      	ldr	r1, [pc, #228]	; (801c580 <pbuf_realloc+0x100>)
 801c49a:	483a      	ldr	r0, [pc, #232]	; (801c584 <pbuf_realloc+0x104>)
 801c49c:	f003 feae 	bl	80201fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	891b      	ldrh	r3, [r3, #8]
 801c4a4:	887a      	ldrh	r2, [r7, #2]
 801c4a6:	429a      	cmp	r2, r3
 801c4a8:	d263      	bcs.n	801c572 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	891a      	ldrh	r2, [r3, #8]
 801c4ae:	887b      	ldrh	r3, [r7, #2]
 801c4b0:	1ad3      	subs	r3, r2, r3
 801c4b2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801c4b4:	887b      	ldrh	r3, [r7, #2]
 801c4b6:	817b      	strh	r3, [r7, #10]
  q = p;
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801c4bc:	e018      	b.n	801c4f0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	895b      	ldrh	r3, [r3, #10]
 801c4c2:	897a      	ldrh	r2, [r7, #10]
 801c4c4:	1ad3      	subs	r3, r2, r3
 801c4c6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	891a      	ldrh	r2, [r3, #8]
 801c4cc:	893b      	ldrh	r3, [r7, #8]
 801c4ce:	1ad3      	subs	r3, r2, r3
 801c4d0:	b29a      	uxth	r2, r3
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801c4d6:	68fb      	ldr	r3, [r7, #12]
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d106      	bne.n	801c4f0 <pbuf_realloc+0x70>
 801c4e2:	4b26      	ldr	r3, [pc, #152]	; (801c57c <pbuf_realloc+0xfc>)
 801c4e4:	f240 12af 	movw	r2, #431	; 0x1af
 801c4e8:	4927      	ldr	r1, [pc, #156]	; (801c588 <pbuf_realloc+0x108>)
 801c4ea:	4826      	ldr	r0, [pc, #152]	; (801c584 <pbuf_realloc+0x104>)
 801c4ec:	f003 fe86 	bl	80201fc <iprintf>
  while (rem_len > q->len) {
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	895b      	ldrh	r3, [r3, #10]
 801c4f4:	897a      	ldrh	r2, [r7, #10]
 801c4f6:	429a      	cmp	r2, r3
 801c4f8:	d8e1      	bhi.n	801c4be <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	7b1b      	ldrb	r3, [r3, #12]
 801c4fe:	f003 030f 	and.w	r3, r3, #15
 801c502:	2b00      	cmp	r3, #0
 801c504:	d121      	bne.n	801c54a <pbuf_realloc+0xca>
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	895b      	ldrh	r3, [r3, #10]
 801c50a:	897a      	ldrh	r2, [r7, #10]
 801c50c:	429a      	cmp	r2, r3
 801c50e:	d01c      	beq.n	801c54a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801c510:	68fb      	ldr	r3, [r7, #12]
 801c512:	7b5b      	ldrb	r3, [r3, #13]
 801c514:	f003 0302 	and.w	r3, r3, #2
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d116      	bne.n	801c54a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	685a      	ldr	r2, [r3, #4]
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	1ad3      	subs	r3, r2, r3
 801c524:	b29a      	uxth	r2, r3
 801c526:	897b      	ldrh	r3, [r7, #10]
 801c528:	4413      	add	r3, r2
 801c52a:	b29b      	uxth	r3, r3
 801c52c:	4619      	mov	r1, r3
 801c52e:	68f8      	ldr	r0, [r7, #12]
 801c530:	f7fe ff20 	bl	801b374 <mem_trim>
 801c534:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d106      	bne.n	801c54a <pbuf_realloc+0xca>
 801c53c:	4b0f      	ldr	r3, [pc, #60]	; (801c57c <pbuf_realloc+0xfc>)
 801c53e:	f240 12bd 	movw	r2, #445	; 0x1bd
 801c542:	4912      	ldr	r1, [pc, #72]	; (801c58c <pbuf_realloc+0x10c>)
 801c544:	480f      	ldr	r0, [pc, #60]	; (801c584 <pbuf_realloc+0x104>)
 801c546:	f003 fe59 	bl	80201fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801c54a:	68fb      	ldr	r3, [r7, #12]
 801c54c:	897a      	ldrh	r2, [r7, #10]
 801c54e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	895a      	ldrh	r2, [r3, #10]
 801c554:	68fb      	ldr	r3, [r7, #12]
 801c556:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d004      	beq.n	801c56a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	4618      	mov	r0, r3
 801c566:	f000 f911 	bl	801c78c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	2200      	movs	r2, #0
 801c56e:	601a      	str	r2, [r3, #0]
 801c570:	e000      	b.n	801c574 <pbuf_realloc+0xf4>
    return;
 801c572:	bf00      	nop

}
 801c574:	3710      	adds	r7, #16
 801c576:	46bd      	mov	sp, r7
 801c578:	bd80      	pop	{r7, pc}
 801c57a:	bf00      	nop
 801c57c:	08025560 	.word	0x08025560
 801c580:	08025678 	.word	0x08025678
 801c584:	080255c0 	.word	0x080255c0
 801c588:	08025690 	.word	0x08025690
 801c58c:	080256a8 	.word	0x080256a8

0801c590 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b086      	sub	sp, #24
 801c594:	af00      	add	r7, sp, #0
 801c596:	60f8      	str	r0, [r7, #12]
 801c598:	60b9      	str	r1, [r7, #8]
 801c59a:	4613      	mov	r3, r2
 801c59c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d106      	bne.n	801c5b2 <pbuf_add_header_impl+0x22>
 801c5a4:	4b2b      	ldr	r3, [pc, #172]	; (801c654 <pbuf_add_header_impl+0xc4>)
 801c5a6:	f240 12df 	movw	r2, #479	; 0x1df
 801c5aa:	492b      	ldr	r1, [pc, #172]	; (801c658 <pbuf_add_header_impl+0xc8>)
 801c5ac:	482b      	ldr	r0, [pc, #172]	; (801c65c <pbuf_add_header_impl+0xcc>)
 801c5ae:	f003 fe25 	bl	80201fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d003      	beq.n	801c5c0 <pbuf_add_header_impl+0x30>
 801c5b8:	68bb      	ldr	r3, [r7, #8]
 801c5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c5be:	d301      	bcc.n	801c5c4 <pbuf_add_header_impl+0x34>
    return 1;
 801c5c0:	2301      	movs	r3, #1
 801c5c2:	e043      	b.n	801c64c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801c5c4:	68bb      	ldr	r3, [r7, #8]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d101      	bne.n	801c5ce <pbuf_add_header_impl+0x3e>
    return 0;
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	e03e      	b.n	801c64c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801c5ce:	68bb      	ldr	r3, [r7, #8]
 801c5d0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	891a      	ldrh	r2, [r3, #8]
 801c5d6:	8a7b      	ldrh	r3, [r7, #18]
 801c5d8:	4413      	add	r3, r2
 801c5da:	b29b      	uxth	r3, r3
 801c5dc:	8a7a      	ldrh	r2, [r7, #18]
 801c5de:	429a      	cmp	r2, r3
 801c5e0:	d901      	bls.n	801c5e6 <pbuf_add_header_impl+0x56>
    return 1;
 801c5e2:	2301      	movs	r3, #1
 801c5e4:	e032      	b.n	801c64c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	7b1b      	ldrb	r3, [r3, #12]
 801c5ea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801c5ec:	8a3b      	ldrh	r3, [r7, #16]
 801c5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d00c      	beq.n	801c610 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	685a      	ldr	r2, [r3, #4]
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	425b      	negs	r3, r3
 801c5fe:	4413      	add	r3, r2
 801c600:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	3310      	adds	r3, #16
 801c606:	697a      	ldr	r2, [r7, #20]
 801c608:	429a      	cmp	r2, r3
 801c60a:	d20d      	bcs.n	801c628 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801c60c:	2301      	movs	r3, #1
 801c60e:	e01d      	b.n	801c64c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801c610:	79fb      	ldrb	r3, [r7, #7]
 801c612:	2b00      	cmp	r3, #0
 801c614:	d006      	beq.n	801c624 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	685a      	ldr	r2, [r3, #4]
 801c61a:	68bb      	ldr	r3, [r7, #8]
 801c61c:	425b      	negs	r3, r3
 801c61e:	4413      	add	r3, r2
 801c620:	617b      	str	r3, [r7, #20]
 801c622:	e001      	b.n	801c628 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801c624:	2301      	movs	r3, #1
 801c626:	e011      	b.n	801c64c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	697a      	ldr	r2, [r7, #20]
 801c62c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	895a      	ldrh	r2, [r3, #10]
 801c632:	8a7b      	ldrh	r3, [r7, #18]
 801c634:	4413      	add	r3, r2
 801c636:	b29a      	uxth	r2, r3
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	891a      	ldrh	r2, [r3, #8]
 801c640:	8a7b      	ldrh	r3, [r7, #18]
 801c642:	4413      	add	r3, r2
 801c644:	b29a      	uxth	r2, r3
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	811a      	strh	r2, [r3, #8]


  return 0;
 801c64a:	2300      	movs	r3, #0
}
 801c64c:	4618      	mov	r0, r3
 801c64e:	3718      	adds	r7, #24
 801c650:	46bd      	mov	sp, r7
 801c652:	bd80      	pop	{r7, pc}
 801c654:	08025560 	.word	0x08025560
 801c658:	080256c4 	.word	0x080256c4
 801c65c:	080255c0 	.word	0x080255c0

0801c660 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801c660:	b580      	push	{r7, lr}
 801c662:	b082      	sub	sp, #8
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
 801c668:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801c66a:	2200      	movs	r2, #0
 801c66c:	6839      	ldr	r1, [r7, #0]
 801c66e:	6878      	ldr	r0, [r7, #4]
 801c670:	f7ff ff8e 	bl	801c590 <pbuf_add_header_impl>
 801c674:	4603      	mov	r3, r0
}
 801c676:	4618      	mov	r0, r3
 801c678:	3708      	adds	r7, #8
 801c67a:	46bd      	mov	sp, r7
 801c67c:	bd80      	pop	{r7, pc}
	...

0801c680 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801c680:	b580      	push	{r7, lr}
 801c682:	b084      	sub	sp, #16
 801c684:	af00      	add	r7, sp, #0
 801c686:	6078      	str	r0, [r7, #4]
 801c688:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d106      	bne.n	801c69e <pbuf_remove_header+0x1e>
 801c690:	4b20      	ldr	r3, [pc, #128]	; (801c714 <pbuf_remove_header+0x94>)
 801c692:	f240 224b 	movw	r2, #587	; 0x24b
 801c696:	4920      	ldr	r1, [pc, #128]	; (801c718 <pbuf_remove_header+0x98>)
 801c698:	4820      	ldr	r0, [pc, #128]	; (801c71c <pbuf_remove_header+0x9c>)
 801c69a:	f003 fdaf 	bl	80201fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d003      	beq.n	801c6ac <pbuf_remove_header+0x2c>
 801c6a4:	683b      	ldr	r3, [r7, #0]
 801c6a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c6aa:	d301      	bcc.n	801c6b0 <pbuf_remove_header+0x30>
    return 1;
 801c6ac:	2301      	movs	r3, #1
 801c6ae:	e02c      	b.n	801c70a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801c6b0:	683b      	ldr	r3, [r7, #0]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d101      	bne.n	801c6ba <pbuf_remove_header+0x3a>
    return 0;
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	e027      	b.n	801c70a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801c6ba:	683b      	ldr	r3, [r7, #0]
 801c6bc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	895b      	ldrh	r3, [r3, #10]
 801c6c2:	89fa      	ldrh	r2, [r7, #14]
 801c6c4:	429a      	cmp	r2, r3
 801c6c6:	d908      	bls.n	801c6da <pbuf_remove_header+0x5a>
 801c6c8:	4b12      	ldr	r3, [pc, #72]	; (801c714 <pbuf_remove_header+0x94>)
 801c6ca:	f240 2255 	movw	r2, #597	; 0x255
 801c6ce:	4914      	ldr	r1, [pc, #80]	; (801c720 <pbuf_remove_header+0xa0>)
 801c6d0:	4812      	ldr	r0, [pc, #72]	; (801c71c <pbuf_remove_header+0x9c>)
 801c6d2:	f003 fd93 	bl	80201fc <iprintf>
 801c6d6:	2301      	movs	r3, #1
 801c6d8:	e017      	b.n	801c70a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	685b      	ldr	r3, [r3, #4]
 801c6de:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	685a      	ldr	r2, [r3, #4]
 801c6e4:	683b      	ldr	r3, [r7, #0]
 801c6e6:	441a      	add	r2, r3
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	895a      	ldrh	r2, [r3, #10]
 801c6f0:	89fb      	ldrh	r3, [r7, #14]
 801c6f2:	1ad3      	subs	r3, r2, r3
 801c6f4:	b29a      	uxth	r2, r3
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	891a      	ldrh	r2, [r3, #8]
 801c6fe:	89fb      	ldrh	r3, [r7, #14]
 801c700:	1ad3      	subs	r3, r2, r3
 801c702:	b29a      	uxth	r2, r3
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801c708:	2300      	movs	r3, #0
}
 801c70a:	4618      	mov	r0, r3
 801c70c:	3710      	adds	r7, #16
 801c70e:	46bd      	mov	sp, r7
 801c710:	bd80      	pop	{r7, pc}
 801c712:	bf00      	nop
 801c714:	08025560 	.word	0x08025560
 801c718:	080256c4 	.word	0x080256c4
 801c71c:	080255c0 	.word	0x080255c0
 801c720:	080256d0 	.word	0x080256d0

0801c724 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b082      	sub	sp, #8
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
 801c72c:	460b      	mov	r3, r1
 801c72e:	807b      	strh	r3, [r7, #2]
 801c730:	4613      	mov	r3, r2
 801c732:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801c734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c738:	2b00      	cmp	r3, #0
 801c73a:	da08      	bge.n	801c74e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801c73c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c740:	425b      	negs	r3, r3
 801c742:	4619      	mov	r1, r3
 801c744:	6878      	ldr	r0, [r7, #4]
 801c746:	f7ff ff9b 	bl	801c680 <pbuf_remove_header>
 801c74a:	4603      	mov	r3, r0
 801c74c:	e007      	b.n	801c75e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801c74e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c752:	787a      	ldrb	r2, [r7, #1]
 801c754:	4619      	mov	r1, r3
 801c756:	6878      	ldr	r0, [r7, #4]
 801c758:	f7ff ff1a 	bl	801c590 <pbuf_add_header_impl>
 801c75c:	4603      	mov	r3, r0
  }
}
 801c75e:	4618      	mov	r0, r3
 801c760:	3708      	adds	r7, #8
 801c762:	46bd      	mov	sp, r7
 801c764:	bd80      	pop	{r7, pc}

0801c766 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801c766:	b580      	push	{r7, lr}
 801c768:	b082      	sub	sp, #8
 801c76a:	af00      	add	r7, sp, #0
 801c76c:	6078      	str	r0, [r7, #4]
 801c76e:	460b      	mov	r3, r1
 801c770:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801c772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c776:	2201      	movs	r2, #1
 801c778:	4619      	mov	r1, r3
 801c77a:	6878      	ldr	r0, [r7, #4]
 801c77c:	f7ff ffd2 	bl	801c724 <pbuf_header_impl>
 801c780:	4603      	mov	r3, r0
}
 801c782:	4618      	mov	r0, r3
 801c784:	3708      	adds	r7, #8
 801c786:	46bd      	mov	sp, r7
 801c788:	bd80      	pop	{r7, pc}
	...

0801c78c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b086      	sub	sp, #24
 801c790:	af00      	add	r7, sp, #0
 801c792:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d10b      	bne.n	801c7b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d106      	bne.n	801c7ae <pbuf_free+0x22>
 801c7a0:	4b38      	ldr	r3, [pc, #224]	; (801c884 <pbuf_free+0xf8>)
 801c7a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801c7a6:	4938      	ldr	r1, [pc, #224]	; (801c888 <pbuf_free+0xfc>)
 801c7a8:	4838      	ldr	r0, [pc, #224]	; (801c88c <pbuf_free+0x100>)
 801c7aa:	f003 fd27 	bl	80201fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	e063      	b.n	801c87a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801c7b6:	e05c      	b.n	801c872 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	7b9b      	ldrb	r3, [r3, #14]
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d106      	bne.n	801c7ce <pbuf_free+0x42>
 801c7c0:	4b30      	ldr	r3, [pc, #192]	; (801c884 <pbuf_free+0xf8>)
 801c7c2:	f240 22f1 	movw	r2, #753	; 0x2f1
 801c7c6:	4932      	ldr	r1, [pc, #200]	; (801c890 <pbuf_free+0x104>)
 801c7c8:	4830      	ldr	r0, [pc, #192]	; (801c88c <pbuf_free+0x100>)
 801c7ca:	f003 fd17 	bl	80201fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	7b9b      	ldrb	r3, [r3, #14]
 801c7d2:	3b01      	subs	r3, #1
 801c7d4:	b2da      	uxtb	r2, r3
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	739a      	strb	r2, [r3, #14]
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	7b9b      	ldrb	r3, [r3, #14]
 801c7de:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801c7e0:	7dbb      	ldrb	r3, [r7, #22]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d143      	bne.n	801c86e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	7b1b      	ldrb	r3, [r3, #12]
 801c7f0:	f003 030f 	and.w	r3, r3, #15
 801c7f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	7b5b      	ldrb	r3, [r3, #13]
 801c7fa:	f003 0302 	and.w	r3, r3, #2
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d011      	beq.n	801c826 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801c806:	68bb      	ldr	r3, [r7, #8]
 801c808:	691b      	ldr	r3, [r3, #16]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d106      	bne.n	801c81c <pbuf_free+0x90>
 801c80e:	4b1d      	ldr	r3, [pc, #116]	; (801c884 <pbuf_free+0xf8>)
 801c810:	f240 22ff 	movw	r2, #767	; 0x2ff
 801c814:	491f      	ldr	r1, [pc, #124]	; (801c894 <pbuf_free+0x108>)
 801c816:	481d      	ldr	r0, [pc, #116]	; (801c88c <pbuf_free+0x100>)
 801c818:	f003 fcf0 	bl	80201fc <iprintf>
        pc->custom_free_function(p);
 801c81c:	68bb      	ldr	r3, [r7, #8]
 801c81e:	691b      	ldr	r3, [r3, #16]
 801c820:	6878      	ldr	r0, [r7, #4]
 801c822:	4798      	blx	r3
 801c824:	e01d      	b.n	801c862 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801c826:	7bfb      	ldrb	r3, [r7, #15]
 801c828:	2b02      	cmp	r3, #2
 801c82a:	d104      	bne.n	801c836 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801c82c:	6879      	ldr	r1, [r7, #4]
 801c82e:	2005      	movs	r0, #5
 801c830:	f7ff f89c 	bl	801b96c <memp_free>
 801c834:	e015      	b.n	801c862 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801c836:	7bfb      	ldrb	r3, [r7, #15]
 801c838:	2b01      	cmp	r3, #1
 801c83a:	d104      	bne.n	801c846 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801c83c:	6879      	ldr	r1, [r7, #4]
 801c83e:	2004      	movs	r0, #4
 801c840:	f7ff f894 	bl	801b96c <memp_free>
 801c844:	e00d      	b.n	801c862 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801c846:	7bfb      	ldrb	r3, [r7, #15]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d103      	bne.n	801c854 <pbuf_free+0xc8>
          mem_free(p);
 801c84c:	6878      	ldr	r0, [r7, #4]
 801c84e:	f7fe fd27 	bl	801b2a0 <mem_free>
 801c852:	e006      	b.n	801c862 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801c854:	4b0b      	ldr	r3, [pc, #44]	; (801c884 <pbuf_free+0xf8>)
 801c856:	f240 320f 	movw	r2, #783	; 0x30f
 801c85a:	490f      	ldr	r1, [pc, #60]	; (801c898 <pbuf_free+0x10c>)
 801c85c:	480b      	ldr	r0, [pc, #44]	; (801c88c <pbuf_free+0x100>)
 801c85e:	f003 fccd 	bl	80201fc <iprintf>
        }
      }
      count++;
 801c862:	7dfb      	ldrb	r3, [r7, #23]
 801c864:	3301      	adds	r3, #1
 801c866:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801c868:	693b      	ldr	r3, [r7, #16]
 801c86a:	607b      	str	r3, [r7, #4]
 801c86c:	e001      	b.n	801c872 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801c86e:	2300      	movs	r3, #0
 801c870:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d19f      	bne.n	801c7b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801c878:	7dfb      	ldrb	r3, [r7, #23]
}
 801c87a:	4618      	mov	r0, r3
 801c87c:	3718      	adds	r7, #24
 801c87e:	46bd      	mov	sp, r7
 801c880:	bd80      	pop	{r7, pc}
 801c882:	bf00      	nop
 801c884:	08025560 	.word	0x08025560
 801c888:	080256c4 	.word	0x080256c4
 801c88c:	080255c0 	.word	0x080255c0
 801c890:	080256f0 	.word	0x080256f0
 801c894:	08025708 	.word	0x08025708
 801c898:	0802572c 	.word	0x0802572c

0801c89c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801c89c:	b480      	push	{r7}
 801c89e:	b085      	sub	sp, #20
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801c8a4:	2300      	movs	r3, #0
 801c8a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801c8a8:	e005      	b.n	801c8b6 <pbuf_clen+0x1a>
    ++len;
 801c8aa:	89fb      	ldrh	r3, [r7, #14]
 801c8ac:	3301      	adds	r3, #1
 801c8ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d1f6      	bne.n	801c8aa <pbuf_clen+0xe>
  }
  return len;
 801c8bc:	89fb      	ldrh	r3, [r7, #14]
}
 801c8be:	4618      	mov	r0, r3
 801c8c0:	3714      	adds	r7, #20
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8c8:	4770      	bx	lr
	...

0801c8cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b082      	sub	sp, #8
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d010      	beq.n	801c8fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	7b9b      	ldrb	r3, [r3, #14]
 801c8de:	3301      	adds	r3, #1
 801c8e0:	b2da      	uxtb	r2, r3
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	7b9b      	ldrb	r3, [r3, #14]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d106      	bne.n	801c8fc <pbuf_ref+0x30>
 801c8ee:	4b05      	ldr	r3, [pc, #20]	; (801c904 <pbuf_ref+0x38>)
 801c8f0:	f240 3242 	movw	r2, #834	; 0x342
 801c8f4:	4904      	ldr	r1, [pc, #16]	; (801c908 <pbuf_ref+0x3c>)
 801c8f6:	4805      	ldr	r0, [pc, #20]	; (801c90c <pbuf_ref+0x40>)
 801c8f8:	f003 fc80 	bl	80201fc <iprintf>
  }
}
 801c8fc:	bf00      	nop
 801c8fe:	3708      	adds	r7, #8
 801c900:	46bd      	mov	sp, r7
 801c902:	bd80      	pop	{r7, pc}
 801c904:	08025560 	.word	0x08025560
 801c908:	08025740 	.word	0x08025740
 801c90c:	080255c0 	.word	0x080255c0

0801c910 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801c910:	b580      	push	{r7, lr}
 801c912:	b084      	sub	sp, #16
 801c914:	af00      	add	r7, sp, #0
 801c916:	6078      	str	r0, [r7, #4]
 801c918:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d002      	beq.n	801c926 <pbuf_cat+0x16>
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	2b00      	cmp	r3, #0
 801c924:	d107      	bne.n	801c936 <pbuf_cat+0x26>
 801c926:	4b20      	ldr	r3, [pc, #128]	; (801c9a8 <pbuf_cat+0x98>)
 801c928:	f240 3259 	movw	r2, #857	; 0x359
 801c92c:	491f      	ldr	r1, [pc, #124]	; (801c9ac <pbuf_cat+0x9c>)
 801c92e:	4820      	ldr	r0, [pc, #128]	; (801c9b0 <pbuf_cat+0xa0>)
 801c930:	f003 fc64 	bl	80201fc <iprintf>
 801c934:	e034      	b.n	801c9a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	60fb      	str	r3, [r7, #12]
 801c93a:	e00a      	b.n	801c952 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	891a      	ldrh	r2, [r3, #8]
 801c940:	683b      	ldr	r3, [r7, #0]
 801c942:	891b      	ldrh	r3, [r3, #8]
 801c944:	4413      	add	r3, r2
 801c946:	b29a      	uxth	r2, r3
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	60fb      	str	r3, [r7, #12]
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	681b      	ldr	r3, [r3, #0]
 801c956:	2b00      	cmp	r3, #0
 801c958:	d1f0      	bne.n	801c93c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	891a      	ldrh	r2, [r3, #8]
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	895b      	ldrh	r3, [r3, #10]
 801c962:	429a      	cmp	r2, r3
 801c964:	d006      	beq.n	801c974 <pbuf_cat+0x64>
 801c966:	4b10      	ldr	r3, [pc, #64]	; (801c9a8 <pbuf_cat+0x98>)
 801c968:	f240 3262 	movw	r2, #866	; 0x362
 801c96c:	4911      	ldr	r1, [pc, #68]	; (801c9b4 <pbuf_cat+0xa4>)
 801c96e:	4810      	ldr	r0, [pc, #64]	; (801c9b0 <pbuf_cat+0xa0>)
 801c970:	f003 fc44 	bl	80201fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d006      	beq.n	801c98a <pbuf_cat+0x7a>
 801c97c:	4b0a      	ldr	r3, [pc, #40]	; (801c9a8 <pbuf_cat+0x98>)
 801c97e:	f240 3263 	movw	r2, #867	; 0x363
 801c982:	490d      	ldr	r1, [pc, #52]	; (801c9b8 <pbuf_cat+0xa8>)
 801c984:	480a      	ldr	r0, [pc, #40]	; (801c9b0 <pbuf_cat+0xa0>)
 801c986:	f003 fc39 	bl	80201fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	891a      	ldrh	r2, [r3, #8]
 801c98e:	683b      	ldr	r3, [r7, #0]
 801c990:	891b      	ldrh	r3, [r3, #8]
 801c992:	4413      	add	r3, r2
 801c994:	b29a      	uxth	r2, r3
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	683a      	ldr	r2, [r7, #0]
 801c99e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801c9a0:	3710      	adds	r7, #16
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	bd80      	pop	{r7, pc}
 801c9a6:	bf00      	nop
 801c9a8:	08025560 	.word	0x08025560
 801c9ac:	08025754 	.word	0x08025754
 801c9b0:	080255c0 	.word	0x080255c0
 801c9b4:	0802578c 	.word	0x0802578c
 801c9b8:	080257bc 	.word	0x080257bc

0801c9bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801c9bc:	b580      	push	{r7, lr}
 801c9be:	b082      	sub	sp, #8
 801c9c0:	af00      	add	r7, sp, #0
 801c9c2:	6078      	str	r0, [r7, #4]
 801c9c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801c9c6:	6839      	ldr	r1, [r7, #0]
 801c9c8:	6878      	ldr	r0, [r7, #4]
 801c9ca:	f7ff ffa1 	bl	801c910 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801c9ce:	6838      	ldr	r0, [r7, #0]
 801c9d0:	f7ff ff7c 	bl	801c8cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801c9d4:	bf00      	nop
 801c9d6:	3708      	adds	r7, #8
 801c9d8:	46bd      	mov	sp, r7
 801c9da:	bd80      	pop	{r7, pc}

0801c9dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801c9dc:	b580      	push	{r7, lr}
 801c9de:	b086      	sub	sp, #24
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
 801c9e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	617b      	str	r3, [r7, #20]
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d008      	beq.n	801ca06 <pbuf_copy+0x2a>
 801c9f4:	683b      	ldr	r3, [r7, #0]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d005      	beq.n	801ca06 <pbuf_copy+0x2a>
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	891a      	ldrh	r2, [r3, #8]
 801c9fe:	683b      	ldr	r3, [r7, #0]
 801ca00:	891b      	ldrh	r3, [r3, #8]
 801ca02:	429a      	cmp	r2, r3
 801ca04:	d209      	bcs.n	801ca1a <pbuf_copy+0x3e>
 801ca06:	4b57      	ldr	r3, [pc, #348]	; (801cb64 <pbuf_copy+0x188>)
 801ca08:	f240 32c9 	movw	r2, #969	; 0x3c9
 801ca0c:	4956      	ldr	r1, [pc, #344]	; (801cb68 <pbuf_copy+0x18c>)
 801ca0e:	4857      	ldr	r0, [pc, #348]	; (801cb6c <pbuf_copy+0x190>)
 801ca10:	f003 fbf4 	bl	80201fc <iprintf>
 801ca14:	f06f 030f 	mvn.w	r3, #15
 801ca18:	e09f      	b.n	801cb5a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	895b      	ldrh	r3, [r3, #10]
 801ca1e:	461a      	mov	r2, r3
 801ca20:	697b      	ldr	r3, [r7, #20]
 801ca22:	1ad2      	subs	r2, r2, r3
 801ca24:	683b      	ldr	r3, [r7, #0]
 801ca26:	895b      	ldrh	r3, [r3, #10]
 801ca28:	4619      	mov	r1, r3
 801ca2a:	693b      	ldr	r3, [r7, #16]
 801ca2c:	1acb      	subs	r3, r1, r3
 801ca2e:	429a      	cmp	r2, r3
 801ca30:	d306      	bcc.n	801ca40 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801ca32:	683b      	ldr	r3, [r7, #0]
 801ca34:	895b      	ldrh	r3, [r3, #10]
 801ca36:	461a      	mov	r2, r3
 801ca38:	693b      	ldr	r3, [r7, #16]
 801ca3a:	1ad3      	subs	r3, r2, r3
 801ca3c:	60fb      	str	r3, [r7, #12]
 801ca3e:	e005      	b.n	801ca4c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	895b      	ldrh	r3, [r3, #10]
 801ca44:	461a      	mov	r2, r3
 801ca46:	697b      	ldr	r3, [r7, #20]
 801ca48:	1ad3      	subs	r3, r2, r3
 801ca4a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	685a      	ldr	r2, [r3, #4]
 801ca50:	697b      	ldr	r3, [r7, #20]
 801ca52:	18d0      	adds	r0, r2, r3
 801ca54:	683b      	ldr	r3, [r7, #0]
 801ca56:	685a      	ldr	r2, [r3, #4]
 801ca58:	693b      	ldr	r3, [r7, #16]
 801ca5a:	4413      	add	r3, r2
 801ca5c:	68fa      	ldr	r2, [r7, #12]
 801ca5e:	4619      	mov	r1, r3
 801ca60:	f003 fabc 	bl	801ffdc <memcpy>
    offset_to += len;
 801ca64:	697a      	ldr	r2, [r7, #20]
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	4413      	add	r3, r2
 801ca6a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801ca6c:	693a      	ldr	r2, [r7, #16]
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	4413      	add	r3, r2
 801ca72:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	895b      	ldrh	r3, [r3, #10]
 801ca78:	461a      	mov	r2, r3
 801ca7a:	697b      	ldr	r3, [r7, #20]
 801ca7c:	4293      	cmp	r3, r2
 801ca7e:	d906      	bls.n	801ca8e <pbuf_copy+0xb2>
 801ca80:	4b38      	ldr	r3, [pc, #224]	; (801cb64 <pbuf_copy+0x188>)
 801ca82:	f240 32d9 	movw	r2, #985	; 0x3d9
 801ca86:	493a      	ldr	r1, [pc, #232]	; (801cb70 <pbuf_copy+0x194>)
 801ca88:	4838      	ldr	r0, [pc, #224]	; (801cb6c <pbuf_copy+0x190>)
 801ca8a:	f003 fbb7 	bl	80201fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ca8e:	683b      	ldr	r3, [r7, #0]
 801ca90:	895b      	ldrh	r3, [r3, #10]
 801ca92:	461a      	mov	r2, r3
 801ca94:	693b      	ldr	r3, [r7, #16]
 801ca96:	4293      	cmp	r3, r2
 801ca98:	d906      	bls.n	801caa8 <pbuf_copy+0xcc>
 801ca9a:	4b32      	ldr	r3, [pc, #200]	; (801cb64 <pbuf_copy+0x188>)
 801ca9c:	f240 32da 	movw	r2, #986	; 0x3da
 801caa0:	4934      	ldr	r1, [pc, #208]	; (801cb74 <pbuf_copy+0x198>)
 801caa2:	4832      	ldr	r0, [pc, #200]	; (801cb6c <pbuf_copy+0x190>)
 801caa4:	f003 fbaa 	bl	80201fc <iprintf>
    if (offset_from >= p_from->len) {
 801caa8:	683b      	ldr	r3, [r7, #0]
 801caaa:	895b      	ldrh	r3, [r3, #10]
 801caac:	461a      	mov	r2, r3
 801caae:	693b      	ldr	r3, [r7, #16]
 801cab0:	4293      	cmp	r3, r2
 801cab2:	d304      	bcc.n	801cabe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801cab4:	2300      	movs	r3, #0
 801cab6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801cab8:	683b      	ldr	r3, [r7, #0]
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	895b      	ldrh	r3, [r3, #10]
 801cac2:	461a      	mov	r2, r3
 801cac4:	697b      	ldr	r3, [r7, #20]
 801cac6:	4293      	cmp	r3, r2
 801cac8:	d114      	bne.n	801caf4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801caca:	2300      	movs	r3, #0
 801cacc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d10c      	bne.n	801caf4 <pbuf_copy+0x118>
 801cada:	683b      	ldr	r3, [r7, #0]
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d009      	beq.n	801caf4 <pbuf_copy+0x118>
 801cae0:	4b20      	ldr	r3, [pc, #128]	; (801cb64 <pbuf_copy+0x188>)
 801cae2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801cae6:	4924      	ldr	r1, [pc, #144]	; (801cb78 <pbuf_copy+0x19c>)
 801cae8:	4820      	ldr	r0, [pc, #128]	; (801cb6c <pbuf_copy+0x190>)
 801caea:	f003 fb87 	bl	80201fc <iprintf>
 801caee:	f06f 030f 	mvn.w	r3, #15
 801caf2:	e032      	b.n	801cb5a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801caf4:	683b      	ldr	r3, [r7, #0]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d013      	beq.n	801cb22 <pbuf_copy+0x146>
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	895a      	ldrh	r2, [r3, #10]
 801cafe:	683b      	ldr	r3, [r7, #0]
 801cb00:	891b      	ldrh	r3, [r3, #8]
 801cb02:	429a      	cmp	r2, r3
 801cb04:	d10d      	bne.n	801cb22 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801cb06:	683b      	ldr	r3, [r7, #0]
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d009      	beq.n	801cb22 <pbuf_copy+0x146>
 801cb0e:	4b15      	ldr	r3, [pc, #84]	; (801cb64 <pbuf_copy+0x188>)
 801cb10:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801cb14:	4919      	ldr	r1, [pc, #100]	; (801cb7c <pbuf_copy+0x1a0>)
 801cb16:	4815      	ldr	r0, [pc, #84]	; (801cb6c <pbuf_copy+0x190>)
 801cb18:	f003 fb70 	bl	80201fc <iprintf>
 801cb1c:	f06f 0305 	mvn.w	r3, #5
 801cb20:	e01b      	b.n	801cb5a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d013      	beq.n	801cb50 <pbuf_copy+0x174>
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	895a      	ldrh	r2, [r3, #10]
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	891b      	ldrh	r3, [r3, #8]
 801cb30:	429a      	cmp	r2, r3
 801cb32:	d10d      	bne.n	801cb50 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d009      	beq.n	801cb50 <pbuf_copy+0x174>
 801cb3c:	4b09      	ldr	r3, [pc, #36]	; (801cb64 <pbuf_copy+0x188>)
 801cb3e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801cb42:	490e      	ldr	r1, [pc, #56]	; (801cb7c <pbuf_copy+0x1a0>)
 801cb44:	4809      	ldr	r0, [pc, #36]	; (801cb6c <pbuf_copy+0x190>)
 801cb46:	f003 fb59 	bl	80201fc <iprintf>
 801cb4a:	f06f 0305 	mvn.w	r3, #5
 801cb4e:	e004      	b.n	801cb5a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801cb50:	683b      	ldr	r3, [r7, #0]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	f47f af61 	bne.w	801ca1a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801cb58:	2300      	movs	r3, #0
}
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	3718      	adds	r7, #24
 801cb5e:	46bd      	mov	sp, r7
 801cb60:	bd80      	pop	{r7, pc}
 801cb62:	bf00      	nop
 801cb64:	08025560 	.word	0x08025560
 801cb68:	08025808 	.word	0x08025808
 801cb6c:	080255c0 	.word	0x080255c0
 801cb70:	08025838 	.word	0x08025838
 801cb74:	08025850 	.word	0x08025850
 801cb78:	0802586c 	.word	0x0802586c
 801cb7c:	0802587c 	.word	0x0802587c

0801cb80 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801cb80:	b580      	push	{r7, lr}
 801cb82:	b088      	sub	sp, #32
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	60f8      	str	r0, [r7, #12]
 801cb88:	60b9      	str	r1, [r7, #8]
 801cb8a:	4613      	mov	r3, r2
 801cb8c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801cb8e:	88fb      	ldrh	r3, [r7, #6]
 801cb90:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801cb92:	2300      	movs	r3, #0
 801cb94:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	2b00      	cmp	r3, #0
 801cb9a:	d109      	bne.n	801cbb0 <pbuf_take+0x30>
 801cb9c:	4b3a      	ldr	r3, [pc, #232]	; (801cc88 <pbuf_take+0x108>)
 801cb9e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801cba2:	493a      	ldr	r1, [pc, #232]	; (801cc8c <pbuf_take+0x10c>)
 801cba4:	483a      	ldr	r0, [pc, #232]	; (801cc90 <pbuf_take+0x110>)
 801cba6:	f003 fb29 	bl	80201fc <iprintf>
 801cbaa:	f06f 030f 	mvn.w	r3, #15
 801cbae:	e067      	b.n	801cc80 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801cbb0:	68bb      	ldr	r3, [r7, #8]
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d109      	bne.n	801cbca <pbuf_take+0x4a>
 801cbb6:	4b34      	ldr	r3, [pc, #208]	; (801cc88 <pbuf_take+0x108>)
 801cbb8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801cbbc:	4935      	ldr	r1, [pc, #212]	; (801cc94 <pbuf_take+0x114>)
 801cbbe:	4834      	ldr	r0, [pc, #208]	; (801cc90 <pbuf_take+0x110>)
 801cbc0:	f003 fb1c 	bl	80201fc <iprintf>
 801cbc4:	f06f 030f 	mvn.w	r3, #15
 801cbc8:	e05a      	b.n	801cc80 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	891b      	ldrh	r3, [r3, #8]
 801cbce:	88fa      	ldrh	r2, [r7, #6]
 801cbd0:	429a      	cmp	r2, r3
 801cbd2:	d909      	bls.n	801cbe8 <pbuf_take+0x68>
 801cbd4:	4b2c      	ldr	r3, [pc, #176]	; (801cc88 <pbuf_take+0x108>)
 801cbd6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801cbda:	492f      	ldr	r1, [pc, #188]	; (801cc98 <pbuf_take+0x118>)
 801cbdc:	482c      	ldr	r0, [pc, #176]	; (801cc90 <pbuf_take+0x110>)
 801cbde:	f003 fb0d 	bl	80201fc <iprintf>
 801cbe2:	f04f 33ff 	mov.w	r3, #4294967295
 801cbe6:	e04b      	b.n	801cc80 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d007      	beq.n	801cbfe <pbuf_take+0x7e>
 801cbee:	68bb      	ldr	r3, [r7, #8]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d004      	beq.n	801cbfe <pbuf_take+0x7e>
 801cbf4:	68fb      	ldr	r3, [r7, #12]
 801cbf6:	891b      	ldrh	r3, [r3, #8]
 801cbf8:	88fa      	ldrh	r2, [r7, #6]
 801cbfa:	429a      	cmp	r2, r3
 801cbfc:	d902      	bls.n	801cc04 <pbuf_take+0x84>
    return ERR_ARG;
 801cbfe:	f06f 030f 	mvn.w	r3, #15
 801cc02:	e03d      	b.n	801cc80 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801cc04:	68fb      	ldr	r3, [r7, #12]
 801cc06:	61fb      	str	r3, [r7, #28]
 801cc08:	e028      	b.n	801cc5c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801cc0a:	69fb      	ldr	r3, [r7, #28]
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d106      	bne.n	801cc1e <pbuf_take+0x9e>
 801cc10:	4b1d      	ldr	r3, [pc, #116]	; (801cc88 <pbuf_take+0x108>)
 801cc12:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801cc16:	4921      	ldr	r1, [pc, #132]	; (801cc9c <pbuf_take+0x11c>)
 801cc18:	481d      	ldr	r0, [pc, #116]	; (801cc90 <pbuf_take+0x110>)
 801cc1a:	f003 faef 	bl	80201fc <iprintf>
    buf_copy_len = total_copy_len;
 801cc1e:	697b      	ldr	r3, [r7, #20]
 801cc20:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801cc22:	69fb      	ldr	r3, [r7, #28]
 801cc24:	895b      	ldrh	r3, [r3, #10]
 801cc26:	461a      	mov	r2, r3
 801cc28:	69bb      	ldr	r3, [r7, #24]
 801cc2a:	4293      	cmp	r3, r2
 801cc2c:	d902      	bls.n	801cc34 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801cc2e:	69fb      	ldr	r3, [r7, #28]
 801cc30:	895b      	ldrh	r3, [r3, #10]
 801cc32:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801cc34:	69fb      	ldr	r3, [r7, #28]
 801cc36:	6858      	ldr	r0, [r3, #4]
 801cc38:	68ba      	ldr	r2, [r7, #8]
 801cc3a:	693b      	ldr	r3, [r7, #16]
 801cc3c:	4413      	add	r3, r2
 801cc3e:	69ba      	ldr	r2, [r7, #24]
 801cc40:	4619      	mov	r1, r3
 801cc42:	f003 f9cb 	bl	801ffdc <memcpy>
    total_copy_len -= buf_copy_len;
 801cc46:	697a      	ldr	r2, [r7, #20]
 801cc48:	69bb      	ldr	r3, [r7, #24]
 801cc4a:	1ad3      	subs	r3, r2, r3
 801cc4c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801cc4e:	693a      	ldr	r2, [r7, #16]
 801cc50:	69bb      	ldr	r3, [r7, #24]
 801cc52:	4413      	add	r3, r2
 801cc54:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801cc56:	69fb      	ldr	r3, [r7, #28]
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	61fb      	str	r3, [r7, #28]
 801cc5c:	697b      	ldr	r3, [r7, #20]
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d1d3      	bne.n	801cc0a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801cc62:	697b      	ldr	r3, [r7, #20]
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d103      	bne.n	801cc70 <pbuf_take+0xf0>
 801cc68:	88fb      	ldrh	r3, [r7, #6]
 801cc6a:	693a      	ldr	r2, [r7, #16]
 801cc6c:	429a      	cmp	r2, r3
 801cc6e:	d006      	beq.n	801cc7e <pbuf_take+0xfe>
 801cc70:	4b05      	ldr	r3, [pc, #20]	; (801cc88 <pbuf_take+0x108>)
 801cc72:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801cc76:	490a      	ldr	r1, [pc, #40]	; (801cca0 <pbuf_take+0x120>)
 801cc78:	4805      	ldr	r0, [pc, #20]	; (801cc90 <pbuf_take+0x110>)
 801cc7a:	f003 fabf 	bl	80201fc <iprintf>
  return ERR_OK;
 801cc7e:	2300      	movs	r3, #0
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	3720      	adds	r7, #32
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}
 801cc88:	08025560 	.word	0x08025560
 801cc8c:	08025938 	.word	0x08025938
 801cc90:	080255c0 	.word	0x080255c0
 801cc94:	08025950 	.word	0x08025950
 801cc98:	0802596c 	.word	0x0802596c
 801cc9c:	0802598c 	.word	0x0802598c
 801cca0:	080259a4 	.word	0x080259a4

0801cca4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801cca4:	b580      	push	{r7, lr}
 801cca6:	b084      	sub	sp, #16
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	4603      	mov	r3, r0
 801ccac:	603a      	str	r2, [r7, #0]
 801ccae:	71fb      	strb	r3, [r7, #7]
 801ccb0:	460b      	mov	r3, r1
 801ccb2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801ccb4:	683b      	ldr	r3, [r7, #0]
 801ccb6:	8919      	ldrh	r1, [r3, #8]
 801ccb8:	88ba      	ldrh	r2, [r7, #4]
 801ccba:	79fb      	ldrb	r3, [r7, #7]
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	f7ff fa83 	bl	801c1c8 <pbuf_alloc>
 801ccc2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d101      	bne.n	801ccce <pbuf_clone+0x2a>
    return NULL;
 801ccca:	2300      	movs	r3, #0
 801cccc:	e011      	b.n	801ccf2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801ccce:	6839      	ldr	r1, [r7, #0]
 801ccd0:	68f8      	ldr	r0, [r7, #12]
 801ccd2:	f7ff fe83 	bl	801c9dc <pbuf_copy>
 801ccd6:	4603      	mov	r3, r0
 801ccd8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801ccda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d006      	beq.n	801ccf0 <pbuf_clone+0x4c>
 801cce2:	4b06      	ldr	r3, [pc, #24]	; (801ccfc <pbuf_clone+0x58>)
 801cce4:	f240 5224 	movw	r2, #1316	; 0x524
 801cce8:	4905      	ldr	r1, [pc, #20]	; (801cd00 <pbuf_clone+0x5c>)
 801ccea:	4806      	ldr	r0, [pc, #24]	; (801cd04 <pbuf_clone+0x60>)
 801ccec:	f003 fa86 	bl	80201fc <iprintf>
  return q;
 801ccf0:	68fb      	ldr	r3, [r7, #12]
}
 801ccf2:	4618      	mov	r0, r3
 801ccf4:	3710      	adds	r7, #16
 801ccf6:	46bd      	mov	sp, r7
 801ccf8:	bd80      	pop	{r7, pc}
 801ccfa:	bf00      	nop
 801ccfc:	08025560 	.word	0x08025560
 801cd00:	080259d4 	.word	0x080259d4
 801cd04:	080255c0 	.word	0x080255c0

0801cd08 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	b086      	sub	sp, #24
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	60f8      	str	r0, [r7, #12]
 801cd10:	60b9      	str	r1, [r7, #8]
 801cd12:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801cd14:	2003      	movs	r0, #3
 801cd16:	f7fe fdb9 	bl	801b88c <memp_malloc>
 801cd1a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801cd1c:	693b      	ldr	r3, [r7, #16]
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d109      	bne.n	801cd36 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801cd22:	693b      	ldr	r3, [r7, #16]
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d151      	bne.n	801cdcc <sys_timeout_abs+0xc4>
 801cd28:	4b2a      	ldr	r3, [pc, #168]	; (801cdd4 <sys_timeout_abs+0xcc>)
 801cd2a:	22be      	movs	r2, #190	; 0xbe
 801cd2c:	492a      	ldr	r1, [pc, #168]	; (801cdd8 <sys_timeout_abs+0xd0>)
 801cd2e:	482b      	ldr	r0, [pc, #172]	; (801cddc <sys_timeout_abs+0xd4>)
 801cd30:	f003 fa64 	bl	80201fc <iprintf>
    return;
 801cd34:	e04a      	b.n	801cdcc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801cd36:	693b      	ldr	r3, [r7, #16]
 801cd38:	2200      	movs	r2, #0
 801cd3a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801cd3c:	693b      	ldr	r3, [r7, #16]
 801cd3e:	68ba      	ldr	r2, [r7, #8]
 801cd40:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801cd42:	693b      	ldr	r3, [r7, #16]
 801cd44:	687a      	ldr	r2, [r7, #4]
 801cd46:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801cd48:	693b      	ldr	r3, [r7, #16]
 801cd4a:	68fa      	ldr	r2, [r7, #12]
 801cd4c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801cd4e:	4b24      	ldr	r3, [pc, #144]	; (801cde0 <sys_timeout_abs+0xd8>)
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d103      	bne.n	801cd5e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801cd56:	4a22      	ldr	r2, [pc, #136]	; (801cde0 <sys_timeout_abs+0xd8>)
 801cd58:	693b      	ldr	r3, [r7, #16]
 801cd5a:	6013      	str	r3, [r2, #0]
    return;
 801cd5c:	e037      	b.n	801cdce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801cd5e:	693b      	ldr	r3, [r7, #16]
 801cd60:	685a      	ldr	r2, [r3, #4]
 801cd62:	4b1f      	ldr	r3, [pc, #124]	; (801cde0 <sys_timeout_abs+0xd8>)
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	685b      	ldr	r3, [r3, #4]
 801cd68:	1ad3      	subs	r3, r2, r3
 801cd6a:	0fdb      	lsrs	r3, r3, #31
 801cd6c:	f003 0301 	and.w	r3, r3, #1
 801cd70:	b2db      	uxtb	r3, r3
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d007      	beq.n	801cd86 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801cd76:	4b1a      	ldr	r3, [pc, #104]	; (801cde0 <sys_timeout_abs+0xd8>)
 801cd78:	681a      	ldr	r2, [r3, #0]
 801cd7a:	693b      	ldr	r3, [r7, #16]
 801cd7c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801cd7e:	4a18      	ldr	r2, [pc, #96]	; (801cde0 <sys_timeout_abs+0xd8>)
 801cd80:	693b      	ldr	r3, [r7, #16]
 801cd82:	6013      	str	r3, [r2, #0]
 801cd84:	e023      	b.n	801cdce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801cd86:	4b16      	ldr	r3, [pc, #88]	; (801cde0 <sys_timeout_abs+0xd8>)
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	617b      	str	r3, [r7, #20]
 801cd8c:	e01a      	b.n	801cdc4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801cd8e:	697b      	ldr	r3, [r7, #20]
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d00b      	beq.n	801cdae <sys_timeout_abs+0xa6>
 801cd96:	693b      	ldr	r3, [r7, #16]
 801cd98:	685a      	ldr	r2, [r3, #4]
 801cd9a:	697b      	ldr	r3, [r7, #20]
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	685b      	ldr	r3, [r3, #4]
 801cda0:	1ad3      	subs	r3, r2, r3
 801cda2:	0fdb      	lsrs	r3, r3, #31
 801cda4:	f003 0301 	and.w	r3, r3, #1
 801cda8:	b2db      	uxtb	r3, r3
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d007      	beq.n	801cdbe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801cdae:	697b      	ldr	r3, [r7, #20]
 801cdb0:	681a      	ldr	r2, [r3, #0]
 801cdb2:	693b      	ldr	r3, [r7, #16]
 801cdb4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801cdb6:	697b      	ldr	r3, [r7, #20]
 801cdb8:	693a      	ldr	r2, [r7, #16]
 801cdba:	601a      	str	r2, [r3, #0]
        break;
 801cdbc:	e007      	b.n	801cdce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801cdbe:	697b      	ldr	r3, [r7, #20]
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	617b      	str	r3, [r7, #20]
 801cdc4:	697b      	ldr	r3, [r7, #20]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d1e1      	bne.n	801cd8e <sys_timeout_abs+0x86>
 801cdca:	e000      	b.n	801cdce <sys_timeout_abs+0xc6>
    return;
 801cdcc:	bf00      	nop
      }
    }
  }
}
 801cdce:	3718      	adds	r7, #24
 801cdd0:	46bd      	mov	sp, r7
 801cdd2:	bd80      	pop	{r7, pc}
 801cdd4:	080259e8 	.word	0x080259e8
 801cdd8:	08025a1c 	.word	0x08025a1c
 801cddc:	08025a5c 	.word	0x08025a5c
 801cde0:	200131c8 	.word	0x200131c8

0801cde4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	b086      	sub	sp, #24
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801cdf0:	697b      	ldr	r3, [r7, #20]
 801cdf2:	685b      	ldr	r3, [r3, #4]
 801cdf4:	4798      	blx	r3

  now = sys_now();
 801cdf6:	f7fd fed9 	bl	801abac <sys_now>
 801cdfa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801cdfc:	697b      	ldr	r3, [r7, #20]
 801cdfe:	681a      	ldr	r2, [r3, #0]
 801ce00:	4b0f      	ldr	r3, [pc, #60]	; (801ce40 <lwip_cyclic_timer+0x5c>)
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	4413      	add	r3, r2
 801ce06:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ce08:	68fa      	ldr	r2, [r7, #12]
 801ce0a:	693b      	ldr	r3, [r7, #16]
 801ce0c:	1ad3      	subs	r3, r2, r3
 801ce0e:	0fdb      	lsrs	r3, r3, #31
 801ce10:	f003 0301 	and.w	r3, r3, #1
 801ce14:	b2db      	uxtb	r3, r3
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d009      	beq.n	801ce2e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ce1a:	697b      	ldr	r3, [r7, #20]
 801ce1c:	681a      	ldr	r2, [r3, #0]
 801ce1e:	693b      	ldr	r3, [r7, #16]
 801ce20:	4413      	add	r3, r2
 801ce22:	687a      	ldr	r2, [r7, #4]
 801ce24:	4907      	ldr	r1, [pc, #28]	; (801ce44 <lwip_cyclic_timer+0x60>)
 801ce26:	4618      	mov	r0, r3
 801ce28:	f7ff ff6e 	bl	801cd08 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ce2c:	e004      	b.n	801ce38 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ce2e:	687a      	ldr	r2, [r7, #4]
 801ce30:	4904      	ldr	r1, [pc, #16]	; (801ce44 <lwip_cyclic_timer+0x60>)
 801ce32:	68f8      	ldr	r0, [r7, #12]
 801ce34:	f7ff ff68 	bl	801cd08 <sys_timeout_abs>
}
 801ce38:	bf00      	nop
 801ce3a:	3718      	adds	r7, #24
 801ce3c:	46bd      	mov	sp, r7
 801ce3e:	bd80      	pop	{r7, pc}
 801ce40:	200131cc 	.word	0x200131cc
 801ce44:	0801cde5 	.word	0x0801cde5

0801ce48 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ce48:	b580      	push	{r7, lr}
 801ce4a:	b082      	sub	sp, #8
 801ce4c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ce4e:	2300      	movs	r3, #0
 801ce50:	607b      	str	r3, [r7, #4]
 801ce52:	e00e      	b.n	801ce72 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ce54:	4a0b      	ldr	r2, [pc, #44]	; (801ce84 <sys_timeouts_init+0x3c>)
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	00db      	lsls	r3, r3, #3
 801ce60:	4a08      	ldr	r2, [pc, #32]	; (801ce84 <sys_timeouts_init+0x3c>)
 801ce62:	4413      	add	r3, r2
 801ce64:	461a      	mov	r2, r3
 801ce66:	4908      	ldr	r1, [pc, #32]	; (801ce88 <sys_timeouts_init+0x40>)
 801ce68:	f000 f810 	bl	801ce8c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	3301      	adds	r3, #1
 801ce70:	607b      	str	r3, [r7, #4]
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	2b01      	cmp	r3, #1
 801ce76:	d9ed      	bls.n	801ce54 <sys_timeouts_init+0xc>
  }
}
 801ce78:	bf00      	nop
 801ce7a:	bf00      	nop
 801ce7c:	3708      	adds	r7, #8
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	bd80      	pop	{r7, pc}
 801ce82:	bf00      	nop
 801ce84:	080269a0 	.word	0x080269a0
 801ce88:	0801cde5 	.word	0x0801cde5

0801ce8c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ce8c:	b580      	push	{r7, lr}
 801ce8e:	b086      	sub	sp, #24
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	60f8      	str	r0, [r7, #12]
 801ce94:	60b9      	str	r1, [r7, #8]
 801ce96:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ce9e:	d306      	bcc.n	801ceae <sys_timeout+0x22>
 801cea0:	4b0a      	ldr	r3, [pc, #40]	; (801cecc <sys_timeout+0x40>)
 801cea2:	f240 1229 	movw	r2, #297	; 0x129
 801cea6:	490a      	ldr	r1, [pc, #40]	; (801ced0 <sys_timeout+0x44>)
 801cea8:	480a      	ldr	r0, [pc, #40]	; (801ced4 <sys_timeout+0x48>)
 801ceaa:	f003 f9a7 	bl	80201fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ceae:	f7fd fe7d 	bl	801abac <sys_now>
 801ceb2:	4602      	mov	r2, r0
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	4413      	add	r3, r2
 801ceb8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ceba:	687a      	ldr	r2, [r7, #4]
 801cebc:	68b9      	ldr	r1, [r7, #8]
 801cebe:	6978      	ldr	r0, [r7, #20]
 801cec0:	f7ff ff22 	bl	801cd08 <sys_timeout_abs>
#endif
}
 801cec4:	bf00      	nop
 801cec6:	3718      	adds	r7, #24
 801cec8:	46bd      	mov	sp, r7
 801ceca:	bd80      	pop	{r7, pc}
 801cecc:	080259e8 	.word	0x080259e8
 801ced0:	08025a84 	.word	0x08025a84
 801ced4:	08025a5c 	.word	0x08025a5c

0801ced8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ced8:	b580      	push	{r7, lr}
 801ceda:	b084      	sub	sp, #16
 801cedc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801cede:	f7fd fe65 	bl	801abac <sys_now>
 801cee2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801cee4:	4b17      	ldr	r3, [pc, #92]	; (801cf44 <sys_check_timeouts+0x6c>)
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ceea:	68bb      	ldr	r3, [r7, #8]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d022      	beq.n	801cf36 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801cef0:	68bb      	ldr	r3, [r7, #8]
 801cef2:	685b      	ldr	r3, [r3, #4]
 801cef4:	68fa      	ldr	r2, [r7, #12]
 801cef6:	1ad3      	subs	r3, r2, r3
 801cef8:	0fdb      	lsrs	r3, r3, #31
 801cefa:	f003 0301 	and.w	r3, r3, #1
 801cefe:	b2db      	uxtb	r3, r3
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d11a      	bne.n	801cf3a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801cf04:	68bb      	ldr	r3, [r7, #8]
 801cf06:	681b      	ldr	r3, [r3, #0]
 801cf08:	4a0e      	ldr	r2, [pc, #56]	; (801cf44 <sys_check_timeouts+0x6c>)
 801cf0a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801cf0c:	68bb      	ldr	r3, [r7, #8]
 801cf0e:	689b      	ldr	r3, [r3, #8]
 801cf10:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801cf12:	68bb      	ldr	r3, [r7, #8]
 801cf14:	68db      	ldr	r3, [r3, #12]
 801cf16:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801cf18:	68bb      	ldr	r3, [r7, #8]
 801cf1a:	685b      	ldr	r3, [r3, #4]
 801cf1c:	4a0a      	ldr	r2, [pc, #40]	; (801cf48 <sys_check_timeouts+0x70>)
 801cf1e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801cf20:	68b9      	ldr	r1, [r7, #8]
 801cf22:	2003      	movs	r0, #3
 801cf24:	f7fe fd22 	bl	801b96c <memp_free>
    if (handler != NULL) {
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d0da      	beq.n	801cee4 <sys_check_timeouts+0xc>
      handler(arg);
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	6838      	ldr	r0, [r7, #0]
 801cf32:	4798      	blx	r3
  do {
 801cf34:	e7d6      	b.n	801cee4 <sys_check_timeouts+0xc>
      return;
 801cf36:	bf00      	nop
 801cf38:	e000      	b.n	801cf3c <sys_check_timeouts+0x64>
      return;
 801cf3a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801cf3c:	3710      	adds	r7, #16
 801cf3e:	46bd      	mov	sp, r7
 801cf40:	bd80      	pop	{r7, pc}
 801cf42:	bf00      	nop
 801cf44:	200131c8 	.word	0x200131c8
 801cf48:	200131cc 	.word	0x200131cc

0801cf4c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801cf50:	f003 f9f8 	bl	8020344 <rand>
 801cf54:	4603      	mov	r3, r0
 801cf56:	b29b      	uxth	r3, r3
 801cf58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801cf5c:	b29b      	uxth	r3, r3
 801cf5e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801cf62:	b29a      	uxth	r2, r3
 801cf64:	4b01      	ldr	r3, [pc, #4]	; (801cf6c <udp_init+0x20>)
 801cf66:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801cf68:	bf00      	nop
 801cf6a:	bd80      	pop	{r7, pc}
 801cf6c:	2000013c 	.word	0x2000013c

0801cf70 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801cf70:	b480      	push	{r7}
 801cf72:	b083      	sub	sp, #12
 801cf74:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801cf76:	2300      	movs	r3, #0
 801cf78:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801cf7a:	4b17      	ldr	r3, [pc, #92]	; (801cfd8 <udp_new_port+0x68>)
 801cf7c:	881b      	ldrh	r3, [r3, #0]
 801cf7e:	1c5a      	adds	r2, r3, #1
 801cf80:	b291      	uxth	r1, r2
 801cf82:	4a15      	ldr	r2, [pc, #84]	; (801cfd8 <udp_new_port+0x68>)
 801cf84:	8011      	strh	r1, [r2, #0]
 801cf86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cf8a:	4293      	cmp	r3, r2
 801cf8c:	d103      	bne.n	801cf96 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801cf8e:	4b12      	ldr	r3, [pc, #72]	; (801cfd8 <udp_new_port+0x68>)
 801cf90:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801cf94:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cf96:	4b11      	ldr	r3, [pc, #68]	; (801cfdc <udp_new_port+0x6c>)
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	603b      	str	r3, [r7, #0]
 801cf9c:	e011      	b.n	801cfc2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801cf9e:	683b      	ldr	r3, [r7, #0]
 801cfa0:	8a5a      	ldrh	r2, [r3, #18]
 801cfa2:	4b0d      	ldr	r3, [pc, #52]	; (801cfd8 <udp_new_port+0x68>)
 801cfa4:	881b      	ldrh	r3, [r3, #0]
 801cfa6:	429a      	cmp	r2, r3
 801cfa8:	d108      	bne.n	801cfbc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801cfaa:	88fb      	ldrh	r3, [r7, #6]
 801cfac:	3301      	adds	r3, #1
 801cfae:	80fb      	strh	r3, [r7, #6]
 801cfb0:	88fb      	ldrh	r3, [r7, #6]
 801cfb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cfb6:	d3e0      	bcc.n	801cf7a <udp_new_port+0xa>
        return 0;
 801cfb8:	2300      	movs	r3, #0
 801cfba:	e007      	b.n	801cfcc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cfbc:	683b      	ldr	r3, [r7, #0]
 801cfbe:	68db      	ldr	r3, [r3, #12]
 801cfc0:	603b      	str	r3, [r7, #0]
 801cfc2:	683b      	ldr	r3, [r7, #0]
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d1ea      	bne.n	801cf9e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801cfc8:	4b03      	ldr	r3, [pc, #12]	; (801cfd8 <udp_new_port+0x68>)
 801cfca:	881b      	ldrh	r3, [r3, #0]
}
 801cfcc:	4618      	mov	r0, r3
 801cfce:	370c      	adds	r7, #12
 801cfd0:	46bd      	mov	sp, r7
 801cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfd6:	4770      	bx	lr
 801cfd8:	2000013c 	.word	0x2000013c
 801cfdc:	200131d0 	.word	0x200131d0

0801cfe0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b084      	sub	sp, #16
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	60f8      	str	r0, [r7, #12]
 801cfe8:	60b9      	str	r1, [r7, #8]
 801cfea:	4613      	mov	r3, r2
 801cfec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d105      	bne.n	801d000 <udp_input_local_match+0x20>
 801cff4:	4b27      	ldr	r3, [pc, #156]	; (801d094 <udp_input_local_match+0xb4>)
 801cff6:	2287      	movs	r2, #135	; 0x87
 801cff8:	4927      	ldr	r1, [pc, #156]	; (801d098 <udp_input_local_match+0xb8>)
 801cffa:	4828      	ldr	r0, [pc, #160]	; (801d09c <udp_input_local_match+0xbc>)
 801cffc:	f003 f8fe 	bl	80201fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d000:	68bb      	ldr	r3, [r7, #8]
 801d002:	2b00      	cmp	r3, #0
 801d004:	d105      	bne.n	801d012 <udp_input_local_match+0x32>
 801d006:	4b23      	ldr	r3, [pc, #140]	; (801d094 <udp_input_local_match+0xb4>)
 801d008:	2288      	movs	r2, #136	; 0x88
 801d00a:	4925      	ldr	r1, [pc, #148]	; (801d0a0 <udp_input_local_match+0xc0>)
 801d00c:	4823      	ldr	r0, [pc, #140]	; (801d09c <udp_input_local_match+0xbc>)
 801d00e:	f003 f8f5 	bl	80201fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	7a1b      	ldrb	r3, [r3, #8]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d00b      	beq.n	801d032 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	7a1a      	ldrb	r2, [r3, #8]
 801d01e:	4b21      	ldr	r3, [pc, #132]	; (801d0a4 <udp_input_local_match+0xc4>)
 801d020:	685b      	ldr	r3, [r3, #4]
 801d022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801d026:	3301      	adds	r3, #1
 801d028:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d02a:	429a      	cmp	r2, r3
 801d02c:	d001      	beq.n	801d032 <udp_input_local_match+0x52>
    return 0;
 801d02e:	2300      	movs	r3, #0
 801d030:	e02b      	b.n	801d08a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801d032:	79fb      	ldrb	r3, [r7, #7]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d018      	beq.n	801d06a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d038:	68fb      	ldr	r3, [r7, #12]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d013      	beq.n	801d066 <udp_input_local_match+0x86>
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	681b      	ldr	r3, [r3, #0]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d00f      	beq.n	801d066 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d046:	4b17      	ldr	r3, [pc, #92]	; (801d0a4 <udp_input_local_match+0xc4>)
 801d048:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d04e:	d00a      	beq.n	801d066 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801d050:	68fb      	ldr	r3, [r7, #12]
 801d052:	681a      	ldr	r2, [r3, #0]
 801d054:	4b13      	ldr	r3, [pc, #76]	; (801d0a4 <udp_input_local_match+0xc4>)
 801d056:	695b      	ldr	r3, [r3, #20]
 801d058:	405a      	eors	r2, r3
 801d05a:	68bb      	ldr	r3, [r7, #8]
 801d05c:	3308      	adds	r3, #8
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d062:	2b00      	cmp	r3, #0
 801d064:	d110      	bne.n	801d088 <udp_input_local_match+0xa8>
          return 1;
 801d066:	2301      	movs	r3, #1
 801d068:	e00f      	b.n	801d08a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d009      	beq.n	801d084 <udp_input_local_match+0xa4>
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	2b00      	cmp	r3, #0
 801d076:	d005      	beq.n	801d084 <udp_input_local_match+0xa4>
 801d078:	68fb      	ldr	r3, [r7, #12]
 801d07a:	681a      	ldr	r2, [r3, #0]
 801d07c:	4b09      	ldr	r3, [pc, #36]	; (801d0a4 <udp_input_local_match+0xc4>)
 801d07e:	695b      	ldr	r3, [r3, #20]
 801d080:	429a      	cmp	r2, r3
 801d082:	d101      	bne.n	801d088 <udp_input_local_match+0xa8>
        return 1;
 801d084:	2301      	movs	r3, #1
 801d086:	e000      	b.n	801d08a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801d088:	2300      	movs	r3, #0
}
 801d08a:	4618      	mov	r0, r3
 801d08c:	3710      	adds	r7, #16
 801d08e:	46bd      	mov	sp, r7
 801d090:	bd80      	pop	{r7, pc}
 801d092:	bf00      	nop
 801d094:	08025ad0 	.word	0x08025ad0
 801d098:	08025b00 	.word	0x08025b00
 801d09c:	08025b24 	.word	0x08025b24
 801d0a0:	08025b4c 	.word	0x08025b4c
 801d0a4:	2000fb6c 	.word	0x2000fb6c

0801d0a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801d0a8:	b590      	push	{r4, r7, lr}
 801d0aa:	b08d      	sub	sp, #52	; 0x34
 801d0ac:	af02      	add	r7, sp, #8
 801d0ae:	6078      	str	r0, [r7, #4]
 801d0b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d105      	bne.n	801d0c8 <udp_input+0x20>
 801d0bc:	4b7c      	ldr	r3, [pc, #496]	; (801d2b0 <udp_input+0x208>)
 801d0be:	22cf      	movs	r2, #207	; 0xcf
 801d0c0:	497c      	ldr	r1, [pc, #496]	; (801d2b4 <udp_input+0x20c>)
 801d0c2:	487d      	ldr	r0, [pc, #500]	; (801d2b8 <udp_input+0x210>)
 801d0c4:	f003 f89a 	bl	80201fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801d0c8:	683b      	ldr	r3, [r7, #0]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d105      	bne.n	801d0da <udp_input+0x32>
 801d0ce:	4b78      	ldr	r3, [pc, #480]	; (801d2b0 <udp_input+0x208>)
 801d0d0:	22d0      	movs	r2, #208	; 0xd0
 801d0d2:	497a      	ldr	r1, [pc, #488]	; (801d2bc <udp_input+0x214>)
 801d0d4:	4878      	ldr	r0, [pc, #480]	; (801d2b8 <udp_input+0x210>)
 801d0d6:	f003 f891 	bl	80201fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	895b      	ldrh	r3, [r3, #10]
 801d0de:	2b07      	cmp	r3, #7
 801d0e0:	d803      	bhi.n	801d0ea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801d0e2:	6878      	ldr	r0, [r7, #4]
 801d0e4:	f7ff fb52 	bl	801c78c <pbuf_free>
    goto end;
 801d0e8:	e0de      	b.n	801d2a8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	685b      	ldr	r3, [r3, #4]
 801d0ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801d0f0:	4b73      	ldr	r3, [pc, #460]	; (801d2c0 <udp_input+0x218>)
 801d0f2:	695b      	ldr	r3, [r3, #20]
 801d0f4:	4a72      	ldr	r2, [pc, #456]	; (801d2c0 <udp_input+0x218>)
 801d0f6:	6812      	ldr	r2, [r2, #0]
 801d0f8:	4611      	mov	r1, r2
 801d0fa:	4618      	mov	r0, r3
 801d0fc:	f001 ff44 	bl	801ef88 <ip4_addr_isbroadcast_u32>
 801d100:	4603      	mov	r3, r0
 801d102:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801d104:	697b      	ldr	r3, [r7, #20]
 801d106:	881b      	ldrh	r3, [r3, #0]
 801d108:	b29b      	uxth	r3, r3
 801d10a:	4618      	mov	r0, r3
 801d10c:	f7fd ff62 	bl	801afd4 <lwip_htons>
 801d110:	4603      	mov	r3, r0
 801d112:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801d114:	697b      	ldr	r3, [r7, #20]
 801d116:	885b      	ldrh	r3, [r3, #2]
 801d118:	b29b      	uxth	r3, r3
 801d11a:	4618      	mov	r0, r3
 801d11c:	f7fd ff5a 	bl	801afd4 <lwip_htons>
 801d120:	4603      	mov	r3, r0
 801d122:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801d124:	2300      	movs	r3, #0
 801d126:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801d128:	2300      	movs	r3, #0
 801d12a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801d12c:	2300      	movs	r3, #0
 801d12e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d130:	4b64      	ldr	r3, [pc, #400]	; (801d2c4 <udp_input+0x21c>)
 801d132:	681b      	ldr	r3, [r3, #0]
 801d134:	627b      	str	r3, [r7, #36]	; 0x24
 801d136:	e054      	b.n	801d1e2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d13a:	8a5b      	ldrh	r3, [r3, #18]
 801d13c:	89fa      	ldrh	r2, [r7, #14]
 801d13e:	429a      	cmp	r2, r3
 801d140:	d14a      	bne.n	801d1d8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801d142:	7cfb      	ldrb	r3, [r7, #19]
 801d144:	461a      	mov	r2, r3
 801d146:	6839      	ldr	r1, [r7, #0]
 801d148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d14a:	f7ff ff49 	bl	801cfe0 <udp_input_local_match>
 801d14e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801d150:	2b00      	cmp	r3, #0
 801d152:	d041      	beq.n	801d1d8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d156:	7c1b      	ldrb	r3, [r3, #16]
 801d158:	f003 0304 	and.w	r3, r3, #4
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d11d      	bne.n	801d19c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801d160:	69fb      	ldr	r3, [r7, #28]
 801d162:	2b00      	cmp	r3, #0
 801d164:	d102      	bne.n	801d16c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d168:	61fb      	str	r3, [r7, #28]
 801d16a:	e017      	b.n	801d19c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801d16c:	7cfb      	ldrb	r3, [r7, #19]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d014      	beq.n	801d19c <udp_input+0xf4>
 801d172:	4b53      	ldr	r3, [pc, #332]	; (801d2c0 <udp_input+0x218>)
 801d174:	695b      	ldr	r3, [r3, #20]
 801d176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d17a:	d10f      	bne.n	801d19c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d17c:	69fb      	ldr	r3, [r7, #28]
 801d17e:	681a      	ldr	r2, [r3, #0]
 801d180:	683b      	ldr	r3, [r7, #0]
 801d182:	3304      	adds	r3, #4
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	429a      	cmp	r2, r3
 801d188:	d008      	beq.n	801d19c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d18c:	681a      	ldr	r2, [r3, #0]
 801d18e:	683b      	ldr	r3, [r7, #0]
 801d190:	3304      	adds	r3, #4
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	429a      	cmp	r2, r3
 801d196:	d101      	bne.n	801d19c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d19a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d19e:	8a9b      	ldrh	r3, [r3, #20]
 801d1a0:	8a3a      	ldrh	r2, [r7, #16]
 801d1a2:	429a      	cmp	r2, r3
 801d1a4:	d118      	bne.n	801d1d8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1a8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d005      	beq.n	801d1ba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1b0:	685a      	ldr	r2, [r3, #4]
 801d1b2:	4b43      	ldr	r3, [pc, #268]	; (801d2c0 <udp_input+0x218>)
 801d1b4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d1b6:	429a      	cmp	r2, r3
 801d1b8:	d10e      	bne.n	801d1d8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801d1ba:	6a3b      	ldr	r3, [r7, #32]
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d014      	beq.n	801d1ea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801d1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1c2:	68da      	ldr	r2, [r3, #12]
 801d1c4:	6a3b      	ldr	r3, [r7, #32]
 801d1c6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801d1c8:	4b3e      	ldr	r3, [pc, #248]	; (801d2c4 <udp_input+0x21c>)
 801d1ca:	681a      	ldr	r2, [r3, #0]
 801d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1ce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801d1d0:	4a3c      	ldr	r2, [pc, #240]	; (801d2c4 <udp_input+0x21c>)
 801d1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1d4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801d1d6:	e008      	b.n	801d1ea <udp_input+0x142>
      }
    }

    prev = pcb;
 801d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1da:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1de:	68db      	ldr	r3, [r3, #12]
 801d1e0:	627b      	str	r3, [r7, #36]	; 0x24
 801d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d1a7      	bne.n	801d138 <udp_input+0x90>
 801d1e8:	e000      	b.n	801d1ec <udp_input+0x144>
        break;
 801d1ea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d101      	bne.n	801d1f6 <udp_input+0x14e>
    pcb = uncon_pcb;
 801d1f2:	69fb      	ldr	r3, [r7, #28]
 801d1f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801d1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d002      	beq.n	801d202 <udp_input+0x15a>
    for_us = 1;
 801d1fc:	2301      	movs	r3, #1
 801d1fe:	76fb      	strb	r3, [r7, #27]
 801d200:	e00a      	b.n	801d218 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801d202:	683b      	ldr	r3, [r7, #0]
 801d204:	3304      	adds	r3, #4
 801d206:	681a      	ldr	r2, [r3, #0]
 801d208:	4b2d      	ldr	r3, [pc, #180]	; (801d2c0 <udp_input+0x218>)
 801d20a:	695b      	ldr	r3, [r3, #20]
 801d20c:	429a      	cmp	r2, r3
 801d20e:	bf0c      	ite	eq
 801d210:	2301      	moveq	r3, #1
 801d212:	2300      	movne	r3, #0
 801d214:	b2db      	uxtb	r3, r3
 801d216:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801d218:	7efb      	ldrb	r3, [r7, #27]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d041      	beq.n	801d2a2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801d21e:	2108      	movs	r1, #8
 801d220:	6878      	ldr	r0, [r7, #4]
 801d222:	f7ff fa2d 	bl	801c680 <pbuf_remove_header>
 801d226:	4603      	mov	r3, r0
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d00a      	beq.n	801d242 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801d22c:	4b20      	ldr	r3, [pc, #128]	; (801d2b0 <udp_input+0x208>)
 801d22e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801d232:	4925      	ldr	r1, [pc, #148]	; (801d2c8 <udp_input+0x220>)
 801d234:	4820      	ldr	r0, [pc, #128]	; (801d2b8 <udp_input+0x210>)
 801d236:	f002 ffe1 	bl	80201fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801d23a:	6878      	ldr	r0, [r7, #4]
 801d23c:	f7ff faa6 	bl	801c78c <pbuf_free>
      goto end;
 801d240:	e032      	b.n	801d2a8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801d242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d244:	2b00      	cmp	r3, #0
 801d246:	d012      	beq.n	801d26e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d24a:	699b      	ldr	r3, [r3, #24]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d00a      	beq.n	801d266 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d252:	699c      	ldr	r4, [r3, #24]
 801d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d256:	69d8      	ldr	r0, [r3, #28]
 801d258:	8a3b      	ldrh	r3, [r7, #16]
 801d25a:	9300      	str	r3, [sp, #0]
 801d25c:	4b1b      	ldr	r3, [pc, #108]	; (801d2cc <udp_input+0x224>)
 801d25e:	687a      	ldr	r2, [r7, #4]
 801d260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d262:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801d264:	e021      	b.n	801d2aa <udp_input+0x202>
        pbuf_free(p);
 801d266:	6878      	ldr	r0, [r7, #4]
 801d268:	f7ff fa90 	bl	801c78c <pbuf_free>
        goto end;
 801d26c:	e01c      	b.n	801d2a8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801d26e:	7cfb      	ldrb	r3, [r7, #19]
 801d270:	2b00      	cmp	r3, #0
 801d272:	d112      	bne.n	801d29a <udp_input+0x1f2>
 801d274:	4b12      	ldr	r3, [pc, #72]	; (801d2c0 <udp_input+0x218>)
 801d276:	695b      	ldr	r3, [r3, #20]
 801d278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d27c:	2be0      	cmp	r3, #224	; 0xe0
 801d27e:	d00c      	beq.n	801d29a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801d280:	4b0f      	ldr	r3, [pc, #60]	; (801d2c0 <udp_input+0x218>)
 801d282:	899b      	ldrh	r3, [r3, #12]
 801d284:	3308      	adds	r3, #8
 801d286:	b29b      	uxth	r3, r3
 801d288:	b21b      	sxth	r3, r3
 801d28a:	4619      	mov	r1, r3
 801d28c:	6878      	ldr	r0, [r7, #4]
 801d28e:	f7ff fa6a 	bl	801c766 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801d292:	2103      	movs	r1, #3
 801d294:	6878      	ldr	r0, [r7, #4]
 801d296:	f001 fb53 	bl	801e940 <icmp_dest_unreach>
      pbuf_free(p);
 801d29a:	6878      	ldr	r0, [r7, #4]
 801d29c:	f7ff fa76 	bl	801c78c <pbuf_free>
  return;
 801d2a0:	e003      	b.n	801d2aa <udp_input+0x202>
    pbuf_free(p);
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f7ff fa72 	bl	801c78c <pbuf_free>
  return;
 801d2a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801d2aa:	372c      	adds	r7, #44	; 0x2c
 801d2ac:	46bd      	mov	sp, r7
 801d2ae:	bd90      	pop	{r4, r7, pc}
 801d2b0:	08025ad0 	.word	0x08025ad0
 801d2b4:	08025b74 	.word	0x08025b74
 801d2b8:	08025b24 	.word	0x08025b24
 801d2bc:	08025b8c 	.word	0x08025b8c
 801d2c0:	2000fb6c 	.word	0x2000fb6c
 801d2c4:	200131d0 	.word	0x200131d0
 801d2c8:	08025ba8 	.word	0x08025ba8
 801d2cc:	2000fb7c 	.word	0x2000fb7c

0801d2d0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b088      	sub	sp, #32
 801d2d4:	af02      	add	r7, sp, #8
 801d2d6:	60f8      	str	r0, [r7, #12]
 801d2d8:	60b9      	str	r1, [r7, #8]
 801d2da:	607a      	str	r2, [r7, #4]
 801d2dc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d109      	bne.n	801d2f8 <udp_sendto+0x28>
 801d2e4:	4b23      	ldr	r3, [pc, #140]	; (801d374 <udp_sendto+0xa4>)
 801d2e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d2ea:	4923      	ldr	r1, [pc, #140]	; (801d378 <udp_sendto+0xa8>)
 801d2ec:	4823      	ldr	r0, [pc, #140]	; (801d37c <udp_sendto+0xac>)
 801d2ee:	f002 ff85 	bl	80201fc <iprintf>
 801d2f2:	f06f 030f 	mvn.w	r3, #15
 801d2f6:	e038      	b.n	801d36a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801d2f8:	68bb      	ldr	r3, [r7, #8]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d109      	bne.n	801d312 <udp_sendto+0x42>
 801d2fe:	4b1d      	ldr	r3, [pc, #116]	; (801d374 <udp_sendto+0xa4>)
 801d300:	f240 2219 	movw	r2, #537	; 0x219
 801d304:	491e      	ldr	r1, [pc, #120]	; (801d380 <udp_sendto+0xb0>)
 801d306:	481d      	ldr	r0, [pc, #116]	; (801d37c <udp_sendto+0xac>)
 801d308:	f002 ff78 	bl	80201fc <iprintf>
 801d30c:	f06f 030f 	mvn.w	r3, #15
 801d310:	e02b      	b.n	801d36a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	2b00      	cmp	r3, #0
 801d316:	d109      	bne.n	801d32c <udp_sendto+0x5c>
 801d318:	4b16      	ldr	r3, [pc, #88]	; (801d374 <udp_sendto+0xa4>)
 801d31a:	f240 221a 	movw	r2, #538	; 0x21a
 801d31e:	4919      	ldr	r1, [pc, #100]	; (801d384 <udp_sendto+0xb4>)
 801d320:	4816      	ldr	r0, [pc, #88]	; (801d37c <udp_sendto+0xac>)
 801d322:	f002 ff6b 	bl	80201fc <iprintf>
 801d326:	f06f 030f 	mvn.w	r3, #15
 801d32a:	e01e      	b.n	801d36a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	7a1b      	ldrb	r3, [r3, #8]
 801d330:	2b00      	cmp	r3, #0
 801d332:	d006      	beq.n	801d342 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	7a1b      	ldrb	r3, [r3, #8]
 801d338:	4618      	mov	r0, r3
 801d33a:	f7fe fef5 	bl	801c128 <netif_get_by_index>
 801d33e:	6178      	str	r0, [r7, #20]
 801d340:	e003      	b.n	801d34a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801d342:	6878      	ldr	r0, [r7, #4]
 801d344:	f001 fb86 	bl	801ea54 <ip4_route>
 801d348:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801d34a:	697b      	ldr	r3, [r7, #20]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d102      	bne.n	801d356 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801d350:	f06f 0303 	mvn.w	r3, #3
 801d354:	e009      	b.n	801d36a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801d356:	887a      	ldrh	r2, [r7, #2]
 801d358:	697b      	ldr	r3, [r7, #20]
 801d35a:	9300      	str	r3, [sp, #0]
 801d35c:	4613      	mov	r3, r2
 801d35e:	687a      	ldr	r2, [r7, #4]
 801d360:	68b9      	ldr	r1, [r7, #8]
 801d362:	68f8      	ldr	r0, [r7, #12]
 801d364:	f000 f810 	bl	801d388 <udp_sendto_if>
 801d368:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801d36a:	4618      	mov	r0, r3
 801d36c:	3718      	adds	r7, #24
 801d36e:	46bd      	mov	sp, r7
 801d370:	bd80      	pop	{r7, pc}
 801d372:	bf00      	nop
 801d374:	08025ad0 	.word	0x08025ad0
 801d378:	08025bf4 	.word	0x08025bf4
 801d37c:	08025b24 	.word	0x08025b24
 801d380:	08025c0c 	.word	0x08025c0c
 801d384:	08025c28 	.word	0x08025c28

0801d388 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b088      	sub	sp, #32
 801d38c:	af02      	add	r7, sp, #8
 801d38e:	60f8      	str	r0, [r7, #12]
 801d390:	60b9      	str	r1, [r7, #8]
 801d392:	607a      	str	r2, [r7, #4]
 801d394:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d109      	bne.n	801d3b0 <udp_sendto_if+0x28>
 801d39c:	4b2e      	ldr	r3, [pc, #184]	; (801d458 <udp_sendto_if+0xd0>)
 801d39e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d3a2:	492e      	ldr	r1, [pc, #184]	; (801d45c <udp_sendto_if+0xd4>)
 801d3a4:	482e      	ldr	r0, [pc, #184]	; (801d460 <udp_sendto_if+0xd8>)
 801d3a6:	f002 ff29 	bl	80201fc <iprintf>
 801d3aa:	f06f 030f 	mvn.w	r3, #15
 801d3ae:	e04f      	b.n	801d450 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d109      	bne.n	801d3ca <udp_sendto_if+0x42>
 801d3b6:	4b28      	ldr	r3, [pc, #160]	; (801d458 <udp_sendto_if+0xd0>)
 801d3b8:	f240 2281 	movw	r2, #641	; 0x281
 801d3bc:	4929      	ldr	r1, [pc, #164]	; (801d464 <udp_sendto_if+0xdc>)
 801d3be:	4828      	ldr	r0, [pc, #160]	; (801d460 <udp_sendto_if+0xd8>)
 801d3c0:	f002 ff1c 	bl	80201fc <iprintf>
 801d3c4:	f06f 030f 	mvn.w	r3, #15
 801d3c8:	e042      	b.n	801d450 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d109      	bne.n	801d3e4 <udp_sendto_if+0x5c>
 801d3d0:	4b21      	ldr	r3, [pc, #132]	; (801d458 <udp_sendto_if+0xd0>)
 801d3d2:	f240 2282 	movw	r2, #642	; 0x282
 801d3d6:	4924      	ldr	r1, [pc, #144]	; (801d468 <udp_sendto_if+0xe0>)
 801d3d8:	4821      	ldr	r0, [pc, #132]	; (801d460 <udp_sendto_if+0xd8>)
 801d3da:	f002 ff0f 	bl	80201fc <iprintf>
 801d3de:	f06f 030f 	mvn.w	r3, #15
 801d3e2:	e035      	b.n	801d450 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801d3e4:	6a3b      	ldr	r3, [r7, #32]
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d109      	bne.n	801d3fe <udp_sendto_if+0x76>
 801d3ea:	4b1b      	ldr	r3, [pc, #108]	; (801d458 <udp_sendto_if+0xd0>)
 801d3ec:	f240 2283 	movw	r2, #643	; 0x283
 801d3f0:	491e      	ldr	r1, [pc, #120]	; (801d46c <udp_sendto_if+0xe4>)
 801d3f2:	481b      	ldr	r0, [pc, #108]	; (801d460 <udp_sendto_if+0xd8>)
 801d3f4:	f002 ff02 	bl	80201fc <iprintf>
 801d3f8:	f06f 030f 	mvn.w	r3, #15
 801d3fc:	e028      	b.n	801d450 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d009      	beq.n	801d418 <udp_sendto_if+0x90>
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d005      	beq.n	801d418 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d414:	2be0      	cmp	r3, #224	; 0xe0
 801d416:	d103      	bne.n	801d420 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801d418:	6a3b      	ldr	r3, [r7, #32]
 801d41a:	3304      	adds	r3, #4
 801d41c:	617b      	str	r3, [r7, #20]
 801d41e:	e00b      	b.n	801d438 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	681a      	ldr	r2, [r3, #0]
 801d424:	6a3b      	ldr	r3, [r7, #32]
 801d426:	3304      	adds	r3, #4
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	429a      	cmp	r2, r3
 801d42c:	d002      	beq.n	801d434 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801d42e:	f06f 0303 	mvn.w	r3, #3
 801d432:	e00d      	b.n	801d450 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801d438:	887a      	ldrh	r2, [r7, #2]
 801d43a:	697b      	ldr	r3, [r7, #20]
 801d43c:	9301      	str	r3, [sp, #4]
 801d43e:	6a3b      	ldr	r3, [r7, #32]
 801d440:	9300      	str	r3, [sp, #0]
 801d442:	4613      	mov	r3, r2
 801d444:	687a      	ldr	r2, [r7, #4]
 801d446:	68b9      	ldr	r1, [r7, #8]
 801d448:	68f8      	ldr	r0, [r7, #12]
 801d44a:	f000 f811 	bl	801d470 <udp_sendto_if_src>
 801d44e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801d450:	4618      	mov	r0, r3
 801d452:	3718      	adds	r7, #24
 801d454:	46bd      	mov	sp, r7
 801d456:	bd80      	pop	{r7, pc}
 801d458:	08025ad0 	.word	0x08025ad0
 801d45c:	08025c44 	.word	0x08025c44
 801d460:	08025b24 	.word	0x08025b24
 801d464:	08025c60 	.word	0x08025c60
 801d468:	08025c7c 	.word	0x08025c7c
 801d46c:	08025c9c 	.word	0x08025c9c

0801d470 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801d470:	b580      	push	{r7, lr}
 801d472:	b08c      	sub	sp, #48	; 0x30
 801d474:	af04      	add	r7, sp, #16
 801d476:	60f8      	str	r0, [r7, #12]
 801d478:	60b9      	str	r1, [r7, #8]
 801d47a:	607a      	str	r2, [r7, #4]
 801d47c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d109      	bne.n	801d498 <udp_sendto_if_src+0x28>
 801d484:	4b65      	ldr	r3, [pc, #404]	; (801d61c <udp_sendto_if_src+0x1ac>)
 801d486:	f240 22d1 	movw	r2, #721	; 0x2d1
 801d48a:	4965      	ldr	r1, [pc, #404]	; (801d620 <udp_sendto_if_src+0x1b0>)
 801d48c:	4865      	ldr	r0, [pc, #404]	; (801d624 <udp_sendto_if_src+0x1b4>)
 801d48e:	f002 feb5 	bl	80201fc <iprintf>
 801d492:	f06f 030f 	mvn.w	r3, #15
 801d496:	e0bc      	b.n	801d612 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801d498:	68bb      	ldr	r3, [r7, #8]
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d109      	bne.n	801d4b2 <udp_sendto_if_src+0x42>
 801d49e:	4b5f      	ldr	r3, [pc, #380]	; (801d61c <udp_sendto_if_src+0x1ac>)
 801d4a0:	f240 22d2 	movw	r2, #722	; 0x2d2
 801d4a4:	4960      	ldr	r1, [pc, #384]	; (801d628 <udp_sendto_if_src+0x1b8>)
 801d4a6:	485f      	ldr	r0, [pc, #380]	; (801d624 <udp_sendto_if_src+0x1b4>)
 801d4a8:	f002 fea8 	bl	80201fc <iprintf>
 801d4ac:	f06f 030f 	mvn.w	r3, #15
 801d4b0:	e0af      	b.n	801d612 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d109      	bne.n	801d4cc <udp_sendto_if_src+0x5c>
 801d4b8:	4b58      	ldr	r3, [pc, #352]	; (801d61c <udp_sendto_if_src+0x1ac>)
 801d4ba:	f240 22d3 	movw	r2, #723	; 0x2d3
 801d4be:	495b      	ldr	r1, [pc, #364]	; (801d62c <udp_sendto_if_src+0x1bc>)
 801d4c0:	4858      	ldr	r0, [pc, #352]	; (801d624 <udp_sendto_if_src+0x1b4>)
 801d4c2:	f002 fe9b 	bl	80201fc <iprintf>
 801d4c6:	f06f 030f 	mvn.w	r3, #15
 801d4ca:	e0a2      	b.n	801d612 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d109      	bne.n	801d4e6 <udp_sendto_if_src+0x76>
 801d4d2:	4b52      	ldr	r3, [pc, #328]	; (801d61c <udp_sendto_if_src+0x1ac>)
 801d4d4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801d4d8:	4955      	ldr	r1, [pc, #340]	; (801d630 <udp_sendto_if_src+0x1c0>)
 801d4da:	4852      	ldr	r0, [pc, #328]	; (801d624 <udp_sendto_if_src+0x1b4>)
 801d4dc:	f002 fe8e 	bl	80201fc <iprintf>
 801d4e0:	f06f 030f 	mvn.w	r3, #15
 801d4e4:	e095      	b.n	801d612 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801d4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	d109      	bne.n	801d500 <udp_sendto_if_src+0x90>
 801d4ec:	4b4b      	ldr	r3, [pc, #300]	; (801d61c <udp_sendto_if_src+0x1ac>)
 801d4ee:	f240 22d5 	movw	r2, #725	; 0x2d5
 801d4f2:	4950      	ldr	r1, [pc, #320]	; (801d634 <udp_sendto_if_src+0x1c4>)
 801d4f4:	484b      	ldr	r0, [pc, #300]	; (801d624 <udp_sendto_if_src+0x1b4>)
 801d4f6:	f002 fe81 	bl	80201fc <iprintf>
 801d4fa:	f06f 030f 	mvn.w	r3, #15
 801d4fe:	e088      	b.n	801d612 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	8a5b      	ldrh	r3, [r3, #18]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d10f      	bne.n	801d528 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d508:	68f9      	ldr	r1, [r7, #12]
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	8a5b      	ldrh	r3, [r3, #18]
 801d50e:	461a      	mov	r2, r3
 801d510:	68f8      	ldr	r0, [r7, #12]
 801d512:	f000 f893 	bl	801d63c <udp_bind>
 801d516:	4603      	mov	r3, r0
 801d518:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801d51a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d002      	beq.n	801d528 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801d522:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d526:	e074      	b.n	801d612 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801d528:	68bb      	ldr	r3, [r7, #8]
 801d52a:	891b      	ldrh	r3, [r3, #8]
 801d52c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801d530:	4293      	cmp	r3, r2
 801d532:	d902      	bls.n	801d53a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801d534:	f04f 33ff 	mov.w	r3, #4294967295
 801d538:	e06b      	b.n	801d612 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801d53a:	2108      	movs	r1, #8
 801d53c:	68b8      	ldr	r0, [r7, #8]
 801d53e:	f7ff f88f 	bl	801c660 <pbuf_add_header>
 801d542:	4603      	mov	r3, r0
 801d544:	2b00      	cmp	r3, #0
 801d546:	d015      	beq.n	801d574 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801d548:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d54c:	2108      	movs	r1, #8
 801d54e:	2022      	movs	r0, #34	; 0x22
 801d550:	f7fe fe3a 	bl	801c1c8 <pbuf_alloc>
 801d554:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801d556:	69fb      	ldr	r3, [r7, #28]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d102      	bne.n	801d562 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801d55c:	f04f 33ff 	mov.w	r3, #4294967295
 801d560:	e057      	b.n	801d612 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801d562:	68bb      	ldr	r3, [r7, #8]
 801d564:	891b      	ldrh	r3, [r3, #8]
 801d566:	2b00      	cmp	r3, #0
 801d568:	d006      	beq.n	801d578 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801d56a:	68b9      	ldr	r1, [r7, #8]
 801d56c:	69f8      	ldr	r0, [r7, #28]
 801d56e:	f7ff fa25 	bl	801c9bc <pbuf_chain>
 801d572:	e001      	b.n	801d578 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801d574:	68bb      	ldr	r3, [r7, #8]
 801d576:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801d578:	69fb      	ldr	r3, [r7, #28]
 801d57a:	895b      	ldrh	r3, [r3, #10]
 801d57c:	2b07      	cmp	r3, #7
 801d57e:	d806      	bhi.n	801d58e <udp_sendto_if_src+0x11e>
 801d580:	4b26      	ldr	r3, [pc, #152]	; (801d61c <udp_sendto_if_src+0x1ac>)
 801d582:	f240 320d 	movw	r2, #781	; 0x30d
 801d586:	492c      	ldr	r1, [pc, #176]	; (801d638 <udp_sendto_if_src+0x1c8>)
 801d588:	4826      	ldr	r0, [pc, #152]	; (801d624 <udp_sendto_if_src+0x1b4>)
 801d58a:	f002 fe37 	bl	80201fc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801d58e:	69fb      	ldr	r3, [r7, #28]
 801d590:	685b      	ldr	r3, [r3, #4]
 801d592:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	8a5b      	ldrh	r3, [r3, #18]
 801d598:	4618      	mov	r0, r3
 801d59a:	f7fd fd1b 	bl	801afd4 <lwip_htons>
 801d59e:	4603      	mov	r3, r0
 801d5a0:	461a      	mov	r2, r3
 801d5a2:	697b      	ldr	r3, [r7, #20]
 801d5a4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801d5a6:	887b      	ldrh	r3, [r7, #2]
 801d5a8:	4618      	mov	r0, r3
 801d5aa:	f7fd fd13 	bl	801afd4 <lwip_htons>
 801d5ae:	4603      	mov	r3, r0
 801d5b0:	461a      	mov	r2, r3
 801d5b2:	697b      	ldr	r3, [r7, #20]
 801d5b4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801d5b6:	697b      	ldr	r3, [r7, #20]
 801d5b8:	2200      	movs	r2, #0
 801d5ba:	719a      	strb	r2, [r3, #6]
 801d5bc:	2200      	movs	r2, #0
 801d5be:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801d5c0:	69fb      	ldr	r3, [r7, #28]
 801d5c2:	891b      	ldrh	r3, [r3, #8]
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	f7fd fd05 	bl	801afd4 <lwip_htons>
 801d5ca:	4603      	mov	r3, r0
 801d5cc:	461a      	mov	r2, r3
 801d5ce:	697b      	ldr	r3, [r7, #20]
 801d5d0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801d5d2:	2311      	movs	r3, #17
 801d5d4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	7adb      	ldrb	r3, [r3, #11]
 801d5da:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	7a9b      	ldrb	r3, [r3, #10]
 801d5e0:	7cb9      	ldrb	r1, [r7, #18]
 801d5e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d5e4:	9202      	str	r2, [sp, #8]
 801d5e6:	7cfa      	ldrb	r2, [r7, #19]
 801d5e8:	9201      	str	r2, [sp, #4]
 801d5ea:	9300      	str	r3, [sp, #0]
 801d5ec:	460b      	mov	r3, r1
 801d5ee:	687a      	ldr	r2, [r7, #4]
 801d5f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d5f2:	69f8      	ldr	r0, [r7, #28]
 801d5f4:	f001 fc0c 	bl	801ee10 <ip4_output_if_src>
 801d5f8:	4603      	mov	r3, r0
 801d5fa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801d5fc:	69fa      	ldr	r2, [r7, #28]
 801d5fe:	68bb      	ldr	r3, [r7, #8]
 801d600:	429a      	cmp	r2, r3
 801d602:	d004      	beq.n	801d60e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801d604:	69f8      	ldr	r0, [r7, #28]
 801d606:	f7ff f8c1 	bl	801c78c <pbuf_free>
    q = NULL;
 801d60a:	2300      	movs	r3, #0
 801d60c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801d60e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801d612:	4618      	mov	r0, r3
 801d614:	3720      	adds	r7, #32
 801d616:	46bd      	mov	sp, r7
 801d618:	bd80      	pop	{r7, pc}
 801d61a:	bf00      	nop
 801d61c:	08025ad0 	.word	0x08025ad0
 801d620:	08025cbc 	.word	0x08025cbc
 801d624:	08025b24 	.word	0x08025b24
 801d628:	08025cdc 	.word	0x08025cdc
 801d62c:	08025cfc 	.word	0x08025cfc
 801d630:	08025d20 	.word	0x08025d20
 801d634:	08025d44 	.word	0x08025d44
 801d638:	08025d68 	.word	0x08025d68

0801d63c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d63c:	b580      	push	{r7, lr}
 801d63e:	b086      	sub	sp, #24
 801d640:	af00      	add	r7, sp, #0
 801d642:	60f8      	str	r0, [r7, #12]
 801d644:	60b9      	str	r1, [r7, #8]
 801d646:	4613      	mov	r3, r2
 801d648:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d64a:	68bb      	ldr	r3, [r7, #8]
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d101      	bne.n	801d654 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801d650:	4b39      	ldr	r3, [pc, #228]	; (801d738 <udp_bind+0xfc>)
 801d652:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	2b00      	cmp	r3, #0
 801d658:	d109      	bne.n	801d66e <udp_bind+0x32>
 801d65a:	4b38      	ldr	r3, [pc, #224]	; (801d73c <udp_bind+0x100>)
 801d65c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801d660:	4937      	ldr	r1, [pc, #220]	; (801d740 <udp_bind+0x104>)
 801d662:	4838      	ldr	r0, [pc, #224]	; (801d744 <udp_bind+0x108>)
 801d664:	f002 fdca 	bl	80201fc <iprintf>
 801d668:	f06f 030f 	mvn.w	r3, #15
 801d66c:	e060      	b.n	801d730 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801d66e:	2300      	movs	r3, #0
 801d670:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d672:	4b35      	ldr	r3, [pc, #212]	; (801d748 <udp_bind+0x10c>)
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	617b      	str	r3, [r7, #20]
 801d678:	e009      	b.n	801d68e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801d67a:	68fa      	ldr	r2, [r7, #12]
 801d67c:	697b      	ldr	r3, [r7, #20]
 801d67e:	429a      	cmp	r2, r3
 801d680:	d102      	bne.n	801d688 <udp_bind+0x4c>
      rebind = 1;
 801d682:	2301      	movs	r3, #1
 801d684:	74fb      	strb	r3, [r7, #19]
      break;
 801d686:	e005      	b.n	801d694 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d688:	697b      	ldr	r3, [r7, #20]
 801d68a:	68db      	ldr	r3, [r3, #12]
 801d68c:	617b      	str	r3, [r7, #20]
 801d68e:	697b      	ldr	r3, [r7, #20]
 801d690:	2b00      	cmp	r3, #0
 801d692:	d1f2      	bne.n	801d67a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801d694:	88fb      	ldrh	r3, [r7, #6]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d109      	bne.n	801d6ae <udp_bind+0x72>
    port = udp_new_port();
 801d69a:	f7ff fc69 	bl	801cf70 <udp_new_port>
 801d69e:	4603      	mov	r3, r0
 801d6a0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d6a2:	88fb      	ldrh	r3, [r7, #6]
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d12c      	bne.n	801d702 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801d6a8:	f06f 0307 	mvn.w	r3, #7
 801d6ac:	e040      	b.n	801d730 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d6ae:	4b26      	ldr	r3, [pc, #152]	; (801d748 <udp_bind+0x10c>)
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	617b      	str	r3, [r7, #20]
 801d6b4:	e022      	b.n	801d6fc <udp_bind+0xc0>
      if (pcb != ipcb) {
 801d6b6:	68fa      	ldr	r2, [r7, #12]
 801d6b8:	697b      	ldr	r3, [r7, #20]
 801d6ba:	429a      	cmp	r2, r3
 801d6bc:	d01b      	beq.n	801d6f6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801d6be:	697b      	ldr	r3, [r7, #20]
 801d6c0:	8a5b      	ldrh	r3, [r3, #18]
 801d6c2:	88fa      	ldrh	r2, [r7, #6]
 801d6c4:	429a      	cmp	r2, r3
 801d6c6:	d116      	bne.n	801d6f6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d6c8:	697b      	ldr	r3, [r7, #20]
 801d6ca:	681a      	ldr	r2, [r3, #0]
 801d6cc:	68bb      	ldr	r3, [r7, #8]
 801d6ce:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801d6d0:	429a      	cmp	r2, r3
 801d6d2:	d00d      	beq.n	801d6f0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d6d4:	68bb      	ldr	r3, [r7, #8]
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	d00a      	beq.n	801d6f0 <udp_bind+0xb4>
 801d6da:	68bb      	ldr	r3, [r7, #8]
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d006      	beq.n	801d6f0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d6e2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d003      	beq.n	801d6f0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d6e8:	697b      	ldr	r3, [r7, #20]
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d102      	bne.n	801d6f6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801d6f0:	f06f 0307 	mvn.w	r3, #7
 801d6f4:	e01c      	b.n	801d730 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d6f6:	697b      	ldr	r3, [r7, #20]
 801d6f8:	68db      	ldr	r3, [r3, #12]
 801d6fa:	617b      	str	r3, [r7, #20]
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d1d9      	bne.n	801d6b6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d702:	68bb      	ldr	r3, [r7, #8]
 801d704:	2b00      	cmp	r3, #0
 801d706:	d002      	beq.n	801d70e <udp_bind+0xd2>
 801d708:	68bb      	ldr	r3, [r7, #8]
 801d70a:	681b      	ldr	r3, [r3, #0]
 801d70c:	e000      	b.n	801d710 <udp_bind+0xd4>
 801d70e:	2300      	movs	r3, #0
 801d710:	68fa      	ldr	r2, [r7, #12]
 801d712:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	88fa      	ldrh	r2, [r7, #6]
 801d718:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801d71a:	7cfb      	ldrb	r3, [r7, #19]
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d106      	bne.n	801d72e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801d720:	4b09      	ldr	r3, [pc, #36]	; (801d748 <udp_bind+0x10c>)
 801d722:	681a      	ldr	r2, [r3, #0]
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801d728:	4a07      	ldr	r2, [pc, #28]	; (801d748 <udp_bind+0x10c>)
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801d72e:	2300      	movs	r3, #0
}
 801d730:	4618      	mov	r0, r3
 801d732:	3718      	adds	r7, #24
 801d734:	46bd      	mov	sp, r7
 801d736:	bd80      	pop	{r7, pc}
 801d738:	080269b0 	.word	0x080269b0
 801d73c:	08025ad0 	.word	0x08025ad0
 801d740:	08025d98 	.word	0x08025d98
 801d744:	08025b24 	.word	0x08025b24
 801d748:	200131d0 	.word	0x200131d0

0801d74c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801d74c:	b580      	push	{r7, lr}
 801d74e:	b084      	sub	sp, #16
 801d750:	af00      	add	r7, sp, #0
 801d752:	60f8      	str	r0, [r7, #12]
 801d754:	60b9      	str	r1, [r7, #8]
 801d756:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d107      	bne.n	801d76e <udp_recv+0x22>
 801d75e:	4b08      	ldr	r3, [pc, #32]	; (801d780 <udp_recv+0x34>)
 801d760:	f240 428a 	movw	r2, #1162	; 0x48a
 801d764:	4907      	ldr	r1, [pc, #28]	; (801d784 <udp_recv+0x38>)
 801d766:	4808      	ldr	r0, [pc, #32]	; (801d788 <udp_recv+0x3c>)
 801d768:	f002 fd48 	bl	80201fc <iprintf>
 801d76c:	e005      	b.n	801d77a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	68ba      	ldr	r2, [r7, #8]
 801d772:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	687a      	ldr	r2, [r7, #4]
 801d778:	61da      	str	r2, [r3, #28]
}
 801d77a:	3710      	adds	r7, #16
 801d77c:	46bd      	mov	sp, r7
 801d77e:	bd80      	pop	{r7, pc}
 801d780:	08025ad0 	.word	0x08025ad0
 801d784:	08025e04 	.word	0x08025e04
 801d788:	08025b24 	.word	0x08025b24

0801d78c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801d78c:	b580      	push	{r7, lr}
 801d78e:	b084      	sub	sp, #16
 801d790:	af00      	add	r7, sp, #0
 801d792:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	2b00      	cmp	r3, #0
 801d798:	d107      	bne.n	801d7aa <udp_remove+0x1e>
 801d79a:	4b19      	ldr	r3, [pc, #100]	; (801d800 <udp_remove+0x74>)
 801d79c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801d7a0:	4918      	ldr	r1, [pc, #96]	; (801d804 <udp_remove+0x78>)
 801d7a2:	4819      	ldr	r0, [pc, #100]	; (801d808 <udp_remove+0x7c>)
 801d7a4:	f002 fd2a 	bl	80201fc <iprintf>
 801d7a8:	e026      	b.n	801d7f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801d7aa:	4b18      	ldr	r3, [pc, #96]	; (801d80c <udp_remove+0x80>)
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	687a      	ldr	r2, [r7, #4]
 801d7b0:	429a      	cmp	r2, r3
 801d7b2:	d105      	bne.n	801d7c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801d7b4:	4b15      	ldr	r3, [pc, #84]	; (801d80c <udp_remove+0x80>)
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	68db      	ldr	r3, [r3, #12]
 801d7ba:	4a14      	ldr	r2, [pc, #80]	; (801d80c <udp_remove+0x80>)
 801d7bc:	6013      	str	r3, [r2, #0]
 801d7be:	e017      	b.n	801d7f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d7c0:	4b12      	ldr	r3, [pc, #72]	; (801d80c <udp_remove+0x80>)
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	60fb      	str	r3, [r7, #12]
 801d7c6:	e010      	b.n	801d7ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	68db      	ldr	r3, [r3, #12]
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	d009      	beq.n	801d7e4 <udp_remove+0x58>
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	68db      	ldr	r3, [r3, #12]
 801d7d4:	687a      	ldr	r2, [r7, #4]
 801d7d6:	429a      	cmp	r2, r3
 801d7d8:	d104      	bne.n	801d7e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	68da      	ldr	r2, [r3, #12]
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	60da      	str	r2, [r3, #12]
        break;
 801d7e2:	e005      	b.n	801d7f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	68db      	ldr	r3, [r3, #12]
 801d7e8:	60fb      	str	r3, [r7, #12]
 801d7ea:	68fb      	ldr	r3, [r7, #12]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d1eb      	bne.n	801d7c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801d7f0:	6879      	ldr	r1, [r7, #4]
 801d7f2:	2000      	movs	r0, #0
 801d7f4:	f7fe f8ba 	bl	801b96c <memp_free>
}
 801d7f8:	3710      	adds	r7, #16
 801d7fa:	46bd      	mov	sp, r7
 801d7fc:	bd80      	pop	{r7, pc}
 801d7fe:	bf00      	nop
 801d800:	08025ad0 	.word	0x08025ad0
 801d804:	08025e1c 	.word	0x08025e1c
 801d808:	08025b24 	.word	0x08025b24
 801d80c:	200131d0 	.word	0x200131d0

0801d810 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801d810:	b580      	push	{r7, lr}
 801d812:	b082      	sub	sp, #8
 801d814:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801d816:	2000      	movs	r0, #0
 801d818:	f7fe f838 	bl	801b88c <memp_malloc>
 801d81c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	2b00      	cmp	r3, #0
 801d822:	d007      	beq.n	801d834 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801d824:	2220      	movs	r2, #32
 801d826:	2100      	movs	r1, #0
 801d828:	6878      	ldr	r0, [r7, #4]
 801d82a:	f002 fbff 	bl	802002c <memset>
    pcb->ttl = UDP_TTL;
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	22ff      	movs	r2, #255	; 0xff
 801d832:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801d834:	687b      	ldr	r3, [r7, #4]
}
 801d836:	4618      	mov	r0, r3
 801d838:	3708      	adds	r7, #8
 801d83a:	46bd      	mov	sp, r7
 801d83c:	bd80      	pop	{r7, pc}
	...

0801d840 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d840:	b480      	push	{r7}
 801d842:	b085      	sub	sp, #20
 801d844:	af00      	add	r7, sp, #0
 801d846:	6078      	str	r0, [r7, #4]
 801d848:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d01e      	beq.n	801d88e <udp_netif_ip_addr_changed+0x4e>
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	2b00      	cmp	r3, #0
 801d856:	d01a      	beq.n	801d88e <udp_netif_ip_addr_changed+0x4e>
 801d858:	683b      	ldr	r3, [r7, #0]
 801d85a:	2b00      	cmp	r3, #0
 801d85c:	d017      	beq.n	801d88e <udp_netif_ip_addr_changed+0x4e>
 801d85e:	683b      	ldr	r3, [r7, #0]
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	2b00      	cmp	r3, #0
 801d864:	d013      	beq.n	801d88e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d866:	4b0d      	ldr	r3, [pc, #52]	; (801d89c <udp_netif_ip_addr_changed+0x5c>)
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	60fb      	str	r3, [r7, #12]
 801d86c:	e00c      	b.n	801d888 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	681a      	ldr	r2, [r3, #0]
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	429a      	cmp	r2, r3
 801d878:	d103      	bne.n	801d882 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d87a:	683b      	ldr	r3, [r7, #0]
 801d87c:	681a      	ldr	r2, [r3, #0]
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	68db      	ldr	r3, [r3, #12]
 801d886:	60fb      	str	r3, [r7, #12]
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d1ef      	bne.n	801d86e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801d88e:	bf00      	nop
 801d890:	3714      	adds	r7, #20
 801d892:	46bd      	mov	sp, r7
 801d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d898:	4770      	bx	lr
 801d89a:	bf00      	nop
 801d89c:	200131d0 	.word	0x200131d0

0801d8a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801d8a0:	b580      	push	{r7, lr}
 801d8a2:	b082      	sub	sp, #8
 801d8a4:	af00      	add	r7, sp, #0
 801d8a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801d8a8:	4915      	ldr	r1, [pc, #84]	; (801d900 <etharp_free_entry+0x60>)
 801d8aa:	687a      	ldr	r2, [r7, #4]
 801d8ac:	4613      	mov	r3, r2
 801d8ae:	005b      	lsls	r3, r3, #1
 801d8b0:	4413      	add	r3, r2
 801d8b2:	00db      	lsls	r3, r3, #3
 801d8b4:	440b      	add	r3, r1
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d013      	beq.n	801d8e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801d8bc:	4910      	ldr	r1, [pc, #64]	; (801d900 <etharp_free_entry+0x60>)
 801d8be:	687a      	ldr	r2, [r7, #4]
 801d8c0:	4613      	mov	r3, r2
 801d8c2:	005b      	lsls	r3, r3, #1
 801d8c4:	4413      	add	r3, r2
 801d8c6:	00db      	lsls	r3, r3, #3
 801d8c8:	440b      	add	r3, r1
 801d8ca:	681b      	ldr	r3, [r3, #0]
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	f7fe ff5d 	bl	801c78c <pbuf_free>
    arp_table[i].q = NULL;
 801d8d2:	490b      	ldr	r1, [pc, #44]	; (801d900 <etharp_free_entry+0x60>)
 801d8d4:	687a      	ldr	r2, [r7, #4]
 801d8d6:	4613      	mov	r3, r2
 801d8d8:	005b      	lsls	r3, r3, #1
 801d8da:	4413      	add	r3, r2
 801d8dc:	00db      	lsls	r3, r3, #3
 801d8de:	440b      	add	r3, r1
 801d8e0:	2200      	movs	r2, #0
 801d8e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d8e4:	4906      	ldr	r1, [pc, #24]	; (801d900 <etharp_free_entry+0x60>)
 801d8e6:	687a      	ldr	r2, [r7, #4]
 801d8e8:	4613      	mov	r3, r2
 801d8ea:	005b      	lsls	r3, r3, #1
 801d8ec:	4413      	add	r3, r2
 801d8ee:	00db      	lsls	r3, r3, #3
 801d8f0:	440b      	add	r3, r1
 801d8f2:	3314      	adds	r3, #20
 801d8f4:	2200      	movs	r2, #0
 801d8f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801d8f8:	bf00      	nop
 801d8fa:	3708      	adds	r7, #8
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bd80      	pop	{r7, pc}
 801d900:	200131d4 	.word	0x200131d4

0801d904 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d904:	b580      	push	{r7, lr}
 801d906:	b082      	sub	sp, #8
 801d908:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d90a:	2300      	movs	r3, #0
 801d90c:	607b      	str	r3, [r7, #4]
 801d90e:	e096      	b.n	801da3e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d910:	494f      	ldr	r1, [pc, #316]	; (801da50 <etharp_tmr+0x14c>)
 801d912:	687a      	ldr	r2, [r7, #4]
 801d914:	4613      	mov	r3, r2
 801d916:	005b      	lsls	r3, r3, #1
 801d918:	4413      	add	r3, r2
 801d91a:	00db      	lsls	r3, r3, #3
 801d91c:	440b      	add	r3, r1
 801d91e:	3314      	adds	r3, #20
 801d920:	781b      	ldrb	r3, [r3, #0]
 801d922:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d924:	78fb      	ldrb	r3, [r7, #3]
 801d926:	2b00      	cmp	r3, #0
 801d928:	f000 8086 	beq.w	801da38 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d92c:	4948      	ldr	r1, [pc, #288]	; (801da50 <etharp_tmr+0x14c>)
 801d92e:	687a      	ldr	r2, [r7, #4]
 801d930:	4613      	mov	r3, r2
 801d932:	005b      	lsls	r3, r3, #1
 801d934:	4413      	add	r3, r2
 801d936:	00db      	lsls	r3, r3, #3
 801d938:	440b      	add	r3, r1
 801d93a:	3312      	adds	r3, #18
 801d93c:	881b      	ldrh	r3, [r3, #0]
 801d93e:	3301      	adds	r3, #1
 801d940:	b298      	uxth	r0, r3
 801d942:	4943      	ldr	r1, [pc, #268]	; (801da50 <etharp_tmr+0x14c>)
 801d944:	687a      	ldr	r2, [r7, #4]
 801d946:	4613      	mov	r3, r2
 801d948:	005b      	lsls	r3, r3, #1
 801d94a:	4413      	add	r3, r2
 801d94c:	00db      	lsls	r3, r3, #3
 801d94e:	440b      	add	r3, r1
 801d950:	3312      	adds	r3, #18
 801d952:	4602      	mov	r2, r0
 801d954:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d956:	493e      	ldr	r1, [pc, #248]	; (801da50 <etharp_tmr+0x14c>)
 801d958:	687a      	ldr	r2, [r7, #4]
 801d95a:	4613      	mov	r3, r2
 801d95c:	005b      	lsls	r3, r3, #1
 801d95e:	4413      	add	r3, r2
 801d960:	00db      	lsls	r3, r3, #3
 801d962:	440b      	add	r3, r1
 801d964:	3312      	adds	r3, #18
 801d966:	881b      	ldrh	r3, [r3, #0]
 801d968:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801d96c:	d215      	bcs.n	801d99a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d96e:	4938      	ldr	r1, [pc, #224]	; (801da50 <etharp_tmr+0x14c>)
 801d970:	687a      	ldr	r2, [r7, #4]
 801d972:	4613      	mov	r3, r2
 801d974:	005b      	lsls	r3, r3, #1
 801d976:	4413      	add	r3, r2
 801d978:	00db      	lsls	r3, r3, #3
 801d97a:	440b      	add	r3, r1
 801d97c:	3314      	adds	r3, #20
 801d97e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d980:	2b01      	cmp	r3, #1
 801d982:	d10e      	bne.n	801d9a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d984:	4932      	ldr	r1, [pc, #200]	; (801da50 <etharp_tmr+0x14c>)
 801d986:	687a      	ldr	r2, [r7, #4]
 801d988:	4613      	mov	r3, r2
 801d98a:	005b      	lsls	r3, r3, #1
 801d98c:	4413      	add	r3, r2
 801d98e:	00db      	lsls	r3, r3, #3
 801d990:	440b      	add	r3, r1
 801d992:	3312      	adds	r3, #18
 801d994:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d996:	2b04      	cmp	r3, #4
 801d998:	d903      	bls.n	801d9a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d99a:	6878      	ldr	r0, [r7, #4]
 801d99c:	f7ff ff80 	bl	801d8a0 <etharp_free_entry>
 801d9a0:	e04a      	b.n	801da38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d9a2:	492b      	ldr	r1, [pc, #172]	; (801da50 <etharp_tmr+0x14c>)
 801d9a4:	687a      	ldr	r2, [r7, #4]
 801d9a6:	4613      	mov	r3, r2
 801d9a8:	005b      	lsls	r3, r3, #1
 801d9aa:	4413      	add	r3, r2
 801d9ac:	00db      	lsls	r3, r3, #3
 801d9ae:	440b      	add	r3, r1
 801d9b0:	3314      	adds	r3, #20
 801d9b2:	781b      	ldrb	r3, [r3, #0]
 801d9b4:	2b03      	cmp	r3, #3
 801d9b6:	d10a      	bne.n	801d9ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d9b8:	4925      	ldr	r1, [pc, #148]	; (801da50 <etharp_tmr+0x14c>)
 801d9ba:	687a      	ldr	r2, [r7, #4]
 801d9bc:	4613      	mov	r3, r2
 801d9be:	005b      	lsls	r3, r3, #1
 801d9c0:	4413      	add	r3, r2
 801d9c2:	00db      	lsls	r3, r3, #3
 801d9c4:	440b      	add	r3, r1
 801d9c6:	3314      	adds	r3, #20
 801d9c8:	2204      	movs	r2, #4
 801d9ca:	701a      	strb	r2, [r3, #0]
 801d9cc:	e034      	b.n	801da38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d9ce:	4920      	ldr	r1, [pc, #128]	; (801da50 <etharp_tmr+0x14c>)
 801d9d0:	687a      	ldr	r2, [r7, #4]
 801d9d2:	4613      	mov	r3, r2
 801d9d4:	005b      	lsls	r3, r3, #1
 801d9d6:	4413      	add	r3, r2
 801d9d8:	00db      	lsls	r3, r3, #3
 801d9da:	440b      	add	r3, r1
 801d9dc:	3314      	adds	r3, #20
 801d9de:	781b      	ldrb	r3, [r3, #0]
 801d9e0:	2b04      	cmp	r3, #4
 801d9e2:	d10a      	bne.n	801d9fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d9e4:	491a      	ldr	r1, [pc, #104]	; (801da50 <etharp_tmr+0x14c>)
 801d9e6:	687a      	ldr	r2, [r7, #4]
 801d9e8:	4613      	mov	r3, r2
 801d9ea:	005b      	lsls	r3, r3, #1
 801d9ec:	4413      	add	r3, r2
 801d9ee:	00db      	lsls	r3, r3, #3
 801d9f0:	440b      	add	r3, r1
 801d9f2:	3314      	adds	r3, #20
 801d9f4:	2202      	movs	r2, #2
 801d9f6:	701a      	strb	r2, [r3, #0]
 801d9f8:	e01e      	b.n	801da38 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d9fa:	4915      	ldr	r1, [pc, #84]	; (801da50 <etharp_tmr+0x14c>)
 801d9fc:	687a      	ldr	r2, [r7, #4]
 801d9fe:	4613      	mov	r3, r2
 801da00:	005b      	lsls	r3, r3, #1
 801da02:	4413      	add	r3, r2
 801da04:	00db      	lsls	r3, r3, #3
 801da06:	440b      	add	r3, r1
 801da08:	3314      	adds	r3, #20
 801da0a:	781b      	ldrb	r3, [r3, #0]
 801da0c:	2b01      	cmp	r3, #1
 801da0e:	d113      	bne.n	801da38 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801da10:	490f      	ldr	r1, [pc, #60]	; (801da50 <etharp_tmr+0x14c>)
 801da12:	687a      	ldr	r2, [r7, #4]
 801da14:	4613      	mov	r3, r2
 801da16:	005b      	lsls	r3, r3, #1
 801da18:	4413      	add	r3, r2
 801da1a:	00db      	lsls	r3, r3, #3
 801da1c:	440b      	add	r3, r1
 801da1e:	3308      	adds	r3, #8
 801da20:	6818      	ldr	r0, [r3, #0]
 801da22:	687a      	ldr	r2, [r7, #4]
 801da24:	4613      	mov	r3, r2
 801da26:	005b      	lsls	r3, r3, #1
 801da28:	4413      	add	r3, r2
 801da2a:	00db      	lsls	r3, r3, #3
 801da2c:	4a08      	ldr	r2, [pc, #32]	; (801da50 <etharp_tmr+0x14c>)
 801da2e:	4413      	add	r3, r2
 801da30:	3304      	adds	r3, #4
 801da32:	4619      	mov	r1, r3
 801da34:	f000 fe6e 	bl	801e714 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	3301      	adds	r3, #1
 801da3c:	607b      	str	r3, [r7, #4]
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	2b31      	cmp	r3, #49	; 0x31
 801da42:	f77f af65 	ble.w	801d910 <etharp_tmr+0xc>
      }
    }
  }
}
 801da46:	bf00      	nop
 801da48:	bf00      	nop
 801da4a:	3708      	adds	r7, #8
 801da4c:	46bd      	mov	sp, r7
 801da4e:	bd80      	pop	{r7, pc}
 801da50:	200131d4 	.word	0x200131d4

0801da54 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801da54:	b580      	push	{r7, lr}
 801da56:	b08a      	sub	sp, #40	; 0x28
 801da58:	af00      	add	r7, sp, #0
 801da5a:	60f8      	str	r0, [r7, #12]
 801da5c:	460b      	mov	r3, r1
 801da5e:	607a      	str	r2, [r7, #4]
 801da60:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801da62:	2332      	movs	r3, #50	; 0x32
 801da64:	84fb      	strh	r3, [r7, #38]	; 0x26
 801da66:	2332      	movs	r3, #50	; 0x32
 801da68:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801da6a:	2332      	movs	r3, #50	; 0x32
 801da6c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801da6e:	2300      	movs	r3, #0
 801da70:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801da72:	2332      	movs	r3, #50	; 0x32
 801da74:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801da76:	2300      	movs	r3, #0
 801da78:	83bb      	strh	r3, [r7, #28]
 801da7a:	2300      	movs	r3, #0
 801da7c:	837b      	strh	r3, [r7, #26]
 801da7e:	2300      	movs	r3, #0
 801da80:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801da82:	2300      	movs	r3, #0
 801da84:	843b      	strh	r3, [r7, #32]
 801da86:	e0ae      	b.n	801dbe6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801da88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801da8c:	49a6      	ldr	r1, [pc, #664]	; (801dd28 <etharp_find_entry+0x2d4>)
 801da8e:	4613      	mov	r3, r2
 801da90:	005b      	lsls	r3, r3, #1
 801da92:	4413      	add	r3, r2
 801da94:	00db      	lsls	r3, r3, #3
 801da96:	440b      	add	r3, r1
 801da98:	3314      	adds	r3, #20
 801da9a:	781b      	ldrb	r3, [r3, #0]
 801da9c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801da9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801daa2:	2b32      	cmp	r3, #50	; 0x32
 801daa4:	d105      	bne.n	801dab2 <etharp_find_entry+0x5e>
 801daa6:	7dfb      	ldrb	r3, [r7, #23]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d102      	bne.n	801dab2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801daac:	8c3b      	ldrh	r3, [r7, #32]
 801daae:	847b      	strh	r3, [r7, #34]	; 0x22
 801dab0:	e095      	b.n	801dbde <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801dab2:	7dfb      	ldrb	r3, [r7, #23]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	f000 8092 	beq.w	801dbde <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801daba:	7dfb      	ldrb	r3, [r7, #23]
 801dabc:	2b01      	cmp	r3, #1
 801dabe:	d009      	beq.n	801dad4 <etharp_find_entry+0x80>
 801dac0:	7dfb      	ldrb	r3, [r7, #23]
 801dac2:	2b01      	cmp	r3, #1
 801dac4:	d806      	bhi.n	801dad4 <etharp_find_entry+0x80>
 801dac6:	4b99      	ldr	r3, [pc, #612]	; (801dd2c <etharp_find_entry+0x2d8>)
 801dac8:	f240 1223 	movw	r2, #291	; 0x123
 801dacc:	4998      	ldr	r1, [pc, #608]	; (801dd30 <etharp_find_entry+0x2dc>)
 801dace:	4899      	ldr	r0, [pc, #612]	; (801dd34 <etharp_find_entry+0x2e0>)
 801dad0:	f002 fb94 	bl	80201fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801dad4:	68fb      	ldr	r3, [r7, #12]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d020      	beq.n	801db1c <etharp_find_entry+0xc8>
 801dada:	68fb      	ldr	r3, [r7, #12]
 801dadc:	6819      	ldr	r1, [r3, #0]
 801dade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dae2:	4891      	ldr	r0, [pc, #580]	; (801dd28 <etharp_find_entry+0x2d4>)
 801dae4:	4613      	mov	r3, r2
 801dae6:	005b      	lsls	r3, r3, #1
 801dae8:	4413      	add	r3, r2
 801daea:	00db      	lsls	r3, r3, #3
 801daec:	4403      	add	r3, r0
 801daee:	3304      	adds	r3, #4
 801daf0:	681b      	ldr	r3, [r3, #0]
 801daf2:	4299      	cmp	r1, r3
 801daf4:	d112      	bne.n	801db1c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d00c      	beq.n	801db16 <etharp_find_entry+0xc2>
 801dafc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db00:	4989      	ldr	r1, [pc, #548]	; (801dd28 <etharp_find_entry+0x2d4>)
 801db02:	4613      	mov	r3, r2
 801db04:	005b      	lsls	r3, r3, #1
 801db06:	4413      	add	r3, r2
 801db08:	00db      	lsls	r3, r3, #3
 801db0a:	440b      	add	r3, r1
 801db0c:	3308      	adds	r3, #8
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	687a      	ldr	r2, [r7, #4]
 801db12:	429a      	cmp	r2, r3
 801db14:	d102      	bne.n	801db1c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801db16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801db1a:	e100      	b.n	801dd1e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801db1c:	7dfb      	ldrb	r3, [r7, #23]
 801db1e:	2b01      	cmp	r3, #1
 801db20:	d140      	bne.n	801dba4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801db22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db26:	4980      	ldr	r1, [pc, #512]	; (801dd28 <etharp_find_entry+0x2d4>)
 801db28:	4613      	mov	r3, r2
 801db2a:	005b      	lsls	r3, r3, #1
 801db2c:	4413      	add	r3, r2
 801db2e:	00db      	lsls	r3, r3, #3
 801db30:	440b      	add	r3, r1
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	2b00      	cmp	r3, #0
 801db36:	d01a      	beq.n	801db6e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801db38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db3c:	497a      	ldr	r1, [pc, #488]	; (801dd28 <etharp_find_entry+0x2d4>)
 801db3e:	4613      	mov	r3, r2
 801db40:	005b      	lsls	r3, r3, #1
 801db42:	4413      	add	r3, r2
 801db44:	00db      	lsls	r3, r3, #3
 801db46:	440b      	add	r3, r1
 801db48:	3312      	adds	r3, #18
 801db4a:	881b      	ldrh	r3, [r3, #0]
 801db4c:	8bba      	ldrh	r2, [r7, #28]
 801db4e:	429a      	cmp	r2, r3
 801db50:	d845      	bhi.n	801dbde <etharp_find_entry+0x18a>
            old_queue = i;
 801db52:	8c3b      	ldrh	r3, [r7, #32]
 801db54:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801db56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db5a:	4973      	ldr	r1, [pc, #460]	; (801dd28 <etharp_find_entry+0x2d4>)
 801db5c:	4613      	mov	r3, r2
 801db5e:	005b      	lsls	r3, r3, #1
 801db60:	4413      	add	r3, r2
 801db62:	00db      	lsls	r3, r3, #3
 801db64:	440b      	add	r3, r1
 801db66:	3312      	adds	r3, #18
 801db68:	881b      	ldrh	r3, [r3, #0]
 801db6a:	83bb      	strh	r3, [r7, #28]
 801db6c:	e037      	b.n	801dbde <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801db6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db72:	496d      	ldr	r1, [pc, #436]	; (801dd28 <etharp_find_entry+0x2d4>)
 801db74:	4613      	mov	r3, r2
 801db76:	005b      	lsls	r3, r3, #1
 801db78:	4413      	add	r3, r2
 801db7a:	00db      	lsls	r3, r3, #3
 801db7c:	440b      	add	r3, r1
 801db7e:	3312      	adds	r3, #18
 801db80:	881b      	ldrh	r3, [r3, #0]
 801db82:	8b7a      	ldrh	r2, [r7, #26]
 801db84:	429a      	cmp	r2, r3
 801db86:	d82a      	bhi.n	801dbde <etharp_find_entry+0x18a>
            old_pending = i;
 801db88:	8c3b      	ldrh	r3, [r7, #32]
 801db8a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801db8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801db90:	4965      	ldr	r1, [pc, #404]	; (801dd28 <etharp_find_entry+0x2d4>)
 801db92:	4613      	mov	r3, r2
 801db94:	005b      	lsls	r3, r3, #1
 801db96:	4413      	add	r3, r2
 801db98:	00db      	lsls	r3, r3, #3
 801db9a:	440b      	add	r3, r1
 801db9c:	3312      	adds	r3, #18
 801db9e:	881b      	ldrh	r3, [r3, #0]
 801dba0:	837b      	strh	r3, [r7, #26]
 801dba2:	e01c      	b.n	801dbde <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801dba4:	7dfb      	ldrb	r3, [r7, #23]
 801dba6:	2b01      	cmp	r3, #1
 801dba8:	d919      	bls.n	801dbde <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801dbaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dbae:	495e      	ldr	r1, [pc, #376]	; (801dd28 <etharp_find_entry+0x2d4>)
 801dbb0:	4613      	mov	r3, r2
 801dbb2:	005b      	lsls	r3, r3, #1
 801dbb4:	4413      	add	r3, r2
 801dbb6:	00db      	lsls	r3, r3, #3
 801dbb8:	440b      	add	r3, r1
 801dbba:	3312      	adds	r3, #18
 801dbbc:	881b      	ldrh	r3, [r3, #0]
 801dbbe:	8b3a      	ldrh	r2, [r7, #24]
 801dbc0:	429a      	cmp	r2, r3
 801dbc2:	d80c      	bhi.n	801dbde <etharp_find_entry+0x18a>
            old_stable = i;
 801dbc4:	8c3b      	ldrh	r3, [r7, #32]
 801dbc6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801dbc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dbcc:	4956      	ldr	r1, [pc, #344]	; (801dd28 <etharp_find_entry+0x2d4>)
 801dbce:	4613      	mov	r3, r2
 801dbd0:	005b      	lsls	r3, r3, #1
 801dbd2:	4413      	add	r3, r2
 801dbd4:	00db      	lsls	r3, r3, #3
 801dbd6:	440b      	add	r3, r1
 801dbd8:	3312      	adds	r3, #18
 801dbda:	881b      	ldrh	r3, [r3, #0]
 801dbdc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801dbde:	8c3b      	ldrh	r3, [r7, #32]
 801dbe0:	3301      	adds	r3, #1
 801dbe2:	b29b      	uxth	r3, r3
 801dbe4:	843b      	strh	r3, [r7, #32]
 801dbe6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801dbea:	2b31      	cmp	r3, #49	; 0x31
 801dbec:	f77f af4c 	ble.w	801da88 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801dbf0:	7afb      	ldrb	r3, [r7, #11]
 801dbf2:	f003 0302 	and.w	r3, r3, #2
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d108      	bne.n	801dc0c <etharp_find_entry+0x1b8>
 801dbfa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801dbfe:	2b32      	cmp	r3, #50	; 0x32
 801dc00:	d107      	bne.n	801dc12 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801dc02:	7afb      	ldrb	r3, [r7, #11]
 801dc04:	f003 0301 	and.w	r3, r3, #1
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d102      	bne.n	801dc12 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801dc0c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc10:	e085      	b.n	801dd1e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801dc12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801dc16:	2b31      	cmp	r3, #49	; 0x31
 801dc18:	dc02      	bgt.n	801dc20 <etharp_find_entry+0x1cc>
    i = empty;
 801dc1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801dc1c:	843b      	strh	r3, [r7, #32]
 801dc1e:	e039      	b.n	801dc94 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801dc20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801dc24:	2b31      	cmp	r3, #49	; 0x31
 801dc26:	dc14      	bgt.n	801dc52 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801dc28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dc2a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801dc2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dc30:	493d      	ldr	r1, [pc, #244]	; (801dd28 <etharp_find_entry+0x2d4>)
 801dc32:	4613      	mov	r3, r2
 801dc34:	005b      	lsls	r3, r3, #1
 801dc36:	4413      	add	r3, r2
 801dc38:	00db      	lsls	r3, r3, #3
 801dc3a:	440b      	add	r3, r1
 801dc3c:	681b      	ldr	r3, [r3, #0]
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d018      	beq.n	801dc74 <etharp_find_entry+0x220>
 801dc42:	4b3a      	ldr	r3, [pc, #232]	; (801dd2c <etharp_find_entry+0x2d8>)
 801dc44:	f240 126d 	movw	r2, #365	; 0x16d
 801dc48:	493b      	ldr	r1, [pc, #236]	; (801dd38 <etharp_find_entry+0x2e4>)
 801dc4a:	483a      	ldr	r0, [pc, #232]	; (801dd34 <etharp_find_entry+0x2e0>)
 801dc4c:	f002 fad6 	bl	80201fc <iprintf>
 801dc50:	e010      	b.n	801dc74 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801dc52:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801dc56:	2b31      	cmp	r3, #49	; 0x31
 801dc58:	dc02      	bgt.n	801dc60 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801dc5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801dc5c:	843b      	strh	r3, [r7, #32]
 801dc5e:	e009      	b.n	801dc74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801dc60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801dc64:	2b31      	cmp	r3, #49	; 0x31
 801dc66:	dc02      	bgt.n	801dc6e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801dc68:	8bfb      	ldrh	r3, [r7, #30]
 801dc6a:	843b      	strh	r3, [r7, #32]
 801dc6c:	e002      	b.n	801dc74 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801dc6e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc72:	e054      	b.n	801dd1e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801dc74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801dc78:	2b31      	cmp	r3, #49	; 0x31
 801dc7a:	dd06      	ble.n	801dc8a <etharp_find_entry+0x236>
 801dc7c:	4b2b      	ldr	r3, [pc, #172]	; (801dd2c <etharp_find_entry+0x2d8>)
 801dc7e:	f240 127f 	movw	r2, #383	; 0x17f
 801dc82:	492e      	ldr	r1, [pc, #184]	; (801dd3c <etharp_find_entry+0x2e8>)
 801dc84:	482b      	ldr	r0, [pc, #172]	; (801dd34 <etharp_find_entry+0x2e0>)
 801dc86:	f002 fab9 	bl	80201fc <iprintf>
    etharp_free_entry(i);
 801dc8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801dc8e:	4618      	mov	r0, r3
 801dc90:	f7ff fe06 	bl	801d8a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801dc94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801dc98:	2b31      	cmp	r3, #49	; 0x31
 801dc9a:	dd06      	ble.n	801dcaa <etharp_find_entry+0x256>
 801dc9c:	4b23      	ldr	r3, [pc, #140]	; (801dd2c <etharp_find_entry+0x2d8>)
 801dc9e:	f240 1283 	movw	r2, #387	; 0x183
 801dca2:	4926      	ldr	r1, [pc, #152]	; (801dd3c <etharp_find_entry+0x2e8>)
 801dca4:	4823      	ldr	r0, [pc, #140]	; (801dd34 <etharp_find_entry+0x2e0>)
 801dca6:	f002 faa9 	bl	80201fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801dcaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dcae:	491e      	ldr	r1, [pc, #120]	; (801dd28 <etharp_find_entry+0x2d4>)
 801dcb0:	4613      	mov	r3, r2
 801dcb2:	005b      	lsls	r3, r3, #1
 801dcb4:	4413      	add	r3, r2
 801dcb6:	00db      	lsls	r3, r3, #3
 801dcb8:	440b      	add	r3, r1
 801dcba:	3314      	adds	r3, #20
 801dcbc:	781b      	ldrb	r3, [r3, #0]
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d006      	beq.n	801dcd0 <etharp_find_entry+0x27c>
 801dcc2:	4b1a      	ldr	r3, [pc, #104]	; (801dd2c <etharp_find_entry+0x2d8>)
 801dcc4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801dcc8:	491d      	ldr	r1, [pc, #116]	; (801dd40 <etharp_find_entry+0x2ec>)
 801dcca:	481a      	ldr	r0, [pc, #104]	; (801dd34 <etharp_find_entry+0x2e0>)
 801dccc:	f002 fa96 	bl	80201fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d00b      	beq.n	801dcee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801dcd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	6819      	ldr	r1, [r3, #0]
 801dcde:	4812      	ldr	r0, [pc, #72]	; (801dd28 <etharp_find_entry+0x2d4>)
 801dce0:	4613      	mov	r3, r2
 801dce2:	005b      	lsls	r3, r3, #1
 801dce4:	4413      	add	r3, r2
 801dce6:	00db      	lsls	r3, r3, #3
 801dce8:	4403      	add	r3, r0
 801dcea:	3304      	adds	r3, #4
 801dcec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801dcee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dcf2:	490d      	ldr	r1, [pc, #52]	; (801dd28 <etharp_find_entry+0x2d4>)
 801dcf4:	4613      	mov	r3, r2
 801dcf6:	005b      	lsls	r3, r3, #1
 801dcf8:	4413      	add	r3, r2
 801dcfa:	00db      	lsls	r3, r3, #3
 801dcfc:	440b      	add	r3, r1
 801dcfe:	3312      	adds	r3, #18
 801dd00:	2200      	movs	r2, #0
 801dd02:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801dd04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801dd08:	4907      	ldr	r1, [pc, #28]	; (801dd28 <etharp_find_entry+0x2d4>)
 801dd0a:	4613      	mov	r3, r2
 801dd0c:	005b      	lsls	r3, r3, #1
 801dd0e:	4413      	add	r3, r2
 801dd10:	00db      	lsls	r3, r3, #3
 801dd12:	440b      	add	r3, r1
 801dd14:	3308      	adds	r3, #8
 801dd16:	687a      	ldr	r2, [r7, #4]
 801dd18:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801dd1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801dd1e:	4618      	mov	r0, r3
 801dd20:	3728      	adds	r7, #40	; 0x28
 801dd22:	46bd      	mov	sp, r7
 801dd24:	bd80      	pop	{r7, pc}
 801dd26:	bf00      	nop
 801dd28:	200131d4 	.word	0x200131d4
 801dd2c:	08025e34 	.word	0x08025e34
 801dd30:	08025e6c 	.word	0x08025e6c
 801dd34:	08025eac 	.word	0x08025eac
 801dd38:	08025ed4 	.word	0x08025ed4
 801dd3c:	08025eec 	.word	0x08025eec
 801dd40:	08025f00 	.word	0x08025f00

0801dd44 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b088      	sub	sp, #32
 801dd48:	af02      	add	r7, sp, #8
 801dd4a:	60f8      	str	r0, [r7, #12]
 801dd4c:	60b9      	str	r1, [r7, #8]
 801dd4e:	607a      	str	r2, [r7, #4]
 801dd50:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dd58:	2b06      	cmp	r3, #6
 801dd5a:	d006      	beq.n	801dd6a <etharp_update_arp_entry+0x26>
 801dd5c:	4b48      	ldr	r3, [pc, #288]	; (801de80 <etharp_update_arp_entry+0x13c>)
 801dd5e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801dd62:	4948      	ldr	r1, [pc, #288]	; (801de84 <etharp_update_arp_entry+0x140>)
 801dd64:	4848      	ldr	r0, [pc, #288]	; (801de88 <etharp_update_arp_entry+0x144>)
 801dd66:	f002 fa49 	bl	80201fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801dd6a:	68bb      	ldr	r3, [r7, #8]
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d012      	beq.n	801dd96 <etharp_update_arp_entry+0x52>
 801dd70:	68bb      	ldr	r3, [r7, #8]
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d00e      	beq.n	801dd96 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801dd78:	68bb      	ldr	r3, [r7, #8]
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	68f9      	ldr	r1, [r7, #12]
 801dd7e:	4618      	mov	r0, r3
 801dd80:	f001 f902 	bl	801ef88 <ip4_addr_isbroadcast_u32>
 801dd84:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d105      	bne.n	801dd96 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801dd8a:	68bb      	ldr	r3, [r7, #8]
 801dd8c:	681b      	ldr	r3, [r3, #0]
 801dd8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801dd92:	2be0      	cmp	r3, #224	; 0xe0
 801dd94:	d102      	bne.n	801dd9c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801dd96:	f06f 030f 	mvn.w	r3, #15
 801dd9a:	e06c      	b.n	801de76 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801dd9c:	78fb      	ldrb	r3, [r7, #3]
 801dd9e:	68fa      	ldr	r2, [r7, #12]
 801dda0:	4619      	mov	r1, r3
 801dda2:	68b8      	ldr	r0, [r7, #8]
 801dda4:	f7ff fe56 	bl	801da54 <etharp_find_entry>
 801dda8:	4603      	mov	r3, r0
 801ddaa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ddac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	da02      	bge.n	801ddba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ddb4:	8afb      	ldrh	r3, [r7, #22]
 801ddb6:	b25b      	sxtb	r3, r3
 801ddb8:	e05d      	b.n	801de76 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ddba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ddbe:	4933      	ldr	r1, [pc, #204]	; (801de8c <etharp_update_arp_entry+0x148>)
 801ddc0:	4613      	mov	r3, r2
 801ddc2:	005b      	lsls	r3, r3, #1
 801ddc4:	4413      	add	r3, r2
 801ddc6:	00db      	lsls	r3, r3, #3
 801ddc8:	440b      	add	r3, r1
 801ddca:	3314      	adds	r3, #20
 801ddcc:	2202      	movs	r2, #2
 801ddce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ddd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ddd4:	492d      	ldr	r1, [pc, #180]	; (801de8c <etharp_update_arp_entry+0x148>)
 801ddd6:	4613      	mov	r3, r2
 801ddd8:	005b      	lsls	r3, r3, #1
 801ddda:	4413      	add	r3, r2
 801dddc:	00db      	lsls	r3, r3, #3
 801ddde:	440b      	add	r3, r1
 801dde0:	3308      	adds	r3, #8
 801dde2:	68fa      	ldr	r2, [r7, #12]
 801dde4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801dde6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ddea:	4613      	mov	r3, r2
 801ddec:	005b      	lsls	r3, r3, #1
 801ddee:	4413      	add	r3, r2
 801ddf0:	00db      	lsls	r3, r3, #3
 801ddf2:	3308      	adds	r3, #8
 801ddf4:	4a25      	ldr	r2, [pc, #148]	; (801de8c <etharp_update_arp_entry+0x148>)
 801ddf6:	4413      	add	r3, r2
 801ddf8:	3304      	adds	r3, #4
 801ddfa:	2206      	movs	r2, #6
 801ddfc:	6879      	ldr	r1, [r7, #4]
 801ddfe:	4618      	mov	r0, r3
 801de00:	f002 f8ec 	bl	801ffdc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801de04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801de08:	4920      	ldr	r1, [pc, #128]	; (801de8c <etharp_update_arp_entry+0x148>)
 801de0a:	4613      	mov	r3, r2
 801de0c:	005b      	lsls	r3, r3, #1
 801de0e:	4413      	add	r3, r2
 801de10:	00db      	lsls	r3, r3, #3
 801de12:	440b      	add	r3, r1
 801de14:	3312      	adds	r3, #18
 801de16:	2200      	movs	r2, #0
 801de18:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801de1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801de1e:	491b      	ldr	r1, [pc, #108]	; (801de8c <etharp_update_arp_entry+0x148>)
 801de20:	4613      	mov	r3, r2
 801de22:	005b      	lsls	r3, r3, #1
 801de24:	4413      	add	r3, r2
 801de26:	00db      	lsls	r3, r3, #3
 801de28:	440b      	add	r3, r1
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d021      	beq.n	801de74 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801de30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801de34:	4915      	ldr	r1, [pc, #84]	; (801de8c <etharp_update_arp_entry+0x148>)
 801de36:	4613      	mov	r3, r2
 801de38:	005b      	lsls	r3, r3, #1
 801de3a:	4413      	add	r3, r2
 801de3c:	00db      	lsls	r3, r3, #3
 801de3e:	440b      	add	r3, r1
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801de44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801de48:	4910      	ldr	r1, [pc, #64]	; (801de8c <etharp_update_arp_entry+0x148>)
 801de4a:	4613      	mov	r3, r2
 801de4c:	005b      	lsls	r3, r3, #1
 801de4e:	4413      	add	r3, r2
 801de50:	00db      	lsls	r3, r3, #3
 801de52:	440b      	add	r3, r1
 801de54:	2200      	movs	r2, #0
 801de56:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801de58:	68fb      	ldr	r3, [r7, #12]
 801de5a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801de5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801de62:	9300      	str	r3, [sp, #0]
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	6939      	ldr	r1, [r7, #16]
 801de68:	68f8      	ldr	r0, [r7, #12]
 801de6a:	f002 f82b 	bl	801fec4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801de6e:	6938      	ldr	r0, [r7, #16]
 801de70:	f7fe fc8c 	bl	801c78c <pbuf_free>
  }
  return ERR_OK;
 801de74:	2300      	movs	r3, #0
}
 801de76:	4618      	mov	r0, r3
 801de78:	3718      	adds	r7, #24
 801de7a:	46bd      	mov	sp, r7
 801de7c:	bd80      	pop	{r7, pc}
 801de7e:	bf00      	nop
 801de80:	08025e34 	.word	0x08025e34
 801de84:	08025f2c 	.word	0x08025f2c
 801de88:	08025eac 	.word	0x08025eac
 801de8c:	200131d4 	.word	0x200131d4

0801de90 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b084      	sub	sp, #16
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801de98:	2300      	movs	r3, #0
 801de9a:	60fb      	str	r3, [r7, #12]
 801de9c:	e01e      	b.n	801dedc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801de9e:	4913      	ldr	r1, [pc, #76]	; (801deec <etharp_cleanup_netif+0x5c>)
 801dea0:	68fa      	ldr	r2, [r7, #12]
 801dea2:	4613      	mov	r3, r2
 801dea4:	005b      	lsls	r3, r3, #1
 801dea6:	4413      	add	r3, r2
 801dea8:	00db      	lsls	r3, r3, #3
 801deaa:	440b      	add	r3, r1
 801deac:	3314      	adds	r3, #20
 801deae:	781b      	ldrb	r3, [r3, #0]
 801deb0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801deb2:	7afb      	ldrb	r3, [r7, #11]
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	d00e      	beq.n	801ded6 <etharp_cleanup_netif+0x46>
 801deb8:	490c      	ldr	r1, [pc, #48]	; (801deec <etharp_cleanup_netif+0x5c>)
 801deba:	68fa      	ldr	r2, [r7, #12]
 801debc:	4613      	mov	r3, r2
 801debe:	005b      	lsls	r3, r3, #1
 801dec0:	4413      	add	r3, r2
 801dec2:	00db      	lsls	r3, r3, #3
 801dec4:	440b      	add	r3, r1
 801dec6:	3308      	adds	r3, #8
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	687a      	ldr	r2, [r7, #4]
 801decc:	429a      	cmp	r2, r3
 801dece:	d102      	bne.n	801ded6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801ded0:	68f8      	ldr	r0, [r7, #12]
 801ded2:	f7ff fce5 	bl	801d8a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	3301      	adds	r3, #1
 801deda:	60fb      	str	r3, [r7, #12]
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	2b31      	cmp	r3, #49	; 0x31
 801dee0:	dddd      	ble.n	801de9e <etharp_cleanup_netif+0xe>
    }
  }
}
 801dee2:	bf00      	nop
 801dee4:	bf00      	nop
 801dee6:	3710      	adds	r7, #16
 801dee8:	46bd      	mov	sp, r7
 801deea:	bd80      	pop	{r7, pc}
 801deec:	200131d4 	.word	0x200131d4

0801def0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801def0:	b5b0      	push	{r4, r5, r7, lr}
 801def2:	b08a      	sub	sp, #40	; 0x28
 801def4:	af04      	add	r7, sp, #16
 801def6:	6078      	str	r0, [r7, #4]
 801def8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801defa:	683b      	ldr	r3, [r7, #0]
 801defc:	2b00      	cmp	r3, #0
 801defe:	d107      	bne.n	801df10 <etharp_input+0x20>
 801df00:	4b3d      	ldr	r3, [pc, #244]	; (801dff8 <etharp_input+0x108>)
 801df02:	f240 228a 	movw	r2, #650	; 0x28a
 801df06:	493d      	ldr	r1, [pc, #244]	; (801dffc <etharp_input+0x10c>)
 801df08:	483d      	ldr	r0, [pc, #244]	; (801e000 <etharp_input+0x110>)
 801df0a:	f002 f977 	bl	80201fc <iprintf>
 801df0e:	e06f      	b.n	801dff0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	685b      	ldr	r3, [r3, #4]
 801df14:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801df16:	693b      	ldr	r3, [r7, #16]
 801df18:	881b      	ldrh	r3, [r3, #0]
 801df1a:	b29b      	uxth	r3, r3
 801df1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801df20:	d10c      	bne.n	801df3c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801df22:	693b      	ldr	r3, [r7, #16]
 801df24:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801df26:	2b06      	cmp	r3, #6
 801df28:	d108      	bne.n	801df3c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801df2a:	693b      	ldr	r3, [r7, #16]
 801df2c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801df2e:	2b04      	cmp	r3, #4
 801df30:	d104      	bne.n	801df3c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801df32:	693b      	ldr	r3, [r7, #16]
 801df34:	885b      	ldrh	r3, [r3, #2]
 801df36:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801df38:	2b08      	cmp	r3, #8
 801df3a:	d003      	beq.n	801df44 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801df3c:	6878      	ldr	r0, [r7, #4]
 801df3e:	f7fe fc25 	bl	801c78c <pbuf_free>
    return;
 801df42:	e055      	b.n	801dff0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801df44:	693b      	ldr	r3, [r7, #16]
 801df46:	330e      	adds	r3, #14
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801df4c:	693b      	ldr	r3, [r7, #16]
 801df4e:	3318      	adds	r3, #24
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801df54:	683b      	ldr	r3, [r7, #0]
 801df56:	3304      	adds	r3, #4
 801df58:	681b      	ldr	r3, [r3, #0]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d102      	bne.n	801df64 <etharp_input+0x74>
    for_us = 0;
 801df5e:	2300      	movs	r3, #0
 801df60:	75fb      	strb	r3, [r7, #23]
 801df62:	e009      	b.n	801df78 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801df64:	68ba      	ldr	r2, [r7, #8]
 801df66:	683b      	ldr	r3, [r7, #0]
 801df68:	3304      	adds	r3, #4
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	429a      	cmp	r2, r3
 801df6e:	bf0c      	ite	eq
 801df70:	2301      	moveq	r3, #1
 801df72:	2300      	movne	r3, #0
 801df74:	b2db      	uxtb	r3, r3
 801df76:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801df78:	693b      	ldr	r3, [r7, #16]
 801df7a:	f103 0208 	add.w	r2, r3, #8
 801df7e:	7dfb      	ldrb	r3, [r7, #23]
 801df80:	2b00      	cmp	r3, #0
 801df82:	d001      	beq.n	801df88 <etharp_input+0x98>
 801df84:	2301      	movs	r3, #1
 801df86:	e000      	b.n	801df8a <etharp_input+0x9a>
 801df88:	2302      	movs	r3, #2
 801df8a:	f107 010c 	add.w	r1, r7, #12
 801df8e:	6838      	ldr	r0, [r7, #0]
 801df90:	f7ff fed8 	bl	801dd44 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801df94:	693b      	ldr	r3, [r7, #16]
 801df96:	88db      	ldrh	r3, [r3, #6]
 801df98:	b29b      	uxth	r3, r3
 801df9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801df9e:	d003      	beq.n	801dfa8 <etharp_input+0xb8>
 801dfa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dfa4:	d01e      	beq.n	801dfe4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801dfa6:	e020      	b.n	801dfea <etharp_input+0xfa>
      if (for_us) {
 801dfa8:	7dfb      	ldrb	r3, [r7, #23]
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	d01c      	beq.n	801dfe8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801dfae:	683b      	ldr	r3, [r7, #0]
 801dfb0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801dfb4:	693b      	ldr	r3, [r7, #16]
 801dfb6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801dfba:	683b      	ldr	r3, [r7, #0]
 801dfbc:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801dfc0:	683b      	ldr	r3, [r7, #0]
 801dfc2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801dfc4:	693a      	ldr	r2, [r7, #16]
 801dfc6:	3208      	adds	r2, #8
        etharp_raw(netif,
 801dfc8:	2102      	movs	r1, #2
 801dfca:	9103      	str	r1, [sp, #12]
 801dfcc:	f107 010c 	add.w	r1, r7, #12
 801dfd0:	9102      	str	r1, [sp, #8]
 801dfd2:	9201      	str	r2, [sp, #4]
 801dfd4:	9300      	str	r3, [sp, #0]
 801dfd6:	462b      	mov	r3, r5
 801dfd8:	4622      	mov	r2, r4
 801dfda:	4601      	mov	r1, r0
 801dfdc:	6838      	ldr	r0, [r7, #0]
 801dfde:	f000 faeb 	bl	801e5b8 <etharp_raw>
      break;
 801dfe2:	e001      	b.n	801dfe8 <etharp_input+0xf8>
      break;
 801dfe4:	bf00      	nop
 801dfe6:	e000      	b.n	801dfea <etharp_input+0xfa>
      break;
 801dfe8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801dfea:	6878      	ldr	r0, [r7, #4]
 801dfec:	f7fe fbce 	bl	801c78c <pbuf_free>
}
 801dff0:	3718      	adds	r7, #24
 801dff2:	46bd      	mov	sp, r7
 801dff4:	bdb0      	pop	{r4, r5, r7, pc}
 801dff6:	bf00      	nop
 801dff8:	08025e34 	.word	0x08025e34
 801dffc:	08025f84 	.word	0x08025f84
 801e000:	08025eac 	.word	0x08025eac

0801e004 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801e004:	b580      	push	{r7, lr}
 801e006:	b086      	sub	sp, #24
 801e008:	af02      	add	r7, sp, #8
 801e00a:	60f8      	str	r0, [r7, #12]
 801e00c:	60b9      	str	r1, [r7, #8]
 801e00e:	4613      	mov	r3, r2
 801e010:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e012:	79fa      	ldrb	r2, [r7, #7]
 801e014:	4944      	ldr	r1, [pc, #272]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e016:	4613      	mov	r3, r2
 801e018:	005b      	lsls	r3, r3, #1
 801e01a:	4413      	add	r3, r2
 801e01c:	00db      	lsls	r3, r3, #3
 801e01e:	440b      	add	r3, r1
 801e020:	3314      	adds	r3, #20
 801e022:	781b      	ldrb	r3, [r3, #0]
 801e024:	2b01      	cmp	r3, #1
 801e026:	d806      	bhi.n	801e036 <etharp_output_to_arp_index+0x32>
 801e028:	4b40      	ldr	r3, [pc, #256]	; (801e12c <etharp_output_to_arp_index+0x128>)
 801e02a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801e02e:	4940      	ldr	r1, [pc, #256]	; (801e130 <etharp_output_to_arp_index+0x12c>)
 801e030:	4840      	ldr	r0, [pc, #256]	; (801e134 <etharp_output_to_arp_index+0x130>)
 801e032:	f002 f8e3 	bl	80201fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801e036:	79fa      	ldrb	r2, [r7, #7]
 801e038:	493b      	ldr	r1, [pc, #236]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e03a:	4613      	mov	r3, r2
 801e03c:	005b      	lsls	r3, r3, #1
 801e03e:	4413      	add	r3, r2
 801e040:	00db      	lsls	r3, r3, #3
 801e042:	440b      	add	r3, r1
 801e044:	3314      	adds	r3, #20
 801e046:	781b      	ldrb	r3, [r3, #0]
 801e048:	2b02      	cmp	r3, #2
 801e04a:	d153      	bne.n	801e0f4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801e04c:	79fa      	ldrb	r2, [r7, #7]
 801e04e:	4936      	ldr	r1, [pc, #216]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e050:	4613      	mov	r3, r2
 801e052:	005b      	lsls	r3, r3, #1
 801e054:	4413      	add	r3, r2
 801e056:	00db      	lsls	r3, r3, #3
 801e058:	440b      	add	r3, r1
 801e05a:	3312      	adds	r3, #18
 801e05c:	881b      	ldrh	r3, [r3, #0]
 801e05e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801e062:	d919      	bls.n	801e098 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e064:	79fa      	ldrb	r2, [r7, #7]
 801e066:	4613      	mov	r3, r2
 801e068:	005b      	lsls	r3, r3, #1
 801e06a:	4413      	add	r3, r2
 801e06c:	00db      	lsls	r3, r3, #3
 801e06e:	4a2e      	ldr	r2, [pc, #184]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e070:	4413      	add	r3, r2
 801e072:	3304      	adds	r3, #4
 801e074:	4619      	mov	r1, r3
 801e076:	68f8      	ldr	r0, [r7, #12]
 801e078:	f000 fb4c 	bl	801e714 <etharp_request>
 801e07c:	4603      	mov	r3, r0
 801e07e:	2b00      	cmp	r3, #0
 801e080:	d138      	bne.n	801e0f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e082:	79fa      	ldrb	r2, [r7, #7]
 801e084:	4928      	ldr	r1, [pc, #160]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e086:	4613      	mov	r3, r2
 801e088:	005b      	lsls	r3, r3, #1
 801e08a:	4413      	add	r3, r2
 801e08c:	00db      	lsls	r3, r3, #3
 801e08e:	440b      	add	r3, r1
 801e090:	3314      	adds	r3, #20
 801e092:	2203      	movs	r2, #3
 801e094:	701a      	strb	r2, [r3, #0]
 801e096:	e02d      	b.n	801e0f4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801e098:	79fa      	ldrb	r2, [r7, #7]
 801e09a:	4923      	ldr	r1, [pc, #140]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e09c:	4613      	mov	r3, r2
 801e09e:	005b      	lsls	r3, r3, #1
 801e0a0:	4413      	add	r3, r2
 801e0a2:	00db      	lsls	r3, r3, #3
 801e0a4:	440b      	add	r3, r1
 801e0a6:	3312      	adds	r3, #18
 801e0a8:	881b      	ldrh	r3, [r3, #0]
 801e0aa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801e0ae:	d321      	bcc.n	801e0f4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e0b0:	79fa      	ldrb	r2, [r7, #7]
 801e0b2:	4613      	mov	r3, r2
 801e0b4:	005b      	lsls	r3, r3, #1
 801e0b6:	4413      	add	r3, r2
 801e0b8:	00db      	lsls	r3, r3, #3
 801e0ba:	4a1b      	ldr	r2, [pc, #108]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e0bc:	4413      	add	r3, r2
 801e0be:	1d19      	adds	r1, r3, #4
 801e0c0:	79fa      	ldrb	r2, [r7, #7]
 801e0c2:	4613      	mov	r3, r2
 801e0c4:	005b      	lsls	r3, r3, #1
 801e0c6:	4413      	add	r3, r2
 801e0c8:	00db      	lsls	r3, r3, #3
 801e0ca:	3308      	adds	r3, #8
 801e0cc:	4a16      	ldr	r2, [pc, #88]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e0ce:	4413      	add	r3, r2
 801e0d0:	3304      	adds	r3, #4
 801e0d2:	461a      	mov	r2, r3
 801e0d4:	68f8      	ldr	r0, [r7, #12]
 801e0d6:	f000 fafb 	bl	801e6d0 <etharp_request_dst>
 801e0da:	4603      	mov	r3, r0
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d109      	bne.n	801e0f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e0e0:	79fa      	ldrb	r2, [r7, #7]
 801e0e2:	4911      	ldr	r1, [pc, #68]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e0e4:	4613      	mov	r3, r2
 801e0e6:	005b      	lsls	r3, r3, #1
 801e0e8:	4413      	add	r3, r2
 801e0ea:	00db      	lsls	r3, r3, #3
 801e0ec:	440b      	add	r3, r1
 801e0ee:	3314      	adds	r3, #20
 801e0f0:	2203      	movs	r2, #3
 801e0f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801e0fa:	79fa      	ldrb	r2, [r7, #7]
 801e0fc:	4613      	mov	r3, r2
 801e0fe:	005b      	lsls	r3, r3, #1
 801e100:	4413      	add	r3, r2
 801e102:	00db      	lsls	r3, r3, #3
 801e104:	3308      	adds	r3, #8
 801e106:	4a08      	ldr	r2, [pc, #32]	; (801e128 <etharp_output_to_arp_index+0x124>)
 801e108:	4413      	add	r3, r2
 801e10a:	3304      	adds	r3, #4
 801e10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e110:	9200      	str	r2, [sp, #0]
 801e112:	460a      	mov	r2, r1
 801e114:	68b9      	ldr	r1, [r7, #8]
 801e116:	68f8      	ldr	r0, [r7, #12]
 801e118:	f001 fed4 	bl	801fec4 <ethernet_output>
 801e11c:	4603      	mov	r3, r0
}
 801e11e:	4618      	mov	r0, r3
 801e120:	3710      	adds	r7, #16
 801e122:	46bd      	mov	sp, r7
 801e124:	bd80      	pop	{r7, pc}
 801e126:	bf00      	nop
 801e128:	200131d4 	.word	0x200131d4
 801e12c:	08025e34 	.word	0x08025e34
 801e130:	08025fa4 	.word	0x08025fa4
 801e134:	08025eac 	.word	0x08025eac

0801e138 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801e138:	b580      	push	{r7, lr}
 801e13a:	b08a      	sub	sp, #40	; 0x28
 801e13c:	af02      	add	r7, sp, #8
 801e13e:	60f8      	str	r0, [r7, #12]
 801e140:	60b9      	str	r1, [r7, #8]
 801e142:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e148:	68fb      	ldr	r3, [r7, #12]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	d106      	bne.n	801e15c <etharp_output+0x24>
 801e14e:	4b73      	ldr	r3, [pc, #460]	; (801e31c <etharp_output+0x1e4>)
 801e150:	f240 321e 	movw	r2, #798	; 0x31e
 801e154:	4972      	ldr	r1, [pc, #456]	; (801e320 <etharp_output+0x1e8>)
 801e156:	4873      	ldr	r0, [pc, #460]	; (801e324 <etharp_output+0x1ec>)
 801e158:	f002 f850 	bl	80201fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801e15c:	68bb      	ldr	r3, [r7, #8]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d106      	bne.n	801e170 <etharp_output+0x38>
 801e162:	4b6e      	ldr	r3, [pc, #440]	; (801e31c <etharp_output+0x1e4>)
 801e164:	f240 321f 	movw	r2, #799	; 0x31f
 801e168:	496f      	ldr	r1, [pc, #444]	; (801e328 <etharp_output+0x1f0>)
 801e16a:	486e      	ldr	r0, [pc, #440]	; (801e324 <etharp_output+0x1ec>)
 801e16c:	f002 f846 	bl	80201fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d106      	bne.n	801e184 <etharp_output+0x4c>
 801e176:	4b69      	ldr	r3, [pc, #420]	; (801e31c <etharp_output+0x1e4>)
 801e178:	f44f 7248 	mov.w	r2, #800	; 0x320
 801e17c:	496b      	ldr	r1, [pc, #428]	; (801e32c <etharp_output+0x1f4>)
 801e17e:	4869      	ldr	r0, [pc, #420]	; (801e324 <etharp_output+0x1ec>)
 801e180:	f002 f83c 	bl	80201fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	68f9      	ldr	r1, [r7, #12]
 801e18a:	4618      	mov	r0, r3
 801e18c:	f000 fefc 	bl	801ef88 <ip4_addr_isbroadcast_u32>
 801e190:	4603      	mov	r3, r0
 801e192:	2b00      	cmp	r3, #0
 801e194:	d002      	beq.n	801e19c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801e196:	4b66      	ldr	r3, [pc, #408]	; (801e330 <etharp_output+0x1f8>)
 801e198:	61fb      	str	r3, [r7, #28]
 801e19a:	e0af      	b.n	801e2fc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e1a4:	2be0      	cmp	r3, #224	; 0xe0
 801e1a6:	d118      	bne.n	801e1da <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801e1a8:	2301      	movs	r3, #1
 801e1aa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801e1b0:	235e      	movs	r3, #94	; 0x5e
 801e1b2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	3301      	adds	r3, #1
 801e1b8:	781b      	ldrb	r3, [r3, #0]
 801e1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e1be:	b2db      	uxtb	r3, r3
 801e1c0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	3302      	adds	r3, #2
 801e1c6:	781b      	ldrb	r3, [r3, #0]
 801e1c8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	3303      	adds	r3, #3
 801e1ce:	781b      	ldrb	r3, [r3, #0]
 801e1d0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801e1d2:	f107 0310 	add.w	r3, r7, #16
 801e1d6:	61fb      	str	r3, [r7, #28]
 801e1d8:	e090      	b.n	801e2fc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	681a      	ldr	r2, [r3, #0]
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	3304      	adds	r3, #4
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	405a      	eors	r2, r3
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	3308      	adds	r3, #8
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	4013      	ands	r3, r2
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d012      	beq.n	801e218 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801e1f8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801e1fc:	4293      	cmp	r3, r2
 801e1fe:	d00b      	beq.n	801e218 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	330c      	adds	r3, #12
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	2b00      	cmp	r3, #0
 801e208:	d003      	beq.n	801e212 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	330c      	adds	r3, #12
 801e20e:	61bb      	str	r3, [r7, #24]
 801e210:	e002      	b.n	801e218 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801e212:	f06f 0303 	mvn.w	r3, #3
 801e216:	e07d      	b.n	801e314 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e218:	4b46      	ldr	r3, [pc, #280]	; (801e334 <etharp_output+0x1fc>)
 801e21a:	781b      	ldrb	r3, [r3, #0]
 801e21c:	4619      	mov	r1, r3
 801e21e:	4a46      	ldr	r2, [pc, #280]	; (801e338 <etharp_output+0x200>)
 801e220:	460b      	mov	r3, r1
 801e222:	005b      	lsls	r3, r3, #1
 801e224:	440b      	add	r3, r1
 801e226:	00db      	lsls	r3, r3, #3
 801e228:	4413      	add	r3, r2
 801e22a:	3314      	adds	r3, #20
 801e22c:	781b      	ldrb	r3, [r3, #0]
 801e22e:	2b01      	cmp	r3, #1
 801e230:	d925      	bls.n	801e27e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801e232:	4b40      	ldr	r3, [pc, #256]	; (801e334 <etharp_output+0x1fc>)
 801e234:	781b      	ldrb	r3, [r3, #0]
 801e236:	4619      	mov	r1, r3
 801e238:	4a3f      	ldr	r2, [pc, #252]	; (801e338 <etharp_output+0x200>)
 801e23a:	460b      	mov	r3, r1
 801e23c:	005b      	lsls	r3, r3, #1
 801e23e:	440b      	add	r3, r1
 801e240:	00db      	lsls	r3, r3, #3
 801e242:	4413      	add	r3, r2
 801e244:	3308      	adds	r3, #8
 801e246:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801e248:	68fa      	ldr	r2, [r7, #12]
 801e24a:	429a      	cmp	r2, r3
 801e24c:	d117      	bne.n	801e27e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801e24e:	69bb      	ldr	r3, [r7, #24]
 801e250:	681a      	ldr	r2, [r3, #0]
 801e252:	4b38      	ldr	r3, [pc, #224]	; (801e334 <etharp_output+0x1fc>)
 801e254:	781b      	ldrb	r3, [r3, #0]
 801e256:	4618      	mov	r0, r3
 801e258:	4937      	ldr	r1, [pc, #220]	; (801e338 <etharp_output+0x200>)
 801e25a:	4603      	mov	r3, r0
 801e25c:	005b      	lsls	r3, r3, #1
 801e25e:	4403      	add	r3, r0
 801e260:	00db      	lsls	r3, r3, #3
 801e262:	440b      	add	r3, r1
 801e264:	3304      	adds	r3, #4
 801e266:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801e268:	429a      	cmp	r2, r3
 801e26a:	d108      	bne.n	801e27e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801e26c:	4b31      	ldr	r3, [pc, #196]	; (801e334 <etharp_output+0x1fc>)
 801e26e:	781b      	ldrb	r3, [r3, #0]
 801e270:	461a      	mov	r2, r3
 801e272:	68b9      	ldr	r1, [r7, #8]
 801e274:	68f8      	ldr	r0, [r7, #12]
 801e276:	f7ff fec5 	bl	801e004 <etharp_output_to_arp_index>
 801e27a:	4603      	mov	r3, r0
 801e27c:	e04a      	b.n	801e314 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e27e:	2300      	movs	r3, #0
 801e280:	75fb      	strb	r3, [r7, #23]
 801e282:	e031      	b.n	801e2e8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e284:	7dfa      	ldrb	r2, [r7, #23]
 801e286:	492c      	ldr	r1, [pc, #176]	; (801e338 <etharp_output+0x200>)
 801e288:	4613      	mov	r3, r2
 801e28a:	005b      	lsls	r3, r3, #1
 801e28c:	4413      	add	r3, r2
 801e28e:	00db      	lsls	r3, r3, #3
 801e290:	440b      	add	r3, r1
 801e292:	3314      	adds	r3, #20
 801e294:	781b      	ldrb	r3, [r3, #0]
 801e296:	2b01      	cmp	r3, #1
 801e298:	d923      	bls.n	801e2e2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801e29a:	7dfa      	ldrb	r2, [r7, #23]
 801e29c:	4926      	ldr	r1, [pc, #152]	; (801e338 <etharp_output+0x200>)
 801e29e:	4613      	mov	r3, r2
 801e2a0:	005b      	lsls	r3, r3, #1
 801e2a2:	4413      	add	r3, r2
 801e2a4:	00db      	lsls	r3, r3, #3
 801e2a6:	440b      	add	r3, r1
 801e2a8:	3308      	adds	r3, #8
 801e2aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801e2ac:	68fa      	ldr	r2, [r7, #12]
 801e2ae:	429a      	cmp	r2, r3
 801e2b0:	d117      	bne.n	801e2e2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801e2b2:	69bb      	ldr	r3, [r7, #24]
 801e2b4:	6819      	ldr	r1, [r3, #0]
 801e2b6:	7dfa      	ldrb	r2, [r7, #23]
 801e2b8:	481f      	ldr	r0, [pc, #124]	; (801e338 <etharp_output+0x200>)
 801e2ba:	4613      	mov	r3, r2
 801e2bc:	005b      	lsls	r3, r3, #1
 801e2be:	4413      	add	r3, r2
 801e2c0:	00db      	lsls	r3, r3, #3
 801e2c2:	4403      	add	r3, r0
 801e2c4:	3304      	adds	r3, #4
 801e2c6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801e2c8:	4299      	cmp	r1, r3
 801e2ca:	d10a      	bne.n	801e2e2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801e2cc:	4a19      	ldr	r2, [pc, #100]	; (801e334 <etharp_output+0x1fc>)
 801e2ce:	7dfb      	ldrb	r3, [r7, #23]
 801e2d0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801e2d2:	7dfb      	ldrb	r3, [r7, #23]
 801e2d4:	461a      	mov	r2, r3
 801e2d6:	68b9      	ldr	r1, [r7, #8]
 801e2d8:	68f8      	ldr	r0, [r7, #12]
 801e2da:	f7ff fe93 	bl	801e004 <etharp_output_to_arp_index>
 801e2de:	4603      	mov	r3, r0
 801e2e0:	e018      	b.n	801e314 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801e2e2:	7dfb      	ldrb	r3, [r7, #23]
 801e2e4:	3301      	adds	r3, #1
 801e2e6:	75fb      	strb	r3, [r7, #23]
 801e2e8:	7dfb      	ldrb	r3, [r7, #23]
 801e2ea:	2b31      	cmp	r3, #49	; 0x31
 801e2ec:	d9ca      	bls.n	801e284 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801e2ee:	68ba      	ldr	r2, [r7, #8]
 801e2f0:	69b9      	ldr	r1, [r7, #24]
 801e2f2:	68f8      	ldr	r0, [r7, #12]
 801e2f4:	f000 f822 	bl	801e33c <etharp_query>
 801e2f8:	4603      	mov	r3, r0
 801e2fa:	e00b      	b.n	801e314 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801e302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e306:	9300      	str	r3, [sp, #0]
 801e308:	69fb      	ldr	r3, [r7, #28]
 801e30a:	68b9      	ldr	r1, [r7, #8]
 801e30c:	68f8      	ldr	r0, [r7, #12]
 801e30e:	f001 fdd9 	bl	801fec4 <ethernet_output>
 801e312:	4603      	mov	r3, r0
}
 801e314:	4618      	mov	r0, r3
 801e316:	3720      	adds	r7, #32
 801e318:	46bd      	mov	sp, r7
 801e31a:	bd80      	pop	{r7, pc}
 801e31c:	08025e34 	.word	0x08025e34
 801e320:	08025f84 	.word	0x08025f84
 801e324:	08025eac 	.word	0x08025eac
 801e328:	08025fd4 	.word	0x08025fd4
 801e32c:	08025f74 	.word	0x08025f74
 801e330:	080269b4 	.word	0x080269b4
 801e334:	20013684 	.word	0x20013684
 801e338:	200131d4 	.word	0x200131d4

0801e33c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801e33c:	b580      	push	{r7, lr}
 801e33e:	b08c      	sub	sp, #48	; 0x30
 801e340:	af02      	add	r7, sp, #8
 801e342:	60f8      	str	r0, [r7, #12]
 801e344:	60b9      	str	r1, [r7, #8]
 801e346:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	332a      	adds	r3, #42	; 0x2a
 801e34c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801e34e:	23ff      	movs	r3, #255	; 0xff
 801e350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801e354:	2300      	movs	r3, #0
 801e356:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e358:	68bb      	ldr	r3, [r7, #8]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	68f9      	ldr	r1, [r7, #12]
 801e35e:	4618      	mov	r0, r3
 801e360:	f000 fe12 	bl	801ef88 <ip4_addr_isbroadcast_u32>
 801e364:	4603      	mov	r3, r0
 801e366:	2b00      	cmp	r3, #0
 801e368:	d10c      	bne.n	801e384 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e36a:	68bb      	ldr	r3, [r7, #8]
 801e36c:	681b      	ldr	r3, [r3, #0]
 801e36e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e372:	2be0      	cmp	r3, #224	; 0xe0
 801e374:	d006      	beq.n	801e384 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e376:	68bb      	ldr	r3, [r7, #8]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d003      	beq.n	801e384 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801e37c:	68bb      	ldr	r3, [r7, #8]
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	2b00      	cmp	r3, #0
 801e382:	d102      	bne.n	801e38a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e384:	f06f 030f 	mvn.w	r3, #15
 801e388:	e101      	b.n	801e58e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801e38a:	68fa      	ldr	r2, [r7, #12]
 801e38c:	2101      	movs	r1, #1
 801e38e:	68b8      	ldr	r0, [r7, #8]
 801e390:	f7ff fb60 	bl	801da54 <etharp_find_entry>
 801e394:	4603      	mov	r3, r0
 801e396:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801e398:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	da02      	bge.n	801e3a6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801e3a0:	8a7b      	ldrh	r3, [r7, #18]
 801e3a2:	b25b      	sxtb	r3, r3
 801e3a4:	e0f3      	b.n	801e58e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e3a6:	8a7b      	ldrh	r3, [r7, #18]
 801e3a8:	2b7e      	cmp	r3, #126	; 0x7e
 801e3aa:	d906      	bls.n	801e3ba <etharp_query+0x7e>
 801e3ac:	4b7a      	ldr	r3, [pc, #488]	; (801e598 <etharp_query+0x25c>)
 801e3ae:	f240 32c1 	movw	r2, #961	; 0x3c1
 801e3b2:	497a      	ldr	r1, [pc, #488]	; (801e59c <etharp_query+0x260>)
 801e3b4:	487a      	ldr	r0, [pc, #488]	; (801e5a0 <etharp_query+0x264>)
 801e3b6:	f001 ff21 	bl	80201fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801e3ba:	8a7b      	ldrh	r3, [r7, #18]
 801e3bc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e3be:	7c7a      	ldrb	r2, [r7, #17]
 801e3c0:	4978      	ldr	r1, [pc, #480]	; (801e5a4 <etharp_query+0x268>)
 801e3c2:	4613      	mov	r3, r2
 801e3c4:	005b      	lsls	r3, r3, #1
 801e3c6:	4413      	add	r3, r2
 801e3c8:	00db      	lsls	r3, r3, #3
 801e3ca:	440b      	add	r3, r1
 801e3cc:	3314      	adds	r3, #20
 801e3ce:	781b      	ldrb	r3, [r3, #0]
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d115      	bne.n	801e400 <etharp_query+0xc4>
    is_new_entry = 1;
 801e3d4:	2301      	movs	r3, #1
 801e3d6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e3d8:	7c7a      	ldrb	r2, [r7, #17]
 801e3da:	4972      	ldr	r1, [pc, #456]	; (801e5a4 <etharp_query+0x268>)
 801e3dc:	4613      	mov	r3, r2
 801e3de:	005b      	lsls	r3, r3, #1
 801e3e0:	4413      	add	r3, r2
 801e3e2:	00db      	lsls	r3, r3, #3
 801e3e4:	440b      	add	r3, r1
 801e3e6:	3314      	adds	r3, #20
 801e3e8:	2201      	movs	r2, #1
 801e3ea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801e3ec:	7c7a      	ldrb	r2, [r7, #17]
 801e3ee:	496d      	ldr	r1, [pc, #436]	; (801e5a4 <etharp_query+0x268>)
 801e3f0:	4613      	mov	r3, r2
 801e3f2:	005b      	lsls	r3, r3, #1
 801e3f4:	4413      	add	r3, r2
 801e3f6:	00db      	lsls	r3, r3, #3
 801e3f8:	440b      	add	r3, r1
 801e3fa:	3308      	adds	r3, #8
 801e3fc:	68fa      	ldr	r2, [r7, #12]
 801e3fe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801e400:	7c7a      	ldrb	r2, [r7, #17]
 801e402:	4968      	ldr	r1, [pc, #416]	; (801e5a4 <etharp_query+0x268>)
 801e404:	4613      	mov	r3, r2
 801e406:	005b      	lsls	r3, r3, #1
 801e408:	4413      	add	r3, r2
 801e40a:	00db      	lsls	r3, r3, #3
 801e40c:	440b      	add	r3, r1
 801e40e:	3314      	adds	r3, #20
 801e410:	781b      	ldrb	r3, [r3, #0]
 801e412:	2b01      	cmp	r3, #1
 801e414:	d011      	beq.n	801e43a <etharp_query+0xfe>
 801e416:	7c7a      	ldrb	r2, [r7, #17]
 801e418:	4962      	ldr	r1, [pc, #392]	; (801e5a4 <etharp_query+0x268>)
 801e41a:	4613      	mov	r3, r2
 801e41c:	005b      	lsls	r3, r3, #1
 801e41e:	4413      	add	r3, r2
 801e420:	00db      	lsls	r3, r3, #3
 801e422:	440b      	add	r3, r1
 801e424:	3314      	adds	r3, #20
 801e426:	781b      	ldrb	r3, [r3, #0]
 801e428:	2b01      	cmp	r3, #1
 801e42a:	d806      	bhi.n	801e43a <etharp_query+0xfe>
 801e42c:	4b5a      	ldr	r3, [pc, #360]	; (801e598 <etharp_query+0x25c>)
 801e42e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801e432:	495d      	ldr	r1, [pc, #372]	; (801e5a8 <etharp_query+0x26c>)
 801e434:	485a      	ldr	r0, [pc, #360]	; (801e5a0 <etharp_query+0x264>)
 801e436:	f001 fee1 	bl	80201fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801e43a:	6a3b      	ldr	r3, [r7, #32]
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d102      	bne.n	801e446 <etharp_query+0x10a>
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	2b00      	cmp	r3, #0
 801e444:	d10c      	bne.n	801e460 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801e446:	68b9      	ldr	r1, [r7, #8]
 801e448:	68f8      	ldr	r0, [r7, #12]
 801e44a:	f000 f963 	bl	801e714 <etharp_request>
 801e44e:	4603      	mov	r3, r0
 801e450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	2b00      	cmp	r3, #0
 801e458:	d102      	bne.n	801e460 <etharp_query+0x124>
      return result;
 801e45a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e45e:	e096      	b.n	801e58e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	2b00      	cmp	r3, #0
 801e464:	d106      	bne.n	801e474 <etharp_query+0x138>
 801e466:	4b4c      	ldr	r3, [pc, #304]	; (801e598 <etharp_query+0x25c>)
 801e468:	f240 32e1 	movw	r2, #993	; 0x3e1
 801e46c:	494f      	ldr	r1, [pc, #316]	; (801e5ac <etharp_query+0x270>)
 801e46e:	484c      	ldr	r0, [pc, #304]	; (801e5a0 <etharp_query+0x264>)
 801e470:	f001 fec4 	bl	80201fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e474:	7c7a      	ldrb	r2, [r7, #17]
 801e476:	494b      	ldr	r1, [pc, #300]	; (801e5a4 <etharp_query+0x268>)
 801e478:	4613      	mov	r3, r2
 801e47a:	005b      	lsls	r3, r3, #1
 801e47c:	4413      	add	r3, r2
 801e47e:	00db      	lsls	r3, r3, #3
 801e480:	440b      	add	r3, r1
 801e482:	3314      	adds	r3, #20
 801e484:	781b      	ldrb	r3, [r3, #0]
 801e486:	2b01      	cmp	r3, #1
 801e488:	d917      	bls.n	801e4ba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801e48a:	4a49      	ldr	r2, [pc, #292]	; (801e5b0 <etharp_query+0x274>)
 801e48c:	7c7b      	ldrb	r3, [r7, #17]
 801e48e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e490:	7c7a      	ldrb	r2, [r7, #17]
 801e492:	4613      	mov	r3, r2
 801e494:	005b      	lsls	r3, r3, #1
 801e496:	4413      	add	r3, r2
 801e498:	00db      	lsls	r3, r3, #3
 801e49a:	3308      	adds	r3, #8
 801e49c:	4a41      	ldr	r2, [pc, #260]	; (801e5a4 <etharp_query+0x268>)
 801e49e:	4413      	add	r3, r2
 801e4a0:	3304      	adds	r3, #4
 801e4a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e4a6:	9200      	str	r2, [sp, #0]
 801e4a8:	697a      	ldr	r2, [r7, #20]
 801e4aa:	6879      	ldr	r1, [r7, #4]
 801e4ac:	68f8      	ldr	r0, [r7, #12]
 801e4ae:	f001 fd09 	bl	801fec4 <ethernet_output>
 801e4b2:	4603      	mov	r3, r0
 801e4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e4b8:	e067      	b.n	801e58a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e4ba:	7c7a      	ldrb	r2, [r7, #17]
 801e4bc:	4939      	ldr	r1, [pc, #228]	; (801e5a4 <etharp_query+0x268>)
 801e4be:	4613      	mov	r3, r2
 801e4c0:	005b      	lsls	r3, r3, #1
 801e4c2:	4413      	add	r3, r2
 801e4c4:	00db      	lsls	r3, r3, #3
 801e4c6:	440b      	add	r3, r1
 801e4c8:	3314      	adds	r3, #20
 801e4ca:	781b      	ldrb	r3, [r3, #0]
 801e4cc:	2b01      	cmp	r3, #1
 801e4ce:	d15c      	bne.n	801e58a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801e4d4:	687b      	ldr	r3, [r7, #4]
 801e4d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e4d8:	e01c      	b.n	801e514 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801e4da:	69fb      	ldr	r3, [r7, #28]
 801e4dc:	895a      	ldrh	r2, [r3, #10]
 801e4de:	69fb      	ldr	r3, [r7, #28]
 801e4e0:	891b      	ldrh	r3, [r3, #8]
 801e4e2:	429a      	cmp	r2, r3
 801e4e4:	d10a      	bne.n	801e4fc <etharp_query+0x1c0>
 801e4e6:	69fb      	ldr	r3, [r7, #28]
 801e4e8:	681b      	ldr	r3, [r3, #0]
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d006      	beq.n	801e4fc <etharp_query+0x1c0>
 801e4ee:	4b2a      	ldr	r3, [pc, #168]	; (801e598 <etharp_query+0x25c>)
 801e4f0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801e4f4:	492f      	ldr	r1, [pc, #188]	; (801e5b4 <etharp_query+0x278>)
 801e4f6:	482a      	ldr	r0, [pc, #168]	; (801e5a0 <etharp_query+0x264>)
 801e4f8:	f001 fe80 	bl	80201fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801e4fc:	69fb      	ldr	r3, [r7, #28]
 801e4fe:	7b1b      	ldrb	r3, [r3, #12]
 801e500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e504:	2b00      	cmp	r3, #0
 801e506:	d002      	beq.n	801e50e <etharp_query+0x1d2>
        copy_needed = 1;
 801e508:	2301      	movs	r3, #1
 801e50a:	61bb      	str	r3, [r7, #24]
        break;
 801e50c:	e005      	b.n	801e51a <etharp_query+0x1de>
      }
      p = p->next;
 801e50e:	69fb      	ldr	r3, [r7, #28]
 801e510:	681b      	ldr	r3, [r3, #0]
 801e512:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e514:	69fb      	ldr	r3, [r7, #28]
 801e516:	2b00      	cmp	r3, #0
 801e518:	d1df      	bne.n	801e4da <etharp_query+0x19e>
    }
    if (copy_needed) {
 801e51a:	69bb      	ldr	r3, [r7, #24]
 801e51c:	2b00      	cmp	r3, #0
 801e51e:	d007      	beq.n	801e530 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801e520:	687a      	ldr	r2, [r7, #4]
 801e522:	f44f 7120 	mov.w	r1, #640	; 0x280
 801e526:	200e      	movs	r0, #14
 801e528:	f7fe fbbc 	bl	801cca4 <pbuf_clone>
 801e52c:	61f8      	str	r0, [r7, #28]
 801e52e:	e004      	b.n	801e53a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801e534:	69f8      	ldr	r0, [r7, #28]
 801e536:	f7fe f9c9 	bl	801c8cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801e53a:	69fb      	ldr	r3, [r7, #28]
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d021      	beq.n	801e584 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801e540:	7c7a      	ldrb	r2, [r7, #17]
 801e542:	4918      	ldr	r1, [pc, #96]	; (801e5a4 <etharp_query+0x268>)
 801e544:	4613      	mov	r3, r2
 801e546:	005b      	lsls	r3, r3, #1
 801e548:	4413      	add	r3, r2
 801e54a:	00db      	lsls	r3, r3, #3
 801e54c:	440b      	add	r3, r1
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	2b00      	cmp	r3, #0
 801e552:	d00a      	beq.n	801e56a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801e554:	7c7a      	ldrb	r2, [r7, #17]
 801e556:	4913      	ldr	r1, [pc, #76]	; (801e5a4 <etharp_query+0x268>)
 801e558:	4613      	mov	r3, r2
 801e55a:	005b      	lsls	r3, r3, #1
 801e55c:	4413      	add	r3, r2
 801e55e:	00db      	lsls	r3, r3, #3
 801e560:	440b      	add	r3, r1
 801e562:	681b      	ldr	r3, [r3, #0]
 801e564:	4618      	mov	r0, r3
 801e566:	f7fe f911 	bl	801c78c <pbuf_free>
      }
      arp_table[i].q = p;
 801e56a:	7c7a      	ldrb	r2, [r7, #17]
 801e56c:	490d      	ldr	r1, [pc, #52]	; (801e5a4 <etharp_query+0x268>)
 801e56e:	4613      	mov	r3, r2
 801e570:	005b      	lsls	r3, r3, #1
 801e572:	4413      	add	r3, r2
 801e574:	00db      	lsls	r3, r3, #3
 801e576:	440b      	add	r3, r1
 801e578:	69fa      	ldr	r2, [r7, #28]
 801e57a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801e57c:	2300      	movs	r3, #0
 801e57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e582:	e002      	b.n	801e58a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801e584:	23ff      	movs	r3, #255	; 0xff
 801e586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801e58a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801e58e:	4618      	mov	r0, r3
 801e590:	3728      	adds	r7, #40	; 0x28
 801e592:	46bd      	mov	sp, r7
 801e594:	bd80      	pop	{r7, pc}
 801e596:	bf00      	nop
 801e598:	08025e34 	.word	0x08025e34
 801e59c:	08025fe0 	.word	0x08025fe0
 801e5a0:	08025eac 	.word	0x08025eac
 801e5a4:	200131d4 	.word	0x200131d4
 801e5a8:	08025ff0 	.word	0x08025ff0
 801e5ac:	08025fd4 	.word	0x08025fd4
 801e5b0:	20013684 	.word	0x20013684
 801e5b4:	08026018 	.word	0x08026018

0801e5b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801e5b8:	b580      	push	{r7, lr}
 801e5ba:	b08a      	sub	sp, #40	; 0x28
 801e5bc:	af02      	add	r7, sp, #8
 801e5be:	60f8      	str	r0, [r7, #12]
 801e5c0:	60b9      	str	r1, [r7, #8]
 801e5c2:	607a      	str	r2, [r7, #4]
 801e5c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801e5c6:	2300      	movs	r3, #0
 801e5c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e5ca:	68fb      	ldr	r3, [r7, #12]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d106      	bne.n	801e5de <etharp_raw+0x26>
 801e5d0:	4b3a      	ldr	r3, [pc, #232]	; (801e6bc <etharp_raw+0x104>)
 801e5d2:	f240 4257 	movw	r2, #1111	; 0x457
 801e5d6:	493a      	ldr	r1, [pc, #232]	; (801e6c0 <etharp_raw+0x108>)
 801e5d8:	483a      	ldr	r0, [pc, #232]	; (801e6c4 <etharp_raw+0x10c>)
 801e5da:	f001 fe0f 	bl	80201fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801e5de:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e5e2:	211c      	movs	r1, #28
 801e5e4:	200e      	movs	r0, #14
 801e5e6:	f7fd fdef 	bl	801c1c8 <pbuf_alloc>
 801e5ea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801e5ec:	69bb      	ldr	r3, [r7, #24]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d102      	bne.n	801e5f8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801e5f2:	f04f 33ff 	mov.w	r3, #4294967295
 801e5f6:	e05d      	b.n	801e6b4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801e5f8:	69bb      	ldr	r3, [r7, #24]
 801e5fa:	895b      	ldrh	r3, [r3, #10]
 801e5fc:	2b1b      	cmp	r3, #27
 801e5fe:	d806      	bhi.n	801e60e <etharp_raw+0x56>
 801e600:	4b2e      	ldr	r3, [pc, #184]	; (801e6bc <etharp_raw+0x104>)
 801e602:	f240 4262 	movw	r2, #1122	; 0x462
 801e606:	4930      	ldr	r1, [pc, #192]	; (801e6c8 <etharp_raw+0x110>)
 801e608:	482e      	ldr	r0, [pc, #184]	; (801e6c4 <etharp_raw+0x10c>)
 801e60a:	f001 fdf7 	bl	80201fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801e60e:	69bb      	ldr	r3, [r7, #24]
 801e610:	685b      	ldr	r3, [r3, #4]
 801e612:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801e614:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801e616:	4618      	mov	r0, r3
 801e618:	f7fc fcdc 	bl	801afd4 <lwip_htons>
 801e61c:	4603      	mov	r3, r0
 801e61e:	461a      	mov	r2, r3
 801e620:	697b      	ldr	r3, [r7, #20]
 801e622:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801e624:	68fb      	ldr	r3, [r7, #12]
 801e626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e62a:	2b06      	cmp	r3, #6
 801e62c:	d006      	beq.n	801e63c <etharp_raw+0x84>
 801e62e:	4b23      	ldr	r3, [pc, #140]	; (801e6bc <etharp_raw+0x104>)
 801e630:	f240 4269 	movw	r2, #1129	; 0x469
 801e634:	4925      	ldr	r1, [pc, #148]	; (801e6cc <etharp_raw+0x114>)
 801e636:	4823      	ldr	r0, [pc, #140]	; (801e6c4 <etharp_raw+0x10c>)
 801e638:	f001 fde0 	bl	80201fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e63c:	697b      	ldr	r3, [r7, #20]
 801e63e:	3308      	adds	r3, #8
 801e640:	2206      	movs	r2, #6
 801e642:	6839      	ldr	r1, [r7, #0]
 801e644:	4618      	mov	r0, r3
 801e646:	f001 fcc9 	bl	801ffdc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801e64a:	697b      	ldr	r3, [r7, #20]
 801e64c:	3312      	adds	r3, #18
 801e64e:	2206      	movs	r2, #6
 801e650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e652:	4618      	mov	r0, r3
 801e654:	f001 fcc2 	bl	801ffdc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801e658:	697b      	ldr	r3, [r7, #20]
 801e65a:	330e      	adds	r3, #14
 801e65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e65e:	6812      	ldr	r2, [r2, #0]
 801e660:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801e662:	697b      	ldr	r3, [r7, #20]
 801e664:	3318      	adds	r3, #24
 801e666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e668:	6812      	ldr	r2, [r2, #0]
 801e66a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e66c:	697b      	ldr	r3, [r7, #20]
 801e66e:	2200      	movs	r2, #0
 801e670:	701a      	strb	r2, [r3, #0]
 801e672:	2200      	movs	r2, #0
 801e674:	f042 0201 	orr.w	r2, r2, #1
 801e678:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e67a:	697b      	ldr	r3, [r7, #20]
 801e67c:	2200      	movs	r2, #0
 801e67e:	f042 0208 	orr.w	r2, r2, #8
 801e682:	709a      	strb	r2, [r3, #2]
 801e684:	2200      	movs	r2, #0
 801e686:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801e688:	697b      	ldr	r3, [r7, #20]
 801e68a:	2206      	movs	r2, #6
 801e68c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801e68e:	697b      	ldr	r3, [r7, #20]
 801e690:	2204      	movs	r2, #4
 801e692:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e694:	f640 0306 	movw	r3, #2054	; 0x806
 801e698:	9300      	str	r3, [sp, #0]
 801e69a:	687b      	ldr	r3, [r7, #4]
 801e69c:	68ba      	ldr	r2, [r7, #8]
 801e69e:	69b9      	ldr	r1, [r7, #24]
 801e6a0:	68f8      	ldr	r0, [r7, #12]
 801e6a2:	f001 fc0f 	bl	801fec4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801e6a6:	69b8      	ldr	r0, [r7, #24]
 801e6a8:	f7fe f870 	bl	801c78c <pbuf_free>
  p = NULL;
 801e6ac:	2300      	movs	r3, #0
 801e6ae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801e6b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e6b4:	4618      	mov	r0, r3
 801e6b6:	3720      	adds	r7, #32
 801e6b8:	46bd      	mov	sp, r7
 801e6ba:	bd80      	pop	{r7, pc}
 801e6bc:	08025e34 	.word	0x08025e34
 801e6c0:	08025f84 	.word	0x08025f84
 801e6c4:	08025eac 	.word	0x08025eac
 801e6c8:	08026034 	.word	0x08026034
 801e6cc:	08026068 	.word	0x08026068

0801e6d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801e6d0:	b580      	push	{r7, lr}
 801e6d2:	b088      	sub	sp, #32
 801e6d4:	af04      	add	r7, sp, #16
 801e6d6:	60f8      	str	r0, [r7, #12]
 801e6d8:	60b9      	str	r1, [r7, #8]
 801e6da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e6dc:	68fb      	ldr	r3, [r7, #12]
 801e6de:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e6e2:	68fb      	ldr	r3, [r7, #12]
 801e6e4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e6ec:	2201      	movs	r2, #1
 801e6ee:	9203      	str	r2, [sp, #12]
 801e6f0:	68ba      	ldr	r2, [r7, #8]
 801e6f2:	9202      	str	r2, [sp, #8]
 801e6f4:	4a06      	ldr	r2, [pc, #24]	; (801e710 <etharp_request_dst+0x40>)
 801e6f6:	9201      	str	r2, [sp, #4]
 801e6f8:	9300      	str	r3, [sp, #0]
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	687a      	ldr	r2, [r7, #4]
 801e6fe:	68f8      	ldr	r0, [r7, #12]
 801e700:	f7ff ff5a 	bl	801e5b8 <etharp_raw>
 801e704:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801e706:	4618      	mov	r0, r3
 801e708:	3710      	adds	r7, #16
 801e70a:	46bd      	mov	sp, r7
 801e70c:	bd80      	pop	{r7, pc}
 801e70e:	bf00      	nop
 801e710:	080269bc 	.word	0x080269bc

0801e714 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801e714:	b580      	push	{r7, lr}
 801e716:	b082      	sub	sp, #8
 801e718:	af00      	add	r7, sp, #0
 801e71a:	6078      	str	r0, [r7, #4]
 801e71c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e71e:	4a05      	ldr	r2, [pc, #20]	; (801e734 <etharp_request+0x20>)
 801e720:	6839      	ldr	r1, [r7, #0]
 801e722:	6878      	ldr	r0, [r7, #4]
 801e724:	f7ff ffd4 	bl	801e6d0 <etharp_request_dst>
 801e728:	4603      	mov	r3, r0
}
 801e72a:	4618      	mov	r0, r3
 801e72c:	3708      	adds	r7, #8
 801e72e:	46bd      	mov	sp, r7
 801e730:	bd80      	pop	{r7, pc}
 801e732:	bf00      	nop
 801e734:	080269b4 	.word	0x080269b4

0801e738 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801e738:	b580      	push	{r7, lr}
 801e73a:	b08e      	sub	sp, #56	; 0x38
 801e73c:	af04      	add	r7, sp, #16
 801e73e:	6078      	str	r0, [r7, #4]
 801e740:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801e742:	4b79      	ldr	r3, [pc, #484]	; (801e928 <icmp_input+0x1f0>)
 801e744:	689b      	ldr	r3, [r3, #8]
 801e746:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e74a:	781b      	ldrb	r3, [r3, #0]
 801e74c:	f003 030f 	and.w	r3, r3, #15
 801e750:	b2db      	uxtb	r3, r3
 801e752:	009b      	lsls	r3, r3, #2
 801e754:	b2db      	uxtb	r3, r3
 801e756:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801e758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e75a:	2b13      	cmp	r3, #19
 801e75c:	f240 80cd 	bls.w	801e8fa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	895b      	ldrh	r3, [r3, #10]
 801e764:	2b03      	cmp	r3, #3
 801e766:	f240 80ca 	bls.w	801e8fe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	685b      	ldr	r3, [r3, #4]
 801e76e:	781b      	ldrb	r3, [r3, #0]
 801e770:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801e774:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801e778:	2b00      	cmp	r3, #0
 801e77a:	f000 80b7 	beq.w	801e8ec <icmp_input+0x1b4>
 801e77e:	2b08      	cmp	r3, #8
 801e780:	f040 80b7 	bne.w	801e8f2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801e784:	4b69      	ldr	r3, [pc, #420]	; (801e92c <icmp_input+0x1f4>)
 801e786:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e788:	4b67      	ldr	r3, [pc, #412]	; (801e928 <icmp_input+0x1f0>)
 801e78a:	695b      	ldr	r3, [r3, #20]
 801e78c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e790:	2be0      	cmp	r3, #224	; 0xe0
 801e792:	f000 80bb 	beq.w	801e90c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e796:	4b64      	ldr	r3, [pc, #400]	; (801e928 <icmp_input+0x1f0>)
 801e798:	695b      	ldr	r3, [r3, #20]
 801e79a:	4a63      	ldr	r2, [pc, #396]	; (801e928 <icmp_input+0x1f0>)
 801e79c:	6812      	ldr	r2, [r2, #0]
 801e79e:	4611      	mov	r1, r2
 801e7a0:	4618      	mov	r0, r3
 801e7a2:	f000 fbf1 	bl	801ef88 <ip4_addr_isbroadcast_u32>
 801e7a6:	4603      	mov	r3, r0
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	f040 80b1 	bne.w	801e910 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	891b      	ldrh	r3, [r3, #8]
 801e7b2:	2b07      	cmp	r3, #7
 801e7b4:	f240 80a5 	bls.w	801e902 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e7b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e7ba:	330e      	adds	r3, #14
 801e7bc:	4619      	mov	r1, r3
 801e7be:	6878      	ldr	r0, [r7, #4]
 801e7c0:	f7fd ff4e 	bl	801c660 <pbuf_add_header>
 801e7c4:	4603      	mov	r3, r0
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d04b      	beq.n	801e862 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	891a      	ldrh	r2, [r3, #8]
 801e7ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e7d0:	4413      	add	r3, r2
 801e7d2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	891b      	ldrh	r3, [r3, #8]
 801e7d8:	8b7a      	ldrh	r2, [r7, #26]
 801e7da:	429a      	cmp	r2, r3
 801e7dc:	f0c0 809a 	bcc.w	801e914 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e7e0:	8b7b      	ldrh	r3, [r7, #26]
 801e7e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e7e6:	4619      	mov	r1, r3
 801e7e8:	200e      	movs	r0, #14
 801e7ea:	f7fd fced 	bl	801c1c8 <pbuf_alloc>
 801e7ee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801e7f0:	697b      	ldr	r3, [r7, #20]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	f000 8090 	beq.w	801e918 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e7f8:	697b      	ldr	r3, [r7, #20]
 801e7fa:	895b      	ldrh	r3, [r3, #10]
 801e7fc:	461a      	mov	r2, r3
 801e7fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e800:	3308      	adds	r3, #8
 801e802:	429a      	cmp	r2, r3
 801e804:	d203      	bcs.n	801e80e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801e806:	6978      	ldr	r0, [r7, #20]
 801e808:	f7fd ffc0 	bl	801c78c <pbuf_free>
          goto icmperr;
 801e80c:	e085      	b.n	801e91a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e80e:	697b      	ldr	r3, [r7, #20]
 801e810:	685b      	ldr	r3, [r3, #4]
 801e812:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e816:	4618      	mov	r0, r3
 801e818:	f001 fbe0 	bl	801ffdc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e81c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e81e:	4619      	mov	r1, r3
 801e820:	6978      	ldr	r0, [r7, #20]
 801e822:	f7fd ff2d 	bl	801c680 <pbuf_remove_header>
 801e826:	4603      	mov	r3, r0
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d009      	beq.n	801e840 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e82c:	4b40      	ldr	r3, [pc, #256]	; (801e930 <icmp_input+0x1f8>)
 801e82e:	22b6      	movs	r2, #182	; 0xb6
 801e830:	4940      	ldr	r1, [pc, #256]	; (801e934 <icmp_input+0x1fc>)
 801e832:	4841      	ldr	r0, [pc, #260]	; (801e938 <icmp_input+0x200>)
 801e834:	f001 fce2 	bl	80201fc <iprintf>
          pbuf_free(r);
 801e838:	6978      	ldr	r0, [r7, #20]
 801e83a:	f7fd ffa7 	bl	801c78c <pbuf_free>
          goto icmperr;
 801e83e:	e06c      	b.n	801e91a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e840:	6879      	ldr	r1, [r7, #4]
 801e842:	6978      	ldr	r0, [r7, #20]
 801e844:	f7fe f8ca 	bl	801c9dc <pbuf_copy>
 801e848:	4603      	mov	r3, r0
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d003      	beq.n	801e856 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801e84e:	6978      	ldr	r0, [r7, #20]
 801e850:	f7fd ff9c 	bl	801c78c <pbuf_free>
          goto icmperr;
 801e854:	e061      	b.n	801e91a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801e856:	6878      	ldr	r0, [r7, #4]
 801e858:	f7fd ff98 	bl	801c78c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e85c:	697b      	ldr	r3, [r7, #20]
 801e85e:	607b      	str	r3, [r7, #4]
 801e860:	e00f      	b.n	801e882 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e864:	330e      	adds	r3, #14
 801e866:	4619      	mov	r1, r3
 801e868:	6878      	ldr	r0, [r7, #4]
 801e86a:	f7fd ff09 	bl	801c680 <pbuf_remove_header>
 801e86e:	4603      	mov	r3, r0
 801e870:	2b00      	cmp	r3, #0
 801e872:	d006      	beq.n	801e882 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e874:	4b2e      	ldr	r3, [pc, #184]	; (801e930 <icmp_input+0x1f8>)
 801e876:	22c7      	movs	r2, #199	; 0xc7
 801e878:	4930      	ldr	r1, [pc, #192]	; (801e93c <icmp_input+0x204>)
 801e87a:	482f      	ldr	r0, [pc, #188]	; (801e938 <icmp_input+0x200>)
 801e87c:	f001 fcbe 	bl	80201fc <iprintf>
          goto icmperr;
 801e880:	e04b      	b.n	801e91a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	685b      	ldr	r3, [r3, #4]
 801e886:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e88a:	4619      	mov	r1, r3
 801e88c:	6878      	ldr	r0, [r7, #4]
 801e88e:	f7fd fee7 	bl	801c660 <pbuf_add_header>
 801e892:	4603      	mov	r3, r0
 801e894:	2b00      	cmp	r3, #0
 801e896:	d12b      	bne.n	801e8f0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e898:	687b      	ldr	r3, [r7, #4]
 801e89a:	685b      	ldr	r3, [r3, #4]
 801e89c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e89e:	69fb      	ldr	r3, [r7, #28]
 801e8a0:	681a      	ldr	r2, [r3, #0]
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e8a6:	4b20      	ldr	r3, [pc, #128]	; (801e928 <icmp_input+0x1f0>)
 801e8a8:	691a      	ldr	r2, [r3, #16]
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e8ae:	693b      	ldr	r3, [r7, #16]
 801e8b0:	2200      	movs	r2, #0
 801e8b2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801e8b4:	693b      	ldr	r3, [r7, #16]
 801e8b6:	2200      	movs	r2, #0
 801e8b8:	709a      	strb	r2, [r3, #2]
 801e8ba:	2200      	movs	r2, #0
 801e8bc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	22ff      	movs	r2, #255	; 0xff
 801e8c2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	2200      	movs	r2, #0
 801e8c8:	729a      	strb	r2, [r3, #10]
 801e8ca:	2200      	movs	r2, #0
 801e8cc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e8ce:	683b      	ldr	r3, [r7, #0]
 801e8d0:	9302      	str	r3, [sp, #8]
 801e8d2:	2301      	movs	r3, #1
 801e8d4:	9301      	str	r3, [sp, #4]
 801e8d6:	2300      	movs	r3, #0
 801e8d8:	9300      	str	r3, [sp, #0]
 801e8da:	23ff      	movs	r3, #255	; 0xff
 801e8dc:	2200      	movs	r2, #0
 801e8de:	69f9      	ldr	r1, [r7, #28]
 801e8e0:	6878      	ldr	r0, [r7, #4]
 801e8e2:	f000 fa6b 	bl	801edbc <ip4_output_if>
 801e8e6:	4603      	mov	r3, r0
 801e8e8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e8ea:	e001      	b.n	801e8f0 <icmp_input+0x1b8>
      break;
 801e8ec:	bf00      	nop
 801e8ee:	e000      	b.n	801e8f2 <icmp_input+0x1ba>
      break;
 801e8f0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801e8f2:	6878      	ldr	r0, [r7, #4]
 801e8f4:	f7fd ff4a 	bl	801c78c <pbuf_free>
  return;
 801e8f8:	e013      	b.n	801e922 <icmp_input+0x1ea>
    goto lenerr;
 801e8fa:	bf00      	nop
 801e8fc:	e002      	b.n	801e904 <icmp_input+0x1cc>
    goto lenerr;
 801e8fe:	bf00      	nop
 801e900:	e000      	b.n	801e904 <icmp_input+0x1cc>
        goto lenerr;
 801e902:	bf00      	nop
lenerr:
  pbuf_free(p);
 801e904:	6878      	ldr	r0, [r7, #4]
 801e906:	f7fd ff41 	bl	801c78c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e90a:	e00a      	b.n	801e922 <icmp_input+0x1ea>
        goto icmperr;
 801e90c:	bf00      	nop
 801e90e:	e004      	b.n	801e91a <icmp_input+0x1e2>
        goto icmperr;
 801e910:	bf00      	nop
 801e912:	e002      	b.n	801e91a <icmp_input+0x1e2>
          goto icmperr;
 801e914:	bf00      	nop
 801e916:	e000      	b.n	801e91a <icmp_input+0x1e2>
          goto icmperr;
 801e918:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e91a:	6878      	ldr	r0, [r7, #4]
 801e91c:	f7fd ff36 	bl	801c78c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e920:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e922:	3728      	adds	r7, #40	; 0x28
 801e924:	46bd      	mov	sp, r7
 801e926:	bd80      	pop	{r7, pc}
 801e928:	2000fb6c 	.word	0x2000fb6c
 801e92c:	2000fb80 	.word	0x2000fb80
 801e930:	080260ac 	.word	0x080260ac
 801e934:	080260e4 	.word	0x080260e4
 801e938:	0802611c 	.word	0x0802611c
 801e93c:	08026144 	.word	0x08026144

0801e940 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e940:	b580      	push	{r7, lr}
 801e942:	b082      	sub	sp, #8
 801e944:	af00      	add	r7, sp, #0
 801e946:	6078      	str	r0, [r7, #4]
 801e948:	460b      	mov	r3, r1
 801e94a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e94c:	78fb      	ldrb	r3, [r7, #3]
 801e94e:	461a      	mov	r2, r3
 801e950:	2103      	movs	r1, #3
 801e952:	6878      	ldr	r0, [r7, #4]
 801e954:	f000 f814 	bl	801e980 <icmp_send_response>
}
 801e958:	bf00      	nop
 801e95a:	3708      	adds	r7, #8
 801e95c:	46bd      	mov	sp, r7
 801e95e:	bd80      	pop	{r7, pc}

0801e960 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e960:	b580      	push	{r7, lr}
 801e962:	b082      	sub	sp, #8
 801e964:	af00      	add	r7, sp, #0
 801e966:	6078      	str	r0, [r7, #4]
 801e968:	460b      	mov	r3, r1
 801e96a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e96c:	78fb      	ldrb	r3, [r7, #3]
 801e96e:	461a      	mov	r2, r3
 801e970:	210b      	movs	r1, #11
 801e972:	6878      	ldr	r0, [r7, #4]
 801e974:	f000 f804 	bl	801e980 <icmp_send_response>
}
 801e978:	bf00      	nop
 801e97a:	3708      	adds	r7, #8
 801e97c:	46bd      	mov	sp, r7
 801e97e:	bd80      	pop	{r7, pc}

0801e980 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b08c      	sub	sp, #48	; 0x30
 801e984:	af04      	add	r7, sp, #16
 801e986:	6078      	str	r0, [r7, #4]
 801e988:	460b      	mov	r3, r1
 801e98a:	70fb      	strb	r3, [r7, #3]
 801e98c:	4613      	mov	r3, r2
 801e98e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e990:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e994:	2124      	movs	r1, #36	; 0x24
 801e996:	2022      	movs	r0, #34	; 0x22
 801e998:	f7fd fc16 	bl	801c1c8 <pbuf_alloc>
 801e99c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e99e:	69fb      	ldr	r3, [r7, #28]
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d04c      	beq.n	801ea3e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e9a4:	69fb      	ldr	r3, [r7, #28]
 801e9a6:	895b      	ldrh	r3, [r3, #10]
 801e9a8:	2b23      	cmp	r3, #35	; 0x23
 801e9aa:	d806      	bhi.n	801e9ba <icmp_send_response+0x3a>
 801e9ac:	4b26      	ldr	r3, [pc, #152]	; (801ea48 <icmp_send_response+0xc8>)
 801e9ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801e9b2:	4926      	ldr	r1, [pc, #152]	; (801ea4c <icmp_send_response+0xcc>)
 801e9b4:	4826      	ldr	r0, [pc, #152]	; (801ea50 <icmp_send_response+0xd0>)
 801e9b6:	f001 fc21 	bl	80201fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	685b      	ldr	r3, [r3, #4]
 801e9be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e9c0:	69fb      	ldr	r3, [r7, #28]
 801e9c2:	685b      	ldr	r3, [r3, #4]
 801e9c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e9c6:	697b      	ldr	r3, [r7, #20]
 801e9c8:	78fa      	ldrb	r2, [r7, #3]
 801e9ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e9cc:	697b      	ldr	r3, [r7, #20]
 801e9ce:	78ba      	ldrb	r2, [r7, #2]
 801e9d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e9d2:	697b      	ldr	r3, [r7, #20]
 801e9d4:	2200      	movs	r2, #0
 801e9d6:	711a      	strb	r2, [r3, #4]
 801e9d8:	2200      	movs	r2, #0
 801e9da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e9dc:	697b      	ldr	r3, [r7, #20]
 801e9de:	2200      	movs	r2, #0
 801e9e0:	719a      	strb	r2, [r3, #6]
 801e9e2:	2200      	movs	r2, #0
 801e9e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e9e6:	69fb      	ldr	r3, [r7, #28]
 801e9e8:	685b      	ldr	r3, [r3, #4]
 801e9ea:	f103 0008 	add.w	r0, r3, #8
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	685b      	ldr	r3, [r3, #4]
 801e9f2:	221c      	movs	r2, #28
 801e9f4:	4619      	mov	r1, r3
 801e9f6:	f001 faf1 	bl	801ffdc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e9fa:	69bb      	ldr	r3, [r7, #24]
 801e9fc:	68db      	ldr	r3, [r3, #12]
 801e9fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ea00:	f107 030c 	add.w	r3, r7, #12
 801ea04:	4618      	mov	r0, r3
 801ea06:	f000 f825 	bl	801ea54 <ip4_route>
 801ea0a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ea0c:	693b      	ldr	r3, [r7, #16]
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	d011      	beq.n	801ea36 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ea12:	697b      	ldr	r3, [r7, #20]
 801ea14:	2200      	movs	r2, #0
 801ea16:	709a      	strb	r2, [r3, #2]
 801ea18:	2200      	movs	r2, #0
 801ea1a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ea1c:	f107 020c 	add.w	r2, r7, #12
 801ea20:	693b      	ldr	r3, [r7, #16]
 801ea22:	9302      	str	r3, [sp, #8]
 801ea24:	2301      	movs	r3, #1
 801ea26:	9301      	str	r3, [sp, #4]
 801ea28:	2300      	movs	r3, #0
 801ea2a:	9300      	str	r3, [sp, #0]
 801ea2c:	23ff      	movs	r3, #255	; 0xff
 801ea2e:	2100      	movs	r1, #0
 801ea30:	69f8      	ldr	r0, [r7, #28]
 801ea32:	f000 f9c3 	bl	801edbc <ip4_output_if>
  }
  pbuf_free(q);
 801ea36:	69f8      	ldr	r0, [r7, #28]
 801ea38:	f7fd fea8 	bl	801c78c <pbuf_free>
 801ea3c:	e000      	b.n	801ea40 <icmp_send_response+0xc0>
    return;
 801ea3e:	bf00      	nop
}
 801ea40:	3720      	adds	r7, #32
 801ea42:	46bd      	mov	sp, r7
 801ea44:	bd80      	pop	{r7, pc}
 801ea46:	bf00      	nop
 801ea48:	080260ac 	.word	0x080260ac
 801ea4c:	08026178 	.word	0x08026178
 801ea50:	0802611c 	.word	0x0802611c

0801ea54 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ea54:	b480      	push	{r7}
 801ea56:	b085      	sub	sp, #20
 801ea58:	af00      	add	r7, sp, #0
 801ea5a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ea5c:	4b33      	ldr	r3, [pc, #204]	; (801eb2c <ip4_route+0xd8>)
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	60fb      	str	r3, [r7, #12]
 801ea62:	e036      	b.n	801ead2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ea64:	68fb      	ldr	r3, [r7, #12]
 801ea66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ea6a:	f003 0301 	and.w	r3, r3, #1
 801ea6e:	b2db      	uxtb	r3, r3
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d02b      	beq.n	801eacc <ip4_route+0x78>
 801ea74:	68fb      	ldr	r3, [r7, #12]
 801ea76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ea7a:	089b      	lsrs	r3, r3, #2
 801ea7c:	f003 0301 	and.w	r3, r3, #1
 801ea80:	b2db      	uxtb	r3, r3
 801ea82:	2b00      	cmp	r3, #0
 801ea84:	d022      	beq.n	801eacc <ip4_route+0x78>
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	3304      	adds	r3, #4
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	d01d      	beq.n	801eacc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	681a      	ldr	r2, [r3, #0]
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	3304      	adds	r3, #4
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	405a      	eors	r2, r3
 801ea9c:	68fb      	ldr	r3, [r7, #12]
 801ea9e:	3308      	adds	r3, #8
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	4013      	ands	r3, r2
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d101      	bne.n	801eaac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	e038      	b.n	801eb1e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801eaac:	68fb      	ldr	r3, [r7, #12]
 801eaae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801eab2:	f003 0302 	and.w	r3, r3, #2
 801eab6:	2b00      	cmp	r3, #0
 801eab8:	d108      	bne.n	801eacc <ip4_route+0x78>
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	681a      	ldr	r2, [r3, #0]
 801eabe:	68fb      	ldr	r3, [r7, #12]
 801eac0:	330c      	adds	r3, #12
 801eac2:	681b      	ldr	r3, [r3, #0]
 801eac4:	429a      	cmp	r2, r3
 801eac6:	d101      	bne.n	801eacc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801eac8:	68fb      	ldr	r3, [r7, #12]
 801eaca:	e028      	b.n	801eb1e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801eacc:	68fb      	ldr	r3, [r7, #12]
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	60fb      	str	r3, [r7, #12]
 801ead2:	68fb      	ldr	r3, [r7, #12]
 801ead4:	2b00      	cmp	r3, #0
 801ead6:	d1c5      	bne.n	801ea64 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ead8:	4b15      	ldr	r3, [pc, #84]	; (801eb30 <ip4_route+0xdc>)
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d01a      	beq.n	801eb16 <ip4_route+0xc2>
 801eae0:	4b13      	ldr	r3, [pc, #76]	; (801eb30 <ip4_route+0xdc>)
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801eae8:	f003 0301 	and.w	r3, r3, #1
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d012      	beq.n	801eb16 <ip4_route+0xc2>
 801eaf0:	4b0f      	ldr	r3, [pc, #60]	; (801eb30 <ip4_route+0xdc>)
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801eaf8:	f003 0304 	and.w	r3, r3, #4
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d00a      	beq.n	801eb16 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801eb00:	4b0b      	ldr	r3, [pc, #44]	; (801eb30 <ip4_route+0xdc>)
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	3304      	adds	r3, #4
 801eb06:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d004      	beq.n	801eb16 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	681b      	ldr	r3, [r3, #0]
 801eb10:	b2db      	uxtb	r3, r3
 801eb12:	2b7f      	cmp	r3, #127	; 0x7f
 801eb14:	d101      	bne.n	801eb1a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801eb16:	2300      	movs	r3, #0
 801eb18:	e001      	b.n	801eb1e <ip4_route+0xca>
  }

  return netif_default;
 801eb1a:	4b05      	ldr	r3, [pc, #20]	; (801eb30 <ip4_route+0xdc>)
 801eb1c:	681b      	ldr	r3, [r3, #0]
}
 801eb1e:	4618      	mov	r0, r3
 801eb20:	3714      	adds	r7, #20
 801eb22:	46bd      	mov	sp, r7
 801eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb28:	4770      	bx	lr
 801eb2a:	bf00      	nop
 801eb2c:	2001317c 	.word	0x2001317c
 801eb30:	20013180 	.word	0x20013180

0801eb34 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801eb34:	b580      	push	{r7, lr}
 801eb36:	b082      	sub	sp, #8
 801eb38:	af00      	add	r7, sp, #0
 801eb3a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801eb42:	f003 0301 	and.w	r3, r3, #1
 801eb46:	b2db      	uxtb	r3, r3
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d016      	beq.n	801eb7a <ip4_input_accept+0x46>
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	3304      	adds	r3, #4
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d011      	beq.n	801eb7a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801eb56:	4b0b      	ldr	r3, [pc, #44]	; (801eb84 <ip4_input_accept+0x50>)
 801eb58:	695a      	ldr	r2, [r3, #20]
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	3304      	adds	r3, #4
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	429a      	cmp	r2, r3
 801eb62:	d008      	beq.n	801eb76 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801eb64:	4b07      	ldr	r3, [pc, #28]	; (801eb84 <ip4_input_accept+0x50>)
 801eb66:	695b      	ldr	r3, [r3, #20]
 801eb68:	6879      	ldr	r1, [r7, #4]
 801eb6a:	4618      	mov	r0, r3
 801eb6c:	f000 fa0c 	bl	801ef88 <ip4_addr_isbroadcast_u32>
 801eb70:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d001      	beq.n	801eb7a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801eb76:	2301      	movs	r3, #1
 801eb78:	e000      	b.n	801eb7c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801eb7a:	2300      	movs	r3, #0
}
 801eb7c:	4618      	mov	r0, r3
 801eb7e:	3708      	adds	r7, #8
 801eb80:	46bd      	mov	sp, r7
 801eb82:	bd80      	pop	{r7, pc}
 801eb84:	2000fb6c 	.word	0x2000fb6c

0801eb88 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801eb88:	b580      	push	{r7, lr}
 801eb8a:	b086      	sub	sp, #24
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	6078      	str	r0, [r7, #4]
 801eb90:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	685b      	ldr	r3, [r3, #4]
 801eb96:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801eb98:	697b      	ldr	r3, [r7, #20]
 801eb9a:	781b      	ldrb	r3, [r3, #0]
 801eb9c:	091b      	lsrs	r3, r3, #4
 801eb9e:	b2db      	uxtb	r3, r3
 801eba0:	2b04      	cmp	r3, #4
 801eba2:	d004      	beq.n	801ebae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801eba4:	6878      	ldr	r0, [r7, #4]
 801eba6:	f7fd fdf1 	bl	801c78c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ebaa:	2300      	movs	r3, #0
 801ebac:	e0fd      	b.n	801edaa <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ebae:	697b      	ldr	r3, [r7, #20]
 801ebb0:	781b      	ldrb	r3, [r3, #0]
 801ebb2:	f003 030f 	and.w	r3, r3, #15
 801ebb6:	b2db      	uxtb	r3, r3
 801ebb8:	009b      	lsls	r3, r3, #2
 801ebba:	b2db      	uxtb	r3, r3
 801ebbc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ebbe:	697b      	ldr	r3, [r7, #20]
 801ebc0:	885b      	ldrh	r3, [r3, #2]
 801ebc2:	b29b      	uxth	r3, r3
 801ebc4:	4618      	mov	r0, r3
 801ebc6:	f7fc fa05 	bl	801afd4 <lwip_htons>
 801ebca:	4603      	mov	r3, r0
 801ebcc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	891b      	ldrh	r3, [r3, #8]
 801ebd2:	89ba      	ldrh	r2, [r7, #12]
 801ebd4:	429a      	cmp	r2, r3
 801ebd6:	d204      	bcs.n	801ebe2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801ebd8:	89bb      	ldrh	r3, [r7, #12]
 801ebda:	4619      	mov	r1, r3
 801ebdc:	6878      	ldr	r0, [r7, #4]
 801ebde:	f7fd fc4f 	bl	801c480 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	895b      	ldrh	r3, [r3, #10]
 801ebe6:	89fa      	ldrh	r2, [r7, #14]
 801ebe8:	429a      	cmp	r2, r3
 801ebea:	d807      	bhi.n	801ebfc <ip4_input+0x74>
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	891b      	ldrh	r3, [r3, #8]
 801ebf0:	89ba      	ldrh	r2, [r7, #12]
 801ebf2:	429a      	cmp	r2, r3
 801ebf4:	d802      	bhi.n	801ebfc <ip4_input+0x74>
 801ebf6:	89fb      	ldrh	r3, [r7, #14]
 801ebf8:	2b13      	cmp	r3, #19
 801ebfa:	d804      	bhi.n	801ec06 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ebfc:	6878      	ldr	r0, [r7, #4]
 801ebfe:	f7fd fdc5 	bl	801c78c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ec02:	2300      	movs	r3, #0
 801ec04:	e0d1      	b.n	801edaa <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ec06:	697b      	ldr	r3, [r7, #20]
 801ec08:	691b      	ldr	r3, [r3, #16]
 801ec0a:	4a6a      	ldr	r2, [pc, #424]	; (801edb4 <ip4_input+0x22c>)
 801ec0c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ec0e:	697b      	ldr	r3, [r7, #20]
 801ec10:	68db      	ldr	r3, [r3, #12]
 801ec12:	4a68      	ldr	r2, [pc, #416]	; (801edb4 <ip4_input+0x22c>)
 801ec14:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ec16:	4b67      	ldr	r3, [pc, #412]	; (801edb4 <ip4_input+0x22c>)
 801ec18:	695b      	ldr	r3, [r3, #20]
 801ec1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ec1e:	2be0      	cmp	r3, #224	; 0xe0
 801ec20:	d112      	bne.n	801ec48 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ec22:	683b      	ldr	r3, [r7, #0]
 801ec24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ec28:	f003 0301 	and.w	r3, r3, #1
 801ec2c:	b2db      	uxtb	r3, r3
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	d007      	beq.n	801ec42 <ip4_input+0xba>
 801ec32:	683b      	ldr	r3, [r7, #0]
 801ec34:	3304      	adds	r3, #4
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	2b00      	cmp	r3, #0
 801ec3a:	d002      	beq.n	801ec42 <ip4_input+0xba>
      netif = inp;
 801ec3c:	683b      	ldr	r3, [r7, #0]
 801ec3e:	613b      	str	r3, [r7, #16]
 801ec40:	e02a      	b.n	801ec98 <ip4_input+0x110>
    } else {
      netif = NULL;
 801ec42:	2300      	movs	r3, #0
 801ec44:	613b      	str	r3, [r7, #16]
 801ec46:	e027      	b.n	801ec98 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ec48:	6838      	ldr	r0, [r7, #0]
 801ec4a:	f7ff ff73 	bl	801eb34 <ip4_input_accept>
 801ec4e:	4603      	mov	r3, r0
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d002      	beq.n	801ec5a <ip4_input+0xd2>
      netif = inp;
 801ec54:	683b      	ldr	r3, [r7, #0]
 801ec56:	613b      	str	r3, [r7, #16]
 801ec58:	e01e      	b.n	801ec98 <ip4_input+0x110>
    } else {
      netif = NULL;
 801ec5a:	2300      	movs	r3, #0
 801ec5c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ec5e:	4b55      	ldr	r3, [pc, #340]	; (801edb4 <ip4_input+0x22c>)
 801ec60:	695b      	ldr	r3, [r3, #20]
 801ec62:	b2db      	uxtb	r3, r3
 801ec64:	2b7f      	cmp	r3, #127	; 0x7f
 801ec66:	d017      	beq.n	801ec98 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ec68:	4b53      	ldr	r3, [pc, #332]	; (801edb8 <ip4_input+0x230>)
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	613b      	str	r3, [r7, #16]
 801ec6e:	e00e      	b.n	801ec8e <ip4_input+0x106>
          if (netif == inp) {
 801ec70:	693a      	ldr	r2, [r7, #16]
 801ec72:	683b      	ldr	r3, [r7, #0]
 801ec74:	429a      	cmp	r2, r3
 801ec76:	d006      	beq.n	801ec86 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801ec78:	6938      	ldr	r0, [r7, #16]
 801ec7a:	f7ff ff5b 	bl	801eb34 <ip4_input_accept>
 801ec7e:	4603      	mov	r3, r0
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	d108      	bne.n	801ec96 <ip4_input+0x10e>
 801ec84:	e000      	b.n	801ec88 <ip4_input+0x100>
            continue;
 801ec86:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ec88:	693b      	ldr	r3, [r7, #16]
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	613b      	str	r3, [r7, #16]
 801ec8e:	693b      	ldr	r3, [r7, #16]
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d1ed      	bne.n	801ec70 <ip4_input+0xe8>
 801ec94:	e000      	b.n	801ec98 <ip4_input+0x110>
            break;
 801ec96:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ec98:	4b46      	ldr	r3, [pc, #280]	; (801edb4 <ip4_input+0x22c>)
 801ec9a:	691b      	ldr	r3, [r3, #16]
 801ec9c:	6839      	ldr	r1, [r7, #0]
 801ec9e:	4618      	mov	r0, r3
 801eca0:	f000 f972 	bl	801ef88 <ip4_addr_isbroadcast_u32>
 801eca4:	4603      	mov	r3, r0
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d105      	bne.n	801ecb6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ecaa:	4b42      	ldr	r3, [pc, #264]	; (801edb4 <ip4_input+0x22c>)
 801ecac:	691b      	ldr	r3, [r3, #16]
 801ecae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ecb2:	2be0      	cmp	r3, #224	; 0xe0
 801ecb4:	d104      	bne.n	801ecc0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ecb6:	6878      	ldr	r0, [r7, #4]
 801ecb8:	f7fd fd68 	bl	801c78c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	e074      	b.n	801edaa <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801ecc0:	693b      	ldr	r3, [r7, #16]
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d104      	bne.n	801ecd0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801ecc6:	6878      	ldr	r0, [r7, #4]
 801ecc8:	f7fd fd60 	bl	801c78c <pbuf_free>
    return ERR_OK;
 801eccc:	2300      	movs	r3, #0
 801ecce:	e06c      	b.n	801edaa <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ecd0:	697b      	ldr	r3, [r7, #20]
 801ecd2:	88db      	ldrh	r3, [r3, #6]
 801ecd4:	b29b      	uxth	r3, r3
 801ecd6:	461a      	mov	r2, r3
 801ecd8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801ecdc:	4013      	ands	r3, r2
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d00b      	beq.n	801ecfa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ece2:	6878      	ldr	r0, [r7, #4]
 801ece4:	f000 fd26 	bl	801f734 <ip4_reass>
 801ece8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d101      	bne.n	801ecf4 <ip4_input+0x16c>
      return ERR_OK;
 801ecf0:	2300      	movs	r3, #0
 801ecf2:	e05a      	b.n	801edaa <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ecf4:	687b      	ldr	r3, [r7, #4]
 801ecf6:	685b      	ldr	r3, [r3, #4]
 801ecf8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ecfa:	4a2e      	ldr	r2, [pc, #184]	; (801edb4 <ip4_input+0x22c>)
 801ecfc:	693b      	ldr	r3, [r7, #16]
 801ecfe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ed00:	4a2c      	ldr	r2, [pc, #176]	; (801edb4 <ip4_input+0x22c>)
 801ed02:	683b      	ldr	r3, [r7, #0]
 801ed04:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ed06:	4a2b      	ldr	r2, [pc, #172]	; (801edb4 <ip4_input+0x22c>)
 801ed08:	697b      	ldr	r3, [r7, #20]
 801ed0a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ed0c:	697b      	ldr	r3, [r7, #20]
 801ed0e:	781b      	ldrb	r3, [r3, #0]
 801ed10:	f003 030f 	and.w	r3, r3, #15
 801ed14:	b2db      	uxtb	r3, r3
 801ed16:	009b      	lsls	r3, r3, #2
 801ed18:	b2db      	uxtb	r3, r3
 801ed1a:	b29a      	uxth	r2, r3
 801ed1c:	4b25      	ldr	r3, [pc, #148]	; (801edb4 <ip4_input+0x22c>)
 801ed1e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ed20:	89fb      	ldrh	r3, [r7, #14]
 801ed22:	4619      	mov	r1, r3
 801ed24:	6878      	ldr	r0, [r7, #4]
 801ed26:	f7fd fcab 	bl	801c680 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ed2a:	697b      	ldr	r3, [r7, #20]
 801ed2c:	7a5b      	ldrb	r3, [r3, #9]
 801ed2e:	2b01      	cmp	r3, #1
 801ed30:	d006      	beq.n	801ed40 <ip4_input+0x1b8>
 801ed32:	2b11      	cmp	r3, #17
 801ed34:	d109      	bne.n	801ed4a <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ed36:	6839      	ldr	r1, [r7, #0]
 801ed38:	6878      	ldr	r0, [r7, #4]
 801ed3a:	f7fe f9b5 	bl	801d0a8 <udp_input>
        break;
 801ed3e:	e021      	b.n	801ed84 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ed40:	6839      	ldr	r1, [r7, #0]
 801ed42:	6878      	ldr	r0, [r7, #4]
 801ed44:	f7ff fcf8 	bl	801e738 <icmp_input>
        break;
 801ed48:	e01c      	b.n	801ed84 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ed4a:	4b1a      	ldr	r3, [pc, #104]	; (801edb4 <ip4_input+0x22c>)
 801ed4c:	695b      	ldr	r3, [r3, #20]
 801ed4e:	6939      	ldr	r1, [r7, #16]
 801ed50:	4618      	mov	r0, r3
 801ed52:	f000 f919 	bl	801ef88 <ip4_addr_isbroadcast_u32>
 801ed56:	4603      	mov	r3, r0
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d10f      	bne.n	801ed7c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ed5c:	4b15      	ldr	r3, [pc, #84]	; (801edb4 <ip4_input+0x22c>)
 801ed5e:	695b      	ldr	r3, [r3, #20]
 801ed60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ed64:	2be0      	cmp	r3, #224	; 0xe0
 801ed66:	d009      	beq.n	801ed7c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ed68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ed6c:	4619      	mov	r1, r3
 801ed6e:	6878      	ldr	r0, [r7, #4]
 801ed70:	f7fd fcf9 	bl	801c766 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ed74:	2102      	movs	r1, #2
 801ed76:	6878      	ldr	r0, [r7, #4]
 801ed78:	f7ff fde2 	bl	801e940 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ed7c:	6878      	ldr	r0, [r7, #4]
 801ed7e:	f7fd fd05 	bl	801c78c <pbuf_free>
        break;
 801ed82:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ed84:	4b0b      	ldr	r3, [pc, #44]	; (801edb4 <ip4_input+0x22c>)
 801ed86:	2200      	movs	r2, #0
 801ed88:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ed8a:	4b0a      	ldr	r3, [pc, #40]	; (801edb4 <ip4_input+0x22c>)
 801ed8c:	2200      	movs	r2, #0
 801ed8e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ed90:	4b08      	ldr	r3, [pc, #32]	; (801edb4 <ip4_input+0x22c>)
 801ed92:	2200      	movs	r2, #0
 801ed94:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ed96:	4b07      	ldr	r3, [pc, #28]	; (801edb4 <ip4_input+0x22c>)
 801ed98:	2200      	movs	r2, #0
 801ed9a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ed9c:	4b05      	ldr	r3, [pc, #20]	; (801edb4 <ip4_input+0x22c>)
 801ed9e:	2200      	movs	r2, #0
 801eda0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801eda2:	4b04      	ldr	r3, [pc, #16]	; (801edb4 <ip4_input+0x22c>)
 801eda4:	2200      	movs	r2, #0
 801eda6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801eda8:	2300      	movs	r3, #0
}
 801edaa:	4618      	mov	r0, r3
 801edac:	3718      	adds	r7, #24
 801edae:	46bd      	mov	sp, r7
 801edb0:	bd80      	pop	{r7, pc}
 801edb2:	bf00      	nop
 801edb4:	2000fb6c 	.word	0x2000fb6c
 801edb8:	2001317c 	.word	0x2001317c

0801edbc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801edbc:	b580      	push	{r7, lr}
 801edbe:	b08a      	sub	sp, #40	; 0x28
 801edc0:	af04      	add	r7, sp, #16
 801edc2:	60f8      	str	r0, [r7, #12]
 801edc4:	60b9      	str	r1, [r7, #8]
 801edc6:	607a      	str	r2, [r7, #4]
 801edc8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801edca:	68bb      	ldr	r3, [r7, #8]
 801edcc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	d009      	beq.n	801ede8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801edd4:	68bb      	ldr	r3, [r7, #8]
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d003      	beq.n	801ede2 <ip4_output_if+0x26>
 801edda:	68bb      	ldr	r3, [r7, #8]
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d102      	bne.n	801ede8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ede4:	3304      	adds	r3, #4
 801ede6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801ede8:	78fa      	ldrb	r2, [r7, #3]
 801edea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edec:	9302      	str	r3, [sp, #8]
 801edee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801edf2:	9301      	str	r3, [sp, #4]
 801edf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801edf8:	9300      	str	r3, [sp, #0]
 801edfa:	4613      	mov	r3, r2
 801edfc:	687a      	ldr	r2, [r7, #4]
 801edfe:	6979      	ldr	r1, [r7, #20]
 801ee00:	68f8      	ldr	r0, [r7, #12]
 801ee02:	f000 f805 	bl	801ee10 <ip4_output_if_src>
 801ee06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ee08:	4618      	mov	r0, r3
 801ee0a:	3718      	adds	r7, #24
 801ee0c:	46bd      	mov	sp, r7
 801ee0e:	bd80      	pop	{r7, pc}

0801ee10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ee10:	b580      	push	{r7, lr}
 801ee12:	b088      	sub	sp, #32
 801ee14:	af00      	add	r7, sp, #0
 801ee16:	60f8      	str	r0, [r7, #12]
 801ee18:	60b9      	str	r1, [r7, #8]
 801ee1a:	607a      	str	r2, [r7, #4]
 801ee1c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ee1e:	68fb      	ldr	r3, [r7, #12]
 801ee20:	7b9b      	ldrb	r3, [r3, #14]
 801ee22:	2b01      	cmp	r3, #1
 801ee24:	d006      	beq.n	801ee34 <ip4_output_if_src+0x24>
 801ee26:	4b52      	ldr	r3, [pc, #328]	; (801ef70 <ip4_output_if_src+0x160>)
 801ee28:	f44f 7255 	mov.w	r2, #852	; 0x354
 801ee2c:	4951      	ldr	r1, [pc, #324]	; (801ef74 <ip4_output_if_src+0x164>)
 801ee2e:	4852      	ldr	r0, [pc, #328]	; (801ef78 <ip4_output_if_src+0x168>)
 801ee30:	f001 f9e4 	bl	80201fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d060      	beq.n	801eefc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801ee3a:	2314      	movs	r3, #20
 801ee3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ee3e:	2114      	movs	r1, #20
 801ee40:	68f8      	ldr	r0, [r7, #12]
 801ee42:	f7fd fc0d 	bl	801c660 <pbuf_add_header>
 801ee46:	4603      	mov	r3, r0
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	d002      	beq.n	801ee52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ee4c:	f06f 0301 	mvn.w	r3, #1
 801ee50:	e089      	b.n	801ef66 <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ee52:	68fb      	ldr	r3, [r7, #12]
 801ee54:	685b      	ldr	r3, [r3, #4]
 801ee56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801ee58:	68fb      	ldr	r3, [r7, #12]
 801ee5a:	895b      	ldrh	r3, [r3, #10]
 801ee5c:	2b13      	cmp	r3, #19
 801ee5e:	d806      	bhi.n	801ee6e <ip4_output_if_src+0x5e>
 801ee60:	4b43      	ldr	r3, [pc, #268]	; (801ef70 <ip4_output_if_src+0x160>)
 801ee62:	f44f 7262 	mov.w	r2, #904	; 0x388
 801ee66:	4945      	ldr	r1, [pc, #276]	; (801ef7c <ip4_output_if_src+0x16c>)
 801ee68:	4843      	ldr	r0, [pc, #268]	; (801ef78 <ip4_output_if_src+0x168>)
 801ee6a:	f001 f9c7 	bl	80201fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801ee6e:	69fb      	ldr	r3, [r7, #28]
 801ee70:	78fa      	ldrb	r2, [r7, #3]
 801ee72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801ee74:	69fb      	ldr	r3, [r7, #28]
 801ee76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801ee7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	681a      	ldr	r2, [r3, #0]
 801ee80:	69fb      	ldr	r3, [r7, #28]
 801ee82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801ee84:	8b7b      	ldrh	r3, [r7, #26]
 801ee86:	089b      	lsrs	r3, r3, #2
 801ee88:	b29b      	uxth	r3, r3
 801ee8a:	b2db      	uxtb	r3, r3
 801ee8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ee90:	b2da      	uxtb	r2, r3
 801ee92:	69fb      	ldr	r3, [r7, #28]
 801ee94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801ee96:	69fb      	ldr	r3, [r7, #28]
 801ee98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ee9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801ee9e:	68fb      	ldr	r3, [r7, #12]
 801eea0:	891b      	ldrh	r3, [r3, #8]
 801eea2:	4618      	mov	r0, r3
 801eea4:	f7fc f896 	bl	801afd4 <lwip_htons>
 801eea8:	4603      	mov	r3, r0
 801eeaa:	461a      	mov	r2, r3
 801eeac:	69fb      	ldr	r3, [r7, #28]
 801eeae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801eeb0:	69fb      	ldr	r3, [r7, #28]
 801eeb2:	2200      	movs	r2, #0
 801eeb4:	719a      	strb	r2, [r3, #6]
 801eeb6:	2200      	movs	r2, #0
 801eeb8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801eeba:	4b31      	ldr	r3, [pc, #196]	; (801ef80 <ip4_output_if_src+0x170>)
 801eebc:	881b      	ldrh	r3, [r3, #0]
 801eebe:	4618      	mov	r0, r3
 801eec0:	f7fc f888 	bl	801afd4 <lwip_htons>
 801eec4:	4603      	mov	r3, r0
 801eec6:	461a      	mov	r2, r3
 801eec8:	69fb      	ldr	r3, [r7, #28]
 801eeca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801eecc:	4b2c      	ldr	r3, [pc, #176]	; (801ef80 <ip4_output_if_src+0x170>)
 801eece:	881b      	ldrh	r3, [r3, #0]
 801eed0:	3301      	adds	r3, #1
 801eed2:	b29a      	uxth	r2, r3
 801eed4:	4b2a      	ldr	r3, [pc, #168]	; (801ef80 <ip4_output_if_src+0x170>)
 801eed6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801eed8:	68bb      	ldr	r3, [r7, #8]
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d104      	bne.n	801eee8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801eede:	4b29      	ldr	r3, [pc, #164]	; (801ef84 <ip4_output_if_src+0x174>)
 801eee0:	681a      	ldr	r2, [r3, #0]
 801eee2:	69fb      	ldr	r3, [r7, #28]
 801eee4:	60da      	str	r2, [r3, #12]
 801eee6:	e003      	b.n	801eef0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801eee8:	68bb      	ldr	r3, [r7, #8]
 801eeea:	681a      	ldr	r2, [r3, #0]
 801eeec:	69fb      	ldr	r3, [r7, #28]
 801eeee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801eef0:	69fb      	ldr	r3, [r7, #28]
 801eef2:	2200      	movs	r2, #0
 801eef4:	729a      	strb	r2, [r3, #10]
 801eef6:	2200      	movs	r2, #0
 801eef8:	72da      	strb	r2, [r3, #11]
 801eefa:	e00f      	b.n	801ef1c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801eefc:	68fb      	ldr	r3, [r7, #12]
 801eefe:	895b      	ldrh	r3, [r3, #10]
 801ef00:	2b13      	cmp	r3, #19
 801ef02:	d802      	bhi.n	801ef0a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ef04:	f06f 0301 	mvn.w	r3, #1
 801ef08:	e02d      	b.n	801ef66 <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ef0a:	68fb      	ldr	r3, [r7, #12]
 801ef0c:	685b      	ldr	r3, [r3, #4]
 801ef0e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ef10:	69fb      	ldr	r3, [r7, #28]
 801ef12:	691b      	ldr	r3, [r3, #16]
 801ef14:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ef16:	f107 0314 	add.w	r3, r7, #20
 801ef1a:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	681a      	ldr	r2, [r3, #0]
 801ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef22:	3304      	adds	r3, #4
 801ef24:	681b      	ldr	r3, [r3, #0]
 801ef26:	429a      	cmp	r2, r3
 801ef28:	d105      	bne.n	801ef36 <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 801ef2a:	68f9      	ldr	r1, [r7, #12]
 801ef2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ef2e:	f7fd f86f 	bl	801c010 <netif_loop_output>
 801ef32:	4603      	mov	r3, r0
 801ef34:	e017      	b.n	801ef66 <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ef3a:	2b00      	cmp	r3, #0
 801ef3c:	d00c      	beq.n	801ef58 <ip4_output_if_src+0x148>
 801ef3e:	68fb      	ldr	r3, [r7, #12]
 801ef40:	891a      	ldrh	r2, [r3, #8]
 801ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ef46:	429a      	cmp	r2, r3
 801ef48:	d906      	bls.n	801ef58 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 801ef4a:	687a      	ldr	r2, [r7, #4]
 801ef4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ef4e:	68f8      	ldr	r0, [r7, #12]
 801ef50:	f000 fde4 	bl	801fb1c <ip4_frag>
 801ef54:	4603      	mov	r3, r0
 801ef56:	e006      	b.n	801ef66 <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef5a:	695b      	ldr	r3, [r3, #20]
 801ef5c:	687a      	ldr	r2, [r7, #4]
 801ef5e:	68f9      	ldr	r1, [r7, #12]
 801ef60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ef62:	4798      	blx	r3
 801ef64:	4603      	mov	r3, r0
}
 801ef66:	4618      	mov	r0, r3
 801ef68:	3720      	adds	r7, #32
 801ef6a:	46bd      	mov	sp, r7
 801ef6c:	bd80      	pop	{r7, pc}
 801ef6e:	bf00      	nop
 801ef70:	080261a4 	.word	0x080261a4
 801ef74:	080261d8 	.word	0x080261d8
 801ef78:	080261e4 	.word	0x080261e4
 801ef7c:	0802620c 	.word	0x0802620c
 801ef80:	20013686 	.word	0x20013686
 801ef84:	080269b0 	.word	0x080269b0

0801ef88 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ef88:	b480      	push	{r7}
 801ef8a:	b085      	sub	sp, #20
 801ef8c:	af00      	add	r7, sp, #0
 801ef8e:	6078      	str	r0, [r7, #4]
 801ef90:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef9c:	d002      	beq.n	801efa4 <ip4_addr_isbroadcast_u32+0x1c>
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d101      	bne.n	801efa8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801efa4:	2301      	movs	r3, #1
 801efa6:	e02a      	b.n	801effe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801efa8:	683b      	ldr	r3, [r7, #0]
 801efaa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801efae:	f003 0302 	and.w	r3, r3, #2
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d101      	bne.n	801efba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801efb6:	2300      	movs	r3, #0
 801efb8:	e021      	b.n	801effe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801efba:	683b      	ldr	r3, [r7, #0]
 801efbc:	3304      	adds	r3, #4
 801efbe:	681b      	ldr	r3, [r3, #0]
 801efc0:	687a      	ldr	r2, [r7, #4]
 801efc2:	429a      	cmp	r2, r3
 801efc4:	d101      	bne.n	801efca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801efc6:	2300      	movs	r3, #0
 801efc8:	e019      	b.n	801effe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801efca:	68fa      	ldr	r2, [r7, #12]
 801efcc:	683b      	ldr	r3, [r7, #0]
 801efce:	3304      	adds	r3, #4
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	405a      	eors	r2, r3
 801efd4:	683b      	ldr	r3, [r7, #0]
 801efd6:	3308      	adds	r3, #8
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	4013      	ands	r3, r2
 801efdc:	2b00      	cmp	r3, #0
 801efde:	d10d      	bne.n	801effc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801efe0:	683b      	ldr	r3, [r7, #0]
 801efe2:	3308      	adds	r3, #8
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	43da      	mvns	r2, r3
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801efec:	683b      	ldr	r3, [r7, #0]
 801efee:	3308      	adds	r3, #8
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801eff4:	429a      	cmp	r2, r3
 801eff6:	d101      	bne.n	801effc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801eff8:	2301      	movs	r3, #1
 801effa:	e000      	b.n	801effe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801effc:	2300      	movs	r3, #0
  }
}
 801effe:	4618      	mov	r0, r3
 801f000:	3714      	adds	r7, #20
 801f002:	46bd      	mov	sp, r7
 801f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f008:	4770      	bx	lr
	...

0801f00c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801f00c:	b580      	push	{r7, lr}
 801f00e:	b082      	sub	sp, #8
 801f010:	af00      	add	r7, sp, #0
 801f012:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801f014:	2210      	movs	r2, #16
 801f016:	4904      	ldr	r1, [pc, #16]	; (801f028 <ip4addr_ntoa+0x1c>)
 801f018:	6878      	ldr	r0, [r7, #4]
 801f01a:	f000 f807 	bl	801f02c <ip4addr_ntoa_r>
 801f01e:	4603      	mov	r3, r0
}
 801f020:	4618      	mov	r0, r3
 801f022:	3708      	adds	r7, #8
 801f024:	46bd      	mov	sp, r7
 801f026:	bd80      	pop	{r7, pc}
 801f028:	20013688 	.word	0x20013688

0801f02c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801f02c:	b480      	push	{r7}
 801f02e:	b08d      	sub	sp, #52	; 0x34
 801f030:	af00      	add	r7, sp, #0
 801f032:	60f8      	str	r0, [r7, #12]
 801f034:	60b9      	str	r1, [r7, #8]
 801f036:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801f038:	2300      	movs	r3, #0
 801f03a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801f03c:	68fb      	ldr	r3, [r7, #12]
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801f042:	68bb      	ldr	r3, [r7, #8]
 801f044:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801f046:	f107 0318 	add.w	r3, r7, #24
 801f04a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801f04c:	2300      	movs	r3, #0
 801f04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f052:	e058      	b.n	801f106 <ip4addr_ntoa_r+0xda>
    i = 0;
 801f054:	2300      	movs	r3, #0
 801f056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801f05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f05c:	781a      	ldrb	r2, [r3, #0]
 801f05e:	4b32      	ldr	r3, [pc, #200]	; (801f128 <ip4addr_ntoa_r+0xfc>)
 801f060:	fba3 1302 	umull	r1, r3, r3, r2
 801f064:	08d9      	lsrs	r1, r3, #3
 801f066:	460b      	mov	r3, r1
 801f068:	009b      	lsls	r3, r3, #2
 801f06a:	440b      	add	r3, r1
 801f06c:	005b      	lsls	r3, r3, #1
 801f06e:	1ad3      	subs	r3, r2, r3
 801f070:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f074:	781b      	ldrb	r3, [r3, #0]
 801f076:	4a2c      	ldr	r2, [pc, #176]	; (801f128 <ip4addr_ntoa_r+0xfc>)
 801f078:	fba2 2303 	umull	r2, r3, r2, r3
 801f07c:	08db      	lsrs	r3, r3, #3
 801f07e:	b2da      	uxtb	r2, r3
 801f080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f082:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801f084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f088:	1c5a      	adds	r2, r3, #1
 801f08a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801f08e:	4619      	mov	r1, r3
 801f090:	7ffb      	ldrb	r3, [r7, #31]
 801f092:	3330      	adds	r3, #48	; 0x30
 801f094:	b2da      	uxtb	r2, r3
 801f096:	f101 0330 	add.w	r3, r1, #48	; 0x30
 801f09a:	443b      	add	r3, r7
 801f09c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801f0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0a2:	781b      	ldrb	r3, [r3, #0]
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	d1d8      	bne.n	801f05a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801f0a8:	e011      	b.n	801f0ce <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801f0aa:	6a3b      	ldr	r3, [r7, #32]
 801f0ac:	1c5a      	adds	r2, r3, #1
 801f0ae:	623a      	str	r2, [r7, #32]
 801f0b0:	687a      	ldr	r2, [r7, #4]
 801f0b2:	429a      	cmp	r2, r3
 801f0b4:	dc01      	bgt.n	801f0ba <ip4addr_ntoa_r+0x8e>
        return NULL;
 801f0b6:	2300      	movs	r3, #0
 801f0b8:	e030      	b.n	801f11c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801f0ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f0c0:	1c59      	adds	r1, r3, #1
 801f0c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f0c4:	3230      	adds	r2, #48	; 0x30
 801f0c6:	443a      	add	r2, r7
 801f0c8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801f0cc:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801f0ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f0d2:	1e5a      	subs	r2, r3, #1
 801f0d4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d1e6      	bne.n	801f0aa <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801f0dc:	6a3b      	ldr	r3, [r7, #32]
 801f0de:	1c5a      	adds	r2, r3, #1
 801f0e0:	623a      	str	r2, [r7, #32]
 801f0e2:	687a      	ldr	r2, [r7, #4]
 801f0e4:	429a      	cmp	r2, r3
 801f0e6:	dc01      	bgt.n	801f0ec <ip4addr_ntoa_r+0xc0>
      return NULL;
 801f0e8:	2300      	movs	r3, #0
 801f0ea:	e017      	b.n	801f11c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f0ee:	1c5a      	adds	r2, r3, #1
 801f0f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f0f2:	222e      	movs	r2, #46	; 0x2e
 801f0f4:	701a      	strb	r2, [r3, #0]
    ap++;
 801f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0f8:	3301      	adds	r3, #1
 801f0fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801f0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f100:	3301      	adds	r3, #1
 801f102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f10a:	2b03      	cmp	r3, #3
 801f10c:	d9a2      	bls.n	801f054 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801f10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f110:	3b01      	subs	r3, #1
 801f112:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f116:	2200      	movs	r2, #0
 801f118:	701a      	strb	r2, [r3, #0]
  return buf;
 801f11a:	68bb      	ldr	r3, [r7, #8]
}
 801f11c:	4618      	mov	r0, r3
 801f11e:	3734      	adds	r7, #52	; 0x34
 801f120:	46bd      	mov	sp, r7
 801f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f126:	4770      	bx	lr
 801f128:	cccccccd 	.word	0xcccccccd

0801f12c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801f12c:	b580      	push	{r7, lr}
 801f12e:	b084      	sub	sp, #16
 801f130:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801f132:	2300      	movs	r3, #0
 801f134:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801f136:	4b12      	ldr	r3, [pc, #72]	; (801f180 <ip_reass_tmr+0x54>)
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801f13c:	e018      	b.n	801f170 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801f13e:	68fb      	ldr	r3, [r7, #12]
 801f140:	7fdb      	ldrb	r3, [r3, #31]
 801f142:	2b00      	cmp	r3, #0
 801f144:	d00b      	beq.n	801f15e <ip_reass_tmr+0x32>
      r->timer--;
 801f146:	68fb      	ldr	r3, [r7, #12]
 801f148:	7fdb      	ldrb	r3, [r3, #31]
 801f14a:	3b01      	subs	r3, #1
 801f14c:	b2da      	uxtb	r2, r3
 801f14e:	68fb      	ldr	r3, [r7, #12]
 801f150:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801f152:	68fb      	ldr	r3, [r7, #12]
 801f154:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801f156:	68fb      	ldr	r3, [r7, #12]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	60fb      	str	r3, [r7, #12]
 801f15c:	e008      	b.n	801f170 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801f162:	68fb      	ldr	r3, [r7, #12]
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801f168:	68b9      	ldr	r1, [r7, #8]
 801f16a:	6878      	ldr	r0, [r7, #4]
 801f16c:	f000 f80a 	bl	801f184 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801f170:	68fb      	ldr	r3, [r7, #12]
 801f172:	2b00      	cmp	r3, #0
 801f174:	d1e3      	bne.n	801f13e <ip_reass_tmr+0x12>
    }
  }
}
 801f176:	bf00      	nop
 801f178:	bf00      	nop
 801f17a:	3710      	adds	r7, #16
 801f17c:	46bd      	mov	sp, r7
 801f17e:	bd80      	pop	{r7, pc}
 801f180:	20013698 	.word	0x20013698

0801f184 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f184:	b580      	push	{r7, lr}
 801f186:	b088      	sub	sp, #32
 801f188:	af00      	add	r7, sp, #0
 801f18a:	6078      	str	r0, [r7, #4]
 801f18c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801f18e:	2300      	movs	r3, #0
 801f190:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801f192:	683a      	ldr	r2, [r7, #0]
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	429a      	cmp	r2, r3
 801f198:	d105      	bne.n	801f1a6 <ip_reass_free_complete_datagram+0x22>
 801f19a:	4b45      	ldr	r3, [pc, #276]	; (801f2b0 <ip_reass_free_complete_datagram+0x12c>)
 801f19c:	22ab      	movs	r2, #171	; 0xab
 801f19e:	4945      	ldr	r1, [pc, #276]	; (801f2b4 <ip_reass_free_complete_datagram+0x130>)
 801f1a0:	4845      	ldr	r0, [pc, #276]	; (801f2b8 <ip_reass_free_complete_datagram+0x134>)
 801f1a2:	f001 f82b 	bl	80201fc <iprintf>
  if (prev != NULL) {
 801f1a6:	683b      	ldr	r3, [r7, #0]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d00a      	beq.n	801f1c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801f1ac:	683b      	ldr	r3, [r7, #0]
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	687a      	ldr	r2, [r7, #4]
 801f1b2:	429a      	cmp	r2, r3
 801f1b4:	d005      	beq.n	801f1c2 <ip_reass_free_complete_datagram+0x3e>
 801f1b6:	4b3e      	ldr	r3, [pc, #248]	; (801f2b0 <ip_reass_free_complete_datagram+0x12c>)
 801f1b8:	22ad      	movs	r2, #173	; 0xad
 801f1ba:	4940      	ldr	r1, [pc, #256]	; (801f2bc <ip_reass_free_complete_datagram+0x138>)
 801f1bc:	483e      	ldr	r0, [pc, #248]	; (801f2b8 <ip_reass_free_complete_datagram+0x134>)
 801f1be:	f001 f81d 	bl	80201fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	685b      	ldr	r3, [r3, #4]
 801f1c6:	685b      	ldr	r3, [r3, #4]
 801f1c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801f1ca:	697b      	ldr	r3, [r7, #20]
 801f1cc:	889b      	ldrh	r3, [r3, #4]
 801f1ce:	b29b      	uxth	r3, r3
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d12a      	bne.n	801f22a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	685b      	ldr	r3, [r3, #4]
 801f1d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801f1da:	697b      	ldr	r3, [r7, #20]
 801f1dc:	681a      	ldr	r2, [r3, #0]
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801f1e2:	69bb      	ldr	r3, [r7, #24]
 801f1e4:	6858      	ldr	r0, [r3, #4]
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	3308      	adds	r3, #8
 801f1ea:	2214      	movs	r2, #20
 801f1ec:	4619      	mov	r1, r3
 801f1ee:	f000 fef5 	bl	801ffdc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801f1f2:	2101      	movs	r1, #1
 801f1f4:	69b8      	ldr	r0, [r7, #24]
 801f1f6:	f7ff fbb3 	bl	801e960 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801f1fa:	69b8      	ldr	r0, [r7, #24]
 801f1fc:	f7fd fb4e 	bl	801c89c <pbuf_clen>
 801f200:	4603      	mov	r3, r0
 801f202:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f204:	8bfa      	ldrh	r2, [r7, #30]
 801f206:	8a7b      	ldrh	r3, [r7, #18]
 801f208:	4413      	add	r3, r2
 801f20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f20e:	db05      	blt.n	801f21c <ip_reass_free_complete_datagram+0x98>
 801f210:	4b27      	ldr	r3, [pc, #156]	; (801f2b0 <ip_reass_free_complete_datagram+0x12c>)
 801f212:	22bc      	movs	r2, #188	; 0xbc
 801f214:	492a      	ldr	r1, [pc, #168]	; (801f2c0 <ip_reass_free_complete_datagram+0x13c>)
 801f216:	4828      	ldr	r0, [pc, #160]	; (801f2b8 <ip_reass_free_complete_datagram+0x134>)
 801f218:	f000 fff0 	bl	80201fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f21c:	8bfa      	ldrh	r2, [r7, #30]
 801f21e:	8a7b      	ldrh	r3, [r7, #18]
 801f220:	4413      	add	r3, r2
 801f222:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801f224:	69b8      	ldr	r0, [r7, #24]
 801f226:	f7fd fab1 	bl	801c78c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	685b      	ldr	r3, [r3, #4]
 801f22e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801f230:	e01f      	b.n	801f272 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801f232:	69bb      	ldr	r3, [r7, #24]
 801f234:	685b      	ldr	r3, [r3, #4]
 801f236:	617b      	str	r3, [r7, #20]
    pcur = p;
 801f238:	69bb      	ldr	r3, [r7, #24]
 801f23a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801f23c:	697b      	ldr	r3, [r7, #20]
 801f23e:	681b      	ldr	r3, [r3, #0]
 801f240:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801f242:	68f8      	ldr	r0, [r7, #12]
 801f244:	f7fd fb2a 	bl	801c89c <pbuf_clen>
 801f248:	4603      	mov	r3, r0
 801f24a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f24c:	8bfa      	ldrh	r2, [r7, #30]
 801f24e:	8a7b      	ldrh	r3, [r7, #18]
 801f250:	4413      	add	r3, r2
 801f252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f256:	db05      	blt.n	801f264 <ip_reass_free_complete_datagram+0xe0>
 801f258:	4b15      	ldr	r3, [pc, #84]	; (801f2b0 <ip_reass_free_complete_datagram+0x12c>)
 801f25a:	22cc      	movs	r2, #204	; 0xcc
 801f25c:	4918      	ldr	r1, [pc, #96]	; (801f2c0 <ip_reass_free_complete_datagram+0x13c>)
 801f25e:	4816      	ldr	r0, [pc, #88]	; (801f2b8 <ip_reass_free_complete_datagram+0x134>)
 801f260:	f000 ffcc 	bl	80201fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f264:	8bfa      	ldrh	r2, [r7, #30]
 801f266:	8a7b      	ldrh	r3, [r7, #18]
 801f268:	4413      	add	r3, r2
 801f26a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801f26c:	68f8      	ldr	r0, [r7, #12]
 801f26e:	f7fd fa8d 	bl	801c78c <pbuf_free>
  while (p != NULL) {
 801f272:	69bb      	ldr	r3, [r7, #24]
 801f274:	2b00      	cmp	r3, #0
 801f276:	d1dc      	bne.n	801f232 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801f278:	6839      	ldr	r1, [r7, #0]
 801f27a:	6878      	ldr	r0, [r7, #4]
 801f27c:	f000 f8c2 	bl	801f404 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801f280:	4b10      	ldr	r3, [pc, #64]	; (801f2c4 <ip_reass_free_complete_datagram+0x140>)
 801f282:	881b      	ldrh	r3, [r3, #0]
 801f284:	8bfa      	ldrh	r2, [r7, #30]
 801f286:	429a      	cmp	r2, r3
 801f288:	d905      	bls.n	801f296 <ip_reass_free_complete_datagram+0x112>
 801f28a:	4b09      	ldr	r3, [pc, #36]	; (801f2b0 <ip_reass_free_complete_datagram+0x12c>)
 801f28c:	22d2      	movs	r2, #210	; 0xd2
 801f28e:	490e      	ldr	r1, [pc, #56]	; (801f2c8 <ip_reass_free_complete_datagram+0x144>)
 801f290:	4809      	ldr	r0, [pc, #36]	; (801f2b8 <ip_reass_free_complete_datagram+0x134>)
 801f292:	f000 ffb3 	bl	80201fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801f296:	4b0b      	ldr	r3, [pc, #44]	; (801f2c4 <ip_reass_free_complete_datagram+0x140>)
 801f298:	881a      	ldrh	r2, [r3, #0]
 801f29a:	8bfb      	ldrh	r3, [r7, #30]
 801f29c:	1ad3      	subs	r3, r2, r3
 801f29e:	b29a      	uxth	r2, r3
 801f2a0:	4b08      	ldr	r3, [pc, #32]	; (801f2c4 <ip_reass_free_complete_datagram+0x140>)
 801f2a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801f2a4:	8bfb      	ldrh	r3, [r7, #30]
}
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	3720      	adds	r7, #32
 801f2aa:	46bd      	mov	sp, r7
 801f2ac:	bd80      	pop	{r7, pc}
 801f2ae:	bf00      	nop
 801f2b0:	0802623c 	.word	0x0802623c
 801f2b4:	08026278 	.word	0x08026278
 801f2b8:	08026284 	.word	0x08026284
 801f2bc:	080262ac 	.word	0x080262ac
 801f2c0:	080262c0 	.word	0x080262c0
 801f2c4:	2001369c 	.word	0x2001369c
 801f2c8:	080262e0 	.word	0x080262e0

0801f2cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801f2cc:	b580      	push	{r7, lr}
 801f2ce:	b08a      	sub	sp, #40	; 0x28
 801f2d0:	af00      	add	r7, sp, #0
 801f2d2:	6078      	str	r0, [r7, #4]
 801f2d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801f2d6:	2300      	movs	r3, #0
 801f2d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801f2da:	2300      	movs	r3, #0
 801f2dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801f2de:	2300      	movs	r3, #0
 801f2e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801f2e6:	2300      	movs	r3, #0
 801f2e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801f2ea:	4b28      	ldr	r3, [pc, #160]	; (801f38c <ip_reass_remove_oldest_datagram+0xc0>)
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801f2f0:	e030      	b.n	801f354 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2f4:	695a      	ldr	r2, [r3, #20]
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	68db      	ldr	r3, [r3, #12]
 801f2fa:	429a      	cmp	r2, r3
 801f2fc:	d10c      	bne.n	801f318 <ip_reass_remove_oldest_datagram+0x4c>
 801f2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f300:	699a      	ldr	r2, [r3, #24]
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	691b      	ldr	r3, [r3, #16]
 801f306:	429a      	cmp	r2, r3
 801f308:	d106      	bne.n	801f318 <ip_reass_remove_oldest_datagram+0x4c>
 801f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f30c:	899a      	ldrh	r2, [r3, #12]
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	889b      	ldrh	r3, [r3, #4]
 801f312:	b29b      	uxth	r3, r3
 801f314:	429a      	cmp	r2, r3
 801f316:	d014      	beq.n	801f342 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801f318:	693b      	ldr	r3, [r7, #16]
 801f31a:	3301      	adds	r3, #1
 801f31c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801f31e:	6a3b      	ldr	r3, [r7, #32]
 801f320:	2b00      	cmp	r3, #0
 801f322:	d104      	bne.n	801f32e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f326:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f328:	69fb      	ldr	r3, [r7, #28]
 801f32a:	61bb      	str	r3, [r7, #24]
 801f32c:	e009      	b.n	801f342 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801f32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f330:	7fda      	ldrb	r2, [r3, #31]
 801f332:	6a3b      	ldr	r3, [r7, #32]
 801f334:	7fdb      	ldrb	r3, [r3, #31]
 801f336:	429a      	cmp	r2, r3
 801f338:	d803      	bhi.n	801f342 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f33c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f33e:	69fb      	ldr	r3, [r7, #28]
 801f340:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801f342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	2b00      	cmp	r3, #0
 801f348:	d001      	beq.n	801f34e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f34c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801f34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f356:	2b00      	cmp	r3, #0
 801f358:	d1cb      	bne.n	801f2f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801f35a:	6a3b      	ldr	r3, [r7, #32]
 801f35c:	2b00      	cmp	r3, #0
 801f35e:	d008      	beq.n	801f372 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801f360:	69b9      	ldr	r1, [r7, #24]
 801f362:	6a38      	ldr	r0, [r7, #32]
 801f364:	f7ff ff0e 	bl	801f184 <ip_reass_free_complete_datagram>
 801f368:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801f36a:	697a      	ldr	r2, [r7, #20]
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	4413      	add	r3, r2
 801f370:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801f372:	697a      	ldr	r2, [r7, #20]
 801f374:	683b      	ldr	r3, [r7, #0]
 801f376:	429a      	cmp	r2, r3
 801f378:	da02      	bge.n	801f380 <ip_reass_remove_oldest_datagram+0xb4>
 801f37a:	693b      	ldr	r3, [r7, #16]
 801f37c:	2b01      	cmp	r3, #1
 801f37e:	dcac      	bgt.n	801f2da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801f380:	697b      	ldr	r3, [r7, #20]
}
 801f382:	4618      	mov	r0, r3
 801f384:	3728      	adds	r7, #40	; 0x28
 801f386:	46bd      	mov	sp, r7
 801f388:	bd80      	pop	{r7, pc}
 801f38a:	bf00      	nop
 801f38c:	20013698 	.word	0x20013698

0801f390 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801f390:	b580      	push	{r7, lr}
 801f392:	b084      	sub	sp, #16
 801f394:	af00      	add	r7, sp, #0
 801f396:	6078      	str	r0, [r7, #4]
 801f398:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f39a:	2001      	movs	r0, #1
 801f39c:	f7fc fa76 	bl	801b88c <memp_malloc>
 801f3a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d110      	bne.n	801f3ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801f3a8:	6839      	ldr	r1, [r7, #0]
 801f3aa:	6878      	ldr	r0, [r7, #4]
 801f3ac:	f7ff ff8e 	bl	801f2cc <ip_reass_remove_oldest_datagram>
 801f3b0:	4602      	mov	r2, r0
 801f3b2:	683b      	ldr	r3, [r7, #0]
 801f3b4:	4293      	cmp	r3, r2
 801f3b6:	dc03      	bgt.n	801f3c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f3b8:	2001      	movs	r0, #1
 801f3ba:	f7fc fa67 	bl	801b88c <memp_malloc>
 801f3be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801f3c0:	68fb      	ldr	r3, [r7, #12]
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d101      	bne.n	801f3ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801f3c6:	2300      	movs	r3, #0
 801f3c8:	e016      	b.n	801f3f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f3ca:	2220      	movs	r2, #32
 801f3cc:	2100      	movs	r1, #0
 801f3ce:	68f8      	ldr	r0, [r7, #12]
 801f3d0:	f000 fe2c 	bl	802002c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801f3d4:	68fb      	ldr	r3, [r7, #12]
 801f3d6:	220f      	movs	r2, #15
 801f3d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801f3da:	4b09      	ldr	r3, [pc, #36]	; (801f400 <ip_reass_enqueue_new_datagram+0x70>)
 801f3dc:	681a      	ldr	r2, [r3, #0]
 801f3de:	68fb      	ldr	r3, [r7, #12]
 801f3e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801f3e2:	4a07      	ldr	r2, [pc, #28]	; (801f400 <ip_reass_enqueue_new_datagram+0x70>)
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	3308      	adds	r3, #8
 801f3ec:	2214      	movs	r2, #20
 801f3ee:	6879      	ldr	r1, [r7, #4]
 801f3f0:	4618      	mov	r0, r3
 801f3f2:	f000 fdf3 	bl	801ffdc <memcpy>
  return ipr;
 801f3f6:	68fb      	ldr	r3, [r7, #12]
}
 801f3f8:	4618      	mov	r0, r3
 801f3fa:	3710      	adds	r7, #16
 801f3fc:	46bd      	mov	sp, r7
 801f3fe:	bd80      	pop	{r7, pc}
 801f400:	20013698 	.word	0x20013698

0801f404 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f404:	b580      	push	{r7, lr}
 801f406:	b082      	sub	sp, #8
 801f408:	af00      	add	r7, sp, #0
 801f40a:	6078      	str	r0, [r7, #4]
 801f40c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801f40e:	4b10      	ldr	r3, [pc, #64]	; (801f450 <ip_reass_dequeue_datagram+0x4c>)
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	687a      	ldr	r2, [r7, #4]
 801f414:	429a      	cmp	r2, r3
 801f416:	d104      	bne.n	801f422 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	4a0c      	ldr	r2, [pc, #48]	; (801f450 <ip_reass_dequeue_datagram+0x4c>)
 801f41e:	6013      	str	r3, [r2, #0]
 801f420:	e00d      	b.n	801f43e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f422:	683b      	ldr	r3, [r7, #0]
 801f424:	2b00      	cmp	r3, #0
 801f426:	d106      	bne.n	801f436 <ip_reass_dequeue_datagram+0x32>
 801f428:	4b0a      	ldr	r3, [pc, #40]	; (801f454 <ip_reass_dequeue_datagram+0x50>)
 801f42a:	f240 1245 	movw	r2, #325	; 0x145
 801f42e:	490a      	ldr	r1, [pc, #40]	; (801f458 <ip_reass_dequeue_datagram+0x54>)
 801f430:	480a      	ldr	r0, [pc, #40]	; (801f45c <ip_reass_dequeue_datagram+0x58>)
 801f432:	f000 fee3 	bl	80201fc <iprintf>
    prev->next = ipr->next;
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	681a      	ldr	r2, [r3, #0]
 801f43a:	683b      	ldr	r3, [r7, #0]
 801f43c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801f43e:	6879      	ldr	r1, [r7, #4]
 801f440:	2001      	movs	r0, #1
 801f442:	f7fc fa93 	bl	801b96c <memp_free>
}
 801f446:	bf00      	nop
 801f448:	3708      	adds	r7, #8
 801f44a:	46bd      	mov	sp, r7
 801f44c:	bd80      	pop	{r7, pc}
 801f44e:	bf00      	nop
 801f450:	20013698 	.word	0x20013698
 801f454:	0802623c 	.word	0x0802623c
 801f458:	08026304 	.word	0x08026304
 801f45c:	08026284 	.word	0x08026284

0801f460 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801f460:	b580      	push	{r7, lr}
 801f462:	b08c      	sub	sp, #48	; 0x30
 801f464:	af00      	add	r7, sp, #0
 801f466:	60f8      	str	r0, [r7, #12]
 801f468:	60b9      	str	r1, [r7, #8]
 801f46a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801f46c:	2300      	movs	r3, #0
 801f46e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801f470:	2301      	movs	r3, #1
 801f472:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801f474:	68bb      	ldr	r3, [r7, #8]
 801f476:	685b      	ldr	r3, [r3, #4]
 801f478:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f47a:	69fb      	ldr	r3, [r7, #28]
 801f47c:	885b      	ldrh	r3, [r3, #2]
 801f47e:	b29b      	uxth	r3, r3
 801f480:	4618      	mov	r0, r3
 801f482:	f7fb fda7 	bl	801afd4 <lwip_htons>
 801f486:	4603      	mov	r3, r0
 801f488:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801f48a:	69fb      	ldr	r3, [r7, #28]
 801f48c:	781b      	ldrb	r3, [r3, #0]
 801f48e:	f003 030f 	and.w	r3, r3, #15
 801f492:	b2db      	uxtb	r3, r3
 801f494:	009b      	lsls	r3, r3, #2
 801f496:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801f498:	7e7b      	ldrb	r3, [r7, #25]
 801f49a:	b29b      	uxth	r3, r3
 801f49c:	8b7a      	ldrh	r2, [r7, #26]
 801f49e:	429a      	cmp	r2, r3
 801f4a0:	d202      	bcs.n	801f4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f4a2:	f04f 33ff 	mov.w	r3, #4294967295
 801f4a6:	e135      	b.n	801f714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801f4a8:	7e7b      	ldrb	r3, [r7, #25]
 801f4aa:	b29b      	uxth	r3, r3
 801f4ac:	8b7a      	ldrh	r2, [r7, #26]
 801f4ae:	1ad3      	subs	r3, r2, r3
 801f4b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f4b2:	69fb      	ldr	r3, [r7, #28]
 801f4b4:	88db      	ldrh	r3, [r3, #6]
 801f4b6:	b29b      	uxth	r3, r3
 801f4b8:	4618      	mov	r0, r3
 801f4ba:	f7fb fd8b 	bl	801afd4 <lwip_htons>
 801f4be:	4603      	mov	r3, r0
 801f4c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f4c4:	b29b      	uxth	r3, r3
 801f4c6:	00db      	lsls	r3, r3, #3
 801f4c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801f4ca:	68bb      	ldr	r3, [r7, #8]
 801f4cc:	685b      	ldr	r3, [r3, #4]
 801f4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801f4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	701a      	strb	r2, [r3, #0]
 801f4d6:	2200      	movs	r2, #0
 801f4d8:	705a      	strb	r2, [r3, #1]
 801f4da:	2200      	movs	r2, #0
 801f4dc:	709a      	strb	r2, [r3, #2]
 801f4de:	2200      	movs	r2, #0
 801f4e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801f4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4e4:	8afa      	ldrh	r2, [r7, #22]
 801f4e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801f4e8:	8afa      	ldrh	r2, [r7, #22]
 801f4ea:	8b7b      	ldrh	r3, [r7, #26]
 801f4ec:	4413      	add	r3, r2
 801f4ee:	b29a      	uxth	r2, r3
 801f4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801f4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4f6:	88db      	ldrh	r3, [r3, #6]
 801f4f8:	b29b      	uxth	r3, r3
 801f4fa:	8afa      	ldrh	r2, [r7, #22]
 801f4fc:	429a      	cmp	r2, r3
 801f4fe:	d902      	bls.n	801f506 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f500:	f04f 33ff 	mov.w	r3, #4294967295
 801f504:	e106      	b.n	801f714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801f506:	68fb      	ldr	r3, [r7, #12]
 801f508:	685b      	ldr	r3, [r3, #4]
 801f50a:	627b      	str	r3, [r7, #36]	; 0x24
 801f50c:	e068      	b.n	801f5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f510:	685b      	ldr	r3, [r3, #4]
 801f512:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801f514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f516:	889b      	ldrh	r3, [r3, #4]
 801f518:	b29a      	uxth	r2, r3
 801f51a:	693b      	ldr	r3, [r7, #16]
 801f51c:	889b      	ldrh	r3, [r3, #4]
 801f51e:	b29b      	uxth	r3, r3
 801f520:	429a      	cmp	r2, r3
 801f522:	d235      	bcs.n	801f590 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801f524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f528:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801f52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	d020      	beq.n	801f572 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801f530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f532:	889b      	ldrh	r3, [r3, #4]
 801f534:	b29a      	uxth	r2, r3
 801f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f538:	88db      	ldrh	r3, [r3, #6]
 801f53a:	b29b      	uxth	r3, r3
 801f53c:	429a      	cmp	r2, r3
 801f53e:	d307      	bcc.n	801f550 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801f540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f542:	88db      	ldrh	r3, [r3, #6]
 801f544:	b29a      	uxth	r2, r3
 801f546:	693b      	ldr	r3, [r7, #16]
 801f548:	889b      	ldrh	r3, [r3, #4]
 801f54a:	b29b      	uxth	r3, r3
 801f54c:	429a      	cmp	r2, r3
 801f54e:	d902      	bls.n	801f556 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f550:	f04f 33ff 	mov.w	r3, #4294967295
 801f554:	e0de      	b.n	801f714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801f556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f558:	68ba      	ldr	r2, [r7, #8]
 801f55a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f55e:	88db      	ldrh	r3, [r3, #6]
 801f560:	b29a      	uxth	r2, r3
 801f562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f564:	889b      	ldrh	r3, [r3, #4]
 801f566:	b29b      	uxth	r3, r3
 801f568:	429a      	cmp	r2, r3
 801f56a:	d03d      	beq.n	801f5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f56c:	2300      	movs	r3, #0
 801f56e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801f570:	e03a      	b.n	801f5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f574:	88db      	ldrh	r3, [r3, #6]
 801f576:	b29a      	uxth	r2, r3
 801f578:	693b      	ldr	r3, [r7, #16]
 801f57a:	889b      	ldrh	r3, [r3, #4]
 801f57c:	b29b      	uxth	r3, r3
 801f57e:	429a      	cmp	r2, r3
 801f580:	d902      	bls.n	801f588 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f582:	f04f 33ff 	mov.w	r3, #4294967295
 801f586:	e0c5      	b.n	801f714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801f588:	68fb      	ldr	r3, [r7, #12]
 801f58a:	68ba      	ldr	r2, [r7, #8]
 801f58c:	605a      	str	r2, [r3, #4]
      break;
 801f58e:	e02b      	b.n	801f5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801f590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f592:	889b      	ldrh	r3, [r3, #4]
 801f594:	b29a      	uxth	r2, r3
 801f596:	693b      	ldr	r3, [r7, #16]
 801f598:	889b      	ldrh	r3, [r3, #4]
 801f59a:	b29b      	uxth	r3, r3
 801f59c:	429a      	cmp	r2, r3
 801f59e:	d102      	bne.n	801f5a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f5a0:	f04f 33ff 	mov.w	r3, #4294967295
 801f5a4:	e0b6      	b.n	801f714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801f5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5a8:	889b      	ldrh	r3, [r3, #4]
 801f5aa:	b29a      	uxth	r2, r3
 801f5ac:	693b      	ldr	r3, [r7, #16]
 801f5ae:	88db      	ldrh	r3, [r3, #6]
 801f5b0:	b29b      	uxth	r3, r3
 801f5b2:	429a      	cmp	r2, r3
 801f5b4:	d202      	bcs.n	801f5bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f5b6:	f04f 33ff 	mov.w	r3, #4294967295
 801f5ba:	e0ab      	b.n	801f714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801f5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	d009      	beq.n	801f5d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801f5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5c4:	88db      	ldrh	r3, [r3, #6]
 801f5c6:	b29a      	uxth	r2, r3
 801f5c8:	693b      	ldr	r3, [r7, #16]
 801f5ca:	889b      	ldrh	r3, [r3, #4]
 801f5cc:	b29b      	uxth	r3, r3
 801f5ce:	429a      	cmp	r2, r3
 801f5d0:	d001      	beq.n	801f5d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f5d2:	2300      	movs	r3, #0
 801f5d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801f5d6:	693b      	ldr	r3, [r7, #16]
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801f5dc:	693b      	ldr	r3, [r7, #16]
 801f5de:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801f5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	d193      	bne.n	801f50e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801f5e6:	e000      	b.n	801f5ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801f5e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	d12d      	bne.n	801f64c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801f5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d01c      	beq.n	801f630 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801f5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5f8:	88db      	ldrh	r3, [r3, #6]
 801f5fa:	b29a      	uxth	r2, r3
 801f5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5fe:	889b      	ldrh	r3, [r3, #4]
 801f600:	b29b      	uxth	r3, r3
 801f602:	429a      	cmp	r2, r3
 801f604:	d906      	bls.n	801f614 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801f606:	4b45      	ldr	r3, [pc, #276]	; (801f71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f608:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801f60c:	4944      	ldr	r1, [pc, #272]	; (801f720 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f60e:	4845      	ldr	r0, [pc, #276]	; (801f724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f610:	f000 fdf4 	bl	80201fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f616:	68ba      	ldr	r2, [r7, #8]
 801f618:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801f61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f61c:	88db      	ldrh	r3, [r3, #6]
 801f61e:	b29a      	uxth	r2, r3
 801f620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f622:	889b      	ldrh	r3, [r3, #4]
 801f624:	b29b      	uxth	r3, r3
 801f626:	429a      	cmp	r2, r3
 801f628:	d010      	beq.n	801f64c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801f62a:	2300      	movs	r3, #0
 801f62c:	623b      	str	r3, [r7, #32]
 801f62e:	e00d      	b.n	801f64c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801f630:	68fb      	ldr	r3, [r7, #12]
 801f632:	685b      	ldr	r3, [r3, #4]
 801f634:	2b00      	cmp	r3, #0
 801f636:	d006      	beq.n	801f646 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801f638:	4b38      	ldr	r3, [pc, #224]	; (801f71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f63a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801f63e:	493a      	ldr	r1, [pc, #232]	; (801f728 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801f640:	4838      	ldr	r0, [pc, #224]	; (801f724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f642:	f000 fddb 	bl	80201fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801f646:	68fb      	ldr	r3, [r7, #12]
 801f648:	68ba      	ldr	r2, [r7, #8]
 801f64a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	d105      	bne.n	801f65e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801f652:	68fb      	ldr	r3, [r7, #12]
 801f654:	7f9b      	ldrb	r3, [r3, #30]
 801f656:	f003 0301 	and.w	r3, r3, #1
 801f65a:	2b00      	cmp	r3, #0
 801f65c:	d059      	beq.n	801f712 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801f65e:	6a3b      	ldr	r3, [r7, #32]
 801f660:	2b00      	cmp	r3, #0
 801f662:	d04f      	beq.n	801f704 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	685b      	ldr	r3, [r3, #4]
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d006      	beq.n	801f67a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	685b      	ldr	r3, [r3, #4]
 801f670:	685b      	ldr	r3, [r3, #4]
 801f672:	889b      	ldrh	r3, [r3, #4]
 801f674:	b29b      	uxth	r3, r3
 801f676:	2b00      	cmp	r3, #0
 801f678:	d002      	beq.n	801f680 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801f67a:	2300      	movs	r3, #0
 801f67c:	623b      	str	r3, [r7, #32]
 801f67e:	e041      	b.n	801f704 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801f680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f682:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801f684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f68a:	e012      	b.n	801f6b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f68e:	685b      	ldr	r3, [r3, #4]
 801f690:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f694:	88db      	ldrh	r3, [r3, #6]
 801f696:	b29a      	uxth	r2, r3
 801f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f69a:	889b      	ldrh	r3, [r3, #4]
 801f69c:	b29b      	uxth	r3, r3
 801f69e:	429a      	cmp	r2, r3
 801f6a0:	d002      	beq.n	801f6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801f6a2:	2300      	movs	r3, #0
 801f6a4:	623b      	str	r3, [r7, #32]
            break;
 801f6a6:	e007      	b.n	801f6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6aa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801f6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6ae:	681b      	ldr	r3, [r3, #0]
 801f6b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d1e9      	bne.n	801f68c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801f6b8:	6a3b      	ldr	r3, [r7, #32]
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	d022      	beq.n	801f704 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801f6be:	68fb      	ldr	r3, [r7, #12]
 801f6c0:	685b      	ldr	r3, [r3, #4]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d106      	bne.n	801f6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801f6c6:	4b15      	ldr	r3, [pc, #84]	; (801f71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f6c8:	f240 12df 	movw	r2, #479	; 0x1df
 801f6cc:	4917      	ldr	r1, [pc, #92]	; (801f72c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f6ce:	4815      	ldr	r0, [pc, #84]	; (801f724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f6d0:	f000 fd94 	bl	80201fc <iprintf>
          LWIP_ASSERT("sanity check",
 801f6d4:	68fb      	ldr	r3, [r7, #12]
 801f6d6:	685b      	ldr	r3, [r3, #4]
 801f6d8:	685b      	ldr	r3, [r3, #4]
 801f6da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f6dc:	429a      	cmp	r2, r3
 801f6de:	d106      	bne.n	801f6ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801f6e0:	4b0e      	ldr	r3, [pc, #56]	; (801f71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f6e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801f6e6:	4911      	ldr	r1, [pc, #68]	; (801f72c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f6e8:	480e      	ldr	r0, [pc, #56]	; (801f724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f6ea:	f000 fd87 	bl	80201fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801f6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d006      	beq.n	801f704 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801f6f6:	4b09      	ldr	r3, [pc, #36]	; (801f71c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f6f8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801f6fc:	490c      	ldr	r1, [pc, #48]	; (801f730 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f6fe:	4809      	ldr	r0, [pc, #36]	; (801f724 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f700:	f000 fd7c 	bl	80201fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801f704:	6a3b      	ldr	r3, [r7, #32]
 801f706:	2b00      	cmp	r3, #0
 801f708:	bf14      	ite	ne
 801f70a:	2301      	movne	r3, #1
 801f70c:	2300      	moveq	r3, #0
 801f70e:	b2db      	uxtb	r3, r3
 801f710:	e000      	b.n	801f714 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801f712:	2300      	movs	r3, #0
}
 801f714:	4618      	mov	r0, r3
 801f716:	3730      	adds	r7, #48	; 0x30
 801f718:	46bd      	mov	sp, r7
 801f71a:	bd80      	pop	{r7, pc}
 801f71c:	0802623c 	.word	0x0802623c
 801f720:	08026320 	.word	0x08026320
 801f724:	08026284 	.word	0x08026284
 801f728:	08026340 	.word	0x08026340
 801f72c:	08026378 	.word	0x08026378
 801f730:	08026388 	.word	0x08026388

0801f734 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801f734:	b580      	push	{r7, lr}
 801f736:	b08e      	sub	sp, #56	; 0x38
 801f738:	af00      	add	r7, sp, #0
 801f73a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801f73c:	687b      	ldr	r3, [r7, #4]
 801f73e:	685b      	ldr	r3, [r3, #4]
 801f740:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801f742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f744:	781b      	ldrb	r3, [r3, #0]
 801f746:	f003 030f 	and.w	r3, r3, #15
 801f74a:	b2db      	uxtb	r3, r3
 801f74c:	009b      	lsls	r3, r3, #2
 801f74e:	b2db      	uxtb	r3, r3
 801f750:	2b14      	cmp	r3, #20
 801f752:	f040 8171 	bne.w	801fa38 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801f756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f758:	88db      	ldrh	r3, [r3, #6]
 801f75a:	b29b      	uxth	r3, r3
 801f75c:	4618      	mov	r0, r3
 801f75e:	f7fb fc39 	bl	801afd4 <lwip_htons>
 801f762:	4603      	mov	r3, r0
 801f764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f768:	b29b      	uxth	r3, r3
 801f76a:	00db      	lsls	r3, r3, #3
 801f76c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f770:	885b      	ldrh	r3, [r3, #2]
 801f772:	b29b      	uxth	r3, r3
 801f774:	4618      	mov	r0, r3
 801f776:	f7fb fc2d 	bl	801afd4 <lwip_htons>
 801f77a:	4603      	mov	r3, r0
 801f77c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801f77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f780:	781b      	ldrb	r3, [r3, #0]
 801f782:	f003 030f 	and.w	r3, r3, #15
 801f786:	b2db      	uxtb	r3, r3
 801f788:	009b      	lsls	r3, r3, #2
 801f78a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801f78e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f792:	b29b      	uxth	r3, r3
 801f794:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f796:	429a      	cmp	r2, r3
 801f798:	f0c0 8150 	bcc.w	801fa3c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801f79c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f7a0:	b29b      	uxth	r3, r3
 801f7a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f7a4:	1ad3      	subs	r3, r2, r3
 801f7a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f7a8:	6878      	ldr	r0, [r7, #4]
 801f7aa:	f7fd f877 	bl	801c89c <pbuf_clen>
 801f7ae:	4603      	mov	r3, r0
 801f7b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f7b2:	4b8c      	ldr	r3, [pc, #560]	; (801f9e4 <ip4_reass+0x2b0>)
 801f7b4:	881b      	ldrh	r3, [r3, #0]
 801f7b6:	461a      	mov	r2, r3
 801f7b8:	8c3b      	ldrh	r3, [r7, #32]
 801f7ba:	4413      	add	r3, r2
 801f7bc:	2b0a      	cmp	r3, #10
 801f7be:	dd10      	ble.n	801f7e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f7c0:	8c3b      	ldrh	r3, [r7, #32]
 801f7c2:	4619      	mov	r1, r3
 801f7c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f7c6:	f7ff fd81 	bl	801f2cc <ip_reass_remove_oldest_datagram>
 801f7ca:	4603      	mov	r3, r0
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	f000 8137 	beq.w	801fa40 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f7d2:	4b84      	ldr	r3, [pc, #528]	; (801f9e4 <ip4_reass+0x2b0>)
 801f7d4:	881b      	ldrh	r3, [r3, #0]
 801f7d6:	461a      	mov	r2, r3
 801f7d8:	8c3b      	ldrh	r3, [r7, #32]
 801f7da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f7dc:	2b0a      	cmp	r3, #10
 801f7de:	f300 812f 	bgt.w	801fa40 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f7e2:	4b81      	ldr	r3, [pc, #516]	; (801f9e8 <ip4_reass+0x2b4>)
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	633b      	str	r3, [r7, #48]	; 0x30
 801f7e8:	e015      	b.n	801f816 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f7ec:	695a      	ldr	r2, [r3, #20]
 801f7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7f0:	68db      	ldr	r3, [r3, #12]
 801f7f2:	429a      	cmp	r2, r3
 801f7f4:	d10c      	bne.n	801f810 <ip4_reass+0xdc>
 801f7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f7f8:	699a      	ldr	r2, [r3, #24]
 801f7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7fc:	691b      	ldr	r3, [r3, #16]
 801f7fe:	429a      	cmp	r2, r3
 801f800:	d106      	bne.n	801f810 <ip4_reass+0xdc>
 801f802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f804:	899a      	ldrh	r2, [r3, #12]
 801f806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f808:	889b      	ldrh	r3, [r3, #4]
 801f80a:	b29b      	uxth	r3, r3
 801f80c:	429a      	cmp	r2, r3
 801f80e:	d006      	beq.n	801f81e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	633b      	str	r3, [r7, #48]	; 0x30
 801f816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d1e6      	bne.n	801f7ea <ip4_reass+0xb6>
 801f81c:	e000      	b.n	801f820 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801f81e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f822:	2b00      	cmp	r3, #0
 801f824:	d109      	bne.n	801f83a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f826:	8c3b      	ldrh	r3, [r7, #32]
 801f828:	4619      	mov	r1, r3
 801f82a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f82c:	f7ff fdb0 	bl	801f390 <ip_reass_enqueue_new_datagram>
 801f830:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f834:	2b00      	cmp	r3, #0
 801f836:	d11c      	bne.n	801f872 <ip4_reass+0x13e>
      goto nullreturn;
 801f838:	e105      	b.n	801fa46 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f83c:	88db      	ldrh	r3, [r3, #6]
 801f83e:	b29b      	uxth	r3, r3
 801f840:	4618      	mov	r0, r3
 801f842:	f7fb fbc7 	bl	801afd4 <lwip_htons>
 801f846:	4603      	mov	r3, r0
 801f848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d110      	bne.n	801f872 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f852:	89db      	ldrh	r3, [r3, #14]
 801f854:	4618      	mov	r0, r3
 801f856:	f7fb fbbd 	bl	801afd4 <lwip_htons>
 801f85a:	4603      	mov	r3, r0
 801f85c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f860:	2b00      	cmp	r3, #0
 801f862:	d006      	beq.n	801f872 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f866:	3308      	adds	r3, #8
 801f868:	2214      	movs	r2, #20
 801f86a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f86c:	4618      	mov	r0, r3
 801f86e:	f000 fbb5 	bl	801ffdc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f874:	88db      	ldrh	r3, [r3, #6]
 801f876:	b29b      	uxth	r3, r3
 801f878:	f003 0320 	and.w	r3, r3, #32
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	bf0c      	ite	eq
 801f880:	2301      	moveq	r3, #1
 801f882:	2300      	movne	r3, #0
 801f884:	b2db      	uxtb	r3, r3
 801f886:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f888:	69fb      	ldr	r3, [r7, #28]
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d00e      	beq.n	801f8ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801f88e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f892:	4413      	add	r3, r2
 801f894:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f896:	8b7a      	ldrh	r2, [r7, #26]
 801f898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f89a:	429a      	cmp	r2, r3
 801f89c:	f0c0 80a0 	bcc.w	801f9e0 <ip4_reass+0x2ac>
 801f8a0:	8b7b      	ldrh	r3, [r7, #26]
 801f8a2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801f8a6:	4293      	cmp	r3, r2
 801f8a8:	f200 809a 	bhi.w	801f9e0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f8ac:	69fa      	ldr	r2, [r7, #28]
 801f8ae:	6879      	ldr	r1, [r7, #4]
 801f8b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f8b2:	f7ff fdd5 	bl	801f460 <ip_reass_chain_frag_into_datagram_and_validate>
 801f8b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f8b8:	697b      	ldr	r3, [r7, #20]
 801f8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f8be:	f000 809b 	beq.w	801f9f8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f8c2:	4b48      	ldr	r3, [pc, #288]	; (801f9e4 <ip4_reass+0x2b0>)
 801f8c4:	881a      	ldrh	r2, [r3, #0]
 801f8c6:	8c3b      	ldrh	r3, [r7, #32]
 801f8c8:	4413      	add	r3, r2
 801f8ca:	b29a      	uxth	r2, r3
 801f8cc:	4b45      	ldr	r3, [pc, #276]	; (801f9e4 <ip4_reass+0x2b0>)
 801f8ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f8d0:	69fb      	ldr	r3, [r7, #28]
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d00d      	beq.n	801f8f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801f8d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f8da:	4413      	add	r3, r2
 801f8dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8e0:	8a7a      	ldrh	r2, [r7, #18]
 801f8e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8e6:	7f9b      	ldrb	r3, [r3, #30]
 801f8e8:	f043 0301 	orr.w	r3, r3, #1
 801f8ec:	b2da      	uxtb	r2, r3
 801f8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f8f2:	697b      	ldr	r3, [r7, #20]
 801f8f4:	2b01      	cmp	r3, #1
 801f8f6:	d171      	bne.n	801f9dc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f8fa:	8b9b      	ldrh	r3, [r3, #28]
 801f8fc:	3314      	adds	r3, #20
 801f8fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f902:	685b      	ldr	r3, [r3, #4]
 801f904:	685b      	ldr	r3, [r3, #4]
 801f906:	681b      	ldr	r3, [r3, #0]
 801f908:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f90c:	685b      	ldr	r3, [r3, #4]
 801f90e:	685b      	ldr	r3, [r3, #4]
 801f910:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f914:	3308      	adds	r3, #8
 801f916:	2214      	movs	r2, #20
 801f918:	4619      	mov	r1, r3
 801f91a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f91c:	f000 fb5e 	bl	801ffdc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f920:	8a3b      	ldrh	r3, [r7, #16]
 801f922:	4618      	mov	r0, r3
 801f924:	f7fb fb56 	bl	801afd4 <lwip_htons>
 801f928:	4603      	mov	r3, r0
 801f92a:	461a      	mov	r2, r3
 801f92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f92e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f932:	2200      	movs	r2, #0
 801f934:	719a      	strb	r2, [r3, #6]
 801f936:	2200      	movs	r2, #0
 801f938:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f93c:	2200      	movs	r2, #0
 801f93e:	729a      	strb	r2, [r3, #10]
 801f940:	2200      	movs	r2, #0
 801f942:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f946:	685b      	ldr	r3, [r3, #4]
 801f948:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f94a:	e00d      	b.n	801f968 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801f94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f94e:	685b      	ldr	r3, [r3, #4]
 801f950:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f952:	2114      	movs	r1, #20
 801f954:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f956:	f7fc fe93 	bl	801c680 <pbuf_remove_header>
      pbuf_cat(p, r);
 801f95a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f95c:	6878      	ldr	r0, [r7, #4]
 801f95e:	f7fc ffd7 	bl	801c910 <pbuf_cat>
      r = iprh->next_pbuf;
 801f962:	68fb      	ldr	r3, [r7, #12]
 801f964:	681b      	ldr	r3, [r3, #0]
 801f966:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801f968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d1ee      	bne.n	801f94c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f96e:	4b1e      	ldr	r3, [pc, #120]	; (801f9e8 <ip4_reass+0x2b4>)
 801f970:	681b      	ldr	r3, [r3, #0]
 801f972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f974:	429a      	cmp	r2, r3
 801f976:	d102      	bne.n	801f97e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801f978:	2300      	movs	r3, #0
 801f97a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f97c:	e010      	b.n	801f9a0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f97e:	4b1a      	ldr	r3, [pc, #104]	; (801f9e8 <ip4_reass+0x2b4>)
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f984:	e007      	b.n	801f996 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801f986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f988:	681b      	ldr	r3, [r3, #0]
 801f98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f98c:	429a      	cmp	r2, r3
 801f98e:	d006      	beq.n	801f99e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d1f4      	bne.n	801f986 <ip4_reass+0x252>
 801f99c:	e000      	b.n	801f9a0 <ip4_reass+0x26c>
          break;
 801f99e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f9a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f9a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f9a4:	f7ff fd2e 	bl	801f404 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f9a8:	6878      	ldr	r0, [r7, #4]
 801f9aa:	f7fc ff77 	bl	801c89c <pbuf_clen>
 801f9ae:	4603      	mov	r3, r0
 801f9b0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f9b2:	4b0c      	ldr	r3, [pc, #48]	; (801f9e4 <ip4_reass+0x2b0>)
 801f9b4:	881b      	ldrh	r3, [r3, #0]
 801f9b6:	8c3a      	ldrh	r2, [r7, #32]
 801f9b8:	429a      	cmp	r2, r3
 801f9ba:	d906      	bls.n	801f9ca <ip4_reass+0x296>
 801f9bc:	4b0b      	ldr	r3, [pc, #44]	; (801f9ec <ip4_reass+0x2b8>)
 801f9be:	f240 229b 	movw	r2, #667	; 0x29b
 801f9c2:	490b      	ldr	r1, [pc, #44]	; (801f9f0 <ip4_reass+0x2bc>)
 801f9c4:	480b      	ldr	r0, [pc, #44]	; (801f9f4 <ip4_reass+0x2c0>)
 801f9c6:	f000 fc19 	bl	80201fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f9ca:	4b06      	ldr	r3, [pc, #24]	; (801f9e4 <ip4_reass+0x2b0>)
 801f9cc:	881a      	ldrh	r2, [r3, #0]
 801f9ce:	8c3b      	ldrh	r3, [r7, #32]
 801f9d0:	1ad3      	subs	r3, r2, r3
 801f9d2:	b29a      	uxth	r2, r3
 801f9d4:	4b03      	ldr	r3, [pc, #12]	; (801f9e4 <ip4_reass+0x2b0>)
 801f9d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	e038      	b.n	801fa4e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f9dc:	2300      	movs	r3, #0
 801f9de:	e036      	b.n	801fa4e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801f9e0:	bf00      	nop
 801f9e2:	e00a      	b.n	801f9fa <ip4_reass+0x2c6>
 801f9e4:	2001369c 	.word	0x2001369c
 801f9e8:	20013698 	.word	0x20013698
 801f9ec:	0802623c 	.word	0x0802623c
 801f9f0:	080263ac 	.word	0x080263ac
 801f9f4:	08026284 	.word	0x08026284
    goto nullreturn_ipr;
 801f9f8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f9fc:	2b00      	cmp	r3, #0
 801f9fe:	d106      	bne.n	801fa0e <ip4_reass+0x2da>
 801fa00:	4b15      	ldr	r3, [pc, #84]	; (801fa58 <ip4_reass+0x324>)
 801fa02:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801fa06:	4915      	ldr	r1, [pc, #84]	; (801fa5c <ip4_reass+0x328>)
 801fa08:	4815      	ldr	r0, [pc, #84]	; (801fa60 <ip4_reass+0x32c>)
 801fa0a:	f000 fbf7 	bl	80201fc <iprintf>
  if (ipr->p == NULL) {
 801fa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fa10:	685b      	ldr	r3, [r3, #4]
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d116      	bne.n	801fa44 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801fa16:	4b13      	ldr	r3, [pc, #76]	; (801fa64 <ip4_reass+0x330>)
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fa1c:	429a      	cmp	r2, r3
 801fa1e:	d006      	beq.n	801fa2e <ip4_reass+0x2fa>
 801fa20:	4b0d      	ldr	r3, [pc, #52]	; (801fa58 <ip4_reass+0x324>)
 801fa22:	f240 22ab 	movw	r2, #683	; 0x2ab
 801fa26:	4910      	ldr	r1, [pc, #64]	; (801fa68 <ip4_reass+0x334>)
 801fa28:	480d      	ldr	r0, [pc, #52]	; (801fa60 <ip4_reass+0x32c>)
 801fa2a:	f000 fbe7 	bl	80201fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801fa2e:	2100      	movs	r1, #0
 801fa30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801fa32:	f7ff fce7 	bl	801f404 <ip_reass_dequeue_datagram>
 801fa36:	e006      	b.n	801fa46 <ip4_reass+0x312>
    goto nullreturn;
 801fa38:	bf00      	nop
 801fa3a:	e004      	b.n	801fa46 <ip4_reass+0x312>
    goto nullreturn;
 801fa3c:	bf00      	nop
 801fa3e:	e002      	b.n	801fa46 <ip4_reass+0x312>
      goto nullreturn;
 801fa40:	bf00      	nop
 801fa42:	e000      	b.n	801fa46 <ip4_reass+0x312>
  }

nullreturn:
 801fa44:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801fa46:	6878      	ldr	r0, [r7, #4]
 801fa48:	f7fc fea0 	bl	801c78c <pbuf_free>
  return NULL;
 801fa4c:	2300      	movs	r3, #0
}
 801fa4e:	4618      	mov	r0, r3
 801fa50:	3738      	adds	r7, #56	; 0x38
 801fa52:	46bd      	mov	sp, r7
 801fa54:	bd80      	pop	{r7, pc}
 801fa56:	bf00      	nop
 801fa58:	0802623c 	.word	0x0802623c
 801fa5c:	080263c8 	.word	0x080263c8
 801fa60:	08026284 	.word	0x08026284
 801fa64:	20013698 	.word	0x20013698
 801fa68:	080263d4 	.word	0x080263d4

0801fa6c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801fa6c:	b580      	push	{r7, lr}
 801fa6e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801fa70:	2002      	movs	r0, #2
 801fa72:	f7fb ff0b 	bl	801b88c <memp_malloc>
 801fa76:	4603      	mov	r3, r0
}
 801fa78:	4618      	mov	r0, r3
 801fa7a:	bd80      	pop	{r7, pc}

0801fa7c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801fa7c:	b580      	push	{r7, lr}
 801fa7e:	b082      	sub	sp, #8
 801fa80:	af00      	add	r7, sp, #0
 801fa82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	d106      	bne.n	801fa98 <ip_frag_free_pbuf_custom_ref+0x1c>
 801fa8a:	4b07      	ldr	r3, [pc, #28]	; (801faa8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801fa8c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801fa90:	4906      	ldr	r1, [pc, #24]	; (801faac <ip_frag_free_pbuf_custom_ref+0x30>)
 801fa92:	4807      	ldr	r0, [pc, #28]	; (801fab0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801fa94:	f000 fbb2 	bl	80201fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801fa98:	6879      	ldr	r1, [r7, #4]
 801fa9a:	2002      	movs	r0, #2
 801fa9c:	f7fb ff66 	bl	801b96c <memp_free>
}
 801faa0:	bf00      	nop
 801faa2:	3708      	adds	r7, #8
 801faa4:	46bd      	mov	sp, r7
 801faa6:	bd80      	pop	{r7, pc}
 801faa8:	0802623c 	.word	0x0802623c
 801faac:	080263f4 	.word	0x080263f4
 801fab0:	08026284 	.word	0x08026284

0801fab4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801fab4:	b580      	push	{r7, lr}
 801fab6:	b084      	sub	sp, #16
 801fab8:	af00      	add	r7, sp, #0
 801faba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	d106      	bne.n	801fad4 <ipfrag_free_pbuf_custom+0x20>
 801fac6:	4b11      	ldr	r3, [pc, #68]	; (801fb0c <ipfrag_free_pbuf_custom+0x58>)
 801fac8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801facc:	4910      	ldr	r1, [pc, #64]	; (801fb10 <ipfrag_free_pbuf_custom+0x5c>)
 801face:	4811      	ldr	r0, [pc, #68]	; (801fb14 <ipfrag_free_pbuf_custom+0x60>)
 801fad0:	f000 fb94 	bl	80201fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801fad4:	68fa      	ldr	r2, [r7, #12]
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	429a      	cmp	r2, r3
 801fada:	d006      	beq.n	801faea <ipfrag_free_pbuf_custom+0x36>
 801fadc:	4b0b      	ldr	r3, [pc, #44]	; (801fb0c <ipfrag_free_pbuf_custom+0x58>)
 801fade:	f240 22cf 	movw	r2, #719	; 0x2cf
 801fae2:	490d      	ldr	r1, [pc, #52]	; (801fb18 <ipfrag_free_pbuf_custom+0x64>)
 801fae4:	480b      	ldr	r0, [pc, #44]	; (801fb14 <ipfrag_free_pbuf_custom+0x60>)
 801fae6:	f000 fb89 	bl	80201fc <iprintf>
  if (pcr->original != NULL) {
 801faea:	68fb      	ldr	r3, [r7, #12]
 801faec:	695b      	ldr	r3, [r3, #20]
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d004      	beq.n	801fafc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801faf2:	68fb      	ldr	r3, [r7, #12]
 801faf4:	695b      	ldr	r3, [r3, #20]
 801faf6:	4618      	mov	r0, r3
 801faf8:	f7fc fe48 	bl	801c78c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801fafc:	68f8      	ldr	r0, [r7, #12]
 801fafe:	f7ff ffbd 	bl	801fa7c <ip_frag_free_pbuf_custom_ref>
}
 801fb02:	bf00      	nop
 801fb04:	3710      	adds	r7, #16
 801fb06:	46bd      	mov	sp, r7
 801fb08:	bd80      	pop	{r7, pc}
 801fb0a:	bf00      	nop
 801fb0c:	0802623c 	.word	0x0802623c
 801fb10:	08026400 	.word	0x08026400
 801fb14:	08026284 	.word	0x08026284
 801fb18:	0802640c 	.word	0x0802640c

0801fb1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801fb1c:	b580      	push	{r7, lr}
 801fb1e:	b094      	sub	sp, #80	; 0x50
 801fb20:	af02      	add	r7, sp, #8
 801fb22:	60f8      	str	r0, [r7, #12]
 801fb24:	60b9      	str	r1, [r7, #8]
 801fb26:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801fb28:	2300      	movs	r3, #0
 801fb2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801fb2e:	68bb      	ldr	r3, [r7, #8]
 801fb30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fb32:	3b14      	subs	r3, #20
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	da00      	bge.n	801fb3a <ip4_frag+0x1e>
 801fb38:	3307      	adds	r3, #7
 801fb3a:	10db      	asrs	r3, r3, #3
 801fb3c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801fb3e:	2314      	movs	r3, #20
 801fb40:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801fb42:	68fb      	ldr	r3, [r7, #12]
 801fb44:	685b      	ldr	r3, [r3, #4]
 801fb46:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801fb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb4e:	781b      	ldrb	r3, [r3, #0]
 801fb50:	f003 030f 	and.w	r3, r3, #15
 801fb54:	b2db      	uxtb	r3, r3
 801fb56:	009b      	lsls	r3, r3, #2
 801fb58:	b2db      	uxtb	r3, r3
 801fb5a:	2b14      	cmp	r3, #20
 801fb5c:	d002      	beq.n	801fb64 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801fb5e:	f06f 0305 	mvn.w	r3, #5
 801fb62:	e110      	b.n	801fd86 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801fb64:	68fb      	ldr	r3, [r7, #12]
 801fb66:	895b      	ldrh	r3, [r3, #10]
 801fb68:	2b13      	cmp	r3, #19
 801fb6a:	d809      	bhi.n	801fb80 <ip4_frag+0x64>
 801fb6c:	4b88      	ldr	r3, [pc, #544]	; (801fd90 <ip4_frag+0x274>)
 801fb6e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801fb72:	4988      	ldr	r1, [pc, #544]	; (801fd94 <ip4_frag+0x278>)
 801fb74:	4888      	ldr	r0, [pc, #544]	; (801fd98 <ip4_frag+0x27c>)
 801fb76:	f000 fb41 	bl	80201fc <iprintf>
 801fb7a:	f06f 0305 	mvn.w	r3, #5
 801fb7e:	e102      	b.n	801fd86 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801fb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fb82:	88db      	ldrh	r3, [r3, #6]
 801fb84:	b29b      	uxth	r3, r3
 801fb86:	4618      	mov	r0, r3
 801fb88:	f7fb fa24 	bl	801afd4 <lwip_htons>
 801fb8c:	4603      	mov	r3, r0
 801fb8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801fb90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fb92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fb96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801fb9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fb9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801fba0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801fba2:	68fb      	ldr	r3, [r7, #12]
 801fba4:	891b      	ldrh	r3, [r3, #8]
 801fba6:	3b14      	subs	r3, #20
 801fba8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801fbac:	e0e1      	b.n	801fd72 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801fbae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801fbb0:	00db      	lsls	r3, r3, #3
 801fbb2:	b29b      	uxth	r3, r3
 801fbb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801fbb8:	4293      	cmp	r3, r2
 801fbba:	bf28      	it	cs
 801fbbc:	4613      	movcs	r3, r2
 801fbbe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801fbc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fbc4:	2114      	movs	r1, #20
 801fbc6:	200e      	movs	r0, #14
 801fbc8:	f7fc fafe 	bl	801c1c8 <pbuf_alloc>
 801fbcc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801fbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	f000 80d5 	beq.w	801fd80 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801fbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbd8:	895b      	ldrh	r3, [r3, #10]
 801fbda:	2b13      	cmp	r3, #19
 801fbdc:	d806      	bhi.n	801fbec <ip4_frag+0xd0>
 801fbde:	4b6c      	ldr	r3, [pc, #432]	; (801fd90 <ip4_frag+0x274>)
 801fbe0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801fbe4:	496d      	ldr	r1, [pc, #436]	; (801fd9c <ip4_frag+0x280>)
 801fbe6:	486c      	ldr	r0, [pc, #432]	; (801fd98 <ip4_frag+0x27c>)
 801fbe8:	f000 fb08 	bl	80201fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbee:	685b      	ldr	r3, [r3, #4]
 801fbf0:	2214      	movs	r2, #20
 801fbf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fbf4:	4618      	mov	r0, r3
 801fbf6:	f000 f9f1 	bl	801ffdc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbfc:	685b      	ldr	r3, [r3, #4]
 801fbfe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801fc00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801fc02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801fc06:	e064      	b.n	801fcd2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801fc08:	68fb      	ldr	r3, [r7, #12]
 801fc0a:	895a      	ldrh	r2, [r3, #10]
 801fc0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801fc0e:	1ad3      	subs	r3, r2, r3
 801fc10:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801fc12:	68fb      	ldr	r3, [r7, #12]
 801fc14:	895b      	ldrh	r3, [r3, #10]
 801fc16:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801fc18:	429a      	cmp	r2, r3
 801fc1a:	d906      	bls.n	801fc2a <ip4_frag+0x10e>
 801fc1c:	4b5c      	ldr	r3, [pc, #368]	; (801fd90 <ip4_frag+0x274>)
 801fc1e:	f240 322d 	movw	r2, #813	; 0x32d
 801fc22:	495f      	ldr	r1, [pc, #380]	; (801fda0 <ip4_frag+0x284>)
 801fc24:	485c      	ldr	r0, [pc, #368]	; (801fd98 <ip4_frag+0x27c>)
 801fc26:	f000 fae9 	bl	80201fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801fc2a:	8bfa      	ldrh	r2, [r7, #30]
 801fc2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801fc30:	4293      	cmp	r3, r2
 801fc32:	bf28      	it	cs
 801fc34:	4613      	movcs	r3, r2
 801fc36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801fc3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	d105      	bne.n	801fc4e <ip4_frag+0x132>
        poff = 0;
 801fc42:	2300      	movs	r3, #0
 801fc44:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801fc46:	68fb      	ldr	r3, [r7, #12]
 801fc48:	681b      	ldr	r3, [r3, #0]
 801fc4a:	60fb      	str	r3, [r7, #12]
        continue;
 801fc4c:	e041      	b.n	801fcd2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801fc4e:	f7ff ff0d 	bl	801fa6c <ip_frag_alloc_pbuf_custom_ref>
 801fc52:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801fc54:	69bb      	ldr	r3, [r7, #24]
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d103      	bne.n	801fc62 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801fc5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fc5c:	f7fc fd96 	bl	801c78c <pbuf_free>
        goto memerr;
 801fc60:	e08f      	b.n	801fd82 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801fc62:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801fc64:	68fb      	ldr	r3, [r7, #12]
 801fc66:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801fc68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801fc6a:	4413      	add	r3, r2
 801fc6c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801fc70:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801fc74:	9201      	str	r2, [sp, #4]
 801fc76:	9300      	str	r3, [sp, #0]
 801fc78:	4603      	mov	r3, r0
 801fc7a:	2241      	movs	r2, #65	; 0x41
 801fc7c:	2000      	movs	r0, #0
 801fc7e:	f7fc fbcb 	bl	801c418 <pbuf_alloced_custom>
 801fc82:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801fc84:	697b      	ldr	r3, [r7, #20]
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	d106      	bne.n	801fc98 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801fc8a:	69b8      	ldr	r0, [r7, #24]
 801fc8c:	f7ff fef6 	bl	801fa7c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801fc90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fc92:	f7fc fd7b 	bl	801c78c <pbuf_free>
        goto memerr;
 801fc96:	e074      	b.n	801fd82 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801fc98:	68f8      	ldr	r0, [r7, #12]
 801fc9a:	f7fc fe17 	bl	801c8cc <pbuf_ref>
      pcr->original = p;
 801fc9e:	69bb      	ldr	r3, [r7, #24]
 801fca0:	68fa      	ldr	r2, [r7, #12]
 801fca2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801fca4:	69bb      	ldr	r3, [r7, #24]
 801fca6:	4a3f      	ldr	r2, [pc, #252]	; (801fda4 <ip4_frag+0x288>)
 801fca8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801fcaa:	6979      	ldr	r1, [r7, #20]
 801fcac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fcae:	f7fc fe2f 	bl	801c910 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801fcb2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801fcb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801fcba:	1ad3      	subs	r3, r2, r3
 801fcbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801fcc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	d004      	beq.n	801fcd2 <ip4_frag+0x1b6>
        poff = 0;
 801fcc8:	2300      	movs	r3, #0
 801fcca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801fccc:	68fb      	ldr	r3, [r7, #12]
 801fcce:	681b      	ldr	r3, [r3, #0]
 801fcd0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801fcd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d196      	bne.n	801fc08 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801fcda:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801fcdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801fce0:	4413      	add	r3, r2
 801fce2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801fce4:	68bb      	ldr	r3, [r7, #8]
 801fce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fce8:	f1a3 0213 	sub.w	r2, r3, #19
 801fcec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801fcf0:	429a      	cmp	r2, r3
 801fcf2:	bfcc      	ite	gt
 801fcf4:	2301      	movgt	r3, #1
 801fcf6:	2300      	movle	r3, #0
 801fcf8:	b2db      	uxtb	r3, r3
 801fcfa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801fcfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801fd00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fd04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801fd06:	6a3b      	ldr	r3, [r7, #32]
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	d002      	beq.n	801fd12 <ip4_frag+0x1f6>
 801fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fd0e:	2b00      	cmp	r3, #0
 801fd10:	d003      	beq.n	801fd1a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801fd12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fd14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801fd18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801fd1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801fd1c:	4618      	mov	r0, r3
 801fd1e:	f7fb f959 	bl	801afd4 <lwip_htons>
 801fd22:	4603      	mov	r3, r0
 801fd24:	461a      	mov	r2, r3
 801fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801fd2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801fd2c:	3314      	adds	r3, #20
 801fd2e:	b29b      	uxth	r3, r3
 801fd30:	4618      	mov	r0, r3
 801fd32:	f7fb f94f 	bl	801afd4 <lwip_htons>
 801fd36:	4603      	mov	r3, r0
 801fd38:	461a      	mov	r2, r3
 801fd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd40:	2200      	movs	r2, #0
 801fd42:	729a      	strb	r2, [r3, #10]
 801fd44:	2200      	movs	r2, #0
 801fd46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801fd48:	68bb      	ldr	r3, [r7, #8]
 801fd4a:	695b      	ldr	r3, [r3, #20]
 801fd4c:	687a      	ldr	r2, [r7, #4]
 801fd4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fd50:	68b8      	ldr	r0, [r7, #8]
 801fd52:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801fd54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fd56:	f7fc fd19 	bl	801c78c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801fd5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801fd5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801fd60:	1ad3      	subs	r3, r2, r3
 801fd62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801fd66:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801fd6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801fd6c:	4413      	add	r3, r2
 801fd6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801fd72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	f47f af19 	bne.w	801fbae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	e002      	b.n	801fd86 <ip4_frag+0x26a>
      goto memerr;
 801fd80:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801fd82:	f04f 33ff 	mov.w	r3, #4294967295
}
 801fd86:	4618      	mov	r0, r3
 801fd88:	3748      	adds	r7, #72	; 0x48
 801fd8a:	46bd      	mov	sp, r7
 801fd8c:	bd80      	pop	{r7, pc}
 801fd8e:	bf00      	nop
 801fd90:	0802623c 	.word	0x0802623c
 801fd94:	08026418 	.word	0x08026418
 801fd98:	08026284 	.word	0x08026284
 801fd9c:	08026434 	.word	0x08026434
 801fda0:	08026454 	.word	0x08026454
 801fda4:	0801fab5 	.word	0x0801fab5

0801fda8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801fda8:	b580      	push	{r7, lr}
 801fdaa:	b086      	sub	sp, #24
 801fdac:	af00      	add	r7, sp, #0
 801fdae:	6078      	str	r0, [r7, #4]
 801fdb0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801fdb2:	230e      	movs	r3, #14
 801fdb4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	895b      	ldrh	r3, [r3, #10]
 801fdba:	2b0e      	cmp	r3, #14
 801fdbc:	d96e      	bls.n	801fe9c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801fdbe:	687b      	ldr	r3, [r7, #4]
 801fdc0:	7bdb      	ldrb	r3, [r3, #15]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d106      	bne.n	801fdd4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801fdc6:	683b      	ldr	r3, [r7, #0]
 801fdc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801fdcc:	3301      	adds	r3, #1
 801fdce:	b2da      	uxtb	r2, r3
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	685b      	ldr	r3, [r3, #4]
 801fdd8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801fdda:	693b      	ldr	r3, [r7, #16]
 801fddc:	7b1a      	ldrb	r2, [r3, #12]
 801fdde:	7b5b      	ldrb	r3, [r3, #13]
 801fde0:	021b      	lsls	r3, r3, #8
 801fde2:	4313      	orrs	r3, r2
 801fde4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801fde6:	693b      	ldr	r3, [r7, #16]
 801fde8:	781b      	ldrb	r3, [r3, #0]
 801fdea:	f003 0301 	and.w	r3, r3, #1
 801fdee:	2b00      	cmp	r3, #0
 801fdf0:	d023      	beq.n	801fe3a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801fdf2:	693b      	ldr	r3, [r7, #16]
 801fdf4:	781b      	ldrb	r3, [r3, #0]
 801fdf6:	2b01      	cmp	r3, #1
 801fdf8:	d10f      	bne.n	801fe1a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fdfa:	693b      	ldr	r3, [r7, #16]
 801fdfc:	785b      	ldrb	r3, [r3, #1]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d11b      	bne.n	801fe3a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801fe02:	693b      	ldr	r3, [r7, #16]
 801fe04:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fe06:	2b5e      	cmp	r3, #94	; 0x5e
 801fe08:	d117      	bne.n	801fe3a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801fe0a:	687b      	ldr	r3, [r7, #4]
 801fe0c:	7b5b      	ldrb	r3, [r3, #13]
 801fe0e:	f043 0310 	orr.w	r3, r3, #16
 801fe12:	b2da      	uxtb	r2, r3
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	735a      	strb	r2, [r3, #13]
 801fe18:	e00f      	b.n	801fe3a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801fe1a:	693b      	ldr	r3, [r7, #16]
 801fe1c:	2206      	movs	r2, #6
 801fe1e:	4928      	ldr	r1, [pc, #160]	; (801fec0 <ethernet_input+0x118>)
 801fe20:	4618      	mov	r0, r3
 801fe22:	f000 f8cb 	bl	801ffbc <memcmp>
 801fe26:	4603      	mov	r3, r0
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d106      	bne.n	801fe3a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	7b5b      	ldrb	r3, [r3, #13]
 801fe30:	f043 0308 	orr.w	r3, r3, #8
 801fe34:	b2da      	uxtb	r2, r3
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801fe3a:	89fb      	ldrh	r3, [r7, #14]
 801fe3c:	2b08      	cmp	r3, #8
 801fe3e:	d003      	beq.n	801fe48 <ethernet_input+0xa0>
 801fe40:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801fe44:	d014      	beq.n	801fe70 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801fe46:	e032      	b.n	801feae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fe48:	683b      	ldr	r3, [r7, #0]
 801fe4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fe4e:	f003 0308 	and.w	r3, r3, #8
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d024      	beq.n	801fea0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fe56:	8afb      	ldrh	r3, [r7, #22]
 801fe58:	4619      	mov	r1, r3
 801fe5a:	6878      	ldr	r0, [r7, #4]
 801fe5c:	f7fc fc10 	bl	801c680 <pbuf_remove_header>
 801fe60:	4603      	mov	r3, r0
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	d11e      	bne.n	801fea4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801fe66:	6839      	ldr	r1, [r7, #0]
 801fe68:	6878      	ldr	r0, [r7, #4]
 801fe6a:	f7fe fe8d 	bl	801eb88 <ip4_input>
      break;
 801fe6e:	e013      	b.n	801fe98 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fe70:	683b      	ldr	r3, [r7, #0]
 801fe72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801fe76:	f003 0308 	and.w	r3, r3, #8
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d014      	beq.n	801fea8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fe7e:	8afb      	ldrh	r3, [r7, #22]
 801fe80:	4619      	mov	r1, r3
 801fe82:	6878      	ldr	r0, [r7, #4]
 801fe84:	f7fc fbfc 	bl	801c680 <pbuf_remove_header>
 801fe88:	4603      	mov	r3, r0
 801fe8a:	2b00      	cmp	r3, #0
 801fe8c:	d10e      	bne.n	801feac <ethernet_input+0x104>
        etharp_input(p, netif);
 801fe8e:	6839      	ldr	r1, [r7, #0]
 801fe90:	6878      	ldr	r0, [r7, #4]
 801fe92:	f7fe f82d 	bl	801def0 <etharp_input>
      break;
 801fe96:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801fe98:	2300      	movs	r3, #0
 801fe9a:	e00c      	b.n	801feb6 <ethernet_input+0x10e>
    goto free_and_return;
 801fe9c:	bf00      	nop
 801fe9e:	e006      	b.n	801feae <ethernet_input+0x106>
        goto free_and_return;
 801fea0:	bf00      	nop
 801fea2:	e004      	b.n	801feae <ethernet_input+0x106>
        goto free_and_return;
 801fea4:	bf00      	nop
 801fea6:	e002      	b.n	801feae <ethernet_input+0x106>
        goto free_and_return;
 801fea8:	bf00      	nop
 801feaa:	e000      	b.n	801feae <ethernet_input+0x106>
        goto free_and_return;
 801feac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801feae:	6878      	ldr	r0, [r7, #4]
 801feb0:	f7fc fc6c 	bl	801c78c <pbuf_free>
  return ERR_OK;
 801feb4:	2300      	movs	r3, #0
}
 801feb6:	4618      	mov	r0, r3
 801feb8:	3718      	adds	r7, #24
 801feba:	46bd      	mov	sp, r7
 801febc:	bd80      	pop	{r7, pc}
 801febe:	bf00      	nop
 801fec0:	080269b4 	.word	0x080269b4

0801fec4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801fec4:	b580      	push	{r7, lr}
 801fec6:	b086      	sub	sp, #24
 801fec8:	af00      	add	r7, sp, #0
 801feca:	60f8      	str	r0, [r7, #12]
 801fecc:	60b9      	str	r1, [r7, #8]
 801fece:	607a      	str	r2, [r7, #4]
 801fed0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801fed2:	8c3b      	ldrh	r3, [r7, #32]
 801fed4:	4618      	mov	r0, r3
 801fed6:	f7fb f87d 	bl	801afd4 <lwip_htons>
 801feda:	4603      	mov	r3, r0
 801fedc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801fede:	210e      	movs	r1, #14
 801fee0:	68b8      	ldr	r0, [r7, #8]
 801fee2:	f7fc fbbd 	bl	801c660 <pbuf_add_header>
 801fee6:	4603      	mov	r3, r0
 801fee8:	2b00      	cmp	r3, #0
 801feea:	d125      	bne.n	801ff38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801feec:	68bb      	ldr	r3, [r7, #8]
 801feee:	685b      	ldr	r3, [r3, #4]
 801fef0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801fef2:	693b      	ldr	r3, [r7, #16]
 801fef4:	8afa      	ldrh	r2, [r7, #22]
 801fef6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801fef8:	693b      	ldr	r3, [r7, #16]
 801fefa:	2206      	movs	r2, #6
 801fefc:	6839      	ldr	r1, [r7, #0]
 801fefe:	4618      	mov	r0, r3
 801ff00:	f000 f86c 	bl	801ffdc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ff04:	693b      	ldr	r3, [r7, #16]
 801ff06:	3306      	adds	r3, #6
 801ff08:	2206      	movs	r2, #6
 801ff0a:	6879      	ldr	r1, [r7, #4]
 801ff0c:	4618      	mov	r0, r3
 801ff0e:	f000 f865 	bl	801ffdc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ff12:	68fb      	ldr	r3, [r7, #12]
 801ff14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ff18:	2b06      	cmp	r3, #6
 801ff1a:	d006      	beq.n	801ff2a <ethernet_output+0x66>
 801ff1c:	4b0a      	ldr	r3, [pc, #40]	; (801ff48 <ethernet_output+0x84>)
 801ff1e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ff22:	490a      	ldr	r1, [pc, #40]	; (801ff4c <ethernet_output+0x88>)
 801ff24:	480a      	ldr	r0, [pc, #40]	; (801ff50 <ethernet_output+0x8c>)
 801ff26:	f000 f969 	bl	80201fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ff2a:	68fb      	ldr	r3, [r7, #12]
 801ff2c:	699b      	ldr	r3, [r3, #24]
 801ff2e:	68b9      	ldr	r1, [r7, #8]
 801ff30:	68f8      	ldr	r0, [r7, #12]
 801ff32:	4798      	blx	r3
 801ff34:	4603      	mov	r3, r0
 801ff36:	e002      	b.n	801ff3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ff38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ff3a:	f06f 0301 	mvn.w	r3, #1
}
 801ff3e:	4618      	mov	r0, r3
 801ff40:	3718      	adds	r7, #24
 801ff42:	46bd      	mov	sp, r7
 801ff44:	bd80      	pop	{r7, pc}
 801ff46:	bf00      	nop
 801ff48:	08026464 	.word	0x08026464
 801ff4c:	0802649c 	.word	0x0802649c
 801ff50:	080264d0 	.word	0x080264d0

0801ff54 <__libc_init_array>:
 801ff54:	b570      	push	{r4, r5, r6, lr}
 801ff56:	4d0d      	ldr	r5, [pc, #52]	; (801ff8c <__libc_init_array+0x38>)
 801ff58:	4c0d      	ldr	r4, [pc, #52]	; (801ff90 <__libc_init_array+0x3c>)
 801ff5a:	1b64      	subs	r4, r4, r5
 801ff5c:	10a4      	asrs	r4, r4, #2
 801ff5e:	2600      	movs	r6, #0
 801ff60:	42a6      	cmp	r6, r4
 801ff62:	d109      	bne.n	801ff78 <__libc_init_array+0x24>
 801ff64:	4d0b      	ldr	r5, [pc, #44]	; (801ff94 <__libc_init_array+0x40>)
 801ff66:	4c0c      	ldr	r4, [pc, #48]	; (801ff98 <__libc_init_array+0x44>)
 801ff68:	f001 fbfe 	bl	8021768 <_init>
 801ff6c:	1b64      	subs	r4, r4, r5
 801ff6e:	10a4      	asrs	r4, r4, #2
 801ff70:	2600      	movs	r6, #0
 801ff72:	42a6      	cmp	r6, r4
 801ff74:	d105      	bne.n	801ff82 <__libc_init_array+0x2e>
 801ff76:	bd70      	pop	{r4, r5, r6, pc}
 801ff78:	f855 3b04 	ldr.w	r3, [r5], #4
 801ff7c:	4798      	blx	r3
 801ff7e:	3601      	adds	r6, #1
 801ff80:	e7ee      	b.n	801ff60 <__libc_init_array+0xc>
 801ff82:	f855 3b04 	ldr.w	r3, [r5], #4
 801ff86:	4798      	blx	r3
 801ff88:	3601      	adds	r6, #1
 801ff8a:	e7f2      	b.n	801ff72 <__libc_init_array+0x1e>
 801ff8c:	08026b14 	.word	0x08026b14
 801ff90:	08026b14 	.word	0x08026b14
 801ff94:	08026b14 	.word	0x08026b14
 801ff98:	08026b18 	.word	0x08026b18

0801ff9c <malloc>:
 801ff9c:	4b02      	ldr	r3, [pc, #8]	; (801ffa8 <malloc+0xc>)
 801ff9e:	4601      	mov	r1, r0
 801ffa0:	6818      	ldr	r0, [r3, #0]
 801ffa2:	f000 b8b7 	b.w	8020114 <_malloc_r>
 801ffa6:	bf00      	nop
 801ffa8:	20000140 	.word	0x20000140

0801ffac <free>:
 801ffac:	4b02      	ldr	r3, [pc, #8]	; (801ffb8 <free+0xc>)
 801ffae:	4601      	mov	r1, r0
 801ffb0:	6818      	ldr	r0, [r3, #0]
 801ffb2:	f000 b843 	b.w	802003c <_free_r>
 801ffb6:	bf00      	nop
 801ffb8:	20000140 	.word	0x20000140

0801ffbc <memcmp>:
 801ffbc:	b510      	push	{r4, lr}
 801ffbe:	3901      	subs	r1, #1
 801ffc0:	4402      	add	r2, r0
 801ffc2:	4290      	cmp	r0, r2
 801ffc4:	d101      	bne.n	801ffca <memcmp+0xe>
 801ffc6:	2000      	movs	r0, #0
 801ffc8:	e005      	b.n	801ffd6 <memcmp+0x1a>
 801ffca:	7803      	ldrb	r3, [r0, #0]
 801ffcc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ffd0:	42a3      	cmp	r3, r4
 801ffd2:	d001      	beq.n	801ffd8 <memcmp+0x1c>
 801ffd4:	1b18      	subs	r0, r3, r4
 801ffd6:	bd10      	pop	{r4, pc}
 801ffd8:	3001      	adds	r0, #1
 801ffda:	e7f2      	b.n	801ffc2 <memcmp+0x6>

0801ffdc <memcpy>:
 801ffdc:	440a      	add	r2, r1
 801ffde:	4291      	cmp	r1, r2
 801ffe0:	f100 33ff 	add.w	r3, r0, #4294967295
 801ffe4:	d100      	bne.n	801ffe8 <memcpy+0xc>
 801ffe6:	4770      	bx	lr
 801ffe8:	b510      	push	{r4, lr}
 801ffea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ffee:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fff2:	4291      	cmp	r1, r2
 801fff4:	d1f9      	bne.n	801ffea <memcpy+0xe>
 801fff6:	bd10      	pop	{r4, pc}

0801fff8 <memmove>:
 801fff8:	4288      	cmp	r0, r1
 801fffa:	b510      	push	{r4, lr}
 801fffc:	eb01 0402 	add.w	r4, r1, r2
 8020000:	d902      	bls.n	8020008 <memmove+0x10>
 8020002:	4284      	cmp	r4, r0
 8020004:	4623      	mov	r3, r4
 8020006:	d807      	bhi.n	8020018 <memmove+0x20>
 8020008:	1e43      	subs	r3, r0, #1
 802000a:	42a1      	cmp	r1, r4
 802000c:	d008      	beq.n	8020020 <memmove+0x28>
 802000e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020016:	e7f8      	b.n	802000a <memmove+0x12>
 8020018:	4402      	add	r2, r0
 802001a:	4601      	mov	r1, r0
 802001c:	428a      	cmp	r2, r1
 802001e:	d100      	bne.n	8020022 <memmove+0x2a>
 8020020:	bd10      	pop	{r4, pc}
 8020022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802002a:	e7f7      	b.n	802001c <memmove+0x24>

0802002c <memset>:
 802002c:	4402      	add	r2, r0
 802002e:	4603      	mov	r3, r0
 8020030:	4293      	cmp	r3, r2
 8020032:	d100      	bne.n	8020036 <memset+0xa>
 8020034:	4770      	bx	lr
 8020036:	f803 1b01 	strb.w	r1, [r3], #1
 802003a:	e7f9      	b.n	8020030 <memset+0x4>

0802003c <_free_r>:
 802003c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802003e:	2900      	cmp	r1, #0
 8020040:	d044      	beq.n	80200cc <_free_r+0x90>
 8020042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020046:	9001      	str	r0, [sp, #4]
 8020048:	2b00      	cmp	r3, #0
 802004a:	f1a1 0404 	sub.w	r4, r1, #4
 802004e:	bfb8      	it	lt
 8020050:	18e4      	addlt	r4, r4, r3
 8020052:	f000 fdbb 	bl	8020bcc <__malloc_lock>
 8020056:	4a1e      	ldr	r2, [pc, #120]	; (80200d0 <_free_r+0x94>)
 8020058:	9801      	ldr	r0, [sp, #4]
 802005a:	6813      	ldr	r3, [r2, #0]
 802005c:	b933      	cbnz	r3, 802006c <_free_r+0x30>
 802005e:	6063      	str	r3, [r4, #4]
 8020060:	6014      	str	r4, [r2, #0]
 8020062:	b003      	add	sp, #12
 8020064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020068:	f000 bdb6 	b.w	8020bd8 <__malloc_unlock>
 802006c:	42a3      	cmp	r3, r4
 802006e:	d908      	bls.n	8020082 <_free_r+0x46>
 8020070:	6825      	ldr	r5, [r4, #0]
 8020072:	1961      	adds	r1, r4, r5
 8020074:	428b      	cmp	r3, r1
 8020076:	bf01      	itttt	eq
 8020078:	6819      	ldreq	r1, [r3, #0]
 802007a:	685b      	ldreq	r3, [r3, #4]
 802007c:	1949      	addeq	r1, r1, r5
 802007e:	6021      	streq	r1, [r4, #0]
 8020080:	e7ed      	b.n	802005e <_free_r+0x22>
 8020082:	461a      	mov	r2, r3
 8020084:	685b      	ldr	r3, [r3, #4]
 8020086:	b10b      	cbz	r3, 802008c <_free_r+0x50>
 8020088:	42a3      	cmp	r3, r4
 802008a:	d9fa      	bls.n	8020082 <_free_r+0x46>
 802008c:	6811      	ldr	r1, [r2, #0]
 802008e:	1855      	adds	r5, r2, r1
 8020090:	42a5      	cmp	r5, r4
 8020092:	d10b      	bne.n	80200ac <_free_r+0x70>
 8020094:	6824      	ldr	r4, [r4, #0]
 8020096:	4421      	add	r1, r4
 8020098:	1854      	adds	r4, r2, r1
 802009a:	42a3      	cmp	r3, r4
 802009c:	6011      	str	r1, [r2, #0]
 802009e:	d1e0      	bne.n	8020062 <_free_r+0x26>
 80200a0:	681c      	ldr	r4, [r3, #0]
 80200a2:	685b      	ldr	r3, [r3, #4]
 80200a4:	6053      	str	r3, [r2, #4]
 80200a6:	4421      	add	r1, r4
 80200a8:	6011      	str	r1, [r2, #0]
 80200aa:	e7da      	b.n	8020062 <_free_r+0x26>
 80200ac:	d902      	bls.n	80200b4 <_free_r+0x78>
 80200ae:	230c      	movs	r3, #12
 80200b0:	6003      	str	r3, [r0, #0]
 80200b2:	e7d6      	b.n	8020062 <_free_r+0x26>
 80200b4:	6825      	ldr	r5, [r4, #0]
 80200b6:	1961      	adds	r1, r4, r5
 80200b8:	428b      	cmp	r3, r1
 80200ba:	bf04      	itt	eq
 80200bc:	6819      	ldreq	r1, [r3, #0]
 80200be:	685b      	ldreq	r3, [r3, #4]
 80200c0:	6063      	str	r3, [r4, #4]
 80200c2:	bf04      	itt	eq
 80200c4:	1949      	addeq	r1, r1, r5
 80200c6:	6021      	streq	r1, [r4, #0]
 80200c8:	6054      	str	r4, [r2, #4]
 80200ca:	e7ca      	b.n	8020062 <_free_r+0x26>
 80200cc:	b003      	add	sp, #12
 80200ce:	bd30      	pop	{r4, r5, pc}
 80200d0:	200136a0 	.word	0x200136a0

080200d4 <sbrk_aligned>:
 80200d4:	b570      	push	{r4, r5, r6, lr}
 80200d6:	4e0e      	ldr	r6, [pc, #56]	; (8020110 <sbrk_aligned+0x3c>)
 80200d8:	460c      	mov	r4, r1
 80200da:	6831      	ldr	r1, [r6, #0]
 80200dc:	4605      	mov	r5, r0
 80200de:	b911      	cbnz	r1, 80200e6 <sbrk_aligned+0x12>
 80200e0:	f000 f96e 	bl	80203c0 <_sbrk_r>
 80200e4:	6030      	str	r0, [r6, #0]
 80200e6:	4621      	mov	r1, r4
 80200e8:	4628      	mov	r0, r5
 80200ea:	f000 f969 	bl	80203c0 <_sbrk_r>
 80200ee:	1c43      	adds	r3, r0, #1
 80200f0:	d00a      	beq.n	8020108 <sbrk_aligned+0x34>
 80200f2:	1cc4      	adds	r4, r0, #3
 80200f4:	f024 0403 	bic.w	r4, r4, #3
 80200f8:	42a0      	cmp	r0, r4
 80200fa:	d007      	beq.n	802010c <sbrk_aligned+0x38>
 80200fc:	1a21      	subs	r1, r4, r0
 80200fe:	4628      	mov	r0, r5
 8020100:	f000 f95e 	bl	80203c0 <_sbrk_r>
 8020104:	3001      	adds	r0, #1
 8020106:	d101      	bne.n	802010c <sbrk_aligned+0x38>
 8020108:	f04f 34ff 	mov.w	r4, #4294967295
 802010c:	4620      	mov	r0, r4
 802010e:	bd70      	pop	{r4, r5, r6, pc}
 8020110:	200136a4 	.word	0x200136a4

08020114 <_malloc_r>:
 8020114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020118:	1ccd      	adds	r5, r1, #3
 802011a:	f025 0503 	bic.w	r5, r5, #3
 802011e:	3508      	adds	r5, #8
 8020120:	2d0c      	cmp	r5, #12
 8020122:	bf38      	it	cc
 8020124:	250c      	movcc	r5, #12
 8020126:	2d00      	cmp	r5, #0
 8020128:	4607      	mov	r7, r0
 802012a:	db01      	blt.n	8020130 <_malloc_r+0x1c>
 802012c:	42a9      	cmp	r1, r5
 802012e:	d905      	bls.n	802013c <_malloc_r+0x28>
 8020130:	230c      	movs	r3, #12
 8020132:	603b      	str	r3, [r7, #0]
 8020134:	2600      	movs	r6, #0
 8020136:	4630      	mov	r0, r6
 8020138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802013c:	4e2e      	ldr	r6, [pc, #184]	; (80201f8 <_malloc_r+0xe4>)
 802013e:	f000 fd45 	bl	8020bcc <__malloc_lock>
 8020142:	6833      	ldr	r3, [r6, #0]
 8020144:	461c      	mov	r4, r3
 8020146:	bb34      	cbnz	r4, 8020196 <_malloc_r+0x82>
 8020148:	4629      	mov	r1, r5
 802014a:	4638      	mov	r0, r7
 802014c:	f7ff ffc2 	bl	80200d4 <sbrk_aligned>
 8020150:	1c43      	adds	r3, r0, #1
 8020152:	4604      	mov	r4, r0
 8020154:	d14d      	bne.n	80201f2 <_malloc_r+0xde>
 8020156:	6834      	ldr	r4, [r6, #0]
 8020158:	4626      	mov	r6, r4
 802015a:	2e00      	cmp	r6, #0
 802015c:	d140      	bne.n	80201e0 <_malloc_r+0xcc>
 802015e:	6823      	ldr	r3, [r4, #0]
 8020160:	4631      	mov	r1, r6
 8020162:	4638      	mov	r0, r7
 8020164:	eb04 0803 	add.w	r8, r4, r3
 8020168:	f000 f92a 	bl	80203c0 <_sbrk_r>
 802016c:	4580      	cmp	r8, r0
 802016e:	d13a      	bne.n	80201e6 <_malloc_r+0xd2>
 8020170:	6821      	ldr	r1, [r4, #0]
 8020172:	3503      	adds	r5, #3
 8020174:	1a6d      	subs	r5, r5, r1
 8020176:	f025 0503 	bic.w	r5, r5, #3
 802017a:	3508      	adds	r5, #8
 802017c:	2d0c      	cmp	r5, #12
 802017e:	bf38      	it	cc
 8020180:	250c      	movcc	r5, #12
 8020182:	4629      	mov	r1, r5
 8020184:	4638      	mov	r0, r7
 8020186:	f7ff ffa5 	bl	80200d4 <sbrk_aligned>
 802018a:	3001      	adds	r0, #1
 802018c:	d02b      	beq.n	80201e6 <_malloc_r+0xd2>
 802018e:	6823      	ldr	r3, [r4, #0]
 8020190:	442b      	add	r3, r5
 8020192:	6023      	str	r3, [r4, #0]
 8020194:	e00e      	b.n	80201b4 <_malloc_r+0xa0>
 8020196:	6822      	ldr	r2, [r4, #0]
 8020198:	1b52      	subs	r2, r2, r5
 802019a:	d41e      	bmi.n	80201da <_malloc_r+0xc6>
 802019c:	2a0b      	cmp	r2, #11
 802019e:	d916      	bls.n	80201ce <_malloc_r+0xba>
 80201a0:	1961      	adds	r1, r4, r5
 80201a2:	42a3      	cmp	r3, r4
 80201a4:	6025      	str	r5, [r4, #0]
 80201a6:	bf18      	it	ne
 80201a8:	6059      	strne	r1, [r3, #4]
 80201aa:	6863      	ldr	r3, [r4, #4]
 80201ac:	bf08      	it	eq
 80201ae:	6031      	streq	r1, [r6, #0]
 80201b0:	5162      	str	r2, [r4, r5]
 80201b2:	604b      	str	r3, [r1, #4]
 80201b4:	4638      	mov	r0, r7
 80201b6:	f104 060b 	add.w	r6, r4, #11
 80201ba:	f000 fd0d 	bl	8020bd8 <__malloc_unlock>
 80201be:	f026 0607 	bic.w	r6, r6, #7
 80201c2:	1d23      	adds	r3, r4, #4
 80201c4:	1af2      	subs	r2, r6, r3
 80201c6:	d0b6      	beq.n	8020136 <_malloc_r+0x22>
 80201c8:	1b9b      	subs	r3, r3, r6
 80201ca:	50a3      	str	r3, [r4, r2]
 80201cc:	e7b3      	b.n	8020136 <_malloc_r+0x22>
 80201ce:	6862      	ldr	r2, [r4, #4]
 80201d0:	42a3      	cmp	r3, r4
 80201d2:	bf0c      	ite	eq
 80201d4:	6032      	streq	r2, [r6, #0]
 80201d6:	605a      	strne	r2, [r3, #4]
 80201d8:	e7ec      	b.n	80201b4 <_malloc_r+0xa0>
 80201da:	4623      	mov	r3, r4
 80201dc:	6864      	ldr	r4, [r4, #4]
 80201de:	e7b2      	b.n	8020146 <_malloc_r+0x32>
 80201e0:	4634      	mov	r4, r6
 80201e2:	6876      	ldr	r6, [r6, #4]
 80201e4:	e7b9      	b.n	802015a <_malloc_r+0x46>
 80201e6:	230c      	movs	r3, #12
 80201e8:	603b      	str	r3, [r7, #0]
 80201ea:	4638      	mov	r0, r7
 80201ec:	f000 fcf4 	bl	8020bd8 <__malloc_unlock>
 80201f0:	e7a1      	b.n	8020136 <_malloc_r+0x22>
 80201f2:	6025      	str	r5, [r4, #0]
 80201f4:	e7de      	b.n	80201b4 <_malloc_r+0xa0>
 80201f6:	bf00      	nop
 80201f8:	200136a0 	.word	0x200136a0

080201fc <iprintf>:
 80201fc:	b40f      	push	{r0, r1, r2, r3}
 80201fe:	4b0a      	ldr	r3, [pc, #40]	; (8020228 <iprintf+0x2c>)
 8020200:	b513      	push	{r0, r1, r4, lr}
 8020202:	681c      	ldr	r4, [r3, #0]
 8020204:	b124      	cbz	r4, 8020210 <iprintf+0x14>
 8020206:	69a3      	ldr	r3, [r4, #24]
 8020208:	b913      	cbnz	r3, 8020210 <iprintf+0x14>
 802020a:	4620      	mov	r0, r4
 802020c:	f000 fbc6 	bl	802099c <__sinit>
 8020210:	ab05      	add	r3, sp, #20
 8020212:	9a04      	ldr	r2, [sp, #16]
 8020214:	68a1      	ldr	r1, [r4, #8]
 8020216:	9301      	str	r3, [sp, #4]
 8020218:	4620      	mov	r0, r4
 802021a:	f000 fe69 	bl	8020ef0 <_vfiprintf_r>
 802021e:	b002      	add	sp, #8
 8020220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020224:	b004      	add	sp, #16
 8020226:	4770      	bx	lr
 8020228:	20000140 	.word	0x20000140

0802022c <putchar>:
 802022c:	4b09      	ldr	r3, [pc, #36]	; (8020254 <putchar+0x28>)
 802022e:	b513      	push	{r0, r1, r4, lr}
 8020230:	681c      	ldr	r4, [r3, #0]
 8020232:	4601      	mov	r1, r0
 8020234:	b134      	cbz	r4, 8020244 <putchar+0x18>
 8020236:	69a3      	ldr	r3, [r4, #24]
 8020238:	b923      	cbnz	r3, 8020244 <putchar+0x18>
 802023a:	9001      	str	r0, [sp, #4]
 802023c:	4620      	mov	r0, r4
 802023e:	f000 fbad 	bl	802099c <__sinit>
 8020242:	9901      	ldr	r1, [sp, #4]
 8020244:	68a2      	ldr	r2, [r4, #8]
 8020246:	4620      	mov	r0, r4
 8020248:	b002      	add	sp, #8
 802024a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802024e:	f001 b913 	b.w	8021478 <_putc_r>
 8020252:	bf00      	nop
 8020254:	20000140 	.word	0x20000140

08020258 <_puts_r>:
 8020258:	b570      	push	{r4, r5, r6, lr}
 802025a:	460e      	mov	r6, r1
 802025c:	4605      	mov	r5, r0
 802025e:	b118      	cbz	r0, 8020268 <_puts_r+0x10>
 8020260:	6983      	ldr	r3, [r0, #24]
 8020262:	b90b      	cbnz	r3, 8020268 <_puts_r+0x10>
 8020264:	f000 fb9a 	bl	802099c <__sinit>
 8020268:	69ab      	ldr	r3, [r5, #24]
 802026a:	68ac      	ldr	r4, [r5, #8]
 802026c:	b913      	cbnz	r3, 8020274 <_puts_r+0x1c>
 802026e:	4628      	mov	r0, r5
 8020270:	f000 fb94 	bl	802099c <__sinit>
 8020274:	4b2c      	ldr	r3, [pc, #176]	; (8020328 <_puts_r+0xd0>)
 8020276:	429c      	cmp	r4, r3
 8020278:	d120      	bne.n	80202bc <_puts_r+0x64>
 802027a:	686c      	ldr	r4, [r5, #4]
 802027c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802027e:	07db      	lsls	r3, r3, #31
 8020280:	d405      	bmi.n	802028e <_puts_r+0x36>
 8020282:	89a3      	ldrh	r3, [r4, #12]
 8020284:	0598      	lsls	r0, r3, #22
 8020286:	d402      	bmi.n	802028e <_puts_r+0x36>
 8020288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802028a:	f000 fc37 	bl	8020afc <__retarget_lock_acquire_recursive>
 802028e:	89a3      	ldrh	r3, [r4, #12]
 8020290:	0719      	lsls	r1, r3, #28
 8020292:	d51d      	bpl.n	80202d0 <_puts_r+0x78>
 8020294:	6923      	ldr	r3, [r4, #16]
 8020296:	b1db      	cbz	r3, 80202d0 <_puts_r+0x78>
 8020298:	3e01      	subs	r6, #1
 802029a:	68a3      	ldr	r3, [r4, #8]
 802029c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80202a0:	3b01      	subs	r3, #1
 80202a2:	60a3      	str	r3, [r4, #8]
 80202a4:	bb39      	cbnz	r1, 80202f6 <_puts_r+0x9e>
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	da38      	bge.n	802031c <_puts_r+0xc4>
 80202aa:	4622      	mov	r2, r4
 80202ac:	210a      	movs	r1, #10
 80202ae:	4628      	mov	r0, r5
 80202b0:	f000 f97c 	bl	80205ac <__swbuf_r>
 80202b4:	3001      	adds	r0, #1
 80202b6:	d011      	beq.n	80202dc <_puts_r+0x84>
 80202b8:	250a      	movs	r5, #10
 80202ba:	e011      	b.n	80202e0 <_puts_r+0x88>
 80202bc:	4b1b      	ldr	r3, [pc, #108]	; (802032c <_puts_r+0xd4>)
 80202be:	429c      	cmp	r4, r3
 80202c0:	d101      	bne.n	80202c6 <_puts_r+0x6e>
 80202c2:	68ac      	ldr	r4, [r5, #8]
 80202c4:	e7da      	b.n	802027c <_puts_r+0x24>
 80202c6:	4b1a      	ldr	r3, [pc, #104]	; (8020330 <_puts_r+0xd8>)
 80202c8:	429c      	cmp	r4, r3
 80202ca:	bf08      	it	eq
 80202cc:	68ec      	ldreq	r4, [r5, #12]
 80202ce:	e7d5      	b.n	802027c <_puts_r+0x24>
 80202d0:	4621      	mov	r1, r4
 80202d2:	4628      	mov	r0, r5
 80202d4:	f000 f9bc 	bl	8020650 <__swsetup_r>
 80202d8:	2800      	cmp	r0, #0
 80202da:	d0dd      	beq.n	8020298 <_puts_r+0x40>
 80202dc:	f04f 35ff 	mov.w	r5, #4294967295
 80202e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80202e2:	07da      	lsls	r2, r3, #31
 80202e4:	d405      	bmi.n	80202f2 <_puts_r+0x9a>
 80202e6:	89a3      	ldrh	r3, [r4, #12]
 80202e8:	059b      	lsls	r3, r3, #22
 80202ea:	d402      	bmi.n	80202f2 <_puts_r+0x9a>
 80202ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80202ee:	f000 fc06 	bl	8020afe <__retarget_lock_release_recursive>
 80202f2:	4628      	mov	r0, r5
 80202f4:	bd70      	pop	{r4, r5, r6, pc}
 80202f6:	2b00      	cmp	r3, #0
 80202f8:	da04      	bge.n	8020304 <_puts_r+0xac>
 80202fa:	69a2      	ldr	r2, [r4, #24]
 80202fc:	429a      	cmp	r2, r3
 80202fe:	dc06      	bgt.n	802030e <_puts_r+0xb6>
 8020300:	290a      	cmp	r1, #10
 8020302:	d004      	beq.n	802030e <_puts_r+0xb6>
 8020304:	6823      	ldr	r3, [r4, #0]
 8020306:	1c5a      	adds	r2, r3, #1
 8020308:	6022      	str	r2, [r4, #0]
 802030a:	7019      	strb	r1, [r3, #0]
 802030c:	e7c5      	b.n	802029a <_puts_r+0x42>
 802030e:	4622      	mov	r2, r4
 8020310:	4628      	mov	r0, r5
 8020312:	f000 f94b 	bl	80205ac <__swbuf_r>
 8020316:	3001      	adds	r0, #1
 8020318:	d1bf      	bne.n	802029a <_puts_r+0x42>
 802031a:	e7df      	b.n	80202dc <_puts_r+0x84>
 802031c:	6823      	ldr	r3, [r4, #0]
 802031e:	250a      	movs	r5, #10
 8020320:	1c5a      	adds	r2, r3, #1
 8020322:	6022      	str	r2, [r4, #0]
 8020324:	701d      	strb	r5, [r3, #0]
 8020326:	e7db      	b.n	80202e0 <_puts_r+0x88>
 8020328:	08026a98 	.word	0x08026a98
 802032c:	08026ab8 	.word	0x08026ab8
 8020330:	08026a78 	.word	0x08026a78

08020334 <puts>:
 8020334:	4b02      	ldr	r3, [pc, #8]	; (8020340 <puts+0xc>)
 8020336:	4601      	mov	r1, r0
 8020338:	6818      	ldr	r0, [r3, #0]
 802033a:	f7ff bf8d 	b.w	8020258 <_puts_r>
 802033e:	bf00      	nop
 8020340:	20000140 	.word	0x20000140

08020344 <rand>:
 8020344:	4b16      	ldr	r3, [pc, #88]	; (80203a0 <rand+0x5c>)
 8020346:	b510      	push	{r4, lr}
 8020348:	681c      	ldr	r4, [r3, #0]
 802034a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802034c:	b9b3      	cbnz	r3, 802037c <rand+0x38>
 802034e:	2018      	movs	r0, #24
 8020350:	f7ff fe24 	bl	801ff9c <malloc>
 8020354:	63a0      	str	r0, [r4, #56]	; 0x38
 8020356:	b928      	cbnz	r0, 8020364 <rand+0x20>
 8020358:	4602      	mov	r2, r0
 802035a:	4b12      	ldr	r3, [pc, #72]	; (80203a4 <rand+0x60>)
 802035c:	4812      	ldr	r0, [pc, #72]	; (80203a8 <rand+0x64>)
 802035e:	214e      	movs	r1, #78	; 0x4e
 8020360:	f000 f9e4 	bl	802072c <__assert_func>
 8020364:	4a11      	ldr	r2, [pc, #68]	; (80203ac <rand+0x68>)
 8020366:	4b12      	ldr	r3, [pc, #72]	; (80203b0 <rand+0x6c>)
 8020368:	e9c0 2300 	strd	r2, r3, [r0]
 802036c:	4b11      	ldr	r3, [pc, #68]	; (80203b4 <rand+0x70>)
 802036e:	6083      	str	r3, [r0, #8]
 8020370:	230b      	movs	r3, #11
 8020372:	8183      	strh	r3, [r0, #12]
 8020374:	2201      	movs	r2, #1
 8020376:	2300      	movs	r3, #0
 8020378:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802037c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802037e:	4a0e      	ldr	r2, [pc, #56]	; (80203b8 <rand+0x74>)
 8020380:	6920      	ldr	r0, [r4, #16]
 8020382:	6963      	ldr	r3, [r4, #20]
 8020384:	490d      	ldr	r1, [pc, #52]	; (80203bc <rand+0x78>)
 8020386:	4342      	muls	r2, r0
 8020388:	fb01 2203 	mla	r2, r1, r3, r2
 802038c:	fba0 0101 	umull	r0, r1, r0, r1
 8020390:	1c43      	adds	r3, r0, #1
 8020392:	eb42 0001 	adc.w	r0, r2, r1
 8020396:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802039a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802039e:	bd10      	pop	{r4, pc}
 80203a0:	20000140 	.word	0x20000140
 80203a4:	080269c8 	.word	0x080269c8
 80203a8:	080269df 	.word	0x080269df
 80203ac:	abcd330e 	.word	0xabcd330e
 80203b0:	e66d1234 	.word	0xe66d1234
 80203b4:	0005deec 	.word	0x0005deec
 80203b8:	5851f42d 	.word	0x5851f42d
 80203bc:	4c957f2d 	.word	0x4c957f2d

080203c0 <_sbrk_r>:
 80203c0:	b538      	push	{r3, r4, r5, lr}
 80203c2:	4d06      	ldr	r5, [pc, #24]	; (80203dc <_sbrk_r+0x1c>)
 80203c4:	2300      	movs	r3, #0
 80203c6:	4604      	mov	r4, r0
 80203c8:	4608      	mov	r0, r1
 80203ca:	602b      	str	r3, [r5, #0]
 80203cc:	f7f2 f888 	bl	80124e0 <_sbrk>
 80203d0:	1c43      	adds	r3, r0, #1
 80203d2:	d102      	bne.n	80203da <_sbrk_r+0x1a>
 80203d4:	682b      	ldr	r3, [r5, #0]
 80203d6:	b103      	cbz	r3, 80203da <_sbrk_r+0x1a>
 80203d8:	6023      	str	r3, [r4, #0]
 80203da:	bd38      	pop	{r3, r4, r5, pc}
 80203dc:	200136a8 	.word	0x200136a8

080203e0 <setvbuf>:
 80203e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80203e4:	461d      	mov	r5, r3
 80203e6:	4b5d      	ldr	r3, [pc, #372]	; (802055c <setvbuf+0x17c>)
 80203e8:	681f      	ldr	r7, [r3, #0]
 80203ea:	4604      	mov	r4, r0
 80203ec:	460e      	mov	r6, r1
 80203ee:	4690      	mov	r8, r2
 80203f0:	b127      	cbz	r7, 80203fc <setvbuf+0x1c>
 80203f2:	69bb      	ldr	r3, [r7, #24]
 80203f4:	b913      	cbnz	r3, 80203fc <setvbuf+0x1c>
 80203f6:	4638      	mov	r0, r7
 80203f8:	f000 fad0 	bl	802099c <__sinit>
 80203fc:	4b58      	ldr	r3, [pc, #352]	; (8020560 <setvbuf+0x180>)
 80203fe:	429c      	cmp	r4, r3
 8020400:	d167      	bne.n	80204d2 <setvbuf+0xf2>
 8020402:	687c      	ldr	r4, [r7, #4]
 8020404:	f1b8 0f02 	cmp.w	r8, #2
 8020408:	d006      	beq.n	8020418 <setvbuf+0x38>
 802040a:	f1b8 0f01 	cmp.w	r8, #1
 802040e:	f200 809f 	bhi.w	8020550 <setvbuf+0x170>
 8020412:	2d00      	cmp	r5, #0
 8020414:	f2c0 809c 	blt.w	8020550 <setvbuf+0x170>
 8020418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802041a:	07db      	lsls	r3, r3, #31
 802041c:	d405      	bmi.n	802042a <setvbuf+0x4a>
 802041e:	89a3      	ldrh	r3, [r4, #12]
 8020420:	0598      	lsls	r0, r3, #22
 8020422:	d402      	bmi.n	802042a <setvbuf+0x4a>
 8020424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020426:	f000 fb69 	bl	8020afc <__retarget_lock_acquire_recursive>
 802042a:	4621      	mov	r1, r4
 802042c:	4638      	mov	r0, r7
 802042e:	f000 fa21 	bl	8020874 <_fflush_r>
 8020432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020434:	b141      	cbz	r1, 8020448 <setvbuf+0x68>
 8020436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802043a:	4299      	cmp	r1, r3
 802043c:	d002      	beq.n	8020444 <setvbuf+0x64>
 802043e:	4638      	mov	r0, r7
 8020440:	f7ff fdfc 	bl	802003c <_free_r>
 8020444:	2300      	movs	r3, #0
 8020446:	6363      	str	r3, [r4, #52]	; 0x34
 8020448:	2300      	movs	r3, #0
 802044a:	61a3      	str	r3, [r4, #24]
 802044c:	6063      	str	r3, [r4, #4]
 802044e:	89a3      	ldrh	r3, [r4, #12]
 8020450:	0619      	lsls	r1, r3, #24
 8020452:	d503      	bpl.n	802045c <setvbuf+0x7c>
 8020454:	6921      	ldr	r1, [r4, #16]
 8020456:	4638      	mov	r0, r7
 8020458:	f7ff fdf0 	bl	802003c <_free_r>
 802045c:	89a3      	ldrh	r3, [r4, #12]
 802045e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8020462:	f023 0303 	bic.w	r3, r3, #3
 8020466:	f1b8 0f02 	cmp.w	r8, #2
 802046a:	81a3      	strh	r3, [r4, #12]
 802046c:	d06c      	beq.n	8020548 <setvbuf+0x168>
 802046e:	ab01      	add	r3, sp, #4
 8020470:	466a      	mov	r2, sp
 8020472:	4621      	mov	r1, r4
 8020474:	4638      	mov	r0, r7
 8020476:	f000 fb43 	bl	8020b00 <__swhatbuf_r>
 802047a:	89a3      	ldrh	r3, [r4, #12]
 802047c:	4318      	orrs	r0, r3
 802047e:	81a0      	strh	r0, [r4, #12]
 8020480:	2d00      	cmp	r5, #0
 8020482:	d130      	bne.n	80204e6 <setvbuf+0x106>
 8020484:	9d00      	ldr	r5, [sp, #0]
 8020486:	4628      	mov	r0, r5
 8020488:	f7ff fd88 	bl	801ff9c <malloc>
 802048c:	4606      	mov	r6, r0
 802048e:	2800      	cmp	r0, #0
 8020490:	d155      	bne.n	802053e <setvbuf+0x15e>
 8020492:	f8dd 9000 	ldr.w	r9, [sp]
 8020496:	45a9      	cmp	r9, r5
 8020498:	d14a      	bne.n	8020530 <setvbuf+0x150>
 802049a:	f04f 35ff 	mov.w	r5, #4294967295
 802049e:	2200      	movs	r2, #0
 80204a0:	60a2      	str	r2, [r4, #8]
 80204a2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80204a6:	6022      	str	r2, [r4, #0]
 80204a8:	6122      	str	r2, [r4, #16]
 80204aa:	2201      	movs	r2, #1
 80204ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204b0:	6162      	str	r2, [r4, #20]
 80204b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80204b4:	f043 0302 	orr.w	r3, r3, #2
 80204b8:	07d2      	lsls	r2, r2, #31
 80204ba:	81a3      	strh	r3, [r4, #12]
 80204bc:	d405      	bmi.n	80204ca <setvbuf+0xea>
 80204be:	f413 7f00 	tst.w	r3, #512	; 0x200
 80204c2:	d102      	bne.n	80204ca <setvbuf+0xea>
 80204c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204c6:	f000 fb1a 	bl	8020afe <__retarget_lock_release_recursive>
 80204ca:	4628      	mov	r0, r5
 80204cc:	b003      	add	sp, #12
 80204ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80204d2:	4b24      	ldr	r3, [pc, #144]	; (8020564 <setvbuf+0x184>)
 80204d4:	429c      	cmp	r4, r3
 80204d6:	d101      	bne.n	80204dc <setvbuf+0xfc>
 80204d8:	68bc      	ldr	r4, [r7, #8]
 80204da:	e793      	b.n	8020404 <setvbuf+0x24>
 80204dc:	4b22      	ldr	r3, [pc, #136]	; (8020568 <setvbuf+0x188>)
 80204de:	429c      	cmp	r4, r3
 80204e0:	bf08      	it	eq
 80204e2:	68fc      	ldreq	r4, [r7, #12]
 80204e4:	e78e      	b.n	8020404 <setvbuf+0x24>
 80204e6:	2e00      	cmp	r6, #0
 80204e8:	d0cd      	beq.n	8020486 <setvbuf+0xa6>
 80204ea:	69bb      	ldr	r3, [r7, #24]
 80204ec:	b913      	cbnz	r3, 80204f4 <setvbuf+0x114>
 80204ee:	4638      	mov	r0, r7
 80204f0:	f000 fa54 	bl	802099c <__sinit>
 80204f4:	f1b8 0f01 	cmp.w	r8, #1
 80204f8:	bf08      	it	eq
 80204fa:	89a3      	ldrheq	r3, [r4, #12]
 80204fc:	6026      	str	r6, [r4, #0]
 80204fe:	bf04      	itt	eq
 8020500:	f043 0301 	orreq.w	r3, r3, #1
 8020504:	81a3      	strheq	r3, [r4, #12]
 8020506:	89a2      	ldrh	r2, [r4, #12]
 8020508:	f012 0308 	ands.w	r3, r2, #8
 802050c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8020510:	d01c      	beq.n	802054c <setvbuf+0x16c>
 8020512:	07d3      	lsls	r3, r2, #31
 8020514:	bf41      	itttt	mi
 8020516:	2300      	movmi	r3, #0
 8020518:	426d      	negmi	r5, r5
 802051a:	60a3      	strmi	r3, [r4, #8]
 802051c:	61a5      	strmi	r5, [r4, #24]
 802051e:	bf58      	it	pl
 8020520:	60a5      	strpl	r5, [r4, #8]
 8020522:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8020524:	f015 0501 	ands.w	r5, r5, #1
 8020528:	d115      	bne.n	8020556 <setvbuf+0x176>
 802052a:	f412 7f00 	tst.w	r2, #512	; 0x200
 802052e:	e7c8      	b.n	80204c2 <setvbuf+0xe2>
 8020530:	4648      	mov	r0, r9
 8020532:	f7ff fd33 	bl	801ff9c <malloc>
 8020536:	4606      	mov	r6, r0
 8020538:	2800      	cmp	r0, #0
 802053a:	d0ae      	beq.n	802049a <setvbuf+0xba>
 802053c:	464d      	mov	r5, r9
 802053e:	89a3      	ldrh	r3, [r4, #12]
 8020540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020544:	81a3      	strh	r3, [r4, #12]
 8020546:	e7d0      	b.n	80204ea <setvbuf+0x10a>
 8020548:	2500      	movs	r5, #0
 802054a:	e7a8      	b.n	802049e <setvbuf+0xbe>
 802054c:	60a3      	str	r3, [r4, #8]
 802054e:	e7e8      	b.n	8020522 <setvbuf+0x142>
 8020550:	f04f 35ff 	mov.w	r5, #4294967295
 8020554:	e7b9      	b.n	80204ca <setvbuf+0xea>
 8020556:	2500      	movs	r5, #0
 8020558:	e7b7      	b.n	80204ca <setvbuf+0xea>
 802055a:	bf00      	nop
 802055c:	20000140 	.word	0x20000140
 8020560:	08026a98 	.word	0x08026a98
 8020564:	08026ab8 	.word	0x08026ab8
 8020568:	08026a78 	.word	0x08026a78

0802056c <siprintf>:
 802056c:	b40e      	push	{r1, r2, r3}
 802056e:	b500      	push	{lr}
 8020570:	b09c      	sub	sp, #112	; 0x70
 8020572:	ab1d      	add	r3, sp, #116	; 0x74
 8020574:	9002      	str	r0, [sp, #8]
 8020576:	9006      	str	r0, [sp, #24]
 8020578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802057c:	4809      	ldr	r0, [pc, #36]	; (80205a4 <siprintf+0x38>)
 802057e:	9107      	str	r1, [sp, #28]
 8020580:	9104      	str	r1, [sp, #16]
 8020582:	4909      	ldr	r1, [pc, #36]	; (80205a8 <siprintf+0x3c>)
 8020584:	f853 2b04 	ldr.w	r2, [r3], #4
 8020588:	9105      	str	r1, [sp, #20]
 802058a:	6800      	ldr	r0, [r0, #0]
 802058c:	9301      	str	r3, [sp, #4]
 802058e:	a902      	add	r1, sp, #8
 8020590:	f000 fb84 	bl	8020c9c <_svfiprintf_r>
 8020594:	9b02      	ldr	r3, [sp, #8]
 8020596:	2200      	movs	r2, #0
 8020598:	701a      	strb	r2, [r3, #0]
 802059a:	b01c      	add	sp, #112	; 0x70
 802059c:	f85d eb04 	ldr.w	lr, [sp], #4
 80205a0:	b003      	add	sp, #12
 80205a2:	4770      	bx	lr
 80205a4:	20000140 	.word	0x20000140
 80205a8:	ffff0208 	.word	0xffff0208

080205ac <__swbuf_r>:
 80205ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205ae:	460e      	mov	r6, r1
 80205b0:	4614      	mov	r4, r2
 80205b2:	4605      	mov	r5, r0
 80205b4:	b118      	cbz	r0, 80205be <__swbuf_r+0x12>
 80205b6:	6983      	ldr	r3, [r0, #24]
 80205b8:	b90b      	cbnz	r3, 80205be <__swbuf_r+0x12>
 80205ba:	f000 f9ef 	bl	802099c <__sinit>
 80205be:	4b21      	ldr	r3, [pc, #132]	; (8020644 <__swbuf_r+0x98>)
 80205c0:	429c      	cmp	r4, r3
 80205c2:	d12b      	bne.n	802061c <__swbuf_r+0x70>
 80205c4:	686c      	ldr	r4, [r5, #4]
 80205c6:	69a3      	ldr	r3, [r4, #24]
 80205c8:	60a3      	str	r3, [r4, #8]
 80205ca:	89a3      	ldrh	r3, [r4, #12]
 80205cc:	071a      	lsls	r2, r3, #28
 80205ce:	d52f      	bpl.n	8020630 <__swbuf_r+0x84>
 80205d0:	6923      	ldr	r3, [r4, #16]
 80205d2:	b36b      	cbz	r3, 8020630 <__swbuf_r+0x84>
 80205d4:	6923      	ldr	r3, [r4, #16]
 80205d6:	6820      	ldr	r0, [r4, #0]
 80205d8:	1ac0      	subs	r0, r0, r3
 80205da:	6963      	ldr	r3, [r4, #20]
 80205dc:	b2f6      	uxtb	r6, r6
 80205de:	4283      	cmp	r3, r0
 80205e0:	4637      	mov	r7, r6
 80205e2:	dc04      	bgt.n	80205ee <__swbuf_r+0x42>
 80205e4:	4621      	mov	r1, r4
 80205e6:	4628      	mov	r0, r5
 80205e8:	f000 f944 	bl	8020874 <_fflush_r>
 80205ec:	bb30      	cbnz	r0, 802063c <__swbuf_r+0x90>
 80205ee:	68a3      	ldr	r3, [r4, #8]
 80205f0:	3b01      	subs	r3, #1
 80205f2:	60a3      	str	r3, [r4, #8]
 80205f4:	6823      	ldr	r3, [r4, #0]
 80205f6:	1c5a      	adds	r2, r3, #1
 80205f8:	6022      	str	r2, [r4, #0]
 80205fa:	701e      	strb	r6, [r3, #0]
 80205fc:	6963      	ldr	r3, [r4, #20]
 80205fe:	3001      	adds	r0, #1
 8020600:	4283      	cmp	r3, r0
 8020602:	d004      	beq.n	802060e <__swbuf_r+0x62>
 8020604:	89a3      	ldrh	r3, [r4, #12]
 8020606:	07db      	lsls	r3, r3, #31
 8020608:	d506      	bpl.n	8020618 <__swbuf_r+0x6c>
 802060a:	2e0a      	cmp	r6, #10
 802060c:	d104      	bne.n	8020618 <__swbuf_r+0x6c>
 802060e:	4621      	mov	r1, r4
 8020610:	4628      	mov	r0, r5
 8020612:	f000 f92f 	bl	8020874 <_fflush_r>
 8020616:	b988      	cbnz	r0, 802063c <__swbuf_r+0x90>
 8020618:	4638      	mov	r0, r7
 802061a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802061c:	4b0a      	ldr	r3, [pc, #40]	; (8020648 <__swbuf_r+0x9c>)
 802061e:	429c      	cmp	r4, r3
 8020620:	d101      	bne.n	8020626 <__swbuf_r+0x7a>
 8020622:	68ac      	ldr	r4, [r5, #8]
 8020624:	e7cf      	b.n	80205c6 <__swbuf_r+0x1a>
 8020626:	4b09      	ldr	r3, [pc, #36]	; (802064c <__swbuf_r+0xa0>)
 8020628:	429c      	cmp	r4, r3
 802062a:	bf08      	it	eq
 802062c:	68ec      	ldreq	r4, [r5, #12]
 802062e:	e7ca      	b.n	80205c6 <__swbuf_r+0x1a>
 8020630:	4621      	mov	r1, r4
 8020632:	4628      	mov	r0, r5
 8020634:	f000 f80c 	bl	8020650 <__swsetup_r>
 8020638:	2800      	cmp	r0, #0
 802063a:	d0cb      	beq.n	80205d4 <__swbuf_r+0x28>
 802063c:	f04f 37ff 	mov.w	r7, #4294967295
 8020640:	e7ea      	b.n	8020618 <__swbuf_r+0x6c>
 8020642:	bf00      	nop
 8020644:	08026a98 	.word	0x08026a98
 8020648:	08026ab8 	.word	0x08026ab8
 802064c:	08026a78 	.word	0x08026a78

08020650 <__swsetup_r>:
 8020650:	4b32      	ldr	r3, [pc, #200]	; (802071c <__swsetup_r+0xcc>)
 8020652:	b570      	push	{r4, r5, r6, lr}
 8020654:	681d      	ldr	r5, [r3, #0]
 8020656:	4606      	mov	r6, r0
 8020658:	460c      	mov	r4, r1
 802065a:	b125      	cbz	r5, 8020666 <__swsetup_r+0x16>
 802065c:	69ab      	ldr	r3, [r5, #24]
 802065e:	b913      	cbnz	r3, 8020666 <__swsetup_r+0x16>
 8020660:	4628      	mov	r0, r5
 8020662:	f000 f99b 	bl	802099c <__sinit>
 8020666:	4b2e      	ldr	r3, [pc, #184]	; (8020720 <__swsetup_r+0xd0>)
 8020668:	429c      	cmp	r4, r3
 802066a:	d10f      	bne.n	802068c <__swsetup_r+0x3c>
 802066c:	686c      	ldr	r4, [r5, #4]
 802066e:	89a3      	ldrh	r3, [r4, #12]
 8020670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020674:	0719      	lsls	r1, r3, #28
 8020676:	d42c      	bmi.n	80206d2 <__swsetup_r+0x82>
 8020678:	06dd      	lsls	r5, r3, #27
 802067a:	d411      	bmi.n	80206a0 <__swsetup_r+0x50>
 802067c:	2309      	movs	r3, #9
 802067e:	6033      	str	r3, [r6, #0]
 8020680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020684:	81a3      	strh	r3, [r4, #12]
 8020686:	f04f 30ff 	mov.w	r0, #4294967295
 802068a:	e03e      	b.n	802070a <__swsetup_r+0xba>
 802068c:	4b25      	ldr	r3, [pc, #148]	; (8020724 <__swsetup_r+0xd4>)
 802068e:	429c      	cmp	r4, r3
 8020690:	d101      	bne.n	8020696 <__swsetup_r+0x46>
 8020692:	68ac      	ldr	r4, [r5, #8]
 8020694:	e7eb      	b.n	802066e <__swsetup_r+0x1e>
 8020696:	4b24      	ldr	r3, [pc, #144]	; (8020728 <__swsetup_r+0xd8>)
 8020698:	429c      	cmp	r4, r3
 802069a:	bf08      	it	eq
 802069c:	68ec      	ldreq	r4, [r5, #12]
 802069e:	e7e6      	b.n	802066e <__swsetup_r+0x1e>
 80206a0:	0758      	lsls	r0, r3, #29
 80206a2:	d512      	bpl.n	80206ca <__swsetup_r+0x7a>
 80206a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80206a6:	b141      	cbz	r1, 80206ba <__swsetup_r+0x6a>
 80206a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80206ac:	4299      	cmp	r1, r3
 80206ae:	d002      	beq.n	80206b6 <__swsetup_r+0x66>
 80206b0:	4630      	mov	r0, r6
 80206b2:	f7ff fcc3 	bl	802003c <_free_r>
 80206b6:	2300      	movs	r3, #0
 80206b8:	6363      	str	r3, [r4, #52]	; 0x34
 80206ba:	89a3      	ldrh	r3, [r4, #12]
 80206bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80206c0:	81a3      	strh	r3, [r4, #12]
 80206c2:	2300      	movs	r3, #0
 80206c4:	6063      	str	r3, [r4, #4]
 80206c6:	6923      	ldr	r3, [r4, #16]
 80206c8:	6023      	str	r3, [r4, #0]
 80206ca:	89a3      	ldrh	r3, [r4, #12]
 80206cc:	f043 0308 	orr.w	r3, r3, #8
 80206d0:	81a3      	strh	r3, [r4, #12]
 80206d2:	6923      	ldr	r3, [r4, #16]
 80206d4:	b94b      	cbnz	r3, 80206ea <__swsetup_r+0x9a>
 80206d6:	89a3      	ldrh	r3, [r4, #12]
 80206d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80206dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80206e0:	d003      	beq.n	80206ea <__swsetup_r+0x9a>
 80206e2:	4621      	mov	r1, r4
 80206e4:	4630      	mov	r0, r6
 80206e6:	f000 fa31 	bl	8020b4c <__smakebuf_r>
 80206ea:	89a0      	ldrh	r0, [r4, #12]
 80206ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80206f0:	f010 0301 	ands.w	r3, r0, #1
 80206f4:	d00a      	beq.n	802070c <__swsetup_r+0xbc>
 80206f6:	2300      	movs	r3, #0
 80206f8:	60a3      	str	r3, [r4, #8]
 80206fa:	6963      	ldr	r3, [r4, #20]
 80206fc:	425b      	negs	r3, r3
 80206fe:	61a3      	str	r3, [r4, #24]
 8020700:	6923      	ldr	r3, [r4, #16]
 8020702:	b943      	cbnz	r3, 8020716 <__swsetup_r+0xc6>
 8020704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020708:	d1ba      	bne.n	8020680 <__swsetup_r+0x30>
 802070a:	bd70      	pop	{r4, r5, r6, pc}
 802070c:	0781      	lsls	r1, r0, #30
 802070e:	bf58      	it	pl
 8020710:	6963      	ldrpl	r3, [r4, #20]
 8020712:	60a3      	str	r3, [r4, #8]
 8020714:	e7f4      	b.n	8020700 <__swsetup_r+0xb0>
 8020716:	2000      	movs	r0, #0
 8020718:	e7f7      	b.n	802070a <__swsetup_r+0xba>
 802071a:	bf00      	nop
 802071c:	20000140 	.word	0x20000140
 8020720:	08026a98 	.word	0x08026a98
 8020724:	08026ab8 	.word	0x08026ab8
 8020728:	08026a78 	.word	0x08026a78

0802072c <__assert_func>:
 802072c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802072e:	4614      	mov	r4, r2
 8020730:	461a      	mov	r2, r3
 8020732:	4b09      	ldr	r3, [pc, #36]	; (8020758 <__assert_func+0x2c>)
 8020734:	681b      	ldr	r3, [r3, #0]
 8020736:	4605      	mov	r5, r0
 8020738:	68d8      	ldr	r0, [r3, #12]
 802073a:	b14c      	cbz	r4, 8020750 <__assert_func+0x24>
 802073c:	4b07      	ldr	r3, [pc, #28]	; (802075c <__assert_func+0x30>)
 802073e:	9100      	str	r1, [sp, #0]
 8020740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020744:	4906      	ldr	r1, [pc, #24]	; (8020760 <__assert_func+0x34>)
 8020746:	462b      	mov	r3, r5
 8020748:	f000 f9a6 	bl	8020a98 <fiprintf>
 802074c:	f000 ff32 	bl	80215b4 <abort>
 8020750:	4b04      	ldr	r3, [pc, #16]	; (8020764 <__assert_func+0x38>)
 8020752:	461c      	mov	r4, r3
 8020754:	e7f3      	b.n	802073e <__assert_func+0x12>
 8020756:	bf00      	nop
 8020758:	20000140 	.word	0x20000140
 802075c:	08026a3a 	.word	0x08026a3a
 8020760:	08026a47 	.word	0x08026a47
 8020764:	08026a75 	.word	0x08026a75

08020768 <__sflush_r>:
 8020768:	898a      	ldrh	r2, [r1, #12]
 802076a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802076e:	4605      	mov	r5, r0
 8020770:	0710      	lsls	r0, r2, #28
 8020772:	460c      	mov	r4, r1
 8020774:	d458      	bmi.n	8020828 <__sflush_r+0xc0>
 8020776:	684b      	ldr	r3, [r1, #4]
 8020778:	2b00      	cmp	r3, #0
 802077a:	dc05      	bgt.n	8020788 <__sflush_r+0x20>
 802077c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802077e:	2b00      	cmp	r3, #0
 8020780:	dc02      	bgt.n	8020788 <__sflush_r+0x20>
 8020782:	2000      	movs	r0, #0
 8020784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802078a:	2e00      	cmp	r6, #0
 802078c:	d0f9      	beq.n	8020782 <__sflush_r+0x1a>
 802078e:	2300      	movs	r3, #0
 8020790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020794:	682f      	ldr	r7, [r5, #0]
 8020796:	602b      	str	r3, [r5, #0]
 8020798:	d032      	beq.n	8020800 <__sflush_r+0x98>
 802079a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802079c:	89a3      	ldrh	r3, [r4, #12]
 802079e:	075a      	lsls	r2, r3, #29
 80207a0:	d505      	bpl.n	80207ae <__sflush_r+0x46>
 80207a2:	6863      	ldr	r3, [r4, #4]
 80207a4:	1ac0      	subs	r0, r0, r3
 80207a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80207a8:	b10b      	cbz	r3, 80207ae <__sflush_r+0x46>
 80207aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80207ac:	1ac0      	subs	r0, r0, r3
 80207ae:	2300      	movs	r3, #0
 80207b0:	4602      	mov	r2, r0
 80207b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80207b4:	6a21      	ldr	r1, [r4, #32]
 80207b6:	4628      	mov	r0, r5
 80207b8:	47b0      	blx	r6
 80207ba:	1c43      	adds	r3, r0, #1
 80207bc:	89a3      	ldrh	r3, [r4, #12]
 80207be:	d106      	bne.n	80207ce <__sflush_r+0x66>
 80207c0:	6829      	ldr	r1, [r5, #0]
 80207c2:	291d      	cmp	r1, #29
 80207c4:	d82c      	bhi.n	8020820 <__sflush_r+0xb8>
 80207c6:	4a2a      	ldr	r2, [pc, #168]	; (8020870 <__sflush_r+0x108>)
 80207c8:	40ca      	lsrs	r2, r1
 80207ca:	07d6      	lsls	r6, r2, #31
 80207cc:	d528      	bpl.n	8020820 <__sflush_r+0xb8>
 80207ce:	2200      	movs	r2, #0
 80207d0:	6062      	str	r2, [r4, #4]
 80207d2:	04d9      	lsls	r1, r3, #19
 80207d4:	6922      	ldr	r2, [r4, #16]
 80207d6:	6022      	str	r2, [r4, #0]
 80207d8:	d504      	bpl.n	80207e4 <__sflush_r+0x7c>
 80207da:	1c42      	adds	r2, r0, #1
 80207dc:	d101      	bne.n	80207e2 <__sflush_r+0x7a>
 80207de:	682b      	ldr	r3, [r5, #0]
 80207e0:	b903      	cbnz	r3, 80207e4 <__sflush_r+0x7c>
 80207e2:	6560      	str	r0, [r4, #84]	; 0x54
 80207e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80207e6:	602f      	str	r7, [r5, #0]
 80207e8:	2900      	cmp	r1, #0
 80207ea:	d0ca      	beq.n	8020782 <__sflush_r+0x1a>
 80207ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80207f0:	4299      	cmp	r1, r3
 80207f2:	d002      	beq.n	80207fa <__sflush_r+0x92>
 80207f4:	4628      	mov	r0, r5
 80207f6:	f7ff fc21 	bl	802003c <_free_r>
 80207fa:	2000      	movs	r0, #0
 80207fc:	6360      	str	r0, [r4, #52]	; 0x34
 80207fe:	e7c1      	b.n	8020784 <__sflush_r+0x1c>
 8020800:	6a21      	ldr	r1, [r4, #32]
 8020802:	2301      	movs	r3, #1
 8020804:	4628      	mov	r0, r5
 8020806:	47b0      	blx	r6
 8020808:	1c41      	adds	r1, r0, #1
 802080a:	d1c7      	bne.n	802079c <__sflush_r+0x34>
 802080c:	682b      	ldr	r3, [r5, #0]
 802080e:	2b00      	cmp	r3, #0
 8020810:	d0c4      	beq.n	802079c <__sflush_r+0x34>
 8020812:	2b1d      	cmp	r3, #29
 8020814:	d001      	beq.n	802081a <__sflush_r+0xb2>
 8020816:	2b16      	cmp	r3, #22
 8020818:	d101      	bne.n	802081e <__sflush_r+0xb6>
 802081a:	602f      	str	r7, [r5, #0]
 802081c:	e7b1      	b.n	8020782 <__sflush_r+0x1a>
 802081e:	89a3      	ldrh	r3, [r4, #12]
 8020820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020824:	81a3      	strh	r3, [r4, #12]
 8020826:	e7ad      	b.n	8020784 <__sflush_r+0x1c>
 8020828:	690f      	ldr	r7, [r1, #16]
 802082a:	2f00      	cmp	r7, #0
 802082c:	d0a9      	beq.n	8020782 <__sflush_r+0x1a>
 802082e:	0793      	lsls	r3, r2, #30
 8020830:	680e      	ldr	r6, [r1, #0]
 8020832:	bf08      	it	eq
 8020834:	694b      	ldreq	r3, [r1, #20]
 8020836:	600f      	str	r7, [r1, #0]
 8020838:	bf18      	it	ne
 802083a:	2300      	movne	r3, #0
 802083c:	eba6 0807 	sub.w	r8, r6, r7
 8020840:	608b      	str	r3, [r1, #8]
 8020842:	f1b8 0f00 	cmp.w	r8, #0
 8020846:	dd9c      	ble.n	8020782 <__sflush_r+0x1a>
 8020848:	6a21      	ldr	r1, [r4, #32]
 802084a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802084c:	4643      	mov	r3, r8
 802084e:	463a      	mov	r2, r7
 8020850:	4628      	mov	r0, r5
 8020852:	47b0      	blx	r6
 8020854:	2800      	cmp	r0, #0
 8020856:	dc06      	bgt.n	8020866 <__sflush_r+0xfe>
 8020858:	89a3      	ldrh	r3, [r4, #12]
 802085a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802085e:	81a3      	strh	r3, [r4, #12]
 8020860:	f04f 30ff 	mov.w	r0, #4294967295
 8020864:	e78e      	b.n	8020784 <__sflush_r+0x1c>
 8020866:	4407      	add	r7, r0
 8020868:	eba8 0800 	sub.w	r8, r8, r0
 802086c:	e7e9      	b.n	8020842 <__sflush_r+0xda>
 802086e:	bf00      	nop
 8020870:	20400001 	.word	0x20400001

08020874 <_fflush_r>:
 8020874:	b538      	push	{r3, r4, r5, lr}
 8020876:	690b      	ldr	r3, [r1, #16]
 8020878:	4605      	mov	r5, r0
 802087a:	460c      	mov	r4, r1
 802087c:	b913      	cbnz	r3, 8020884 <_fflush_r+0x10>
 802087e:	2500      	movs	r5, #0
 8020880:	4628      	mov	r0, r5
 8020882:	bd38      	pop	{r3, r4, r5, pc}
 8020884:	b118      	cbz	r0, 802088e <_fflush_r+0x1a>
 8020886:	6983      	ldr	r3, [r0, #24]
 8020888:	b90b      	cbnz	r3, 802088e <_fflush_r+0x1a>
 802088a:	f000 f887 	bl	802099c <__sinit>
 802088e:	4b14      	ldr	r3, [pc, #80]	; (80208e0 <_fflush_r+0x6c>)
 8020890:	429c      	cmp	r4, r3
 8020892:	d11b      	bne.n	80208cc <_fflush_r+0x58>
 8020894:	686c      	ldr	r4, [r5, #4]
 8020896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802089a:	2b00      	cmp	r3, #0
 802089c:	d0ef      	beq.n	802087e <_fflush_r+0xa>
 802089e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80208a0:	07d0      	lsls	r0, r2, #31
 80208a2:	d404      	bmi.n	80208ae <_fflush_r+0x3a>
 80208a4:	0599      	lsls	r1, r3, #22
 80208a6:	d402      	bmi.n	80208ae <_fflush_r+0x3a>
 80208a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80208aa:	f000 f927 	bl	8020afc <__retarget_lock_acquire_recursive>
 80208ae:	4628      	mov	r0, r5
 80208b0:	4621      	mov	r1, r4
 80208b2:	f7ff ff59 	bl	8020768 <__sflush_r>
 80208b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80208b8:	07da      	lsls	r2, r3, #31
 80208ba:	4605      	mov	r5, r0
 80208bc:	d4e0      	bmi.n	8020880 <_fflush_r+0xc>
 80208be:	89a3      	ldrh	r3, [r4, #12]
 80208c0:	059b      	lsls	r3, r3, #22
 80208c2:	d4dd      	bmi.n	8020880 <_fflush_r+0xc>
 80208c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80208c6:	f000 f91a 	bl	8020afe <__retarget_lock_release_recursive>
 80208ca:	e7d9      	b.n	8020880 <_fflush_r+0xc>
 80208cc:	4b05      	ldr	r3, [pc, #20]	; (80208e4 <_fflush_r+0x70>)
 80208ce:	429c      	cmp	r4, r3
 80208d0:	d101      	bne.n	80208d6 <_fflush_r+0x62>
 80208d2:	68ac      	ldr	r4, [r5, #8]
 80208d4:	e7df      	b.n	8020896 <_fflush_r+0x22>
 80208d6:	4b04      	ldr	r3, [pc, #16]	; (80208e8 <_fflush_r+0x74>)
 80208d8:	429c      	cmp	r4, r3
 80208da:	bf08      	it	eq
 80208dc:	68ec      	ldreq	r4, [r5, #12]
 80208de:	e7da      	b.n	8020896 <_fflush_r+0x22>
 80208e0:	08026a98 	.word	0x08026a98
 80208e4:	08026ab8 	.word	0x08026ab8
 80208e8:	08026a78 	.word	0x08026a78

080208ec <std>:
 80208ec:	2300      	movs	r3, #0
 80208ee:	b510      	push	{r4, lr}
 80208f0:	4604      	mov	r4, r0
 80208f2:	e9c0 3300 	strd	r3, r3, [r0]
 80208f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80208fa:	6083      	str	r3, [r0, #8]
 80208fc:	8181      	strh	r1, [r0, #12]
 80208fe:	6643      	str	r3, [r0, #100]	; 0x64
 8020900:	81c2      	strh	r2, [r0, #14]
 8020902:	6183      	str	r3, [r0, #24]
 8020904:	4619      	mov	r1, r3
 8020906:	2208      	movs	r2, #8
 8020908:	305c      	adds	r0, #92	; 0x5c
 802090a:	f7ff fb8f 	bl	802002c <memset>
 802090e:	4b05      	ldr	r3, [pc, #20]	; (8020924 <std+0x38>)
 8020910:	6263      	str	r3, [r4, #36]	; 0x24
 8020912:	4b05      	ldr	r3, [pc, #20]	; (8020928 <std+0x3c>)
 8020914:	62a3      	str	r3, [r4, #40]	; 0x28
 8020916:	4b05      	ldr	r3, [pc, #20]	; (802092c <std+0x40>)
 8020918:	62e3      	str	r3, [r4, #44]	; 0x2c
 802091a:	4b05      	ldr	r3, [pc, #20]	; (8020930 <std+0x44>)
 802091c:	6224      	str	r4, [r4, #32]
 802091e:	6323      	str	r3, [r4, #48]	; 0x30
 8020920:	bd10      	pop	{r4, pc}
 8020922:	bf00      	nop
 8020924:	08021509 	.word	0x08021509
 8020928:	0802152b 	.word	0x0802152b
 802092c:	08021563 	.word	0x08021563
 8020930:	08021587 	.word	0x08021587

08020934 <_cleanup_r>:
 8020934:	4901      	ldr	r1, [pc, #4]	; (802093c <_cleanup_r+0x8>)
 8020936:	f000 b8c1 	b.w	8020abc <_fwalk_reent>
 802093a:	bf00      	nop
 802093c:	08020875 	.word	0x08020875

08020940 <__sfmoreglue>:
 8020940:	b570      	push	{r4, r5, r6, lr}
 8020942:	2268      	movs	r2, #104	; 0x68
 8020944:	1e4d      	subs	r5, r1, #1
 8020946:	4355      	muls	r5, r2
 8020948:	460e      	mov	r6, r1
 802094a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802094e:	f7ff fbe1 	bl	8020114 <_malloc_r>
 8020952:	4604      	mov	r4, r0
 8020954:	b140      	cbz	r0, 8020968 <__sfmoreglue+0x28>
 8020956:	2100      	movs	r1, #0
 8020958:	e9c0 1600 	strd	r1, r6, [r0]
 802095c:	300c      	adds	r0, #12
 802095e:	60a0      	str	r0, [r4, #8]
 8020960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020964:	f7ff fb62 	bl	802002c <memset>
 8020968:	4620      	mov	r0, r4
 802096a:	bd70      	pop	{r4, r5, r6, pc}

0802096c <__sfp_lock_acquire>:
 802096c:	4801      	ldr	r0, [pc, #4]	; (8020974 <__sfp_lock_acquire+0x8>)
 802096e:	f000 b8c5 	b.w	8020afc <__retarget_lock_acquire_recursive>
 8020972:	bf00      	nop
 8020974:	200136ad 	.word	0x200136ad

08020978 <__sfp_lock_release>:
 8020978:	4801      	ldr	r0, [pc, #4]	; (8020980 <__sfp_lock_release+0x8>)
 802097a:	f000 b8c0 	b.w	8020afe <__retarget_lock_release_recursive>
 802097e:	bf00      	nop
 8020980:	200136ad 	.word	0x200136ad

08020984 <__sinit_lock_acquire>:
 8020984:	4801      	ldr	r0, [pc, #4]	; (802098c <__sinit_lock_acquire+0x8>)
 8020986:	f000 b8b9 	b.w	8020afc <__retarget_lock_acquire_recursive>
 802098a:	bf00      	nop
 802098c:	200136ae 	.word	0x200136ae

08020990 <__sinit_lock_release>:
 8020990:	4801      	ldr	r0, [pc, #4]	; (8020998 <__sinit_lock_release+0x8>)
 8020992:	f000 b8b4 	b.w	8020afe <__retarget_lock_release_recursive>
 8020996:	bf00      	nop
 8020998:	200136ae 	.word	0x200136ae

0802099c <__sinit>:
 802099c:	b510      	push	{r4, lr}
 802099e:	4604      	mov	r4, r0
 80209a0:	f7ff fff0 	bl	8020984 <__sinit_lock_acquire>
 80209a4:	69a3      	ldr	r3, [r4, #24]
 80209a6:	b11b      	cbz	r3, 80209b0 <__sinit+0x14>
 80209a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209ac:	f7ff bff0 	b.w	8020990 <__sinit_lock_release>
 80209b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80209b4:	6523      	str	r3, [r4, #80]	; 0x50
 80209b6:	4b13      	ldr	r3, [pc, #76]	; (8020a04 <__sinit+0x68>)
 80209b8:	4a13      	ldr	r2, [pc, #76]	; (8020a08 <__sinit+0x6c>)
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80209be:	42a3      	cmp	r3, r4
 80209c0:	bf04      	itt	eq
 80209c2:	2301      	moveq	r3, #1
 80209c4:	61a3      	streq	r3, [r4, #24]
 80209c6:	4620      	mov	r0, r4
 80209c8:	f000 f820 	bl	8020a0c <__sfp>
 80209cc:	6060      	str	r0, [r4, #4]
 80209ce:	4620      	mov	r0, r4
 80209d0:	f000 f81c 	bl	8020a0c <__sfp>
 80209d4:	60a0      	str	r0, [r4, #8]
 80209d6:	4620      	mov	r0, r4
 80209d8:	f000 f818 	bl	8020a0c <__sfp>
 80209dc:	2200      	movs	r2, #0
 80209de:	60e0      	str	r0, [r4, #12]
 80209e0:	2104      	movs	r1, #4
 80209e2:	6860      	ldr	r0, [r4, #4]
 80209e4:	f7ff ff82 	bl	80208ec <std>
 80209e8:	68a0      	ldr	r0, [r4, #8]
 80209ea:	2201      	movs	r2, #1
 80209ec:	2109      	movs	r1, #9
 80209ee:	f7ff ff7d 	bl	80208ec <std>
 80209f2:	68e0      	ldr	r0, [r4, #12]
 80209f4:	2202      	movs	r2, #2
 80209f6:	2112      	movs	r1, #18
 80209f8:	f7ff ff78 	bl	80208ec <std>
 80209fc:	2301      	movs	r3, #1
 80209fe:	61a3      	str	r3, [r4, #24]
 8020a00:	e7d2      	b.n	80209a8 <__sinit+0xc>
 8020a02:	bf00      	nop
 8020a04:	080269c4 	.word	0x080269c4
 8020a08:	08020935 	.word	0x08020935

08020a0c <__sfp>:
 8020a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a0e:	4607      	mov	r7, r0
 8020a10:	f7ff ffac 	bl	802096c <__sfp_lock_acquire>
 8020a14:	4b1e      	ldr	r3, [pc, #120]	; (8020a90 <__sfp+0x84>)
 8020a16:	681e      	ldr	r6, [r3, #0]
 8020a18:	69b3      	ldr	r3, [r6, #24]
 8020a1a:	b913      	cbnz	r3, 8020a22 <__sfp+0x16>
 8020a1c:	4630      	mov	r0, r6
 8020a1e:	f7ff ffbd 	bl	802099c <__sinit>
 8020a22:	3648      	adds	r6, #72	; 0x48
 8020a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020a28:	3b01      	subs	r3, #1
 8020a2a:	d503      	bpl.n	8020a34 <__sfp+0x28>
 8020a2c:	6833      	ldr	r3, [r6, #0]
 8020a2e:	b30b      	cbz	r3, 8020a74 <__sfp+0x68>
 8020a30:	6836      	ldr	r6, [r6, #0]
 8020a32:	e7f7      	b.n	8020a24 <__sfp+0x18>
 8020a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020a38:	b9d5      	cbnz	r5, 8020a70 <__sfp+0x64>
 8020a3a:	4b16      	ldr	r3, [pc, #88]	; (8020a94 <__sfp+0x88>)
 8020a3c:	60e3      	str	r3, [r4, #12]
 8020a3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020a42:	6665      	str	r5, [r4, #100]	; 0x64
 8020a44:	f000 f859 	bl	8020afa <__retarget_lock_init_recursive>
 8020a48:	f7ff ff96 	bl	8020978 <__sfp_lock_release>
 8020a4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020a50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020a54:	6025      	str	r5, [r4, #0]
 8020a56:	61a5      	str	r5, [r4, #24]
 8020a58:	2208      	movs	r2, #8
 8020a5a:	4629      	mov	r1, r5
 8020a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020a60:	f7ff fae4 	bl	802002c <memset>
 8020a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020a6c:	4620      	mov	r0, r4
 8020a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a70:	3468      	adds	r4, #104	; 0x68
 8020a72:	e7d9      	b.n	8020a28 <__sfp+0x1c>
 8020a74:	2104      	movs	r1, #4
 8020a76:	4638      	mov	r0, r7
 8020a78:	f7ff ff62 	bl	8020940 <__sfmoreglue>
 8020a7c:	4604      	mov	r4, r0
 8020a7e:	6030      	str	r0, [r6, #0]
 8020a80:	2800      	cmp	r0, #0
 8020a82:	d1d5      	bne.n	8020a30 <__sfp+0x24>
 8020a84:	f7ff ff78 	bl	8020978 <__sfp_lock_release>
 8020a88:	230c      	movs	r3, #12
 8020a8a:	603b      	str	r3, [r7, #0]
 8020a8c:	e7ee      	b.n	8020a6c <__sfp+0x60>
 8020a8e:	bf00      	nop
 8020a90:	080269c4 	.word	0x080269c4
 8020a94:	ffff0001 	.word	0xffff0001

08020a98 <fiprintf>:
 8020a98:	b40e      	push	{r1, r2, r3}
 8020a9a:	b503      	push	{r0, r1, lr}
 8020a9c:	4601      	mov	r1, r0
 8020a9e:	ab03      	add	r3, sp, #12
 8020aa0:	4805      	ldr	r0, [pc, #20]	; (8020ab8 <fiprintf+0x20>)
 8020aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8020aa6:	6800      	ldr	r0, [r0, #0]
 8020aa8:	9301      	str	r3, [sp, #4]
 8020aaa:	f000 fa21 	bl	8020ef0 <_vfiprintf_r>
 8020aae:	b002      	add	sp, #8
 8020ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ab4:	b003      	add	sp, #12
 8020ab6:	4770      	bx	lr
 8020ab8:	20000140 	.word	0x20000140

08020abc <_fwalk_reent>:
 8020abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020ac0:	4606      	mov	r6, r0
 8020ac2:	4688      	mov	r8, r1
 8020ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020ac8:	2700      	movs	r7, #0
 8020aca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020ace:	f1b9 0901 	subs.w	r9, r9, #1
 8020ad2:	d505      	bpl.n	8020ae0 <_fwalk_reent+0x24>
 8020ad4:	6824      	ldr	r4, [r4, #0]
 8020ad6:	2c00      	cmp	r4, #0
 8020ad8:	d1f7      	bne.n	8020aca <_fwalk_reent+0xe>
 8020ada:	4638      	mov	r0, r7
 8020adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ae0:	89ab      	ldrh	r3, [r5, #12]
 8020ae2:	2b01      	cmp	r3, #1
 8020ae4:	d907      	bls.n	8020af6 <_fwalk_reent+0x3a>
 8020ae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020aea:	3301      	adds	r3, #1
 8020aec:	d003      	beq.n	8020af6 <_fwalk_reent+0x3a>
 8020aee:	4629      	mov	r1, r5
 8020af0:	4630      	mov	r0, r6
 8020af2:	47c0      	blx	r8
 8020af4:	4307      	orrs	r7, r0
 8020af6:	3568      	adds	r5, #104	; 0x68
 8020af8:	e7e9      	b.n	8020ace <_fwalk_reent+0x12>

08020afa <__retarget_lock_init_recursive>:
 8020afa:	4770      	bx	lr

08020afc <__retarget_lock_acquire_recursive>:
 8020afc:	4770      	bx	lr

08020afe <__retarget_lock_release_recursive>:
 8020afe:	4770      	bx	lr

08020b00 <__swhatbuf_r>:
 8020b00:	b570      	push	{r4, r5, r6, lr}
 8020b02:	460e      	mov	r6, r1
 8020b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020b08:	2900      	cmp	r1, #0
 8020b0a:	b096      	sub	sp, #88	; 0x58
 8020b0c:	4614      	mov	r4, r2
 8020b0e:	461d      	mov	r5, r3
 8020b10:	da08      	bge.n	8020b24 <__swhatbuf_r+0x24>
 8020b12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020b16:	2200      	movs	r2, #0
 8020b18:	602a      	str	r2, [r5, #0]
 8020b1a:	061a      	lsls	r2, r3, #24
 8020b1c:	d410      	bmi.n	8020b40 <__swhatbuf_r+0x40>
 8020b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020b22:	e00e      	b.n	8020b42 <__swhatbuf_r+0x42>
 8020b24:	466a      	mov	r2, sp
 8020b26:	f000 fd5d 	bl	80215e4 <_fstat_r>
 8020b2a:	2800      	cmp	r0, #0
 8020b2c:	dbf1      	blt.n	8020b12 <__swhatbuf_r+0x12>
 8020b2e:	9a01      	ldr	r2, [sp, #4]
 8020b30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020b34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020b38:	425a      	negs	r2, r3
 8020b3a:	415a      	adcs	r2, r3
 8020b3c:	602a      	str	r2, [r5, #0]
 8020b3e:	e7ee      	b.n	8020b1e <__swhatbuf_r+0x1e>
 8020b40:	2340      	movs	r3, #64	; 0x40
 8020b42:	2000      	movs	r0, #0
 8020b44:	6023      	str	r3, [r4, #0]
 8020b46:	b016      	add	sp, #88	; 0x58
 8020b48:	bd70      	pop	{r4, r5, r6, pc}
	...

08020b4c <__smakebuf_r>:
 8020b4c:	898b      	ldrh	r3, [r1, #12]
 8020b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020b50:	079d      	lsls	r5, r3, #30
 8020b52:	4606      	mov	r6, r0
 8020b54:	460c      	mov	r4, r1
 8020b56:	d507      	bpl.n	8020b68 <__smakebuf_r+0x1c>
 8020b58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020b5c:	6023      	str	r3, [r4, #0]
 8020b5e:	6123      	str	r3, [r4, #16]
 8020b60:	2301      	movs	r3, #1
 8020b62:	6163      	str	r3, [r4, #20]
 8020b64:	b002      	add	sp, #8
 8020b66:	bd70      	pop	{r4, r5, r6, pc}
 8020b68:	ab01      	add	r3, sp, #4
 8020b6a:	466a      	mov	r2, sp
 8020b6c:	f7ff ffc8 	bl	8020b00 <__swhatbuf_r>
 8020b70:	9900      	ldr	r1, [sp, #0]
 8020b72:	4605      	mov	r5, r0
 8020b74:	4630      	mov	r0, r6
 8020b76:	f7ff facd 	bl	8020114 <_malloc_r>
 8020b7a:	b948      	cbnz	r0, 8020b90 <__smakebuf_r+0x44>
 8020b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b80:	059a      	lsls	r2, r3, #22
 8020b82:	d4ef      	bmi.n	8020b64 <__smakebuf_r+0x18>
 8020b84:	f023 0303 	bic.w	r3, r3, #3
 8020b88:	f043 0302 	orr.w	r3, r3, #2
 8020b8c:	81a3      	strh	r3, [r4, #12]
 8020b8e:	e7e3      	b.n	8020b58 <__smakebuf_r+0xc>
 8020b90:	4b0d      	ldr	r3, [pc, #52]	; (8020bc8 <__smakebuf_r+0x7c>)
 8020b92:	62b3      	str	r3, [r6, #40]	; 0x28
 8020b94:	89a3      	ldrh	r3, [r4, #12]
 8020b96:	6020      	str	r0, [r4, #0]
 8020b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020b9c:	81a3      	strh	r3, [r4, #12]
 8020b9e:	9b00      	ldr	r3, [sp, #0]
 8020ba0:	6163      	str	r3, [r4, #20]
 8020ba2:	9b01      	ldr	r3, [sp, #4]
 8020ba4:	6120      	str	r0, [r4, #16]
 8020ba6:	b15b      	cbz	r3, 8020bc0 <__smakebuf_r+0x74>
 8020ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020bac:	4630      	mov	r0, r6
 8020bae:	f000 fd2b 	bl	8021608 <_isatty_r>
 8020bb2:	b128      	cbz	r0, 8020bc0 <__smakebuf_r+0x74>
 8020bb4:	89a3      	ldrh	r3, [r4, #12]
 8020bb6:	f023 0303 	bic.w	r3, r3, #3
 8020bba:	f043 0301 	orr.w	r3, r3, #1
 8020bbe:	81a3      	strh	r3, [r4, #12]
 8020bc0:	89a0      	ldrh	r0, [r4, #12]
 8020bc2:	4305      	orrs	r5, r0
 8020bc4:	81a5      	strh	r5, [r4, #12]
 8020bc6:	e7cd      	b.n	8020b64 <__smakebuf_r+0x18>
 8020bc8:	08020935 	.word	0x08020935

08020bcc <__malloc_lock>:
 8020bcc:	4801      	ldr	r0, [pc, #4]	; (8020bd4 <__malloc_lock+0x8>)
 8020bce:	f7ff bf95 	b.w	8020afc <__retarget_lock_acquire_recursive>
 8020bd2:	bf00      	nop
 8020bd4:	200136ac 	.word	0x200136ac

08020bd8 <__malloc_unlock>:
 8020bd8:	4801      	ldr	r0, [pc, #4]	; (8020be0 <__malloc_unlock+0x8>)
 8020bda:	f7ff bf90 	b.w	8020afe <__retarget_lock_release_recursive>
 8020bde:	bf00      	nop
 8020be0:	200136ac 	.word	0x200136ac

08020be4 <__ssputs_r>:
 8020be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020be8:	688e      	ldr	r6, [r1, #8]
 8020bea:	429e      	cmp	r6, r3
 8020bec:	4682      	mov	sl, r0
 8020bee:	460c      	mov	r4, r1
 8020bf0:	4690      	mov	r8, r2
 8020bf2:	461f      	mov	r7, r3
 8020bf4:	d838      	bhi.n	8020c68 <__ssputs_r+0x84>
 8020bf6:	898a      	ldrh	r2, [r1, #12]
 8020bf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020bfc:	d032      	beq.n	8020c64 <__ssputs_r+0x80>
 8020bfe:	6825      	ldr	r5, [r4, #0]
 8020c00:	6909      	ldr	r1, [r1, #16]
 8020c02:	eba5 0901 	sub.w	r9, r5, r1
 8020c06:	6965      	ldr	r5, [r4, #20]
 8020c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020c10:	3301      	adds	r3, #1
 8020c12:	444b      	add	r3, r9
 8020c14:	106d      	asrs	r5, r5, #1
 8020c16:	429d      	cmp	r5, r3
 8020c18:	bf38      	it	cc
 8020c1a:	461d      	movcc	r5, r3
 8020c1c:	0553      	lsls	r3, r2, #21
 8020c1e:	d531      	bpl.n	8020c84 <__ssputs_r+0xa0>
 8020c20:	4629      	mov	r1, r5
 8020c22:	f7ff fa77 	bl	8020114 <_malloc_r>
 8020c26:	4606      	mov	r6, r0
 8020c28:	b950      	cbnz	r0, 8020c40 <__ssputs_r+0x5c>
 8020c2a:	230c      	movs	r3, #12
 8020c2c:	f8ca 3000 	str.w	r3, [sl]
 8020c30:	89a3      	ldrh	r3, [r4, #12]
 8020c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020c36:	81a3      	strh	r3, [r4, #12]
 8020c38:	f04f 30ff 	mov.w	r0, #4294967295
 8020c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c40:	6921      	ldr	r1, [r4, #16]
 8020c42:	464a      	mov	r2, r9
 8020c44:	f7ff f9ca 	bl	801ffdc <memcpy>
 8020c48:	89a3      	ldrh	r3, [r4, #12]
 8020c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c52:	81a3      	strh	r3, [r4, #12]
 8020c54:	6126      	str	r6, [r4, #16]
 8020c56:	6165      	str	r5, [r4, #20]
 8020c58:	444e      	add	r6, r9
 8020c5a:	eba5 0509 	sub.w	r5, r5, r9
 8020c5e:	6026      	str	r6, [r4, #0]
 8020c60:	60a5      	str	r5, [r4, #8]
 8020c62:	463e      	mov	r6, r7
 8020c64:	42be      	cmp	r6, r7
 8020c66:	d900      	bls.n	8020c6a <__ssputs_r+0x86>
 8020c68:	463e      	mov	r6, r7
 8020c6a:	6820      	ldr	r0, [r4, #0]
 8020c6c:	4632      	mov	r2, r6
 8020c6e:	4641      	mov	r1, r8
 8020c70:	f7ff f9c2 	bl	801fff8 <memmove>
 8020c74:	68a3      	ldr	r3, [r4, #8]
 8020c76:	1b9b      	subs	r3, r3, r6
 8020c78:	60a3      	str	r3, [r4, #8]
 8020c7a:	6823      	ldr	r3, [r4, #0]
 8020c7c:	4433      	add	r3, r6
 8020c7e:	6023      	str	r3, [r4, #0]
 8020c80:	2000      	movs	r0, #0
 8020c82:	e7db      	b.n	8020c3c <__ssputs_r+0x58>
 8020c84:	462a      	mov	r2, r5
 8020c86:	f000 fce1 	bl	802164c <_realloc_r>
 8020c8a:	4606      	mov	r6, r0
 8020c8c:	2800      	cmp	r0, #0
 8020c8e:	d1e1      	bne.n	8020c54 <__ssputs_r+0x70>
 8020c90:	6921      	ldr	r1, [r4, #16]
 8020c92:	4650      	mov	r0, sl
 8020c94:	f7ff f9d2 	bl	802003c <_free_r>
 8020c98:	e7c7      	b.n	8020c2a <__ssputs_r+0x46>
	...

08020c9c <_svfiprintf_r>:
 8020c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ca0:	4698      	mov	r8, r3
 8020ca2:	898b      	ldrh	r3, [r1, #12]
 8020ca4:	061b      	lsls	r3, r3, #24
 8020ca6:	b09d      	sub	sp, #116	; 0x74
 8020ca8:	4607      	mov	r7, r0
 8020caa:	460d      	mov	r5, r1
 8020cac:	4614      	mov	r4, r2
 8020cae:	d50e      	bpl.n	8020cce <_svfiprintf_r+0x32>
 8020cb0:	690b      	ldr	r3, [r1, #16]
 8020cb2:	b963      	cbnz	r3, 8020cce <_svfiprintf_r+0x32>
 8020cb4:	2140      	movs	r1, #64	; 0x40
 8020cb6:	f7ff fa2d 	bl	8020114 <_malloc_r>
 8020cba:	6028      	str	r0, [r5, #0]
 8020cbc:	6128      	str	r0, [r5, #16]
 8020cbe:	b920      	cbnz	r0, 8020cca <_svfiprintf_r+0x2e>
 8020cc0:	230c      	movs	r3, #12
 8020cc2:	603b      	str	r3, [r7, #0]
 8020cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8020cc8:	e0d1      	b.n	8020e6e <_svfiprintf_r+0x1d2>
 8020cca:	2340      	movs	r3, #64	; 0x40
 8020ccc:	616b      	str	r3, [r5, #20]
 8020cce:	2300      	movs	r3, #0
 8020cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8020cd2:	2320      	movs	r3, #32
 8020cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8020cdc:	2330      	movs	r3, #48	; 0x30
 8020cde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020e88 <_svfiprintf_r+0x1ec>
 8020ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020ce6:	f04f 0901 	mov.w	r9, #1
 8020cea:	4623      	mov	r3, r4
 8020cec:	469a      	mov	sl, r3
 8020cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020cf2:	b10a      	cbz	r2, 8020cf8 <_svfiprintf_r+0x5c>
 8020cf4:	2a25      	cmp	r2, #37	; 0x25
 8020cf6:	d1f9      	bne.n	8020cec <_svfiprintf_r+0x50>
 8020cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8020cfc:	d00b      	beq.n	8020d16 <_svfiprintf_r+0x7a>
 8020cfe:	465b      	mov	r3, fp
 8020d00:	4622      	mov	r2, r4
 8020d02:	4629      	mov	r1, r5
 8020d04:	4638      	mov	r0, r7
 8020d06:	f7ff ff6d 	bl	8020be4 <__ssputs_r>
 8020d0a:	3001      	adds	r0, #1
 8020d0c:	f000 80aa 	beq.w	8020e64 <_svfiprintf_r+0x1c8>
 8020d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d12:	445a      	add	r2, fp
 8020d14:	9209      	str	r2, [sp, #36]	; 0x24
 8020d16:	f89a 3000 	ldrb.w	r3, [sl]
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	f000 80a2 	beq.w	8020e64 <_svfiprintf_r+0x1c8>
 8020d20:	2300      	movs	r3, #0
 8020d22:	f04f 32ff 	mov.w	r2, #4294967295
 8020d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020d2a:	f10a 0a01 	add.w	sl, sl, #1
 8020d2e:	9304      	str	r3, [sp, #16]
 8020d30:	9307      	str	r3, [sp, #28]
 8020d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020d36:	931a      	str	r3, [sp, #104]	; 0x68
 8020d38:	4654      	mov	r4, sl
 8020d3a:	2205      	movs	r2, #5
 8020d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d40:	4851      	ldr	r0, [pc, #324]	; (8020e88 <_svfiprintf_r+0x1ec>)
 8020d42:	f7df fa95 	bl	8000270 <memchr>
 8020d46:	9a04      	ldr	r2, [sp, #16]
 8020d48:	b9d8      	cbnz	r0, 8020d82 <_svfiprintf_r+0xe6>
 8020d4a:	06d0      	lsls	r0, r2, #27
 8020d4c:	bf44      	itt	mi
 8020d4e:	2320      	movmi	r3, #32
 8020d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d54:	0711      	lsls	r1, r2, #28
 8020d56:	bf44      	itt	mi
 8020d58:	232b      	movmi	r3, #43	; 0x2b
 8020d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8020d62:	2b2a      	cmp	r3, #42	; 0x2a
 8020d64:	d015      	beq.n	8020d92 <_svfiprintf_r+0xf6>
 8020d66:	9a07      	ldr	r2, [sp, #28]
 8020d68:	4654      	mov	r4, sl
 8020d6a:	2000      	movs	r0, #0
 8020d6c:	f04f 0c0a 	mov.w	ip, #10
 8020d70:	4621      	mov	r1, r4
 8020d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020d76:	3b30      	subs	r3, #48	; 0x30
 8020d78:	2b09      	cmp	r3, #9
 8020d7a:	d94e      	bls.n	8020e1a <_svfiprintf_r+0x17e>
 8020d7c:	b1b0      	cbz	r0, 8020dac <_svfiprintf_r+0x110>
 8020d7e:	9207      	str	r2, [sp, #28]
 8020d80:	e014      	b.n	8020dac <_svfiprintf_r+0x110>
 8020d82:	eba0 0308 	sub.w	r3, r0, r8
 8020d86:	fa09 f303 	lsl.w	r3, r9, r3
 8020d8a:	4313      	orrs	r3, r2
 8020d8c:	9304      	str	r3, [sp, #16]
 8020d8e:	46a2      	mov	sl, r4
 8020d90:	e7d2      	b.n	8020d38 <_svfiprintf_r+0x9c>
 8020d92:	9b03      	ldr	r3, [sp, #12]
 8020d94:	1d19      	adds	r1, r3, #4
 8020d96:	681b      	ldr	r3, [r3, #0]
 8020d98:	9103      	str	r1, [sp, #12]
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	bfbb      	ittet	lt
 8020d9e:	425b      	neglt	r3, r3
 8020da0:	f042 0202 	orrlt.w	r2, r2, #2
 8020da4:	9307      	strge	r3, [sp, #28]
 8020da6:	9307      	strlt	r3, [sp, #28]
 8020da8:	bfb8      	it	lt
 8020daa:	9204      	strlt	r2, [sp, #16]
 8020dac:	7823      	ldrb	r3, [r4, #0]
 8020dae:	2b2e      	cmp	r3, #46	; 0x2e
 8020db0:	d10c      	bne.n	8020dcc <_svfiprintf_r+0x130>
 8020db2:	7863      	ldrb	r3, [r4, #1]
 8020db4:	2b2a      	cmp	r3, #42	; 0x2a
 8020db6:	d135      	bne.n	8020e24 <_svfiprintf_r+0x188>
 8020db8:	9b03      	ldr	r3, [sp, #12]
 8020dba:	1d1a      	adds	r2, r3, #4
 8020dbc:	681b      	ldr	r3, [r3, #0]
 8020dbe:	9203      	str	r2, [sp, #12]
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	bfb8      	it	lt
 8020dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8020dc8:	3402      	adds	r4, #2
 8020dca:	9305      	str	r3, [sp, #20]
 8020dcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020e98 <_svfiprintf_r+0x1fc>
 8020dd0:	7821      	ldrb	r1, [r4, #0]
 8020dd2:	2203      	movs	r2, #3
 8020dd4:	4650      	mov	r0, sl
 8020dd6:	f7df fa4b 	bl	8000270 <memchr>
 8020dda:	b140      	cbz	r0, 8020dee <_svfiprintf_r+0x152>
 8020ddc:	2340      	movs	r3, #64	; 0x40
 8020dde:	eba0 000a 	sub.w	r0, r0, sl
 8020de2:	fa03 f000 	lsl.w	r0, r3, r0
 8020de6:	9b04      	ldr	r3, [sp, #16]
 8020de8:	4303      	orrs	r3, r0
 8020dea:	3401      	adds	r4, #1
 8020dec:	9304      	str	r3, [sp, #16]
 8020dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020df2:	4826      	ldr	r0, [pc, #152]	; (8020e8c <_svfiprintf_r+0x1f0>)
 8020df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020df8:	2206      	movs	r2, #6
 8020dfa:	f7df fa39 	bl	8000270 <memchr>
 8020dfe:	2800      	cmp	r0, #0
 8020e00:	d038      	beq.n	8020e74 <_svfiprintf_r+0x1d8>
 8020e02:	4b23      	ldr	r3, [pc, #140]	; (8020e90 <_svfiprintf_r+0x1f4>)
 8020e04:	bb1b      	cbnz	r3, 8020e4e <_svfiprintf_r+0x1b2>
 8020e06:	9b03      	ldr	r3, [sp, #12]
 8020e08:	3307      	adds	r3, #7
 8020e0a:	f023 0307 	bic.w	r3, r3, #7
 8020e0e:	3308      	adds	r3, #8
 8020e10:	9303      	str	r3, [sp, #12]
 8020e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e14:	4433      	add	r3, r6
 8020e16:	9309      	str	r3, [sp, #36]	; 0x24
 8020e18:	e767      	b.n	8020cea <_svfiprintf_r+0x4e>
 8020e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8020e1e:	460c      	mov	r4, r1
 8020e20:	2001      	movs	r0, #1
 8020e22:	e7a5      	b.n	8020d70 <_svfiprintf_r+0xd4>
 8020e24:	2300      	movs	r3, #0
 8020e26:	3401      	adds	r4, #1
 8020e28:	9305      	str	r3, [sp, #20]
 8020e2a:	4619      	mov	r1, r3
 8020e2c:	f04f 0c0a 	mov.w	ip, #10
 8020e30:	4620      	mov	r0, r4
 8020e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e36:	3a30      	subs	r2, #48	; 0x30
 8020e38:	2a09      	cmp	r2, #9
 8020e3a:	d903      	bls.n	8020e44 <_svfiprintf_r+0x1a8>
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	d0c5      	beq.n	8020dcc <_svfiprintf_r+0x130>
 8020e40:	9105      	str	r1, [sp, #20]
 8020e42:	e7c3      	b.n	8020dcc <_svfiprintf_r+0x130>
 8020e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8020e48:	4604      	mov	r4, r0
 8020e4a:	2301      	movs	r3, #1
 8020e4c:	e7f0      	b.n	8020e30 <_svfiprintf_r+0x194>
 8020e4e:	ab03      	add	r3, sp, #12
 8020e50:	9300      	str	r3, [sp, #0]
 8020e52:	462a      	mov	r2, r5
 8020e54:	4b0f      	ldr	r3, [pc, #60]	; (8020e94 <_svfiprintf_r+0x1f8>)
 8020e56:	a904      	add	r1, sp, #16
 8020e58:	4638      	mov	r0, r7
 8020e5a:	f3af 8000 	nop.w
 8020e5e:	1c42      	adds	r2, r0, #1
 8020e60:	4606      	mov	r6, r0
 8020e62:	d1d6      	bne.n	8020e12 <_svfiprintf_r+0x176>
 8020e64:	89ab      	ldrh	r3, [r5, #12]
 8020e66:	065b      	lsls	r3, r3, #25
 8020e68:	f53f af2c 	bmi.w	8020cc4 <_svfiprintf_r+0x28>
 8020e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020e6e:	b01d      	add	sp, #116	; 0x74
 8020e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e74:	ab03      	add	r3, sp, #12
 8020e76:	9300      	str	r3, [sp, #0]
 8020e78:	462a      	mov	r2, r5
 8020e7a:	4b06      	ldr	r3, [pc, #24]	; (8020e94 <_svfiprintf_r+0x1f8>)
 8020e7c:	a904      	add	r1, sp, #16
 8020e7e:	4638      	mov	r0, r7
 8020e80:	f000 f9d4 	bl	802122c <_printf_i>
 8020e84:	e7eb      	b.n	8020e5e <_svfiprintf_r+0x1c2>
 8020e86:	bf00      	nop
 8020e88:	08026ad8 	.word	0x08026ad8
 8020e8c:	08026ae2 	.word	0x08026ae2
 8020e90:	00000000 	.word	0x00000000
 8020e94:	08020be5 	.word	0x08020be5
 8020e98:	08026ade 	.word	0x08026ade

08020e9c <__sfputc_r>:
 8020e9c:	6893      	ldr	r3, [r2, #8]
 8020e9e:	3b01      	subs	r3, #1
 8020ea0:	2b00      	cmp	r3, #0
 8020ea2:	b410      	push	{r4}
 8020ea4:	6093      	str	r3, [r2, #8]
 8020ea6:	da08      	bge.n	8020eba <__sfputc_r+0x1e>
 8020ea8:	6994      	ldr	r4, [r2, #24]
 8020eaa:	42a3      	cmp	r3, r4
 8020eac:	db01      	blt.n	8020eb2 <__sfputc_r+0x16>
 8020eae:	290a      	cmp	r1, #10
 8020eb0:	d103      	bne.n	8020eba <__sfputc_r+0x1e>
 8020eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020eb6:	f7ff bb79 	b.w	80205ac <__swbuf_r>
 8020eba:	6813      	ldr	r3, [r2, #0]
 8020ebc:	1c58      	adds	r0, r3, #1
 8020ebe:	6010      	str	r0, [r2, #0]
 8020ec0:	7019      	strb	r1, [r3, #0]
 8020ec2:	4608      	mov	r0, r1
 8020ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020ec8:	4770      	bx	lr

08020eca <__sfputs_r>:
 8020eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ecc:	4606      	mov	r6, r0
 8020ece:	460f      	mov	r7, r1
 8020ed0:	4614      	mov	r4, r2
 8020ed2:	18d5      	adds	r5, r2, r3
 8020ed4:	42ac      	cmp	r4, r5
 8020ed6:	d101      	bne.n	8020edc <__sfputs_r+0x12>
 8020ed8:	2000      	movs	r0, #0
 8020eda:	e007      	b.n	8020eec <__sfputs_r+0x22>
 8020edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ee0:	463a      	mov	r2, r7
 8020ee2:	4630      	mov	r0, r6
 8020ee4:	f7ff ffda 	bl	8020e9c <__sfputc_r>
 8020ee8:	1c43      	adds	r3, r0, #1
 8020eea:	d1f3      	bne.n	8020ed4 <__sfputs_r+0xa>
 8020eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020ef0 <_vfiprintf_r>:
 8020ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ef4:	460d      	mov	r5, r1
 8020ef6:	b09d      	sub	sp, #116	; 0x74
 8020ef8:	4614      	mov	r4, r2
 8020efa:	4698      	mov	r8, r3
 8020efc:	4606      	mov	r6, r0
 8020efe:	b118      	cbz	r0, 8020f08 <_vfiprintf_r+0x18>
 8020f00:	6983      	ldr	r3, [r0, #24]
 8020f02:	b90b      	cbnz	r3, 8020f08 <_vfiprintf_r+0x18>
 8020f04:	f7ff fd4a 	bl	802099c <__sinit>
 8020f08:	4b89      	ldr	r3, [pc, #548]	; (8021130 <_vfiprintf_r+0x240>)
 8020f0a:	429d      	cmp	r5, r3
 8020f0c:	d11b      	bne.n	8020f46 <_vfiprintf_r+0x56>
 8020f0e:	6875      	ldr	r5, [r6, #4]
 8020f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020f12:	07d9      	lsls	r1, r3, #31
 8020f14:	d405      	bmi.n	8020f22 <_vfiprintf_r+0x32>
 8020f16:	89ab      	ldrh	r3, [r5, #12]
 8020f18:	059a      	lsls	r2, r3, #22
 8020f1a:	d402      	bmi.n	8020f22 <_vfiprintf_r+0x32>
 8020f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020f1e:	f7ff fded 	bl	8020afc <__retarget_lock_acquire_recursive>
 8020f22:	89ab      	ldrh	r3, [r5, #12]
 8020f24:	071b      	lsls	r3, r3, #28
 8020f26:	d501      	bpl.n	8020f2c <_vfiprintf_r+0x3c>
 8020f28:	692b      	ldr	r3, [r5, #16]
 8020f2a:	b9eb      	cbnz	r3, 8020f68 <_vfiprintf_r+0x78>
 8020f2c:	4629      	mov	r1, r5
 8020f2e:	4630      	mov	r0, r6
 8020f30:	f7ff fb8e 	bl	8020650 <__swsetup_r>
 8020f34:	b1c0      	cbz	r0, 8020f68 <_vfiprintf_r+0x78>
 8020f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020f38:	07dc      	lsls	r4, r3, #31
 8020f3a:	d50e      	bpl.n	8020f5a <_vfiprintf_r+0x6a>
 8020f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8020f40:	b01d      	add	sp, #116	; 0x74
 8020f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f46:	4b7b      	ldr	r3, [pc, #492]	; (8021134 <_vfiprintf_r+0x244>)
 8020f48:	429d      	cmp	r5, r3
 8020f4a:	d101      	bne.n	8020f50 <_vfiprintf_r+0x60>
 8020f4c:	68b5      	ldr	r5, [r6, #8]
 8020f4e:	e7df      	b.n	8020f10 <_vfiprintf_r+0x20>
 8020f50:	4b79      	ldr	r3, [pc, #484]	; (8021138 <_vfiprintf_r+0x248>)
 8020f52:	429d      	cmp	r5, r3
 8020f54:	bf08      	it	eq
 8020f56:	68f5      	ldreq	r5, [r6, #12]
 8020f58:	e7da      	b.n	8020f10 <_vfiprintf_r+0x20>
 8020f5a:	89ab      	ldrh	r3, [r5, #12]
 8020f5c:	0598      	lsls	r0, r3, #22
 8020f5e:	d4ed      	bmi.n	8020f3c <_vfiprintf_r+0x4c>
 8020f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020f62:	f7ff fdcc 	bl	8020afe <__retarget_lock_release_recursive>
 8020f66:	e7e9      	b.n	8020f3c <_vfiprintf_r+0x4c>
 8020f68:	2300      	movs	r3, #0
 8020f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8020f6c:	2320      	movs	r3, #32
 8020f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8020f76:	2330      	movs	r3, #48	; 0x30
 8020f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802113c <_vfiprintf_r+0x24c>
 8020f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020f80:	f04f 0901 	mov.w	r9, #1
 8020f84:	4623      	mov	r3, r4
 8020f86:	469a      	mov	sl, r3
 8020f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020f8c:	b10a      	cbz	r2, 8020f92 <_vfiprintf_r+0xa2>
 8020f8e:	2a25      	cmp	r2, #37	; 0x25
 8020f90:	d1f9      	bne.n	8020f86 <_vfiprintf_r+0x96>
 8020f92:	ebba 0b04 	subs.w	fp, sl, r4
 8020f96:	d00b      	beq.n	8020fb0 <_vfiprintf_r+0xc0>
 8020f98:	465b      	mov	r3, fp
 8020f9a:	4622      	mov	r2, r4
 8020f9c:	4629      	mov	r1, r5
 8020f9e:	4630      	mov	r0, r6
 8020fa0:	f7ff ff93 	bl	8020eca <__sfputs_r>
 8020fa4:	3001      	adds	r0, #1
 8020fa6:	f000 80aa 	beq.w	80210fe <_vfiprintf_r+0x20e>
 8020faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020fac:	445a      	add	r2, fp
 8020fae:	9209      	str	r2, [sp, #36]	; 0x24
 8020fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8020fb4:	2b00      	cmp	r3, #0
 8020fb6:	f000 80a2 	beq.w	80210fe <_vfiprintf_r+0x20e>
 8020fba:	2300      	movs	r3, #0
 8020fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8020fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020fc4:	f10a 0a01 	add.w	sl, sl, #1
 8020fc8:	9304      	str	r3, [sp, #16]
 8020fca:	9307      	str	r3, [sp, #28]
 8020fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8020fd2:	4654      	mov	r4, sl
 8020fd4:	2205      	movs	r2, #5
 8020fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020fda:	4858      	ldr	r0, [pc, #352]	; (802113c <_vfiprintf_r+0x24c>)
 8020fdc:	f7df f948 	bl	8000270 <memchr>
 8020fe0:	9a04      	ldr	r2, [sp, #16]
 8020fe2:	b9d8      	cbnz	r0, 802101c <_vfiprintf_r+0x12c>
 8020fe4:	06d1      	lsls	r1, r2, #27
 8020fe6:	bf44      	itt	mi
 8020fe8:	2320      	movmi	r3, #32
 8020fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020fee:	0713      	lsls	r3, r2, #28
 8020ff0:	bf44      	itt	mi
 8020ff2:	232b      	movmi	r3, #43	; 0x2b
 8020ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8020ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8020ffe:	d015      	beq.n	802102c <_vfiprintf_r+0x13c>
 8021000:	9a07      	ldr	r2, [sp, #28]
 8021002:	4654      	mov	r4, sl
 8021004:	2000      	movs	r0, #0
 8021006:	f04f 0c0a 	mov.w	ip, #10
 802100a:	4621      	mov	r1, r4
 802100c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021010:	3b30      	subs	r3, #48	; 0x30
 8021012:	2b09      	cmp	r3, #9
 8021014:	d94e      	bls.n	80210b4 <_vfiprintf_r+0x1c4>
 8021016:	b1b0      	cbz	r0, 8021046 <_vfiprintf_r+0x156>
 8021018:	9207      	str	r2, [sp, #28]
 802101a:	e014      	b.n	8021046 <_vfiprintf_r+0x156>
 802101c:	eba0 0308 	sub.w	r3, r0, r8
 8021020:	fa09 f303 	lsl.w	r3, r9, r3
 8021024:	4313      	orrs	r3, r2
 8021026:	9304      	str	r3, [sp, #16]
 8021028:	46a2      	mov	sl, r4
 802102a:	e7d2      	b.n	8020fd2 <_vfiprintf_r+0xe2>
 802102c:	9b03      	ldr	r3, [sp, #12]
 802102e:	1d19      	adds	r1, r3, #4
 8021030:	681b      	ldr	r3, [r3, #0]
 8021032:	9103      	str	r1, [sp, #12]
 8021034:	2b00      	cmp	r3, #0
 8021036:	bfbb      	ittet	lt
 8021038:	425b      	neglt	r3, r3
 802103a:	f042 0202 	orrlt.w	r2, r2, #2
 802103e:	9307      	strge	r3, [sp, #28]
 8021040:	9307      	strlt	r3, [sp, #28]
 8021042:	bfb8      	it	lt
 8021044:	9204      	strlt	r2, [sp, #16]
 8021046:	7823      	ldrb	r3, [r4, #0]
 8021048:	2b2e      	cmp	r3, #46	; 0x2e
 802104a:	d10c      	bne.n	8021066 <_vfiprintf_r+0x176>
 802104c:	7863      	ldrb	r3, [r4, #1]
 802104e:	2b2a      	cmp	r3, #42	; 0x2a
 8021050:	d135      	bne.n	80210be <_vfiprintf_r+0x1ce>
 8021052:	9b03      	ldr	r3, [sp, #12]
 8021054:	1d1a      	adds	r2, r3, #4
 8021056:	681b      	ldr	r3, [r3, #0]
 8021058:	9203      	str	r2, [sp, #12]
 802105a:	2b00      	cmp	r3, #0
 802105c:	bfb8      	it	lt
 802105e:	f04f 33ff 	movlt.w	r3, #4294967295
 8021062:	3402      	adds	r4, #2
 8021064:	9305      	str	r3, [sp, #20]
 8021066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802114c <_vfiprintf_r+0x25c>
 802106a:	7821      	ldrb	r1, [r4, #0]
 802106c:	2203      	movs	r2, #3
 802106e:	4650      	mov	r0, sl
 8021070:	f7df f8fe 	bl	8000270 <memchr>
 8021074:	b140      	cbz	r0, 8021088 <_vfiprintf_r+0x198>
 8021076:	2340      	movs	r3, #64	; 0x40
 8021078:	eba0 000a 	sub.w	r0, r0, sl
 802107c:	fa03 f000 	lsl.w	r0, r3, r0
 8021080:	9b04      	ldr	r3, [sp, #16]
 8021082:	4303      	orrs	r3, r0
 8021084:	3401      	adds	r4, #1
 8021086:	9304      	str	r3, [sp, #16]
 8021088:	f814 1b01 	ldrb.w	r1, [r4], #1
 802108c:	482c      	ldr	r0, [pc, #176]	; (8021140 <_vfiprintf_r+0x250>)
 802108e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021092:	2206      	movs	r2, #6
 8021094:	f7df f8ec 	bl	8000270 <memchr>
 8021098:	2800      	cmp	r0, #0
 802109a:	d03f      	beq.n	802111c <_vfiprintf_r+0x22c>
 802109c:	4b29      	ldr	r3, [pc, #164]	; (8021144 <_vfiprintf_r+0x254>)
 802109e:	bb1b      	cbnz	r3, 80210e8 <_vfiprintf_r+0x1f8>
 80210a0:	9b03      	ldr	r3, [sp, #12]
 80210a2:	3307      	adds	r3, #7
 80210a4:	f023 0307 	bic.w	r3, r3, #7
 80210a8:	3308      	adds	r3, #8
 80210aa:	9303      	str	r3, [sp, #12]
 80210ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210ae:	443b      	add	r3, r7
 80210b0:	9309      	str	r3, [sp, #36]	; 0x24
 80210b2:	e767      	b.n	8020f84 <_vfiprintf_r+0x94>
 80210b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80210b8:	460c      	mov	r4, r1
 80210ba:	2001      	movs	r0, #1
 80210bc:	e7a5      	b.n	802100a <_vfiprintf_r+0x11a>
 80210be:	2300      	movs	r3, #0
 80210c0:	3401      	adds	r4, #1
 80210c2:	9305      	str	r3, [sp, #20]
 80210c4:	4619      	mov	r1, r3
 80210c6:	f04f 0c0a 	mov.w	ip, #10
 80210ca:	4620      	mov	r0, r4
 80210cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80210d0:	3a30      	subs	r2, #48	; 0x30
 80210d2:	2a09      	cmp	r2, #9
 80210d4:	d903      	bls.n	80210de <_vfiprintf_r+0x1ee>
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d0c5      	beq.n	8021066 <_vfiprintf_r+0x176>
 80210da:	9105      	str	r1, [sp, #20]
 80210dc:	e7c3      	b.n	8021066 <_vfiprintf_r+0x176>
 80210de:	fb0c 2101 	mla	r1, ip, r1, r2
 80210e2:	4604      	mov	r4, r0
 80210e4:	2301      	movs	r3, #1
 80210e6:	e7f0      	b.n	80210ca <_vfiprintf_r+0x1da>
 80210e8:	ab03      	add	r3, sp, #12
 80210ea:	9300      	str	r3, [sp, #0]
 80210ec:	462a      	mov	r2, r5
 80210ee:	4b16      	ldr	r3, [pc, #88]	; (8021148 <_vfiprintf_r+0x258>)
 80210f0:	a904      	add	r1, sp, #16
 80210f2:	4630      	mov	r0, r6
 80210f4:	f3af 8000 	nop.w
 80210f8:	4607      	mov	r7, r0
 80210fa:	1c78      	adds	r0, r7, #1
 80210fc:	d1d6      	bne.n	80210ac <_vfiprintf_r+0x1bc>
 80210fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021100:	07d9      	lsls	r1, r3, #31
 8021102:	d405      	bmi.n	8021110 <_vfiprintf_r+0x220>
 8021104:	89ab      	ldrh	r3, [r5, #12]
 8021106:	059a      	lsls	r2, r3, #22
 8021108:	d402      	bmi.n	8021110 <_vfiprintf_r+0x220>
 802110a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802110c:	f7ff fcf7 	bl	8020afe <__retarget_lock_release_recursive>
 8021110:	89ab      	ldrh	r3, [r5, #12]
 8021112:	065b      	lsls	r3, r3, #25
 8021114:	f53f af12 	bmi.w	8020f3c <_vfiprintf_r+0x4c>
 8021118:	9809      	ldr	r0, [sp, #36]	; 0x24
 802111a:	e711      	b.n	8020f40 <_vfiprintf_r+0x50>
 802111c:	ab03      	add	r3, sp, #12
 802111e:	9300      	str	r3, [sp, #0]
 8021120:	462a      	mov	r2, r5
 8021122:	4b09      	ldr	r3, [pc, #36]	; (8021148 <_vfiprintf_r+0x258>)
 8021124:	a904      	add	r1, sp, #16
 8021126:	4630      	mov	r0, r6
 8021128:	f000 f880 	bl	802122c <_printf_i>
 802112c:	e7e4      	b.n	80210f8 <_vfiprintf_r+0x208>
 802112e:	bf00      	nop
 8021130:	08026a98 	.word	0x08026a98
 8021134:	08026ab8 	.word	0x08026ab8
 8021138:	08026a78 	.word	0x08026a78
 802113c:	08026ad8 	.word	0x08026ad8
 8021140:	08026ae2 	.word	0x08026ae2
 8021144:	00000000 	.word	0x00000000
 8021148:	08020ecb 	.word	0x08020ecb
 802114c:	08026ade 	.word	0x08026ade

08021150 <_printf_common>:
 8021150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021154:	4616      	mov	r6, r2
 8021156:	4699      	mov	r9, r3
 8021158:	688a      	ldr	r2, [r1, #8]
 802115a:	690b      	ldr	r3, [r1, #16]
 802115c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021160:	4293      	cmp	r3, r2
 8021162:	bfb8      	it	lt
 8021164:	4613      	movlt	r3, r2
 8021166:	6033      	str	r3, [r6, #0]
 8021168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802116c:	4607      	mov	r7, r0
 802116e:	460c      	mov	r4, r1
 8021170:	b10a      	cbz	r2, 8021176 <_printf_common+0x26>
 8021172:	3301      	adds	r3, #1
 8021174:	6033      	str	r3, [r6, #0]
 8021176:	6823      	ldr	r3, [r4, #0]
 8021178:	0699      	lsls	r1, r3, #26
 802117a:	bf42      	ittt	mi
 802117c:	6833      	ldrmi	r3, [r6, #0]
 802117e:	3302      	addmi	r3, #2
 8021180:	6033      	strmi	r3, [r6, #0]
 8021182:	6825      	ldr	r5, [r4, #0]
 8021184:	f015 0506 	ands.w	r5, r5, #6
 8021188:	d106      	bne.n	8021198 <_printf_common+0x48>
 802118a:	f104 0a19 	add.w	sl, r4, #25
 802118e:	68e3      	ldr	r3, [r4, #12]
 8021190:	6832      	ldr	r2, [r6, #0]
 8021192:	1a9b      	subs	r3, r3, r2
 8021194:	42ab      	cmp	r3, r5
 8021196:	dc26      	bgt.n	80211e6 <_printf_common+0x96>
 8021198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802119c:	1e13      	subs	r3, r2, #0
 802119e:	6822      	ldr	r2, [r4, #0]
 80211a0:	bf18      	it	ne
 80211a2:	2301      	movne	r3, #1
 80211a4:	0692      	lsls	r2, r2, #26
 80211a6:	d42b      	bmi.n	8021200 <_printf_common+0xb0>
 80211a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80211ac:	4649      	mov	r1, r9
 80211ae:	4638      	mov	r0, r7
 80211b0:	47c0      	blx	r8
 80211b2:	3001      	adds	r0, #1
 80211b4:	d01e      	beq.n	80211f4 <_printf_common+0xa4>
 80211b6:	6823      	ldr	r3, [r4, #0]
 80211b8:	68e5      	ldr	r5, [r4, #12]
 80211ba:	6832      	ldr	r2, [r6, #0]
 80211bc:	f003 0306 	and.w	r3, r3, #6
 80211c0:	2b04      	cmp	r3, #4
 80211c2:	bf08      	it	eq
 80211c4:	1aad      	subeq	r5, r5, r2
 80211c6:	68a3      	ldr	r3, [r4, #8]
 80211c8:	6922      	ldr	r2, [r4, #16]
 80211ca:	bf0c      	ite	eq
 80211cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80211d0:	2500      	movne	r5, #0
 80211d2:	4293      	cmp	r3, r2
 80211d4:	bfc4      	itt	gt
 80211d6:	1a9b      	subgt	r3, r3, r2
 80211d8:	18ed      	addgt	r5, r5, r3
 80211da:	2600      	movs	r6, #0
 80211dc:	341a      	adds	r4, #26
 80211de:	42b5      	cmp	r5, r6
 80211e0:	d11a      	bne.n	8021218 <_printf_common+0xc8>
 80211e2:	2000      	movs	r0, #0
 80211e4:	e008      	b.n	80211f8 <_printf_common+0xa8>
 80211e6:	2301      	movs	r3, #1
 80211e8:	4652      	mov	r2, sl
 80211ea:	4649      	mov	r1, r9
 80211ec:	4638      	mov	r0, r7
 80211ee:	47c0      	blx	r8
 80211f0:	3001      	adds	r0, #1
 80211f2:	d103      	bne.n	80211fc <_printf_common+0xac>
 80211f4:	f04f 30ff 	mov.w	r0, #4294967295
 80211f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211fc:	3501      	adds	r5, #1
 80211fe:	e7c6      	b.n	802118e <_printf_common+0x3e>
 8021200:	18e1      	adds	r1, r4, r3
 8021202:	1c5a      	adds	r2, r3, #1
 8021204:	2030      	movs	r0, #48	; 0x30
 8021206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802120a:	4422      	add	r2, r4
 802120c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021214:	3302      	adds	r3, #2
 8021216:	e7c7      	b.n	80211a8 <_printf_common+0x58>
 8021218:	2301      	movs	r3, #1
 802121a:	4622      	mov	r2, r4
 802121c:	4649      	mov	r1, r9
 802121e:	4638      	mov	r0, r7
 8021220:	47c0      	blx	r8
 8021222:	3001      	adds	r0, #1
 8021224:	d0e6      	beq.n	80211f4 <_printf_common+0xa4>
 8021226:	3601      	adds	r6, #1
 8021228:	e7d9      	b.n	80211de <_printf_common+0x8e>
	...

0802122c <_printf_i>:
 802122c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021230:	7e0f      	ldrb	r7, [r1, #24]
 8021232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021234:	2f78      	cmp	r7, #120	; 0x78
 8021236:	4691      	mov	r9, r2
 8021238:	4680      	mov	r8, r0
 802123a:	460c      	mov	r4, r1
 802123c:	469a      	mov	sl, r3
 802123e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8021242:	d807      	bhi.n	8021254 <_printf_i+0x28>
 8021244:	2f62      	cmp	r7, #98	; 0x62
 8021246:	d80a      	bhi.n	802125e <_printf_i+0x32>
 8021248:	2f00      	cmp	r7, #0
 802124a:	f000 80d8 	beq.w	80213fe <_printf_i+0x1d2>
 802124e:	2f58      	cmp	r7, #88	; 0x58
 8021250:	f000 80a3 	beq.w	802139a <_printf_i+0x16e>
 8021254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802125c:	e03a      	b.n	80212d4 <_printf_i+0xa8>
 802125e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021262:	2b15      	cmp	r3, #21
 8021264:	d8f6      	bhi.n	8021254 <_printf_i+0x28>
 8021266:	a101      	add	r1, pc, #4	; (adr r1, 802126c <_printf_i+0x40>)
 8021268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802126c:	080212c5 	.word	0x080212c5
 8021270:	080212d9 	.word	0x080212d9
 8021274:	08021255 	.word	0x08021255
 8021278:	08021255 	.word	0x08021255
 802127c:	08021255 	.word	0x08021255
 8021280:	08021255 	.word	0x08021255
 8021284:	080212d9 	.word	0x080212d9
 8021288:	08021255 	.word	0x08021255
 802128c:	08021255 	.word	0x08021255
 8021290:	08021255 	.word	0x08021255
 8021294:	08021255 	.word	0x08021255
 8021298:	080213e5 	.word	0x080213e5
 802129c:	08021309 	.word	0x08021309
 80212a0:	080213c7 	.word	0x080213c7
 80212a4:	08021255 	.word	0x08021255
 80212a8:	08021255 	.word	0x08021255
 80212ac:	08021407 	.word	0x08021407
 80212b0:	08021255 	.word	0x08021255
 80212b4:	08021309 	.word	0x08021309
 80212b8:	08021255 	.word	0x08021255
 80212bc:	08021255 	.word	0x08021255
 80212c0:	080213cf 	.word	0x080213cf
 80212c4:	682b      	ldr	r3, [r5, #0]
 80212c6:	1d1a      	adds	r2, r3, #4
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	602a      	str	r2, [r5, #0]
 80212cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80212d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80212d4:	2301      	movs	r3, #1
 80212d6:	e0a3      	b.n	8021420 <_printf_i+0x1f4>
 80212d8:	6820      	ldr	r0, [r4, #0]
 80212da:	6829      	ldr	r1, [r5, #0]
 80212dc:	0606      	lsls	r6, r0, #24
 80212de:	f101 0304 	add.w	r3, r1, #4
 80212e2:	d50a      	bpl.n	80212fa <_printf_i+0xce>
 80212e4:	680e      	ldr	r6, [r1, #0]
 80212e6:	602b      	str	r3, [r5, #0]
 80212e8:	2e00      	cmp	r6, #0
 80212ea:	da03      	bge.n	80212f4 <_printf_i+0xc8>
 80212ec:	232d      	movs	r3, #45	; 0x2d
 80212ee:	4276      	negs	r6, r6
 80212f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80212f4:	485e      	ldr	r0, [pc, #376]	; (8021470 <_printf_i+0x244>)
 80212f6:	230a      	movs	r3, #10
 80212f8:	e019      	b.n	802132e <_printf_i+0x102>
 80212fa:	680e      	ldr	r6, [r1, #0]
 80212fc:	602b      	str	r3, [r5, #0]
 80212fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021302:	bf18      	it	ne
 8021304:	b236      	sxthne	r6, r6
 8021306:	e7ef      	b.n	80212e8 <_printf_i+0xbc>
 8021308:	682b      	ldr	r3, [r5, #0]
 802130a:	6820      	ldr	r0, [r4, #0]
 802130c:	1d19      	adds	r1, r3, #4
 802130e:	6029      	str	r1, [r5, #0]
 8021310:	0601      	lsls	r1, r0, #24
 8021312:	d501      	bpl.n	8021318 <_printf_i+0xec>
 8021314:	681e      	ldr	r6, [r3, #0]
 8021316:	e002      	b.n	802131e <_printf_i+0xf2>
 8021318:	0646      	lsls	r6, r0, #25
 802131a:	d5fb      	bpl.n	8021314 <_printf_i+0xe8>
 802131c:	881e      	ldrh	r6, [r3, #0]
 802131e:	4854      	ldr	r0, [pc, #336]	; (8021470 <_printf_i+0x244>)
 8021320:	2f6f      	cmp	r7, #111	; 0x6f
 8021322:	bf0c      	ite	eq
 8021324:	2308      	moveq	r3, #8
 8021326:	230a      	movne	r3, #10
 8021328:	2100      	movs	r1, #0
 802132a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802132e:	6865      	ldr	r5, [r4, #4]
 8021330:	60a5      	str	r5, [r4, #8]
 8021332:	2d00      	cmp	r5, #0
 8021334:	bfa2      	ittt	ge
 8021336:	6821      	ldrge	r1, [r4, #0]
 8021338:	f021 0104 	bicge.w	r1, r1, #4
 802133c:	6021      	strge	r1, [r4, #0]
 802133e:	b90e      	cbnz	r6, 8021344 <_printf_i+0x118>
 8021340:	2d00      	cmp	r5, #0
 8021342:	d04d      	beq.n	80213e0 <_printf_i+0x1b4>
 8021344:	4615      	mov	r5, r2
 8021346:	fbb6 f1f3 	udiv	r1, r6, r3
 802134a:	fb03 6711 	mls	r7, r3, r1, r6
 802134e:	5dc7      	ldrb	r7, [r0, r7]
 8021350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8021354:	4637      	mov	r7, r6
 8021356:	42bb      	cmp	r3, r7
 8021358:	460e      	mov	r6, r1
 802135a:	d9f4      	bls.n	8021346 <_printf_i+0x11a>
 802135c:	2b08      	cmp	r3, #8
 802135e:	d10b      	bne.n	8021378 <_printf_i+0x14c>
 8021360:	6823      	ldr	r3, [r4, #0]
 8021362:	07de      	lsls	r6, r3, #31
 8021364:	d508      	bpl.n	8021378 <_printf_i+0x14c>
 8021366:	6923      	ldr	r3, [r4, #16]
 8021368:	6861      	ldr	r1, [r4, #4]
 802136a:	4299      	cmp	r1, r3
 802136c:	bfde      	ittt	le
 802136e:	2330      	movle	r3, #48	; 0x30
 8021370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021378:	1b52      	subs	r2, r2, r5
 802137a:	6122      	str	r2, [r4, #16]
 802137c:	f8cd a000 	str.w	sl, [sp]
 8021380:	464b      	mov	r3, r9
 8021382:	aa03      	add	r2, sp, #12
 8021384:	4621      	mov	r1, r4
 8021386:	4640      	mov	r0, r8
 8021388:	f7ff fee2 	bl	8021150 <_printf_common>
 802138c:	3001      	adds	r0, #1
 802138e:	d14c      	bne.n	802142a <_printf_i+0x1fe>
 8021390:	f04f 30ff 	mov.w	r0, #4294967295
 8021394:	b004      	add	sp, #16
 8021396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802139a:	4835      	ldr	r0, [pc, #212]	; (8021470 <_printf_i+0x244>)
 802139c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80213a0:	6829      	ldr	r1, [r5, #0]
 80213a2:	6823      	ldr	r3, [r4, #0]
 80213a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80213a8:	6029      	str	r1, [r5, #0]
 80213aa:	061d      	lsls	r5, r3, #24
 80213ac:	d514      	bpl.n	80213d8 <_printf_i+0x1ac>
 80213ae:	07df      	lsls	r7, r3, #31
 80213b0:	bf44      	itt	mi
 80213b2:	f043 0320 	orrmi.w	r3, r3, #32
 80213b6:	6023      	strmi	r3, [r4, #0]
 80213b8:	b91e      	cbnz	r6, 80213c2 <_printf_i+0x196>
 80213ba:	6823      	ldr	r3, [r4, #0]
 80213bc:	f023 0320 	bic.w	r3, r3, #32
 80213c0:	6023      	str	r3, [r4, #0]
 80213c2:	2310      	movs	r3, #16
 80213c4:	e7b0      	b.n	8021328 <_printf_i+0xfc>
 80213c6:	6823      	ldr	r3, [r4, #0]
 80213c8:	f043 0320 	orr.w	r3, r3, #32
 80213cc:	6023      	str	r3, [r4, #0]
 80213ce:	2378      	movs	r3, #120	; 0x78
 80213d0:	4828      	ldr	r0, [pc, #160]	; (8021474 <_printf_i+0x248>)
 80213d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80213d6:	e7e3      	b.n	80213a0 <_printf_i+0x174>
 80213d8:	0659      	lsls	r1, r3, #25
 80213da:	bf48      	it	mi
 80213dc:	b2b6      	uxthmi	r6, r6
 80213de:	e7e6      	b.n	80213ae <_printf_i+0x182>
 80213e0:	4615      	mov	r5, r2
 80213e2:	e7bb      	b.n	802135c <_printf_i+0x130>
 80213e4:	682b      	ldr	r3, [r5, #0]
 80213e6:	6826      	ldr	r6, [r4, #0]
 80213e8:	6961      	ldr	r1, [r4, #20]
 80213ea:	1d18      	adds	r0, r3, #4
 80213ec:	6028      	str	r0, [r5, #0]
 80213ee:	0635      	lsls	r5, r6, #24
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	d501      	bpl.n	80213f8 <_printf_i+0x1cc>
 80213f4:	6019      	str	r1, [r3, #0]
 80213f6:	e002      	b.n	80213fe <_printf_i+0x1d2>
 80213f8:	0670      	lsls	r0, r6, #25
 80213fa:	d5fb      	bpl.n	80213f4 <_printf_i+0x1c8>
 80213fc:	8019      	strh	r1, [r3, #0]
 80213fe:	2300      	movs	r3, #0
 8021400:	6123      	str	r3, [r4, #16]
 8021402:	4615      	mov	r5, r2
 8021404:	e7ba      	b.n	802137c <_printf_i+0x150>
 8021406:	682b      	ldr	r3, [r5, #0]
 8021408:	1d1a      	adds	r2, r3, #4
 802140a:	602a      	str	r2, [r5, #0]
 802140c:	681d      	ldr	r5, [r3, #0]
 802140e:	6862      	ldr	r2, [r4, #4]
 8021410:	2100      	movs	r1, #0
 8021412:	4628      	mov	r0, r5
 8021414:	f7de ff2c 	bl	8000270 <memchr>
 8021418:	b108      	cbz	r0, 802141e <_printf_i+0x1f2>
 802141a:	1b40      	subs	r0, r0, r5
 802141c:	6060      	str	r0, [r4, #4]
 802141e:	6863      	ldr	r3, [r4, #4]
 8021420:	6123      	str	r3, [r4, #16]
 8021422:	2300      	movs	r3, #0
 8021424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021428:	e7a8      	b.n	802137c <_printf_i+0x150>
 802142a:	6923      	ldr	r3, [r4, #16]
 802142c:	462a      	mov	r2, r5
 802142e:	4649      	mov	r1, r9
 8021430:	4640      	mov	r0, r8
 8021432:	47d0      	blx	sl
 8021434:	3001      	adds	r0, #1
 8021436:	d0ab      	beq.n	8021390 <_printf_i+0x164>
 8021438:	6823      	ldr	r3, [r4, #0]
 802143a:	079b      	lsls	r3, r3, #30
 802143c:	d413      	bmi.n	8021466 <_printf_i+0x23a>
 802143e:	68e0      	ldr	r0, [r4, #12]
 8021440:	9b03      	ldr	r3, [sp, #12]
 8021442:	4298      	cmp	r0, r3
 8021444:	bfb8      	it	lt
 8021446:	4618      	movlt	r0, r3
 8021448:	e7a4      	b.n	8021394 <_printf_i+0x168>
 802144a:	2301      	movs	r3, #1
 802144c:	4632      	mov	r2, r6
 802144e:	4649      	mov	r1, r9
 8021450:	4640      	mov	r0, r8
 8021452:	47d0      	blx	sl
 8021454:	3001      	adds	r0, #1
 8021456:	d09b      	beq.n	8021390 <_printf_i+0x164>
 8021458:	3501      	adds	r5, #1
 802145a:	68e3      	ldr	r3, [r4, #12]
 802145c:	9903      	ldr	r1, [sp, #12]
 802145e:	1a5b      	subs	r3, r3, r1
 8021460:	42ab      	cmp	r3, r5
 8021462:	dcf2      	bgt.n	802144a <_printf_i+0x21e>
 8021464:	e7eb      	b.n	802143e <_printf_i+0x212>
 8021466:	2500      	movs	r5, #0
 8021468:	f104 0619 	add.w	r6, r4, #25
 802146c:	e7f5      	b.n	802145a <_printf_i+0x22e>
 802146e:	bf00      	nop
 8021470:	08026ae9 	.word	0x08026ae9
 8021474:	08026afa 	.word	0x08026afa

08021478 <_putc_r>:
 8021478:	b570      	push	{r4, r5, r6, lr}
 802147a:	460d      	mov	r5, r1
 802147c:	4614      	mov	r4, r2
 802147e:	4606      	mov	r6, r0
 8021480:	b118      	cbz	r0, 802148a <_putc_r+0x12>
 8021482:	6983      	ldr	r3, [r0, #24]
 8021484:	b90b      	cbnz	r3, 802148a <_putc_r+0x12>
 8021486:	f7ff fa89 	bl	802099c <__sinit>
 802148a:	4b1c      	ldr	r3, [pc, #112]	; (80214fc <_putc_r+0x84>)
 802148c:	429c      	cmp	r4, r3
 802148e:	d124      	bne.n	80214da <_putc_r+0x62>
 8021490:	6874      	ldr	r4, [r6, #4]
 8021492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021494:	07d8      	lsls	r0, r3, #31
 8021496:	d405      	bmi.n	80214a4 <_putc_r+0x2c>
 8021498:	89a3      	ldrh	r3, [r4, #12]
 802149a:	0599      	lsls	r1, r3, #22
 802149c:	d402      	bmi.n	80214a4 <_putc_r+0x2c>
 802149e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80214a0:	f7ff fb2c 	bl	8020afc <__retarget_lock_acquire_recursive>
 80214a4:	68a3      	ldr	r3, [r4, #8]
 80214a6:	3b01      	subs	r3, #1
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	60a3      	str	r3, [r4, #8]
 80214ac:	da05      	bge.n	80214ba <_putc_r+0x42>
 80214ae:	69a2      	ldr	r2, [r4, #24]
 80214b0:	4293      	cmp	r3, r2
 80214b2:	db1c      	blt.n	80214ee <_putc_r+0x76>
 80214b4:	b2eb      	uxtb	r3, r5
 80214b6:	2b0a      	cmp	r3, #10
 80214b8:	d019      	beq.n	80214ee <_putc_r+0x76>
 80214ba:	6823      	ldr	r3, [r4, #0]
 80214bc:	1c5a      	adds	r2, r3, #1
 80214be:	6022      	str	r2, [r4, #0]
 80214c0:	701d      	strb	r5, [r3, #0]
 80214c2:	b2ed      	uxtb	r5, r5
 80214c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80214c6:	07da      	lsls	r2, r3, #31
 80214c8:	d405      	bmi.n	80214d6 <_putc_r+0x5e>
 80214ca:	89a3      	ldrh	r3, [r4, #12]
 80214cc:	059b      	lsls	r3, r3, #22
 80214ce:	d402      	bmi.n	80214d6 <_putc_r+0x5e>
 80214d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80214d2:	f7ff fb14 	bl	8020afe <__retarget_lock_release_recursive>
 80214d6:	4628      	mov	r0, r5
 80214d8:	bd70      	pop	{r4, r5, r6, pc}
 80214da:	4b09      	ldr	r3, [pc, #36]	; (8021500 <_putc_r+0x88>)
 80214dc:	429c      	cmp	r4, r3
 80214de:	d101      	bne.n	80214e4 <_putc_r+0x6c>
 80214e0:	68b4      	ldr	r4, [r6, #8]
 80214e2:	e7d6      	b.n	8021492 <_putc_r+0x1a>
 80214e4:	4b07      	ldr	r3, [pc, #28]	; (8021504 <_putc_r+0x8c>)
 80214e6:	429c      	cmp	r4, r3
 80214e8:	bf08      	it	eq
 80214ea:	68f4      	ldreq	r4, [r6, #12]
 80214ec:	e7d1      	b.n	8021492 <_putc_r+0x1a>
 80214ee:	4629      	mov	r1, r5
 80214f0:	4622      	mov	r2, r4
 80214f2:	4630      	mov	r0, r6
 80214f4:	f7ff f85a 	bl	80205ac <__swbuf_r>
 80214f8:	4605      	mov	r5, r0
 80214fa:	e7e3      	b.n	80214c4 <_putc_r+0x4c>
 80214fc:	08026a98 	.word	0x08026a98
 8021500:	08026ab8 	.word	0x08026ab8
 8021504:	08026a78 	.word	0x08026a78

08021508 <__sread>:
 8021508:	b510      	push	{r4, lr}
 802150a:	460c      	mov	r4, r1
 802150c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021510:	f000 f8cc 	bl	80216ac <_read_r>
 8021514:	2800      	cmp	r0, #0
 8021516:	bfab      	itete	ge
 8021518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802151a:	89a3      	ldrhlt	r3, [r4, #12]
 802151c:	181b      	addge	r3, r3, r0
 802151e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021522:	bfac      	ite	ge
 8021524:	6563      	strge	r3, [r4, #84]	; 0x54
 8021526:	81a3      	strhlt	r3, [r4, #12]
 8021528:	bd10      	pop	{r4, pc}

0802152a <__swrite>:
 802152a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802152e:	461f      	mov	r7, r3
 8021530:	898b      	ldrh	r3, [r1, #12]
 8021532:	05db      	lsls	r3, r3, #23
 8021534:	4605      	mov	r5, r0
 8021536:	460c      	mov	r4, r1
 8021538:	4616      	mov	r6, r2
 802153a:	d505      	bpl.n	8021548 <__swrite+0x1e>
 802153c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021540:	2302      	movs	r3, #2
 8021542:	2200      	movs	r2, #0
 8021544:	f000 f870 	bl	8021628 <_lseek_r>
 8021548:	89a3      	ldrh	r3, [r4, #12]
 802154a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802154e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021552:	81a3      	strh	r3, [r4, #12]
 8021554:	4632      	mov	r2, r6
 8021556:	463b      	mov	r3, r7
 8021558:	4628      	mov	r0, r5
 802155a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802155e:	f000 b817 	b.w	8021590 <_write_r>

08021562 <__sseek>:
 8021562:	b510      	push	{r4, lr}
 8021564:	460c      	mov	r4, r1
 8021566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802156a:	f000 f85d 	bl	8021628 <_lseek_r>
 802156e:	1c43      	adds	r3, r0, #1
 8021570:	89a3      	ldrh	r3, [r4, #12]
 8021572:	bf15      	itete	ne
 8021574:	6560      	strne	r0, [r4, #84]	; 0x54
 8021576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802157a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802157e:	81a3      	strheq	r3, [r4, #12]
 8021580:	bf18      	it	ne
 8021582:	81a3      	strhne	r3, [r4, #12]
 8021584:	bd10      	pop	{r4, pc}

08021586 <__sclose>:
 8021586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802158a:	f000 b81b 	b.w	80215c4 <_close_r>
	...

08021590 <_write_r>:
 8021590:	b538      	push	{r3, r4, r5, lr}
 8021592:	4d07      	ldr	r5, [pc, #28]	; (80215b0 <_write_r+0x20>)
 8021594:	4604      	mov	r4, r0
 8021596:	4608      	mov	r0, r1
 8021598:	4611      	mov	r1, r2
 802159a:	2200      	movs	r2, #0
 802159c:	602a      	str	r2, [r5, #0]
 802159e:	461a      	mov	r2, r3
 80215a0:	f7f0 ff4d 	bl	801243e <_write>
 80215a4:	1c43      	adds	r3, r0, #1
 80215a6:	d102      	bne.n	80215ae <_write_r+0x1e>
 80215a8:	682b      	ldr	r3, [r5, #0]
 80215aa:	b103      	cbz	r3, 80215ae <_write_r+0x1e>
 80215ac:	6023      	str	r3, [r4, #0]
 80215ae:	bd38      	pop	{r3, r4, r5, pc}
 80215b0:	200136a8 	.word	0x200136a8

080215b4 <abort>:
 80215b4:	b508      	push	{r3, lr}
 80215b6:	2006      	movs	r0, #6
 80215b8:	f000 f8b2 	bl	8021720 <raise>
 80215bc:	2001      	movs	r0, #1
 80215be:	f7f0 ff17 	bl	80123f0 <_exit>
	...

080215c4 <_close_r>:
 80215c4:	b538      	push	{r3, r4, r5, lr}
 80215c6:	4d06      	ldr	r5, [pc, #24]	; (80215e0 <_close_r+0x1c>)
 80215c8:	2300      	movs	r3, #0
 80215ca:	4604      	mov	r4, r0
 80215cc:	4608      	mov	r0, r1
 80215ce:	602b      	str	r3, [r5, #0]
 80215d0:	f7f0 ff51 	bl	8012476 <_close>
 80215d4:	1c43      	adds	r3, r0, #1
 80215d6:	d102      	bne.n	80215de <_close_r+0x1a>
 80215d8:	682b      	ldr	r3, [r5, #0]
 80215da:	b103      	cbz	r3, 80215de <_close_r+0x1a>
 80215dc:	6023      	str	r3, [r4, #0]
 80215de:	bd38      	pop	{r3, r4, r5, pc}
 80215e0:	200136a8 	.word	0x200136a8

080215e4 <_fstat_r>:
 80215e4:	b538      	push	{r3, r4, r5, lr}
 80215e6:	4d07      	ldr	r5, [pc, #28]	; (8021604 <_fstat_r+0x20>)
 80215e8:	2300      	movs	r3, #0
 80215ea:	4604      	mov	r4, r0
 80215ec:	4608      	mov	r0, r1
 80215ee:	4611      	mov	r1, r2
 80215f0:	602b      	str	r3, [r5, #0]
 80215f2:	f7f0 ff4c 	bl	801248e <_fstat>
 80215f6:	1c43      	adds	r3, r0, #1
 80215f8:	d102      	bne.n	8021600 <_fstat_r+0x1c>
 80215fa:	682b      	ldr	r3, [r5, #0]
 80215fc:	b103      	cbz	r3, 8021600 <_fstat_r+0x1c>
 80215fe:	6023      	str	r3, [r4, #0]
 8021600:	bd38      	pop	{r3, r4, r5, pc}
 8021602:	bf00      	nop
 8021604:	200136a8 	.word	0x200136a8

08021608 <_isatty_r>:
 8021608:	b538      	push	{r3, r4, r5, lr}
 802160a:	4d06      	ldr	r5, [pc, #24]	; (8021624 <_isatty_r+0x1c>)
 802160c:	2300      	movs	r3, #0
 802160e:	4604      	mov	r4, r0
 8021610:	4608      	mov	r0, r1
 8021612:	602b      	str	r3, [r5, #0]
 8021614:	f7f0 ff4b 	bl	80124ae <_isatty>
 8021618:	1c43      	adds	r3, r0, #1
 802161a:	d102      	bne.n	8021622 <_isatty_r+0x1a>
 802161c:	682b      	ldr	r3, [r5, #0]
 802161e:	b103      	cbz	r3, 8021622 <_isatty_r+0x1a>
 8021620:	6023      	str	r3, [r4, #0]
 8021622:	bd38      	pop	{r3, r4, r5, pc}
 8021624:	200136a8 	.word	0x200136a8

08021628 <_lseek_r>:
 8021628:	b538      	push	{r3, r4, r5, lr}
 802162a:	4d07      	ldr	r5, [pc, #28]	; (8021648 <_lseek_r+0x20>)
 802162c:	4604      	mov	r4, r0
 802162e:	4608      	mov	r0, r1
 8021630:	4611      	mov	r1, r2
 8021632:	2200      	movs	r2, #0
 8021634:	602a      	str	r2, [r5, #0]
 8021636:	461a      	mov	r2, r3
 8021638:	f7f0 ff44 	bl	80124c4 <_lseek>
 802163c:	1c43      	adds	r3, r0, #1
 802163e:	d102      	bne.n	8021646 <_lseek_r+0x1e>
 8021640:	682b      	ldr	r3, [r5, #0]
 8021642:	b103      	cbz	r3, 8021646 <_lseek_r+0x1e>
 8021644:	6023      	str	r3, [r4, #0]
 8021646:	bd38      	pop	{r3, r4, r5, pc}
 8021648:	200136a8 	.word	0x200136a8

0802164c <_realloc_r>:
 802164c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021650:	4680      	mov	r8, r0
 8021652:	4614      	mov	r4, r2
 8021654:	460e      	mov	r6, r1
 8021656:	b921      	cbnz	r1, 8021662 <_realloc_r+0x16>
 8021658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802165c:	4611      	mov	r1, r2
 802165e:	f7fe bd59 	b.w	8020114 <_malloc_r>
 8021662:	b92a      	cbnz	r2, 8021670 <_realloc_r+0x24>
 8021664:	f7fe fcea 	bl	802003c <_free_r>
 8021668:	4625      	mov	r5, r4
 802166a:	4628      	mov	r0, r5
 802166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021670:	f000 f872 	bl	8021758 <_malloc_usable_size_r>
 8021674:	4284      	cmp	r4, r0
 8021676:	4607      	mov	r7, r0
 8021678:	d802      	bhi.n	8021680 <_realloc_r+0x34>
 802167a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802167e:	d812      	bhi.n	80216a6 <_realloc_r+0x5a>
 8021680:	4621      	mov	r1, r4
 8021682:	4640      	mov	r0, r8
 8021684:	f7fe fd46 	bl	8020114 <_malloc_r>
 8021688:	4605      	mov	r5, r0
 802168a:	2800      	cmp	r0, #0
 802168c:	d0ed      	beq.n	802166a <_realloc_r+0x1e>
 802168e:	42bc      	cmp	r4, r7
 8021690:	4622      	mov	r2, r4
 8021692:	4631      	mov	r1, r6
 8021694:	bf28      	it	cs
 8021696:	463a      	movcs	r2, r7
 8021698:	f7fe fca0 	bl	801ffdc <memcpy>
 802169c:	4631      	mov	r1, r6
 802169e:	4640      	mov	r0, r8
 80216a0:	f7fe fccc 	bl	802003c <_free_r>
 80216a4:	e7e1      	b.n	802166a <_realloc_r+0x1e>
 80216a6:	4635      	mov	r5, r6
 80216a8:	e7df      	b.n	802166a <_realloc_r+0x1e>
	...

080216ac <_read_r>:
 80216ac:	b538      	push	{r3, r4, r5, lr}
 80216ae:	4d07      	ldr	r5, [pc, #28]	; (80216cc <_read_r+0x20>)
 80216b0:	4604      	mov	r4, r0
 80216b2:	4608      	mov	r0, r1
 80216b4:	4611      	mov	r1, r2
 80216b6:	2200      	movs	r2, #0
 80216b8:	602a      	str	r2, [r5, #0]
 80216ba:	461a      	mov	r2, r3
 80216bc:	f7f0 fea2 	bl	8012404 <_read>
 80216c0:	1c43      	adds	r3, r0, #1
 80216c2:	d102      	bne.n	80216ca <_read_r+0x1e>
 80216c4:	682b      	ldr	r3, [r5, #0]
 80216c6:	b103      	cbz	r3, 80216ca <_read_r+0x1e>
 80216c8:	6023      	str	r3, [r4, #0]
 80216ca:	bd38      	pop	{r3, r4, r5, pc}
 80216cc:	200136a8 	.word	0x200136a8

080216d0 <_raise_r>:
 80216d0:	291f      	cmp	r1, #31
 80216d2:	b538      	push	{r3, r4, r5, lr}
 80216d4:	4604      	mov	r4, r0
 80216d6:	460d      	mov	r5, r1
 80216d8:	d904      	bls.n	80216e4 <_raise_r+0x14>
 80216da:	2316      	movs	r3, #22
 80216dc:	6003      	str	r3, [r0, #0]
 80216de:	f04f 30ff 	mov.w	r0, #4294967295
 80216e2:	bd38      	pop	{r3, r4, r5, pc}
 80216e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80216e6:	b112      	cbz	r2, 80216ee <_raise_r+0x1e>
 80216e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80216ec:	b94b      	cbnz	r3, 8021702 <_raise_r+0x32>
 80216ee:	4620      	mov	r0, r4
 80216f0:	f000 f830 	bl	8021754 <_getpid_r>
 80216f4:	462a      	mov	r2, r5
 80216f6:	4601      	mov	r1, r0
 80216f8:	4620      	mov	r0, r4
 80216fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80216fe:	f000 b817 	b.w	8021730 <_kill_r>
 8021702:	2b01      	cmp	r3, #1
 8021704:	d00a      	beq.n	802171c <_raise_r+0x4c>
 8021706:	1c59      	adds	r1, r3, #1
 8021708:	d103      	bne.n	8021712 <_raise_r+0x42>
 802170a:	2316      	movs	r3, #22
 802170c:	6003      	str	r3, [r0, #0]
 802170e:	2001      	movs	r0, #1
 8021710:	e7e7      	b.n	80216e2 <_raise_r+0x12>
 8021712:	2400      	movs	r4, #0
 8021714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021718:	4628      	mov	r0, r5
 802171a:	4798      	blx	r3
 802171c:	2000      	movs	r0, #0
 802171e:	e7e0      	b.n	80216e2 <_raise_r+0x12>

08021720 <raise>:
 8021720:	4b02      	ldr	r3, [pc, #8]	; (802172c <raise+0xc>)
 8021722:	4601      	mov	r1, r0
 8021724:	6818      	ldr	r0, [r3, #0]
 8021726:	f7ff bfd3 	b.w	80216d0 <_raise_r>
 802172a:	bf00      	nop
 802172c:	20000140 	.word	0x20000140

08021730 <_kill_r>:
 8021730:	b538      	push	{r3, r4, r5, lr}
 8021732:	4d07      	ldr	r5, [pc, #28]	; (8021750 <_kill_r+0x20>)
 8021734:	2300      	movs	r3, #0
 8021736:	4604      	mov	r4, r0
 8021738:	4608      	mov	r0, r1
 802173a:	4611      	mov	r1, r2
 802173c:	602b      	str	r3, [r5, #0]
 802173e:	f7f0 fe45 	bl	80123cc <_kill>
 8021742:	1c43      	adds	r3, r0, #1
 8021744:	d102      	bne.n	802174c <_kill_r+0x1c>
 8021746:	682b      	ldr	r3, [r5, #0]
 8021748:	b103      	cbz	r3, 802174c <_kill_r+0x1c>
 802174a:	6023      	str	r3, [r4, #0]
 802174c:	bd38      	pop	{r3, r4, r5, pc}
 802174e:	bf00      	nop
 8021750:	200136a8 	.word	0x200136a8

08021754 <_getpid_r>:
 8021754:	f7f0 be32 	b.w	80123bc <_getpid>

08021758 <_malloc_usable_size_r>:
 8021758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802175c:	1f18      	subs	r0, r3, #4
 802175e:	2b00      	cmp	r3, #0
 8021760:	bfbc      	itt	lt
 8021762:	580b      	ldrlt	r3, [r1, r0]
 8021764:	18c0      	addlt	r0, r0, r3
 8021766:	4770      	bx	lr

08021768 <_init>:
 8021768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802176a:	bf00      	nop
 802176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802176e:	bc08      	pop	{r3}
 8021770:	469e      	mov	lr, r3
 8021772:	4770      	bx	lr

08021774 <_fini>:
 8021774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021776:	bf00      	nop
 8021778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802177a:	bc08      	pop	{r3}
 802177c:	469e      	mov	lr, r3
 802177e:	4770      	bx	lr
